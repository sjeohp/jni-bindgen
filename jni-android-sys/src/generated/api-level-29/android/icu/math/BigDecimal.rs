// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-icu-math-BigDecimal"))]
__jni_bindgen! {
    /// public class [BigDecimal](https://developer.android.com/reference/android/icu/math/BigDecimal.html)
    ///
    /// Required feature: android-icu-math-BigDecimal
    public class BigDecimal ("android/icu/math/BigDecimal") extends crate::java::lang::Number, implements crate::java::io::Serializable, crate::java::lang::Comparable {

        /// [BigDecimal](https://developer.android.com/reference/android/icu/math/BigDecimal.html#BigDecimal(java.math.BigDecimal))
        ///
        /// Required features: "java-math-BigDecimal"
        #[cfg(any(feature = "all", all(feature = "java-math-BigDecimal")))]
        pub fn new_BigDecimal<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::math::BigDecimal>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::icu::math::BigDecimal>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/math/BigDecimal", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/math/BigDecimal;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/math/BigDecimal\0", "<init>\0", "(Ljava/math/BigDecimal;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [BigDecimal](https://developer.android.com/reference/android/icu/math/BigDecimal.html#BigDecimal(java.math.BigInteger))
        ///
        /// Required features: "java-math-BigInteger"
        #[cfg(any(feature = "all", all(feature = "java-math-BigInteger")))]
        pub fn new_BigInteger<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::math::BigInteger>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::icu::math::BigDecimal>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/math/BigDecimal", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/math/BigInteger;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/math/BigDecimal\0", "<init>\0", "(Ljava/math/BigInteger;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [BigDecimal](https://developer.android.com/reference/android/icu/math/BigDecimal.html#BigDecimal(java.math.BigInteger,%20int))
        ///
        /// Required features: "java-math-BigInteger"
        #[cfg(any(feature = "all", all(feature = "java-math-BigInteger")))]
        pub fn new_BigInteger_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::math::BigInteger>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::icu::math::BigDecimal>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/math/BigDecimal", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/math/BigInteger;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/math/BigDecimal\0", "<init>\0", "(Ljava/math/BigInteger;I)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [BigDecimal](https://developer.android.com/reference/android/icu/math/BigDecimal.html#BigDecimal(char%5B%5D))
        pub fn new_char_array<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::CharArray>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::icu::math::BigDecimal>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/math/BigDecimal", java.flags == PUBLIC, .name == "<init>", .descriptor == "([C)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/math/BigDecimal\0", "<init>\0", "([C)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [BigDecimal](https://developer.android.com/reference/android/icu/math/BigDecimal.html#BigDecimal(char%5B%5D,%20int,%20int))
        pub fn new_char_array_int_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::CharArray>>, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::icu::math::BigDecimal>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/math/BigDecimal", java.flags == PUBLIC, .name == "<init>", .descriptor == "([CII)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/math/BigDecimal\0", "<init>\0", "([CII)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [BigDecimal](https://developer.android.com/reference/android/icu/math/BigDecimal.html#BigDecimal(double))
        pub fn new_double<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f64) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::icu::math::BigDecimal>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/math/BigDecimal", java.flags == PUBLIC, .name == "<init>", .descriptor == "(D)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/math/BigDecimal\0", "<init>\0", "(D)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [BigDecimal](https://developer.android.com/reference/android/icu/math/BigDecimal.html#BigDecimal(int))
        pub fn new_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::icu::math::BigDecimal>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/math/BigDecimal", java.flags == PUBLIC, .name == "<init>", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/math/BigDecimal\0", "<init>\0", "(I)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [BigDecimal](https://developer.android.com/reference/android/icu/math/BigDecimal.html#BigDecimal(long))
        pub fn new_long<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::icu::math::BigDecimal>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/math/BigDecimal", java.flags == PUBLIC, .name == "<init>", .descriptor == "(J)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/math/BigDecimal\0", "<init>\0", "(J)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [BigDecimal](https://developer.android.com/reference/android/icu/math/BigDecimal.html#BigDecimal(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn new_String<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::icu::math::BigDecimal>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/math/BigDecimal", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/math/BigDecimal\0", "<init>\0", "(Ljava/lang/String;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [abs](https://developer.android.com/reference/android/icu/math/BigDecimal.html#abs())
        ///
        /// Required features: "android-icu-math-BigDecimal"
        #[cfg(any(feature = "all", all(feature = "android-icu-math-BigDecimal")))]
        pub fn abs<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::math::BigDecimal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/math/BigDecimal", java.flags == PUBLIC, .name == "abs", .descriptor == "()Landroid/icu/math/BigDecimal;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/math/BigDecimal\0", "abs\0", "()Landroid/icu/math/BigDecimal;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [abs](https://developer.android.com/reference/android/icu/math/BigDecimal.html#abs(android.icu.math.MathContext))
        ///
        /// Required features: "android-icu-math-BigDecimal", "android-icu-math-MathContext"
        #[cfg(any(feature = "all", all(feature = "android-icu-math-BigDecimal", feature = "android-icu-math-MathContext")))]
        pub fn abs_MathContext<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::math::MathContext>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::math::BigDecimal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/math/BigDecimal", java.flags == PUBLIC, .name == "abs", .descriptor == "(Landroid/icu/math/MathContext;)Landroid/icu/math/BigDecimal;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/math/BigDecimal\0", "abs\0", "(Landroid/icu/math/MathContext;)Landroid/icu/math/BigDecimal;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [add](https://developer.android.com/reference/android/icu/math/BigDecimal.html#add(android.icu.math.BigDecimal))
        ///
        /// Required features: "android-icu-math-BigDecimal"
        #[cfg(any(feature = "all", all(feature = "android-icu-math-BigDecimal")))]
        pub fn add_BigDecimal<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::math::BigDecimal>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::math::BigDecimal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/math/BigDecimal", java.flags == PUBLIC, .name == "add", .descriptor == "(Landroid/icu/math/BigDecimal;)Landroid/icu/math/BigDecimal;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/math/BigDecimal\0", "add\0", "(Landroid/icu/math/BigDecimal;)Landroid/icu/math/BigDecimal;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [add](https://developer.android.com/reference/android/icu/math/BigDecimal.html#add(android.icu.math.BigDecimal,%20android.icu.math.MathContext))
        ///
        /// Required features: "android-icu-math-BigDecimal", "android-icu-math-MathContext"
        #[cfg(any(feature = "all", all(feature = "android-icu-math-BigDecimal", feature = "android-icu-math-MathContext")))]
        pub fn add_BigDecimal_MathContext<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::math::BigDecimal>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::math::MathContext>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::math::BigDecimal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/math/BigDecimal", java.flags == PUBLIC, .name == "add", .descriptor == "(Landroid/icu/math/BigDecimal;Landroid/icu/math/MathContext;)Landroid/icu/math/BigDecimal;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/math/BigDecimal\0", "add\0", "(Landroid/icu/math/BigDecimal;Landroid/icu/math/MathContext;)Landroid/icu/math/BigDecimal;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [compareTo](https://developer.android.com/reference/android/icu/math/BigDecimal.html#compareTo(android.icu.math.BigDecimal))
        ///
        /// Required features: "android-icu-math-BigDecimal"
        #[cfg(any(feature = "all", all(feature = "android-icu-math-BigDecimal")))]
        pub fn compareTo_BigDecimal<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::math::BigDecimal>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/math/BigDecimal", java.flags == PUBLIC, .name == "compareTo", .descriptor == "(Landroid/icu/math/BigDecimal;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/math/BigDecimal\0", "compareTo\0", "(Landroid/icu/math/BigDecimal;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [compareTo](https://developer.android.com/reference/android/icu/math/BigDecimal.html#compareTo(android.icu.math.BigDecimal,%20android.icu.math.MathContext))
        ///
        /// Required features: "android-icu-math-BigDecimal", "android-icu-math-MathContext"
        #[cfg(any(feature = "all", all(feature = "android-icu-math-BigDecimal", feature = "android-icu-math-MathContext")))]
        pub fn compareTo_BigDecimal_MathContext<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::math::BigDecimal>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::math::MathContext>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/math/BigDecimal", java.flags == PUBLIC, .name == "compareTo", .descriptor == "(Landroid/icu/math/BigDecimal;Landroid/icu/math/MathContext;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/math/BigDecimal\0", "compareTo\0", "(Landroid/icu/math/BigDecimal;Landroid/icu/math/MathContext;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [divide](https://developer.android.com/reference/android/icu/math/BigDecimal.html#divide(android.icu.math.BigDecimal))
        ///
        /// Required features: "android-icu-math-BigDecimal"
        #[cfg(any(feature = "all", all(feature = "android-icu-math-BigDecimal")))]
        pub fn divide_BigDecimal<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::math::BigDecimal>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::math::BigDecimal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/math/BigDecimal", java.flags == PUBLIC, .name == "divide", .descriptor == "(Landroid/icu/math/BigDecimal;)Landroid/icu/math/BigDecimal;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/math/BigDecimal\0", "divide\0", "(Landroid/icu/math/BigDecimal;)Landroid/icu/math/BigDecimal;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [divide](https://developer.android.com/reference/android/icu/math/BigDecimal.html#divide(android.icu.math.BigDecimal,%20int))
        ///
        /// Required features: "android-icu-math-BigDecimal"
        #[cfg(any(feature = "all", all(feature = "android-icu-math-BigDecimal")))]
        pub fn divide_BigDecimal_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::math::BigDecimal>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::math::BigDecimal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/math/BigDecimal", java.flags == PUBLIC, .name == "divide", .descriptor == "(Landroid/icu/math/BigDecimal;I)Landroid/icu/math/BigDecimal;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/math/BigDecimal\0", "divide\0", "(Landroid/icu/math/BigDecimal;I)Landroid/icu/math/BigDecimal;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [divide](https://developer.android.com/reference/android/icu/math/BigDecimal.html#divide(android.icu.math.BigDecimal,%20int,%20int))
        ///
        /// Required features: "android-icu-math-BigDecimal"
        #[cfg(any(feature = "all", all(feature = "android-icu-math-BigDecimal")))]
        pub fn divide_BigDecimal_int_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::math::BigDecimal>>, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::math::BigDecimal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/math/BigDecimal", java.flags == PUBLIC, .name == "divide", .descriptor == "(Landroid/icu/math/BigDecimal;II)Landroid/icu/math/BigDecimal;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/math/BigDecimal\0", "divide\0", "(Landroid/icu/math/BigDecimal;II)Landroid/icu/math/BigDecimal;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [divide](https://developer.android.com/reference/android/icu/math/BigDecimal.html#divide(android.icu.math.BigDecimal,%20android.icu.math.MathContext))
        ///
        /// Required features: "android-icu-math-BigDecimal", "android-icu-math-MathContext"
        #[cfg(any(feature = "all", all(feature = "android-icu-math-BigDecimal", feature = "android-icu-math-MathContext")))]
        pub fn divide_BigDecimal_MathContext<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::math::BigDecimal>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::math::MathContext>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::math::BigDecimal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/math/BigDecimal", java.flags == PUBLIC, .name == "divide", .descriptor == "(Landroid/icu/math/BigDecimal;Landroid/icu/math/MathContext;)Landroid/icu/math/BigDecimal;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/math/BigDecimal\0", "divide\0", "(Landroid/icu/math/BigDecimal;Landroid/icu/math/MathContext;)Landroid/icu/math/BigDecimal;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [divideInteger](https://developer.android.com/reference/android/icu/math/BigDecimal.html#divideInteger(android.icu.math.BigDecimal))
        ///
        /// Required features: "android-icu-math-BigDecimal"
        #[cfg(any(feature = "all", all(feature = "android-icu-math-BigDecimal")))]
        pub fn divideInteger_BigDecimal<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::math::BigDecimal>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::math::BigDecimal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/math/BigDecimal", java.flags == PUBLIC, .name == "divideInteger", .descriptor == "(Landroid/icu/math/BigDecimal;)Landroid/icu/math/BigDecimal;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/math/BigDecimal\0", "divideInteger\0", "(Landroid/icu/math/BigDecimal;)Landroid/icu/math/BigDecimal;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [divideInteger](https://developer.android.com/reference/android/icu/math/BigDecimal.html#divideInteger(android.icu.math.BigDecimal,%20android.icu.math.MathContext))
        ///
        /// Required features: "android-icu-math-BigDecimal", "android-icu-math-MathContext"
        #[cfg(any(feature = "all", all(feature = "android-icu-math-BigDecimal", feature = "android-icu-math-MathContext")))]
        pub fn divideInteger_BigDecimal_MathContext<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::math::BigDecimal>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::math::MathContext>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::math::BigDecimal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/math/BigDecimal", java.flags == PUBLIC, .name == "divideInteger", .descriptor == "(Landroid/icu/math/BigDecimal;Landroid/icu/math/MathContext;)Landroid/icu/math/BigDecimal;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/math/BigDecimal\0", "divideInteger\0", "(Landroid/icu/math/BigDecimal;Landroid/icu/math/MathContext;)Landroid/icu/math/BigDecimal;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [max](https://developer.android.com/reference/android/icu/math/BigDecimal.html#max(android.icu.math.BigDecimal))
        ///
        /// Required features: "android-icu-math-BigDecimal"
        #[cfg(any(feature = "all", all(feature = "android-icu-math-BigDecimal")))]
        pub fn max_BigDecimal<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::math::BigDecimal>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::math::BigDecimal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/math/BigDecimal", java.flags == PUBLIC, .name == "max", .descriptor == "(Landroid/icu/math/BigDecimal;)Landroid/icu/math/BigDecimal;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/math/BigDecimal\0", "max\0", "(Landroid/icu/math/BigDecimal;)Landroid/icu/math/BigDecimal;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [max](https://developer.android.com/reference/android/icu/math/BigDecimal.html#max(android.icu.math.BigDecimal,%20android.icu.math.MathContext))
        ///
        /// Required features: "android-icu-math-BigDecimal", "android-icu-math-MathContext"
        #[cfg(any(feature = "all", all(feature = "android-icu-math-BigDecimal", feature = "android-icu-math-MathContext")))]
        pub fn max_BigDecimal_MathContext<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::math::BigDecimal>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::math::MathContext>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::math::BigDecimal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/math/BigDecimal", java.flags == PUBLIC, .name == "max", .descriptor == "(Landroid/icu/math/BigDecimal;Landroid/icu/math/MathContext;)Landroid/icu/math/BigDecimal;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/math/BigDecimal\0", "max\0", "(Landroid/icu/math/BigDecimal;Landroid/icu/math/MathContext;)Landroid/icu/math/BigDecimal;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [min](https://developer.android.com/reference/android/icu/math/BigDecimal.html#min(android.icu.math.BigDecimal))
        ///
        /// Required features: "android-icu-math-BigDecimal"
        #[cfg(any(feature = "all", all(feature = "android-icu-math-BigDecimal")))]
        pub fn min_BigDecimal<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::math::BigDecimal>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::math::BigDecimal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/math/BigDecimal", java.flags == PUBLIC, .name == "min", .descriptor == "(Landroid/icu/math/BigDecimal;)Landroid/icu/math/BigDecimal;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/math/BigDecimal\0", "min\0", "(Landroid/icu/math/BigDecimal;)Landroid/icu/math/BigDecimal;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [min](https://developer.android.com/reference/android/icu/math/BigDecimal.html#min(android.icu.math.BigDecimal,%20android.icu.math.MathContext))
        ///
        /// Required features: "android-icu-math-BigDecimal", "android-icu-math-MathContext"
        #[cfg(any(feature = "all", all(feature = "android-icu-math-BigDecimal", feature = "android-icu-math-MathContext")))]
        pub fn min_BigDecimal_MathContext<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::math::BigDecimal>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::math::MathContext>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::math::BigDecimal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/math/BigDecimal", java.flags == PUBLIC, .name == "min", .descriptor == "(Landroid/icu/math/BigDecimal;Landroid/icu/math/MathContext;)Landroid/icu/math/BigDecimal;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/math/BigDecimal\0", "min\0", "(Landroid/icu/math/BigDecimal;Landroid/icu/math/MathContext;)Landroid/icu/math/BigDecimal;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [multiply](https://developer.android.com/reference/android/icu/math/BigDecimal.html#multiply(android.icu.math.BigDecimal))
        ///
        /// Required features: "android-icu-math-BigDecimal"
        #[cfg(any(feature = "all", all(feature = "android-icu-math-BigDecimal")))]
        pub fn multiply_BigDecimal<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::math::BigDecimal>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::math::BigDecimal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/math/BigDecimal", java.flags == PUBLIC, .name == "multiply", .descriptor == "(Landroid/icu/math/BigDecimal;)Landroid/icu/math/BigDecimal;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/math/BigDecimal\0", "multiply\0", "(Landroid/icu/math/BigDecimal;)Landroid/icu/math/BigDecimal;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [multiply](https://developer.android.com/reference/android/icu/math/BigDecimal.html#multiply(android.icu.math.BigDecimal,%20android.icu.math.MathContext))
        ///
        /// Required features: "android-icu-math-BigDecimal", "android-icu-math-MathContext"
        #[cfg(any(feature = "all", all(feature = "android-icu-math-BigDecimal", feature = "android-icu-math-MathContext")))]
        pub fn multiply_BigDecimal_MathContext<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::math::BigDecimal>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::math::MathContext>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::math::BigDecimal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/math/BigDecimal", java.flags == PUBLIC, .name == "multiply", .descriptor == "(Landroid/icu/math/BigDecimal;Landroid/icu/math/MathContext;)Landroid/icu/math/BigDecimal;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/math/BigDecimal\0", "multiply\0", "(Landroid/icu/math/BigDecimal;Landroid/icu/math/MathContext;)Landroid/icu/math/BigDecimal;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [negate](https://developer.android.com/reference/android/icu/math/BigDecimal.html#negate())
        ///
        /// Required features: "android-icu-math-BigDecimal"
        #[cfg(any(feature = "all", all(feature = "android-icu-math-BigDecimal")))]
        pub fn negate<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::math::BigDecimal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/math/BigDecimal", java.flags == PUBLIC, .name == "negate", .descriptor == "()Landroid/icu/math/BigDecimal;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/math/BigDecimal\0", "negate\0", "()Landroid/icu/math/BigDecimal;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [negate](https://developer.android.com/reference/android/icu/math/BigDecimal.html#negate(android.icu.math.MathContext))
        ///
        /// Required features: "android-icu-math-BigDecimal", "android-icu-math-MathContext"
        #[cfg(any(feature = "all", all(feature = "android-icu-math-BigDecimal", feature = "android-icu-math-MathContext")))]
        pub fn negate_MathContext<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::math::MathContext>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::math::BigDecimal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/math/BigDecimal", java.flags == PUBLIC, .name == "negate", .descriptor == "(Landroid/icu/math/MathContext;)Landroid/icu/math/BigDecimal;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/math/BigDecimal\0", "negate\0", "(Landroid/icu/math/MathContext;)Landroid/icu/math/BigDecimal;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [plus](https://developer.android.com/reference/android/icu/math/BigDecimal.html#plus())
        ///
        /// Required features: "android-icu-math-BigDecimal"
        #[cfg(any(feature = "all", all(feature = "android-icu-math-BigDecimal")))]
        pub fn plus<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::math::BigDecimal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/math/BigDecimal", java.flags == PUBLIC, .name == "plus", .descriptor == "()Landroid/icu/math/BigDecimal;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/math/BigDecimal\0", "plus\0", "()Landroid/icu/math/BigDecimal;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [plus](https://developer.android.com/reference/android/icu/math/BigDecimal.html#plus(android.icu.math.MathContext))
        ///
        /// Required features: "android-icu-math-BigDecimal", "android-icu-math-MathContext"
        #[cfg(any(feature = "all", all(feature = "android-icu-math-BigDecimal", feature = "android-icu-math-MathContext")))]
        pub fn plus_MathContext<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::math::MathContext>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::math::BigDecimal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/math/BigDecimal", java.flags == PUBLIC, .name == "plus", .descriptor == "(Landroid/icu/math/MathContext;)Landroid/icu/math/BigDecimal;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/math/BigDecimal\0", "plus\0", "(Landroid/icu/math/MathContext;)Landroid/icu/math/BigDecimal;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [pow](https://developer.android.com/reference/android/icu/math/BigDecimal.html#pow(android.icu.math.BigDecimal))
        ///
        /// Required features: "android-icu-math-BigDecimal"
        #[cfg(any(feature = "all", all(feature = "android-icu-math-BigDecimal")))]
        pub fn pow_BigDecimal<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::math::BigDecimal>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::math::BigDecimal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/math/BigDecimal", java.flags == PUBLIC, .name == "pow", .descriptor == "(Landroid/icu/math/BigDecimal;)Landroid/icu/math/BigDecimal;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/math/BigDecimal\0", "pow\0", "(Landroid/icu/math/BigDecimal;)Landroid/icu/math/BigDecimal;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [pow](https://developer.android.com/reference/android/icu/math/BigDecimal.html#pow(android.icu.math.BigDecimal,%20android.icu.math.MathContext))
        ///
        /// Required features: "android-icu-math-BigDecimal", "android-icu-math-MathContext"
        #[cfg(any(feature = "all", all(feature = "android-icu-math-BigDecimal", feature = "android-icu-math-MathContext")))]
        pub fn pow_BigDecimal_MathContext<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::math::BigDecimal>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::math::MathContext>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::math::BigDecimal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/math/BigDecimal", java.flags == PUBLIC, .name == "pow", .descriptor == "(Landroid/icu/math/BigDecimal;Landroid/icu/math/MathContext;)Landroid/icu/math/BigDecimal;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/math/BigDecimal\0", "pow\0", "(Landroid/icu/math/BigDecimal;Landroid/icu/math/MathContext;)Landroid/icu/math/BigDecimal;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [remainder](https://developer.android.com/reference/android/icu/math/BigDecimal.html#remainder(android.icu.math.BigDecimal))
        ///
        /// Required features: "android-icu-math-BigDecimal"
        #[cfg(any(feature = "all", all(feature = "android-icu-math-BigDecimal")))]
        pub fn remainder_BigDecimal<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::math::BigDecimal>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::math::BigDecimal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/math/BigDecimal", java.flags == PUBLIC, .name == "remainder", .descriptor == "(Landroid/icu/math/BigDecimal;)Landroid/icu/math/BigDecimal;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/math/BigDecimal\0", "remainder\0", "(Landroid/icu/math/BigDecimal;)Landroid/icu/math/BigDecimal;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [remainder](https://developer.android.com/reference/android/icu/math/BigDecimal.html#remainder(android.icu.math.BigDecimal,%20android.icu.math.MathContext))
        ///
        /// Required features: "android-icu-math-BigDecimal", "android-icu-math-MathContext"
        #[cfg(any(feature = "all", all(feature = "android-icu-math-BigDecimal", feature = "android-icu-math-MathContext")))]
        pub fn remainder_BigDecimal_MathContext<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::math::BigDecimal>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::math::MathContext>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::math::BigDecimal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/math/BigDecimal", java.flags == PUBLIC, .name == "remainder", .descriptor == "(Landroid/icu/math/BigDecimal;Landroid/icu/math/MathContext;)Landroid/icu/math/BigDecimal;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/math/BigDecimal\0", "remainder\0", "(Landroid/icu/math/BigDecimal;Landroid/icu/math/MathContext;)Landroid/icu/math/BigDecimal;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [subtract](https://developer.android.com/reference/android/icu/math/BigDecimal.html#subtract(android.icu.math.BigDecimal))
        ///
        /// Required features: "android-icu-math-BigDecimal"
        #[cfg(any(feature = "all", all(feature = "android-icu-math-BigDecimal")))]
        pub fn subtract_BigDecimal<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::math::BigDecimal>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::math::BigDecimal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/math/BigDecimal", java.flags == PUBLIC, .name == "subtract", .descriptor == "(Landroid/icu/math/BigDecimal;)Landroid/icu/math/BigDecimal;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/math/BigDecimal\0", "subtract\0", "(Landroid/icu/math/BigDecimal;)Landroid/icu/math/BigDecimal;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [subtract](https://developer.android.com/reference/android/icu/math/BigDecimal.html#subtract(android.icu.math.BigDecimal,%20android.icu.math.MathContext))
        ///
        /// Required features: "android-icu-math-BigDecimal", "android-icu-math-MathContext"
        #[cfg(any(feature = "all", all(feature = "android-icu-math-BigDecimal", feature = "android-icu-math-MathContext")))]
        pub fn subtract_BigDecimal_MathContext<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::math::BigDecimal>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::math::MathContext>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::math::BigDecimal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/math/BigDecimal", java.flags == PUBLIC, .name == "subtract", .descriptor == "(Landroid/icu/math/BigDecimal;Landroid/icu/math/MathContext;)Landroid/icu/math/BigDecimal;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/math/BigDecimal\0", "subtract\0", "(Landroid/icu/math/BigDecimal;Landroid/icu/math/MathContext;)Landroid/icu/math/BigDecimal;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [byteValueExact](https://developer.android.com/reference/android/icu/math/BigDecimal.html#byteValueExact())
        pub fn byteValueExact<'env>(&'env self) -> __jni_bindgen::std::result::Result<i8, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/math/BigDecimal", java.flags == PUBLIC, .name == "byteValueExact", .descriptor == "()B"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/math/BigDecimal\0", "byteValueExact\0", "()B\0");
                __jni_env.call_byte_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [doubleValue](https://developer.android.com/reference/android/icu/math/BigDecimal.html#doubleValue())
        pub fn doubleValue<'env>(&'env self) -> __jni_bindgen::std::result::Result<f64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/math/BigDecimal", java.flags == PUBLIC, .name == "doubleValue", .descriptor == "()D"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/math/BigDecimal\0", "doubleValue\0", "()D\0");
                __jni_env.call_double_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [equals](https://developer.android.com/reference/android/icu/math/BigDecimal.html#equals(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn equals<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/math/BigDecimal", java.flags == PUBLIC, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/math/BigDecimal\0", "equals\0", "(Ljava/lang/Object;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [floatValue](https://developer.android.com/reference/android/icu/math/BigDecimal.html#floatValue())
        pub fn floatValue<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/math/BigDecimal", java.flags == PUBLIC, .name == "floatValue", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/math/BigDecimal\0", "floatValue\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [format](https://developer.android.com/reference/android/icu/math/BigDecimal.html#format(int,%20int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn format_int_int<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/math/BigDecimal", java.flags == PUBLIC, .name == "format", .descriptor == "(II)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/math/BigDecimal\0", "format\0", "(II)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [format](https://developer.android.com/reference/android/icu/math/BigDecimal.html#format(int,%20int,%20int,%20int,%20int,%20int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn format_int_int_int_int_int_int<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: i32, arg4: i32, arg5: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/math/BigDecimal", java.flags == PUBLIC, .name == "format", .descriptor == "(IIIIII)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/math/BigDecimal\0", "format\0", "(IIIIII)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hashCode](https://developer.android.com/reference/android/icu/math/BigDecimal.html#hashCode())
        pub fn hashCode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/math/BigDecimal", java.flags == PUBLIC, .name == "hashCode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/math/BigDecimal\0", "hashCode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [intValue](https://developer.android.com/reference/android/icu/math/BigDecimal.html#intValue())
        pub fn intValue<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/math/BigDecimal", java.flags == PUBLIC, .name == "intValue", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/math/BigDecimal\0", "intValue\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [intValueExact](https://developer.android.com/reference/android/icu/math/BigDecimal.html#intValueExact())
        pub fn intValueExact<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/math/BigDecimal", java.flags == PUBLIC, .name == "intValueExact", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/math/BigDecimal\0", "intValueExact\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [longValue](https://developer.android.com/reference/android/icu/math/BigDecimal.html#longValue())
        pub fn longValue<'env>(&'env self) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/math/BigDecimal", java.flags == PUBLIC, .name == "longValue", .descriptor == "()J"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/math/BigDecimal\0", "longValue\0", "()J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [longValueExact](https://developer.android.com/reference/android/icu/math/BigDecimal.html#longValueExact())
        pub fn longValueExact<'env>(&'env self) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/math/BigDecimal", java.flags == PUBLIC, .name == "longValueExact", .descriptor == "()J"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/math/BigDecimal\0", "longValueExact\0", "()J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [movePointLeft](https://developer.android.com/reference/android/icu/math/BigDecimal.html#movePointLeft(int))
        ///
        /// Required features: "android-icu-math-BigDecimal"
        #[cfg(any(feature = "all", all(feature = "android-icu-math-BigDecimal")))]
        pub fn movePointLeft<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::math::BigDecimal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/math/BigDecimal", java.flags == PUBLIC, .name == "movePointLeft", .descriptor == "(I)Landroid/icu/math/BigDecimal;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/math/BigDecimal\0", "movePointLeft\0", "(I)Landroid/icu/math/BigDecimal;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [movePointRight](https://developer.android.com/reference/android/icu/math/BigDecimal.html#movePointRight(int))
        ///
        /// Required features: "android-icu-math-BigDecimal"
        #[cfg(any(feature = "all", all(feature = "android-icu-math-BigDecimal")))]
        pub fn movePointRight<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::math::BigDecimal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/math/BigDecimal", java.flags == PUBLIC, .name == "movePointRight", .descriptor == "(I)Landroid/icu/math/BigDecimal;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/math/BigDecimal\0", "movePointRight\0", "(I)Landroid/icu/math/BigDecimal;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [scale](https://developer.android.com/reference/android/icu/math/BigDecimal.html#scale())
        pub fn scale<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/math/BigDecimal", java.flags == PUBLIC, .name == "scale", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/math/BigDecimal\0", "scale\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setScale](https://developer.android.com/reference/android/icu/math/BigDecimal.html#setScale(int))
        ///
        /// Required features: "android-icu-math-BigDecimal"
        #[cfg(any(feature = "all", all(feature = "android-icu-math-BigDecimal")))]
        pub fn setScale_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::math::BigDecimal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/math/BigDecimal", java.flags == PUBLIC, .name == "setScale", .descriptor == "(I)Landroid/icu/math/BigDecimal;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/math/BigDecimal\0", "setScale\0", "(I)Landroid/icu/math/BigDecimal;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setScale](https://developer.android.com/reference/android/icu/math/BigDecimal.html#setScale(int,%20int))
        ///
        /// Required features: "android-icu-math-BigDecimal"
        #[cfg(any(feature = "all", all(feature = "android-icu-math-BigDecimal")))]
        pub fn setScale_int_int<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::math::BigDecimal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/math/BigDecimal", java.flags == PUBLIC, .name == "setScale", .descriptor == "(II)Landroid/icu/math/BigDecimal;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/math/BigDecimal\0", "setScale\0", "(II)Landroid/icu/math/BigDecimal;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [shortValueExact](https://developer.android.com/reference/android/icu/math/BigDecimal.html#shortValueExact())
        pub fn shortValueExact<'env>(&'env self) -> __jni_bindgen::std::result::Result<i16, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/math/BigDecimal", java.flags == PUBLIC, .name == "shortValueExact", .descriptor == "()S"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/math/BigDecimal\0", "shortValueExact\0", "()S\0");
                __jni_env.call_short_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [signum](https://developer.android.com/reference/android/icu/math/BigDecimal.html#signum())
        pub fn signum<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/math/BigDecimal", java.flags == PUBLIC, .name == "signum", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/math/BigDecimal\0", "signum\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toBigDecimal](https://developer.android.com/reference/android/icu/math/BigDecimal.html#toBigDecimal())
        ///
        /// Required features: "java-math-BigDecimal"
        #[cfg(any(feature = "all", all(feature = "java-math-BigDecimal")))]
        pub fn toBigDecimal<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::math::BigDecimal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/math/BigDecimal", java.flags == PUBLIC, .name == "toBigDecimal", .descriptor == "()Ljava/math/BigDecimal;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/math/BigDecimal\0", "toBigDecimal\0", "()Ljava/math/BigDecimal;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toBigInteger](https://developer.android.com/reference/android/icu/math/BigDecimal.html#toBigInteger())
        ///
        /// Required features: "java-math-BigInteger"
        #[cfg(any(feature = "all", all(feature = "java-math-BigInteger")))]
        pub fn toBigInteger<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::math::BigInteger>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/math/BigDecimal", java.flags == PUBLIC, .name == "toBigInteger", .descriptor == "()Ljava/math/BigInteger;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/math/BigDecimal\0", "toBigInteger\0", "()Ljava/math/BigInteger;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toBigIntegerExact](https://developer.android.com/reference/android/icu/math/BigDecimal.html#toBigIntegerExact())
        ///
        /// Required features: "java-math-BigInteger"
        #[cfg(any(feature = "all", all(feature = "java-math-BigInteger")))]
        pub fn toBigIntegerExact<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::math::BigInteger>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/math/BigDecimal", java.flags == PUBLIC, .name == "toBigIntegerExact", .descriptor == "()Ljava/math/BigInteger;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/math/BigDecimal\0", "toBigIntegerExact\0", "()Ljava/math/BigInteger;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toCharArray](https://developer.android.com/reference/android/icu/math/BigDecimal.html#toCharArray())
        pub fn toCharArray<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::CharArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/math/BigDecimal", java.flags == PUBLIC, .name == "toCharArray", .descriptor == "()[C"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/math/BigDecimal\0", "toCharArray\0", "()[C\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/android/icu/math/BigDecimal.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/math/BigDecimal", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/math/BigDecimal\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unscaledValue](https://developer.android.com/reference/android/icu/math/BigDecimal.html#unscaledValue())
        ///
        /// Required features: "java-math-BigInteger"
        #[cfg(any(feature = "all", all(feature = "java-math-BigInteger")))]
        pub fn unscaledValue<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::math::BigInteger>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/math/BigDecimal", java.flags == PUBLIC, .name == "unscaledValue", .descriptor == "()Ljava/math/BigInteger;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/math/BigDecimal\0", "unscaledValue\0", "()Ljava/math/BigInteger;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [valueOf](https://developer.android.com/reference/android/icu/math/BigDecimal.html#valueOf(double))
        ///
        /// Required features: "android-icu-math-BigDecimal"
        #[cfg(any(feature = "all", all(feature = "android-icu-math-BigDecimal")))]
        pub fn valueOf_double<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::math::BigDecimal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/math/BigDecimal", java.flags == PUBLIC | STATIC, .name == "valueOf", .descriptor == "(D)Landroid/icu/math/BigDecimal;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/icu/math/BigDecimal\0", "valueOf\0", "(D)Landroid/icu/math/BigDecimal;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [valueOf](https://developer.android.com/reference/android/icu/math/BigDecimal.html#valueOf(long))
        ///
        /// Required features: "android-icu-math-BigDecimal"
        #[cfg(any(feature = "all", all(feature = "android-icu-math-BigDecimal")))]
        pub fn valueOf_long<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::math::BigDecimal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/math/BigDecimal", java.flags == PUBLIC | STATIC, .name == "valueOf", .descriptor == "(J)Landroid/icu/math/BigDecimal;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/icu/math/BigDecimal\0", "valueOf\0", "(J)Landroid/icu/math/BigDecimal;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [valueOf](https://developer.android.com/reference/android/icu/math/BigDecimal.html#valueOf(long,%20int))
        ///
        /// Required features: "android-icu-math-BigDecimal"
        #[cfg(any(feature = "all", all(feature = "android-icu-math-BigDecimal")))]
        pub fn valueOf_long_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i64, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::math::BigDecimal>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/math/BigDecimal", java.flags == PUBLIC | STATIC, .name == "valueOf", .descriptor == "(JI)Landroid/icu/math/BigDecimal;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/icu/math/BigDecimal\0", "valueOf\0", "(JI)Landroid/icu/math/BigDecimal;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Bridge method - type erasure
        // /// [compareTo](https://developer.android.com/reference/android/icu/math/BigDecimal.html#compareTo(java.lang.Object))
        // ///
        // /// Required features: "java-lang-Object"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        // pub fn compareTo_Object<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/icu/math/BigDecimal", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "compareTo", .descriptor == "(Ljava/lang/Object;)I"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/math/BigDecimal\0", "compareTo\0", "(Ljava/lang/Object;)I\0");
        //         __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// **get** public static final [ONE](https://developer.android.com/reference/android/icu/math/BigDecimal.html#ONE)
        ///
        /// Required feature: android-icu-math-BigDecimal
        #[cfg(any(feature = "all", feature = "android-icu-math-BigDecimal"))]
        pub fn ONE<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::math::BigDecimal>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/icu/math/BigDecimal\0", "ONE\0", "Landroid/icu/math/BigDecimal;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// public static final [ROUND_CEILING](https://developer.android.com/reference/android/icu/math/BigDecimal.html#ROUND_CEILING)
        pub const ROUND_CEILING : i32 = 2;

        /// public static final [ROUND_DOWN](https://developer.android.com/reference/android/icu/math/BigDecimal.html#ROUND_DOWN)
        pub const ROUND_DOWN : i32 = 1;

        /// public static final [ROUND_FLOOR](https://developer.android.com/reference/android/icu/math/BigDecimal.html#ROUND_FLOOR)
        pub const ROUND_FLOOR : i32 = 3;

        /// public static final [ROUND_HALF_DOWN](https://developer.android.com/reference/android/icu/math/BigDecimal.html#ROUND_HALF_DOWN)
        pub const ROUND_HALF_DOWN : i32 = 5;

        /// public static final [ROUND_HALF_EVEN](https://developer.android.com/reference/android/icu/math/BigDecimal.html#ROUND_HALF_EVEN)
        pub const ROUND_HALF_EVEN : i32 = 6;

        /// public static final [ROUND_HALF_UP](https://developer.android.com/reference/android/icu/math/BigDecimal.html#ROUND_HALF_UP)
        pub const ROUND_HALF_UP : i32 = 4;

        /// public static final [ROUND_UNNECESSARY](https://developer.android.com/reference/android/icu/math/BigDecimal.html#ROUND_UNNECESSARY)
        pub const ROUND_UNNECESSARY : i32 = 7;

        /// public static final [ROUND_UP](https://developer.android.com/reference/android/icu/math/BigDecimal.html#ROUND_UP)
        pub const ROUND_UP : i32 = 0;

        /// **get** public static final [TEN](https://developer.android.com/reference/android/icu/math/BigDecimal.html#TEN)
        ///
        /// Required feature: android-icu-math-BigDecimal
        #[cfg(any(feature = "all", feature = "android-icu-math-BigDecimal"))]
        pub fn TEN<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::math::BigDecimal>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/icu/math/BigDecimal\0", "TEN\0", "Landroid/icu/math/BigDecimal;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [ZERO](https://developer.android.com/reference/android/icu/math/BigDecimal.html#ZERO)
        ///
        /// Required feature: android-icu-math-BigDecimal
        #[cfg(any(feature = "all", feature = "android-icu-math-BigDecimal"))]
        pub fn ZERO<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::math::BigDecimal>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/icu/math/BigDecimal\0", "ZERO\0", "Landroid/icu/math/BigDecimal;\0");
                env.get_static_object_field(class, field)
            }
        }
    }
}
