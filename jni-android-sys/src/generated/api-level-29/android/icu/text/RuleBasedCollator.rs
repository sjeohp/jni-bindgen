// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-icu-text-RuleBasedCollator"))]
__jni_bindgen! {
    /// public final class [RuleBasedCollator](https://developer.android.com/reference/android/icu/text/RuleBasedCollator.html)
    ///
    /// Required feature: android-icu-text-RuleBasedCollator
    public final class RuleBasedCollator ("android/icu/text/RuleBasedCollator") extends crate::android::icu::text::Collator {

        /// [RuleBasedCollator](https://developer.android.com/reference/android/icu/text/RuleBasedCollator.html#RuleBasedCollator(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::icu::text::RuleBasedCollator>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/RuleBasedCollator", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/RuleBasedCollator\0", "<init>\0", "(Ljava/lang/String;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clone](https://developer.android.com/reference/android/icu/text/RuleBasedCollator.html#clone())
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn clone<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/RuleBasedCollator", java.flags == PUBLIC, .name == "clone", .descriptor == "()Ljava/lang/Object;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/RuleBasedCollator\0", "clone\0", "()Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCollationElementIterator](https://developer.android.com/reference/android/icu/text/RuleBasedCollator.html#getCollationElementIterator(java.lang.String))
        ///
        /// Required features: "android-icu-text-CollationElementIterator", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-CollationElementIterator", feature = "java-lang-String")))]
        pub fn getCollationElementIterator_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::CollationElementIterator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/RuleBasedCollator", java.flags == PUBLIC, .name == "getCollationElementIterator", .descriptor == "(Ljava/lang/String;)Landroid/icu/text/CollationElementIterator;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/RuleBasedCollator\0", "getCollationElementIterator\0", "(Ljava/lang/String;)Landroid/icu/text/CollationElementIterator;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCollationElementIterator](https://developer.android.com/reference/android/icu/text/RuleBasedCollator.html#getCollationElementIterator(java.text.CharacterIterator))
        ///
        /// Required features: "android-icu-text-CollationElementIterator", "java-text-CharacterIterator"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-CollationElementIterator", feature = "java-text-CharacterIterator")))]
        pub fn getCollationElementIterator_CharacterIterator<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::text::CharacterIterator>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::CollationElementIterator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/RuleBasedCollator", java.flags == PUBLIC, .name == "getCollationElementIterator", .descriptor == "(Ljava/text/CharacterIterator;)Landroid/icu/text/CollationElementIterator;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/RuleBasedCollator\0", "getCollationElementIterator\0", "(Ljava/text/CharacterIterator;)Landroid/icu/text/CollationElementIterator;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCollationElementIterator](https://developer.android.com/reference/android/icu/text/RuleBasedCollator.html#getCollationElementIterator(android.icu.text.UCharacterIterator))
        ///
        /// Required features: "android-icu-text-CollationElementIterator", "android-icu-text-UCharacterIterator"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-CollationElementIterator", feature = "android-icu-text-UCharacterIterator")))]
        pub fn getCollationElementIterator_UCharacterIterator<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::text::UCharacterIterator>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::CollationElementIterator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/RuleBasedCollator", java.flags == PUBLIC, .name == "getCollationElementIterator", .descriptor == "(Landroid/icu/text/UCharacterIterator;)Landroid/icu/text/CollationElementIterator;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/RuleBasedCollator\0", "getCollationElementIterator\0", "(Landroid/icu/text/UCharacterIterator;)Landroid/icu/text/CollationElementIterator;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isFrozen](https://developer.android.com/reference/android/icu/text/RuleBasedCollator.html#isFrozen())
        pub fn isFrozen<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/RuleBasedCollator", java.flags == PUBLIC, .name == "isFrozen", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/RuleBasedCollator\0", "isFrozen\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [freeze](https://developer.android.com/reference/android/icu/text/RuleBasedCollator.html#freeze())
        ///
        /// Required features: "android-icu-text-Collator"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-Collator")))]
        pub fn freeze<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::Collator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/RuleBasedCollator", java.flags == PUBLIC, .name == "freeze", .descriptor == "()Landroid/icu/text/Collator;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/RuleBasedCollator\0", "freeze\0", "()Landroid/icu/text/Collator;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [cloneAsThawed](https://developer.android.com/reference/android/icu/text/RuleBasedCollator.html#cloneAsThawed())
        ///
        /// Required features: "android-icu-text-RuleBasedCollator"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-RuleBasedCollator")))]
        pub fn cloneAsThawed<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::RuleBasedCollator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/RuleBasedCollator", java.flags == PUBLIC, .name == "cloneAsThawed", .descriptor == "()Landroid/icu/text/RuleBasedCollator;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/RuleBasedCollator\0", "cloneAsThawed\0", "()Landroid/icu/text/RuleBasedCollator;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setUpperCaseFirst](https://developer.android.com/reference/android/icu/text/RuleBasedCollator.html#setUpperCaseFirst(boolean))
        pub fn setUpperCaseFirst<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/RuleBasedCollator", java.flags == PUBLIC, .name == "setUpperCaseFirst", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/RuleBasedCollator\0", "setUpperCaseFirst\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setLowerCaseFirst](https://developer.android.com/reference/android/icu/text/RuleBasedCollator.html#setLowerCaseFirst(boolean))
        pub fn setLowerCaseFirst<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/RuleBasedCollator", java.flags == PUBLIC, .name == "setLowerCaseFirst", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/RuleBasedCollator\0", "setLowerCaseFirst\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setCaseFirstDefault](https://developer.android.com/reference/android/icu/text/RuleBasedCollator.html#setCaseFirstDefault())
        pub fn setCaseFirstDefault<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/RuleBasedCollator", java.flags == PUBLIC, .name == "setCaseFirstDefault", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/RuleBasedCollator\0", "setCaseFirstDefault\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAlternateHandlingDefault](https://developer.android.com/reference/android/icu/text/RuleBasedCollator.html#setAlternateHandlingDefault())
        pub fn setAlternateHandlingDefault<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/RuleBasedCollator", java.flags == PUBLIC, .name == "setAlternateHandlingDefault", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/RuleBasedCollator\0", "setAlternateHandlingDefault\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setCaseLevelDefault](https://developer.android.com/reference/android/icu/text/RuleBasedCollator.html#setCaseLevelDefault())
        pub fn setCaseLevelDefault<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/RuleBasedCollator", java.flags == PUBLIC, .name == "setCaseLevelDefault", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/RuleBasedCollator\0", "setCaseLevelDefault\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDecompositionDefault](https://developer.android.com/reference/android/icu/text/RuleBasedCollator.html#setDecompositionDefault())
        pub fn setDecompositionDefault<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/RuleBasedCollator", java.flags == PUBLIC, .name == "setDecompositionDefault", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/RuleBasedCollator\0", "setDecompositionDefault\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setFrenchCollationDefault](https://developer.android.com/reference/android/icu/text/RuleBasedCollator.html#setFrenchCollationDefault())
        pub fn setFrenchCollationDefault<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/RuleBasedCollator", java.flags == PUBLIC, .name == "setFrenchCollationDefault", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/RuleBasedCollator\0", "setFrenchCollationDefault\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setStrengthDefault](https://developer.android.com/reference/android/icu/text/RuleBasedCollator.html#setStrengthDefault())
        pub fn setStrengthDefault<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/RuleBasedCollator", java.flags == PUBLIC, .name == "setStrengthDefault", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/RuleBasedCollator\0", "setStrengthDefault\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setNumericCollationDefault](https://developer.android.com/reference/android/icu/text/RuleBasedCollator.html#setNumericCollationDefault())
        pub fn setNumericCollationDefault<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/RuleBasedCollator", java.flags == PUBLIC, .name == "setNumericCollationDefault", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/RuleBasedCollator\0", "setNumericCollationDefault\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setFrenchCollation](https://developer.android.com/reference/android/icu/text/RuleBasedCollator.html#setFrenchCollation(boolean))
        pub fn setFrenchCollation<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/RuleBasedCollator", java.flags == PUBLIC, .name == "setFrenchCollation", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/RuleBasedCollator\0", "setFrenchCollation\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAlternateHandlingShifted](https://developer.android.com/reference/android/icu/text/RuleBasedCollator.html#setAlternateHandlingShifted(boolean))
        pub fn setAlternateHandlingShifted<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/RuleBasedCollator", java.flags == PUBLIC, .name == "setAlternateHandlingShifted", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/RuleBasedCollator\0", "setAlternateHandlingShifted\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setCaseLevel](https://developer.android.com/reference/android/icu/text/RuleBasedCollator.html#setCaseLevel(boolean))
        pub fn setCaseLevel<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/RuleBasedCollator", java.flags == PUBLIC, .name == "setCaseLevel", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/RuleBasedCollator\0", "setCaseLevel\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDecomposition](https://developer.android.com/reference/android/icu/text/RuleBasedCollator.html#setDecomposition(int))
        pub fn setDecomposition<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/RuleBasedCollator", java.flags == PUBLIC, .name == "setDecomposition", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/RuleBasedCollator\0", "setDecomposition\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setStrength](https://developer.android.com/reference/android/icu/text/RuleBasedCollator.html#setStrength(int))
        pub fn setStrength<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/RuleBasedCollator", java.flags == PUBLIC, .name == "setStrength", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/RuleBasedCollator\0", "setStrength\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setMaxVariable](https://developer.android.com/reference/android/icu/text/RuleBasedCollator.html#setMaxVariable(int))
        ///
        /// Required features: "android-icu-text-RuleBasedCollator"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-RuleBasedCollator")))]
        pub fn setMaxVariable_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::RuleBasedCollator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/RuleBasedCollator", java.flags == PUBLIC, .name == "setMaxVariable", .descriptor == "(I)Landroid/icu/text/RuleBasedCollator;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/RuleBasedCollator\0", "setMaxVariable\0", "(I)Landroid/icu/text/RuleBasedCollator;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMaxVariable](https://developer.android.com/reference/android/icu/text/RuleBasedCollator.html#getMaxVariable())
        pub fn getMaxVariable<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/RuleBasedCollator", java.flags == PUBLIC, .name == "getMaxVariable", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/RuleBasedCollator\0", "getMaxVariable\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setNumericCollation](https://developer.android.com/reference/android/icu/text/RuleBasedCollator.html#setNumericCollation(boolean))
        pub fn setNumericCollation<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/RuleBasedCollator", java.flags == PUBLIC, .name == "setNumericCollation", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/RuleBasedCollator\0", "setNumericCollation\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setReorderCodes](https://developer.android.com/reference/android/icu/text/RuleBasedCollator.html#setReorderCodes(int...))
        pub fn setReorderCodes<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/RuleBasedCollator", java.flags == PUBLIC | VARARGS, .name == "setReorderCodes", .descriptor == "([I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/RuleBasedCollator\0", "setReorderCodes\0", "([I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRules](https://developer.android.com/reference/android/icu/text/RuleBasedCollator.html#getRules())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getRules<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/RuleBasedCollator", java.flags == PUBLIC, .name == "getRules", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/RuleBasedCollator\0", "getRules\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRules](https://developer.android.com/reference/android/icu/text/RuleBasedCollator.html#getRules(boolean))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getRules_boolean<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/RuleBasedCollator", java.flags == PUBLIC, .name == "getRules", .descriptor == "(Z)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/RuleBasedCollator\0", "getRules\0", "(Z)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTailoredSet](https://developer.android.com/reference/android/icu/text/RuleBasedCollator.html#getTailoredSet())
        ///
        /// Required features: "android-icu-text-UnicodeSet"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-UnicodeSet")))]
        pub fn getTailoredSet<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::UnicodeSet>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/RuleBasedCollator", java.flags == PUBLIC, .name == "getTailoredSet", .descriptor == "()Landroid/icu/text/UnicodeSet;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/RuleBasedCollator\0", "getTailoredSet\0", "()Landroid/icu/text/UnicodeSet;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getContractionsAndExpansions](https://developer.android.com/reference/android/icu/text/RuleBasedCollator.html#getContractionsAndExpansions(android.icu.text.UnicodeSet,%20android.icu.text.UnicodeSet,%20boolean))
        ///
        /// Required features: "android-icu-text-UnicodeSet"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-UnicodeSet")))]
        pub fn getContractionsAndExpansions<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::text::UnicodeSet>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::text::UnicodeSet>>, arg2: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/RuleBasedCollator", java.flags == PUBLIC, .name == "getContractionsAndExpansions", .descriptor == "(Landroid/icu/text/UnicodeSet;Landroid/icu/text/UnicodeSet;Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/RuleBasedCollator\0", "getContractionsAndExpansions\0", "(Landroid/icu/text/UnicodeSet;Landroid/icu/text/UnicodeSet;Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCollationKey](https://developer.android.com/reference/android/icu/text/RuleBasedCollator.html#getCollationKey(java.lang.String))
        ///
        /// Required features: "android-icu-text-CollationKey", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-CollationKey", feature = "java-lang-String")))]
        pub fn getCollationKey<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::CollationKey>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/RuleBasedCollator", java.flags == PUBLIC, .name == "getCollationKey", .descriptor == "(Ljava/lang/String;)Landroid/icu/text/CollationKey;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/RuleBasedCollator\0", "getCollationKey\0", "(Ljava/lang/String;)Landroid/icu/text/CollationKey;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getStrength](https://developer.android.com/reference/android/icu/text/RuleBasedCollator.html#getStrength())
        pub fn getStrength<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/RuleBasedCollator", java.flags == PUBLIC, .name == "getStrength", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/RuleBasedCollator\0", "getStrength\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDecomposition](https://developer.android.com/reference/android/icu/text/RuleBasedCollator.html#getDecomposition())
        pub fn getDecomposition<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/RuleBasedCollator", java.flags == PUBLIC, .name == "getDecomposition", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/RuleBasedCollator\0", "getDecomposition\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isUpperCaseFirst](https://developer.android.com/reference/android/icu/text/RuleBasedCollator.html#isUpperCaseFirst())
        pub fn isUpperCaseFirst<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/RuleBasedCollator", java.flags == PUBLIC, .name == "isUpperCaseFirst", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/RuleBasedCollator\0", "isUpperCaseFirst\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isLowerCaseFirst](https://developer.android.com/reference/android/icu/text/RuleBasedCollator.html#isLowerCaseFirst())
        pub fn isLowerCaseFirst<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/RuleBasedCollator", java.flags == PUBLIC, .name == "isLowerCaseFirst", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/RuleBasedCollator\0", "isLowerCaseFirst\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isAlternateHandlingShifted](https://developer.android.com/reference/android/icu/text/RuleBasedCollator.html#isAlternateHandlingShifted())
        pub fn isAlternateHandlingShifted<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/RuleBasedCollator", java.flags == PUBLIC, .name == "isAlternateHandlingShifted", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/RuleBasedCollator\0", "isAlternateHandlingShifted\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isCaseLevel](https://developer.android.com/reference/android/icu/text/RuleBasedCollator.html#isCaseLevel())
        pub fn isCaseLevel<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/RuleBasedCollator", java.flags == PUBLIC, .name == "isCaseLevel", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/RuleBasedCollator\0", "isCaseLevel\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isFrenchCollation](https://developer.android.com/reference/android/icu/text/RuleBasedCollator.html#isFrenchCollation())
        pub fn isFrenchCollation<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/RuleBasedCollator", java.flags == PUBLIC, .name == "isFrenchCollation", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/RuleBasedCollator\0", "isFrenchCollation\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getVariableTop](https://developer.android.com/reference/android/icu/text/RuleBasedCollator.html#getVariableTop())
        pub fn getVariableTop<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/RuleBasedCollator", java.flags == PUBLIC, .name == "getVariableTop", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/RuleBasedCollator\0", "getVariableTop\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNumericCollation](https://developer.android.com/reference/android/icu/text/RuleBasedCollator.html#getNumericCollation())
        pub fn getNumericCollation<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/RuleBasedCollator", java.flags == PUBLIC, .name == "getNumericCollation", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/RuleBasedCollator\0", "getNumericCollation\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getReorderCodes](https://developer.android.com/reference/android/icu/text/RuleBasedCollator.html#getReorderCodes())
        pub fn getReorderCodes<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::IntArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/RuleBasedCollator", java.flags == PUBLIC, .name == "getReorderCodes", .descriptor == "()[I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/RuleBasedCollator\0", "getReorderCodes\0", "()[I\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [equals](https://developer.android.com/reference/android/icu/text/RuleBasedCollator.html#equals(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn equals<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/RuleBasedCollator", java.flags == PUBLIC, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/RuleBasedCollator\0", "equals\0", "(Ljava/lang/Object;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hashCode](https://developer.android.com/reference/android/icu/text/RuleBasedCollator.html#hashCode())
        pub fn hashCode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/RuleBasedCollator", java.flags == PUBLIC, .name == "hashCode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/RuleBasedCollator\0", "hashCode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [compare](https://developer.android.com/reference/android/icu/text/RuleBasedCollator.html#compare(java.lang.String,%20java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn compare<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/RuleBasedCollator", java.flags == PUBLIC, .name == "compare", .descriptor == "(Ljava/lang/String;Ljava/lang/String;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/RuleBasedCollator\0", "compare\0", "(Ljava/lang/String;Ljava/lang/String;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getVersion](https://developer.android.com/reference/android/icu/text/RuleBasedCollator.html#getVersion())
        ///
        /// Required features: "android-icu-util-VersionInfo"
        #[cfg(any(feature = "all", all(feature = "android-icu-util-VersionInfo")))]
        pub fn getVersion<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::util::VersionInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/RuleBasedCollator", java.flags == PUBLIC, .name == "getVersion", .descriptor == "()Landroid/icu/util/VersionInfo;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/RuleBasedCollator\0", "getVersion\0", "()Landroid/icu/util/VersionInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getUCAVersion](https://developer.android.com/reference/android/icu/text/RuleBasedCollator.html#getUCAVersion())
        ///
        /// Required features: "android-icu-util-VersionInfo"
        #[cfg(any(feature = "all", all(feature = "android-icu-util-VersionInfo")))]
        pub fn getUCAVersion<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::util::VersionInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/RuleBasedCollator", java.flags == PUBLIC, .name == "getUCAVersion", .descriptor == "()Landroid/icu/util/VersionInfo;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/RuleBasedCollator\0", "getUCAVersion\0", "()Landroid/icu/util/VersionInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Bridge method - type erasure
        // /// [cloneAsThawed](https://developer.android.com/reference/android/icu/text/RuleBasedCollator.html#cloneAsThawed())
        // ///
        // /// Required features: "android-icu-text-Collator"
        // #[cfg(any(feature = "all", all(feature = "android-icu-text-Collator")))]
        // pub fn cloneAsThawed<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::Collator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/icu/text/RuleBasedCollator", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "cloneAsThawed", .descriptor == "()Landroid/icu/text/Collator;"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/RuleBasedCollator\0", "cloneAsThawed\0", "()Landroid/icu/text/Collator;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [setMaxVariable](https://developer.android.com/reference/android/icu/text/RuleBasedCollator.html#setMaxVariable(int))
        // ///
        // /// Required features: "android-icu-text-Collator"
        // #[cfg(any(feature = "all", all(feature = "android-icu-text-Collator")))]
        // pub fn setMaxVariable_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::Collator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/icu/text/RuleBasedCollator", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "setMaxVariable", .descriptor == "(I)Landroid/icu/text/Collator;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/RuleBasedCollator\0", "setMaxVariable\0", "(I)Landroid/icu/text/Collator;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [cloneAsThawed](https://developer.android.com/reference/android/icu/text/RuleBasedCollator.html#cloneAsThawed())
        // ///
        // /// Required features: "java-lang-Object"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        // pub fn cloneAsThawed<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/icu/text/RuleBasedCollator", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "cloneAsThawed", .descriptor == "()Ljava/lang/Object;"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/RuleBasedCollator\0", "cloneAsThawed\0", "()Ljava/lang/Object;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [freeze](https://developer.android.com/reference/android/icu/text/RuleBasedCollator.html#freeze())
        // ///
        // /// Required features: "java-lang-Object"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        // pub fn freeze<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/icu/text/RuleBasedCollator", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "freeze", .descriptor == "()Ljava/lang/Object;"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/RuleBasedCollator\0", "freeze\0", "()Ljava/lang/Object;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }
    }
}
