// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-icu-text-MessagePattern"))]
__jni_bindgen! {
    /// public final class [MessagePattern](https://developer.android.com/reference/android/icu/text/MessagePattern.html)
    ///
    /// Required feature: android-icu-text-MessagePattern
    public final class MessagePattern ("android/icu/text/MessagePattern") extends crate::java::lang::Object, implements crate::java::lang::Cloneable, crate::android::icu::util::Freezable {

        /// [MessagePattern](https://developer.android.com/reference/android/icu/text/MessagePattern.html#MessagePattern())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::icu::text::MessagePattern>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/MessagePattern", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/MessagePattern\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [MessagePattern](https://developer.android.com/reference/android/icu/text/MessagePattern.html#MessagePattern(android.icu.text.MessagePattern.ApostropheMode))
        ///
        /// Required features: "android-icu-text-MessagePattern_ApostropheMode"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-MessagePattern_ApostropheMode")))]
        pub fn new_ApostropheMode<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::text::MessagePattern_ApostropheMode>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::icu::text::MessagePattern>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/MessagePattern", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/icu/text/MessagePattern$ApostropheMode;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/MessagePattern\0", "<init>\0", "(Landroid/icu/text/MessagePattern$ApostropheMode;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [MessagePattern](https://developer.android.com/reference/android/icu/text/MessagePattern.html#MessagePattern(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn new_String<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::icu::text::MessagePattern>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/MessagePattern", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/MessagePattern\0", "<init>\0", "(Ljava/lang/String;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [parse](https://developer.android.com/reference/android/icu/text/MessagePattern.html#parse(java.lang.String))
        ///
        /// Required features: "android-icu-text-MessagePattern", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-MessagePattern", feature = "java-lang-String")))]
        pub fn parse<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::MessagePattern>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/MessagePattern", java.flags == PUBLIC, .name == "parse", .descriptor == "(Ljava/lang/String;)Landroid/icu/text/MessagePattern;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/MessagePattern\0", "parse\0", "(Ljava/lang/String;)Landroid/icu/text/MessagePattern;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [parseChoiceStyle](https://developer.android.com/reference/android/icu/text/MessagePattern.html#parseChoiceStyle(java.lang.String))
        ///
        /// Required features: "android-icu-text-MessagePattern", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-MessagePattern", feature = "java-lang-String")))]
        pub fn parseChoiceStyle<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::MessagePattern>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/MessagePattern", java.flags == PUBLIC, .name == "parseChoiceStyle", .descriptor == "(Ljava/lang/String;)Landroid/icu/text/MessagePattern;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/MessagePattern\0", "parseChoiceStyle\0", "(Ljava/lang/String;)Landroid/icu/text/MessagePattern;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [parsePluralStyle](https://developer.android.com/reference/android/icu/text/MessagePattern.html#parsePluralStyle(java.lang.String))
        ///
        /// Required features: "android-icu-text-MessagePattern", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-MessagePattern", feature = "java-lang-String")))]
        pub fn parsePluralStyle<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::MessagePattern>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/MessagePattern", java.flags == PUBLIC, .name == "parsePluralStyle", .descriptor == "(Ljava/lang/String;)Landroid/icu/text/MessagePattern;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/MessagePattern\0", "parsePluralStyle\0", "(Ljava/lang/String;)Landroid/icu/text/MessagePattern;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [parseSelectStyle](https://developer.android.com/reference/android/icu/text/MessagePattern.html#parseSelectStyle(java.lang.String))
        ///
        /// Required features: "android-icu-text-MessagePattern", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-MessagePattern", feature = "java-lang-String")))]
        pub fn parseSelectStyle<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::MessagePattern>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/MessagePattern", java.flags == PUBLIC, .name == "parseSelectStyle", .descriptor == "(Ljava/lang/String;)Landroid/icu/text/MessagePattern;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/MessagePattern\0", "parseSelectStyle\0", "(Ljava/lang/String;)Landroid/icu/text/MessagePattern;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clear](https://developer.android.com/reference/android/icu/text/MessagePattern.html#clear())
        pub fn clear<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/MessagePattern", java.flags == PUBLIC, .name == "clear", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/MessagePattern\0", "clear\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clearPatternAndSetApostropheMode](https://developer.android.com/reference/android/icu/text/MessagePattern.html#clearPatternAndSetApostropheMode(android.icu.text.MessagePattern.ApostropheMode))
        ///
        /// Required features: "android-icu-text-MessagePattern_ApostropheMode"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-MessagePattern_ApostropheMode")))]
        pub fn clearPatternAndSetApostropheMode<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::text::MessagePattern_ApostropheMode>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/MessagePattern", java.flags == PUBLIC, .name == "clearPatternAndSetApostropheMode", .descriptor == "(Landroid/icu/text/MessagePattern$ApostropheMode;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/MessagePattern\0", "clearPatternAndSetApostropheMode\0", "(Landroid/icu/text/MessagePattern$ApostropheMode;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [equals](https://developer.android.com/reference/android/icu/text/MessagePattern.html#equals(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn equals<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/MessagePattern", java.flags == PUBLIC, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/MessagePattern\0", "equals\0", "(Ljava/lang/Object;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hashCode](https://developer.android.com/reference/android/icu/text/MessagePattern.html#hashCode())
        pub fn hashCode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/MessagePattern", java.flags == PUBLIC, .name == "hashCode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/MessagePattern\0", "hashCode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getApostropheMode](https://developer.android.com/reference/android/icu/text/MessagePattern.html#getApostropheMode())
        ///
        /// Required features: "android-icu-text-MessagePattern_ApostropheMode"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-MessagePattern_ApostropheMode")))]
        pub fn getApostropheMode<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::MessagePattern_ApostropheMode>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/MessagePattern", java.flags == PUBLIC, .name == "getApostropheMode", .descriptor == "()Landroid/icu/text/MessagePattern$ApostropheMode;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/MessagePattern\0", "getApostropheMode\0", "()Landroid/icu/text/MessagePattern$ApostropheMode;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPatternString](https://developer.android.com/reference/android/icu/text/MessagePattern.html#getPatternString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getPatternString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/MessagePattern", java.flags == PUBLIC, .name == "getPatternString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/MessagePattern\0", "getPatternString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasNamedArguments](https://developer.android.com/reference/android/icu/text/MessagePattern.html#hasNamedArguments())
        pub fn hasNamedArguments<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/MessagePattern", java.flags == PUBLIC, .name == "hasNamedArguments", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/MessagePattern\0", "hasNamedArguments\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasNumberedArguments](https://developer.android.com/reference/android/icu/text/MessagePattern.html#hasNumberedArguments())
        pub fn hasNumberedArguments<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/MessagePattern", java.flags == PUBLIC, .name == "hasNumberedArguments", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/MessagePattern\0", "hasNumberedArguments\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/android/icu/text/MessagePattern.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/MessagePattern", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/MessagePattern\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [validateArgumentName](https://developer.android.com/reference/android/icu/text/MessagePattern.html#validateArgumentName(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn validateArgumentName<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/MessagePattern", java.flags == PUBLIC | STATIC, .name == "validateArgumentName", .descriptor == "(Ljava/lang/String;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/icu/text/MessagePattern\0", "validateArgumentName\0", "(Ljava/lang/String;)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [autoQuoteApostropheDeep](https://developer.android.com/reference/android/icu/text/MessagePattern.html#autoQuoteApostropheDeep())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn autoQuoteApostropheDeep<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/MessagePattern", java.flags == PUBLIC, .name == "autoQuoteApostropheDeep", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/MessagePattern\0", "autoQuoteApostropheDeep\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [countParts](https://developer.android.com/reference/android/icu/text/MessagePattern.html#countParts())
        pub fn countParts<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/MessagePattern", java.flags == PUBLIC, .name == "countParts", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/MessagePattern\0", "countParts\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPart](https://developer.android.com/reference/android/icu/text/MessagePattern.html#getPart(int))
        ///
        /// Required features: "android-icu-text-MessagePattern_Part"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-MessagePattern_Part")))]
        pub fn getPart<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::MessagePattern_Part>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/MessagePattern", java.flags == PUBLIC, .name == "getPart", .descriptor == "(I)Landroid/icu/text/MessagePattern$Part;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/MessagePattern\0", "getPart\0", "(I)Landroid/icu/text/MessagePattern$Part;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPartType](https://developer.android.com/reference/android/icu/text/MessagePattern.html#getPartType(int))
        ///
        /// Required features: "android-icu-text-MessagePattern_Part_Type"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-MessagePattern_Part_Type")))]
        pub fn getPartType<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::MessagePattern_Part_Type>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/MessagePattern", java.flags == PUBLIC, .name == "getPartType", .descriptor == "(I)Landroid/icu/text/MessagePattern$Part$Type;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/MessagePattern\0", "getPartType\0", "(I)Landroid/icu/text/MessagePattern$Part$Type;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPatternIndex](https://developer.android.com/reference/android/icu/text/MessagePattern.html#getPatternIndex(int))
        pub fn getPatternIndex<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/MessagePattern", java.flags == PUBLIC, .name == "getPatternIndex", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/MessagePattern\0", "getPatternIndex\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSubstring](https://developer.android.com/reference/android/icu/text/MessagePattern.html#getSubstring(android.icu.text.MessagePattern.Part))
        ///
        /// Required features: "android-icu-text-MessagePattern_Part", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-MessagePattern_Part", feature = "java-lang-String")))]
        pub fn getSubstring<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::text::MessagePattern_Part>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/MessagePattern", java.flags == PUBLIC, .name == "getSubstring", .descriptor == "(Landroid/icu/text/MessagePattern$Part;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/MessagePattern\0", "getSubstring\0", "(Landroid/icu/text/MessagePattern$Part;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [partSubstringMatches](https://developer.android.com/reference/android/icu/text/MessagePattern.html#partSubstringMatches(android.icu.text.MessagePattern.Part,%20java.lang.String))
        ///
        /// Required features: "android-icu-text-MessagePattern_Part", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-MessagePattern_Part", feature = "java-lang-String")))]
        pub fn partSubstringMatches<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::text::MessagePattern_Part>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/MessagePattern", java.flags == PUBLIC, .name == "partSubstringMatches", .descriptor == "(Landroid/icu/text/MessagePattern$Part;Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/MessagePattern\0", "partSubstringMatches\0", "(Landroid/icu/text/MessagePattern$Part;Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNumericValue](https://developer.android.com/reference/android/icu/text/MessagePattern.html#getNumericValue(android.icu.text.MessagePattern.Part))
        ///
        /// Required features: "android-icu-text-MessagePattern_Part"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-MessagePattern_Part")))]
        pub fn getNumericValue<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::text::MessagePattern_Part>>) -> __jni_bindgen::std::result::Result<f64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/MessagePattern", java.flags == PUBLIC, .name == "getNumericValue", .descriptor == "(Landroid/icu/text/MessagePattern$Part;)D"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/MessagePattern\0", "getNumericValue\0", "(Landroid/icu/text/MessagePattern$Part;)D\0");
                __jni_env.call_double_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPluralOffset](https://developer.android.com/reference/android/icu/text/MessagePattern.html#getPluralOffset(int))
        pub fn getPluralOffset<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<f64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/MessagePattern", java.flags == PUBLIC, .name == "getPluralOffset", .descriptor == "(I)D"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/MessagePattern\0", "getPluralOffset\0", "(I)D\0");
                __jni_env.call_double_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLimitPartIndex](https://developer.android.com/reference/android/icu/text/MessagePattern.html#getLimitPartIndex(int))
        pub fn getLimitPartIndex<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/MessagePattern", java.flags == PUBLIC, .name == "getLimitPartIndex", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/MessagePattern\0", "getLimitPartIndex\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clone](https://developer.android.com/reference/android/icu/text/MessagePattern.html#clone())
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn clone<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/MessagePattern", java.flags == PUBLIC, .name == "clone", .descriptor == "()Ljava/lang/Object;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/MessagePattern\0", "clone\0", "()Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [cloneAsThawed](https://developer.android.com/reference/android/icu/text/MessagePattern.html#cloneAsThawed())
        ///
        /// Required features: "android-icu-text-MessagePattern"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-MessagePattern")))]
        pub fn cloneAsThawed<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::MessagePattern>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/MessagePattern", java.flags == PUBLIC, .name == "cloneAsThawed", .descriptor == "()Landroid/icu/text/MessagePattern;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/MessagePattern\0", "cloneAsThawed\0", "()Landroid/icu/text/MessagePattern;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [freeze](https://developer.android.com/reference/android/icu/text/MessagePattern.html#freeze())
        ///
        /// Required features: "android-icu-text-MessagePattern"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-MessagePattern")))]
        pub fn freeze<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::MessagePattern>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/MessagePattern", java.flags == PUBLIC, .name == "freeze", .descriptor == "()Landroid/icu/text/MessagePattern;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/MessagePattern\0", "freeze\0", "()Landroid/icu/text/MessagePattern;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isFrozen](https://developer.android.com/reference/android/icu/text/MessagePattern.html#isFrozen())
        pub fn isFrozen<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/MessagePattern", java.flags == PUBLIC, .name == "isFrozen", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/MessagePattern\0", "isFrozen\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Bridge method - type erasure
        // /// [cloneAsThawed](https://developer.android.com/reference/android/icu/text/MessagePattern.html#cloneAsThawed())
        // ///
        // /// Required features: "java-lang-Object"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        // pub fn cloneAsThawed<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/icu/text/MessagePattern", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "cloneAsThawed", .descriptor == "()Ljava/lang/Object;"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/MessagePattern\0", "cloneAsThawed\0", "()Ljava/lang/Object;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [freeze](https://developer.android.com/reference/android/icu/text/MessagePattern.html#freeze())
        // ///
        // /// Required features: "java-lang-Object"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        // pub fn freeze<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/icu/text/MessagePattern", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "freeze", .descriptor == "()Ljava/lang/Object;"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/MessagePattern\0", "freeze\0", "()Ljava/lang/Object;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// public static final [ARG_NAME_NOT_NUMBER](https://developer.android.com/reference/android/icu/text/MessagePattern.html#ARG_NAME_NOT_NUMBER)
        pub const ARG_NAME_NOT_NUMBER : i32 = -1;

        /// public static final [ARG_NAME_NOT_VALID](https://developer.android.com/reference/android/icu/text/MessagePattern.html#ARG_NAME_NOT_VALID)
        pub const ARG_NAME_NOT_VALID : i32 = -2;

        /// public static final [NO_NUMERIC_VALUE](https://developer.android.com/reference/android/icu/text/MessagePattern.html#NO_NUMERIC_VALUE)
        pub const NO_NUMERIC_VALUE : f64 = -123456789f64;
    }
}
