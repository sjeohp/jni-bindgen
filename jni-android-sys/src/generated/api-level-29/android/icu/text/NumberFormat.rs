// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-icu-text-NumberFormat"))]
__jni_bindgen! {
    /// public class [NumberFormat](https://developer.android.com/reference/android/icu/text/NumberFormat.html)
    ///
    /// Required feature: android-icu-text-NumberFormat
    public class NumberFormat ("android/icu/text/NumberFormat") extends crate::android::icu::text::UFormat {

        /// [NumberFormat](https://developer.android.com/reference/android/icu/text/NumberFormat.html#NumberFormat())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::icu::text::NumberFormat>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/NumberFormat", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/NumberFormat\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [format](https://developer.android.com/reference/android/icu/text/NumberFormat.html#format(java.lang.Object,%20java.lang.StringBuffer,%20java.text.FieldPosition))
        ///
        /// Required features: "java-lang-Object", "java-lang-StringBuffer", "java-text-FieldPosition"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-lang-StringBuffer", feature = "java-text-FieldPosition")))]
        pub fn format_Object_StringBuffer_FieldPosition<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::StringBuffer>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::text::FieldPosition>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::StringBuffer>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/NumberFormat", java.flags == PUBLIC, .name == "format", .descriptor == "(Ljava/lang/Object;Ljava/lang/StringBuffer;Ljava/text/FieldPosition;)Ljava/lang/StringBuffer;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/NumberFormat\0", "format\0", "(Ljava/lang/Object;Ljava/lang/StringBuffer;Ljava/text/FieldPosition;)Ljava/lang/StringBuffer;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [parseObject](https://developer.android.com/reference/android/icu/text/NumberFormat.html#parseObject(java.lang.String,%20java.text.ParsePosition))
        ///
        /// Required features: "java-lang-Object", "java-lang-String", "java-text-ParsePosition"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-lang-String", feature = "java-text-ParsePosition")))]
        pub fn parseObject<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::text::ParsePosition>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/NumberFormat", java.flags == PUBLIC | FINAL, .name == "parseObject", .descriptor == "(Ljava/lang/String;Ljava/text/ParsePosition;)Ljava/lang/Object;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/NumberFormat\0", "parseObject\0", "(Ljava/lang/String;Ljava/text/ParsePosition;)Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [format](https://developer.android.com/reference/android/icu/text/NumberFormat.html#format(double))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn format_double<'env>(&'env self, arg0: f64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/NumberFormat", java.flags == PUBLIC | FINAL, .name == "format", .descriptor == "(D)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/NumberFormat\0", "format\0", "(D)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [format](https://developer.android.com/reference/android/icu/text/NumberFormat.html#format(long))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn format_long<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/NumberFormat", java.flags == PUBLIC | FINAL, .name == "format", .descriptor == "(J)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/NumberFormat\0", "format\0", "(J)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [format](https://developer.android.com/reference/android/icu/text/NumberFormat.html#format(java.math.BigInteger))
        ///
        /// Required features: "java-lang-String", "java-math-BigInteger"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-math-BigInteger")))]
        pub fn format_BigInteger<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::math::BigInteger>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/NumberFormat", java.flags == PUBLIC | FINAL, .name == "format", .descriptor == "(Ljava/math/BigInteger;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/NumberFormat\0", "format\0", "(Ljava/math/BigInteger;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [format](https://developer.android.com/reference/android/icu/text/NumberFormat.html#format(java.math.BigDecimal))
        ///
        /// Required features: "java-lang-String", "java-math-BigDecimal"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-math-BigDecimal")))]
        pub fn format_javaBigDecimal<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::math::BigDecimal>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/NumberFormat", java.flags == PUBLIC | FINAL, .name == "format", .descriptor == "(Ljava/math/BigDecimal;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/NumberFormat\0", "format\0", "(Ljava/math/BigDecimal;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [format](https://developer.android.com/reference/android/icu/text/NumberFormat.html#format(android.icu.math.BigDecimal))
        ///
        /// Required features: "android-icu-math-BigDecimal", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-icu-math-BigDecimal", feature = "java-lang-String")))]
        pub fn format_BigDecimal<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::math::BigDecimal>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/NumberFormat", java.flags == PUBLIC | FINAL, .name == "format", .descriptor == "(Landroid/icu/math/BigDecimal;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/NumberFormat\0", "format\0", "(Landroid/icu/math/BigDecimal;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [format](https://developer.android.com/reference/android/icu/text/NumberFormat.html#format(android.icu.util.CurrencyAmount))
        ///
        /// Required features: "android-icu-util-CurrencyAmount", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-icu-util-CurrencyAmount", feature = "java-lang-String")))]
        pub fn format_CurrencyAmount<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::util::CurrencyAmount>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/NumberFormat", java.flags == PUBLIC | FINAL, .name == "format", .descriptor == "(Landroid/icu/util/CurrencyAmount;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/NumberFormat\0", "format\0", "(Landroid/icu/util/CurrencyAmount;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [format](https://developer.android.com/reference/android/icu/text/NumberFormat.html#format(double,%20java.lang.StringBuffer,%20java.text.FieldPosition))
        ///
        /// Required features: "java-lang-StringBuffer", "java-text-FieldPosition"
        #[cfg(any(feature = "all", all(feature = "java-lang-StringBuffer", feature = "java-text-FieldPosition")))]
        pub fn format_double_StringBuffer_FieldPosition<'env>(&'env self, arg0: f64, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::StringBuffer>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::text::FieldPosition>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::StringBuffer>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/NumberFormat", java.flags == PUBLIC | ABSTRACT, .name == "format", .descriptor == "(DLjava/lang/StringBuffer;Ljava/text/FieldPosition;)Ljava/lang/StringBuffer;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/NumberFormat\0", "format\0", "(DLjava/lang/StringBuffer;Ljava/text/FieldPosition;)Ljava/lang/StringBuffer;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [format](https://developer.android.com/reference/android/icu/text/NumberFormat.html#format(long,%20java.lang.StringBuffer,%20java.text.FieldPosition))
        ///
        /// Required features: "java-lang-StringBuffer", "java-text-FieldPosition"
        #[cfg(any(feature = "all", all(feature = "java-lang-StringBuffer", feature = "java-text-FieldPosition")))]
        pub fn format_long_StringBuffer_FieldPosition<'env>(&'env self, arg0: i64, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::StringBuffer>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::text::FieldPosition>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::StringBuffer>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/NumberFormat", java.flags == PUBLIC | ABSTRACT, .name == "format", .descriptor == "(JLjava/lang/StringBuffer;Ljava/text/FieldPosition;)Ljava/lang/StringBuffer;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/NumberFormat\0", "format\0", "(JLjava/lang/StringBuffer;Ljava/text/FieldPosition;)Ljava/lang/StringBuffer;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [format](https://developer.android.com/reference/android/icu/text/NumberFormat.html#format(java.math.BigInteger,%20java.lang.StringBuffer,%20java.text.FieldPosition))
        ///
        /// Required features: "java-lang-StringBuffer", "java-math-BigInteger", "java-text-FieldPosition"
        #[cfg(any(feature = "all", all(feature = "java-lang-StringBuffer", feature = "java-math-BigInteger", feature = "java-text-FieldPosition")))]
        pub fn format_BigInteger_StringBuffer_FieldPosition<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::math::BigInteger>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::StringBuffer>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::text::FieldPosition>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::StringBuffer>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/NumberFormat", java.flags == PUBLIC | ABSTRACT, .name == "format", .descriptor == "(Ljava/math/BigInteger;Ljava/lang/StringBuffer;Ljava/text/FieldPosition;)Ljava/lang/StringBuffer;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/NumberFormat\0", "format\0", "(Ljava/math/BigInteger;Ljava/lang/StringBuffer;Ljava/text/FieldPosition;)Ljava/lang/StringBuffer;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [format](https://developer.android.com/reference/android/icu/text/NumberFormat.html#format(java.math.BigDecimal,%20java.lang.StringBuffer,%20java.text.FieldPosition))
        ///
        /// Required features: "java-lang-StringBuffer", "java-math-BigDecimal", "java-text-FieldPosition"
        #[cfg(any(feature = "all", all(feature = "java-lang-StringBuffer", feature = "java-math-BigDecimal", feature = "java-text-FieldPosition")))]
        pub fn format_javaBigDecimal_StringBuffer_FieldPosition<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::math::BigDecimal>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::StringBuffer>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::text::FieldPosition>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::StringBuffer>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/NumberFormat", java.flags == PUBLIC | ABSTRACT, .name == "format", .descriptor == "(Ljava/math/BigDecimal;Ljava/lang/StringBuffer;Ljava/text/FieldPosition;)Ljava/lang/StringBuffer;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/NumberFormat\0", "format\0", "(Ljava/math/BigDecimal;Ljava/lang/StringBuffer;Ljava/text/FieldPosition;)Ljava/lang/StringBuffer;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [format](https://developer.android.com/reference/android/icu/text/NumberFormat.html#format(android.icu.math.BigDecimal,%20java.lang.StringBuffer,%20java.text.FieldPosition))
        ///
        /// Required features: "android-icu-math-BigDecimal", "java-lang-StringBuffer", "java-text-FieldPosition"
        #[cfg(any(feature = "all", all(feature = "android-icu-math-BigDecimal", feature = "java-lang-StringBuffer", feature = "java-text-FieldPosition")))]
        pub fn format_BigDecimal_StringBuffer_FieldPosition<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::math::BigDecimal>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::StringBuffer>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::text::FieldPosition>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::StringBuffer>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/NumberFormat", java.flags == PUBLIC | ABSTRACT, .name == "format", .descriptor == "(Landroid/icu/math/BigDecimal;Ljava/lang/StringBuffer;Ljava/text/FieldPosition;)Ljava/lang/StringBuffer;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/NumberFormat\0", "format\0", "(Landroid/icu/math/BigDecimal;Ljava/lang/StringBuffer;Ljava/text/FieldPosition;)Ljava/lang/StringBuffer;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [format](https://developer.android.com/reference/android/icu/text/NumberFormat.html#format(android.icu.util.CurrencyAmount,%20java.lang.StringBuffer,%20java.text.FieldPosition))
        ///
        /// Required features: "android-icu-util-CurrencyAmount", "java-lang-StringBuffer", "java-text-FieldPosition"
        #[cfg(any(feature = "all", all(feature = "android-icu-util-CurrencyAmount", feature = "java-lang-StringBuffer", feature = "java-text-FieldPosition")))]
        pub fn format_CurrencyAmount_StringBuffer_FieldPosition<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::util::CurrencyAmount>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::StringBuffer>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::text::FieldPosition>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::StringBuffer>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/NumberFormat", java.flags == PUBLIC, .name == "format", .descriptor == "(Landroid/icu/util/CurrencyAmount;Ljava/lang/StringBuffer;Ljava/text/FieldPosition;)Ljava/lang/StringBuffer;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/NumberFormat\0", "format\0", "(Landroid/icu/util/CurrencyAmount;Ljava/lang/StringBuffer;Ljava/text/FieldPosition;)Ljava/lang/StringBuffer;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [parse](https://developer.android.com/reference/android/icu/text/NumberFormat.html#parse(java.lang.String,%20java.text.ParsePosition))
        ///
        /// Required features: "java-lang-Number", "java-lang-String", "java-text-ParsePosition"
        #[cfg(any(feature = "all", all(feature = "java-lang-Number", feature = "java-lang-String", feature = "java-text-ParsePosition")))]
        pub fn parse_String_ParsePosition<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::text::ParsePosition>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Number>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/NumberFormat", java.flags == PUBLIC | ABSTRACT, .name == "parse", .descriptor == "(Ljava/lang/String;Ljava/text/ParsePosition;)Ljava/lang/Number;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/NumberFormat\0", "parse\0", "(Ljava/lang/String;Ljava/text/ParsePosition;)Ljava/lang/Number;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [parse](https://developer.android.com/reference/android/icu/text/NumberFormat.html#parse(java.lang.String))
        ///
        /// Required features: "java-lang-Number", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-Number", feature = "java-lang-String")))]
        pub fn parse_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Number>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/NumberFormat", java.flags == PUBLIC, .name == "parse", .descriptor == "(Ljava/lang/String;)Ljava/lang/Number;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/NumberFormat\0", "parse\0", "(Ljava/lang/String;)Ljava/lang/Number;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [parseCurrency](https://developer.android.com/reference/android/icu/text/NumberFormat.html#parseCurrency(java.lang.CharSequence,%20java.text.ParsePosition))
        ///
        /// Required features: "android-icu-util-CurrencyAmount", "java-lang-CharSequence", "java-text-ParsePosition"
        #[cfg(any(feature = "all", all(feature = "android-icu-util-CurrencyAmount", feature = "java-lang-CharSequence", feature = "java-text-ParsePosition")))]
        pub fn parseCurrency<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::text::ParsePosition>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::util::CurrencyAmount>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/NumberFormat", java.flags == PUBLIC, .name == "parseCurrency", .descriptor == "(Ljava/lang/CharSequence;Ljava/text/ParsePosition;)Landroid/icu/util/CurrencyAmount;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/NumberFormat\0", "parseCurrency\0", "(Ljava/lang/CharSequence;Ljava/text/ParsePosition;)Landroid/icu/util/CurrencyAmount;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isParseIntegerOnly](https://developer.android.com/reference/android/icu/text/NumberFormat.html#isParseIntegerOnly())
        pub fn isParseIntegerOnly<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/NumberFormat", java.flags == PUBLIC, .name == "isParseIntegerOnly", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/NumberFormat\0", "isParseIntegerOnly\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setParseIntegerOnly](https://developer.android.com/reference/android/icu/text/NumberFormat.html#setParseIntegerOnly(boolean))
        pub fn setParseIntegerOnly<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/NumberFormat", java.flags == PUBLIC, .name == "setParseIntegerOnly", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/NumberFormat\0", "setParseIntegerOnly\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setParseStrict](https://developer.android.com/reference/android/icu/text/NumberFormat.html#setParseStrict(boolean))
        pub fn setParseStrict<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/NumberFormat", java.flags == PUBLIC, .name == "setParseStrict", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/NumberFormat\0", "setParseStrict\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isParseStrict](https://developer.android.com/reference/android/icu/text/NumberFormat.html#isParseStrict())
        pub fn isParseStrict<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/NumberFormat", java.flags == PUBLIC, .name == "isParseStrict", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/NumberFormat\0", "isParseStrict\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setContext](https://developer.android.com/reference/android/icu/text/NumberFormat.html#setContext(android.icu.text.DisplayContext))
        ///
        /// Required features: "android-icu-text-DisplayContext"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-DisplayContext")))]
        pub fn setContext<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::text::DisplayContext>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/NumberFormat", java.flags == PUBLIC, .name == "setContext", .descriptor == "(Landroid/icu/text/DisplayContext;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/NumberFormat\0", "setContext\0", "(Landroid/icu/text/DisplayContext;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getContext](https://developer.android.com/reference/android/icu/text/NumberFormat.html#getContext(android.icu.text.DisplayContext.Type))
        ///
        /// Required features: "android-icu-text-DisplayContext", "android-icu-text-DisplayContext_Type"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-DisplayContext", feature = "android-icu-text-DisplayContext_Type")))]
        pub fn getContext<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::text::DisplayContext_Type>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::DisplayContext>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/NumberFormat", java.flags == PUBLIC, .name == "getContext", .descriptor == "(Landroid/icu/text/DisplayContext$Type;)Landroid/icu/text/DisplayContext;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/NumberFormat\0", "getContext\0", "(Landroid/icu/text/DisplayContext$Type;)Landroid/icu/text/DisplayContext;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInstance](https://developer.android.com/reference/android/icu/text/NumberFormat.html#getInstance())
        ///
        /// Required features: "android-icu-text-NumberFormat"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-NumberFormat")))]
        pub fn getInstance<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::NumberFormat>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/NumberFormat", java.flags == PUBLIC | STATIC | FINAL, .name == "getInstance", .descriptor == "()Landroid/icu/text/NumberFormat;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/icu/text/NumberFormat\0", "getInstance\0", "()Landroid/icu/text/NumberFormat;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInstance](https://developer.android.com/reference/android/icu/text/NumberFormat.html#getInstance(java.util.Locale))
        ///
        /// Required features: "android-icu-text-NumberFormat", "java-util-Locale"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-NumberFormat", feature = "java-util-Locale")))]
        pub fn getInstance_Locale<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Locale>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::NumberFormat>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/NumberFormat", java.flags == PUBLIC | STATIC, .name == "getInstance", .descriptor == "(Ljava/util/Locale;)Landroid/icu/text/NumberFormat;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/icu/text/NumberFormat\0", "getInstance\0", "(Ljava/util/Locale;)Landroid/icu/text/NumberFormat;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInstance](https://developer.android.com/reference/android/icu/text/NumberFormat.html#getInstance(android.icu.util.ULocale))
        ///
        /// Required features: "android-icu-text-NumberFormat", "android-icu-util-ULocale"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-NumberFormat", feature = "android-icu-util-ULocale")))]
        pub fn getInstance_ULocale<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::util::ULocale>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::NumberFormat>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/NumberFormat", java.flags == PUBLIC | STATIC, .name == "getInstance", .descriptor == "(Landroid/icu/util/ULocale;)Landroid/icu/text/NumberFormat;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/icu/text/NumberFormat\0", "getInstance\0", "(Landroid/icu/util/ULocale;)Landroid/icu/text/NumberFormat;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInstance](https://developer.android.com/reference/android/icu/text/NumberFormat.html#getInstance(int))
        ///
        /// Required features: "android-icu-text-NumberFormat"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-NumberFormat")))]
        pub fn getInstance_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::NumberFormat>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/NumberFormat", java.flags == PUBLIC | STATIC | FINAL, .name == "getInstance", .descriptor == "(I)Landroid/icu/text/NumberFormat;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/icu/text/NumberFormat\0", "getInstance\0", "(I)Landroid/icu/text/NumberFormat;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInstance](https://developer.android.com/reference/android/icu/text/NumberFormat.html#getInstance(java.util.Locale,%20int))
        ///
        /// Required features: "android-icu-text-NumberFormat", "java-util-Locale"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-NumberFormat", feature = "java-util-Locale")))]
        pub fn getInstance_Locale_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Locale>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::NumberFormat>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/NumberFormat", java.flags == PUBLIC | STATIC, .name == "getInstance", .descriptor == "(Ljava/util/Locale;I)Landroid/icu/text/NumberFormat;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/icu/text/NumberFormat\0", "getInstance\0", "(Ljava/util/Locale;I)Landroid/icu/text/NumberFormat;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNumberInstance](https://developer.android.com/reference/android/icu/text/NumberFormat.html#getNumberInstance())
        ///
        /// Required features: "android-icu-text-NumberFormat"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-NumberFormat")))]
        pub fn getNumberInstance<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::NumberFormat>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/NumberFormat", java.flags == PUBLIC | STATIC | FINAL, .name == "getNumberInstance", .descriptor == "()Landroid/icu/text/NumberFormat;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/icu/text/NumberFormat\0", "getNumberInstance\0", "()Landroid/icu/text/NumberFormat;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNumberInstance](https://developer.android.com/reference/android/icu/text/NumberFormat.html#getNumberInstance(java.util.Locale))
        ///
        /// Required features: "android-icu-text-NumberFormat", "java-util-Locale"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-NumberFormat", feature = "java-util-Locale")))]
        pub fn getNumberInstance_Locale<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Locale>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::NumberFormat>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/NumberFormat", java.flags == PUBLIC | STATIC, .name == "getNumberInstance", .descriptor == "(Ljava/util/Locale;)Landroid/icu/text/NumberFormat;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/icu/text/NumberFormat\0", "getNumberInstance\0", "(Ljava/util/Locale;)Landroid/icu/text/NumberFormat;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNumberInstance](https://developer.android.com/reference/android/icu/text/NumberFormat.html#getNumberInstance(android.icu.util.ULocale))
        ///
        /// Required features: "android-icu-text-NumberFormat", "android-icu-util-ULocale"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-NumberFormat", feature = "android-icu-util-ULocale")))]
        pub fn getNumberInstance_ULocale<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::util::ULocale>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::NumberFormat>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/NumberFormat", java.flags == PUBLIC | STATIC, .name == "getNumberInstance", .descriptor == "(Landroid/icu/util/ULocale;)Landroid/icu/text/NumberFormat;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/icu/text/NumberFormat\0", "getNumberInstance\0", "(Landroid/icu/util/ULocale;)Landroid/icu/text/NumberFormat;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getIntegerInstance](https://developer.android.com/reference/android/icu/text/NumberFormat.html#getIntegerInstance())
        ///
        /// Required features: "android-icu-text-NumberFormat"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-NumberFormat")))]
        pub fn getIntegerInstance<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::NumberFormat>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/NumberFormat", java.flags == PUBLIC | STATIC | FINAL, .name == "getIntegerInstance", .descriptor == "()Landroid/icu/text/NumberFormat;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/icu/text/NumberFormat\0", "getIntegerInstance\0", "()Landroid/icu/text/NumberFormat;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getIntegerInstance](https://developer.android.com/reference/android/icu/text/NumberFormat.html#getIntegerInstance(java.util.Locale))
        ///
        /// Required features: "android-icu-text-NumberFormat", "java-util-Locale"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-NumberFormat", feature = "java-util-Locale")))]
        pub fn getIntegerInstance_Locale<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Locale>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::NumberFormat>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/NumberFormat", java.flags == PUBLIC | STATIC, .name == "getIntegerInstance", .descriptor == "(Ljava/util/Locale;)Landroid/icu/text/NumberFormat;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/icu/text/NumberFormat\0", "getIntegerInstance\0", "(Ljava/util/Locale;)Landroid/icu/text/NumberFormat;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getIntegerInstance](https://developer.android.com/reference/android/icu/text/NumberFormat.html#getIntegerInstance(android.icu.util.ULocale))
        ///
        /// Required features: "android-icu-text-NumberFormat", "android-icu-util-ULocale"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-NumberFormat", feature = "android-icu-util-ULocale")))]
        pub fn getIntegerInstance_ULocale<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::util::ULocale>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::NumberFormat>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/NumberFormat", java.flags == PUBLIC | STATIC, .name == "getIntegerInstance", .descriptor == "(Landroid/icu/util/ULocale;)Landroid/icu/text/NumberFormat;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/icu/text/NumberFormat\0", "getIntegerInstance\0", "(Landroid/icu/util/ULocale;)Landroid/icu/text/NumberFormat;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCurrencyInstance](https://developer.android.com/reference/android/icu/text/NumberFormat.html#getCurrencyInstance())
        ///
        /// Required features: "android-icu-text-NumberFormat"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-NumberFormat")))]
        pub fn getCurrencyInstance<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::NumberFormat>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/NumberFormat", java.flags == PUBLIC | STATIC | FINAL, .name == "getCurrencyInstance", .descriptor == "()Landroid/icu/text/NumberFormat;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/icu/text/NumberFormat\0", "getCurrencyInstance\0", "()Landroid/icu/text/NumberFormat;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCurrencyInstance](https://developer.android.com/reference/android/icu/text/NumberFormat.html#getCurrencyInstance(java.util.Locale))
        ///
        /// Required features: "android-icu-text-NumberFormat", "java-util-Locale"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-NumberFormat", feature = "java-util-Locale")))]
        pub fn getCurrencyInstance_Locale<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Locale>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::NumberFormat>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/NumberFormat", java.flags == PUBLIC | STATIC, .name == "getCurrencyInstance", .descriptor == "(Ljava/util/Locale;)Landroid/icu/text/NumberFormat;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/icu/text/NumberFormat\0", "getCurrencyInstance\0", "(Ljava/util/Locale;)Landroid/icu/text/NumberFormat;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCurrencyInstance](https://developer.android.com/reference/android/icu/text/NumberFormat.html#getCurrencyInstance(android.icu.util.ULocale))
        ///
        /// Required features: "android-icu-text-NumberFormat", "android-icu-util-ULocale"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-NumberFormat", feature = "android-icu-util-ULocale")))]
        pub fn getCurrencyInstance_ULocale<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::util::ULocale>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::NumberFormat>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/NumberFormat", java.flags == PUBLIC | STATIC, .name == "getCurrencyInstance", .descriptor == "(Landroid/icu/util/ULocale;)Landroid/icu/text/NumberFormat;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/icu/text/NumberFormat\0", "getCurrencyInstance\0", "(Landroid/icu/util/ULocale;)Landroid/icu/text/NumberFormat;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPercentInstance](https://developer.android.com/reference/android/icu/text/NumberFormat.html#getPercentInstance())
        ///
        /// Required features: "android-icu-text-NumberFormat"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-NumberFormat")))]
        pub fn getPercentInstance<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::NumberFormat>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/NumberFormat", java.flags == PUBLIC | STATIC | FINAL, .name == "getPercentInstance", .descriptor == "()Landroid/icu/text/NumberFormat;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/icu/text/NumberFormat\0", "getPercentInstance\0", "()Landroid/icu/text/NumberFormat;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPercentInstance](https://developer.android.com/reference/android/icu/text/NumberFormat.html#getPercentInstance(java.util.Locale))
        ///
        /// Required features: "android-icu-text-NumberFormat", "java-util-Locale"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-NumberFormat", feature = "java-util-Locale")))]
        pub fn getPercentInstance_Locale<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Locale>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::NumberFormat>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/NumberFormat", java.flags == PUBLIC | STATIC, .name == "getPercentInstance", .descriptor == "(Ljava/util/Locale;)Landroid/icu/text/NumberFormat;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/icu/text/NumberFormat\0", "getPercentInstance\0", "(Ljava/util/Locale;)Landroid/icu/text/NumberFormat;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPercentInstance](https://developer.android.com/reference/android/icu/text/NumberFormat.html#getPercentInstance(android.icu.util.ULocale))
        ///
        /// Required features: "android-icu-text-NumberFormat", "android-icu-util-ULocale"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-NumberFormat", feature = "android-icu-util-ULocale")))]
        pub fn getPercentInstance_ULocale<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::util::ULocale>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::NumberFormat>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/NumberFormat", java.flags == PUBLIC | STATIC, .name == "getPercentInstance", .descriptor == "(Landroid/icu/util/ULocale;)Landroid/icu/text/NumberFormat;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/icu/text/NumberFormat\0", "getPercentInstance\0", "(Landroid/icu/util/ULocale;)Landroid/icu/text/NumberFormat;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getScientificInstance](https://developer.android.com/reference/android/icu/text/NumberFormat.html#getScientificInstance())
        ///
        /// Required features: "android-icu-text-NumberFormat"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-NumberFormat")))]
        pub fn getScientificInstance<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::NumberFormat>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/NumberFormat", java.flags == PUBLIC | STATIC | FINAL, .name == "getScientificInstance", .descriptor == "()Landroid/icu/text/NumberFormat;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/icu/text/NumberFormat\0", "getScientificInstance\0", "()Landroid/icu/text/NumberFormat;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getScientificInstance](https://developer.android.com/reference/android/icu/text/NumberFormat.html#getScientificInstance(java.util.Locale))
        ///
        /// Required features: "android-icu-text-NumberFormat", "java-util-Locale"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-NumberFormat", feature = "java-util-Locale")))]
        pub fn getScientificInstance_Locale<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Locale>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::NumberFormat>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/NumberFormat", java.flags == PUBLIC | STATIC, .name == "getScientificInstance", .descriptor == "(Ljava/util/Locale;)Landroid/icu/text/NumberFormat;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/icu/text/NumberFormat\0", "getScientificInstance\0", "(Ljava/util/Locale;)Landroid/icu/text/NumberFormat;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getScientificInstance](https://developer.android.com/reference/android/icu/text/NumberFormat.html#getScientificInstance(android.icu.util.ULocale))
        ///
        /// Required features: "android-icu-text-NumberFormat", "android-icu-util-ULocale"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-NumberFormat", feature = "android-icu-util-ULocale")))]
        pub fn getScientificInstance_ULocale<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::util::ULocale>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::NumberFormat>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/NumberFormat", java.flags == PUBLIC | STATIC, .name == "getScientificInstance", .descriptor == "(Landroid/icu/util/ULocale;)Landroid/icu/text/NumberFormat;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/icu/text/NumberFormat\0", "getScientificInstance\0", "(Landroid/icu/util/ULocale;)Landroid/icu/text/NumberFormat;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAvailableLocales](https://developer.android.com/reference/android/icu/text/NumberFormat.html#getAvailableLocales())
        ///
        /// Required features: "java-util-Locale"
        #[cfg(any(feature = "all", all(feature = "java-util-Locale")))]
        pub fn getAvailableLocales<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::util::Locale, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/NumberFormat", java.flags == PUBLIC | STATIC, .name == "getAvailableLocales", .descriptor == "()[Ljava/util/Locale;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/icu/text/NumberFormat\0", "getAvailableLocales\0", "()[Ljava/util/Locale;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hashCode](https://developer.android.com/reference/android/icu/text/NumberFormat.html#hashCode())
        pub fn hashCode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/NumberFormat", java.flags == PUBLIC, .name == "hashCode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/NumberFormat\0", "hashCode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [equals](https://developer.android.com/reference/android/icu/text/NumberFormat.html#equals(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn equals<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/NumberFormat", java.flags == PUBLIC, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/NumberFormat\0", "equals\0", "(Ljava/lang/Object;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clone](https://developer.android.com/reference/android/icu/text/NumberFormat.html#clone())
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn clone<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/NumberFormat", java.flags == PUBLIC, .name == "clone", .descriptor == "()Ljava/lang/Object;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/NumberFormat\0", "clone\0", "()Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isGroupingUsed](https://developer.android.com/reference/android/icu/text/NumberFormat.html#isGroupingUsed())
        pub fn isGroupingUsed<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/NumberFormat", java.flags == PUBLIC, .name == "isGroupingUsed", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/NumberFormat\0", "isGroupingUsed\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setGroupingUsed](https://developer.android.com/reference/android/icu/text/NumberFormat.html#setGroupingUsed(boolean))
        pub fn setGroupingUsed<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/NumberFormat", java.flags == PUBLIC, .name == "setGroupingUsed", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/NumberFormat\0", "setGroupingUsed\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMaximumIntegerDigits](https://developer.android.com/reference/android/icu/text/NumberFormat.html#getMaximumIntegerDigits())
        pub fn getMaximumIntegerDigits<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/NumberFormat", java.flags == PUBLIC, .name == "getMaximumIntegerDigits", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/NumberFormat\0", "getMaximumIntegerDigits\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setMaximumIntegerDigits](https://developer.android.com/reference/android/icu/text/NumberFormat.html#setMaximumIntegerDigits(int))
        pub fn setMaximumIntegerDigits<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/NumberFormat", java.flags == PUBLIC, .name == "setMaximumIntegerDigits", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/NumberFormat\0", "setMaximumIntegerDigits\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMinimumIntegerDigits](https://developer.android.com/reference/android/icu/text/NumberFormat.html#getMinimumIntegerDigits())
        pub fn getMinimumIntegerDigits<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/NumberFormat", java.flags == PUBLIC, .name == "getMinimumIntegerDigits", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/NumberFormat\0", "getMinimumIntegerDigits\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setMinimumIntegerDigits](https://developer.android.com/reference/android/icu/text/NumberFormat.html#setMinimumIntegerDigits(int))
        pub fn setMinimumIntegerDigits<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/NumberFormat", java.flags == PUBLIC, .name == "setMinimumIntegerDigits", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/NumberFormat\0", "setMinimumIntegerDigits\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMaximumFractionDigits](https://developer.android.com/reference/android/icu/text/NumberFormat.html#getMaximumFractionDigits())
        pub fn getMaximumFractionDigits<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/NumberFormat", java.flags == PUBLIC, .name == "getMaximumFractionDigits", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/NumberFormat\0", "getMaximumFractionDigits\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setMaximumFractionDigits](https://developer.android.com/reference/android/icu/text/NumberFormat.html#setMaximumFractionDigits(int))
        pub fn setMaximumFractionDigits<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/NumberFormat", java.flags == PUBLIC, .name == "setMaximumFractionDigits", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/NumberFormat\0", "setMaximumFractionDigits\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMinimumFractionDigits](https://developer.android.com/reference/android/icu/text/NumberFormat.html#getMinimumFractionDigits())
        pub fn getMinimumFractionDigits<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/NumberFormat", java.flags == PUBLIC, .name == "getMinimumFractionDigits", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/NumberFormat\0", "getMinimumFractionDigits\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setMinimumFractionDigits](https://developer.android.com/reference/android/icu/text/NumberFormat.html#setMinimumFractionDigits(int))
        pub fn setMinimumFractionDigits<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/NumberFormat", java.flags == PUBLIC, .name == "setMinimumFractionDigits", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/NumberFormat\0", "setMinimumFractionDigits\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setCurrency](https://developer.android.com/reference/android/icu/text/NumberFormat.html#setCurrency(android.icu.util.Currency))
        ///
        /// Required features: "android-icu-util-Currency"
        #[cfg(any(feature = "all", all(feature = "android-icu-util-Currency")))]
        pub fn setCurrency<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::util::Currency>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/NumberFormat", java.flags == PUBLIC, .name == "setCurrency", .descriptor == "(Landroid/icu/util/Currency;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/NumberFormat\0", "setCurrency\0", "(Landroid/icu/util/Currency;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCurrency](https://developer.android.com/reference/android/icu/text/NumberFormat.html#getCurrency())
        ///
        /// Required features: "android-icu-util-Currency"
        #[cfg(any(feature = "all", all(feature = "android-icu-util-Currency")))]
        pub fn getCurrency<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::util::Currency>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/NumberFormat", java.flags == PUBLIC, .name == "getCurrency", .descriptor == "()Landroid/icu/util/Currency;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/NumberFormat\0", "getCurrency\0", "()Landroid/icu/util/Currency;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRoundingMode](https://developer.android.com/reference/android/icu/text/NumberFormat.html#getRoundingMode())
        pub fn getRoundingMode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/NumberFormat", java.flags == PUBLIC, .name == "getRoundingMode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/NumberFormat\0", "getRoundingMode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setRoundingMode](https://developer.android.com/reference/android/icu/text/NumberFormat.html#setRoundingMode(int))
        pub fn setRoundingMode<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/NumberFormat", java.flags == PUBLIC, .name == "setRoundingMode", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/NumberFormat\0", "setRoundingMode\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInstance](https://developer.android.com/reference/android/icu/text/NumberFormat.html#getInstance(android.icu.util.ULocale,%20int))
        ///
        /// Required features: "android-icu-text-NumberFormat", "android-icu-util-ULocale"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-NumberFormat", feature = "android-icu-util-ULocale")))]
        pub fn getInstance_ULocale_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::util::ULocale>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::NumberFormat>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/NumberFormat", java.flags == PUBLIC | STATIC, .name == "getInstance", .descriptor == "(Landroid/icu/util/ULocale;I)Landroid/icu/text/NumberFormat;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/icu/text/NumberFormat\0", "getInstance\0", "(Landroid/icu/util/ULocale;I)Landroid/icu/text/NumberFormat;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [getPattern](https://developer.android.com/reference/android/icu/text/NumberFormat.html#getPattern(android.icu.util.ULocale,%20int))
        // ///
        // /// Required features: "android-icu-util-ULocale", "java-lang-String"
        // #[cfg(any(feature = "all", all(feature = "android-icu-util-ULocale", feature = "java-lang-String")))]
        // fn getPattern<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::util::ULocale>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/icu/text/NumberFormat", java.flags == PROTECTED | STATIC, .name == "getPattern", .descriptor == "(Landroid/icu/util/ULocale;I)Ljava/lang/String;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/icu/text/NumberFormat\0", "getPattern\0", "(Landroid/icu/util/ULocale;I)Ljava/lang/String;\0");
        //         __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// public static final [ACCOUNTINGCURRENCYSTYLE](https://developer.android.com/reference/android/icu/text/NumberFormat.html#ACCOUNTINGCURRENCYSTYLE)
        pub const ACCOUNTINGCURRENCYSTYLE : i32 = 7;

        /// public static final [CASHCURRENCYSTYLE](https://developer.android.com/reference/android/icu/text/NumberFormat.html#CASHCURRENCYSTYLE)
        pub const CASHCURRENCYSTYLE : i32 = 8;

        /// public static final [CURRENCYSTYLE](https://developer.android.com/reference/android/icu/text/NumberFormat.html#CURRENCYSTYLE)
        pub const CURRENCYSTYLE : i32 = 1;

        /// public static final [FRACTION_FIELD](https://developer.android.com/reference/android/icu/text/NumberFormat.html#FRACTION_FIELD)
        pub const FRACTION_FIELD : i32 = 1;

        /// public static final [INTEGERSTYLE](https://developer.android.com/reference/android/icu/text/NumberFormat.html#INTEGERSTYLE)
        pub const INTEGERSTYLE : i32 = 4;

        /// public static final [INTEGER_FIELD](https://developer.android.com/reference/android/icu/text/NumberFormat.html#INTEGER_FIELD)
        pub const INTEGER_FIELD : i32 = 0;

        /// public static final [ISOCURRENCYSTYLE](https://developer.android.com/reference/android/icu/text/NumberFormat.html#ISOCURRENCYSTYLE)
        pub const ISOCURRENCYSTYLE : i32 = 5;

        /// public static final [NUMBERSTYLE](https://developer.android.com/reference/android/icu/text/NumberFormat.html#NUMBERSTYLE)
        pub const NUMBERSTYLE : i32 = 0;

        /// public static final [PERCENTSTYLE](https://developer.android.com/reference/android/icu/text/NumberFormat.html#PERCENTSTYLE)
        pub const PERCENTSTYLE : i32 = 2;

        /// public static final [PLURALCURRENCYSTYLE](https://developer.android.com/reference/android/icu/text/NumberFormat.html#PLURALCURRENCYSTYLE)
        pub const PLURALCURRENCYSTYLE : i32 = 6;

        /// public static final [SCIENTIFICSTYLE](https://developer.android.com/reference/android/icu/text/NumberFormat.html#SCIENTIFICSTYLE)
        pub const SCIENTIFICSTYLE : i32 = 3;

        /// public static final [STANDARDCURRENCYSTYLE](https://developer.android.com/reference/android/icu/text/NumberFormat.html#STANDARDCURRENCYSTYLE)
        pub const STANDARDCURRENCYSTYLE : i32 = 9;
    }
}
