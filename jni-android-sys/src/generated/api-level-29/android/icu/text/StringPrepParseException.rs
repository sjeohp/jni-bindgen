// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-icu-text-StringPrepParseException"))]
__jni_bindgen! {
    /// public class [StringPrepParseException](https://developer.android.com/reference/android/icu/text/StringPrepParseException.html)
    ///
    /// Required feature: android-icu-text-StringPrepParseException
    public class StringPrepParseException ("android/icu/text/StringPrepParseException") extends crate::java::text::ParseException {

        /// [StringPrepParseException](https://developer.android.com/reference/android/icu/text/StringPrepParseException.html#StringPrepParseException(java.lang.String,%20int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn new_String_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::icu::text::StringPrepParseException>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/StringPrepParseException", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/lang/String;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/StringPrepParseException\0", "<init>\0", "(Ljava/lang/String;I)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [StringPrepParseException](https://developer.android.com/reference/android/icu/text/StringPrepParseException.html#StringPrepParseException(java.lang.String,%20int,%20java.lang.String,%20int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn new_String_int_String_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg3: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::icu::text::StringPrepParseException>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/StringPrepParseException", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/lang/String;ILjava/lang/String;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/StringPrepParseException\0", "<init>\0", "(Ljava/lang/String;ILjava/lang/String;I)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [StringPrepParseException](https://developer.android.com/reference/android/icu/text/StringPrepParseException.html#StringPrepParseException(java.lang.String,%20int,%20java.lang.String,%20int,%20int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn new_String_int_String_int_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg3: i32, arg4: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::icu::text::StringPrepParseException>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/StringPrepParseException", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/lang/String;ILjava/lang/String;II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/StringPrepParseException\0", "<init>\0", "(Ljava/lang/String;ILjava/lang/String;II)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [equals](https://developer.android.com/reference/android/icu/text/StringPrepParseException.html#equals(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn equals<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/StringPrepParseException", java.flags == PUBLIC, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/StringPrepParseException\0", "equals\0", "(Ljava/lang/Object;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hashCode](https://developer.android.com/reference/android/icu/text/StringPrepParseException.html#hashCode())
        pub fn hashCode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/StringPrepParseException", java.flags == PUBLIC, .name == "hashCode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/StringPrepParseException\0", "hashCode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/android/icu/text/StringPrepParseException.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/StringPrepParseException", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/StringPrepParseException\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getError](https://developer.android.com/reference/android/icu/text/StringPrepParseException.html#getError())
        pub fn getError<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/StringPrepParseException", java.flags == PUBLIC, .name == "getError", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/StringPrepParseException\0", "getError\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [ACE_PREFIX_ERROR](https://developer.android.com/reference/android/icu/text/StringPrepParseException.html#ACE_PREFIX_ERROR)
        pub const ACE_PREFIX_ERROR : i32 = 6;

        /// public static final [BUFFER_OVERFLOW_ERROR](https://developer.android.com/reference/android/icu/text/StringPrepParseException.html#BUFFER_OVERFLOW_ERROR)
        pub const BUFFER_OVERFLOW_ERROR : i32 = 9;

        /// public static final [CHECK_BIDI_ERROR](https://developer.android.com/reference/android/icu/text/StringPrepParseException.html#CHECK_BIDI_ERROR)
        pub const CHECK_BIDI_ERROR : i32 = 4;

        /// public static final [DOMAIN_NAME_TOO_LONG_ERROR](https://developer.android.com/reference/android/icu/text/StringPrepParseException.html#DOMAIN_NAME_TOO_LONG_ERROR)
        pub const DOMAIN_NAME_TOO_LONG_ERROR : i32 = 11;

        /// public static final [ILLEGAL_CHAR_FOUND](https://developer.android.com/reference/android/icu/text/StringPrepParseException.html#ILLEGAL_CHAR_FOUND)
        pub const ILLEGAL_CHAR_FOUND : i32 = 1;

        /// public static final [INVALID_CHAR_FOUND](https://developer.android.com/reference/android/icu/text/StringPrepParseException.html#INVALID_CHAR_FOUND)
        pub const INVALID_CHAR_FOUND : i32 = 0;

        /// public static final [LABEL_TOO_LONG_ERROR](https://developer.android.com/reference/android/icu/text/StringPrepParseException.html#LABEL_TOO_LONG_ERROR)
        pub const LABEL_TOO_LONG_ERROR : i32 = 8;

        /// public static final [PROHIBITED_ERROR](https://developer.android.com/reference/android/icu/text/StringPrepParseException.html#PROHIBITED_ERROR)
        pub const PROHIBITED_ERROR : i32 = 2;

        /// public static final [STD3_ASCII_RULES_ERROR](https://developer.android.com/reference/android/icu/text/StringPrepParseException.html#STD3_ASCII_RULES_ERROR)
        pub const STD3_ASCII_RULES_ERROR : i32 = 5;

        /// public static final [UNASSIGNED_ERROR](https://developer.android.com/reference/android/icu/text/StringPrepParseException.html#UNASSIGNED_ERROR)
        pub const UNASSIGNED_ERROR : i32 = 3;

        /// public static final [VERIFICATION_ERROR](https://developer.android.com/reference/android/icu/text/StringPrepParseException.html#VERIFICATION_ERROR)
        pub const VERIFICATION_ERROR : i32 = 7;

        /// public static final [ZERO_LENGTH_LABEL](https://developer.android.com/reference/android/icu/text/StringPrepParseException.html#ZERO_LENGTH_LABEL)
        pub const ZERO_LENGTH_LABEL : i32 = 10;
    }
}
