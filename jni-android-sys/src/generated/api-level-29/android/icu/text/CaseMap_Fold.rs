// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-icu-text-CaseMap_Fold"))]
__jni_bindgen! {
    /// public final class [CaseMap.Fold](https://developer.android.com/reference/android/icu/text/CaseMap.Fold.html)
    ///
    /// Required feature: android-icu-text-CaseMap_Fold
    public final class CaseMap_Fold ("android/icu/text/CaseMap$Fold") extends crate::android::icu::text::CaseMap {

        // // Not emitting: Non-public method
        // /// [Fold](https://developer.android.com/reference/android/icu/text/CaseMap.Fold.html#Fold(int))
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::icu::text::CaseMap_Fold>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/icu/text/CaseMap$Fold", java.flags == (empty), .name == "<init>", .descriptor == "(I)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/CaseMap$Fold\0", "<init>\0", "(I)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [omitUnchangedText](https://developer.android.com/reference/android/icu/text/CaseMap.Fold.html#omitUnchangedText())
        ///
        /// Required features: "android-icu-text-CaseMap_Fold"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-CaseMap_Fold")))]
        pub fn omitUnchangedText<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::CaseMap_Fold>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/CaseMap$Fold", java.flags == PUBLIC, .name == "omitUnchangedText", .descriptor == "()Landroid/icu/text/CaseMap$Fold;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/CaseMap$Fold\0", "omitUnchangedText\0", "()Landroid/icu/text/CaseMap$Fold;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [turkic](https://developer.android.com/reference/android/icu/text/CaseMap.Fold.html#turkic())
        ///
        /// Required features: "android-icu-text-CaseMap_Fold"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-CaseMap_Fold")))]
        pub fn turkic<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::CaseMap_Fold>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/CaseMap$Fold", java.flags == PUBLIC, .name == "turkic", .descriptor == "()Landroid/icu/text/CaseMap$Fold;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/CaseMap$Fold\0", "turkic\0", "()Landroid/icu/text/CaseMap$Fold;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [apply](https://developer.android.com/reference/android/icu/text/CaseMap.Fold.html#apply(java.lang.CharSequence))
        ///
        /// Required features: "java-lang-CharSequence", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence", feature = "java-lang-String")))]
        pub fn apply_CharSequence<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/CaseMap$Fold", java.flags == PUBLIC, .name == "apply", .descriptor == "(Ljava/lang/CharSequence;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/CaseMap$Fold\0", "apply\0", "(Ljava/lang/CharSequence;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [apply](https://developer.android.com/reference/android/icu/text/CaseMap.Fold.html#apply(java.lang.CharSequence,%20java.lang.Appendable,%20android.icu.text.Edits))
        ///
        /// Required features: "android-icu-text-Edits", "java-lang-Appendable", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-Edits", feature = "java-lang-Appendable", feature = "java-lang-CharSequence")))]
        pub fn apply_CharSequence_Appendable_Edits<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Appendable>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::text::Edits>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Appendable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/CaseMap$Fold", java.flags == PUBLIC, .name == "apply", .descriptor == "(Ljava/lang/CharSequence;Ljava/lang/Appendable;Landroid/icu/text/Edits;)Ljava/lang/Appendable;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/CaseMap$Fold\0", "apply\0", "(Ljava/lang/CharSequence;Ljava/lang/Appendable;Landroid/icu/text/Edits;)Ljava/lang/Appendable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Bridge method - type erasure
        // /// [omitUnchangedText](https://developer.android.com/reference/android/icu/text/CaseMap.Fold.html#omitUnchangedText())
        // ///
        // /// Required features: "android-icu-text-CaseMap"
        // #[cfg(any(feature = "all", all(feature = "android-icu-text-CaseMap")))]
        // pub fn omitUnchangedText<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::CaseMap>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/icu/text/CaseMap$Fold", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "omitUnchangedText", .descriptor == "()Landroid/icu/text/CaseMap;"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/CaseMap$Fold\0", "omitUnchangedText\0", "()Landroid/icu/text/CaseMap;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }
    }
}
