// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-icu-text-ScientificNumberFormatter"))]
__jni_bindgen! {
    /// public final class [ScientificNumberFormatter](https://developer.android.com/reference/android/icu/text/ScientificNumberFormatter.html)
    ///
    /// Required feature: android-icu-text-ScientificNumberFormatter
    public final class ScientificNumberFormatter ("android/icu/text/ScientificNumberFormatter") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [ScientificNumberFormatter](https://developer.android.com/reference/android/icu/text/ScientificNumberFormatter.html#ScientificNumberFormatter())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::icu::text::ScientificNumberFormatter>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/icu/text/ScientificNumberFormatter", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/ScientificNumberFormatter\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getSuperscriptInstance](https://developer.android.com/reference/android/icu/text/ScientificNumberFormatter.html#getSuperscriptInstance(android.icu.util.ULocale))
        ///
        /// Required features: "android-icu-text-ScientificNumberFormatter", "android-icu-util-ULocale"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-ScientificNumberFormatter", feature = "android-icu-util-ULocale")))]
        pub fn getSuperscriptInstance_ULocale<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::util::ULocale>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::ScientificNumberFormatter>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/ScientificNumberFormatter", java.flags == PUBLIC | STATIC, .name == "getSuperscriptInstance", .descriptor == "(Landroid/icu/util/ULocale;)Landroid/icu/text/ScientificNumberFormatter;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/icu/text/ScientificNumberFormatter\0", "getSuperscriptInstance\0", "(Landroid/icu/util/ULocale;)Landroid/icu/text/ScientificNumberFormatter;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSuperscriptInstance](https://developer.android.com/reference/android/icu/text/ScientificNumberFormatter.html#getSuperscriptInstance(android.icu.text.DecimalFormat))
        ///
        /// Required features: "android-icu-text-DecimalFormat", "android-icu-text-ScientificNumberFormatter"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-DecimalFormat", feature = "android-icu-text-ScientificNumberFormatter")))]
        pub fn getSuperscriptInstance_DecimalFormat<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::text::DecimalFormat>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::ScientificNumberFormatter>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/ScientificNumberFormatter", java.flags == PUBLIC | STATIC, .name == "getSuperscriptInstance", .descriptor == "(Landroid/icu/text/DecimalFormat;)Landroid/icu/text/ScientificNumberFormatter;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/icu/text/ScientificNumberFormatter\0", "getSuperscriptInstance\0", "(Landroid/icu/text/DecimalFormat;)Landroid/icu/text/ScientificNumberFormatter;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMarkupInstance](https://developer.android.com/reference/android/icu/text/ScientificNumberFormatter.html#getMarkupInstance(android.icu.util.ULocale,%20java.lang.String,%20java.lang.String))
        ///
        /// Required features: "android-icu-text-ScientificNumberFormatter", "android-icu-util-ULocale", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-ScientificNumberFormatter", feature = "android-icu-util-ULocale", feature = "java-lang-String")))]
        pub fn getMarkupInstance_ULocale_String_String<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::util::ULocale>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::ScientificNumberFormatter>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/ScientificNumberFormatter", java.flags == PUBLIC | STATIC, .name == "getMarkupInstance", .descriptor == "(Landroid/icu/util/ULocale;Ljava/lang/String;Ljava/lang/String;)Landroid/icu/text/ScientificNumberFormatter;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/icu/text/ScientificNumberFormatter\0", "getMarkupInstance\0", "(Landroid/icu/util/ULocale;Ljava/lang/String;Ljava/lang/String;)Landroid/icu/text/ScientificNumberFormatter;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMarkupInstance](https://developer.android.com/reference/android/icu/text/ScientificNumberFormatter.html#getMarkupInstance(android.icu.text.DecimalFormat,%20java.lang.String,%20java.lang.String))
        ///
        /// Required features: "android-icu-text-DecimalFormat", "android-icu-text-ScientificNumberFormatter", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-DecimalFormat", feature = "android-icu-text-ScientificNumberFormatter", feature = "java-lang-String")))]
        pub fn getMarkupInstance_DecimalFormat_String_String<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::text::DecimalFormat>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::ScientificNumberFormatter>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/ScientificNumberFormatter", java.flags == PUBLIC | STATIC, .name == "getMarkupInstance", .descriptor == "(Landroid/icu/text/DecimalFormat;Ljava/lang/String;Ljava/lang/String;)Landroid/icu/text/ScientificNumberFormatter;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/icu/text/ScientificNumberFormatter\0", "getMarkupInstance\0", "(Landroid/icu/text/DecimalFormat;Ljava/lang/String;Ljava/lang/String;)Landroid/icu/text/ScientificNumberFormatter;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [format](https://developer.android.com/reference/android/icu/text/ScientificNumberFormatter.html#format(java.lang.Object))
        ///
        /// Required features: "java-lang-Object", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-lang-String")))]
        pub fn format<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/ScientificNumberFormatter", java.flags == PUBLIC, .name == "format", .descriptor == "(Ljava/lang/Object;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/ScientificNumberFormatter\0", "format\0", "(Ljava/lang/Object;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
