// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-icu-text-PluralRules"))]
__jni_bindgen! {
    /// public class [PluralRules](https://developer.android.com/reference/android/icu/text/PluralRules.html)
    ///
    /// Required feature: android-icu-text-PluralRules
    public class PluralRules ("android/icu/text/PluralRules") extends crate::java::lang::Object, implements crate::java::io::Serializable {

        // // Not emitting: Non-public method
        // /// [PluralRules](https://developer.android.com/reference/android/icu/text/PluralRules.html#PluralRules())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::icu::text::PluralRules>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/icu/text/PluralRules", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/PluralRules\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [parseDescription](https://developer.android.com/reference/android/icu/text/PluralRules.html#parseDescription(java.lang.String))
        ///
        /// Required features: "android-icu-text-PluralRules", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-PluralRules", feature = "java-lang-String")))]
        pub fn parseDescription<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::PluralRules>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/PluralRules", java.flags == PUBLIC | STATIC, .name == "parseDescription", .descriptor == "(Ljava/lang/String;)Landroid/icu/text/PluralRules;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/icu/text/PluralRules\0", "parseDescription\0", "(Ljava/lang/String;)Landroid/icu/text/PluralRules;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createRules](https://developer.android.com/reference/android/icu/text/PluralRules.html#createRules(java.lang.String))
        ///
        /// Required features: "android-icu-text-PluralRules", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-PluralRules", feature = "java-lang-String")))]
        pub fn createRules<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::PluralRules>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/PluralRules", java.flags == PUBLIC | STATIC, .name == "createRules", .descriptor == "(Ljava/lang/String;)Landroid/icu/text/PluralRules;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/icu/text/PluralRules\0", "createRules\0", "(Ljava/lang/String;)Landroid/icu/text/PluralRules;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [forLocale](https://developer.android.com/reference/android/icu/text/PluralRules.html#forLocale(android.icu.util.ULocale))
        ///
        /// Required features: "android-icu-text-PluralRules", "android-icu-util-ULocale"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-PluralRules", feature = "android-icu-util-ULocale")))]
        pub fn forLocale_ULocale<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::util::ULocale>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::PluralRules>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/PluralRules", java.flags == PUBLIC | STATIC, .name == "forLocale", .descriptor == "(Landroid/icu/util/ULocale;)Landroid/icu/text/PluralRules;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/icu/text/PluralRules\0", "forLocale\0", "(Landroid/icu/util/ULocale;)Landroid/icu/text/PluralRules;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [forLocale](https://developer.android.com/reference/android/icu/text/PluralRules.html#forLocale(java.util.Locale))
        ///
        /// Required features: "android-icu-text-PluralRules", "java-util-Locale"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-PluralRules", feature = "java-util-Locale")))]
        pub fn forLocale_Locale<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Locale>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::PluralRules>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/PluralRules", java.flags == PUBLIC | STATIC, .name == "forLocale", .descriptor == "(Ljava/util/Locale;)Landroid/icu/text/PluralRules;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/icu/text/PluralRules\0", "forLocale\0", "(Ljava/util/Locale;)Landroid/icu/text/PluralRules;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [forLocale](https://developer.android.com/reference/android/icu/text/PluralRules.html#forLocale(android.icu.util.ULocale,%20android.icu.text.PluralRules.PluralType))
        ///
        /// Required features: "android-icu-text-PluralRules", "android-icu-text-PluralRules_PluralType", "android-icu-util-ULocale"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-PluralRules", feature = "android-icu-text-PluralRules_PluralType", feature = "android-icu-util-ULocale")))]
        pub fn forLocale_ULocale_PluralType<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::util::ULocale>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::text::PluralRules_PluralType>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::PluralRules>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/PluralRules", java.flags == PUBLIC | STATIC, .name == "forLocale", .descriptor == "(Landroid/icu/util/ULocale;Landroid/icu/text/PluralRules$PluralType;)Landroid/icu/text/PluralRules;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/icu/text/PluralRules\0", "forLocale\0", "(Landroid/icu/util/ULocale;Landroid/icu/text/PluralRules$PluralType;)Landroid/icu/text/PluralRules;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [forLocale](https://developer.android.com/reference/android/icu/text/PluralRules.html#forLocale(java.util.Locale,%20android.icu.text.PluralRules.PluralType))
        ///
        /// Required features: "android-icu-text-PluralRules", "android-icu-text-PluralRules_PluralType", "java-util-Locale"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-PluralRules", feature = "android-icu-text-PluralRules_PluralType", feature = "java-util-Locale")))]
        pub fn forLocale_Locale_PluralType<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Locale>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::text::PluralRules_PluralType>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::PluralRules>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/PluralRules", java.flags == PUBLIC | STATIC, .name == "forLocale", .descriptor == "(Ljava/util/Locale;Landroid/icu/text/PluralRules$PluralType;)Landroid/icu/text/PluralRules;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/icu/text/PluralRules\0", "forLocale\0", "(Ljava/util/Locale;Landroid/icu/text/PluralRules$PluralType;)Landroid/icu/text/PluralRules;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hashCode](https://developer.android.com/reference/android/icu/text/PluralRules.html#hashCode())
        pub fn hashCode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/PluralRules", java.flags == PUBLIC, .name == "hashCode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/PluralRules\0", "hashCode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [select](https://developer.android.com/reference/android/icu/text/PluralRules.html#select(double))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn select<'env>(&'env self, arg0: f64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/PluralRules", java.flags == PUBLIC, .name == "select", .descriptor == "(D)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/PluralRules\0", "select\0", "(D)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getKeywords](https://developer.android.com/reference/android/icu/text/PluralRules.html#getKeywords())
        ///
        /// Required features: "java-util-Set"
        #[cfg(any(feature = "all", all(feature = "java-util-Set")))]
        pub fn getKeywords<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Set>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/PluralRules", java.flags == PUBLIC, .name == "getKeywords", .descriptor == "()Ljava/util/Set;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/PluralRules\0", "getKeywords\0", "()Ljava/util/Set;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getUniqueKeywordValue](https://developer.android.com/reference/android/icu/text/PluralRules.html#getUniqueKeywordValue(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getUniqueKeywordValue<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<f64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/PluralRules", java.flags == PUBLIC, .name == "getUniqueKeywordValue", .descriptor == "(Ljava/lang/String;)D"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/PluralRules\0", "getUniqueKeywordValue\0", "(Ljava/lang/String;)D\0");
                __jni_env.call_double_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAllKeywordValues](https://developer.android.com/reference/android/icu/text/PluralRules.html#getAllKeywordValues(java.lang.String))
        ///
        /// Required features: "java-lang-String", "java-util-Collection"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-util-Collection")))]
        pub fn getAllKeywordValues<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Collection>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/PluralRules", java.flags == PUBLIC, .name == "getAllKeywordValues", .descriptor == "(Ljava/lang/String;)Ljava/util/Collection;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/PluralRules\0", "getAllKeywordValues\0", "(Ljava/lang/String;)Ljava/util/Collection;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSamples](https://developer.android.com/reference/android/icu/text/PluralRules.html#getSamples(java.lang.String))
        ///
        /// Required features: "java-lang-String", "java-util-Collection"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-util-Collection")))]
        pub fn getSamples<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Collection>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/PluralRules", java.flags == PUBLIC, .name == "getSamples", .descriptor == "(Ljava/lang/String;)Ljava/util/Collection;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/PluralRules\0", "getSamples\0", "(Ljava/lang/String;)Ljava/util/Collection;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/android/icu/text/PluralRules.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/PluralRules", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/PluralRules\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [equals](https://developer.android.com/reference/android/icu/text/PluralRules.html#equals(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn equals_Object<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/PluralRules", java.flags == PUBLIC, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/PluralRules\0", "equals\0", "(Ljava/lang/Object;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [equals](https://developer.android.com/reference/android/icu/text/PluralRules.html#equals(android.icu.text.PluralRules))
        ///
        /// Required features: "android-icu-text-PluralRules"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-PluralRules")))]
        pub fn equals_PluralRules<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::text::PluralRules>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/PluralRules", java.flags == PUBLIC, .name == "equals", .descriptor == "(Landroid/icu/text/PluralRules;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/PluralRules\0", "equals\0", "(Landroid/icu/text/PluralRules;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// **get** public static final [DEFAULT](https://developer.android.com/reference/android/icu/text/PluralRules.html#DEFAULT)
        ///
        /// Required feature: android-icu-text-PluralRules
        #[cfg(any(feature = "all", feature = "android-icu-text-PluralRules"))]
        pub fn DEFAULT<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::PluralRules>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/icu/text/PluralRules\0", "DEFAULT\0", "Landroid/icu/text/PluralRules;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// public static final [KEYWORD_FEW](https://developer.android.com/reference/android/icu/text/PluralRules.html#KEYWORD_FEW)
        pub const KEYWORD_FEW : &'static str = "few";

        /// public static final [KEYWORD_MANY](https://developer.android.com/reference/android/icu/text/PluralRules.html#KEYWORD_MANY)
        pub const KEYWORD_MANY : &'static str = "many";

        /// public static final [KEYWORD_ONE](https://developer.android.com/reference/android/icu/text/PluralRules.html#KEYWORD_ONE)
        pub const KEYWORD_ONE : &'static str = "one";

        /// public static final [KEYWORD_OTHER](https://developer.android.com/reference/android/icu/text/PluralRules.html#KEYWORD_OTHER)
        pub const KEYWORD_OTHER : &'static str = "other";

        /// public static final [KEYWORD_TWO](https://developer.android.com/reference/android/icu/text/PluralRules.html#KEYWORD_TWO)
        pub const KEYWORD_TWO : &'static str = "two";

        /// public static final [KEYWORD_ZERO](https://developer.android.com/reference/android/icu/text/PluralRules.html#KEYWORD_ZERO)
        pub const KEYWORD_ZERO : &'static str = "zero";

        /// public static final [NO_UNIQUE_VALUE](https://developer.android.com/reference/android/icu/text/PluralRules.html#NO_UNIQUE_VALUE)
        pub const NO_UNIQUE_VALUE : f64 = -0.00123456777f64;
    }
}
