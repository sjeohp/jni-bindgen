// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-icu-text-MeasureFormat"))]
__jni_bindgen! {
    /// public class [MeasureFormat](https://developer.android.com/reference/android/icu/text/MeasureFormat.html)
    ///
    /// Required feature: android-icu-text-MeasureFormat
    public class MeasureFormat ("android/icu/text/MeasureFormat") extends crate::android::icu::text::UFormat {

        // // Not emitting: Non-public method
        // /// [MeasureFormat](https://developer.android.com/reference/android/icu/text/MeasureFormat.html#MeasureFormat(android.icu.util.ULocale,%20android.icu.text.MeasureFormat.FormatWidth))
        // ///
        // /// Required features: "android-icu-text-MeasureFormat_FormatWidth", "android-icu-util-ULocale"
        // #[cfg(any(feature = "all", all(feature = "android-icu-text-MeasureFormat_FormatWidth", feature = "android-icu-util-ULocale")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::util::ULocale>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::text::MeasureFormat_FormatWidth>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::icu::text::MeasureFormat>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/icu/text/MeasureFormat", java.flags == (empty), .name == "<init>", .descriptor == "(Landroid/icu/util/ULocale;Landroid/icu/text/MeasureFormat$FormatWidth;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/MeasureFormat\0", "<init>\0", "(Landroid/icu/util/ULocale;Landroid/icu/text/MeasureFormat$FormatWidth;)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getInstance](https://developer.android.com/reference/android/icu/text/MeasureFormat.html#getInstance(android.icu.util.ULocale,%20android.icu.text.MeasureFormat.FormatWidth))
        ///
        /// Required features: "android-icu-text-MeasureFormat", "android-icu-text-MeasureFormat_FormatWidth", "android-icu-util-ULocale"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-MeasureFormat", feature = "android-icu-text-MeasureFormat_FormatWidth", feature = "android-icu-util-ULocale")))]
        pub fn getInstance_ULocale_FormatWidth<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::util::ULocale>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::text::MeasureFormat_FormatWidth>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::MeasureFormat>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/MeasureFormat", java.flags == PUBLIC | STATIC, .name == "getInstance", .descriptor == "(Landroid/icu/util/ULocale;Landroid/icu/text/MeasureFormat$FormatWidth;)Landroid/icu/text/MeasureFormat;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/icu/text/MeasureFormat\0", "getInstance\0", "(Landroid/icu/util/ULocale;Landroid/icu/text/MeasureFormat$FormatWidth;)Landroid/icu/text/MeasureFormat;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInstance](https://developer.android.com/reference/android/icu/text/MeasureFormat.html#getInstance(java.util.Locale,%20android.icu.text.MeasureFormat.FormatWidth))
        ///
        /// Required features: "android-icu-text-MeasureFormat", "android-icu-text-MeasureFormat_FormatWidth", "java-util-Locale"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-MeasureFormat", feature = "android-icu-text-MeasureFormat_FormatWidth", feature = "java-util-Locale")))]
        pub fn getInstance_Locale_FormatWidth<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Locale>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::text::MeasureFormat_FormatWidth>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::MeasureFormat>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/MeasureFormat", java.flags == PUBLIC | STATIC, .name == "getInstance", .descriptor == "(Ljava/util/Locale;Landroid/icu/text/MeasureFormat$FormatWidth;)Landroid/icu/text/MeasureFormat;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/icu/text/MeasureFormat\0", "getInstance\0", "(Ljava/util/Locale;Landroid/icu/text/MeasureFormat$FormatWidth;)Landroid/icu/text/MeasureFormat;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInstance](https://developer.android.com/reference/android/icu/text/MeasureFormat.html#getInstance(android.icu.util.ULocale,%20android.icu.text.MeasureFormat.FormatWidth,%20android.icu.text.NumberFormat))
        ///
        /// Required features: "android-icu-text-MeasureFormat", "android-icu-text-MeasureFormat_FormatWidth", "android-icu-text-NumberFormat", "android-icu-util-ULocale"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-MeasureFormat", feature = "android-icu-text-MeasureFormat_FormatWidth", feature = "android-icu-text-NumberFormat", feature = "android-icu-util-ULocale")))]
        pub fn getInstance_ULocale_FormatWidth_NumberFormat<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::util::ULocale>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::text::MeasureFormat_FormatWidth>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::text::NumberFormat>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::MeasureFormat>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/MeasureFormat", java.flags == PUBLIC | STATIC, .name == "getInstance", .descriptor == "(Landroid/icu/util/ULocale;Landroid/icu/text/MeasureFormat$FormatWidth;Landroid/icu/text/NumberFormat;)Landroid/icu/text/MeasureFormat;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/icu/text/MeasureFormat\0", "getInstance\0", "(Landroid/icu/util/ULocale;Landroid/icu/text/MeasureFormat$FormatWidth;Landroid/icu/text/NumberFormat;)Landroid/icu/text/MeasureFormat;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInstance](https://developer.android.com/reference/android/icu/text/MeasureFormat.html#getInstance(java.util.Locale,%20android.icu.text.MeasureFormat.FormatWidth,%20android.icu.text.NumberFormat))
        ///
        /// Required features: "android-icu-text-MeasureFormat", "android-icu-text-MeasureFormat_FormatWidth", "android-icu-text-NumberFormat", "java-util-Locale"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-MeasureFormat", feature = "android-icu-text-MeasureFormat_FormatWidth", feature = "android-icu-text-NumberFormat", feature = "java-util-Locale")))]
        pub fn getInstance_Locale_FormatWidth_NumberFormat<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Locale>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::text::MeasureFormat_FormatWidth>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::text::NumberFormat>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::MeasureFormat>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/MeasureFormat", java.flags == PUBLIC | STATIC, .name == "getInstance", .descriptor == "(Ljava/util/Locale;Landroid/icu/text/MeasureFormat$FormatWidth;Landroid/icu/text/NumberFormat;)Landroid/icu/text/MeasureFormat;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/icu/text/MeasureFormat\0", "getInstance\0", "(Ljava/util/Locale;Landroid/icu/text/MeasureFormat$FormatWidth;Landroid/icu/text/NumberFormat;)Landroid/icu/text/MeasureFormat;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [format](https://developer.android.com/reference/android/icu/text/MeasureFormat.html#format(java.lang.Object,%20java.lang.StringBuffer,%20java.text.FieldPosition))
        ///
        /// Required features: "java-lang-Object", "java-lang-StringBuffer", "java-text-FieldPosition"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-lang-StringBuffer", feature = "java-text-FieldPosition")))]
        pub fn format<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::StringBuffer>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::text::FieldPosition>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::StringBuffer>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/MeasureFormat", java.flags == PUBLIC, .name == "format", .descriptor == "(Ljava/lang/Object;Ljava/lang/StringBuffer;Ljava/text/FieldPosition;)Ljava/lang/StringBuffer;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/MeasureFormat\0", "format\0", "(Ljava/lang/Object;Ljava/lang/StringBuffer;Ljava/text/FieldPosition;)Ljava/lang/StringBuffer;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [parseObject](https://developer.android.com/reference/android/icu/text/MeasureFormat.html#parseObject(java.lang.String,%20java.text.ParsePosition))
        ///
        /// Required features: "android-icu-util-Measure", "java-lang-String", "java-text-ParsePosition"
        #[cfg(any(feature = "all", all(feature = "android-icu-util-Measure", feature = "java-lang-String", feature = "java-text-ParsePosition")))]
        pub fn parseObject_String_ParsePosition<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::text::ParsePosition>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::util::Measure>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/MeasureFormat", java.flags == PUBLIC, .name == "parseObject", .descriptor == "(Ljava/lang/String;Ljava/text/ParsePosition;)Landroid/icu/util/Measure;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/MeasureFormat\0", "parseObject\0", "(Ljava/lang/String;Ljava/text/ParsePosition;)Landroid/icu/util/Measure;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [formatMeasures](https://developer.android.com/reference/android/icu/text/MeasureFormat.html#formatMeasures(android.icu.util.Measure...))
        ///
        /// Required features: "android-icu-util-Measure", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-icu-util-Measure", feature = "java-lang-String")))]
        pub fn formatMeasures_Measure_array<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::android::icu::util::Measure, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/MeasureFormat", java.flags == PUBLIC | FINAL | VARARGS, .name == "formatMeasures", .descriptor == "([Landroid/icu/util/Measure;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/MeasureFormat\0", "formatMeasures\0", "([Landroid/icu/util/Measure;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [formatMeasurePerUnit](https://developer.android.com/reference/android/icu/text/MeasureFormat.html#formatMeasurePerUnit(android.icu.util.Measure,%20android.icu.util.MeasureUnit,%20java.lang.StringBuilder,%20java.text.FieldPosition))
        ///
        /// Required features: "android-icu-util-Measure", "android-icu-util-MeasureUnit", "java-lang-StringBuilder", "java-text-FieldPosition"
        #[cfg(any(feature = "all", all(feature = "android-icu-util-Measure", feature = "android-icu-util-MeasureUnit", feature = "java-lang-StringBuilder", feature = "java-text-FieldPosition")))]
        pub fn formatMeasurePerUnit<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::util::Measure>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::util::MeasureUnit>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::StringBuilder>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::text::FieldPosition>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::StringBuilder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/MeasureFormat", java.flags == PUBLIC, .name == "formatMeasurePerUnit", .descriptor == "(Landroid/icu/util/Measure;Landroid/icu/util/MeasureUnit;Ljava/lang/StringBuilder;Ljava/text/FieldPosition;)Ljava/lang/StringBuilder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/MeasureFormat\0", "formatMeasurePerUnit\0", "(Landroid/icu/util/Measure;Landroid/icu/util/MeasureUnit;Ljava/lang/StringBuilder;Ljava/text/FieldPosition;)Ljava/lang/StringBuilder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [formatMeasures](https://developer.android.com/reference/android/icu/text/MeasureFormat.html#formatMeasures(java.lang.StringBuilder,%20java.text.FieldPosition,%20android.icu.util.Measure...))
        ///
        /// Required features: "android-icu-util-Measure", "java-lang-StringBuilder", "java-text-FieldPosition"
        #[cfg(any(feature = "all", all(feature = "android-icu-util-Measure", feature = "java-lang-StringBuilder", feature = "java-text-FieldPosition")))]
        pub fn formatMeasures_StringBuilder_FieldPosition_Measure_array<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::StringBuilder>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::text::FieldPosition>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::android::icu::util::Measure, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::StringBuilder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/MeasureFormat", java.flags == PUBLIC | VARARGS, .name == "formatMeasures", .descriptor == "(Ljava/lang/StringBuilder;Ljava/text/FieldPosition;[Landroid/icu/util/Measure;)Ljava/lang/StringBuilder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/MeasureFormat\0", "formatMeasures\0", "(Ljava/lang/StringBuilder;Ljava/text/FieldPosition;[Landroid/icu/util/Measure;)Ljava/lang/StringBuilder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getUnitDisplayName](https://developer.android.com/reference/android/icu/text/MeasureFormat.html#getUnitDisplayName(android.icu.util.MeasureUnit))
        ///
        /// Required features: "android-icu-util-MeasureUnit", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-icu-util-MeasureUnit", feature = "java-lang-String")))]
        pub fn getUnitDisplayName<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::util::MeasureUnit>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/MeasureFormat", java.flags == PUBLIC, .name == "getUnitDisplayName", .descriptor == "(Landroid/icu/util/MeasureUnit;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/MeasureFormat\0", "getUnitDisplayName\0", "(Landroid/icu/util/MeasureUnit;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [equals](https://developer.android.com/reference/android/icu/text/MeasureFormat.html#equals(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn equals<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/MeasureFormat", java.flags == PUBLIC | FINAL, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/MeasureFormat\0", "equals\0", "(Ljava/lang/Object;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hashCode](https://developer.android.com/reference/android/icu/text/MeasureFormat.html#hashCode())
        pub fn hashCode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/MeasureFormat", java.flags == PUBLIC | FINAL, .name == "hashCode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/MeasureFormat\0", "hashCode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getWidth](https://developer.android.com/reference/android/icu/text/MeasureFormat.html#getWidth())
        ///
        /// Required features: "android-icu-text-MeasureFormat_FormatWidth"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-MeasureFormat_FormatWidth")))]
        pub fn getWidth<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::MeasureFormat_FormatWidth>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/MeasureFormat", java.flags == PUBLIC, .name == "getWidth", .descriptor == "()Landroid/icu/text/MeasureFormat$FormatWidth;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/MeasureFormat\0", "getWidth\0", "()Landroid/icu/text/MeasureFormat$FormatWidth;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLocale](https://developer.android.com/reference/android/icu/text/MeasureFormat.html#getLocale())
        ///
        /// Required features: "android-icu-util-ULocale"
        #[cfg(any(feature = "all", all(feature = "android-icu-util-ULocale")))]
        pub fn getLocale<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::util::ULocale>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/MeasureFormat", java.flags == PUBLIC | FINAL, .name == "getLocale", .descriptor == "()Landroid/icu/util/ULocale;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/MeasureFormat\0", "getLocale\0", "()Landroid/icu/util/ULocale;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNumberFormat](https://developer.android.com/reference/android/icu/text/MeasureFormat.html#getNumberFormat())
        ///
        /// Required features: "android-icu-text-NumberFormat"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-NumberFormat")))]
        pub fn getNumberFormat<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::NumberFormat>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/MeasureFormat", java.flags == PUBLIC, .name == "getNumberFormat", .descriptor == "()Landroid/icu/text/NumberFormat;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/MeasureFormat\0", "getNumberFormat\0", "()Landroid/icu/text/NumberFormat;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCurrencyFormat](https://developer.android.com/reference/android/icu/text/MeasureFormat.html#getCurrencyFormat(android.icu.util.ULocale))
        ///
        /// Required features: "android-icu-text-MeasureFormat", "android-icu-util-ULocale"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-MeasureFormat", feature = "android-icu-util-ULocale")))]
        pub fn getCurrencyFormat_ULocale<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::util::ULocale>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::MeasureFormat>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/MeasureFormat", java.flags == PUBLIC | STATIC, .name == "getCurrencyFormat", .descriptor == "(Landroid/icu/util/ULocale;)Landroid/icu/text/MeasureFormat;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/icu/text/MeasureFormat\0", "getCurrencyFormat\0", "(Landroid/icu/util/ULocale;)Landroid/icu/text/MeasureFormat;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCurrencyFormat](https://developer.android.com/reference/android/icu/text/MeasureFormat.html#getCurrencyFormat(java.util.Locale))
        ///
        /// Required features: "android-icu-text-MeasureFormat", "java-util-Locale"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-MeasureFormat", feature = "java-util-Locale")))]
        pub fn getCurrencyFormat_Locale<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Locale>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::MeasureFormat>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/MeasureFormat", java.flags == PUBLIC | STATIC, .name == "getCurrencyFormat", .descriptor == "(Ljava/util/Locale;)Landroid/icu/text/MeasureFormat;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/icu/text/MeasureFormat\0", "getCurrencyFormat\0", "(Ljava/util/Locale;)Landroid/icu/text/MeasureFormat;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCurrencyFormat](https://developer.android.com/reference/android/icu/text/MeasureFormat.html#getCurrencyFormat())
        ///
        /// Required features: "android-icu-text-MeasureFormat"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-MeasureFormat")))]
        pub fn getCurrencyFormat<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::MeasureFormat>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/MeasureFormat", java.flags == PUBLIC | STATIC, .name == "getCurrencyFormat", .descriptor == "()Landroid/icu/text/MeasureFormat;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/icu/text/MeasureFormat\0", "getCurrencyFormat\0", "()Landroid/icu/text/MeasureFormat;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Bridge method - type erasure
        // /// [parseObject](https://developer.android.com/reference/android/icu/text/MeasureFormat.html#parseObject(java.lang.String,%20java.text.ParsePosition))
        // ///
        // /// Required features: "java-lang-Object", "java-lang-String", "java-text-ParsePosition"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-lang-String", feature = "java-text-ParsePosition")))]
        // pub fn parseObject_String_ParsePosition<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::text::ParsePosition>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/icu/text/MeasureFormat", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "parseObject", .descriptor == "(Ljava/lang/String;Ljava/text/ParsePosition;)Ljava/lang/Object;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/MeasureFormat\0", "parseObject\0", "(Ljava/lang/String;Ljava/text/ParsePosition;)Ljava/lang/Object;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }
    }
}
