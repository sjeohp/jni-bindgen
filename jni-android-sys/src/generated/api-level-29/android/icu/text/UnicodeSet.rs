// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-icu-text-UnicodeSet"))]
__jni_bindgen! {
    /// public class [UnicodeSet](https://developer.android.com/reference/android/icu/text/UnicodeSet.html)
    ///
    /// Required feature: android-icu-text-UnicodeSet
    public class UnicodeSet ("android/icu/text/UnicodeSet") extends crate::android::icu::text::UnicodeFilter, implements crate::java::lang::Iterable, crate::java::lang::Comparable, crate::android::icu::util::Freezable {

        /// [UnicodeSet](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#UnicodeSet())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::icu::text::UnicodeSet>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [UnicodeSet](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#UnicodeSet(android.icu.text.UnicodeSet))
        ///
        /// Required features: "android-icu-text-UnicodeSet"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-UnicodeSet")))]
        pub fn new_UnicodeSet<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::text::UnicodeSet>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::icu::text::UnicodeSet>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/icu/text/UnicodeSet;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "<init>\0", "(Landroid/icu/text/UnicodeSet;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [UnicodeSet](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#UnicodeSet(int,%20int))
        pub fn new_int_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::icu::text::UnicodeSet>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "<init>", .descriptor == "(II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "<init>\0", "(II)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [UnicodeSet](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#UnicodeSet(int...))
        pub fn new_int_array<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::icu::text::UnicodeSet>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC | VARARGS, .name == "<init>", .descriptor == "([I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "<init>\0", "([I)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [UnicodeSet](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#UnicodeSet(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn new_String<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::icu::text::UnicodeSet>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "<init>\0", "(Ljava/lang/String;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [UnicodeSet](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#UnicodeSet(java.lang.String,%20boolean))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn new_String_boolean<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::icu::text::UnicodeSet>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/lang/String;Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "<init>\0", "(Ljava/lang/String;Z)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [UnicodeSet](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#UnicodeSet(java.lang.String,%20int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn new_String_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::icu::text::UnicodeSet>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/lang/String;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "<init>\0", "(Ljava/lang/String;I)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [UnicodeSet](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#UnicodeSet(java.lang.String,%20java.text.ParsePosition,%20android.icu.text.SymbolTable))
        ///
        /// Required features: "android-icu-text-SymbolTable", "java-lang-String", "java-text-ParsePosition"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-SymbolTable", feature = "java-lang-String", feature = "java-text-ParsePosition")))]
        pub fn new_String_ParsePosition_SymbolTable<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::text::ParsePosition>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::text::SymbolTable>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::icu::text::UnicodeSet>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/lang/String;Ljava/text/ParsePosition;Landroid/icu/text/SymbolTable;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "<init>\0", "(Ljava/lang/String;Ljava/text/ParsePosition;Landroid/icu/text/SymbolTable;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [UnicodeSet](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#UnicodeSet(java.lang.String,%20java.text.ParsePosition,%20android.icu.text.SymbolTable,%20int))
        ///
        /// Required features: "android-icu-text-SymbolTable", "java-lang-String", "java-text-ParsePosition"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-SymbolTable", feature = "java-lang-String", feature = "java-text-ParsePosition")))]
        pub fn new_String_ParsePosition_SymbolTable_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::text::ParsePosition>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::text::SymbolTable>>, arg3: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::icu::text::UnicodeSet>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/lang/String;Ljava/text/ParsePosition;Landroid/icu/text/SymbolTable;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "<init>\0", "(Ljava/lang/String;Ljava/text/ParsePosition;Landroid/icu/text/SymbolTable;I)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clone](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#clone())
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn clone<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "clone", .descriptor == "()Ljava/lang/Object;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "clone\0", "()Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [set](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#set(int,%20int))
        ///
        /// Required features: "android-icu-text-UnicodeSet"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-UnicodeSet")))]
        pub fn set_int_int<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::UnicodeSet>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "set", .descriptor == "(II)Landroid/icu/text/UnicodeSet;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "set\0", "(II)Landroid/icu/text/UnicodeSet;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [set](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#set(android.icu.text.UnicodeSet))
        ///
        /// Required features: "android-icu-text-UnicodeSet"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-UnicodeSet")))]
        pub fn set_UnicodeSet<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::text::UnicodeSet>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::UnicodeSet>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "set", .descriptor == "(Landroid/icu/text/UnicodeSet;)Landroid/icu/text/UnicodeSet;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "set\0", "(Landroid/icu/text/UnicodeSet;)Landroid/icu/text/UnicodeSet;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [applyPattern](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#applyPattern(java.lang.String))
        ///
        /// Required features: "android-icu-text-UnicodeSet", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-UnicodeSet", feature = "java-lang-String")))]
        pub fn applyPattern_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::UnicodeSet>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC | FINAL, .name == "applyPattern", .descriptor == "(Ljava/lang/String;)Landroid/icu/text/UnicodeSet;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "applyPattern\0", "(Ljava/lang/String;)Landroid/icu/text/UnicodeSet;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [applyPattern](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#applyPattern(java.lang.String,%20boolean))
        ///
        /// Required features: "android-icu-text-UnicodeSet", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-UnicodeSet", feature = "java-lang-String")))]
        pub fn applyPattern_String_boolean<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::UnicodeSet>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "applyPattern", .descriptor == "(Ljava/lang/String;Z)Landroid/icu/text/UnicodeSet;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "applyPattern\0", "(Ljava/lang/String;Z)Landroid/icu/text/UnicodeSet;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [applyPattern](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#applyPattern(java.lang.String,%20int))
        ///
        /// Required features: "android-icu-text-UnicodeSet", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-UnicodeSet", feature = "java-lang-String")))]
        pub fn applyPattern_String_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::UnicodeSet>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "applyPattern", .descriptor == "(Ljava/lang/String;I)Landroid/icu/text/UnicodeSet;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "applyPattern\0", "(Ljava/lang/String;I)Landroid/icu/text/UnicodeSet;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toPattern](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#toPattern(boolean))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toPattern<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "toPattern", .descriptor == "(Z)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "toPattern\0", "(Z)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [_generatePattern](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#_generatePattern(java.lang.StringBuffer,%20boolean))
        ///
        /// Required features: "java-lang-StringBuffer"
        #[cfg(any(feature = "all", all(feature = "java-lang-StringBuffer")))]
        pub fn _generatePattern_StringBuffer_boolean<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::StringBuffer>>, arg1: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::StringBuffer>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "_generatePattern", .descriptor == "(Ljava/lang/StringBuffer;Z)Ljava/lang/StringBuffer;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "_generatePattern\0", "(Ljava/lang/StringBuffer;Z)Ljava/lang/StringBuffer;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [_generatePattern](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#_generatePattern(java.lang.StringBuffer,%20boolean,%20boolean))
        ///
        /// Required features: "java-lang-StringBuffer"
        #[cfg(any(feature = "all", all(feature = "java-lang-StringBuffer")))]
        pub fn _generatePattern_StringBuffer_boolean_boolean<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::StringBuffer>>, arg1: bool, arg2: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::StringBuffer>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "_generatePattern", .descriptor == "(Ljava/lang/StringBuffer;ZZ)Ljava/lang/StringBuffer;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "_generatePattern\0", "(Ljava/lang/StringBuffer;ZZ)Ljava/lang/StringBuffer;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [size](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#size())
        pub fn size<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "size", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "size\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isEmpty](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#isEmpty())
        pub fn isEmpty<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "isEmpty", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "isEmpty\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [matchesIndexValue](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#matchesIndexValue(int))
        pub fn matchesIndexValue<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "matchesIndexValue", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "matchesIndexValue\0", "(I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [matches](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#matches(android.icu.text.Replaceable,%20int%5B%5D,%20int,%20boolean))
        ///
        /// Required features: "android-icu-text-Replaceable"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-Replaceable")))]
        pub fn matches<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::text::Replaceable>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg2: i32, arg3: bool) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "matches", .descriptor == "(Landroid/icu/text/Replaceable;[IIZ)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "matches\0", "(Landroid/icu/text/Replaceable;[IIZ)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addMatchSetTo](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#addMatchSetTo(android.icu.text.UnicodeSet))
        ///
        /// Required features: "android-icu-text-UnicodeSet"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-UnicodeSet")))]
        pub fn addMatchSetTo<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::text::UnicodeSet>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "addMatchSetTo", .descriptor == "(Landroid/icu/text/UnicodeSet;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "addMatchSetTo\0", "(Landroid/icu/text/UnicodeSet;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [indexOf](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#indexOf(int))
        pub fn indexOf<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "indexOf", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "indexOf\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [charAt](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#charAt(int))
        pub fn charAt<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "charAt", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "charAt\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [add](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#add(int,%20int))
        ///
        /// Required features: "android-icu-text-UnicodeSet"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-UnicodeSet")))]
        pub fn add_int_int<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::UnicodeSet>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "add", .descriptor == "(II)Landroid/icu/text/UnicodeSet;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "add\0", "(II)Landroid/icu/text/UnicodeSet;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addAll](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#addAll(int,%20int))
        ///
        /// Required features: "android-icu-text-UnicodeSet"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-UnicodeSet")))]
        pub fn addAll_int_int<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::UnicodeSet>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "addAll", .descriptor == "(II)Landroid/icu/text/UnicodeSet;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "addAll\0", "(II)Landroid/icu/text/UnicodeSet;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [add](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#add(int))
        ///
        /// Required features: "android-icu-text-UnicodeSet"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-UnicodeSet")))]
        pub fn add_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::UnicodeSet>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC | FINAL, .name == "add", .descriptor == "(I)Landroid/icu/text/UnicodeSet;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "add\0", "(I)Landroid/icu/text/UnicodeSet;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [add](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#add(java.lang.CharSequence))
        ///
        /// Required features: "android-icu-text-UnicodeSet", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-UnicodeSet", feature = "java-lang-CharSequence")))]
        pub fn add_CharSequence<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::UnicodeSet>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC | FINAL, .name == "add", .descriptor == "(Ljava/lang/CharSequence;)Landroid/icu/text/UnicodeSet;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "add\0", "(Ljava/lang/CharSequence;)Landroid/icu/text/UnicodeSet;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addAll](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#addAll(java.lang.CharSequence))
        ///
        /// Required features: "android-icu-text-UnicodeSet", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-UnicodeSet", feature = "java-lang-CharSequence")))]
        pub fn addAll_CharSequence<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::UnicodeSet>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC | FINAL, .name == "addAll", .descriptor == "(Ljava/lang/CharSequence;)Landroid/icu/text/UnicodeSet;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "addAll\0", "(Ljava/lang/CharSequence;)Landroid/icu/text/UnicodeSet;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [retainAll](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#retainAll(java.lang.CharSequence))
        ///
        /// Required features: "android-icu-text-UnicodeSet", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-UnicodeSet", feature = "java-lang-CharSequence")))]
        pub fn retainAll_CharSequence<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::UnicodeSet>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC | FINAL, .name == "retainAll", .descriptor == "(Ljava/lang/CharSequence;)Landroid/icu/text/UnicodeSet;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "retainAll\0", "(Ljava/lang/CharSequence;)Landroid/icu/text/UnicodeSet;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [complementAll](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#complementAll(java.lang.CharSequence))
        ///
        /// Required features: "android-icu-text-UnicodeSet", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-UnicodeSet", feature = "java-lang-CharSequence")))]
        pub fn complementAll_CharSequence<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::UnicodeSet>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC | FINAL, .name == "complementAll", .descriptor == "(Ljava/lang/CharSequence;)Landroid/icu/text/UnicodeSet;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "complementAll\0", "(Ljava/lang/CharSequence;)Landroid/icu/text/UnicodeSet;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeAll](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#removeAll(java.lang.CharSequence))
        ///
        /// Required features: "android-icu-text-UnicodeSet", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-UnicodeSet", feature = "java-lang-CharSequence")))]
        pub fn removeAll_CharSequence<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::UnicodeSet>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC | FINAL, .name == "removeAll", .descriptor == "(Ljava/lang/CharSequence;)Landroid/icu/text/UnicodeSet;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "removeAll\0", "(Ljava/lang/CharSequence;)Landroid/icu/text/UnicodeSet;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeAllStrings](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#removeAllStrings())
        ///
        /// Required features: "android-icu-text-UnicodeSet"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-UnicodeSet")))]
        pub fn removeAllStrings<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::UnicodeSet>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC | FINAL, .name == "removeAllStrings", .descriptor == "()Landroid/icu/text/UnicodeSet;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "removeAllStrings\0", "()Landroid/icu/text/UnicodeSet;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [from](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#from(java.lang.CharSequence))
        ///
        /// Required features: "android-icu-text-UnicodeSet", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-UnicodeSet", feature = "java-lang-CharSequence")))]
        pub fn from<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::UnicodeSet>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC | STATIC, .name == "from", .descriptor == "(Ljava/lang/CharSequence;)Landroid/icu/text/UnicodeSet;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/icu/text/UnicodeSet\0", "from\0", "(Ljava/lang/CharSequence;)Landroid/icu/text/UnicodeSet;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [fromAll](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#fromAll(java.lang.CharSequence))
        ///
        /// Required features: "android-icu-text-UnicodeSet", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-UnicodeSet", feature = "java-lang-CharSequence")))]
        pub fn fromAll<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::UnicodeSet>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC | STATIC, .name == "fromAll", .descriptor == "(Ljava/lang/CharSequence;)Landroid/icu/text/UnicodeSet;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/icu/text/UnicodeSet\0", "fromAll\0", "(Ljava/lang/CharSequence;)Landroid/icu/text/UnicodeSet;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [retain](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#retain(int,%20int))
        ///
        /// Required features: "android-icu-text-UnicodeSet"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-UnicodeSet")))]
        pub fn retain_int_int<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::UnicodeSet>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "retain", .descriptor == "(II)Landroid/icu/text/UnicodeSet;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "retain\0", "(II)Landroid/icu/text/UnicodeSet;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [retain](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#retain(int))
        ///
        /// Required features: "android-icu-text-UnicodeSet"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-UnicodeSet")))]
        pub fn retain_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::UnicodeSet>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC | FINAL, .name == "retain", .descriptor == "(I)Landroid/icu/text/UnicodeSet;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "retain\0", "(I)Landroid/icu/text/UnicodeSet;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [retain](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#retain(java.lang.CharSequence))
        ///
        /// Required features: "android-icu-text-UnicodeSet", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-UnicodeSet", feature = "java-lang-CharSequence")))]
        pub fn retain_CharSequence<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::UnicodeSet>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC | FINAL, .name == "retain", .descriptor == "(Ljava/lang/CharSequence;)Landroid/icu/text/UnicodeSet;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "retain\0", "(Ljava/lang/CharSequence;)Landroid/icu/text/UnicodeSet;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [remove](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#remove(int,%20int))
        ///
        /// Required features: "android-icu-text-UnicodeSet"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-UnicodeSet")))]
        pub fn remove_int_int<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::UnicodeSet>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "remove", .descriptor == "(II)Landroid/icu/text/UnicodeSet;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "remove\0", "(II)Landroid/icu/text/UnicodeSet;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [remove](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#remove(int))
        ///
        /// Required features: "android-icu-text-UnicodeSet"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-UnicodeSet")))]
        pub fn remove_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::UnicodeSet>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC | FINAL, .name == "remove", .descriptor == "(I)Landroid/icu/text/UnicodeSet;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "remove\0", "(I)Landroid/icu/text/UnicodeSet;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [remove](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#remove(java.lang.CharSequence))
        ///
        /// Required features: "android-icu-text-UnicodeSet", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-UnicodeSet", feature = "java-lang-CharSequence")))]
        pub fn remove_CharSequence<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::UnicodeSet>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC | FINAL, .name == "remove", .descriptor == "(Ljava/lang/CharSequence;)Landroid/icu/text/UnicodeSet;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "remove\0", "(Ljava/lang/CharSequence;)Landroid/icu/text/UnicodeSet;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [complement](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#complement(int,%20int))
        ///
        /// Required features: "android-icu-text-UnicodeSet"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-UnicodeSet")))]
        pub fn complement_int_int<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::UnicodeSet>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "complement", .descriptor == "(II)Landroid/icu/text/UnicodeSet;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "complement\0", "(II)Landroid/icu/text/UnicodeSet;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [complement](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#complement(int))
        ///
        /// Required features: "android-icu-text-UnicodeSet"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-UnicodeSet")))]
        pub fn complement_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::UnicodeSet>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC | FINAL, .name == "complement", .descriptor == "(I)Landroid/icu/text/UnicodeSet;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "complement\0", "(I)Landroid/icu/text/UnicodeSet;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [complement](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#complement())
        ///
        /// Required features: "android-icu-text-UnicodeSet"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-UnicodeSet")))]
        pub fn complement<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::UnicodeSet>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "complement", .descriptor == "()Landroid/icu/text/UnicodeSet;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "complement\0", "()Landroid/icu/text/UnicodeSet;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [complement](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#complement(java.lang.CharSequence))
        ///
        /// Required features: "android-icu-text-UnicodeSet", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-UnicodeSet", feature = "java-lang-CharSequence")))]
        pub fn complement_CharSequence<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::UnicodeSet>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC | FINAL, .name == "complement", .descriptor == "(Ljava/lang/CharSequence;)Landroid/icu/text/UnicodeSet;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "complement\0", "(Ljava/lang/CharSequence;)Landroid/icu/text/UnicodeSet;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [contains](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#contains(int))
        pub fn contains_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "contains", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "contains\0", "(I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [contains](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#contains(int,%20int))
        pub fn contains_int_int<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "contains", .descriptor == "(II)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "contains\0", "(II)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [contains](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#contains(java.lang.CharSequence))
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn contains_CharSequence<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC | FINAL, .name == "contains", .descriptor == "(Ljava/lang/CharSequence;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "contains\0", "(Ljava/lang/CharSequence;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [containsAll](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#containsAll(android.icu.text.UnicodeSet))
        ///
        /// Required features: "android-icu-text-UnicodeSet"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-UnicodeSet")))]
        pub fn containsAll_UnicodeSet<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::text::UnicodeSet>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "containsAll", .descriptor == "(Landroid/icu/text/UnicodeSet;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "containsAll\0", "(Landroid/icu/text/UnicodeSet;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [containsAll](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#containsAll(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn containsAll_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "containsAll", .descriptor == "(Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "containsAll\0", "(Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [containsNone](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#containsNone(int,%20int))
        pub fn containsNone_int_int<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "containsNone", .descriptor == "(II)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "containsNone\0", "(II)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [containsNone](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#containsNone(android.icu.text.UnicodeSet))
        ///
        /// Required features: "android-icu-text-UnicodeSet"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-UnicodeSet")))]
        pub fn containsNone_UnicodeSet<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::text::UnicodeSet>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "containsNone", .descriptor == "(Landroid/icu/text/UnicodeSet;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "containsNone\0", "(Landroid/icu/text/UnicodeSet;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [containsNone](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#containsNone(java.lang.CharSequence))
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn containsNone_CharSequence<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "containsNone", .descriptor == "(Ljava/lang/CharSequence;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "containsNone\0", "(Ljava/lang/CharSequence;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [containsSome](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#containsSome(int,%20int))
        pub fn containsSome_int_int<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC | FINAL, .name == "containsSome", .descriptor == "(II)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "containsSome\0", "(II)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [containsSome](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#containsSome(android.icu.text.UnicodeSet))
        ///
        /// Required features: "android-icu-text-UnicodeSet"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-UnicodeSet")))]
        pub fn containsSome_UnicodeSet<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::text::UnicodeSet>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC | FINAL, .name == "containsSome", .descriptor == "(Landroid/icu/text/UnicodeSet;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "containsSome\0", "(Landroid/icu/text/UnicodeSet;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [containsSome](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#containsSome(java.lang.CharSequence))
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn containsSome_CharSequence<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC | FINAL, .name == "containsSome", .descriptor == "(Ljava/lang/CharSequence;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "containsSome\0", "(Ljava/lang/CharSequence;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addAll](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#addAll(android.icu.text.UnicodeSet))
        ///
        /// Required features: "android-icu-text-UnicodeSet"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-UnicodeSet")))]
        pub fn addAll_UnicodeSet<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::text::UnicodeSet>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::UnicodeSet>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "addAll", .descriptor == "(Landroid/icu/text/UnicodeSet;)Landroid/icu/text/UnicodeSet;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "addAll\0", "(Landroid/icu/text/UnicodeSet;)Landroid/icu/text/UnicodeSet;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [retainAll](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#retainAll(android.icu.text.UnicodeSet))
        ///
        /// Required features: "android-icu-text-UnicodeSet"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-UnicodeSet")))]
        pub fn retainAll_UnicodeSet<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::text::UnicodeSet>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::UnicodeSet>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "retainAll", .descriptor == "(Landroid/icu/text/UnicodeSet;)Landroid/icu/text/UnicodeSet;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "retainAll\0", "(Landroid/icu/text/UnicodeSet;)Landroid/icu/text/UnicodeSet;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeAll](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#removeAll(android.icu.text.UnicodeSet))
        ///
        /// Required features: "android-icu-text-UnicodeSet"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-UnicodeSet")))]
        pub fn removeAll_UnicodeSet<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::text::UnicodeSet>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::UnicodeSet>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "removeAll", .descriptor == "(Landroid/icu/text/UnicodeSet;)Landroid/icu/text/UnicodeSet;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "removeAll\0", "(Landroid/icu/text/UnicodeSet;)Landroid/icu/text/UnicodeSet;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [complementAll](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#complementAll(android.icu.text.UnicodeSet))
        ///
        /// Required features: "android-icu-text-UnicodeSet"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-UnicodeSet")))]
        pub fn complementAll_UnicodeSet<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::text::UnicodeSet>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::UnicodeSet>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "complementAll", .descriptor == "(Landroid/icu/text/UnicodeSet;)Landroid/icu/text/UnicodeSet;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "complementAll\0", "(Landroid/icu/text/UnicodeSet;)Landroid/icu/text/UnicodeSet;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clear](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#clear())
        ///
        /// Required features: "android-icu-text-UnicodeSet"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-UnicodeSet")))]
        pub fn clear<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::UnicodeSet>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "clear", .descriptor == "()Landroid/icu/text/UnicodeSet;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "clear\0", "()Landroid/icu/text/UnicodeSet;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRangeCount](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#getRangeCount())
        pub fn getRangeCount<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "getRangeCount", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "getRangeCount\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRangeStart](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#getRangeStart(int))
        pub fn getRangeStart<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "getRangeStart", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "getRangeStart\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRangeEnd](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#getRangeEnd(int))
        pub fn getRangeEnd<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "getRangeEnd", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "getRangeEnd\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [compact](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#compact())
        ///
        /// Required features: "android-icu-text-UnicodeSet"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-UnicodeSet")))]
        pub fn compact<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::UnicodeSet>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "compact", .descriptor == "()Landroid/icu/text/UnicodeSet;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "compact\0", "()Landroid/icu/text/UnicodeSet;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [equals](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#equals(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn equals<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "equals\0", "(Ljava/lang/Object;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hashCode](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#hashCode())
        pub fn hashCode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "hashCode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "hashCode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addAllTo](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#addAllTo(java.util.Collection))
        ///
        /// Required features: "java-util-Collection"
        #[cfg(any(feature = "all", all(feature = "java-util-Collection")))]
        pub fn addAllTo<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Collection>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Collection>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "addAllTo", .descriptor == "(Ljava/util/Collection;)Ljava/util/Collection;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "addAllTo\0", "(Ljava/util/Collection;)Ljava/util/Collection;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [add](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#add(java.lang.Iterable))
        ///
        /// Required features: "android-icu-text-UnicodeSet", "java-lang-Iterable"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-UnicodeSet", feature = "java-lang-Iterable")))]
        pub fn add_Iterable<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Iterable>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::UnicodeSet>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "add", .descriptor == "(Ljava/lang/Iterable;)Landroid/icu/text/UnicodeSet;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "add\0", "(Ljava/lang/Iterable;)Landroid/icu/text/UnicodeSet;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addAll](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#addAll(java.lang.Iterable))
        ///
        /// Required features: "android-icu-text-UnicodeSet", "java-lang-Iterable"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-UnicodeSet", feature = "java-lang-Iterable")))]
        pub fn addAll_Iterable<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Iterable>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::UnicodeSet>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "addAll", .descriptor == "(Ljava/lang/Iterable;)Landroid/icu/text/UnicodeSet;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "addAll\0", "(Ljava/lang/Iterable;)Landroid/icu/text/UnicodeSet;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [applyIntPropertyValue](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#applyIntPropertyValue(int,%20int))
        ///
        /// Required features: "android-icu-text-UnicodeSet"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-UnicodeSet")))]
        pub fn applyIntPropertyValue<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::UnicodeSet>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "applyIntPropertyValue", .descriptor == "(II)Landroid/icu/text/UnicodeSet;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "applyIntPropertyValue\0", "(II)Landroid/icu/text/UnicodeSet;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [applyPropertyAlias](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#applyPropertyAlias(java.lang.String,%20java.lang.String))
        ///
        /// Required features: "android-icu-text-UnicodeSet", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-UnicodeSet", feature = "java-lang-String")))]
        pub fn applyPropertyAlias_String_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::UnicodeSet>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "applyPropertyAlias", .descriptor == "(Ljava/lang/String;Ljava/lang/String;)Landroid/icu/text/UnicodeSet;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "applyPropertyAlias\0", "(Ljava/lang/String;Ljava/lang/String;)Landroid/icu/text/UnicodeSet;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [applyPropertyAlias](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#applyPropertyAlias(java.lang.String,%20java.lang.String,%20android.icu.text.SymbolTable))
        ///
        /// Required features: "android-icu-text-SymbolTable", "android-icu-text-UnicodeSet", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-SymbolTable", feature = "android-icu-text-UnicodeSet", feature = "java-lang-String")))]
        pub fn applyPropertyAlias_String_String_SymbolTable<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::text::SymbolTable>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::UnicodeSet>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "applyPropertyAlias", .descriptor == "(Ljava/lang/String;Ljava/lang/String;Landroid/icu/text/SymbolTable;)Landroid/icu/text/UnicodeSet;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "applyPropertyAlias\0", "(Ljava/lang/String;Ljava/lang/String;Landroid/icu/text/SymbolTable;)Landroid/icu/text/UnicodeSet;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [closeOver](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#closeOver(int))
        ///
        /// Required features: "android-icu-text-UnicodeSet"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-UnicodeSet")))]
        pub fn closeOver<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::UnicodeSet>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "closeOver", .descriptor == "(I)Landroid/icu/text/UnicodeSet;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "closeOver\0", "(I)Landroid/icu/text/UnicodeSet;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isFrozen](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#isFrozen())
        pub fn isFrozen<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "isFrozen", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "isFrozen\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [freeze](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#freeze())
        ///
        /// Required features: "android-icu-text-UnicodeSet"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-UnicodeSet")))]
        pub fn freeze<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::UnicodeSet>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "freeze", .descriptor == "()Landroid/icu/text/UnicodeSet;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "freeze\0", "()Landroid/icu/text/UnicodeSet;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [span](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#span(java.lang.CharSequence,%20android.icu.text.UnicodeSet.SpanCondition))
        ///
        /// Required features: "android-icu-text-UnicodeSet_SpanCondition", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-UnicodeSet_SpanCondition", feature = "java-lang-CharSequence")))]
        pub fn span_CharSequence_SpanCondition<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::text::UnicodeSet_SpanCondition>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "span", .descriptor == "(Ljava/lang/CharSequence;Landroid/icu/text/UnicodeSet$SpanCondition;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "span\0", "(Ljava/lang/CharSequence;Landroid/icu/text/UnicodeSet$SpanCondition;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [span](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#span(java.lang.CharSequence,%20int,%20android.icu.text.UnicodeSet.SpanCondition))
        ///
        /// Required features: "android-icu-text-UnicodeSet_SpanCondition", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-UnicodeSet_SpanCondition", feature = "java-lang-CharSequence")))]
        pub fn span_CharSequence_int_SpanCondition<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::text::UnicodeSet_SpanCondition>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "span", .descriptor == "(Ljava/lang/CharSequence;ILandroid/icu/text/UnicodeSet$SpanCondition;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "span\0", "(Ljava/lang/CharSequence;ILandroid/icu/text/UnicodeSet$SpanCondition;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [spanBack](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#spanBack(java.lang.CharSequence,%20android.icu.text.UnicodeSet.SpanCondition))
        ///
        /// Required features: "android-icu-text-UnicodeSet_SpanCondition", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-UnicodeSet_SpanCondition", feature = "java-lang-CharSequence")))]
        pub fn spanBack_CharSequence_SpanCondition<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::text::UnicodeSet_SpanCondition>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "spanBack", .descriptor == "(Ljava/lang/CharSequence;Landroid/icu/text/UnicodeSet$SpanCondition;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "spanBack\0", "(Ljava/lang/CharSequence;Landroid/icu/text/UnicodeSet$SpanCondition;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [spanBack](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#spanBack(java.lang.CharSequence,%20int,%20android.icu.text.UnicodeSet.SpanCondition))
        ///
        /// Required features: "android-icu-text-UnicodeSet_SpanCondition", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-UnicodeSet_SpanCondition", feature = "java-lang-CharSequence")))]
        pub fn spanBack_CharSequence_int_SpanCondition<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::text::UnicodeSet_SpanCondition>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "spanBack", .descriptor == "(Ljava/lang/CharSequence;ILandroid/icu/text/UnicodeSet$SpanCondition;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "spanBack\0", "(Ljava/lang/CharSequence;ILandroid/icu/text/UnicodeSet$SpanCondition;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [cloneAsThawed](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#cloneAsThawed())
        ///
        /// Required features: "android-icu-text-UnicodeSet"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-UnicodeSet")))]
        pub fn cloneAsThawed<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::UnicodeSet>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "cloneAsThawed", .descriptor == "()Landroid/icu/text/UnicodeSet;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "cloneAsThawed\0", "()Landroid/icu/text/UnicodeSet;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ranges](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#ranges())
        ///
        /// Required features: "java-lang-Iterable"
        #[cfg(any(feature = "all", all(feature = "java-lang-Iterable")))]
        pub fn ranges<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Iterable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "ranges", .descriptor == "()Ljava/lang/Iterable;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "ranges\0", "()Ljava/lang/Iterable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [iterator](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#iterator())
        ///
        /// Required features: "java-util-Iterator"
        #[cfg(any(feature = "all", all(feature = "java-util-Iterator")))]
        pub fn iterator<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Iterator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "iterator", .descriptor == "()Ljava/util/Iterator;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "iterator\0", "()Ljava/util/Iterator;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [containsAll](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#containsAll(java.lang.Iterable))
        ///
        /// Required features: "java-lang-Iterable"
        #[cfg(any(feature = "all", all(feature = "java-lang-Iterable")))]
        pub fn containsAll_Iterable<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Iterable>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "containsAll", .descriptor == "(Ljava/lang/Iterable;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "containsAll\0", "(Ljava/lang/Iterable;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [containsNone](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#containsNone(java.lang.Iterable))
        ///
        /// Required features: "java-lang-Iterable"
        #[cfg(any(feature = "all", all(feature = "java-lang-Iterable")))]
        pub fn containsNone_Iterable<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Iterable>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "containsNone", .descriptor == "(Ljava/lang/Iterable;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "containsNone\0", "(Ljava/lang/Iterable;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [containsSome](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#containsSome(java.lang.Iterable))
        ///
        /// Required features: "java-lang-Iterable"
        #[cfg(any(feature = "all", all(feature = "java-lang-Iterable")))]
        pub fn containsSome_Iterable<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Iterable>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC | FINAL, .name == "containsSome", .descriptor == "(Ljava/lang/Iterable;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "containsSome\0", "(Ljava/lang/Iterable;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addAll](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#addAll(java.lang.CharSequence...))
        ///
        /// Required features: "android-icu-text-UnicodeSet", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-UnicodeSet", feature = "java-lang-CharSequence")))]
        pub fn addAll_CharSequence_array<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::CharSequence, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::UnicodeSet>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC | VARARGS, .name == "addAll", .descriptor == "([Ljava/lang/CharSequence;)Landroid/icu/text/UnicodeSet;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "addAll\0", "([Ljava/lang/CharSequence;)Landroid/icu/text/UnicodeSet;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeAll](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#removeAll(java.lang.Iterable))
        ///
        /// Required features: "android-icu-text-UnicodeSet", "java-lang-Iterable"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-UnicodeSet", feature = "java-lang-Iterable")))]
        pub fn removeAll_Iterable<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Iterable>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::UnicodeSet>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "removeAll", .descriptor == "(Ljava/lang/Iterable;)Landroid/icu/text/UnicodeSet;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "removeAll\0", "(Ljava/lang/Iterable;)Landroid/icu/text/UnicodeSet;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [retainAll](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#retainAll(java.lang.Iterable))
        ///
        /// Required features: "android-icu-text-UnicodeSet", "java-lang-Iterable"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-UnicodeSet", feature = "java-lang-Iterable")))]
        pub fn retainAll_Iterable<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Iterable>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::UnicodeSet>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "retainAll", .descriptor == "(Ljava/lang/Iterable;)Landroid/icu/text/UnicodeSet;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "retainAll\0", "(Ljava/lang/Iterable;)Landroid/icu/text/UnicodeSet;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [compareTo](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#compareTo(android.icu.text.UnicodeSet))
        ///
        /// Required features: "android-icu-text-UnicodeSet"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-UnicodeSet")))]
        pub fn compareTo_UnicodeSet<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::text::UnicodeSet>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "compareTo", .descriptor == "(Landroid/icu/text/UnicodeSet;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "compareTo\0", "(Landroid/icu/text/UnicodeSet;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [compareTo](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#compareTo(android.icu.text.UnicodeSet,%20android.icu.text.UnicodeSet.ComparisonStyle))
        ///
        /// Required features: "android-icu-text-UnicodeSet", "android-icu-text-UnicodeSet_ComparisonStyle"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-UnicodeSet", feature = "android-icu-text-UnicodeSet_ComparisonStyle")))]
        pub fn compareTo_UnicodeSet_ComparisonStyle<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::text::UnicodeSet>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::text::UnicodeSet_ComparisonStyle>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "compareTo", .descriptor == "(Landroid/icu/text/UnicodeSet;Landroid/icu/text/UnicodeSet$ComparisonStyle;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "compareTo\0", "(Landroid/icu/text/UnicodeSet;Landroid/icu/text/UnicodeSet$ComparisonStyle;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [compareTo](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#compareTo(java.lang.Iterable))
        ///
        /// Required features: "java-lang-Iterable"
        #[cfg(any(feature = "all", all(feature = "java-lang-Iterable")))]
        pub fn compareTo_Iterable<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Iterable>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "compareTo", .descriptor == "(Ljava/lang/Iterable;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "compareTo\0", "(Ljava/lang/Iterable;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [strings](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#strings())
        ///
        /// Required features: "java-util-Collection"
        #[cfg(any(feature = "all", all(feature = "java-util-Collection")))]
        pub fn strings<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Collection>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC, .name == "strings", .descriptor == "()Ljava/util/Collection;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "strings\0", "()Ljava/util/Collection;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Bridge method - type erasure
        // /// [compareTo](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#compareTo(java.lang.Object))
        // ///
        // /// Required features: "java-lang-Object"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        // pub fn compareTo_Object<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "compareTo", .descriptor == "(Ljava/lang/Object;)I"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "compareTo\0", "(Ljava/lang/Object;)I\0");
        //         __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [cloneAsThawed](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#cloneAsThawed())
        // ///
        // /// Required features: "java-lang-Object"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        // pub fn cloneAsThawed<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "cloneAsThawed", .descriptor == "()Ljava/lang/Object;"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "cloneAsThawed\0", "()Ljava/lang/Object;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [freeze](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#freeze())
        // ///
        // /// Required features: "java-lang-Object"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        // pub fn freeze<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/icu/text/UnicodeSet", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "freeze", .descriptor == "()Ljava/lang/Object;"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/UnicodeSet\0", "freeze\0", "()Ljava/lang/Object;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// public static final [ADD_CASE_MAPPINGS](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#ADD_CASE_MAPPINGS)
        pub const ADD_CASE_MAPPINGS : i32 = 4;

        /// **get** public static final [ALL_CODE_POINTS](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#ALL_CODE_POINTS)
        ///
        /// Required feature: android-icu-text-UnicodeSet
        #[cfg(any(feature = "all", feature = "android-icu-text-UnicodeSet"))]
        pub fn ALL_CODE_POINTS<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::UnicodeSet>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/icu/text/UnicodeSet\0", "ALL_CODE_POINTS\0", "Landroid/icu/text/UnicodeSet;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// public static final [CASE](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#CASE)
        pub const CASE : i32 = 2;

        /// public static final [CASE_INSENSITIVE](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#CASE_INSENSITIVE)
        pub const CASE_INSENSITIVE : i32 = 2;

        /// **get** public static final [EMPTY](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#EMPTY)
        ///
        /// Required feature: android-icu-text-UnicodeSet
        #[cfg(any(feature = "all", feature = "android-icu-text-UnicodeSet"))]
        pub fn EMPTY<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::UnicodeSet>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/icu/text/UnicodeSet\0", "EMPTY\0", "Landroid/icu/text/UnicodeSet;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// public static final [IGNORE_SPACE](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#IGNORE_SPACE)
        pub const IGNORE_SPACE : i32 = 1;

        /// public static final [MAX_VALUE](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#MAX_VALUE)
        pub const MAX_VALUE : i32 = 1114111;

        /// public static final [MIN_VALUE](https://developer.android.com/reference/android/icu/text/UnicodeSet.html#MIN_VALUE)
        pub const MIN_VALUE : i32 = 0;
    }
}
