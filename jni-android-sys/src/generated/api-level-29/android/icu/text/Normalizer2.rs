// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-icu-text-Normalizer2"))]
__jni_bindgen! {
    /// public class [Normalizer2](https://developer.android.com/reference/android/icu/text/Normalizer2.html)
    ///
    /// Required feature: android-icu-text-Normalizer2
    public class Normalizer2 ("android/icu/text/Normalizer2") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [Normalizer2](https://developer.android.com/reference/android/icu/text/Normalizer2.html#Normalizer2())
        // #[deprecated] fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::icu::text::Normalizer2>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/icu/text/Normalizer2", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/Normalizer2\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getNFCInstance](https://developer.android.com/reference/android/icu/text/Normalizer2.html#getNFCInstance())
        ///
        /// Required features: "android-icu-text-Normalizer2"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-Normalizer2")))]
        pub fn getNFCInstance<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::Normalizer2>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/Normalizer2", java.flags == PUBLIC | STATIC, .name == "getNFCInstance", .descriptor == "()Landroid/icu/text/Normalizer2;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/icu/text/Normalizer2\0", "getNFCInstance\0", "()Landroid/icu/text/Normalizer2;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNFDInstance](https://developer.android.com/reference/android/icu/text/Normalizer2.html#getNFDInstance())
        ///
        /// Required features: "android-icu-text-Normalizer2"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-Normalizer2")))]
        pub fn getNFDInstance<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::Normalizer2>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/Normalizer2", java.flags == PUBLIC | STATIC, .name == "getNFDInstance", .descriptor == "()Landroid/icu/text/Normalizer2;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/icu/text/Normalizer2\0", "getNFDInstance\0", "()Landroid/icu/text/Normalizer2;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNFKCInstance](https://developer.android.com/reference/android/icu/text/Normalizer2.html#getNFKCInstance())
        ///
        /// Required features: "android-icu-text-Normalizer2"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-Normalizer2")))]
        pub fn getNFKCInstance<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::Normalizer2>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/Normalizer2", java.flags == PUBLIC | STATIC, .name == "getNFKCInstance", .descriptor == "()Landroid/icu/text/Normalizer2;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/icu/text/Normalizer2\0", "getNFKCInstance\0", "()Landroid/icu/text/Normalizer2;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNFKDInstance](https://developer.android.com/reference/android/icu/text/Normalizer2.html#getNFKDInstance())
        ///
        /// Required features: "android-icu-text-Normalizer2"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-Normalizer2")))]
        pub fn getNFKDInstance<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::Normalizer2>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/Normalizer2", java.flags == PUBLIC | STATIC, .name == "getNFKDInstance", .descriptor == "()Landroid/icu/text/Normalizer2;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/icu/text/Normalizer2\0", "getNFKDInstance\0", "()Landroid/icu/text/Normalizer2;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNFKCCasefoldInstance](https://developer.android.com/reference/android/icu/text/Normalizer2.html#getNFKCCasefoldInstance())
        ///
        /// Required features: "android-icu-text-Normalizer2"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-Normalizer2")))]
        pub fn getNFKCCasefoldInstance<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::Normalizer2>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/Normalizer2", java.flags == PUBLIC | STATIC, .name == "getNFKCCasefoldInstance", .descriptor == "()Landroid/icu/text/Normalizer2;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/icu/text/Normalizer2\0", "getNFKCCasefoldInstance\0", "()Landroid/icu/text/Normalizer2;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInstance](https://developer.android.com/reference/android/icu/text/Normalizer2.html#getInstance(java.io.InputStream,%20java.lang.String,%20android.icu.text.Normalizer2.Mode))
        ///
        /// Required features: "android-icu-text-Normalizer2", "android-icu-text-Normalizer2_Mode", "java-io-InputStream", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-Normalizer2", feature = "android-icu-text-Normalizer2_Mode", feature = "java-io-InputStream", feature = "java-lang-String")))]
        pub fn getInstance<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::InputStream>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::icu::text::Normalizer2_Mode>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::Normalizer2>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/Normalizer2", java.flags == PUBLIC | STATIC, .name == "getInstance", .descriptor == "(Ljava/io/InputStream;Ljava/lang/String;Landroid/icu/text/Normalizer2$Mode;)Landroid/icu/text/Normalizer2;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/icu/text/Normalizer2\0", "getInstance\0", "(Ljava/io/InputStream;Ljava/lang/String;Landroid/icu/text/Normalizer2$Mode;)Landroid/icu/text/Normalizer2;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [normalize](https://developer.android.com/reference/android/icu/text/Normalizer2.html#normalize(java.lang.CharSequence))
        ///
        /// Required features: "java-lang-CharSequence", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence", feature = "java-lang-String")))]
        pub fn normalize_CharSequence<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/Normalizer2", java.flags == PUBLIC, .name == "normalize", .descriptor == "(Ljava/lang/CharSequence;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/Normalizer2\0", "normalize\0", "(Ljava/lang/CharSequence;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [normalize](https://developer.android.com/reference/android/icu/text/Normalizer2.html#normalize(java.lang.CharSequence,%20java.lang.StringBuilder))
        ///
        /// Required features: "java-lang-CharSequence", "java-lang-StringBuilder"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence", feature = "java-lang-StringBuilder")))]
        pub fn normalize_CharSequence_StringBuilder<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::StringBuilder>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::StringBuilder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/Normalizer2", java.flags == PUBLIC | ABSTRACT, .name == "normalize", .descriptor == "(Ljava/lang/CharSequence;Ljava/lang/StringBuilder;)Ljava/lang/StringBuilder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/Normalizer2\0", "normalize\0", "(Ljava/lang/CharSequence;Ljava/lang/StringBuilder;)Ljava/lang/StringBuilder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [normalize](https://developer.android.com/reference/android/icu/text/Normalizer2.html#normalize(java.lang.CharSequence,%20java.lang.Appendable))
        ///
        /// Required features: "java-lang-Appendable", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-Appendable", feature = "java-lang-CharSequence")))]
        pub fn normalize_CharSequence_Appendable<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Appendable>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Appendable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/Normalizer2", java.flags == PUBLIC | ABSTRACT, .name == "normalize", .descriptor == "(Ljava/lang/CharSequence;Ljava/lang/Appendable;)Ljava/lang/Appendable;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/Normalizer2\0", "normalize\0", "(Ljava/lang/CharSequence;Ljava/lang/Appendable;)Ljava/lang/Appendable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [normalizeSecondAndAppend](https://developer.android.com/reference/android/icu/text/Normalizer2.html#normalizeSecondAndAppend(java.lang.StringBuilder,%20java.lang.CharSequence))
        ///
        /// Required features: "java-lang-CharSequence", "java-lang-StringBuilder"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence", feature = "java-lang-StringBuilder")))]
        pub fn normalizeSecondAndAppend<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::StringBuilder>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::StringBuilder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/Normalizer2", java.flags == PUBLIC | ABSTRACT, .name == "normalizeSecondAndAppend", .descriptor == "(Ljava/lang/StringBuilder;Ljava/lang/CharSequence;)Ljava/lang/StringBuilder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/Normalizer2\0", "normalizeSecondAndAppend\0", "(Ljava/lang/StringBuilder;Ljava/lang/CharSequence;)Ljava/lang/StringBuilder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [append](https://developer.android.com/reference/android/icu/text/Normalizer2.html#append(java.lang.StringBuilder,%20java.lang.CharSequence))
        ///
        /// Required features: "java-lang-CharSequence", "java-lang-StringBuilder"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence", feature = "java-lang-StringBuilder")))]
        pub fn append<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::StringBuilder>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::StringBuilder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/Normalizer2", java.flags == PUBLIC | ABSTRACT, .name == "append", .descriptor == "(Ljava/lang/StringBuilder;Ljava/lang/CharSequence;)Ljava/lang/StringBuilder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/Normalizer2\0", "append\0", "(Ljava/lang/StringBuilder;Ljava/lang/CharSequence;)Ljava/lang/StringBuilder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDecomposition](https://developer.android.com/reference/android/icu/text/Normalizer2.html#getDecomposition(int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getDecomposition<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/Normalizer2", java.flags == PUBLIC | ABSTRACT, .name == "getDecomposition", .descriptor == "(I)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/Normalizer2\0", "getDecomposition\0", "(I)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRawDecomposition](https://developer.android.com/reference/android/icu/text/Normalizer2.html#getRawDecomposition(int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getRawDecomposition<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/Normalizer2", java.flags == PUBLIC, .name == "getRawDecomposition", .descriptor == "(I)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/Normalizer2\0", "getRawDecomposition\0", "(I)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [composePair](https://developer.android.com/reference/android/icu/text/Normalizer2.html#composePair(int,%20int))
        pub fn composePair<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/Normalizer2", java.flags == PUBLIC, .name == "composePair", .descriptor == "(II)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/Normalizer2\0", "composePair\0", "(II)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCombiningClass](https://developer.android.com/reference/android/icu/text/Normalizer2.html#getCombiningClass(int))
        pub fn getCombiningClass<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/Normalizer2", java.flags == PUBLIC, .name == "getCombiningClass", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/Normalizer2\0", "getCombiningClass\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isNormalized](https://developer.android.com/reference/android/icu/text/Normalizer2.html#isNormalized(java.lang.CharSequence))
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn isNormalized<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/Normalizer2", java.flags == PUBLIC | ABSTRACT, .name == "isNormalized", .descriptor == "(Ljava/lang/CharSequence;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/Normalizer2\0", "isNormalized\0", "(Ljava/lang/CharSequence;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [quickCheck](https://developer.android.com/reference/android/icu/text/Normalizer2.html#quickCheck(java.lang.CharSequence))
        ///
        /// Required features: "android-icu-text-Normalizer_QuickCheckResult", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-icu-text-Normalizer_QuickCheckResult", feature = "java-lang-CharSequence")))]
        pub fn quickCheck<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::icu::text::Normalizer_QuickCheckResult>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/Normalizer2", java.flags == PUBLIC | ABSTRACT, .name == "quickCheck", .descriptor == "(Ljava/lang/CharSequence;)Landroid/icu/text/Normalizer$QuickCheckResult;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/Normalizer2\0", "quickCheck\0", "(Ljava/lang/CharSequence;)Landroid/icu/text/Normalizer$QuickCheckResult;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [spanQuickCheckYes](https://developer.android.com/reference/android/icu/text/Normalizer2.html#spanQuickCheckYes(java.lang.CharSequence))
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn spanQuickCheckYes<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/Normalizer2", java.flags == PUBLIC | ABSTRACT, .name == "spanQuickCheckYes", .descriptor == "(Ljava/lang/CharSequence;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/Normalizer2\0", "spanQuickCheckYes\0", "(Ljava/lang/CharSequence;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasBoundaryBefore](https://developer.android.com/reference/android/icu/text/Normalizer2.html#hasBoundaryBefore(int))
        pub fn hasBoundaryBefore<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/Normalizer2", java.flags == PUBLIC | ABSTRACT, .name == "hasBoundaryBefore", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/Normalizer2\0", "hasBoundaryBefore\0", "(I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasBoundaryAfter](https://developer.android.com/reference/android/icu/text/Normalizer2.html#hasBoundaryAfter(int))
        pub fn hasBoundaryAfter<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/Normalizer2", java.flags == PUBLIC | ABSTRACT, .name == "hasBoundaryAfter", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/Normalizer2\0", "hasBoundaryAfter\0", "(I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isInert](https://developer.android.com/reference/android/icu/text/Normalizer2.html#isInert(int))
        pub fn isInert<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/icu/text/Normalizer2", java.flags == PUBLIC | ABSTRACT, .name == "isInert", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/icu/text/Normalizer2\0", "isInert\0", "(I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
