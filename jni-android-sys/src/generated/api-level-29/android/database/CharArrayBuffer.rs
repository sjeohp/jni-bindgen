// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-database-CharArrayBuffer"))]
__jni_bindgen! {
    /// public final class [CharArrayBuffer](https://developer.android.com/reference/android/database/CharArrayBuffer.html)
    ///
    /// Required feature: android-database-CharArrayBuffer
    public final class CharArrayBuffer ("android/database/CharArrayBuffer") extends crate::java::lang::Object {

        /// [CharArrayBuffer](https://developer.android.com/reference/android/database/CharArrayBuffer.html#CharArrayBuffer(int))
        pub fn new_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::database::CharArrayBuffer>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/CharArrayBuffer", java.flags == PUBLIC, .name == "<init>", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/database/CharArrayBuffer\0", "<init>\0", "(I)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [CharArrayBuffer](https://developer.android.com/reference/android/database/CharArrayBuffer.html#CharArrayBuffer(char%5B%5D))
        pub fn new_char_array<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::CharArray>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::database::CharArrayBuffer>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/CharArrayBuffer", java.flags == PUBLIC, .name == "<init>", .descriptor == "([C)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/database/CharArrayBuffer\0", "<init>\0", "([C)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// **get** public [data](https://developer.android.com/reference/android/database/CharArrayBuffer.html#data)
        pub fn data<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::CharArray>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/database/CharArrayBuffer\0", "data\0", "[C\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [data](https://developer.android.com/reference/android/database/CharArrayBuffer.html#data)
        pub fn set_data<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj __jni_bindgen::CharArray>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/database/CharArrayBuffer\0", "data\0", "[C\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [sizeCopied](https://developer.android.com/reference/android/database/CharArrayBuffer.html#sizeCopied)
        pub fn sizeCopied<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/database/CharArrayBuffer\0", "sizeCopied\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [sizeCopied](https://developer.android.com/reference/android/database/CharArrayBuffer.html#sizeCopied)
        pub fn set_sizeCopied<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/database/CharArrayBuffer\0", "sizeCopied\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }
    }
}
