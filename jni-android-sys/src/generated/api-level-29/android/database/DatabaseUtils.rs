// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-database-DatabaseUtils"))]
__jni_bindgen! {
    /// public class [DatabaseUtils](https://developer.android.com/reference/android/database/DatabaseUtils.html)
    ///
    /// Required feature: android-database-DatabaseUtils
    public class DatabaseUtils ("android/database/DatabaseUtils") extends crate::java::lang::Object {

        /// [DatabaseUtils](https://developer.android.com/reference/android/database/DatabaseUtils.html#DatabaseUtils())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::database::DatabaseUtils>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/DatabaseUtils", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/database/DatabaseUtils\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [writeExceptionToParcel](https://developer.android.com/reference/android/database/DatabaseUtils.html#writeExceptionToParcel(android.os.Parcel,%20java.lang.Exception))
        ///
        /// Required features: "android-os-Parcel", "java-lang-Exception"
        #[cfg(any(feature = "all", all(feature = "android-os-Parcel", feature = "java-lang-Exception")))]
        pub fn writeExceptionToParcel<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Parcel>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Exception>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/DatabaseUtils", java.flags == PUBLIC | STATIC | FINAL, .name == "writeExceptionToParcel", .descriptor == "(Landroid/os/Parcel;Ljava/lang/Exception;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/database/DatabaseUtils\0", "writeExceptionToParcel\0", "(Landroid/os/Parcel;Ljava/lang/Exception;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [readExceptionFromParcel](https://developer.android.com/reference/android/database/DatabaseUtils.html#readExceptionFromParcel(android.os.Parcel))
        ///
        /// Required features: "android-os-Parcel"
        #[cfg(any(feature = "all", all(feature = "android-os-Parcel")))]
        pub fn readExceptionFromParcel<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Parcel>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/DatabaseUtils", java.flags == PUBLIC | STATIC | FINAL, .name == "readExceptionFromParcel", .descriptor == "(Landroid/os/Parcel;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/database/DatabaseUtils\0", "readExceptionFromParcel\0", "(Landroid/os/Parcel;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [readExceptionWithFileNotFoundExceptionFromParcel](https://developer.android.com/reference/android/database/DatabaseUtils.html#readExceptionWithFileNotFoundExceptionFromParcel(android.os.Parcel))
        ///
        /// Required features: "android-os-Parcel"
        #[cfg(any(feature = "all", all(feature = "android-os-Parcel")))]
        pub fn readExceptionWithFileNotFoundExceptionFromParcel<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Parcel>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/DatabaseUtils", java.flags == PUBLIC | STATIC, .name == "readExceptionWithFileNotFoundExceptionFromParcel", .descriptor == "(Landroid/os/Parcel;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/database/DatabaseUtils\0", "readExceptionWithFileNotFoundExceptionFromParcel\0", "(Landroid/os/Parcel;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [readExceptionWithOperationApplicationExceptionFromParcel](https://developer.android.com/reference/android/database/DatabaseUtils.html#readExceptionWithOperationApplicationExceptionFromParcel(android.os.Parcel))
        ///
        /// Required features: "android-os-Parcel"
        #[cfg(any(feature = "all", all(feature = "android-os-Parcel")))]
        pub fn readExceptionWithOperationApplicationExceptionFromParcel<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Parcel>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/DatabaseUtils", java.flags == PUBLIC | STATIC, .name == "readExceptionWithOperationApplicationExceptionFromParcel", .descriptor == "(Landroid/os/Parcel;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/database/DatabaseUtils\0", "readExceptionWithOperationApplicationExceptionFromParcel\0", "(Landroid/os/Parcel;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [bindObjectToProgram](https://developer.android.com/reference/android/database/DatabaseUtils.html#bindObjectToProgram(android.database.sqlite.SQLiteProgram,%20int,%20java.lang.Object))
        ///
        /// Required features: "android-database-sqlite-SQLiteProgram", "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "android-database-sqlite-SQLiteProgram", feature = "java-lang-Object")))]
        pub fn bindObjectToProgram<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::database::sqlite::SQLiteProgram>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/DatabaseUtils", java.flags == PUBLIC | STATIC, .name == "bindObjectToProgram", .descriptor == "(Landroid/database/sqlite/SQLiteProgram;ILjava/lang/Object;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/database/DatabaseUtils\0", "bindObjectToProgram\0", "(Landroid/database/sqlite/SQLiteProgram;ILjava/lang/Object;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [appendEscapedSQLString](https://developer.android.com/reference/android/database/DatabaseUtils.html#appendEscapedSQLString(java.lang.StringBuilder,%20java.lang.String))
        ///
        /// Required features: "java-lang-String", "java-lang-StringBuilder"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-lang-StringBuilder")))]
        pub fn appendEscapedSQLString<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::StringBuilder>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/DatabaseUtils", java.flags == PUBLIC | STATIC, .name == "appendEscapedSQLString", .descriptor == "(Ljava/lang/StringBuilder;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/database/DatabaseUtils\0", "appendEscapedSQLString\0", "(Ljava/lang/StringBuilder;Ljava/lang/String;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [sqlEscapeString](https://developer.android.com/reference/android/database/DatabaseUtils.html#sqlEscapeString(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn sqlEscapeString<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/DatabaseUtils", java.flags == PUBLIC | STATIC, .name == "sqlEscapeString", .descriptor == "(Ljava/lang/String;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/database/DatabaseUtils\0", "sqlEscapeString\0", "(Ljava/lang/String;)Ljava/lang/String;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [appendValueToSql](https://developer.android.com/reference/android/database/DatabaseUtils.html#appendValueToSql(java.lang.StringBuilder,%20java.lang.Object))
        ///
        /// Required features: "java-lang-Object", "java-lang-StringBuilder"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-lang-StringBuilder")))]
        pub fn appendValueToSql<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::StringBuilder>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/DatabaseUtils", java.flags == PUBLIC | STATIC | FINAL, .name == "appendValueToSql", .descriptor == "(Ljava/lang/StringBuilder;Ljava/lang/Object;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/database/DatabaseUtils\0", "appendValueToSql\0", "(Ljava/lang/StringBuilder;Ljava/lang/Object;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [concatenateWhere](https://developer.android.com/reference/android/database/DatabaseUtils.html#concatenateWhere(java.lang.String,%20java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn concatenateWhere<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/DatabaseUtils", java.flags == PUBLIC | STATIC, .name == "concatenateWhere", .descriptor == "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/database/DatabaseUtils\0", "concatenateWhere\0", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCollationKey](https://developer.android.com/reference/android/database/DatabaseUtils.html#getCollationKey(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getCollationKey<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/DatabaseUtils", java.flags == PUBLIC | STATIC, .name == "getCollationKey", .descriptor == "(Ljava/lang/String;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/database/DatabaseUtils\0", "getCollationKey\0", "(Ljava/lang/String;)Ljava/lang/String;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getHexCollationKey](https://developer.android.com/reference/android/database/DatabaseUtils.html#getHexCollationKey(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getHexCollationKey<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/DatabaseUtils", java.flags == PUBLIC | STATIC, .name == "getHexCollationKey", .descriptor == "(Ljava/lang/String;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/database/DatabaseUtils\0", "getHexCollationKey\0", "(Ljava/lang/String;)Ljava/lang/String;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dumpCursor](https://developer.android.com/reference/android/database/DatabaseUtils.html#dumpCursor(android.database.Cursor))
        ///
        /// Required features: "android-database-Cursor"
        #[cfg(any(feature = "all", all(feature = "android-database-Cursor")))]
        pub fn dumpCursor_Cursor<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::database::Cursor>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/DatabaseUtils", java.flags == PUBLIC | STATIC, .name == "dumpCursor", .descriptor == "(Landroid/database/Cursor;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/database/DatabaseUtils\0", "dumpCursor\0", "(Landroid/database/Cursor;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dumpCursor](https://developer.android.com/reference/android/database/DatabaseUtils.html#dumpCursor(android.database.Cursor,%20java.io.PrintStream))
        ///
        /// Required features: "android-database-Cursor", "java-io-PrintStream"
        #[cfg(any(feature = "all", all(feature = "android-database-Cursor", feature = "java-io-PrintStream")))]
        pub fn dumpCursor_Cursor_PrintStream<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::database::Cursor>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::PrintStream>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/DatabaseUtils", java.flags == PUBLIC | STATIC, .name == "dumpCursor", .descriptor == "(Landroid/database/Cursor;Ljava/io/PrintStream;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/database/DatabaseUtils\0", "dumpCursor\0", "(Landroid/database/Cursor;Ljava/io/PrintStream;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dumpCursor](https://developer.android.com/reference/android/database/DatabaseUtils.html#dumpCursor(android.database.Cursor,%20java.lang.StringBuilder))
        ///
        /// Required features: "android-database-Cursor", "java-lang-StringBuilder"
        #[cfg(any(feature = "all", all(feature = "android-database-Cursor", feature = "java-lang-StringBuilder")))]
        pub fn dumpCursor_Cursor_StringBuilder<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::database::Cursor>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::StringBuilder>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/DatabaseUtils", java.flags == PUBLIC | STATIC, .name == "dumpCursor", .descriptor == "(Landroid/database/Cursor;Ljava/lang/StringBuilder;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/database/DatabaseUtils\0", "dumpCursor\0", "(Landroid/database/Cursor;Ljava/lang/StringBuilder;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dumpCursorToString](https://developer.android.com/reference/android/database/DatabaseUtils.html#dumpCursorToString(android.database.Cursor))
        ///
        /// Required features: "android-database-Cursor", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-database-Cursor", feature = "java-lang-String")))]
        pub fn dumpCursorToString<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::database::Cursor>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/DatabaseUtils", java.flags == PUBLIC | STATIC, .name == "dumpCursorToString", .descriptor == "(Landroid/database/Cursor;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/database/DatabaseUtils\0", "dumpCursorToString\0", "(Landroid/database/Cursor;)Ljava/lang/String;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dumpCurrentRow](https://developer.android.com/reference/android/database/DatabaseUtils.html#dumpCurrentRow(android.database.Cursor))
        ///
        /// Required features: "android-database-Cursor"
        #[cfg(any(feature = "all", all(feature = "android-database-Cursor")))]
        pub fn dumpCurrentRow_Cursor<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::database::Cursor>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/DatabaseUtils", java.flags == PUBLIC | STATIC, .name == "dumpCurrentRow", .descriptor == "(Landroid/database/Cursor;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/database/DatabaseUtils\0", "dumpCurrentRow\0", "(Landroid/database/Cursor;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dumpCurrentRow](https://developer.android.com/reference/android/database/DatabaseUtils.html#dumpCurrentRow(android.database.Cursor,%20java.io.PrintStream))
        ///
        /// Required features: "android-database-Cursor", "java-io-PrintStream"
        #[cfg(any(feature = "all", all(feature = "android-database-Cursor", feature = "java-io-PrintStream")))]
        pub fn dumpCurrentRow_Cursor_PrintStream<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::database::Cursor>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::PrintStream>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/DatabaseUtils", java.flags == PUBLIC | STATIC, .name == "dumpCurrentRow", .descriptor == "(Landroid/database/Cursor;Ljava/io/PrintStream;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/database/DatabaseUtils\0", "dumpCurrentRow\0", "(Landroid/database/Cursor;Ljava/io/PrintStream;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dumpCurrentRow](https://developer.android.com/reference/android/database/DatabaseUtils.html#dumpCurrentRow(android.database.Cursor,%20java.lang.StringBuilder))
        ///
        /// Required features: "android-database-Cursor", "java-lang-StringBuilder"
        #[cfg(any(feature = "all", all(feature = "android-database-Cursor", feature = "java-lang-StringBuilder")))]
        pub fn dumpCurrentRow_Cursor_StringBuilder<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::database::Cursor>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::StringBuilder>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/DatabaseUtils", java.flags == PUBLIC | STATIC, .name == "dumpCurrentRow", .descriptor == "(Landroid/database/Cursor;Ljava/lang/StringBuilder;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/database/DatabaseUtils\0", "dumpCurrentRow\0", "(Landroid/database/Cursor;Ljava/lang/StringBuilder;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dumpCurrentRowToString](https://developer.android.com/reference/android/database/DatabaseUtils.html#dumpCurrentRowToString(android.database.Cursor))
        ///
        /// Required features: "android-database-Cursor", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-database-Cursor", feature = "java-lang-String")))]
        pub fn dumpCurrentRowToString<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::database::Cursor>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/DatabaseUtils", java.flags == PUBLIC | STATIC, .name == "dumpCurrentRowToString", .descriptor == "(Landroid/database/Cursor;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/database/DatabaseUtils\0", "dumpCurrentRowToString\0", "(Landroid/database/Cursor;)Ljava/lang/String;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [cursorStringToContentValues](https://developer.android.com/reference/android/database/DatabaseUtils.html#cursorStringToContentValues(android.database.Cursor,%20java.lang.String,%20android.content.ContentValues))
        ///
        /// Required features: "android-content-ContentValues", "android-database-Cursor", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentValues", feature = "android-database-Cursor", feature = "java-lang-String")))]
        pub fn cursorStringToContentValues_Cursor_String_ContentValues<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::database::Cursor>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentValues>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/DatabaseUtils", java.flags == PUBLIC | STATIC, .name == "cursorStringToContentValues", .descriptor == "(Landroid/database/Cursor;Ljava/lang/String;Landroid/content/ContentValues;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/database/DatabaseUtils\0", "cursorStringToContentValues\0", "(Landroid/database/Cursor;Ljava/lang/String;Landroid/content/ContentValues;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [cursorStringToInsertHelper](https://developer.android.com/reference/android/database/DatabaseUtils.html#cursorStringToInsertHelper(android.database.Cursor,%20java.lang.String,%20android.database.DatabaseUtils.InsertHelper,%20int))
        ///
        /// Required features: "android-database-Cursor", "android-database-DatabaseUtils_InsertHelper", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-database-Cursor", feature = "android-database-DatabaseUtils_InsertHelper", feature = "java-lang-String")))]
        pub fn cursorStringToInsertHelper<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::database::Cursor>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::database::DatabaseUtils_InsertHelper>>, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/DatabaseUtils", java.flags == PUBLIC | STATIC, .name == "cursorStringToInsertHelper", .descriptor == "(Landroid/database/Cursor;Ljava/lang/String;Landroid/database/DatabaseUtils$InsertHelper;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/database/DatabaseUtils\0", "cursorStringToInsertHelper\0", "(Landroid/database/Cursor;Ljava/lang/String;Landroid/database/DatabaseUtils$InsertHelper;I)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [cursorStringToContentValues](https://developer.android.com/reference/android/database/DatabaseUtils.html#cursorStringToContentValues(android.database.Cursor,%20java.lang.String,%20android.content.ContentValues,%20java.lang.String))
        ///
        /// Required features: "android-content-ContentValues", "android-database-Cursor", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentValues", feature = "android-database-Cursor", feature = "java-lang-String")))]
        pub fn cursorStringToContentValues_Cursor_String_ContentValues_String<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::database::Cursor>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentValues>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/DatabaseUtils", java.flags == PUBLIC | STATIC, .name == "cursorStringToContentValues", .descriptor == "(Landroid/database/Cursor;Ljava/lang/String;Landroid/content/ContentValues;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/database/DatabaseUtils\0", "cursorStringToContentValues\0", "(Landroid/database/Cursor;Ljava/lang/String;Landroid/content/ContentValues;Ljava/lang/String;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [cursorIntToContentValues](https://developer.android.com/reference/android/database/DatabaseUtils.html#cursorIntToContentValues(android.database.Cursor,%20java.lang.String,%20android.content.ContentValues))
        ///
        /// Required features: "android-content-ContentValues", "android-database-Cursor", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentValues", feature = "android-database-Cursor", feature = "java-lang-String")))]
        pub fn cursorIntToContentValues_Cursor_String_ContentValues<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::database::Cursor>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentValues>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/DatabaseUtils", java.flags == PUBLIC | STATIC, .name == "cursorIntToContentValues", .descriptor == "(Landroid/database/Cursor;Ljava/lang/String;Landroid/content/ContentValues;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/database/DatabaseUtils\0", "cursorIntToContentValues\0", "(Landroid/database/Cursor;Ljava/lang/String;Landroid/content/ContentValues;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [cursorIntToContentValues](https://developer.android.com/reference/android/database/DatabaseUtils.html#cursorIntToContentValues(android.database.Cursor,%20java.lang.String,%20android.content.ContentValues,%20java.lang.String))
        ///
        /// Required features: "android-content-ContentValues", "android-database-Cursor", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentValues", feature = "android-database-Cursor", feature = "java-lang-String")))]
        pub fn cursorIntToContentValues_Cursor_String_ContentValues_String<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::database::Cursor>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentValues>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/DatabaseUtils", java.flags == PUBLIC | STATIC, .name == "cursorIntToContentValues", .descriptor == "(Landroid/database/Cursor;Ljava/lang/String;Landroid/content/ContentValues;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/database/DatabaseUtils\0", "cursorIntToContentValues\0", "(Landroid/database/Cursor;Ljava/lang/String;Landroid/content/ContentValues;Ljava/lang/String;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [cursorLongToContentValues](https://developer.android.com/reference/android/database/DatabaseUtils.html#cursorLongToContentValues(android.database.Cursor,%20java.lang.String,%20android.content.ContentValues))
        ///
        /// Required features: "android-content-ContentValues", "android-database-Cursor", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentValues", feature = "android-database-Cursor", feature = "java-lang-String")))]
        pub fn cursorLongToContentValues_Cursor_String_ContentValues<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::database::Cursor>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentValues>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/DatabaseUtils", java.flags == PUBLIC | STATIC, .name == "cursorLongToContentValues", .descriptor == "(Landroid/database/Cursor;Ljava/lang/String;Landroid/content/ContentValues;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/database/DatabaseUtils\0", "cursorLongToContentValues\0", "(Landroid/database/Cursor;Ljava/lang/String;Landroid/content/ContentValues;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [cursorLongToContentValues](https://developer.android.com/reference/android/database/DatabaseUtils.html#cursorLongToContentValues(android.database.Cursor,%20java.lang.String,%20android.content.ContentValues,%20java.lang.String))
        ///
        /// Required features: "android-content-ContentValues", "android-database-Cursor", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentValues", feature = "android-database-Cursor", feature = "java-lang-String")))]
        pub fn cursorLongToContentValues_Cursor_String_ContentValues_String<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::database::Cursor>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentValues>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/DatabaseUtils", java.flags == PUBLIC | STATIC, .name == "cursorLongToContentValues", .descriptor == "(Landroid/database/Cursor;Ljava/lang/String;Landroid/content/ContentValues;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/database/DatabaseUtils\0", "cursorLongToContentValues\0", "(Landroid/database/Cursor;Ljava/lang/String;Landroid/content/ContentValues;Ljava/lang/String;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [cursorDoubleToCursorValues](https://developer.android.com/reference/android/database/DatabaseUtils.html#cursorDoubleToCursorValues(android.database.Cursor,%20java.lang.String,%20android.content.ContentValues))
        ///
        /// Required features: "android-content-ContentValues", "android-database-Cursor", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentValues", feature = "android-database-Cursor", feature = "java-lang-String")))]
        pub fn cursorDoubleToCursorValues<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::database::Cursor>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentValues>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/DatabaseUtils", java.flags == PUBLIC | STATIC, .name == "cursorDoubleToCursorValues", .descriptor == "(Landroid/database/Cursor;Ljava/lang/String;Landroid/content/ContentValues;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/database/DatabaseUtils\0", "cursorDoubleToCursorValues\0", "(Landroid/database/Cursor;Ljava/lang/String;Landroid/content/ContentValues;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [cursorDoubleToContentValues](https://developer.android.com/reference/android/database/DatabaseUtils.html#cursorDoubleToContentValues(android.database.Cursor,%20java.lang.String,%20android.content.ContentValues,%20java.lang.String))
        ///
        /// Required features: "android-content-ContentValues", "android-database-Cursor", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentValues", feature = "android-database-Cursor", feature = "java-lang-String")))]
        pub fn cursorDoubleToContentValues<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::database::Cursor>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentValues>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/DatabaseUtils", java.flags == PUBLIC | STATIC, .name == "cursorDoubleToContentValues", .descriptor == "(Landroid/database/Cursor;Ljava/lang/String;Landroid/content/ContentValues;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/database/DatabaseUtils\0", "cursorDoubleToContentValues\0", "(Landroid/database/Cursor;Ljava/lang/String;Landroid/content/ContentValues;Ljava/lang/String;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [cursorRowToContentValues](https://developer.android.com/reference/android/database/DatabaseUtils.html#cursorRowToContentValues(android.database.Cursor,%20android.content.ContentValues))
        ///
        /// Required features: "android-content-ContentValues", "android-database-Cursor"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentValues", feature = "android-database-Cursor")))]
        pub fn cursorRowToContentValues<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::database::Cursor>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentValues>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/DatabaseUtils", java.flags == PUBLIC | STATIC, .name == "cursorRowToContentValues", .descriptor == "(Landroid/database/Cursor;Landroid/content/ContentValues;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/database/DatabaseUtils\0", "cursorRowToContentValues\0", "(Landroid/database/Cursor;Landroid/content/ContentValues;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [queryNumEntries](https://developer.android.com/reference/android/database/DatabaseUtils.html#queryNumEntries(android.database.sqlite.SQLiteDatabase,%20java.lang.String))
        ///
        /// Required features: "android-database-sqlite-SQLiteDatabase", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-database-sqlite-SQLiteDatabase", feature = "java-lang-String")))]
        pub fn queryNumEntries_SQLiteDatabase_String<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::database::sqlite::SQLiteDatabase>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/DatabaseUtils", java.flags == PUBLIC | STATIC, .name == "queryNumEntries", .descriptor == "(Landroid/database/sqlite/SQLiteDatabase;Ljava/lang/String;)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/database/DatabaseUtils\0", "queryNumEntries\0", "(Landroid/database/sqlite/SQLiteDatabase;Ljava/lang/String;)J\0");
                __jni_env.call_static_long_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [queryNumEntries](https://developer.android.com/reference/android/database/DatabaseUtils.html#queryNumEntries(android.database.sqlite.SQLiteDatabase,%20java.lang.String,%20java.lang.String))
        ///
        /// Required features: "android-database-sqlite-SQLiteDatabase", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-database-sqlite-SQLiteDatabase", feature = "java-lang-String")))]
        pub fn queryNumEntries_SQLiteDatabase_String_String<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::database::sqlite::SQLiteDatabase>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/DatabaseUtils", java.flags == PUBLIC | STATIC, .name == "queryNumEntries", .descriptor == "(Landroid/database/sqlite/SQLiteDatabase;Ljava/lang/String;Ljava/lang/String;)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/database/DatabaseUtils\0", "queryNumEntries\0", "(Landroid/database/sqlite/SQLiteDatabase;Ljava/lang/String;Ljava/lang/String;)J\0");
                __jni_env.call_static_long_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [queryNumEntries](https://developer.android.com/reference/android/database/DatabaseUtils.html#queryNumEntries(android.database.sqlite.SQLiteDatabase,%20java.lang.String,%20java.lang.String,%20java.lang.String%5B%5D))
        ///
        /// Required features: "android-database-sqlite-SQLiteDatabase", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-database-sqlite-SQLiteDatabase", feature = "java-lang-String")))]
        pub fn queryNumEntries_SQLiteDatabase_String_String_String_array<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::database::sqlite::SQLiteDatabase>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/DatabaseUtils", java.flags == PUBLIC | STATIC, .name == "queryNumEntries", .descriptor == "(Landroid/database/sqlite/SQLiteDatabase;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/database/DatabaseUtils\0", "queryNumEntries\0", "(Landroid/database/sqlite/SQLiteDatabase;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)J\0");
                __jni_env.call_static_long_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [longForQuery](https://developer.android.com/reference/android/database/DatabaseUtils.html#longForQuery(android.database.sqlite.SQLiteDatabase,%20java.lang.String,%20java.lang.String%5B%5D))
        ///
        /// Required features: "android-database-sqlite-SQLiteDatabase", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-database-sqlite-SQLiteDatabase", feature = "java-lang-String")))]
        pub fn longForQuery_SQLiteDatabase_String_String_array<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::database::sqlite::SQLiteDatabase>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/DatabaseUtils", java.flags == PUBLIC | STATIC, .name == "longForQuery", .descriptor == "(Landroid/database/sqlite/SQLiteDatabase;Ljava/lang/String;[Ljava/lang/String;)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/database/DatabaseUtils\0", "longForQuery\0", "(Landroid/database/sqlite/SQLiteDatabase;Ljava/lang/String;[Ljava/lang/String;)J\0");
                __jni_env.call_static_long_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [longForQuery](https://developer.android.com/reference/android/database/DatabaseUtils.html#longForQuery(android.database.sqlite.SQLiteStatement,%20java.lang.String%5B%5D))
        ///
        /// Required features: "android-database-sqlite-SQLiteStatement", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-database-sqlite-SQLiteStatement", feature = "java-lang-String")))]
        pub fn longForQuery_SQLiteStatement_String_array<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::database::sqlite::SQLiteStatement>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/DatabaseUtils", java.flags == PUBLIC | STATIC, .name == "longForQuery", .descriptor == "(Landroid/database/sqlite/SQLiteStatement;[Ljava/lang/String;)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/database/DatabaseUtils\0", "longForQuery\0", "(Landroid/database/sqlite/SQLiteStatement;[Ljava/lang/String;)J\0");
                __jni_env.call_static_long_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [stringForQuery](https://developer.android.com/reference/android/database/DatabaseUtils.html#stringForQuery(android.database.sqlite.SQLiteDatabase,%20java.lang.String,%20java.lang.String%5B%5D))
        ///
        /// Required features: "android-database-sqlite-SQLiteDatabase", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-database-sqlite-SQLiteDatabase", feature = "java-lang-String")))]
        pub fn stringForQuery_SQLiteDatabase_String_String_array<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::database::sqlite::SQLiteDatabase>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/DatabaseUtils", java.flags == PUBLIC | STATIC, .name == "stringForQuery", .descriptor == "(Landroid/database/sqlite/SQLiteDatabase;Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/database/DatabaseUtils\0", "stringForQuery\0", "(Landroid/database/sqlite/SQLiteDatabase;Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/String;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [stringForQuery](https://developer.android.com/reference/android/database/DatabaseUtils.html#stringForQuery(android.database.sqlite.SQLiteStatement,%20java.lang.String%5B%5D))
        ///
        /// Required features: "android-database-sqlite-SQLiteStatement", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-database-sqlite-SQLiteStatement", feature = "java-lang-String")))]
        pub fn stringForQuery_SQLiteStatement_String_array<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::database::sqlite::SQLiteStatement>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/DatabaseUtils", java.flags == PUBLIC | STATIC, .name == "stringForQuery", .descriptor == "(Landroid/database/sqlite/SQLiteStatement;[Ljava/lang/String;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/database/DatabaseUtils\0", "stringForQuery\0", "(Landroid/database/sqlite/SQLiteStatement;[Ljava/lang/String;)Ljava/lang/String;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [blobFileDescriptorForQuery](https://developer.android.com/reference/android/database/DatabaseUtils.html#blobFileDescriptorForQuery(android.database.sqlite.SQLiteDatabase,%20java.lang.String,%20java.lang.String%5B%5D))
        ///
        /// Required features: "android-database-sqlite-SQLiteDatabase", "android-os-ParcelFileDescriptor", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-database-sqlite-SQLiteDatabase", feature = "android-os-ParcelFileDescriptor", feature = "java-lang-String")))]
        pub fn blobFileDescriptorForQuery_SQLiteDatabase_String_String_array<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::database::sqlite::SQLiteDatabase>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::ParcelFileDescriptor>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/DatabaseUtils", java.flags == PUBLIC | STATIC, .name == "blobFileDescriptorForQuery", .descriptor == "(Landroid/database/sqlite/SQLiteDatabase;Ljava/lang/String;[Ljava/lang/String;)Landroid/os/ParcelFileDescriptor;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/database/DatabaseUtils\0", "blobFileDescriptorForQuery\0", "(Landroid/database/sqlite/SQLiteDatabase;Ljava/lang/String;[Ljava/lang/String;)Landroid/os/ParcelFileDescriptor;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [blobFileDescriptorForQuery](https://developer.android.com/reference/android/database/DatabaseUtils.html#blobFileDescriptorForQuery(android.database.sqlite.SQLiteStatement,%20java.lang.String%5B%5D))
        ///
        /// Required features: "android-database-sqlite-SQLiteStatement", "android-os-ParcelFileDescriptor", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-database-sqlite-SQLiteStatement", feature = "android-os-ParcelFileDescriptor", feature = "java-lang-String")))]
        pub fn blobFileDescriptorForQuery_SQLiteStatement_String_array<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::database::sqlite::SQLiteStatement>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::ParcelFileDescriptor>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/DatabaseUtils", java.flags == PUBLIC | STATIC, .name == "blobFileDescriptorForQuery", .descriptor == "(Landroid/database/sqlite/SQLiteStatement;[Ljava/lang/String;)Landroid/os/ParcelFileDescriptor;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/database/DatabaseUtils\0", "blobFileDescriptorForQuery\0", "(Landroid/database/sqlite/SQLiteStatement;[Ljava/lang/String;)Landroid/os/ParcelFileDescriptor;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [cursorStringToContentValuesIfPresent](https://developer.android.com/reference/android/database/DatabaseUtils.html#cursorStringToContentValuesIfPresent(android.database.Cursor,%20android.content.ContentValues,%20java.lang.String))
        ///
        /// Required features: "android-content-ContentValues", "android-database-Cursor", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentValues", feature = "android-database-Cursor", feature = "java-lang-String")))]
        pub fn cursorStringToContentValuesIfPresent<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::database::Cursor>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentValues>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/DatabaseUtils", java.flags == PUBLIC | STATIC, .name == "cursorStringToContentValuesIfPresent", .descriptor == "(Landroid/database/Cursor;Landroid/content/ContentValues;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/database/DatabaseUtils\0", "cursorStringToContentValuesIfPresent\0", "(Landroid/database/Cursor;Landroid/content/ContentValues;Ljava/lang/String;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [cursorLongToContentValuesIfPresent](https://developer.android.com/reference/android/database/DatabaseUtils.html#cursorLongToContentValuesIfPresent(android.database.Cursor,%20android.content.ContentValues,%20java.lang.String))
        ///
        /// Required features: "android-content-ContentValues", "android-database-Cursor", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentValues", feature = "android-database-Cursor", feature = "java-lang-String")))]
        pub fn cursorLongToContentValuesIfPresent<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::database::Cursor>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentValues>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/DatabaseUtils", java.flags == PUBLIC | STATIC, .name == "cursorLongToContentValuesIfPresent", .descriptor == "(Landroid/database/Cursor;Landroid/content/ContentValues;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/database/DatabaseUtils\0", "cursorLongToContentValuesIfPresent\0", "(Landroid/database/Cursor;Landroid/content/ContentValues;Ljava/lang/String;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [cursorShortToContentValuesIfPresent](https://developer.android.com/reference/android/database/DatabaseUtils.html#cursorShortToContentValuesIfPresent(android.database.Cursor,%20android.content.ContentValues,%20java.lang.String))
        ///
        /// Required features: "android-content-ContentValues", "android-database-Cursor", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentValues", feature = "android-database-Cursor", feature = "java-lang-String")))]
        pub fn cursorShortToContentValuesIfPresent<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::database::Cursor>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentValues>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/DatabaseUtils", java.flags == PUBLIC | STATIC, .name == "cursorShortToContentValuesIfPresent", .descriptor == "(Landroid/database/Cursor;Landroid/content/ContentValues;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/database/DatabaseUtils\0", "cursorShortToContentValuesIfPresent\0", "(Landroid/database/Cursor;Landroid/content/ContentValues;Ljava/lang/String;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [cursorIntToContentValuesIfPresent](https://developer.android.com/reference/android/database/DatabaseUtils.html#cursorIntToContentValuesIfPresent(android.database.Cursor,%20android.content.ContentValues,%20java.lang.String))
        ///
        /// Required features: "android-content-ContentValues", "android-database-Cursor", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentValues", feature = "android-database-Cursor", feature = "java-lang-String")))]
        pub fn cursorIntToContentValuesIfPresent<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::database::Cursor>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentValues>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/DatabaseUtils", java.flags == PUBLIC | STATIC, .name == "cursorIntToContentValuesIfPresent", .descriptor == "(Landroid/database/Cursor;Landroid/content/ContentValues;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/database/DatabaseUtils\0", "cursorIntToContentValuesIfPresent\0", "(Landroid/database/Cursor;Landroid/content/ContentValues;Ljava/lang/String;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [cursorFloatToContentValuesIfPresent](https://developer.android.com/reference/android/database/DatabaseUtils.html#cursorFloatToContentValuesIfPresent(android.database.Cursor,%20android.content.ContentValues,%20java.lang.String))
        ///
        /// Required features: "android-content-ContentValues", "android-database-Cursor", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentValues", feature = "android-database-Cursor", feature = "java-lang-String")))]
        pub fn cursorFloatToContentValuesIfPresent<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::database::Cursor>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentValues>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/DatabaseUtils", java.flags == PUBLIC | STATIC, .name == "cursorFloatToContentValuesIfPresent", .descriptor == "(Landroid/database/Cursor;Landroid/content/ContentValues;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/database/DatabaseUtils\0", "cursorFloatToContentValuesIfPresent\0", "(Landroid/database/Cursor;Landroid/content/ContentValues;Ljava/lang/String;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [cursorDoubleToContentValuesIfPresent](https://developer.android.com/reference/android/database/DatabaseUtils.html#cursorDoubleToContentValuesIfPresent(android.database.Cursor,%20android.content.ContentValues,%20java.lang.String))
        ///
        /// Required features: "android-content-ContentValues", "android-database-Cursor", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentValues", feature = "android-database-Cursor", feature = "java-lang-String")))]
        pub fn cursorDoubleToContentValuesIfPresent<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::database::Cursor>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentValues>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/DatabaseUtils", java.flags == PUBLIC | STATIC, .name == "cursorDoubleToContentValuesIfPresent", .descriptor == "(Landroid/database/Cursor;Landroid/content/ContentValues;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/database/DatabaseUtils\0", "cursorDoubleToContentValuesIfPresent\0", "(Landroid/database/Cursor;Landroid/content/ContentValues;Ljava/lang/String;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createDbFromSqlStatements](https://developer.android.com/reference/android/database/DatabaseUtils.html#createDbFromSqlStatements(android.content.Context,%20java.lang.String,%20int,%20java.lang.String))
        ///
        /// Required features: "android-content-Context", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "java-lang-String")))]
        pub fn createDbFromSqlStatements<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/DatabaseUtils", java.flags == PUBLIC | STATIC, .name == "createDbFromSqlStatements", .descriptor == "(Landroid/content/Context;Ljava/lang/String;ILjava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/database/DatabaseUtils\0", "createDbFromSqlStatements\0", "(Landroid/content/Context;Ljava/lang/String;ILjava/lang/String;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSqlStatementType](https://developer.android.com/reference/android/database/DatabaseUtils.html#getSqlStatementType(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getSqlStatementType<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/DatabaseUtils", java.flags == PUBLIC | STATIC, .name == "getSqlStatementType", .descriptor == "(Ljava/lang/String;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/database/DatabaseUtils\0", "getSqlStatementType\0", "(Ljava/lang/String;)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [appendSelectionArgs](https://developer.android.com/reference/android/database/DatabaseUtils.html#appendSelectionArgs(java.lang.String%5B%5D,%20java.lang.String%5B%5D))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn appendSelectionArgs<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/DatabaseUtils", java.flags == PUBLIC | STATIC, .name == "appendSelectionArgs", .descriptor == "([Ljava/lang/String;[Ljava/lang/String;)[Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/database/DatabaseUtils\0", "appendSelectionArgs\0", "([Ljava/lang/String;[Ljava/lang/String;)[Ljava/lang/String;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [STATEMENT_ABORT](https://developer.android.com/reference/android/database/DatabaseUtils.html#STATEMENT_ABORT)
        pub const STATEMENT_ABORT : i32 = 6;

        /// public static final [STATEMENT_ATTACH](https://developer.android.com/reference/android/database/DatabaseUtils.html#STATEMENT_ATTACH)
        pub const STATEMENT_ATTACH : i32 = 3;

        /// public static final [STATEMENT_BEGIN](https://developer.android.com/reference/android/database/DatabaseUtils.html#STATEMENT_BEGIN)
        pub const STATEMENT_BEGIN : i32 = 4;

        /// public static final [STATEMENT_COMMIT](https://developer.android.com/reference/android/database/DatabaseUtils.html#STATEMENT_COMMIT)
        pub const STATEMENT_COMMIT : i32 = 5;

        /// public static final [STATEMENT_DDL](https://developer.android.com/reference/android/database/DatabaseUtils.html#STATEMENT_DDL)
        pub const STATEMENT_DDL : i32 = 8;

        /// public static final [STATEMENT_OTHER](https://developer.android.com/reference/android/database/DatabaseUtils.html#STATEMENT_OTHER)
        pub const STATEMENT_OTHER : i32 = 99;

        /// public static final [STATEMENT_PRAGMA](https://developer.android.com/reference/android/database/DatabaseUtils.html#STATEMENT_PRAGMA)
        pub const STATEMENT_PRAGMA : i32 = 7;

        /// public static final [STATEMENT_SELECT](https://developer.android.com/reference/android/database/DatabaseUtils.html#STATEMENT_SELECT)
        pub const STATEMENT_SELECT : i32 = 1;

        /// public static final [STATEMENT_UNPREPARED](https://developer.android.com/reference/android/database/DatabaseUtils.html#STATEMENT_UNPREPARED)
        pub const STATEMENT_UNPREPARED : i32 = 9;

        /// public static final [STATEMENT_UPDATE](https://developer.android.com/reference/android/database/DatabaseUtils.html#STATEMENT_UPDATE)
        pub const STATEMENT_UPDATE : i32 = 2;
    }
}
