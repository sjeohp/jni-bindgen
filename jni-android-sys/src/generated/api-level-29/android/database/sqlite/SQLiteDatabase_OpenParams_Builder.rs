// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-database-sqlite-SQLiteDatabase_OpenParams_Builder"))]
__jni_bindgen! {
    /// public final class [SQLiteDatabase.OpenParams.Builder](https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.OpenParams.Builder.html)
    ///
    /// Required feature: android-database-sqlite-SQLiteDatabase_OpenParams_Builder
    public final class SQLiteDatabase_OpenParams_Builder ("android/database/sqlite/SQLiteDatabase$OpenParams$Builder") extends crate::java::lang::Object {

        /// [Builder](https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.OpenParams.Builder.html#Builder())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::database::sqlite::SQLiteDatabase_OpenParams_Builder>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/sqlite/SQLiteDatabase$OpenParams$Builder", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/database/sqlite/SQLiteDatabase$OpenParams$Builder\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [Builder](https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.OpenParams.Builder.html#Builder(android.database.sqlite.SQLiteDatabase.OpenParams))
        ///
        /// Required features: "android-database-sqlite-SQLiteDatabase_OpenParams"
        #[cfg(any(feature = "all", all(feature = "android-database-sqlite-SQLiteDatabase_OpenParams")))]
        pub fn new_OpenParams<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::database::sqlite::SQLiteDatabase_OpenParams>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::database::sqlite::SQLiteDatabase_OpenParams_Builder>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/sqlite/SQLiteDatabase$OpenParams$Builder", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/database/sqlite/SQLiteDatabase$OpenParams;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/database/sqlite/SQLiteDatabase$OpenParams$Builder\0", "<init>\0", "(Landroid/database/sqlite/SQLiteDatabase$OpenParams;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setLookasideConfig](https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.OpenParams.Builder.html#setLookasideConfig(int,%20int))
        ///
        /// Required features: "android-database-sqlite-SQLiteDatabase_OpenParams_Builder"
        #[cfg(any(feature = "all", all(feature = "android-database-sqlite-SQLiteDatabase_OpenParams_Builder")))]
        pub fn setLookasideConfig<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::database::sqlite::SQLiteDatabase_OpenParams_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/sqlite/SQLiteDatabase$OpenParams$Builder", java.flags == PUBLIC, .name == "setLookasideConfig", .descriptor == "(II)Landroid/database/sqlite/SQLiteDatabase$OpenParams$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/database/sqlite/SQLiteDatabase$OpenParams$Builder\0", "setLookasideConfig\0", "(II)Landroid/database/sqlite/SQLiteDatabase$OpenParams$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOpenFlags](https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.OpenParams.Builder.html#setOpenFlags(int))
        ///
        /// Required features: "android-database-sqlite-SQLiteDatabase_OpenParams_Builder"
        #[cfg(any(feature = "all", all(feature = "android-database-sqlite-SQLiteDatabase_OpenParams_Builder")))]
        pub fn setOpenFlags<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::database::sqlite::SQLiteDatabase_OpenParams_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/sqlite/SQLiteDatabase$OpenParams$Builder", java.flags == PUBLIC, .name == "setOpenFlags", .descriptor == "(I)Landroid/database/sqlite/SQLiteDatabase$OpenParams$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/database/sqlite/SQLiteDatabase$OpenParams$Builder\0", "setOpenFlags\0", "(I)Landroid/database/sqlite/SQLiteDatabase$OpenParams$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addOpenFlags](https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.OpenParams.Builder.html#addOpenFlags(int))
        ///
        /// Required features: "android-database-sqlite-SQLiteDatabase_OpenParams_Builder"
        #[cfg(any(feature = "all", all(feature = "android-database-sqlite-SQLiteDatabase_OpenParams_Builder")))]
        pub fn addOpenFlags<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::database::sqlite::SQLiteDatabase_OpenParams_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/sqlite/SQLiteDatabase$OpenParams$Builder", java.flags == PUBLIC, .name == "addOpenFlags", .descriptor == "(I)Landroid/database/sqlite/SQLiteDatabase$OpenParams$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/database/sqlite/SQLiteDatabase$OpenParams$Builder\0", "addOpenFlags\0", "(I)Landroid/database/sqlite/SQLiteDatabase$OpenParams$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeOpenFlags](https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.OpenParams.Builder.html#removeOpenFlags(int))
        ///
        /// Required features: "android-database-sqlite-SQLiteDatabase_OpenParams_Builder"
        #[cfg(any(feature = "all", all(feature = "android-database-sqlite-SQLiteDatabase_OpenParams_Builder")))]
        pub fn removeOpenFlags<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::database::sqlite::SQLiteDatabase_OpenParams_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/sqlite/SQLiteDatabase$OpenParams$Builder", java.flags == PUBLIC, .name == "removeOpenFlags", .descriptor == "(I)Landroid/database/sqlite/SQLiteDatabase$OpenParams$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/database/sqlite/SQLiteDatabase$OpenParams$Builder\0", "removeOpenFlags\0", "(I)Landroid/database/sqlite/SQLiteDatabase$OpenParams$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setCursorFactory](https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.OpenParams.Builder.html#setCursorFactory(android.database.sqlite.SQLiteDatabase.CursorFactory))
        ///
        /// Required features: "android-database-sqlite-SQLiteDatabase_CursorFactory", "android-database-sqlite-SQLiteDatabase_OpenParams_Builder"
        #[cfg(any(feature = "all", all(feature = "android-database-sqlite-SQLiteDatabase_CursorFactory", feature = "android-database-sqlite-SQLiteDatabase_OpenParams_Builder")))]
        pub fn setCursorFactory<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::database::sqlite::SQLiteDatabase_CursorFactory>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::database::sqlite::SQLiteDatabase_OpenParams_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/sqlite/SQLiteDatabase$OpenParams$Builder", java.flags == PUBLIC, .name == "setCursorFactory", .descriptor == "(Landroid/database/sqlite/SQLiteDatabase$CursorFactory;)Landroid/database/sqlite/SQLiteDatabase$OpenParams$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/database/sqlite/SQLiteDatabase$OpenParams$Builder\0", "setCursorFactory\0", "(Landroid/database/sqlite/SQLiteDatabase$CursorFactory;)Landroid/database/sqlite/SQLiteDatabase$OpenParams$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setErrorHandler](https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.OpenParams.Builder.html#setErrorHandler(android.database.DatabaseErrorHandler))
        ///
        /// Required features: "android-database-DatabaseErrorHandler", "android-database-sqlite-SQLiteDatabase_OpenParams_Builder"
        #[cfg(any(feature = "all", all(feature = "android-database-DatabaseErrorHandler", feature = "android-database-sqlite-SQLiteDatabase_OpenParams_Builder")))]
        pub fn setErrorHandler<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::database::DatabaseErrorHandler>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::database::sqlite::SQLiteDatabase_OpenParams_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/sqlite/SQLiteDatabase$OpenParams$Builder", java.flags == PUBLIC, .name == "setErrorHandler", .descriptor == "(Landroid/database/DatabaseErrorHandler;)Landroid/database/sqlite/SQLiteDatabase$OpenParams$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/database/sqlite/SQLiteDatabase$OpenParams$Builder\0", "setErrorHandler\0", "(Landroid/database/DatabaseErrorHandler;)Landroid/database/sqlite/SQLiteDatabase$OpenParams$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setIdleConnectionTimeout](https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.OpenParams.Builder.html#setIdleConnectionTimeout(long))
        ///
        /// Required features: "android-database-sqlite-SQLiteDatabase_OpenParams_Builder"
        #[cfg(any(feature = "all", all(feature = "android-database-sqlite-SQLiteDatabase_OpenParams_Builder")))]
        #[deprecated] pub fn setIdleConnectionTimeout<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::database::sqlite::SQLiteDatabase_OpenParams_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/sqlite/SQLiteDatabase$OpenParams$Builder", java.flags == PUBLIC, .name == "setIdleConnectionTimeout", .descriptor == "(J)Landroid/database/sqlite/SQLiteDatabase$OpenParams$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/database/sqlite/SQLiteDatabase$OpenParams$Builder\0", "setIdleConnectionTimeout\0", "(J)Landroid/database/sqlite/SQLiteDatabase$OpenParams$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setJournalMode](https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.OpenParams.Builder.html#setJournalMode(java.lang.String))
        ///
        /// Required features: "android-database-sqlite-SQLiteDatabase_OpenParams_Builder", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-database-sqlite-SQLiteDatabase_OpenParams_Builder", feature = "java-lang-String")))]
        pub fn setJournalMode<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::database::sqlite::SQLiteDatabase_OpenParams_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/sqlite/SQLiteDatabase$OpenParams$Builder", java.flags == PUBLIC, .name == "setJournalMode", .descriptor == "(Ljava/lang/String;)Landroid/database/sqlite/SQLiteDatabase$OpenParams$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/database/sqlite/SQLiteDatabase$OpenParams$Builder\0", "setJournalMode\0", "(Ljava/lang/String;)Landroid/database/sqlite/SQLiteDatabase$OpenParams$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setSynchronousMode](https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.OpenParams.Builder.html#setSynchronousMode(java.lang.String))
        ///
        /// Required features: "android-database-sqlite-SQLiteDatabase_OpenParams_Builder", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-database-sqlite-SQLiteDatabase_OpenParams_Builder", feature = "java-lang-String")))]
        pub fn setSynchronousMode<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::database::sqlite::SQLiteDatabase_OpenParams_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/sqlite/SQLiteDatabase$OpenParams$Builder", java.flags == PUBLIC, .name == "setSynchronousMode", .descriptor == "(Ljava/lang/String;)Landroid/database/sqlite/SQLiteDatabase$OpenParams$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/database/sqlite/SQLiteDatabase$OpenParams$Builder\0", "setSynchronousMode\0", "(Ljava/lang/String;)Landroid/database/sqlite/SQLiteDatabase$OpenParams$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [build](https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.OpenParams.Builder.html#build())
        ///
        /// Required features: "android-database-sqlite-SQLiteDatabase_OpenParams"
        #[cfg(any(feature = "all", all(feature = "android-database-sqlite-SQLiteDatabase_OpenParams")))]
        pub fn build<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::database::sqlite::SQLiteDatabase_OpenParams>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/sqlite/SQLiteDatabase$OpenParams$Builder", java.flags == PUBLIC, .name == "build", .descriptor == "()Landroid/database/sqlite/SQLiteDatabase$OpenParams;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/database/sqlite/SQLiteDatabase$OpenParams$Builder\0", "build\0", "()Landroid/database/sqlite/SQLiteDatabase$OpenParams;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
