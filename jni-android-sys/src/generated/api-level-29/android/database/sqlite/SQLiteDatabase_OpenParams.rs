// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-database-sqlite-SQLiteDatabase_OpenParams"))]
__jni_bindgen! {
    /// public final class [SQLiteDatabase.OpenParams](https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.OpenParams.html)
    ///
    /// Required feature: android-database-sqlite-SQLiteDatabase_OpenParams
    public final class SQLiteDatabase_OpenParams ("android/database/sqlite/SQLiteDatabase$OpenParams") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [OpenParams](https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.OpenParams.html#OpenParams(int,%20android.database.sqlite.SQLiteDatabase.CursorFactory,%20android.database.DatabaseErrorHandler,%20int,%20int,%20long,%20java.lang.String,%20java.lang.String))
        // ///
        // /// Required features: "android-database-DatabaseErrorHandler", "android-database-sqlite-SQLiteDatabase_CursorFactory", "java-lang-String"
        // #[cfg(any(feature = "all", all(feature = "android-database-DatabaseErrorHandler", feature = "android-database-sqlite-SQLiteDatabase_CursorFactory", feature = "java-lang-String")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::database::sqlite::SQLiteDatabase_CursorFactory>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::database::DatabaseErrorHandler>>, arg3: i32, arg4: i32, arg5: i64, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg7: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::database::sqlite::SQLiteDatabase_OpenParams>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/database/sqlite/SQLiteDatabase$OpenParams", java.flags == (empty), .name == "<init>", .descriptor == "(ILandroid/database/sqlite/SQLiteDatabase$CursorFactory;Landroid/database/DatabaseErrorHandler;IIJLjava/lang/String;Ljava/lang/String;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6.into()), __jni_bindgen::AsJValue::as_jvalue(&arg7.into())];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/database/sqlite/SQLiteDatabase$OpenParams\0", "<init>\0", "(ILandroid/database/sqlite/SQLiteDatabase$CursorFactory;Landroid/database/DatabaseErrorHandler;IIJLjava/lang/String;Ljava/lang/String;)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getLookasideSlotSize](https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.OpenParams.html#getLookasideSlotSize())
        pub fn getLookasideSlotSize<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/sqlite/SQLiteDatabase$OpenParams", java.flags == PUBLIC, .name == "getLookasideSlotSize", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/database/sqlite/SQLiteDatabase$OpenParams\0", "getLookasideSlotSize\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLookasideSlotCount](https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.OpenParams.html#getLookasideSlotCount())
        pub fn getLookasideSlotCount<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/sqlite/SQLiteDatabase$OpenParams", java.flags == PUBLIC, .name == "getLookasideSlotCount", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/database/sqlite/SQLiteDatabase$OpenParams\0", "getLookasideSlotCount\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getOpenFlags](https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.OpenParams.html#getOpenFlags())
        pub fn getOpenFlags<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/sqlite/SQLiteDatabase$OpenParams", java.flags == PUBLIC, .name == "getOpenFlags", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/database/sqlite/SQLiteDatabase$OpenParams\0", "getOpenFlags\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCursorFactory](https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.OpenParams.html#getCursorFactory())
        ///
        /// Required features: "android-database-sqlite-SQLiteDatabase_CursorFactory"
        #[cfg(any(feature = "all", all(feature = "android-database-sqlite-SQLiteDatabase_CursorFactory")))]
        pub fn getCursorFactory<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::database::sqlite::SQLiteDatabase_CursorFactory>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/sqlite/SQLiteDatabase$OpenParams", java.flags == PUBLIC, .name == "getCursorFactory", .descriptor == "()Landroid/database/sqlite/SQLiteDatabase$CursorFactory;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/database/sqlite/SQLiteDatabase$OpenParams\0", "getCursorFactory\0", "()Landroid/database/sqlite/SQLiteDatabase$CursorFactory;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getErrorHandler](https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.OpenParams.html#getErrorHandler())
        ///
        /// Required features: "android-database-DatabaseErrorHandler"
        #[cfg(any(feature = "all", all(feature = "android-database-DatabaseErrorHandler")))]
        pub fn getErrorHandler<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::database::DatabaseErrorHandler>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/sqlite/SQLiteDatabase$OpenParams", java.flags == PUBLIC, .name == "getErrorHandler", .descriptor == "()Landroid/database/DatabaseErrorHandler;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/database/sqlite/SQLiteDatabase$OpenParams\0", "getErrorHandler\0", "()Landroid/database/DatabaseErrorHandler;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getIdleConnectionTimeout](https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.OpenParams.html#getIdleConnectionTimeout())
        pub fn getIdleConnectionTimeout<'env>(&'env self) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/sqlite/SQLiteDatabase$OpenParams", java.flags == PUBLIC, .name == "getIdleConnectionTimeout", .descriptor == "()J"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/database/sqlite/SQLiteDatabase$OpenParams\0", "getIdleConnectionTimeout\0", "()J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getJournalMode](https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.OpenParams.html#getJournalMode())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getJournalMode<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/sqlite/SQLiteDatabase$OpenParams", java.flags == PUBLIC, .name == "getJournalMode", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/database/sqlite/SQLiteDatabase$OpenParams\0", "getJournalMode\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSynchronousMode](https://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.OpenParams.html#getSynchronousMode())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getSynchronousMode<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/sqlite/SQLiteDatabase$OpenParams", java.flags == PUBLIC, .name == "getSynchronousMode", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/database/sqlite/SQLiteDatabase$OpenParams\0", "getSynchronousMode\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
