// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-database-CrossProcessCursor"))]
__jni_bindgen! {
    /// public interface [CrossProcessCursor](https://developer.android.com/reference/android/database/CrossProcessCursor.html)
    ///
    /// Required feature: android-database-CrossProcessCursor
    public interface CrossProcessCursor ("android/database/CrossProcessCursor") extends crate::java::lang::Object, implements crate::android::database::Cursor {

        /// [getWindow](https://developer.android.com/reference/android/database/CrossProcessCursor.html#getWindow())
        ///
        /// Required features: "android-database-CursorWindow"
        #[cfg(any(feature = "all", all(feature = "android-database-CursorWindow")))]
        pub fn getWindow<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::database::CursorWindow>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/CrossProcessCursor", java.flags == PUBLIC | ABSTRACT, .name == "getWindow", .descriptor == "()Landroid/database/CursorWindow;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/database/CrossProcessCursor\0", "getWindow\0", "()Landroid/database/CursorWindow;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [fillWindow](https://developer.android.com/reference/android/database/CrossProcessCursor.html#fillWindow(int,%20android.database.CursorWindow))
        ///
        /// Required features: "android-database-CursorWindow"
        #[cfg(any(feature = "all", all(feature = "android-database-CursorWindow")))]
        pub fn fillWindow<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::database::CursorWindow>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/CrossProcessCursor", java.flags == PUBLIC | ABSTRACT, .name == "fillWindow", .descriptor == "(ILandroid/database/CursorWindow;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/database/CrossProcessCursor\0", "fillWindow\0", "(ILandroid/database/CursorWindow;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onMove](https://developer.android.com/reference/android/database/CrossProcessCursor.html#onMove(int,%20int))
        pub fn onMove<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/CrossProcessCursor", java.flags == PUBLIC | ABSTRACT, .name == "onMove", .descriptor == "(II)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/database/CrossProcessCursor\0", "onMove\0", "(II)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
