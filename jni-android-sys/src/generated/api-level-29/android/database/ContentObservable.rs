// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-database-ContentObservable"))]
__jni_bindgen! {
    /// public class [ContentObservable](https://developer.android.com/reference/android/database/ContentObservable.html)
    ///
    /// Required feature: android-database-ContentObservable
    public class ContentObservable ("android/database/ContentObservable") extends crate::android::database::Observable {

        /// [ContentObservable](https://developer.android.com/reference/android/database/ContentObservable.html#ContentObservable())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::database::ContentObservable>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/ContentObservable", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/database/ContentObservable\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [registerObserver](https://developer.android.com/reference/android/database/ContentObservable.html#registerObserver(android.database.ContentObserver))
        ///
        /// Required features: "android-database-ContentObserver"
        #[cfg(any(feature = "all", all(feature = "android-database-ContentObserver")))]
        pub fn registerObserver_ContentObserver<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::database::ContentObserver>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/ContentObservable", java.flags == PUBLIC, .name == "registerObserver", .descriptor == "(Landroid/database/ContentObserver;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/database/ContentObservable\0", "registerObserver\0", "(Landroid/database/ContentObserver;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dispatchChange](https://developer.android.com/reference/android/database/ContentObservable.html#dispatchChange(boolean))
        #[deprecated] pub fn dispatchChange_boolean<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/ContentObservable", java.flags == PUBLIC, .name == "dispatchChange", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/database/ContentObservable\0", "dispatchChange\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dispatchChange](https://developer.android.com/reference/android/database/ContentObservable.html#dispatchChange(boolean,%20android.net.Uri))
        ///
        /// Required features: "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri")))]
        pub fn dispatchChange_boolean_Uri<'env>(&'env self, arg0: bool, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/ContentObservable", java.flags == PUBLIC, .name == "dispatchChange", .descriptor == "(ZLandroid/net/Uri;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/database/ContentObservable\0", "dispatchChange\0", "(ZLandroid/net/Uri;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [notifyChange](https://developer.android.com/reference/android/database/ContentObservable.html#notifyChange(boolean))
        #[deprecated] pub fn notifyChange<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/database/ContentObservable", java.flags == PUBLIC, .name == "notifyChange", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/database/ContentObservable\0", "notifyChange\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Bridge method - type erasure
        // /// [registerObserver](https://developer.android.com/reference/android/database/ContentObservable.html#registerObserver(java.lang.Object))
        // ///
        // /// Required features: "java-lang-Object"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        // pub fn registerObserver_Object<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/database/ContentObservable", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "registerObserver", .descriptor == "(Ljava/lang/Object;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/database/ContentObservable\0", "registerObserver\0", "(Ljava/lang/Object;)V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }
    }
}
