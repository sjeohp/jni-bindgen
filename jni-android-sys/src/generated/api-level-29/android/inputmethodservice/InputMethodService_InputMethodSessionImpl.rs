// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-inputmethodservice-InputMethodService_InputMethodSessionImpl"))]
__jni_bindgen! {
    /// public class [InputMethodService.InputMethodSessionImpl](https://developer.android.com/reference/android/inputmethodservice/InputMethodService.InputMethodSessionImpl.html)
    ///
    /// Required feature: android-inputmethodservice-InputMethodService_InputMethodSessionImpl
    public class InputMethodService_InputMethodSessionImpl ("android/inputmethodservice/InputMethodService$InputMethodSessionImpl") extends crate::android::inputmethodservice::AbstractInputMethodService_AbstractInputMethodSessionImpl {

        /// [InputMethodSessionImpl](https://developer.android.com/reference/android/inputmethodservice/InputMethodService.InputMethodSessionImpl.html#InputMethodSessionImpl(android.inputmethodservice.InputMethodService))
        ///
        /// Required features: "android-inputmethodservice-InputMethodService"
        #[cfg(any(feature = "all", all(feature = "android-inputmethodservice-InputMethodService")))]
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::inputmethodservice::InputMethodService>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::inputmethodservice::InputMethodService_InputMethodSessionImpl>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/inputmethodservice/InputMethodService$InputMethodSessionImpl", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/inputmethodservice/InputMethodService;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/inputmethodservice/InputMethodService$InputMethodSessionImpl\0", "<init>\0", "(Landroid/inputmethodservice/InputMethodService;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [finishInput](https://developer.android.com/reference/android/inputmethodservice/InputMethodService.InputMethodSessionImpl.html#finishInput())
        pub fn finishInput<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/inputmethodservice/InputMethodService$InputMethodSessionImpl", java.flags == PUBLIC, .name == "finishInput", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/inputmethodservice/InputMethodService$InputMethodSessionImpl\0", "finishInput\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [displayCompletions](https://developer.android.com/reference/android/inputmethodservice/InputMethodService.InputMethodSessionImpl.html#displayCompletions(android.view.inputmethod.CompletionInfo%5B%5D))
        ///
        /// Required features: "android-view-inputmethod-CompletionInfo"
        #[cfg(any(feature = "all", all(feature = "android-view-inputmethod-CompletionInfo")))]
        pub fn displayCompletions<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::android::view::inputmethod::CompletionInfo, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/inputmethodservice/InputMethodService$InputMethodSessionImpl", java.flags == PUBLIC, .name == "displayCompletions", .descriptor == "([Landroid/view/inputmethod/CompletionInfo;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/inputmethodservice/InputMethodService$InputMethodSessionImpl\0", "displayCompletions\0", "([Landroid/view/inputmethod/CompletionInfo;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateExtractedText](https://developer.android.com/reference/android/inputmethodservice/InputMethodService.InputMethodSessionImpl.html#updateExtractedText(int,%20android.view.inputmethod.ExtractedText))
        ///
        /// Required features: "android-view-inputmethod-ExtractedText"
        #[cfg(any(feature = "all", all(feature = "android-view-inputmethod-ExtractedText")))]
        pub fn updateExtractedText<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::inputmethod::ExtractedText>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/inputmethodservice/InputMethodService$InputMethodSessionImpl", java.flags == PUBLIC, .name == "updateExtractedText", .descriptor == "(ILandroid/view/inputmethod/ExtractedText;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/inputmethodservice/InputMethodService$InputMethodSessionImpl\0", "updateExtractedText\0", "(ILandroid/view/inputmethod/ExtractedText;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateSelection](https://developer.android.com/reference/android/inputmethodservice/InputMethodService.InputMethodSessionImpl.html#updateSelection(int,%20int,%20int,%20int,%20int,%20int))
        pub fn updateSelection<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: i32, arg4: i32, arg5: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/inputmethodservice/InputMethodService$InputMethodSessionImpl", java.flags == PUBLIC, .name == "updateSelection", .descriptor == "(IIIIII)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/inputmethodservice/InputMethodService$InputMethodSessionImpl\0", "updateSelection\0", "(IIIIII)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [viewClicked](https://developer.android.com/reference/android/inputmethodservice/InputMethodService.InputMethodSessionImpl.html#viewClicked(boolean))
        pub fn viewClicked<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/inputmethodservice/InputMethodService$InputMethodSessionImpl", java.flags == PUBLIC, .name == "viewClicked", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/inputmethodservice/InputMethodService$InputMethodSessionImpl\0", "viewClicked\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateCursor](https://developer.android.com/reference/android/inputmethodservice/InputMethodService.InputMethodSessionImpl.html#updateCursor(android.graphics.Rect))
        ///
        /// Required features: "android-graphics-Rect"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Rect")))]
        pub fn updateCursor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Rect>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/inputmethodservice/InputMethodService$InputMethodSessionImpl", java.flags == PUBLIC, .name == "updateCursor", .descriptor == "(Landroid/graphics/Rect;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/inputmethodservice/InputMethodService$InputMethodSessionImpl\0", "updateCursor\0", "(Landroid/graphics/Rect;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [appPrivateCommand](https://developer.android.com/reference/android/inputmethodservice/InputMethodService.InputMethodSessionImpl.html#appPrivateCommand(java.lang.String,%20android.os.Bundle))
        ///
        /// Required features: "android-os-Bundle", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-os-Bundle", feature = "java-lang-String")))]
        pub fn appPrivateCommand<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/inputmethodservice/InputMethodService$InputMethodSessionImpl", java.flags == PUBLIC, .name == "appPrivateCommand", .descriptor == "(Ljava/lang/String;Landroid/os/Bundle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/inputmethodservice/InputMethodService$InputMethodSessionImpl\0", "appPrivateCommand\0", "(Ljava/lang/String;Landroid/os/Bundle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toggleSoftInput](https://developer.android.com/reference/android/inputmethodservice/InputMethodService.InputMethodSessionImpl.html#toggleSoftInput(int,%20int))
        pub fn toggleSoftInput<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/inputmethodservice/InputMethodService$InputMethodSessionImpl", java.flags == PUBLIC, .name == "toggleSoftInput", .descriptor == "(II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/inputmethodservice/InputMethodService$InputMethodSessionImpl\0", "toggleSoftInput\0", "(II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateCursorAnchorInfo](https://developer.android.com/reference/android/inputmethodservice/InputMethodService.InputMethodSessionImpl.html#updateCursorAnchorInfo(android.view.inputmethod.CursorAnchorInfo))
        ///
        /// Required features: "android-view-inputmethod-CursorAnchorInfo"
        #[cfg(any(feature = "all", all(feature = "android-view-inputmethod-CursorAnchorInfo")))]
        pub fn updateCursorAnchorInfo<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::inputmethod::CursorAnchorInfo>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/inputmethodservice/InputMethodService$InputMethodSessionImpl", java.flags == PUBLIC, .name == "updateCursorAnchorInfo", .descriptor == "(Landroid/view/inputmethod/CursorAnchorInfo;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/inputmethodservice/InputMethodService$InputMethodSessionImpl\0", "updateCursorAnchorInfo\0", "(Landroid/view/inputmethod/CursorAnchorInfo;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public field
        // // Not emitting: Failed to mangle field name: this$N outer class pointer
        // pub fn get_"this$0"<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::inputmethodservice::InputMethodService>> { ... }
    }
}
