// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-inputmethodservice-InputMethodService_InputMethodImpl"))]
__jni_bindgen! {
    /// public class [InputMethodService.InputMethodImpl](https://developer.android.com/reference/android/inputmethodservice/InputMethodService.InputMethodImpl.html)
    ///
    /// Required feature: android-inputmethodservice-InputMethodService_InputMethodImpl
    public class InputMethodService_InputMethodImpl ("android/inputmethodservice/InputMethodService$InputMethodImpl") extends crate::android::inputmethodservice::AbstractInputMethodService_AbstractInputMethodImpl {

        /// [InputMethodImpl](https://developer.android.com/reference/android/inputmethodservice/InputMethodService.InputMethodImpl.html#InputMethodImpl(android.inputmethodservice.InputMethodService))
        ///
        /// Required features: "android-inputmethodservice-InputMethodService"
        #[cfg(any(feature = "all", all(feature = "android-inputmethodservice-InputMethodService")))]
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::inputmethodservice::InputMethodService>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::inputmethodservice::InputMethodService_InputMethodImpl>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/inputmethodservice/InputMethodService$InputMethodImpl", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/inputmethodservice/InputMethodService;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/inputmethodservice/InputMethodService$InputMethodImpl\0", "<init>\0", "(Landroid/inputmethodservice/InputMethodService;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [attachToken](https://developer.android.com/reference/android/inputmethodservice/InputMethodService.InputMethodImpl.html#attachToken(android.os.IBinder))
        ///
        /// Required features: "android-os-IBinder"
        #[cfg(any(feature = "all", all(feature = "android-os-IBinder")))]
        pub fn attachToken<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::IBinder>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/inputmethodservice/InputMethodService$InputMethodImpl", java.flags == PUBLIC, .name == "attachToken", .descriptor == "(Landroid/os/IBinder;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/inputmethodservice/InputMethodService$InputMethodImpl\0", "attachToken\0", "(Landroid/os/IBinder;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [bindInput](https://developer.android.com/reference/android/inputmethodservice/InputMethodService.InputMethodImpl.html#bindInput(android.view.inputmethod.InputBinding))
        ///
        /// Required features: "android-view-inputmethod-InputBinding"
        #[cfg(any(feature = "all", all(feature = "android-view-inputmethod-InputBinding")))]
        pub fn bindInput<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::inputmethod::InputBinding>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/inputmethodservice/InputMethodService$InputMethodImpl", java.flags == PUBLIC, .name == "bindInput", .descriptor == "(Landroid/view/inputmethod/InputBinding;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/inputmethodservice/InputMethodService$InputMethodImpl\0", "bindInput\0", "(Landroid/view/inputmethod/InputBinding;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unbindInput](https://developer.android.com/reference/android/inputmethodservice/InputMethodService.InputMethodImpl.html#unbindInput())
        pub fn unbindInput<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/inputmethodservice/InputMethodService$InputMethodImpl", java.flags == PUBLIC, .name == "unbindInput", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/inputmethodservice/InputMethodService$InputMethodImpl\0", "unbindInput\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [startInput](https://developer.android.com/reference/android/inputmethodservice/InputMethodService.InputMethodImpl.html#startInput(android.view.inputmethod.InputConnection,%20android.view.inputmethod.EditorInfo))
        ///
        /// Required features: "android-view-inputmethod-EditorInfo", "android-view-inputmethod-InputConnection"
        #[cfg(any(feature = "all", all(feature = "android-view-inputmethod-EditorInfo", feature = "android-view-inputmethod-InputConnection")))]
        pub fn startInput<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::inputmethod::InputConnection>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::inputmethod::EditorInfo>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/inputmethodservice/InputMethodService$InputMethodImpl", java.flags == PUBLIC, .name == "startInput", .descriptor == "(Landroid/view/inputmethod/InputConnection;Landroid/view/inputmethod/EditorInfo;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/inputmethodservice/InputMethodService$InputMethodImpl\0", "startInput\0", "(Landroid/view/inputmethod/InputConnection;Landroid/view/inputmethod/EditorInfo;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [restartInput](https://developer.android.com/reference/android/inputmethodservice/InputMethodService.InputMethodImpl.html#restartInput(android.view.inputmethod.InputConnection,%20android.view.inputmethod.EditorInfo))
        ///
        /// Required features: "android-view-inputmethod-EditorInfo", "android-view-inputmethod-InputConnection"
        #[cfg(any(feature = "all", all(feature = "android-view-inputmethod-EditorInfo", feature = "android-view-inputmethod-InputConnection")))]
        pub fn restartInput<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::inputmethod::InputConnection>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::inputmethod::EditorInfo>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/inputmethodservice/InputMethodService$InputMethodImpl", java.flags == PUBLIC, .name == "restartInput", .descriptor == "(Landroid/view/inputmethod/InputConnection;Landroid/view/inputmethod/EditorInfo;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/inputmethodservice/InputMethodService$InputMethodImpl\0", "restartInput\0", "(Landroid/view/inputmethod/InputConnection;Landroid/view/inputmethod/EditorInfo;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hideSoftInput](https://developer.android.com/reference/android/inputmethodservice/InputMethodService.InputMethodImpl.html#hideSoftInput(int,%20android.os.ResultReceiver))
        ///
        /// Required features: "android-os-ResultReceiver"
        #[cfg(any(feature = "all", all(feature = "android-os-ResultReceiver")))]
        pub fn hideSoftInput<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::ResultReceiver>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/inputmethodservice/InputMethodService$InputMethodImpl", java.flags == PUBLIC, .name == "hideSoftInput", .descriptor == "(ILandroid/os/ResultReceiver;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/inputmethodservice/InputMethodService$InputMethodImpl\0", "hideSoftInput\0", "(ILandroid/os/ResultReceiver;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [showSoftInput](https://developer.android.com/reference/android/inputmethodservice/InputMethodService.InputMethodImpl.html#showSoftInput(int,%20android.os.ResultReceiver))
        ///
        /// Required features: "android-os-ResultReceiver"
        #[cfg(any(feature = "all", all(feature = "android-os-ResultReceiver")))]
        pub fn showSoftInput<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::ResultReceiver>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/inputmethodservice/InputMethodService$InputMethodImpl", java.flags == PUBLIC, .name == "showSoftInput", .descriptor == "(ILandroid/os/ResultReceiver;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/inputmethodservice/InputMethodService$InputMethodImpl\0", "showSoftInput\0", "(ILandroid/os/ResultReceiver;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [changeInputMethodSubtype](https://developer.android.com/reference/android/inputmethodservice/InputMethodService.InputMethodImpl.html#changeInputMethodSubtype(android.view.inputmethod.InputMethodSubtype))
        ///
        /// Required features: "android-view-inputmethod-InputMethodSubtype"
        #[cfg(any(feature = "all", all(feature = "android-view-inputmethod-InputMethodSubtype")))]
        pub fn changeInputMethodSubtype<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::inputmethod::InputMethodSubtype>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/inputmethodservice/InputMethodService$InputMethodImpl", java.flags == PUBLIC, .name == "changeInputMethodSubtype", .descriptor == "(Landroid/view/inputmethod/InputMethodSubtype;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/inputmethodservice/InputMethodService$InputMethodImpl\0", "changeInputMethodSubtype\0", "(Landroid/view/inputmethod/InputMethodSubtype;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public field
        // // Not emitting: Failed to mangle field name: this$N outer class pointer
        // pub fn get_"this$0"<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::inputmethodservice::InputMethodService>> { ... }
    }
}
