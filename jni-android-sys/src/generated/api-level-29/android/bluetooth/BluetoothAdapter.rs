// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-bluetooth-BluetoothAdapter"))]
__jni_bindgen! {
    /// public final class [BluetoothAdapter](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html)
    ///
    /// Required feature: android-bluetooth-BluetoothAdapter
    public final class BluetoothAdapter ("android/bluetooth/BluetoothAdapter") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [BluetoothAdapter](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#BluetoothAdapter())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::bluetooth::BluetoothAdapter>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/bluetooth/BluetoothAdapter", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/BluetoothAdapter\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getDefaultAdapter](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getDefaultAdapter())
        ///
        /// Required features: "android-bluetooth-BluetoothAdapter"
        #[cfg(any(feature = "all", all(feature = "android-bluetooth-BluetoothAdapter")))]
        pub fn getDefaultAdapter<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::bluetooth::BluetoothAdapter>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC | STATIC | SYNCRONIZED, .name == "getDefaultAdapter", .descriptor == "()Landroid/bluetooth/BluetoothAdapter;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/bluetooth/BluetoothAdapter\0", "getDefaultAdapter\0", "()Landroid/bluetooth/BluetoothAdapter;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRemoteDevice](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getRemoteDevice(java.lang.String))
        ///
        /// Required features: "android-bluetooth-BluetoothDevice", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-bluetooth-BluetoothDevice", feature = "java-lang-String")))]
        pub fn getRemoteDevice_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::bluetooth::BluetoothDevice>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "getRemoteDevice", .descriptor == "(Ljava/lang/String;)Landroid/bluetooth/BluetoothDevice;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/BluetoothAdapter\0", "getRemoteDevice\0", "(Ljava/lang/String;)Landroid/bluetooth/BluetoothDevice;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRemoteDevice](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getRemoteDevice(byte%5B%5D))
        ///
        /// Required features: "android-bluetooth-BluetoothDevice"
        #[cfg(any(feature = "all", all(feature = "android-bluetooth-BluetoothDevice")))]
        pub fn getRemoteDevice_byte_array<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::bluetooth::BluetoothDevice>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "getRemoteDevice", .descriptor == "([B)Landroid/bluetooth/BluetoothDevice;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/BluetoothAdapter\0", "getRemoteDevice\0", "([B)Landroid/bluetooth/BluetoothDevice;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getBluetoothLeAdvertiser](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getBluetoothLeAdvertiser())
        ///
        /// Required features: "android-bluetooth-le-BluetoothLeAdvertiser"
        #[cfg(any(feature = "all", all(feature = "android-bluetooth-le-BluetoothLeAdvertiser")))]
        pub fn getBluetoothLeAdvertiser<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::bluetooth::le::BluetoothLeAdvertiser>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "getBluetoothLeAdvertiser", .descriptor == "()Landroid/bluetooth/le/BluetoothLeAdvertiser;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/BluetoothAdapter\0", "getBluetoothLeAdvertiser\0", "()Landroid/bluetooth/le/BluetoothLeAdvertiser;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getBluetoothLeScanner](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getBluetoothLeScanner())
        ///
        /// Required features: "android-bluetooth-le-BluetoothLeScanner"
        #[cfg(any(feature = "all", all(feature = "android-bluetooth-le-BluetoothLeScanner")))]
        pub fn getBluetoothLeScanner<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::bluetooth::le::BluetoothLeScanner>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "getBluetoothLeScanner", .descriptor == "()Landroid/bluetooth/le/BluetoothLeScanner;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/BluetoothAdapter\0", "getBluetoothLeScanner\0", "()Landroid/bluetooth/le/BluetoothLeScanner;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isEnabled](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#isEnabled())
        pub fn isEnabled<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "isEnabled", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/BluetoothAdapter\0", "isEnabled\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getState](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getState())
        pub fn getState<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "getState", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/BluetoothAdapter\0", "getState\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [enable](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#enable())
        pub fn enable<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "enable", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/BluetoothAdapter\0", "enable\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [disable](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#disable())
        pub fn disable<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "disable", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/BluetoothAdapter\0", "disable\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAddress](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getAddress())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getAddress<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "getAddress", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/BluetoothAdapter\0", "getAddress\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getName](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getName())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getName<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "getName", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/BluetoothAdapter\0", "getName\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setName](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#setName(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn setName<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "setName", .descriptor == "(Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/BluetoothAdapter\0", "setName\0", "(Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getScanMode](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getScanMode())
        pub fn getScanMode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "getScanMode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/BluetoothAdapter\0", "getScanMode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [startDiscovery](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#startDiscovery())
        pub fn startDiscovery<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "startDiscovery", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/BluetoothAdapter\0", "startDiscovery\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [cancelDiscovery](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#cancelDiscovery())
        pub fn cancelDiscovery<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "cancelDiscovery", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/BluetoothAdapter\0", "cancelDiscovery\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isDiscovering](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#isDiscovering())
        pub fn isDiscovering<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "isDiscovering", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/BluetoothAdapter\0", "isDiscovering\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isMultipleAdvertisementSupported](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#isMultipleAdvertisementSupported())
        pub fn isMultipleAdvertisementSupported<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "isMultipleAdvertisementSupported", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/BluetoothAdapter\0", "isMultipleAdvertisementSupported\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isOffloadedFilteringSupported](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#isOffloadedFilteringSupported())
        pub fn isOffloadedFilteringSupported<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "isOffloadedFilteringSupported", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/BluetoothAdapter\0", "isOffloadedFilteringSupported\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isOffloadedScanBatchingSupported](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#isOffloadedScanBatchingSupported())
        pub fn isOffloadedScanBatchingSupported<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "isOffloadedScanBatchingSupported", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/BluetoothAdapter\0", "isOffloadedScanBatchingSupported\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isLe2MPhySupported](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#isLe2MPhySupported())
        pub fn isLe2MPhySupported<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "isLe2MPhySupported", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/BluetoothAdapter\0", "isLe2MPhySupported\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isLeCodedPhySupported](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#isLeCodedPhySupported())
        pub fn isLeCodedPhySupported<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "isLeCodedPhySupported", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/BluetoothAdapter\0", "isLeCodedPhySupported\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isLeExtendedAdvertisingSupported](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#isLeExtendedAdvertisingSupported())
        pub fn isLeExtendedAdvertisingSupported<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "isLeExtendedAdvertisingSupported", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/BluetoothAdapter\0", "isLeExtendedAdvertisingSupported\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isLePeriodicAdvertisingSupported](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#isLePeriodicAdvertisingSupported())
        pub fn isLePeriodicAdvertisingSupported<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "isLePeriodicAdvertisingSupported", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/BluetoothAdapter\0", "isLePeriodicAdvertisingSupported\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLeMaximumAdvertisingDataLength](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getLeMaximumAdvertisingDataLength())
        pub fn getLeMaximumAdvertisingDataLength<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "getLeMaximumAdvertisingDataLength", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/BluetoothAdapter\0", "getLeMaximumAdvertisingDataLength\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getBondedDevices](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getBondedDevices())
        ///
        /// Required features: "java-util-Set"
        #[cfg(any(feature = "all", all(feature = "java-util-Set")))]
        pub fn getBondedDevices<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Set>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "getBondedDevices", .descriptor == "()Ljava/util/Set;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/BluetoothAdapter\0", "getBondedDevices\0", "()Ljava/util/Set;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getProfileConnectionState](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getProfileConnectionState(int))
        pub fn getProfileConnectionState<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "getProfileConnectionState", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/BluetoothAdapter\0", "getProfileConnectionState\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [listenUsingRfcommWithServiceRecord](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#listenUsingRfcommWithServiceRecord(java.lang.String,%20java.util.UUID))
        ///
        /// Required features: "android-bluetooth-BluetoothServerSocket", "java-lang-String", "java-util-UUID"
        #[cfg(any(feature = "all", all(feature = "android-bluetooth-BluetoothServerSocket", feature = "java-lang-String", feature = "java-util-UUID")))]
        pub fn listenUsingRfcommWithServiceRecord<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::UUID>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::bluetooth::BluetoothServerSocket>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "listenUsingRfcommWithServiceRecord", .descriptor == "(Ljava/lang/String;Ljava/util/UUID;)Landroid/bluetooth/BluetoothServerSocket;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/BluetoothAdapter\0", "listenUsingRfcommWithServiceRecord\0", "(Ljava/lang/String;Ljava/util/UUID;)Landroid/bluetooth/BluetoothServerSocket;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [listenUsingInsecureRfcommWithServiceRecord](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#listenUsingInsecureRfcommWithServiceRecord(java.lang.String,%20java.util.UUID))
        ///
        /// Required features: "android-bluetooth-BluetoothServerSocket", "java-lang-String", "java-util-UUID"
        #[cfg(any(feature = "all", all(feature = "android-bluetooth-BluetoothServerSocket", feature = "java-lang-String", feature = "java-util-UUID")))]
        pub fn listenUsingInsecureRfcommWithServiceRecord<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::UUID>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::bluetooth::BluetoothServerSocket>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "listenUsingInsecureRfcommWithServiceRecord", .descriptor == "(Ljava/lang/String;Ljava/util/UUID;)Landroid/bluetooth/BluetoothServerSocket;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/BluetoothAdapter\0", "listenUsingInsecureRfcommWithServiceRecord\0", "(Ljava/lang/String;Ljava/util/UUID;)Landroid/bluetooth/BluetoothServerSocket;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getProfileProxy](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#getProfileProxy(android.content.Context,%20android.bluetooth.BluetoothProfile.ServiceListener,%20int))
        ///
        /// Required features: "android-bluetooth-BluetoothProfile_ServiceListener", "android-content-Context"
        #[cfg(any(feature = "all", all(feature = "android-bluetooth-BluetoothProfile_ServiceListener", feature = "android-content-Context")))]
        pub fn getProfileProxy<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::bluetooth::BluetoothProfile_ServiceListener>>, arg2: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "getProfileProxy", .descriptor == "(Landroid/content/Context;Landroid/bluetooth/BluetoothProfile$ServiceListener;I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/BluetoothAdapter\0", "getProfileProxy\0", "(Landroid/content/Context;Landroid/bluetooth/BluetoothProfile$ServiceListener;I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [closeProfileProxy](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#closeProfileProxy(int,%20android.bluetooth.BluetoothProfile))
        ///
        /// Required features: "android-bluetooth-BluetoothProfile"
        #[cfg(any(feature = "all", all(feature = "android-bluetooth-BluetoothProfile")))]
        pub fn closeProfileProxy<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::bluetooth::BluetoothProfile>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "closeProfileProxy", .descriptor == "(ILandroid/bluetooth/BluetoothProfile;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/BluetoothAdapter\0", "closeProfileProxy\0", "(ILandroid/bluetooth/BluetoothProfile;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [finalize](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#finalize())
        // fn finalize<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PROTECTED, .name == "finalize", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/BluetoothAdapter\0", "finalize\0", "()V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [checkBluetoothAddress](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#checkBluetoothAddress(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn checkBluetoothAddress<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC | STATIC, .name == "checkBluetoothAddress", .descriptor == "(Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/bluetooth/BluetoothAdapter\0", "checkBluetoothAddress\0", "(Ljava/lang/String;)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [startLeScan](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#startLeScan(android.bluetooth.BluetoothAdapter.LeScanCallback))
        ///
        /// Required features: "android-bluetooth-BluetoothAdapter_LeScanCallback"
        #[cfg(any(feature = "all", all(feature = "android-bluetooth-BluetoothAdapter_LeScanCallback")))]
        #[deprecated] pub fn startLeScan_LeScanCallback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::bluetooth::BluetoothAdapter_LeScanCallback>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "startLeScan", .descriptor == "(Landroid/bluetooth/BluetoothAdapter$LeScanCallback;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/BluetoothAdapter\0", "startLeScan\0", "(Landroid/bluetooth/BluetoothAdapter$LeScanCallback;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [startLeScan](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#startLeScan(java.util.UUID%5B%5D,%20android.bluetooth.BluetoothAdapter.LeScanCallback))
        ///
        /// Required features: "android-bluetooth-BluetoothAdapter_LeScanCallback", "java-util-UUID"
        #[cfg(any(feature = "all", all(feature = "android-bluetooth-BluetoothAdapter_LeScanCallback", feature = "java-util-UUID")))]
        #[deprecated] pub fn startLeScan_UUID_array_LeScanCallback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::util::UUID, crate::java::lang::Throwable>>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::bluetooth::BluetoothAdapter_LeScanCallback>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "startLeScan", .descriptor == "([Ljava/util/UUID;Landroid/bluetooth/BluetoothAdapter$LeScanCallback;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/BluetoothAdapter\0", "startLeScan\0", "([Ljava/util/UUID;Landroid/bluetooth/BluetoothAdapter$LeScanCallback;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [stopLeScan](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#stopLeScan(android.bluetooth.BluetoothAdapter.LeScanCallback))
        ///
        /// Required features: "android-bluetooth-BluetoothAdapter_LeScanCallback"
        #[cfg(any(feature = "all", all(feature = "android-bluetooth-BluetoothAdapter_LeScanCallback")))]
        #[deprecated] pub fn stopLeScan<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::bluetooth::BluetoothAdapter_LeScanCallback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "stopLeScan", .descriptor == "(Landroid/bluetooth/BluetoothAdapter$LeScanCallback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/BluetoothAdapter\0", "stopLeScan\0", "(Landroid/bluetooth/BluetoothAdapter$LeScanCallback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [listenUsingL2capChannel](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#listenUsingL2capChannel())
        ///
        /// Required features: "android-bluetooth-BluetoothServerSocket"
        #[cfg(any(feature = "all", all(feature = "android-bluetooth-BluetoothServerSocket")))]
        pub fn listenUsingL2capChannel<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::bluetooth::BluetoothServerSocket>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "listenUsingL2capChannel", .descriptor == "()Landroid/bluetooth/BluetoothServerSocket;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/BluetoothAdapter\0", "listenUsingL2capChannel\0", "()Landroid/bluetooth/BluetoothServerSocket;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [listenUsingInsecureL2capChannel](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#listenUsingInsecureL2capChannel())
        ///
        /// Required features: "android-bluetooth-BluetoothServerSocket"
        #[cfg(any(feature = "all", all(feature = "android-bluetooth-BluetoothServerSocket")))]
        pub fn listenUsingInsecureL2capChannel<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::bluetooth::BluetoothServerSocket>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/BluetoothAdapter", java.flags == PUBLIC, .name == "listenUsingInsecureL2capChannel", .descriptor == "()Landroid/bluetooth/BluetoothServerSocket;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/BluetoothAdapter\0", "listenUsingInsecureL2capChannel\0", "()Landroid/bluetooth/BluetoothServerSocket;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [ACTION_CONNECTION_STATE_CHANGED](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#ACTION_CONNECTION_STATE_CHANGED)
        pub const ACTION_CONNECTION_STATE_CHANGED : &'static str = "android.bluetooth.adapter.action.CONNECTION_STATE_CHANGED";

        /// public static final [ACTION_DISCOVERY_FINISHED](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#ACTION_DISCOVERY_FINISHED)
        pub const ACTION_DISCOVERY_FINISHED : &'static str = "android.bluetooth.adapter.action.DISCOVERY_FINISHED";

        /// public static final [ACTION_DISCOVERY_STARTED](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#ACTION_DISCOVERY_STARTED)
        pub const ACTION_DISCOVERY_STARTED : &'static str = "android.bluetooth.adapter.action.DISCOVERY_STARTED";

        /// public static final [ACTION_LOCAL_NAME_CHANGED](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#ACTION_LOCAL_NAME_CHANGED)
        pub const ACTION_LOCAL_NAME_CHANGED : &'static str = "android.bluetooth.adapter.action.LOCAL_NAME_CHANGED";

        /// public static final [ACTION_REQUEST_DISCOVERABLE](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#ACTION_REQUEST_DISCOVERABLE)
        pub const ACTION_REQUEST_DISCOVERABLE : &'static str = "android.bluetooth.adapter.action.REQUEST_DISCOVERABLE";

        /// public static final [ACTION_REQUEST_ENABLE](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#ACTION_REQUEST_ENABLE)
        pub const ACTION_REQUEST_ENABLE : &'static str = "android.bluetooth.adapter.action.REQUEST_ENABLE";

        /// public static final [ACTION_SCAN_MODE_CHANGED](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#ACTION_SCAN_MODE_CHANGED)
        pub const ACTION_SCAN_MODE_CHANGED : &'static str = "android.bluetooth.adapter.action.SCAN_MODE_CHANGED";

        /// public static final [ACTION_STATE_CHANGED](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#ACTION_STATE_CHANGED)
        pub const ACTION_STATE_CHANGED : &'static str = "android.bluetooth.adapter.action.STATE_CHANGED";

        /// public static final [ERROR](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#ERROR)
        pub const ERROR : i32 = -2147483648;

        /// public static final [EXTRA_CONNECTION_STATE](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#EXTRA_CONNECTION_STATE)
        pub const EXTRA_CONNECTION_STATE : &'static str = "android.bluetooth.adapter.extra.CONNECTION_STATE";

        /// public static final [EXTRA_DISCOVERABLE_DURATION](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#EXTRA_DISCOVERABLE_DURATION)
        pub const EXTRA_DISCOVERABLE_DURATION : &'static str = "android.bluetooth.adapter.extra.DISCOVERABLE_DURATION";

        /// public static final [EXTRA_LOCAL_NAME](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#EXTRA_LOCAL_NAME)
        pub const EXTRA_LOCAL_NAME : &'static str = "android.bluetooth.adapter.extra.LOCAL_NAME";

        /// public static final [EXTRA_PREVIOUS_CONNECTION_STATE](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#EXTRA_PREVIOUS_CONNECTION_STATE)
        pub const EXTRA_PREVIOUS_CONNECTION_STATE : &'static str = "android.bluetooth.adapter.extra.PREVIOUS_CONNECTION_STATE";

        /// public static final [EXTRA_PREVIOUS_SCAN_MODE](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#EXTRA_PREVIOUS_SCAN_MODE)
        pub const EXTRA_PREVIOUS_SCAN_MODE : &'static str = "android.bluetooth.adapter.extra.PREVIOUS_SCAN_MODE";

        /// public static final [EXTRA_PREVIOUS_STATE](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#EXTRA_PREVIOUS_STATE)
        pub const EXTRA_PREVIOUS_STATE : &'static str = "android.bluetooth.adapter.extra.PREVIOUS_STATE";

        /// public static final [EXTRA_SCAN_MODE](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#EXTRA_SCAN_MODE)
        pub const EXTRA_SCAN_MODE : &'static str = "android.bluetooth.adapter.extra.SCAN_MODE";

        /// public static final [EXTRA_STATE](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#EXTRA_STATE)
        pub const EXTRA_STATE : &'static str = "android.bluetooth.adapter.extra.STATE";

        /// public static final [SCAN_MODE_CONNECTABLE](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#SCAN_MODE_CONNECTABLE)
        pub const SCAN_MODE_CONNECTABLE : i32 = 21;

        /// public static final [SCAN_MODE_CONNECTABLE_DISCOVERABLE](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#SCAN_MODE_CONNECTABLE_DISCOVERABLE)
        pub const SCAN_MODE_CONNECTABLE_DISCOVERABLE : i32 = 23;

        /// public static final [SCAN_MODE_NONE](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#SCAN_MODE_NONE)
        pub const SCAN_MODE_NONE : i32 = 20;

        /// public static final [STATE_CONNECTED](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#STATE_CONNECTED)
        pub const STATE_CONNECTED : i32 = 2;

        /// public static final [STATE_CONNECTING](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#STATE_CONNECTING)
        pub const STATE_CONNECTING : i32 = 1;

        /// public static final [STATE_DISCONNECTED](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#STATE_DISCONNECTED)
        pub const STATE_DISCONNECTED : i32 = 0;

        /// public static final [STATE_DISCONNECTING](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#STATE_DISCONNECTING)
        pub const STATE_DISCONNECTING : i32 = 3;

        /// public static final [STATE_OFF](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#STATE_OFF)
        pub const STATE_OFF : i32 = 10;

        /// public static final [STATE_ON](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#STATE_ON)
        pub const STATE_ON : i32 = 12;

        /// public static final [STATE_TURNING_OFF](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#STATE_TURNING_OFF)
        pub const STATE_TURNING_OFF : i32 = 13;

        /// public static final [STATE_TURNING_ON](https://developer.android.com/reference/android/bluetooth/BluetoothAdapter.html#STATE_TURNING_ON)
        pub const STATE_TURNING_ON : i32 = 11;
    }
}
