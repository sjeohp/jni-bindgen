// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-bluetooth-le-ScanSettings_Builder"))]
__jni_bindgen! {
    /// public final class [ScanSettings.Builder](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.Builder.html)
    ///
    /// Required feature: android-bluetooth-le-ScanSettings_Builder
    public final class ScanSettings_Builder ("android/bluetooth/le/ScanSettings$Builder") extends crate::java::lang::Object {

        /// [Builder](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.Builder.html#Builder())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::bluetooth::le::ScanSettings_Builder>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/le/ScanSettings$Builder", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/le/ScanSettings$Builder\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setScanMode](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.Builder.html#setScanMode(int))
        ///
        /// Required features: "android-bluetooth-le-ScanSettings_Builder"
        #[cfg(any(feature = "all", all(feature = "android-bluetooth-le-ScanSettings_Builder")))]
        pub fn setScanMode<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::bluetooth::le::ScanSettings_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/le/ScanSettings$Builder", java.flags == PUBLIC, .name == "setScanMode", .descriptor == "(I)Landroid/bluetooth/le/ScanSettings$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/le/ScanSettings$Builder\0", "setScanMode\0", "(I)Landroid/bluetooth/le/ScanSettings$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setCallbackType](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.Builder.html#setCallbackType(int))
        ///
        /// Required features: "android-bluetooth-le-ScanSettings_Builder"
        #[cfg(any(feature = "all", all(feature = "android-bluetooth-le-ScanSettings_Builder")))]
        pub fn setCallbackType<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::bluetooth::le::ScanSettings_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/le/ScanSettings$Builder", java.flags == PUBLIC, .name == "setCallbackType", .descriptor == "(I)Landroid/bluetooth/le/ScanSettings$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/le/ScanSettings$Builder\0", "setCallbackType\0", "(I)Landroid/bluetooth/le/ScanSettings$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setReportDelay](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.Builder.html#setReportDelay(long))
        ///
        /// Required features: "android-bluetooth-le-ScanSettings_Builder"
        #[cfg(any(feature = "all", all(feature = "android-bluetooth-le-ScanSettings_Builder")))]
        pub fn setReportDelay<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::bluetooth::le::ScanSettings_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/le/ScanSettings$Builder", java.flags == PUBLIC, .name == "setReportDelay", .descriptor == "(J)Landroid/bluetooth/le/ScanSettings$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/le/ScanSettings$Builder\0", "setReportDelay\0", "(J)Landroid/bluetooth/le/ScanSettings$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setNumOfMatches](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.Builder.html#setNumOfMatches(int))
        ///
        /// Required features: "android-bluetooth-le-ScanSettings_Builder"
        #[cfg(any(feature = "all", all(feature = "android-bluetooth-le-ScanSettings_Builder")))]
        pub fn setNumOfMatches<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::bluetooth::le::ScanSettings_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/le/ScanSettings$Builder", java.flags == PUBLIC, .name == "setNumOfMatches", .descriptor == "(I)Landroid/bluetooth/le/ScanSettings$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/le/ScanSettings$Builder\0", "setNumOfMatches\0", "(I)Landroid/bluetooth/le/ScanSettings$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setMatchMode](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.Builder.html#setMatchMode(int))
        ///
        /// Required features: "android-bluetooth-le-ScanSettings_Builder"
        #[cfg(any(feature = "all", all(feature = "android-bluetooth-le-ScanSettings_Builder")))]
        pub fn setMatchMode<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::bluetooth::le::ScanSettings_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/le/ScanSettings$Builder", java.flags == PUBLIC, .name == "setMatchMode", .descriptor == "(I)Landroid/bluetooth/le/ScanSettings$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/le/ScanSettings$Builder\0", "setMatchMode\0", "(I)Landroid/bluetooth/le/ScanSettings$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setLegacy](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.Builder.html#setLegacy(boolean))
        ///
        /// Required features: "android-bluetooth-le-ScanSettings_Builder"
        #[cfg(any(feature = "all", all(feature = "android-bluetooth-le-ScanSettings_Builder")))]
        pub fn setLegacy<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::bluetooth::le::ScanSettings_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/le/ScanSettings$Builder", java.flags == PUBLIC, .name == "setLegacy", .descriptor == "(Z)Landroid/bluetooth/le/ScanSettings$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/le/ScanSettings$Builder\0", "setLegacy\0", "(Z)Landroid/bluetooth/le/ScanSettings$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPhy](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.Builder.html#setPhy(int))
        ///
        /// Required features: "android-bluetooth-le-ScanSettings_Builder"
        #[cfg(any(feature = "all", all(feature = "android-bluetooth-le-ScanSettings_Builder")))]
        pub fn setPhy<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::bluetooth::le::ScanSettings_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/le/ScanSettings$Builder", java.flags == PUBLIC, .name == "setPhy", .descriptor == "(I)Landroid/bluetooth/le/ScanSettings$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/le/ScanSettings$Builder\0", "setPhy\0", "(I)Landroid/bluetooth/le/ScanSettings$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [build](https://developer.android.com/reference/android/bluetooth/le/ScanSettings.Builder.html#build())
        ///
        /// Required features: "android-bluetooth-le-ScanSettings"
        #[cfg(any(feature = "all", all(feature = "android-bluetooth-le-ScanSettings")))]
        pub fn build<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::bluetooth::le::ScanSettings>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/le/ScanSettings$Builder", java.flags == PUBLIC, .name == "build", .descriptor == "()Landroid/bluetooth/le/ScanSettings;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/le/ScanSettings$Builder\0", "build\0", "()Landroid/bluetooth/le/ScanSettings;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
