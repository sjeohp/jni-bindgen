// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-bluetooth-le-ScanFilter_Builder"))]
__jni_bindgen! {
    /// public final class [ScanFilter.Builder](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.Builder.html)
    ///
    /// Required feature: android-bluetooth-le-ScanFilter_Builder
    public final class ScanFilter_Builder ("android/bluetooth/le/ScanFilter$Builder") extends crate::java::lang::Object {

        /// [Builder](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.Builder.html#Builder())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::bluetooth::le::ScanFilter_Builder>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/le/ScanFilter$Builder", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/le/ScanFilter$Builder\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDeviceName](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.Builder.html#setDeviceName(java.lang.String))
        ///
        /// Required features: "android-bluetooth-le-ScanFilter_Builder", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-bluetooth-le-ScanFilter_Builder", feature = "java-lang-String")))]
        pub fn setDeviceName<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::bluetooth::le::ScanFilter_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/le/ScanFilter$Builder", java.flags == PUBLIC, .name == "setDeviceName", .descriptor == "(Ljava/lang/String;)Landroid/bluetooth/le/ScanFilter$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/le/ScanFilter$Builder\0", "setDeviceName\0", "(Ljava/lang/String;)Landroid/bluetooth/le/ScanFilter$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDeviceAddress](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.Builder.html#setDeviceAddress(java.lang.String))
        ///
        /// Required features: "android-bluetooth-le-ScanFilter_Builder", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-bluetooth-le-ScanFilter_Builder", feature = "java-lang-String")))]
        pub fn setDeviceAddress<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::bluetooth::le::ScanFilter_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/le/ScanFilter$Builder", java.flags == PUBLIC, .name == "setDeviceAddress", .descriptor == "(Ljava/lang/String;)Landroid/bluetooth/le/ScanFilter$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/le/ScanFilter$Builder\0", "setDeviceAddress\0", "(Ljava/lang/String;)Landroid/bluetooth/le/ScanFilter$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setServiceUuid](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.Builder.html#setServiceUuid(android.os.ParcelUuid))
        ///
        /// Required features: "android-bluetooth-le-ScanFilter_Builder", "android-os-ParcelUuid"
        #[cfg(any(feature = "all", all(feature = "android-bluetooth-le-ScanFilter_Builder", feature = "android-os-ParcelUuid")))]
        pub fn setServiceUuid_ParcelUuid<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::ParcelUuid>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::bluetooth::le::ScanFilter_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/le/ScanFilter$Builder", java.flags == PUBLIC, .name == "setServiceUuid", .descriptor == "(Landroid/os/ParcelUuid;)Landroid/bluetooth/le/ScanFilter$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/le/ScanFilter$Builder\0", "setServiceUuid\0", "(Landroid/os/ParcelUuid;)Landroid/bluetooth/le/ScanFilter$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setServiceUuid](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.Builder.html#setServiceUuid(android.os.ParcelUuid,%20android.os.ParcelUuid))
        ///
        /// Required features: "android-bluetooth-le-ScanFilter_Builder", "android-os-ParcelUuid"
        #[cfg(any(feature = "all", all(feature = "android-bluetooth-le-ScanFilter_Builder", feature = "android-os-ParcelUuid")))]
        pub fn setServiceUuid_ParcelUuid_ParcelUuid<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::ParcelUuid>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::ParcelUuid>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::bluetooth::le::ScanFilter_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/le/ScanFilter$Builder", java.flags == PUBLIC, .name == "setServiceUuid", .descriptor == "(Landroid/os/ParcelUuid;Landroid/os/ParcelUuid;)Landroid/bluetooth/le/ScanFilter$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/le/ScanFilter$Builder\0", "setServiceUuid\0", "(Landroid/os/ParcelUuid;Landroid/os/ParcelUuid;)Landroid/bluetooth/le/ScanFilter$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setServiceSolicitationUuid](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.Builder.html#setServiceSolicitationUuid(android.os.ParcelUuid))
        ///
        /// Required features: "android-bluetooth-le-ScanFilter_Builder", "android-os-ParcelUuid"
        #[cfg(any(feature = "all", all(feature = "android-bluetooth-le-ScanFilter_Builder", feature = "android-os-ParcelUuid")))]
        pub fn setServiceSolicitationUuid_ParcelUuid<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::ParcelUuid>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::bluetooth::le::ScanFilter_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/le/ScanFilter$Builder", java.flags == PUBLIC, .name == "setServiceSolicitationUuid", .descriptor == "(Landroid/os/ParcelUuid;)Landroid/bluetooth/le/ScanFilter$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/le/ScanFilter$Builder\0", "setServiceSolicitationUuid\0", "(Landroid/os/ParcelUuid;)Landroid/bluetooth/le/ScanFilter$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setServiceSolicitationUuid](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.Builder.html#setServiceSolicitationUuid(android.os.ParcelUuid,%20android.os.ParcelUuid))
        ///
        /// Required features: "android-bluetooth-le-ScanFilter_Builder", "android-os-ParcelUuid"
        #[cfg(any(feature = "all", all(feature = "android-bluetooth-le-ScanFilter_Builder", feature = "android-os-ParcelUuid")))]
        pub fn setServiceSolicitationUuid_ParcelUuid_ParcelUuid<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::ParcelUuid>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::ParcelUuid>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::bluetooth::le::ScanFilter_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/le/ScanFilter$Builder", java.flags == PUBLIC, .name == "setServiceSolicitationUuid", .descriptor == "(Landroid/os/ParcelUuid;Landroid/os/ParcelUuid;)Landroid/bluetooth/le/ScanFilter$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/le/ScanFilter$Builder\0", "setServiceSolicitationUuid\0", "(Landroid/os/ParcelUuid;Landroid/os/ParcelUuid;)Landroid/bluetooth/le/ScanFilter$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setServiceData](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.Builder.html#setServiceData(android.os.ParcelUuid,%20byte%5B%5D))
        ///
        /// Required features: "android-bluetooth-le-ScanFilter_Builder", "android-os-ParcelUuid"
        #[cfg(any(feature = "all", all(feature = "android-bluetooth-le-ScanFilter_Builder", feature = "android-os-ParcelUuid")))]
        pub fn setServiceData_ParcelUuid_byte_array<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::ParcelUuid>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::bluetooth::le::ScanFilter_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/le/ScanFilter$Builder", java.flags == PUBLIC, .name == "setServiceData", .descriptor == "(Landroid/os/ParcelUuid;[B)Landroid/bluetooth/le/ScanFilter$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/le/ScanFilter$Builder\0", "setServiceData\0", "(Landroid/os/ParcelUuid;[B)Landroid/bluetooth/le/ScanFilter$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setServiceData](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.Builder.html#setServiceData(android.os.ParcelUuid,%20byte%5B%5D,%20byte%5B%5D))
        ///
        /// Required features: "android-bluetooth-le-ScanFilter_Builder", "android-os-ParcelUuid"
        #[cfg(any(feature = "all", all(feature = "android-bluetooth-le-ScanFilter_Builder", feature = "android-os-ParcelUuid")))]
        pub fn setServiceData_ParcelUuid_byte_array_byte_array<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::ParcelUuid>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::bluetooth::le::ScanFilter_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/le/ScanFilter$Builder", java.flags == PUBLIC, .name == "setServiceData", .descriptor == "(Landroid/os/ParcelUuid;[B[B)Landroid/bluetooth/le/ScanFilter$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/le/ScanFilter$Builder\0", "setServiceData\0", "(Landroid/os/ParcelUuid;[B[B)Landroid/bluetooth/le/ScanFilter$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setManufacturerData](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.Builder.html#setManufacturerData(int,%20byte%5B%5D))
        ///
        /// Required features: "android-bluetooth-le-ScanFilter_Builder"
        #[cfg(any(feature = "all", all(feature = "android-bluetooth-le-ScanFilter_Builder")))]
        pub fn setManufacturerData_int_byte_array<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::bluetooth::le::ScanFilter_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/le/ScanFilter$Builder", java.flags == PUBLIC, .name == "setManufacturerData", .descriptor == "(I[B)Landroid/bluetooth/le/ScanFilter$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/le/ScanFilter$Builder\0", "setManufacturerData\0", "(I[B)Landroid/bluetooth/le/ScanFilter$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setManufacturerData](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.Builder.html#setManufacturerData(int,%20byte%5B%5D,%20byte%5B%5D))
        ///
        /// Required features: "android-bluetooth-le-ScanFilter_Builder"
        #[cfg(any(feature = "all", all(feature = "android-bluetooth-le-ScanFilter_Builder")))]
        pub fn setManufacturerData_int_byte_array_byte_array<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::bluetooth::le::ScanFilter_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/le/ScanFilter$Builder", java.flags == PUBLIC, .name == "setManufacturerData", .descriptor == "(I[B[B)Landroid/bluetooth/le/ScanFilter$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/le/ScanFilter$Builder\0", "setManufacturerData\0", "(I[B[B)Landroid/bluetooth/le/ScanFilter$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [build](https://developer.android.com/reference/android/bluetooth/le/ScanFilter.Builder.html#build())
        ///
        /// Required features: "android-bluetooth-le-ScanFilter"
        #[cfg(any(feature = "all", all(feature = "android-bluetooth-le-ScanFilter")))]
        pub fn build<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::bluetooth::le::ScanFilter>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/le/ScanFilter$Builder", java.flags == PUBLIC, .name == "build", .descriptor == "()Landroid/bluetooth/le/ScanFilter;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/le/ScanFilter$Builder\0", "build\0", "()Landroid/bluetooth/le/ScanFilter;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
