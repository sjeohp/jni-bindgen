// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-bluetooth-le-BluetoothLeScanner"))]
__jni_bindgen! {
    /// public final class [BluetoothLeScanner](https://developer.android.com/reference/android/bluetooth/le/BluetoothLeScanner.html)
    ///
    /// Required feature: android-bluetooth-le-BluetoothLeScanner
    public final class BluetoothLeScanner ("android/bluetooth/le/BluetoothLeScanner") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [BluetoothLeScanner](https://developer.android.com/reference/android/bluetooth/le/BluetoothLeScanner.html#BluetoothLeScanner())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::bluetooth::le::BluetoothLeScanner>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/bluetooth/le/BluetoothLeScanner", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/le/BluetoothLeScanner\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [startScan](https://developer.android.com/reference/android/bluetooth/le/BluetoothLeScanner.html#startScan(android.bluetooth.le.ScanCallback))
        ///
        /// Required features: "android-bluetooth-le-ScanCallback"
        #[cfg(any(feature = "all", all(feature = "android-bluetooth-le-ScanCallback")))]
        pub fn startScan_ScanCallback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::bluetooth::le::ScanCallback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/le/BluetoothLeScanner", java.flags == PUBLIC, .name == "startScan", .descriptor == "(Landroid/bluetooth/le/ScanCallback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/le/BluetoothLeScanner\0", "startScan\0", "(Landroid/bluetooth/le/ScanCallback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [startScan](https://developer.android.com/reference/android/bluetooth/le/BluetoothLeScanner.html#startScan(java.util.List,%20android.bluetooth.le.ScanSettings,%20android.bluetooth.le.ScanCallback))
        ///
        /// Required features: "android-bluetooth-le-ScanCallback", "android-bluetooth-le-ScanSettings", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "android-bluetooth-le-ScanCallback", feature = "android-bluetooth-le-ScanSettings", feature = "java-util-List")))]
        pub fn startScan_List_ScanSettings_ScanCallback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::bluetooth::le::ScanSettings>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::bluetooth::le::ScanCallback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/le/BluetoothLeScanner", java.flags == PUBLIC, .name == "startScan", .descriptor == "(Ljava/util/List;Landroid/bluetooth/le/ScanSettings;Landroid/bluetooth/le/ScanCallback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/le/BluetoothLeScanner\0", "startScan\0", "(Ljava/util/List;Landroid/bluetooth/le/ScanSettings;Landroid/bluetooth/le/ScanCallback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [startScan](https://developer.android.com/reference/android/bluetooth/le/BluetoothLeScanner.html#startScan(java.util.List,%20android.bluetooth.le.ScanSettings,%20android.app.PendingIntent))
        ///
        /// Required features: "android-app-PendingIntent", "android-bluetooth-le-ScanSettings", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "android-app-PendingIntent", feature = "android-bluetooth-le-ScanSettings", feature = "java-util-List")))]
        pub fn startScan_List_ScanSettings_PendingIntent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::bluetooth::le::ScanSettings>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::PendingIntent>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/le/BluetoothLeScanner", java.flags == PUBLIC, .name == "startScan", .descriptor == "(Ljava/util/List;Landroid/bluetooth/le/ScanSettings;Landroid/app/PendingIntent;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/le/BluetoothLeScanner\0", "startScan\0", "(Ljava/util/List;Landroid/bluetooth/le/ScanSettings;Landroid/app/PendingIntent;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [stopScan](https://developer.android.com/reference/android/bluetooth/le/BluetoothLeScanner.html#stopScan(android.bluetooth.le.ScanCallback))
        ///
        /// Required features: "android-bluetooth-le-ScanCallback"
        #[cfg(any(feature = "all", all(feature = "android-bluetooth-le-ScanCallback")))]
        pub fn stopScan_ScanCallback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::bluetooth::le::ScanCallback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/le/BluetoothLeScanner", java.flags == PUBLIC, .name == "stopScan", .descriptor == "(Landroid/bluetooth/le/ScanCallback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/le/BluetoothLeScanner\0", "stopScan\0", "(Landroid/bluetooth/le/ScanCallback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [stopScan](https://developer.android.com/reference/android/bluetooth/le/BluetoothLeScanner.html#stopScan(android.app.PendingIntent))
        ///
        /// Required features: "android-app-PendingIntent"
        #[cfg(any(feature = "all", all(feature = "android-app-PendingIntent")))]
        pub fn stopScan_PendingIntent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::PendingIntent>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/le/BluetoothLeScanner", java.flags == PUBLIC, .name == "stopScan", .descriptor == "(Landroid/app/PendingIntent;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/le/BluetoothLeScanner\0", "stopScan\0", "(Landroid/app/PendingIntent;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [flushPendingScanResults](https://developer.android.com/reference/android/bluetooth/le/BluetoothLeScanner.html#flushPendingScanResults(android.bluetooth.le.ScanCallback))
        ///
        /// Required features: "android-bluetooth-le-ScanCallback"
        #[cfg(any(feature = "all", all(feature = "android-bluetooth-le-ScanCallback")))]
        pub fn flushPendingScanResults<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::bluetooth::le::ScanCallback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/le/BluetoothLeScanner", java.flags == PUBLIC, .name == "flushPendingScanResults", .descriptor == "(Landroid/bluetooth/le/ScanCallback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/le/BluetoothLeScanner\0", "flushPendingScanResults\0", "(Landroid/bluetooth/le/ScanCallback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [EXTRA_CALLBACK_TYPE](https://developer.android.com/reference/android/bluetooth/le/BluetoothLeScanner.html#EXTRA_CALLBACK_TYPE)
        pub const EXTRA_CALLBACK_TYPE : &'static str = "android.bluetooth.le.extra.CALLBACK_TYPE";

        /// public static final [EXTRA_ERROR_CODE](https://developer.android.com/reference/android/bluetooth/le/BluetoothLeScanner.html#EXTRA_ERROR_CODE)
        pub const EXTRA_ERROR_CODE : &'static str = "android.bluetooth.le.extra.ERROR_CODE";

        /// public static final [EXTRA_LIST_SCAN_RESULT](https://developer.android.com/reference/android/bluetooth/le/BluetoothLeScanner.html#EXTRA_LIST_SCAN_RESULT)
        pub const EXTRA_LIST_SCAN_RESULT : &'static str = "android.bluetooth.le.extra.LIST_SCAN_RESULT";
    }
}
