// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-bluetooth-BluetoothDevice"))]
__jni_bindgen! {
    /// public final class [BluetoothDevice](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html)
    ///
    /// Required feature: android-bluetooth-BluetoothDevice
    public final class BluetoothDevice ("android/bluetooth/BluetoothDevice") extends crate::java::lang::Object, implements crate::android::os::Parcelable {

        // // Not emitting: Non-public method
        // /// [BluetoothDevice](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#BluetoothDevice(java.lang.String))
        // ///
        // /// Required features: "java-lang-String"
        // #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::bluetooth::BluetoothDevice>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/bluetooth/BluetoothDevice", java.flags == (empty), .name == "<init>", .descriptor == "(Ljava/lang/String;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/BluetoothDevice\0", "<init>\0", "(Ljava/lang/String;)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [equals](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#equals(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn equals<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/BluetoothDevice", java.flags == PUBLIC, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/BluetoothDevice\0", "equals\0", "(Ljava/lang/Object;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hashCode](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#hashCode())
        pub fn hashCode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/BluetoothDevice", java.flags == PUBLIC, .name == "hashCode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/BluetoothDevice\0", "hashCode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/BluetoothDevice", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/BluetoothDevice\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [describeContents](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#describeContents())
        pub fn describeContents<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/BluetoothDevice", java.flags == PUBLIC, .name == "describeContents", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/BluetoothDevice\0", "describeContents\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [writeToParcel](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#writeToParcel(android.os.Parcel,%20int))
        ///
        /// Required features: "android-os-Parcel"
        #[cfg(any(feature = "all", all(feature = "android-os-Parcel")))]
        pub fn writeToParcel<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Parcel>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/BluetoothDevice", java.flags == PUBLIC, .name == "writeToParcel", .descriptor == "(Landroid/os/Parcel;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/BluetoothDevice\0", "writeToParcel\0", "(Landroid/os/Parcel;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAddress](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#getAddress())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getAddress<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/BluetoothDevice", java.flags == PUBLIC, .name == "getAddress", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/BluetoothDevice\0", "getAddress\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getName](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#getName())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getName<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/BluetoothDevice", java.flags == PUBLIC, .name == "getName", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/BluetoothDevice\0", "getName\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getType](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#getType())
        pub fn getType<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/BluetoothDevice", java.flags == PUBLIC, .name == "getType", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/BluetoothDevice\0", "getType\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createBond](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#createBond())
        pub fn createBond<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/BluetoothDevice", java.flags == PUBLIC, .name == "createBond", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/BluetoothDevice\0", "createBond\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getBondState](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#getBondState())
        pub fn getBondState<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/BluetoothDevice", java.flags == PUBLIC, .name == "getBondState", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/BluetoothDevice\0", "getBondState\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getBluetoothClass](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#getBluetoothClass())
        ///
        /// Required features: "android-bluetooth-BluetoothClass"
        #[cfg(any(feature = "all", all(feature = "android-bluetooth-BluetoothClass")))]
        pub fn getBluetoothClass<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::bluetooth::BluetoothClass>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/BluetoothDevice", java.flags == PUBLIC, .name == "getBluetoothClass", .descriptor == "()Landroid/bluetooth/BluetoothClass;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/BluetoothDevice\0", "getBluetoothClass\0", "()Landroid/bluetooth/BluetoothClass;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getUuids](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#getUuids())
        ///
        /// Required features: "android-os-ParcelUuid"
        #[cfg(any(feature = "all", all(feature = "android-os-ParcelUuid")))]
        pub fn getUuids<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::android::os::ParcelUuid, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/BluetoothDevice", java.flags == PUBLIC, .name == "getUuids", .descriptor == "()[Landroid/os/ParcelUuid;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/BluetoothDevice\0", "getUuids\0", "()[Landroid/os/ParcelUuid;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [fetchUuidsWithSdp](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#fetchUuidsWithSdp())
        pub fn fetchUuidsWithSdp<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/BluetoothDevice", java.flags == PUBLIC, .name == "fetchUuidsWithSdp", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/BluetoothDevice\0", "fetchUuidsWithSdp\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPin](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#setPin(byte%5B%5D))
        pub fn setPin<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/BluetoothDevice", java.flags == PUBLIC, .name == "setPin", .descriptor == "([B)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/BluetoothDevice\0", "setPin\0", "([B)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPairingConfirmation](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#setPairingConfirmation(boolean))
        pub fn setPairingConfirmation<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/BluetoothDevice", java.flags == PUBLIC, .name == "setPairingConfirmation", .descriptor == "(Z)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/BluetoothDevice\0", "setPairingConfirmation\0", "(Z)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createRfcommSocketToServiceRecord](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#createRfcommSocketToServiceRecord(java.util.UUID))
        ///
        /// Required features: "android-bluetooth-BluetoothSocket", "java-util-UUID"
        #[cfg(any(feature = "all", all(feature = "android-bluetooth-BluetoothSocket", feature = "java-util-UUID")))]
        pub fn createRfcommSocketToServiceRecord<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::UUID>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::bluetooth::BluetoothSocket>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/BluetoothDevice", java.flags == PUBLIC, .name == "createRfcommSocketToServiceRecord", .descriptor == "(Ljava/util/UUID;)Landroid/bluetooth/BluetoothSocket;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/BluetoothDevice\0", "createRfcommSocketToServiceRecord\0", "(Ljava/util/UUID;)Landroid/bluetooth/BluetoothSocket;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createInsecureRfcommSocketToServiceRecord](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#createInsecureRfcommSocketToServiceRecord(java.util.UUID))
        ///
        /// Required features: "android-bluetooth-BluetoothSocket", "java-util-UUID"
        #[cfg(any(feature = "all", all(feature = "android-bluetooth-BluetoothSocket", feature = "java-util-UUID")))]
        pub fn createInsecureRfcommSocketToServiceRecord<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::UUID>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::bluetooth::BluetoothSocket>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/BluetoothDevice", java.flags == PUBLIC, .name == "createInsecureRfcommSocketToServiceRecord", .descriptor == "(Ljava/util/UUID;)Landroid/bluetooth/BluetoothSocket;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/BluetoothDevice\0", "createInsecureRfcommSocketToServiceRecord\0", "(Ljava/util/UUID;)Landroid/bluetooth/BluetoothSocket;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [connectGatt](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#connectGatt(android.content.Context,%20boolean,%20android.bluetooth.BluetoothGattCallback))
        ///
        /// Required features: "android-bluetooth-BluetoothGatt", "android-bluetooth-BluetoothGattCallback", "android-content-Context"
        #[cfg(any(feature = "all", all(feature = "android-bluetooth-BluetoothGatt", feature = "android-bluetooth-BluetoothGattCallback", feature = "android-content-Context")))]
        pub fn connectGatt_Context_boolean_BluetoothGattCallback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: bool, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::bluetooth::BluetoothGattCallback>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::bluetooth::BluetoothGatt>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/BluetoothDevice", java.flags == PUBLIC, .name == "connectGatt", .descriptor == "(Landroid/content/Context;ZLandroid/bluetooth/BluetoothGattCallback;)Landroid/bluetooth/BluetoothGatt;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/BluetoothDevice\0", "connectGatt\0", "(Landroid/content/Context;ZLandroid/bluetooth/BluetoothGattCallback;)Landroid/bluetooth/BluetoothGatt;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [connectGatt](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#connectGatt(android.content.Context,%20boolean,%20android.bluetooth.BluetoothGattCallback,%20int))
        ///
        /// Required features: "android-bluetooth-BluetoothGatt", "android-bluetooth-BluetoothGattCallback", "android-content-Context"
        #[cfg(any(feature = "all", all(feature = "android-bluetooth-BluetoothGatt", feature = "android-bluetooth-BluetoothGattCallback", feature = "android-content-Context")))]
        pub fn connectGatt_Context_boolean_BluetoothGattCallback_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: bool, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::bluetooth::BluetoothGattCallback>>, arg3: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::bluetooth::BluetoothGatt>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/BluetoothDevice", java.flags == PUBLIC, .name == "connectGatt", .descriptor == "(Landroid/content/Context;ZLandroid/bluetooth/BluetoothGattCallback;I)Landroid/bluetooth/BluetoothGatt;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/BluetoothDevice\0", "connectGatt\0", "(Landroid/content/Context;ZLandroid/bluetooth/BluetoothGattCallback;I)Landroid/bluetooth/BluetoothGatt;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [connectGatt](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#connectGatt(android.content.Context,%20boolean,%20android.bluetooth.BluetoothGattCallback,%20int,%20int))
        ///
        /// Required features: "android-bluetooth-BluetoothGatt", "android-bluetooth-BluetoothGattCallback", "android-content-Context"
        #[cfg(any(feature = "all", all(feature = "android-bluetooth-BluetoothGatt", feature = "android-bluetooth-BluetoothGattCallback", feature = "android-content-Context")))]
        pub fn connectGatt_Context_boolean_BluetoothGattCallback_int_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: bool, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::bluetooth::BluetoothGattCallback>>, arg3: i32, arg4: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::bluetooth::BluetoothGatt>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/BluetoothDevice", java.flags == PUBLIC, .name == "connectGatt", .descriptor == "(Landroid/content/Context;ZLandroid/bluetooth/BluetoothGattCallback;II)Landroid/bluetooth/BluetoothGatt;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/BluetoothDevice\0", "connectGatt\0", "(Landroid/content/Context;ZLandroid/bluetooth/BluetoothGattCallback;II)Landroid/bluetooth/BluetoothGatt;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [connectGatt](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#connectGatt(android.content.Context,%20boolean,%20android.bluetooth.BluetoothGattCallback,%20int,%20int,%20android.os.Handler))
        ///
        /// Required features: "android-bluetooth-BluetoothGatt", "android-bluetooth-BluetoothGattCallback", "android-content-Context", "android-os-Handler"
        #[cfg(any(feature = "all", all(feature = "android-bluetooth-BluetoothGatt", feature = "android-bluetooth-BluetoothGattCallback", feature = "android-content-Context", feature = "android-os-Handler")))]
        pub fn connectGatt_Context_boolean_BluetoothGattCallback_int_int_Handler<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: bool, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::bluetooth::BluetoothGattCallback>>, arg3: i32, arg4: i32, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::bluetooth::BluetoothGatt>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/BluetoothDevice", java.flags == PUBLIC, .name == "connectGatt", .descriptor == "(Landroid/content/Context;ZLandroid/bluetooth/BluetoothGattCallback;IILandroid/os/Handler;)Landroid/bluetooth/BluetoothGatt;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/BluetoothDevice\0", "connectGatt\0", "(Landroid/content/Context;ZLandroid/bluetooth/BluetoothGattCallback;IILandroid/os/Handler;)Landroid/bluetooth/BluetoothGatt;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createL2capChannel](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#createL2capChannel(int))
        ///
        /// Required features: "android-bluetooth-BluetoothSocket"
        #[cfg(any(feature = "all", all(feature = "android-bluetooth-BluetoothSocket")))]
        pub fn createL2capChannel<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::bluetooth::BluetoothSocket>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/BluetoothDevice", java.flags == PUBLIC, .name == "createL2capChannel", .descriptor == "(I)Landroid/bluetooth/BluetoothSocket;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/BluetoothDevice\0", "createL2capChannel\0", "(I)Landroid/bluetooth/BluetoothSocket;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createInsecureL2capChannel](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#createInsecureL2capChannel(int))
        ///
        /// Required features: "android-bluetooth-BluetoothSocket"
        #[cfg(any(feature = "all", all(feature = "android-bluetooth-BluetoothSocket")))]
        pub fn createInsecureL2capChannel<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::bluetooth::BluetoothSocket>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/bluetooth/BluetoothDevice", java.flags == PUBLIC, .name == "createInsecureL2capChannel", .descriptor == "(I)Landroid/bluetooth/BluetoothSocket;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/bluetooth/BluetoothDevice\0", "createInsecureL2capChannel\0", "(I)Landroid/bluetooth/BluetoothSocket;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [ACTION_ACL_CONNECTED](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#ACTION_ACL_CONNECTED)
        pub const ACTION_ACL_CONNECTED : &'static str = "android.bluetooth.device.action.ACL_CONNECTED";

        /// public static final [ACTION_ACL_DISCONNECTED](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#ACTION_ACL_DISCONNECTED)
        pub const ACTION_ACL_DISCONNECTED : &'static str = "android.bluetooth.device.action.ACL_DISCONNECTED";

        /// public static final [ACTION_ACL_DISCONNECT_REQUESTED](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#ACTION_ACL_DISCONNECT_REQUESTED)
        pub const ACTION_ACL_DISCONNECT_REQUESTED : &'static str = "android.bluetooth.device.action.ACL_DISCONNECT_REQUESTED";

        /// public static final [ACTION_BOND_STATE_CHANGED](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#ACTION_BOND_STATE_CHANGED)
        pub const ACTION_BOND_STATE_CHANGED : &'static str = "android.bluetooth.device.action.BOND_STATE_CHANGED";

        /// public static final [ACTION_CLASS_CHANGED](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#ACTION_CLASS_CHANGED)
        pub const ACTION_CLASS_CHANGED : &'static str = "android.bluetooth.device.action.CLASS_CHANGED";

        /// public static final [ACTION_FOUND](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#ACTION_FOUND)
        pub const ACTION_FOUND : &'static str = "android.bluetooth.device.action.FOUND";

        /// public static final [ACTION_NAME_CHANGED](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#ACTION_NAME_CHANGED)
        pub const ACTION_NAME_CHANGED : &'static str = "android.bluetooth.device.action.NAME_CHANGED";

        /// public static final [ACTION_PAIRING_REQUEST](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#ACTION_PAIRING_REQUEST)
        pub const ACTION_PAIRING_REQUEST : &'static str = "android.bluetooth.device.action.PAIRING_REQUEST";

        /// public static final [ACTION_UUID](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#ACTION_UUID)
        pub const ACTION_UUID : &'static str = "android.bluetooth.device.action.UUID";

        /// public static final [BOND_BONDED](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#BOND_BONDED)
        pub const BOND_BONDED : i32 = 12;

        /// public static final [BOND_BONDING](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#BOND_BONDING)
        pub const BOND_BONDING : i32 = 11;

        /// public static final [BOND_NONE](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#BOND_NONE)
        pub const BOND_NONE : i32 = 10;

        /// **get** public static final [CREATOR](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#CREATOR)
        ///
        /// Required feature: android-os-Parcelable_Creator
        #[cfg(any(feature = "all", feature = "android-os-Parcelable_Creator"))]
        pub fn CREATOR<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Parcelable_Creator>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/bluetooth/BluetoothDevice\0", "CREATOR\0", "Landroid/os/Parcelable$Creator;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// public static final [DEVICE_TYPE_CLASSIC](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#DEVICE_TYPE_CLASSIC)
        pub const DEVICE_TYPE_CLASSIC : i32 = 1;

        /// public static final [DEVICE_TYPE_DUAL](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#DEVICE_TYPE_DUAL)
        pub const DEVICE_TYPE_DUAL : i32 = 3;

        /// public static final [DEVICE_TYPE_LE](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#DEVICE_TYPE_LE)
        pub const DEVICE_TYPE_LE : i32 = 2;

        /// public static final [DEVICE_TYPE_UNKNOWN](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#DEVICE_TYPE_UNKNOWN)
        pub const DEVICE_TYPE_UNKNOWN : i32 = 0;

        /// public static final [ERROR](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#ERROR)
        pub const ERROR : i32 = -2147483648;

        /// public static final [EXTRA_BOND_STATE](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#EXTRA_BOND_STATE)
        pub const EXTRA_BOND_STATE : &'static str = "android.bluetooth.device.extra.BOND_STATE";

        /// public static final [EXTRA_CLASS](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#EXTRA_CLASS)
        pub const EXTRA_CLASS : &'static str = "android.bluetooth.device.extra.CLASS";

        /// public static final [EXTRA_DEVICE](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#EXTRA_DEVICE)
        pub const EXTRA_DEVICE : &'static str = "android.bluetooth.device.extra.DEVICE";

        /// public static final [EXTRA_NAME](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#EXTRA_NAME)
        pub const EXTRA_NAME : &'static str = "android.bluetooth.device.extra.NAME";

        /// public static final [EXTRA_PAIRING_KEY](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#EXTRA_PAIRING_KEY)
        pub const EXTRA_PAIRING_KEY : &'static str = "android.bluetooth.device.extra.PAIRING_KEY";

        /// public static final [EXTRA_PAIRING_VARIANT](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#EXTRA_PAIRING_VARIANT)
        pub const EXTRA_PAIRING_VARIANT : &'static str = "android.bluetooth.device.extra.PAIRING_VARIANT";

        /// public static final [EXTRA_PREVIOUS_BOND_STATE](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#EXTRA_PREVIOUS_BOND_STATE)
        pub const EXTRA_PREVIOUS_BOND_STATE : &'static str = "android.bluetooth.device.extra.PREVIOUS_BOND_STATE";

        /// public static final [EXTRA_RSSI](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#EXTRA_RSSI)
        pub const EXTRA_RSSI : &'static str = "android.bluetooth.device.extra.RSSI";

        /// public static final [EXTRA_UUID](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#EXTRA_UUID)
        pub const EXTRA_UUID : &'static str = "android.bluetooth.device.extra.UUID";

        /// public static final [PAIRING_VARIANT_PASSKEY_CONFIRMATION](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#PAIRING_VARIANT_PASSKEY_CONFIRMATION)
        pub const PAIRING_VARIANT_PASSKEY_CONFIRMATION : i32 = 2;

        /// public static final [PAIRING_VARIANT_PIN](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#PAIRING_VARIANT_PIN)
        pub const PAIRING_VARIANT_PIN : i32 = 0;

        /// public static final [PHY_LE_1M](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#PHY_LE_1M)
        pub const PHY_LE_1M : i32 = 1;

        /// public static final [PHY_LE_1M_MASK](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#PHY_LE_1M_MASK)
        pub const PHY_LE_1M_MASK : i32 = 1;

        /// public static final [PHY_LE_2M](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#PHY_LE_2M)
        pub const PHY_LE_2M : i32 = 2;

        /// public static final [PHY_LE_2M_MASK](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#PHY_LE_2M_MASK)
        pub const PHY_LE_2M_MASK : i32 = 2;

        /// public static final [PHY_LE_CODED](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#PHY_LE_CODED)
        pub const PHY_LE_CODED : i32 = 3;

        /// public static final [PHY_LE_CODED_MASK](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#PHY_LE_CODED_MASK)
        pub const PHY_LE_CODED_MASK : i32 = 4;

        /// public static final [PHY_OPTION_NO_PREFERRED](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#PHY_OPTION_NO_PREFERRED)
        pub const PHY_OPTION_NO_PREFERRED : i32 = 0;

        /// public static final [PHY_OPTION_S2](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#PHY_OPTION_S2)
        pub const PHY_OPTION_S2 : i32 = 1;

        /// public static final [PHY_OPTION_S8](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#PHY_OPTION_S8)
        pub const PHY_OPTION_S8 : i32 = 2;

        /// public static final [TRANSPORT_AUTO](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#TRANSPORT_AUTO)
        pub const TRANSPORT_AUTO : i32 = 0;

        /// public static final [TRANSPORT_BREDR](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#TRANSPORT_BREDR)
        pub const TRANSPORT_BREDR : i32 = 1;

        /// public static final [TRANSPORT_LE](https://developer.android.com/reference/android/bluetooth/BluetoothDevice.html#TRANSPORT_LE)
        pub const TRANSPORT_LE : i32 = 2;
    }
}
