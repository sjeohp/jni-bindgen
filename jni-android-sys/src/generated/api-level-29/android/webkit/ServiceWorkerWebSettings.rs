// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-webkit-ServiceWorkerWebSettings"))]
__jni_bindgen! {
    /// public class [ServiceWorkerWebSettings](https://developer.android.com/reference/android/webkit/ServiceWorkerWebSettings.html)
    ///
    /// Required feature: android-webkit-ServiceWorkerWebSettings
    public class ServiceWorkerWebSettings ("android/webkit/ServiceWorkerWebSettings") extends crate::java::lang::Object {

        /// [ServiceWorkerWebSettings](https://developer.android.com/reference/android/webkit/ServiceWorkerWebSettings.html#ServiceWorkerWebSettings())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::webkit::ServiceWorkerWebSettings>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/ServiceWorkerWebSettings", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/ServiceWorkerWebSettings\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setCacheMode](https://developer.android.com/reference/android/webkit/ServiceWorkerWebSettings.html#setCacheMode(int))
        pub fn setCacheMode<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/ServiceWorkerWebSettings", java.flags == PUBLIC | ABSTRACT, .name == "setCacheMode", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/ServiceWorkerWebSettings\0", "setCacheMode\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCacheMode](https://developer.android.com/reference/android/webkit/ServiceWorkerWebSettings.html#getCacheMode())
        pub fn getCacheMode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/ServiceWorkerWebSettings", java.flags == PUBLIC | ABSTRACT, .name == "getCacheMode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/ServiceWorkerWebSettings\0", "getCacheMode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAllowContentAccess](https://developer.android.com/reference/android/webkit/ServiceWorkerWebSettings.html#setAllowContentAccess(boolean))
        pub fn setAllowContentAccess<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/ServiceWorkerWebSettings", java.flags == PUBLIC | ABSTRACT, .name == "setAllowContentAccess", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/ServiceWorkerWebSettings\0", "setAllowContentAccess\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAllowContentAccess](https://developer.android.com/reference/android/webkit/ServiceWorkerWebSettings.html#getAllowContentAccess())
        pub fn getAllowContentAccess<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/ServiceWorkerWebSettings", java.flags == PUBLIC | ABSTRACT, .name == "getAllowContentAccess", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/ServiceWorkerWebSettings\0", "getAllowContentAccess\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAllowFileAccess](https://developer.android.com/reference/android/webkit/ServiceWorkerWebSettings.html#setAllowFileAccess(boolean))
        pub fn setAllowFileAccess<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/ServiceWorkerWebSettings", java.flags == PUBLIC | ABSTRACT, .name == "setAllowFileAccess", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/ServiceWorkerWebSettings\0", "setAllowFileAccess\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAllowFileAccess](https://developer.android.com/reference/android/webkit/ServiceWorkerWebSettings.html#getAllowFileAccess())
        pub fn getAllowFileAccess<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/ServiceWorkerWebSettings", java.flags == PUBLIC | ABSTRACT, .name == "getAllowFileAccess", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/ServiceWorkerWebSettings\0", "getAllowFileAccess\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setBlockNetworkLoads](https://developer.android.com/reference/android/webkit/ServiceWorkerWebSettings.html#setBlockNetworkLoads(boolean))
        pub fn setBlockNetworkLoads<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/ServiceWorkerWebSettings", java.flags == PUBLIC | ABSTRACT, .name == "setBlockNetworkLoads", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/ServiceWorkerWebSettings\0", "setBlockNetworkLoads\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getBlockNetworkLoads](https://developer.android.com/reference/android/webkit/ServiceWorkerWebSettings.html#getBlockNetworkLoads())
        pub fn getBlockNetworkLoads<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/ServiceWorkerWebSettings", java.flags == PUBLIC | ABSTRACT, .name == "getBlockNetworkLoads", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/ServiceWorkerWebSettings\0", "getBlockNetworkLoads\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
