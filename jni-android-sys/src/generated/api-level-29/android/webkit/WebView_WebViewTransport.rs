// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-webkit-WebView_WebViewTransport"))]
__jni_bindgen! {
    /// public class [WebView.WebViewTransport](https://developer.android.com/reference/android/webkit/WebView.WebViewTransport.html)
    ///
    /// Required feature: android-webkit-WebView_WebViewTransport
    public class WebView_WebViewTransport ("android/webkit/WebView$WebViewTransport") extends crate::java::lang::Object {

        /// [WebViewTransport](https://developer.android.com/reference/android/webkit/WebView.WebViewTransport.html#WebViewTransport(android.webkit.WebView))
        ///
        /// Required features: "android-webkit-WebView"
        #[cfg(any(feature = "all", all(feature = "android-webkit-WebView")))]
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::webkit::WebView>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::webkit::WebView_WebViewTransport>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/WebView$WebViewTransport", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/webkit/WebView;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/WebView$WebViewTransport\0", "<init>\0", "(Landroid/webkit/WebView;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setWebView](https://developer.android.com/reference/android/webkit/WebView.WebViewTransport.html#setWebView(android.webkit.WebView))
        ///
        /// Required features: "android-webkit-WebView"
        #[cfg(any(feature = "all", all(feature = "android-webkit-WebView")))]
        pub fn setWebView<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::webkit::WebView>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/WebView$WebViewTransport", java.flags == PUBLIC | SYNCRONIZED, .name == "setWebView", .descriptor == "(Landroid/webkit/WebView;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/WebView$WebViewTransport\0", "setWebView\0", "(Landroid/webkit/WebView;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getWebView](https://developer.android.com/reference/android/webkit/WebView.WebViewTransport.html#getWebView())
        ///
        /// Required features: "android-webkit-WebView"
        #[cfg(any(feature = "all", all(feature = "android-webkit-WebView")))]
        pub fn getWebView<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::webkit::WebView>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/WebView$WebViewTransport", java.flags == PUBLIC | SYNCRONIZED, .name == "getWebView", .descriptor == "()Landroid/webkit/WebView;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/WebView$WebViewTransport\0", "getWebView\0", "()Landroid/webkit/WebView;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public field
        // // Not emitting: Failed to mangle field name: this$N outer class pointer
        // pub fn get_"this$0"<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::webkit::WebView>> { ... }
    }
}
