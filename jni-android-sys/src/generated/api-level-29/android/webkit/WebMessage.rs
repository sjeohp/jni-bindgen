// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-webkit-WebMessage"))]
__jni_bindgen! {
    /// public class [WebMessage](https://developer.android.com/reference/android/webkit/WebMessage.html)
    ///
    /// Required feature: android-webkit-WebMessage
    public class WebMessage ("android/webkit/WebMessage") extends crate::java::lang::Object {

        /// [WebMessage](https://developer.android.com/reference/android/webkit/WebMessage.html#WebMessage(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn new_String<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::webkit::WebMessage>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/WebMessage", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/WebMessage\0", "<init>\0", "(Ljava/lang/String;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [WebMessage](https://developer.android.com/reference/android/webkit/WebMessage.html#WebMessage(java.lang.String,%20android.webkit.WebMessagePort%5B%5D))
        ///
        /// Required features: "android-webkit-WebMessagePort", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-webkit-WebMessagePort", feature = "java-lang-String")))]
        pub fn new_String_WebMessagePort_array<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::android::webkit::WebMessagePort, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::webkit::WebMessage>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/WebMessage", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/lang/String;[Landroid/webkit/WebMessagePort;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/WebMessage\0", "<init>\0", "(Ljava/lang/String;[Landroid/webkit/WebMessagePort;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getData](https://developer.android.com/reference/android/webkit/WebMessage.html#getData())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getData<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/WebMessage", java.flags == PUBLIC, .name == "getData", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/WebMessage\0", "getData\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPorts](https://developer.android.com/reference/android/webkit/WebMessage.html#getPorts())
        ///
        /// Required features: "android-webkit-WebMessagePort"
        #[cfg(any(feature = "all", all(feature = "android-webkit-WebMessagePort")))]
        pub fn getPorts<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::android::webkit::WebMessagePort, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/WebMessage", java.flags == PUBLIC, .name == "getPorts", .descriptor == "()[Landroid/webkit/WebMessagePort;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/WebMessage\0", "getPorts\0", "()[Landroid/webkit/WebMessagePort;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
