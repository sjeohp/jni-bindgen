// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-webkit-TracingController"))]
__jni_bindgen! {
    /// public class [TracingController](https://developer.android.com/reference/android/webkit/TracingController.html)
    ///
    /// Required feature: android-webkit-TracingController
    public class TracingController ("android/webkit/TracingController") extends crate::java::lang::Object {

        /// [TracingController](https://developer.android.com/reference/android/webkit/TracingController.html#TracingController())
        #[deprecated] pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::webkit::TracingController>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/TracingController", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/TracingController\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInstance](https://developer.android.com/reference/android/webkit/TracingController.html#getInstance())
        ///
        /// Required features: "android-webkit-TracingController"
        #[cfg(any(feature = "all", all(feature = "android-webkit-TracingController")))]
        pub fn getInstance<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::webkit::TracingController>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/TracingController", java.flags == PUBLIC | STATIC, .name == "getInstance", .descriptor == "()Landroid/webkit/TracingController;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/webkit/TracingController\0", "getInstance\0", "()Landroid/webkit/TracingController;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [start](https://developer.android.com/reference/android/webkit/TracingController.html#start(android.webkit.TracingConfig))
        ///
        /// Required features: "android-webkit-TracingConfig"
        #[cfg(any(feature = "all", all(feature = "android-webkit-TracingConfig")))]
        pub fn start<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::webkit::TracingConfig>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/TracingController", java.flags == PUBLIC | ABSTRACT, .name == "start", .descriptor == "(Landroid/webkit/TracingConfig;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/TracingController\0", "start\0", "(Landroid/webkit/TracingConfig;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [stop](https://developer.android.com/reference/android/webkit/TracingController.html#stop(java.io.OutputStream,%20java.util.concurrent.Executor))
        ///
        /// Required features: "java-io-OutputStream", "java-util-concurrent-Executor"
        #[cfg(any(feature = "all", all(feature = "java-io-OutputStream", feature = "java-util-concurrent-Executor")))]
        pub fn stop<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::OutputStream>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/TracingController", java.flags == PUBLIC | ABSTRACT, .name == "stop", .descriptor == "(Ljava/io/OutputStream;Ljava/util/concurrent/Executor;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/TracingController\0", "stop\0", "(Ljava/io/OutputStream;Ljava/util/concurrent/Executor;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isTracing](https://developer.android.com/reference/android/webkit/TracingController.html#isTracing())
        pub fn isTracing<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/TracingController", java.flags == PUBLIC | ABSTRACT, .name == "isTracing", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/TracingController\0", "isTracing\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
