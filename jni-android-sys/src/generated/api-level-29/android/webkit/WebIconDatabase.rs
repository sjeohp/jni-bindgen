// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-webkit-WebIconDatabase"))]
__jni_bindgen! {
    /// public class [WebIconDatabase](https://developer.android.com/reference/android/webkit/WebIconDatabase.html)
    ///
    /// Required feature: android-webkit-WebIconDatabase
    #[deprecated] public class WebIconDatabase ("android/webkit/WebIconDatabase") extends crate::java::lang::Object {

        /// [WebIconDatabase](https://developer.android.com/reference/android/webkit/WebIconDatabase.html#WebIconDatabase())
        #[deprecated] pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::webkit::WebIconDatabase>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/WebIconDatabase", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/WebIconDatabase\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [open](https://developer.android.com/reference/android/webkit/WebIconDatabase.html#open(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        #[deprecated] pub fn open<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/WebIconDatabase", java.flags == PUBLIC | ABSTRACT, .name == "open", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/WebIconDatabase\0", "open\0", "(Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [close](https://developer.android.com/reference/android/webkit/WebIconDatabase.html#close())
        #[deprecated] pub fn close<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/WebIconDatabase", java.flags == PUBLIC | ABSTRACT, .name == "close", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/WebIconDatabase\0", "close\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeAllIcons](https://developer.android.com/reference/android/webkit/WebIconDatabase.html#removeAllIcons())
        #[deprecated] pub fn removeAllIcons<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/WebIconDatabase", java.flags == PUBLIC | ABSTRACT, .name == "removeAllIcons", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/WebIconDatabase\0", "removeAllIcons\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [requestIconForPageUrl](https://developer.android.com/reference/android/webkit/WebIconDatabase.html#requestIconForPageUrl(java.lang.String,%20android.webkit.WebIconDatabase.IconListener))
        ///
        /// Required features: "android-webkit-WebIconDatabase_IconListener", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-webkit-WebIconDatabase_IconListener", feature = "java-lang-String")))]
        #[deprecated] pub fn requestIconForPageUrl<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::webkit::WebIconDatabase_IconListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/WebIconDatabase", java.flags == PUBLIC | ABSTRACT, .name == "requestIconForPageUrl", .descriptor == "(Ljava/lang/String;Landroid/webkit/WebIconDatabase$IconListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/WebIconDatabase\0", "requestIconForPageUrl\0", "(Ljava/lang/String;Landroid/webkit/WebIconDatabase$IconListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [retainIconForPageUrl](https://developer.android.com/reference/android/webkit/WebIconDatabase.html#retainIconForPageUrl(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        #[deprecated] pub fn retainIconForPageUrl<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/WebIconDatabase", java.flags == PUBLIC | ABSTRACT, .name == "retainIconForPageUrl", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/WebIconDatabase\0", "retainIconForPageUrl\0", "(Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [releaseIconForPageUrl](https://developer.android.com/reference/android/webkit/WebIconDatabase.html#releaseIconForPageUrl(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        #[deprecated] pub fn releaseIconForPageUrl<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/WebIconDatabase", java.flags == PUBLIC | ABSTRACT, .name == "releaseIconForPageUrl", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/WebIconDatabase\0", "releaseIconForPageUrl\0", "(Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInstance](https://developer.android.com/reference/android/webkit/WebIconDatabase.html#getInstance())
        ///
        /// Required features: "android-webkit-WebIconDatabase"
        #[cfg(any(feature = "all", all(feature = "android-webkit-WebIconDatabase")))]
        #[deprecated] pub fn getInstance<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::webkit::WebIconDatabase>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/WebIconDatabase", java.flags == PUBLIC | STATIC, .name == "getInstance", .descriptor == "()Landroid/webkit/WebIconDatabase;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/webkit/WebIconDatabase\0", "getInstance\0", "()Landroid/webkit/WebIconDatabase;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
