// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-webkit-PermissionRequest"))]
__jni_bindgen! {
    /// public class [PermissionRequest](https://developer.android.com/reference/android/webkit/PermissionRequest.html)
    ///
    /// Required feature: android-webkit-PermissionRequest
    public class PermissionRequest ("android/webkit/PermissionRequest") extends crate::java::lang::Object {

        /// [PermissionRequest](https://developer.android.com/reference/android/webkit/PermissionRequest.html#PermissionRequest())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::webkit::PermissionRequest>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/PermissionRequest", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/PermissionRequest\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getOrigin](https://developer.android.com/reference/android/webkit/PermissionRequest.html#getOrigin())
        ///
        /// Required features: "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri")))]
        pub fn getOrigin<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/PermissionRequest", java.flags == PUBLIC | ABSTRACT, .name == "getOrigin", .descriptor == "()Landroid/net/Uri;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/PermissionRequest\0", "getOrigin\0", "()Landroid/net/Uri;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getResources](https://developer.android.com/reference/android/webkit/PermissionRequest.html#getResources())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getResources<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/PermissionRequest", java.flags == PUBLIC | ABSTRACT, .name == "getResources", .descriptor == "()[Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/PermissionRequest\0", "getResources\0", "()[Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [grant](https://developer.android.com/reference/android/webkit/PermissionRequest.html#grant(java.lang.String%5B%5D))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn grant<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/PermissionRequest", java.flags == PUBLIC | ABSTRACT, .name == "grant", .descriptor == "([Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/PermissionRequest\0", "grant\0", "([Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [deny](https://developer.android.com/reference/android/webkit/PermissionRequest.html#deny())
        pub fn deny<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/PermissionRequest", java.flags == PUBLIC | ABSTRACT, .name == "deny", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/PermissionRequest\0", "deny\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [RESOURCE_AUDIO_CAPTURE](https://developer.android.com/reference/android/webkit/PermissionRequest.html#RESOURCE_AUDIO_CAPTURE)
        pub const RESOURCE_AUDIO_CAPTURE : &'static str = "android.webkit.resource.AUDIO_CAPTURE";

        /// public static final [RESOURCE_MIDI_SYSEX](https://developer.android.com/reference/android/webkit/PermissionRequest.html#RESOURCE_MIDI_SYSEX)
        pub const RESOURCE_MIDI_SYSEX : &'static str = "android.webkit.resource.MIDI_SYSEX";

        /// public static final [RESOURCE_PROTECTED_MEDIA_ID](https://developer.android.com/reference/android/webkit/PermissionRequest.html#RESOURCE_PROTECTED_MEDIA_ID)
        pub const RESOURCE_PROTECTED_MEDIA_ID : &'static str = "android.webkit.resource.PROTECTED_MEDIA_ID";

        /// public static final [RESOURCE_VIDEO_CAPTURE](https://developer.android.com/reference/android/webkit/PermissionRequest.html#RESOURCE_VIDEO_CAPTURE)
        pub const RESOURCE_VIDEO_CAPTURE : &'static str = "android.webkit.resource.VIDEO_CAPTURE";
    }
}
