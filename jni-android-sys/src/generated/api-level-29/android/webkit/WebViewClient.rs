// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-webkit-WebViewClient"))]
__jni_bindgen! {
    /// public class [WebViewClient](https://developer.android.com/reference/android/webkit/WebViewClient.html)
    ///
    /// Required feature: android-webkit-WebViewClient
    public class WebViewClient ("android/webkit/WebViewClient") extends crate::java::lang::Object {

        /// [WebViewClient](https://developer.android.com/reference/android/webkit/WebViewClient.html#WebViewClient())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::webkit::WebViewClient>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/WebViewClient", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/WebViewClient\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [shouldOverrideUrlLoading](https://developer.android.com/reference/android/webkit/WebViewClient.html#shouldOverrideUrlLoading(android.webkit.WebView,%20java.lang.String))
        ///
        /// Required features: "android-webkit-WebView", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-webkit-WebView", feature = "java-lang-String")))]
        #[deprecated] pub fn shouldOverrideUrlLoading_WebView_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::webkit::WebView>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/WebViewClient", java.flags == PUBLIC, .name == "shouldOverrideUrlLoading", .descriptor == "(Landroid/webkit/WebView;Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/WebViewClient\0", "shouldOverrideUrlLoading\0", "(Landroid/webkit/WebView;Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [shouldOverrideUrlLoading](https://developer.android.com/reference/android/webkit/WebViewClient.html#shouldOverrideUrlLoading(android.webkit.WebView,%20android.webkit.WebResourceRequest))
        ///
        /// Required features: "android-webkit-WebResourceRequest", "android-webkit-WebView"
        #[cfg(any(feature = "all", all(feature = "android-webkit-WebResourceRequest", feature = "android-webkit-WebView")))]
        pub fn shouldOverrideUrlLoading_WebView_WebResourceRequest<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::webkit::WebView>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::webkit::WebResourceRequest>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/WebViewClient", java.flags == PUBLIC, .name == "shouldOverrideUrlLoading", .descriptor == "(Landroid/webkit/WebView;Landroid/webkit/WebResourceRequest;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/WebViewClient\0", "shouldOverrideUrlLoading\0", "(Landroid/webkit/WebView;Landroid/webkit/WebResourceRequest;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onPageStarted](https://developer.android.com/reference/android/webkit/WebViewClient.html#onPageStarted(android.webkit.WebView,%20java.lang.String,%20android.graphics.Bitmap))
        ///
        /// Required features: "android-graphics-Bitmap", "android-webkit-WebView", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Bitmap", feature = "android-webkit-WebView", feature = "java-lang-String")))]
        pub fn onPageStarted<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::webkit::WebView>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Bitmap>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/WebViewClient", java.flags == PUBLIC, .name == "onPageStarted", .descriptor == "(Landroid/webkit/WebView;Ljava/lang/String;Landroid/graphics/Bitmap;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/WebViewClient\0", "onPageStarted\0", "(Landroid/webkit/WebView;Ljava/lang/String;Landroid/graphics/Bitmap;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onPageFinished](https://developer.android.com/reference/android/webkit/WebViewClient.html#onPageFinished(android.webkit.WebView,%20java.lang.String))
        ///
        /// Required features: "android-webkit-WebView", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-webkit-WebView", feature = "java-lang-String")))]
        pub fn onPageFinished<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::webkit::WebView>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/WebViewClient", java.flags == PUBLIC, .name == "onPageFinished", .descriptor == "(Landroid/webkit/WebView;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/WebViewClient\0", "onPageFinished\0", "(Landroid/webkit/WebView;Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onLoadResource](https://developer.android.com/reference/android/webkit/WebViewClient.html#onLoadResource(android.webkit.WebView,%20java.lang.String))
        ///
        /// Required features: "android-webkit-WebView", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-webkit-WebView", feature = "java-lang-String")))]
        pub fn onLoadResource<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::webkit::WebView>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/WebViewClient", java.flags == PUBLIC, .name == "onLoadResource", .descriptor == "(Landroid/webkit/WebView;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/WebViewClient\0", "onLoadResource\0", "(Landroid/webkit/WebView;Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onPageCommitVisible](https://developer.android.com/reference/android/webkit/WebViewClient.html#onPageCommitVisible(android.webkit.WebView,%20java.lang.String))
        ///
        /// Required features: "android-webkit-WebView", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-webkit-WebView", feature = "java-lang-String")))]
        pub fn onPageCommitVisible<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::webkit::WebView>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/WebViewClient", java.flags == PUBLIC, .name == "onPageCommitVisible", .descriptor == "(Landroid/webkit/WebView;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/WebViewClient\0", "onPageCommitVisible\0", "(Landroid/webkit/WebView;Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [shouldInterceptRequest](https://developer.android.com/reference/android/webkit/WebViewClient.html#shouldInterceptRequest(android.webkit.WebView,%20java.lang.String))
        ///
        /// Required features: "android-webkit-WebResourceResponse", "android-webkit-WebView", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-webkit-WebResourceResponse", feature = "android-webkit-WebView", feature = "java-lang-String")))]
        #[deprecated] pub fn shouldInterceptRequest_WebView_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::webkit::WebView>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::webkit::WebResourceResponse>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/WebViewClient", java.flags == PUBLIC, .name == "shouldInterceptRequest", .descriptor == "(Landroid/webkit/WebView;Ljava/lang/String;)Landroid/webkit/WebResourceResponse;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/WebViewClient\0", "shouldInterceptRequest\0", "(Landroid/webkit/WebView;Ljava/lang/String;)Landroid/webkit/WebResourceResponse;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [shouldInterceptRequest](https://developer.android.com/reference/android/webkit/WebViewClient.html#shouldInterceptRequest(android.webkit.WebView,%20android.webkit.WebResourceRequest))
        ///
        /// Required features: "android-webkit-WebResourceRequest", "android-webkit-WebResourceResponse", "android-webkit-WebView"
        #[cfg(any(feature = "all", all(feature = "android-webkit-WebResourceRequest", feature = "android-webkit-WebResourceResponse", feature = "android-webkit-WebView")))]
        pub fn shouldInterceptRequest_WebView_WebResourceRequest<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::webkit::WebView>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::webkit::WebResourceRequest>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::webkit::WebResourceResponse>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/WebViewClient", java.flags == PUBLIC, .name == "shouldInterceptRequest", .descriptor == "(Landroid/webkit/WebView;Landroid/webkit/WebResourceRequest;)Landroid/webkit/WebResourceResponse;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/WebViewClient\0", "shouldInterceptRequest\0", "(Landroid/webkit/WebView;Landroid/webkit/WebResourceRequest;)Landroid/webkit/WebResourceResponse;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onTooManyRedirects](https://developer.android.com/reference/android/webkit/WebViewClient.html#onTooManyRedirects(android.webkit.WebView,%20android.os.Message,%20android.os.Message))
        ///
        /// Required features: "android-os-Message", "android-webkit-WebView"
        #[cfg(any(feature = "all", all(feature = "android-os-Message", feature = "android-webkit-WebView")))]
        #[deprecated] pub fn onTooManyRedirects<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::webkit::WebView>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Message>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Message>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/WebViewClient", java.flags == PUBLIC, .name == "onTooManyRedirects", .descriptor == "(Landroid/webkit/WebView;Landroid/os/Message;Landroid/os/Message;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/WebViewClient\0", "onTooManyRedirects\0", "(Landroid/webkit/WebView;Landroid/os/Message;Landroid/os/Message;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onReceivedError](https://developer.android.com/reference/android/webkit/WebViewClient.html#onReceivedError(android.webkit.WebView,%20int,%20java.lang.String,%20java.lang.String))
        ///
        /// Required features: "android-webkit-WebView", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-webkit-WebView", feature = "java-lang-String")))]
        #[deprecated] pub fn onReceivedError_WebView_int_String_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::webkit::WebView>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/WebViewClient", java.flags == PUBLIC, .name == "onReceivedError", .descriptor == "(Landroid/webkit/WebView;ILjava/lang/String;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/WebViewClient\0", "onReceivedError\0", "(Landroid/webkit/WebView;ILjava/lang/String;Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onReceivedError](https://developer.android.com/reference/android/webkit/WebViewClient.html#onReceivedError(android.webkit.WebView,%20android.webkit.WebResourceRequest,%20android.webkit.WebResourceError))
        ///
        /// Required features: "android-webkit-WebResourceError", "android-webkit-WebResourceRequest", "android-webkit-WebView"
        #[cfg(any(feature = "all", all(feature = "android-webkit-WebResourceError", feature = "android-webkit-WebResourceRequest", feature = "android-webkit-WebView")))]
        pub fn onReceivedError_WebView_WebResourceRequest_WebResourceError<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::webkit::WebView>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::webkit::WebResourceRequest>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::webkit::WebResourceError>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/WebViewClient", java.flags == PUBLIC, .name == "onReceivedError", .descriptor == "(Landroid/webkit/WebView;Landroid/webkit/WebResourceRequest;Landroid/webkit/WebResourceError;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/WebViewClient\0", "onReceivedError\0", "(Landroid/webkit/WebView;Landroid/webkit/WebResourceRequest;Landroid/webkit/WebResourceError;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onReceivedHttpError](https://developer.android.com/reference/android/webkit/WebViewClient.html#onReceivedHttpError(android.webkit.WebView,%20android.webkit.WebResourceRequest,%20android.webkit.WebResourceResponse))
        ///
        /// Required features: "android-webkit-WebResourceRequest", "android-webkit-WebResourceResponse", "android-webkit-WebView"
        #[cfg(any(feature = "all", all(feature = "android-webkit-WebResourceRequest", feature = "android-webkit-WebResourceResponse", feature = "android-webkit-WebView")))]
        pub fn onReceivedHttpError<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::webkit::WebView>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::webkit::WebResourceRequest>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::webkit::WebResourceResponse>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/WebViewClient", java.flags == PUBLIC, .name == "onReceivedHttpError", .descriptor == "(Landroid/webkit/WebView;Landroid/webkit/WebResourceRequest;Landroid/webkit/WebResourceResponse;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/WebViewClient\0", "onReceivedHttpError\0", "(Landroid/webkit/WebView;Landroid/webkit/WebResourceRequest;Landroid/webkit/WebResourceResponse;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onFormResubmission](https://developer.android.com/reference/android/webkit/WebViewClient.html#onFormResubmission(android.webkit.WebView,%20android.os.Message,%20android.os.Message))
        ///
        /// Required features: "android-os-Message", "android-webkit-WebView"
        #[cfg(any(feature = "all", all(feature = "android-os-Message", feature = "android-webkit-WebView")))]
        pub fn onFormResubmission<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::webkit::WebView>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Message>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Message>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/WebViewClient", java.flags == PUBLIC, .name == "onFormResubmission", .descriptor == "(Landroid/webkit/WebView;Landroid/os/Message;Landroid/os/Message;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/WebViewClient\0", "onFormResubmission\0", "(Landroid/webkit/WebView;Landroid/os/Message;Landroid/os/Message;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [doUpdateVisitedHistory](https://developer.android.com/reference/android/webkit/WebViewClient.html#doUpdateVisitedHistory(android.webkit.WebView,%20java.lang.String,%20boolean))
        ///
        /// Required features: "android-webkit-WebView", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-webkit-WebView", feature = "java-lang-String")))]
        pub fn doUpdateVisitedHistory<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::webkit::WebView>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/WebViewClient", java.flags == PUBLIC, .name == "doUpdateVisitedHistory", .descriptor == "(Landroid/webkit/WebView;Ljava/lang/String;Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/WebViewClient\0", "doUpdateVisitedHistory\0", "(Landroid/webkit/WebView;Ljava/lang/String;Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onReceivedSslError](https://developer.android.com/reference/android/webkit/WebViewClient.html#onReceivedSslError(android.webkit.WebView,%20android.webkit.SslErrorHandler,%20android.net.http.SslError))
        ///
        /// Required features: "android-net-http-SslError", "android-webkit-SslErrorHandler", "android-webkit-WebView"
        #[cfg(any(feature = "all", all(feature = "android-net-http-SslError", feature = "android-webkit-SslErrorHandler", feature = "android-webkit-WebView")))]
        pub fn onReceivedSslError<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::webkit::WebView>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::webkit::SslErrorHandler>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::http::SslError>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/WebViewClient", java.flags == PUBLIC, .name == "onReceivedSslError", .descriptor == "(Landroid/webkit/WebView;Landroid/webkit/SslErrorHandler;Landroid/net/http/SslError;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/WebViewClient\0", "onReceivedSslError\0", "(Landroid/webkit/WebView;Landroid/webkit/SslErrorHandler;Landroid/net/http/SslError;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onReceivedClientCertRequest](https://developer.android.com/reference/android/webkit/WebViewClient.html#onReceivedClientCertRequest(android.webkit.WebView,%20android.webkit.ClientCertRequest))
        ///
        /// Required features: "android-webkit-ClientCertRequest", "android-webkit-WebView"
        #[cfg(any(feature = "all", all(feature = "android-webkit-ClientCertRequest", feature = "android-webkit-WebView")))]
        pub fn onReceivedClientCertRequest<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::webkit::WebView>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::webkit::ClientCertRequest>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/WebViewClient", java.flags == PUBLIC, .name == "onReceivedClientCertRequest", .descriptor == "(Landroid/webkit/WebView;Landroid/webkit/ClientCertRequest;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/WebViewClient\0", "onReceivedClientCertRequest\0", "(Landroid/webkit/WebView;Landroid/webkit/ClientCertRequest;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onReceivedHttpAuthRequest](https://developer.android.com/reference/android/webkit/WebViewClient.html#onReceivedHttpAuthRequest(android.webkit.WebView,%20android.webkit.HttpAuthHandler,%20java.lang.String,%20java.lang.String))
        ///
        /// Required features: "android-webkit-HttpAuthHandler", "android-webkit-WebView", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-webkit-HttpAuthHandler", feature = "android-webkit-WebView", feature = "java-lang-String")))]
        pub fn onReceivedHttpAuthRequest<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::webkit::WebView>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::webkit::HttpAuthHandler>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/WebViewClient", java.flags == PUBLIC, .name == "onReceivedHttpAuthRequest", .descriptor == "(Landroid/webkit/WebView;Landroid/webkit/HttpAuthHandler;Ljava/lang/String;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/WebViewClient\0", "onReceivedHttpAuthRequest\0", "(Landroid/webkit/WebView;Landroid/webkit/HttpAuthHandler;Ljava/lang/String;Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [shouldOverrideKeyEvent](https://developer.android.com/reference/android/webkit/WebViewClient.html#shouldOverrideKeyEvent(android.webkit.WebView,%20android.view.KeyEvent))
        ///
        /// Required features: "android-view-KeyEvent", "android-webkit-WebView"
        #[cfg(any(feature = "all", all(feature = "android-view-KeyEvent", feature = "android-webkit-WebView")))]
        pub fn shouldOverrideKeyEvent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::webkit::WebView>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::KeyEvent>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/WebViewClient", java.flags == PUBLIC, .name == "shouldOverrideKeyEvent", .descriptor == "(Landroid/webkit/WebView;Landroid/view/KeyEvent;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/WebViewClient\0", "shouldOverrideKeyEvent\0", "(Landroid/webkit/WebView;Landroid/view/KeyEvent;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onUnhandledKeyEvent](https://developer.android.com/reference/android/webkit/WebViewClient.html#onUnhandledKeyEvent(android.webkit.WebView,%20android.view.KeyEvent))
        ///
        /// Required features: "android-view-KeyEvent", "android-webkit-WebView"
        #[cfg(any(feature = "all", all(feature = "android-view-KeyEvent", feature = "android-webkit-WebView")))]
        pub fn onUnhandledKeyEvent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::webkit::WebView>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::KeyEvent>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/WebViewClient", java.flags == PUBLIC, .name == "onUnhandledKeyEvent", .descriptor == "(Landroid/webkit/WebView;Landroid/view/KeyEvent;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/WebViewClient\0", "onUnhandledKeyEvent\0", "(Landroid/webkit/WebView;Landroid/view/KeyEvent;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onScaleChanged](https://developer.android.com/reference/android/webkit/WebViewClient.html#onScaleChanged(android.webkit.WebView,%20float,%20float))
        ///
        /// Required features: "android-webkit-WebView"
        #[cfg(any(feature = "all", all(feature = "android-webkit-WebView")))]
        pub fn onScaleChanged<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::webkit::WebView>>, arg1: f32, arg2: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/WebViewClient", java.flags == PUBLIC, .name == "onScaleChanged", .descriptor == "(Landroid/webkit/WebView;FF)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/WebViewClient\0", "onScaleChanged\0", "(Landroid/webkit/WebView;FF)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onReceivedLoginRequest](https://developer.android.com/reference/android/webkit/WebViewClient.html#onReceivedLoginRequest(android.webkit.WebView,%20java.lang.String,%20java.lang.String,%20java.lang.String))
        ///
        /// Required features: "android-webkit-WebView", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-webkit-WebView", feature = "java-lang-String")))]
        pub fn onReceivedLoginRequest<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::webkit::WebView>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/WebViewClient", java.flags == PUBLIC, .name == "onReceivedLoginRequest", .descriptor == "(Landroid/webkit/WebView;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/WebViewClient\0", "onReceivedLoginRequest\0", "(Landroid/webkit/WebView;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onRenderProcessGone](https://developer.android.com/reference/android/webkit/WebViewClient.html#onRenderProcessGone(android.webkit.WebView,%20android.webkit.RenderProcessGoneDetail))
        ///
        /// Required features: "android-webkit-RenderProcessGoneDetail", "android-webkit-WebView"
        #[cfg(any(feature = "all", all(feature = "android-webkit-RenderProcessGoneDetail", feature = "android-webkit-WebView")))]
        pub fn onRenderProcessGone<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::webkit::WebView>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::webkit::RenderProcessGoneDetail>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/WebViewClient", java.flags == PUBLIC, .name == "onRenderProcessGone", .descriptor == "(Landroid/webkit/WebView;Landroid/webkit/RenderProcessGoneDetail;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/WebViewClient\0", "onRenderProcessGone\0", "(Landroid/webkit/WebView;Landroid/webkit/RenderProcessGoneDetail;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onSafeBrowsingHit](https://developer.android.com/reference/android/webkit/WebViewClient.html#onSafeBrowsingHit(android.webkit.WebView,%20android.webkit.WebResourceRequest,%20int,%20android.webkit.SafeBrowsingResponse))
        ///
        /// Required features: "android-webkit-SafeBrowsingResponse", "android-webkit-WebResourceRequest", "android-webkit-WebView"
        #[cfg(any(feature = "all", all(feature = "android-webkit-SafeBrowsingResponse", feature = "android-webkit-WebResourceRequest", feature = "android-webkit-WebView")))]
        pub fn onSafeBrowsingHit<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::webkit::WebView>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::webkit::WebResourceRequest>>, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::webkit::SafeBrowsingResponse>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/WebViewClient", java.flags == PUBLIC, .name == "onSafeBrowsingHit", .descriptor == "(Landroid/webkit/WebView;Landroid/webkit/WebResourceRequest;ILandroid/webkit/SafeBrowsingResponse;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/WebViewClient\0", "onSafeBrowsingHit\0", "(Landroid/webkit/WebView;Landroid/webkit/WebResourceRequest;ILandroid/webkit/SafeBrowsingResponse;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [ERROR_AUTHENTICATION](https://developer.android.com/reference/android/webkit/WebViewClient.html#ERROR_AUTHENTICATION)
        pub const ERROR_AUTHENTICATION : i32 = -4;

        /// public static final [ERROR_BAD_URL](https://developer.android.com/reference/android/webkit/WebViewClient.html#ERROR_BAD_URL)
        pub const ERROR_BAD_URL : i32 = -12;

        /// public static final [ERROR_CONNECT](https://developer.android.com/reference/android/webkit/WebViewClient.html#ERROR_CONNECT)
        pub const ERROR_CONNECT : i32 = -6;

        /// public static final [ERROR_FAILED_SSL_HANDSHAKE](https://developer.android.com/reference/android/webkit/WebViewClient.html#ERROR_FAILED_SSL_HANDSHAKE)
        pub const ERROR_FAILED_SSL_HANDSHAKE : i32 = -11;

        /// public static final [ERROR_FILE](https://developer.android.com/reference/android/webkit/WebViewClient.html#ERROR_FILE)
        pub const ERROR_FILE : i32 = -13;

        /// public static final [ERROR_FILE_NOT_FOUND](https://developer.android.com/reference/android/webkit/WebViewClient.html#ERROR_FILE_NOT_FOUND)
        pub const ERROR_FILE_NOT_FOUND : i32 = -14;

        /// public static final [ERROR_HOST_LOOKUP](https://developer.android.com/reference/android/webkit/WebViewClient.html#ERROR_HOST_LOOKUP)
        pub const ERROR_HOST_LOOKUP : i32 = -2;

        /// public static final [ERROR_IO](https://developer.android.com/reference/android/webkit/WebViewClient.html#ERROR_IO)
        pub const ERROR_IO : i32 = -7;

        /// public static final [ERROR_PROXY_AUTHENTICATION](https://developer.android.com/reference/android/webkit/WebViewClient.html#ERROR_PROXY_AUTHENTICATION)
        pub const ERROR_PROXY_AUTHENTICATION : i32 = -5;

        /// public static final [ERROR_REDIRECT_LOOP](https://developer.android.com/reference/android/webkit/WebViewClient.html#ERROR_REDIRECT_LOOP)
        pub const ERROR_REDIRECT_LOOP : i32 = -9;

        /// public static final [ERROR_TIMEOUT](https://developer.android.com/reference/android/webkit/WebViewClient.html#ERROR_TIMEOUT)
        pub const ERROR_TIMEOUT : i32 = -8;

        /// public static final [ERROR_TOO_MANY_REQUESTS](https://developer.android.com/reference/android/webkit/WebViewClient.html#ERROR_TOO_MANY_REQUESTS)
        pub const ERROR_TOO_MANY_REQUESTS : i32 = -15;

        /// public static final [ERROR_UNKNOWN](https://developer.android.com/reference/android/webkit/WebViewClient.html#ERROR_UNKNOWN)
        pub const ERROR_UNKNOWN : i32 = -1;

        /// public static final [ERROR_UNSAFE_RESOURCE](https://developer.android.com/reference/android/webkit/WebViewClient.html#ERROR_UNSAFE_RESOURCE)
        pub const ERROR_UNSAFE_RESOURCE : i32 = -16;

        /// public static final [ERROR_UNSUPPORTED_AUTH_SCHEME](https://developer.android.com/reference/android/webkit/WebViewClient.html#ERROR_UNSUPPORTED_AUTH_SCHEME)
        pub const ERROR_UNSUPPORTED_AUTH_SCHEME : i32 = -3;

        /// public static final [ERROR_UNSUPPORTED_SCHEME](https://developer.android.com/reference/android/webkit/WebViewClient.html#ERROR_UNSUPPORTED_SCHEME)
        pub const ERROR_UNSUPPORTED_SCHEME : i32 = -10;

        /// public static final [SAFE_BROWSING_THREAT_BILLING](https://developer.android.com/reference/android/webkit/WebViewClient.html#SAFE_BROWSING_THREAT_BILLING)
        pub const SAFE_BROWSING_THREAT_BILLING : i32 = 4;

        /// public static final [SAFE_BROWSING_THREAT_MALWARE](https://developer.android.com/reference/android/webkit/WebViewClient.html#SAFE_BROWSING_THREAT_MALWARE)
        pub const SAFE_BROWSING_THREAT_MALWARE : i32 = 1;

        /// public static final [SAFE_BROWSING_THREAT_PHISHING](https://developer.android.com/reference/android/webkit/WebViewClient.html#SAFE_BROWSING_THREAT_PHISHING)
        pub const SAFE_BROWSING_THREAT_PHISHING : i32 = 2;

        /// public static final [SAFE_BROWSING_THREAT_UNKNOWN](https://developer.android.com/reference/android/webkit/WebViewClient.html#SAFE_BROWSING_THREAT_UNKNOWN)
        pub const SAFE_BROWSING_THREAT_UNKNOWN : i32 = 0;

        /// public static final [SAFE_BROWSING_THREAT_UNWANTED_SOFTWARE](https://developer.android.com/reference/android/webkit/WebViewClient.html#SAFE_BROWSING_THREAT_UNWANTED_SOFTWARE)
        pub const SAFE_BROWSING_THREAT_UNWANTED_SOFTWARE : i32 = 3;
    }
}
