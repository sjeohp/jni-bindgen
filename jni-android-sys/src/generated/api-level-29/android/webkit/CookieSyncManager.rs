// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-webkit-CookieSyncManager"))]
__jni_bindgen! {
    /// public final class [CookieSyncManager](https://developer.android.com/reference/android/webkit/CookieSyncManager.html)
    ///
    /// Required feature: android-webkit-CookieSyncManager
    #[deprecated] public final class CookieSyncManager ("android/webkit/CookieSyncManager") extends crate::java::lang::Object, implements crate::java::lang::Runnable {

        // // Not emitting: Non-public method
        // /// [CookieSyncManager](https://developer.android.com/reference/android/webkit/CookieSyncManager.html#CookieSyncManager())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::webkit::CookieSyncManager>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/webkit/CookieSyncManager", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/CookieSyncManager\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getInstance](https://developer.android.com/reference/android/webkit/CookieSyncManager.html#getInstance())
        ///
        /// Required features: "android-webkit-CookieSyncManager"
        #[cfg(any(feature = "all", all(feature = "android-webkit-CookieSyncManager")))]
        #[deprecated] pub fn getInstance<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::webkit::CookieSyncManager>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/CookieSyncManager", java.flags == PUBLIC | STATIC, .name == "getInstance", .descriptor == "()Landroid/webkit/CookieSyncManager;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/webkit/CookieSyncManager\0", "getInstance\0", "()Landroid/webkit/CookieSyncManager;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createInstance](https://developer.android.com/reference/android/webkit/CookieSyncManager.html#createInstance(android.content.Context))
        ///
        /// Required features: "android-content-Context", "android-webkit-CookieSyncManager"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-webkit-CookieSyncManager")))]
        #[deprecated] pub fn createInstance<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::webkit::CookieSyncManager>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/CookieSyncManager", java.flags == PUBLIC | STATIC, .name == "createInstance", .descriptor == "(Landroid/content/Context;)Landroid/webkit/CookieSyncManager;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/webkit/CookieSyncManager\0", "createInstance\0", "(Landroid/content/Context;)Landroid/webkit/CookieSyncManager;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [sync](https://developer.android.com/reference/android/webkit/CookieSyncManager.html#sync())
        #[deprecated] pub fn sync<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/CookieSyncManager", java.flags == PUBLIC, .name == "sync", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/CookieSyncManager\0", "sync\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [syncFromRamToFlash](https://developer.android.com/reference/android/webkit/CookieSyncManager.html#syncFromRamToFlash())
        // #[deprecated] fn syncFromRamToFlash<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/webkit/CookieSyncManager", java.flags == PROTECTED, .name == "syncFromRamToFlash", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/CookieSyncManager\0", "syncFromRamToFlash\0", "()V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [resetSync](https://developer.android.com/reference/android/webkit/CookieSyncManager.html#resetSync())
        #[deprecated] pub fn resetSync<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/CookieSyncManager", java.flags == PUBLIC, .name == "resetSync", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/CookieSyncManager\0", "resetSync\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [startSync](https://developer.android.com/reference/android/webkit/CookieSyncManager.html#startSync())
        #[deprecated] pub fn startSync<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/CookieSyncManager", java.flags == PUBLIC, .name == "startSync", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/CookieSyncManager\0", "startSync\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [stopSync](https://developer.android.com/reference/android/webkit/CookieSyncManager.html#stopSync())
        #[deprecated] pub fn stopSync<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/CookieSyncManager", java.flags == PUBLIC, .name == "stopSync", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/CookieSyncManager\0", "stopSync\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [run](https://developer.android.com/reference/android/webkit/CookieSyncManager.html#run())
        #[deprecated] pub fn run<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/CookieSyncManager", java.flags == PUBLIC, .name == "run", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/CookieSyncManager\0", "run\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
