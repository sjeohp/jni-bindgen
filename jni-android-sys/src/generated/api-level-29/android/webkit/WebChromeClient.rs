// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-webkit-WebChromeClient"))]
__jni_bindgen! {
    /// public class [WebChromeClient](https://developer.android.com/reference/android/webkit/WebChromeClient.html)
    ///
    /// Required feature: android-webkit-WebChromeClient
    public class WebChromeClient ("android/webkit/WebChromeClient") extends crate::java::lang::Object {

        /// [WebChromeClient](https://developer.android.com/reference/android/webkit/WebChromeClient.html#WebChromeClient())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::webkit::WebChromeClient>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/WebChromeClient", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/WebChromeClient\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onProgressChanged](https://developer.android.com/reference/android/webkit/WebChromeClient.html#onProgressChanged(android.webkit.WebView,%20int))
        ///
        /// Required features: "android-webkit-WebView"
        #[cfg(any(feature = "all", all(feature = "android-webkit-WebView")))]
        pub fn onProgressChanged<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::webkit::WebView>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/WebChromeClient", java.flags == PUBLIC, .name == "onProgressChanged", .descriptor == "(Landroid/webkit/WebView;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/WebChromeClient\0", "onProgressChanged\0", "(Landroid/webkit/WebView;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onReceivedTitle](https://developer.android.com/reference/android/webkit/WebChromeClient.html#onReceivedTitle(android.webkit.WebView,%20java.lang.String))
        ///
        /// Required features: "android-webkit-WebView", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-webkit-WebView", feature = "java-lang-String")))]
        pub fn onReceivedTitle<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::webkit::WebView>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/WebChromeClient", java.flags == PUBLIC, .name == "onReceivedTitle", .descriptor == "(Landroid/webkit/WebView;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/WebChromeClient\0", "onReceivedTitle\0", "(Landroid/webkit/WebView;Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onReceivedIcon](https://developer.android.com/reference/android/webkit/WebChromeClient.html#onReceivedIcon(android.webkit.WebView,%20android.graphics.Bitmap))
        ///
        /// Required features: "android-graphics-Bitmap", "android-webkit-WebView"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Bitmap", feature = "android-webkit-WebView")))]
        pub fn onReceivedIcon<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::webkit::WebView>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Bitmap>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/WebChromeClient", java.flags == PUBLIC, .name == "onReceivedIcon", .descriptor == "(Landroid/webkit/WebView;Landroid/graphics/Bitmap;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/WebChromeClient\0", "onReceivedIcon\0", "(Landroid/webkit/WebView;Landroid/graphics/Bitmap;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onReceivedTouchIconUrl](https://developer.android.com/reference/android/webkit/WebChromeClient.html#onReceivedTouchIconUrl(android.webkit.WebView,%20java.lang.String,%20boolean))
        ///
        /// Required features: "android-webkit-WebView", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-webkit-WebView", feature = "java-lang-String")))]
        pub fn onReceivedTouchIconUrl<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::webkit::WebView>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/WebChromeClient", java.flags == PUBLIC, .name == "onReceivedTouchIconUrl", .descriptor == "(Landroid/webkit/WebView;Ljava/lang/String;Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/WebChromeClient\0", "onReceivedTouchIconUrl\0", "(Landroid/webkit/WebView;Ljava/lang/String;Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onShowCustomView](https://developer.android.com/reference/android/webkit/WebChromeClient.html#onShowCustomView(android.view.View,%20android.webkit.WebChromeClient.CustomViewCallback))
        ///
        /// Required features: "android-view-View", "android-webkit-WebChromeClient_CustomViewCallback"
        #[cfg(any(feature = "all", all(feature = "android-view-View", feature = "android-webkit-WebChromeClient_CustomViewCallback")))]
        pub fn onShowCustomView_View_CustomViewCallback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::webkit::WebChromeClient_CustomViewCallback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/WebChromeClient", java.flags == PUBLIC, .name == "onShowCustomView", .descriptor == "(Landroid/view/View;Landroid/webkit/WebChromeClient$CustomViewCallback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/WebChromeClient\0", "onShowCustomView\0", "(Landroid/view/View;Landroid/webkit/WebChromeClient$CustomViewCallback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onShowCustomView](https://developer.android.com/reference/android/webkit/WebChromeClient.html#onShowCustomView(android.view.View,%20int,%20android.webkit.WebChromeClient.CustomViewCallback))
        ///
        /// Required features: "android-view-View", "android-webkit-WebChromeClient_CustomViewCallback"
        #[cfg(any(feature = "all", all(feature = "android-view-View", feature = "android-webkit-WebChromeClient_CustomViewCallback")))]
        #[deprecated] pub fn onShowCustomView_View_int_CustomViewCallback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::webkit::WebChromeClient_CustomViewCallback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/WebChromeClient", java.flags == PUBLIC, .name == "onShowCustomView", .descriptor == "(Landroid/view/View;ILandroid/webkit/WebChromeClient$CustomViewCallback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/WebChromeClient\0", "onShowCustomView\0", "(Landroid/view/View;ILandroid/webkit/WebChromeClient$CustomViewCallback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onHideCustomView](https://developer.android.com/reference/android/webkit/WebChromeClient.html#onHideCustomView())
        pub fn onHideCustomView<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/WebChromeClient", java.flags == PUBLIC, .name == "onHideCustomView", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/WebChromeClient\0", "onHideCustomView\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onCreateWindow](https://developer.android.com/reference/android/webkit/WebChromeClient.html#onCreateWindow(android.webkit.WebView,%20boolean,%20boolean,%20android.os.Message))
        ///
        /// Required features: "android-os-Message", "android-webkit-WebView"
        #[cfg(any(feature = "all", all(feature = "android-os-Message", feature = "android-webkit-WebView")))]
        pub fn onCreateWindow<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::webkit::WebView>>, arg1: bool, arg2: bool, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Message>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/WebChromeClient", java.flags == PUBLIC, .name == "onCreateWindow", .descriptor == "(Landroid/webkit/WebView;ZZLandroid/os/Message;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/WebChromeClient\0", "onCreateWindow\0", "(Landroid/webkit/WebView;ZZLandroid/os/Message;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onRequestFocus](https://developer.android.com/reference/android/webkit/WebChromeClient.html#onRequestFocus(android.webkit.WebView))
        ///
        /// Required features: "android-webkit-WebView"
        #[cfg(any(feature = "all", all(feature = "android-webkit-WebView")))]
        pub fn onRequestFocus<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::webkit::WebView>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/WebChromeClient", java.flags == PUBLIC, .name == "onRequestFocus", .descriptor == "(Landroid/webkit/WebView;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/WebChromeClient\0", "onRequestFocus\0", "(Landroid/webkit/WebView;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onCloseWindow](https://developer.android.com/reference/android/webkit/WebChromeClient.html#onCloseWindow(android.webkit.WebView))
        ///
        /// Required features: "android-webkit-WebView"
        #[cfg(any(feature = "all", all(feature = "android-webkit-WebView")))]
        pub fn onCloseWindow<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::webkit::WebView>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/WebChromeClient", java.flags == PUBLIC, .name == "onCloseWindow", .descriptor == "(Landroid/webkit/WebView;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/WebChromeClient\0", "onCloseWindow\0", "(Landroid/webkit/WebView;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onJsAlert](https://developer.android.com/reference/android/webkit/WebChromeClient.html#onJsAlert(android.webkit.WebView,%20java.lang.String,%20java.lang.String,%20android.webkit.JsResult))
        ///
        /// Required features: "android-webkit-JsResult", "android-webkit-WebView", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-webkit-JsResult", feature = "android-webkit-WebView", feature = "java-lang-String")))]
        pub fn onJsAlert<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::webkit::WebView>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::webkit::JsResult>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/WebChromeClient", java.flags == PUBLIC, .name == "onJsAlert", .descriptor == "(Landroid/webkit/WebView;Ljava/lang/String;Ljava/lang/String;Landroid/webkit/JsResult;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/WebChromeClient\0", "onJsAlert\0", "(Landroid/webkit/WebView;Ljava/lang/String;Ljava/lang/String;Landroid/webkit/JsResult;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onJsConfirm](https://developer.android.com/reference/android/webkit/WebChromeClient.html#onJsConfirm(android.webkit.WebView,%20java.lang.String,%20java.lang.String,%20android.webkit.JsResult))
        ///
        /// Required features: "android-webkit-JsResult", "android-webkit-WebView", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-webkit-JsResult", feature = "android-webkit-WebView", feature = "java-lang-String")))]
        pub fn onJsConfirm<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::webkit::WebView>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::webkit::JsResult>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/WebChromeClient", java.flags == PUBLIC, .name == "onJsConfirm", .descriptor == "(Landroid/webkit/WebView;Ljava/lang/String;Ljava/lang/String;Landroid/webkit/JsResult;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/WebChromeClient\0", "onJsConfirm\0", "(Landroid/webkit/WebView;Ljava/lang/String;Ljava/lang/String;Landroid/webkit/JsResult;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onJsPrompt](https://developer.android.com/reference/android/webkit/WebChromeClient.html#onJsPrompt(android.webkit.WebView,%20java.lang.String,%20java.lang.String,%20java.lang.String,%20android.webkit.JsPromptResult))
        ///
        /// Required features: "android-webkit-JsPromptResult", "android-webkit-WebView", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-webkit-JsPromptResult", feature = "android-webkit-WebView", feature = "java-lang-String")))]
        pub fn onJsPrompt<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::webkit::WebView>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::webkit::JsPromptResult>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/WebChromeClient", java.flags == PUBLIC, .name == "onJsPrompt", .descriptor == "(Landroid/webkit/WebView;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/webkit/JsPromptResult;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/WebChromeClient\0", "onJsPrompt\0", "(Landroid/webkit/WebView;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/webkit/JsPromptResult;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onJsBeforeUnload](https://developer.android.com/reference/android/webkit/WebChromeClient.html#onJsBeforeUnload(android.webkit.WebView,%20java.lang.String,%20java.lang.String,%20android.webkit.JsResult))
        ///
        /// Required features: "android-webkit-JsResult", "android-webkit-WebView", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-webkit-JsResult", feature = "android-webkit-WebView", feature = "java-lang-String")))]
        pub fn onJsBeforeUnload<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::webkit::WebView>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::webkit::JsResult>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/WebChromeClient", java.flags == PUBLIC, .name == "onJsBeforeUnload", .descriptor == "(Landroid/webkit/WebView;Ljava/lang/String;Ljava/lang/String;Landroid/webkit/JsResult;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/WebChromeClient\0", "onJsBeforeUnload\0", "(Landroid/webkit/WebView;Ljava/lang/String;Ljava/lang/String;Landroid/webkit/JsResult;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onExceededDatabaseQuota](https://developer.android.com/reference/android/webkit/WebChromeClient.html#onExceededDatabaseQuota(java.lang.String,%20java.lang.String,%20long,%20long,%20long,%20android.webkit.WebStorage.QuotaUpdater))
        ///
        /// Required features: "android-webkit-WebStorage_QuotaUpdater", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-webkit-WebStorage_QuotaUpdater", feature = "java-lang-String")))]
        #[deprecated] pub fn onExceededDatabaseQuota<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: i64, arg3: i64, arg4: i64, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::webkit::WebStorage_QuotaUpdater>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/WebChromeClient", java.flags == PUBLIC, .name == "onExceededDatabaseQuota", .descriptor == "(Ljava/lang/String;Ljava/lang/String;JJJLandroid/webkit/WebStorage$QuotaUpdater;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/WebChromeClient\0", "onExceededDatabaseQuota\0", "(Ljava/lang/String;Ljava/lang/String;JJJLandroid/webkit/WebStorage$QuotaUpdater;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onReachedMaxAppCacheSize](https://developer.android.com/reference/android/webkit/WebChromeClient.html#onReachedMaxAppCacheSize(long,%20long,%20android.webkit.WebStorage.QuotaUpdater))
        ///
        /// Required features: "android-webkit-WebStorage_QuotaUpdater"
        #[cfg(any(feature = "all", all(feature = "android-webkit-WebStorage_QuotaUpdater")))]
        #[deprecated] pub fn onReachedMaxAppCacheSize<'env>(&'env self, arg0: i64, arg1: i64, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::webkit::WebStorage_QuotaUpdater>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/WebChromeClient", java.flags == PUBLIC, .name == "onReachedMaxAppCacheSize", .descriptor == "(JJLandroid/webkit/WebStorage$QuotaUpdater;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/WebChromeClient\0", "onReachedMaxAppCacheSize\0", "(JJLandroid/webkit/WebStorage$QuotaUpdater;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onGeolocationPermissionsShowPrompt](https://developer.android.com/reference/android/webkit/WebChromeClient.html#onGeolocationPermissionsShowPrompt(java.lang.String,%20android.webkit.GeolocationPermissions.Callback))
        ///
        /// Required features: "android-webkit-GeolocationPermissions_Callback", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-webkit-GeolocationPermissions_Callback", feature = "java-lang-String")))]
        pub fn onGeolocationPermissionsShowPrompt<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::webkit::GeolocationPermissions_Callback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/WebChromeClient", java.flags == PUBLIC, .name == "onGeolocationPermissionsShowPrompt", .descriptor == "(Ljava/lang/String;Landroid/webkit/GeolocationPermissions$Callback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/WebChromeClient\0", "onGeolocationPermissionsShowPrompt\0", "(Ljava/lang/String;Landroid/webkit/GeolocationPermissions$Callback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onGeolocationPermissionsHidePrompt](https://developer.android.com/reference/android/webkit/WebChromeClient.html#onGeolocationPermissionsHidePrompt())
        pub fn onGeolocationPermissionsHidePrompt<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/WebChromeClient", java.flags == PUBLIC, .name == "onGeolocationPermissionsHidePrompt", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/WebChromeClient\0", "onGeolocationPermissionsHidePrompt\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onPermissionRequest](https://developer.android.com/reference/android/webkit/WebChromeClient.html#onPermissionRequest(android.webkit.PermissionRequest))
        ///
        /// Required features: "android-webkit-PermissionRequest"
        #[cfg(any(feature = "all", all(feature = "android-webkit-PermissionRequest")))]
        pub fn onPermissionRequest<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::webkit::PermissionRequest>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/WebChromeClient", java.flags == PUBLIC, .name == "onPermissionRequest", .descriptor == "(Landroid/webkit/PermissionRequest;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/WebChromeClient\0", "onPermissionRequest\0", "(Landroid/webkit/PermissionRequest;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onPermissionRequestCanceled](https://developer.android.com/reference/android/webkit/WebChromeClient.html#onPermissionRequestCanceled(android.webkit.PermissionRequest))
        ///
        /// Required features: "android-webkit-PermissionRequest"
        #[cfg(any(feature = "all", all(feature = "android-webkit-PermissionRequest")))]
        pub fn onPermissionRequestCanceled<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::webkit::PermissionRequest>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/WebChromeClient", java.flags == PUBLIC, .name == "onPermissionRequestCanceled", .descriptor == "(Landroid/webkit/PermissionRequest;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/WebChromeClient\0", "onPermissionRequestCanceled\0", "(Landroid/webkit/PermissionRequest;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onJsTimeout](https://developer.android.com/reference/android/webkit/WebChromeClient.html#onJsTimeout())
        #[deprecated] pub fn onJsTimeout<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/WebChromeClient", java.flags == PUBLIC, .name == "onJsTimeout", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/WebChromeClient\0", "onJsTimeout\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onConsoleMessage](https://developer.android.com/reference/android/webkit/WebChromeClient.html#onConsoleMessage(java.lang.String,%20int,%20java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        #[deprecated] pub fn onConsoleMessage_String_int_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/WebChromeClient", java.flags == PUBLIC, .name == "onConsoleMessage", .descriptor == "(Ljava/lang/String;ILjava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/WebChromeClient\0", "onConsoleMessage\0", "(Ljava/lang/String;ILjava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onConsoleMessage](https://developer.android.com/reference/android/webkit/WebChromeClient.html#onConsoleMessage(android.webkit.ConsoleMessage))
        ///
        /// Required features: "android-webkit-ConsoleMessage"
        #[cfg(any(feature = "all", all(feature = "android-webkit-ConsoleMessage")))]
        pub fn onConsoleMessage_ConsoleMessage<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::webkit::ConsoleMessage>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/WebChromeClient", java.flags == PUBLIC, .name == "onConsoleMessage", .descriptor == "(Landroid/webkit/ConsoleMessage;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/WebChromeClient\0", "onConsoleMessage\0", "(Landroid/webkit/ConsoleMessage;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDefaultVideoPoster](https://developer.android.com/reference/android/webkit/WebChromeClient.html#getDefaultVideoPoster())
        ///
        /// Required features: "android-graphics-Bitmap"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Bitmap")))]
        pub fn getDefaultVideoPoster<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Bitmap>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/WebChromeClient", java.flags == PUBLIC, .name == "getDefaultVideoPoster", .descriptor == "()Landroid/graphics/Bitmap;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/WebChromeClient\0", "getDefaultVideoPoster\0", "()Landroid/graphics/Bitmap;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getVideoLoadingProgressView](https://developer.android.com/reference/android/webkit/WebChromeClient.html#getVideoLoadingProgressView())
        ///
        /// Required features: "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-view-View")))]
        pub fn getVideoLoadingProgressView<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::View>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/WebChromeClient", java.flags == PUBLIC, .name == "getVideoLoadingProgressView", .descriptor == "()Landroid/view/View;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/WebChromeClient\0", "getVideoLoadingProgressView\0", "()Landroid/view/View;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getVisitedHistory](https://developer.android.com/reference/android/webkit/WebChromeClient.html#getVisitedHistory(android.webkit.ValueCallback))
        ///
        /// Required features: "android-webkit-ValueCallback"
        #[cfg(any(feature = "all", all(feature = "android-webkit-ValueCallback")))]
        pub fn getVisitedHistory<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::webkit::ValueCallback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/WebChromeClient", java.flags == PUBLIC, .name == "getVisitedHistory", .descriptor == "(Landroid/webkit/ValueCallback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/WebChromeClient\0", "getVisitedHistory\0", "(Landroid/webkit/ValueCallback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onShowFileChooser](https://developer.android.com/reference/android/webkit/WebChromeClient.html#onShowFileChooser(android.webkit.WebView,%20android.webkit.ValueCallback,%20android.webkit.WebChromeClient.FileChooserParams))
        ///
        /// Required features: "android-webkit-ValueCallback", "android-webkit-WebChromeClient_FileChooserParams", "android-webkit-WebView"
        #[cfg(any(feature = "all", all(feature = "android-webkit-ValueCallback", feature = "android-webkit-WebChromeClient_FileChooserParams", feature = "android-webkit-WebView")))]
        pub fn onShowFileChooser<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::webkit::WebView>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::webkit::ValueCallback>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::webkit::WebChromeClient_FileChooserParams>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/webkit/WebChromeClient", java.flags == PUBLIC, .name == "onShowFileChooser", .descriptor == "(Landroid/webkit/WebView;Landroid/webkit/ValueCallback;Landroid/webkit/WebChromeClient$FileChooserParams;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/webkit/WebChromeClient\0", "onShowFileChooser\0", "(Landroid/webkit/WebView;Landroid/webkit/ValueCallback;Landroid/webkit/WebChromeClient$FileChooserParams;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
