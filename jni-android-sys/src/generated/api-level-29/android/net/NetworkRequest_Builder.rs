// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-net-NetworkRequest_Builder"))]
__jni_bindgen! {
    /// public class [NetworkRequest.Builder](https://developer.android.com/reference/android/net/NetworkRequest.Builder.html)
    ///
    /// Required feature: android-net-NetworkRequest_Builder
    public class NetworkRequest_Builder ("android/net/NetworkRequest$Builder") extends crate::java::lang::Object {

        /// [Builder](https://developer.android.com/reference/android/net/NetworkRequest.Builder.html#Builder())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::net::NetworkRequest_Builder>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/NetworkRequest$Builder", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/NetworkRequest$Builder\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [build](https://developer.android.com/reference/android/net/NetworkRequest.Builder.html#build())
        ///
        /// Required features: "android-net-NetworkRequest"
        #[cfg(any(feature = "all", all(feature = "android-net-NetworkRequest")))]
        pub fn build<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::NetworkRequest>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/NetworkRequest$Builder", java.flags == PUBLIC, .name == "build", .descriptor == "()Landroid/net/NetworkRequest;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/NetworkRequest$Builder\0", "build\0", "()Landroid/net/NetworkRequest;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addCapability](https://developer.android.com/reference/android/net/NetworkRequest.Builder.html#addCapability(int))
        ///
        /// Required features: "android-net-NetworkRequest_Builder"
        #[cfg(any(feature = "all", all(feature = "android-net-NetworkRequest_Builder")))]
        pub fn addCapability<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::NetworkRequest_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/NetworkRequest$Builder", java.flags == PUBLIC, .name == "addCapability", .descriptor == "(I)Landroid/net/NetworkRequest$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/NetworkRequest$Builder\0", "addCapability\0", "(I)Landroid/net/NetworkRequest$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeCapability](https://developer.android.com/reference/android/net/NetworkRequest.Builder.html#removeCapability(int))
        ///
        /// Required features: "android-net-NetworkRequest_Builder"
        #[cfg(any(feature = "all", all(feature = "android-net-NetworkRequest_Builder")))]
        pub fn removeCapability<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::NetworkRequest_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/NetworkRequest$Builder", java.flags == PUBLIC, .name == "removeCapability", .descriptor == "(I)Landroid/net/NetworkRequest$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/NetworkRequest$Builder\0", "removeCapability\0", "(I)Landroid/net/NetworkRequest$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addTransportType](https://developer.android.com/reference/android/net/NetworkRequest.Builder.html#addTransportType(int))
        ///
        /// Required features: "android-net-NetworkRequest_Builder"
        #[cfg(any(feature = "all", all(feature = "android-net-NetworkRequest_Builder")))]
        pub fn addTransportType<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::NetworkRequest_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/NetworkRequest$Builder", java.flags == PUBLIC, .name == "addTransportType", .descriptor == "(I)Landroid/net/NetworkRequest$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/NetworkRequest$Builder\0", "addTransportType\0", "(I)Landroid/net/NetworkRequest$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeTransportType](https://developer.android.com/reference/android/net/NetworkRequest.Builder.html#removeTransportType(int))
        ///
        /// Required features: "android-net-NetworkRequest_Builder"
        #[cfg(any(feature = "all", all(feature = "android-net-NetworkRequest_Builder")))]
        pub fn removeTransportType<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::NetworkRequest_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/NetworkRequest$Builder", java.flags == PUBLIC, .name == "removeTransportType", .descriptor == "(I)Landroid/net/NetworkRequest$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/NetworkRequest$Builder\0", "removeTransportType\0", "(I)Landroid/net/NetworkRequest$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setNetworkSpecifier](https://developer.android.com/reference/android/net/NetworkRequest.Builder.html#setNetworkSpecifier(java.lang.String))
        ///
        /// Required features: "android-net-NetworkRequest_Builder", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-NetworkRequest_Builder", feature = "java-lang-String")))]
        pub fn setNetworkSpecifier_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::NetworkRequest_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/NetworkRequest$Builder", java.flags == PUBLIC, .name == "setNetworkSpecifier", .descriptor == "(Ljava/lang/String;)Landroid/net/NetworkRequest$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/NetworkRequest$Builder\0", "setNetworkSpecifier\0", "(Ljava/lang/String;)Landroid/net/NetworkRequest$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setNetworkSpecifier](https://developer.android.com/reference/android/net/NetworkRequest.Builder.html#setNetworkSpecifier(android.net.NetworkSpecifier))
        ///
        /// Required features: "android-net-NetworkRequest_Builder", "android-net-NetworkSpecifier"
        #[cfg(any(feature = "all", all(feature = "android-net-NetworkRequest_Builder", feature = "android-net-NetworkSpecifier")))]
        pub fn setNetworkSpecifier_NetworkSpecifier<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::NetworkSpecifier>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::NetworkRequest_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/NetworkRequest$Builder", java.flags == PUBLIC, .name == "setNetworkSpecifier", .descriptor == "(Landroid/net/NetworkSpecifier;)Landroid/net/NetworkRequest$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/NetworkRequest$Builder\0", "setNetworkSpecifier\0", "(Landroid/net/NetworkSpecifier;)Landroid/net/NetworkRequest$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
