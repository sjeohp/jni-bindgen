// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-net-wifi-hotspot2-pps-Credential"))]
__jni_bindgen! {
    /// public final class [Credential](https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.html)
    ///
    /// Required feature: android-net-wifi-hotspot2-pps-Credential
    public final class Credential ("android/net/wifi/hotspot2/pps/Credential") extends crate::java::lang::Object, implements crate::android::os::Parcelable {

        /// [Credential](https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.html#Credential())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::net::wifi::hotspot2::pps::Credential>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/hotspot2/pps/Credential", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/hotspot2/pps/Credential\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [Credential](https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.html#Credential(android.net.wifi.hotspot2.pps.Credential))
        ///
        /// Required features: "android-net-wifi-hotspot2-pps-Credential"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-hotspot2-pps-Credential")))]
        pub fn new_Credential<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::hotspot2::pps::Credential>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::net::wifi::hotspot2::pps::Credential>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/hotspot2/pps/Credential", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/net/wifi/hotspot2/pps/Credential;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/hotspot2/pps/Credential\0", "<init>\0", "(Landroid/net/wifi/hotspot2/pps/Credential;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setRealm](https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.html#setRealm(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn setRealm<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/hotspot2/pps/Credential", java.flags == PUBLIC, .name == "setRealm", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/hotspot2/pps/Credential\0", "setRealm\0", "(Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRealm](https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.html#getRealm())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getRealm<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/hotspot2/pps/Credential", java.flags == PUBLIC, .name == "getRealm", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/hotspot2/pps/Credential\0", "getRealm\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setUserCredential](https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.html#setUserCredential(android.net.wifi.hotspot2.pps.Credential.UserCredential))
        ///
        /// Required features: "android-net-wifi-hotspot2-pps-Credential_UserCredential"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-hotspot2-pps-Credential_UserCredential")))]
        pub fn setUserCredential<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::hotspot2::pps::Credential_UserCredential>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/hotspot2/pps/Credential", java.flags == PUBLIC, .name == "setUserCredential", .descriptor == "(Landroid/net/wifi/hotspot2/pps/Credential$UserCredential;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/hotspot2/pps/Credential\0", "setUserCredential\0", "(Landroid/net/wifi/hotspot2/pps/Credential$UserCredential;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getUserCredential](https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.html#getUserCredential())
        ///
        /// Required features: "android-net-wifi-hotspot2-pps-Credential_UserCredential"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-hotspot2-pps-Credential_UserCredential")))]
        pub fn getUserCredential<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::wifi::hotspot2::pps::Credential_UserCredential>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/hotspot2/pps/Credential", java.flags == PUBLIC, .name == "getUserCredential", .descriptor == "()Landroid/net/wifi/hotspot2/pps/Credential$UserCredential;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/hotspot2/pps/Credential\0", "getUserCredential\0", "()Landroid/net/wifi/hotspot2/pps/Credential$UserCredential;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setCertCredential](https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.html#setCertCredential(android.net.wifi.hotspot2.pps.Credential.CertificateCredential))
        ///
        /// Required features: "android-net-wifi-hotspot2-pps-Credential_CertificateCredential"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-hotspot2-pps-Credential_CertificateCredential")))]
        pub fn setCertCredential<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::hotspot2::pps::Credential_CertificateCredential>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/hotspot2/pps/Credential", java.flags == PUBLIC, .name == "setCertCredential", .descriptor == "(Landroid/net/wifi/hotspot2/pps/Credential$CertificateCredential;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/hotspot2/pps/Credential\0", "setCertCredential\0", "(Landroid/net/wifi/hotspot2/pps/Credential$CertificateCredential;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCertCredential](https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.html#getCertCredential())
        ///
        /// Required features: "android-net-wifi-hotspot2-pps-Credential_CertificateCredential"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-hotspot2-pps-Credential_CertificateCredential")))]
        pub fn getCertCredential<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::wifi::hotspot2::pps::Credential_CertificateCredential>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/hotspot2/pps/Credential", java.flags == PUBLIC, .name == "getCertCredential", .descriptor == "()Landroid/net/wifi/hotspot2/pps/Credential$CertificateCredential;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/hotspot2/pps/Credential\0", "getCertCredential\0", "()Landroid/net/wifi/hotspot2/pps/Credential$CertificateCredential;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setSimCredential](https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.html#setSimCredential(android.net.wifi.hotspot2.pps.Credential.SimCredential))
        ///
        /// Required features: "android-net-wifi-hotspot2-pps-Credential_SimCredential"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-hotspot2-pps-Credential_SimCredential")))]
        pub fn setSimCredential<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::hotspot2::pps::Credential_SimCredential>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/hotspot2/pps/Credential", java.flags == PUBLIC, .name == "setSimCredential", .descriptor == "(Landroid/net/wifi/hotspot2/pps/Credential$SimCredential;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/hotspot2/pps/Credential\0", "setSimCredential\0", "(Landroid/net/wifi/hotspot2/pps/Credential$SimCredential;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSimCredential](https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.html#getSimCredential())
        ///
        /// Required features: "android-net-wifi-hotspot2-pps-Credential_SimCredential"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-hotspot2-pps-Credential_SimCredential")))]
        pub fn getSimCredential<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::wifi::hotspot2::pps::Credential_SimCredential>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/hotspot2/pps/Credential", java.flags == PUBLIC, .name == "getSimCredential", .descriptor == "()Landroid/net/wifi/hotspot2/pps/Credential$SimCredential;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/hotspot2/pps/Credential\0", "getSimCredential\0", "()Landroid/net/wifi/hotspot2/pps/Credential$SimCredential;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setCaCertificate](https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.html#setCaCertificate(java.security.cert.X509Certificate))
        ///
        /// Required features: "java-security-cert-X509Certificate"
        #[cfg(any(feature = "all", all(feature = "java-security-cert-X509Certificate")))]
        pub fn setCaCertificate<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::cert::X509Certificate>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/hotspot2/pps/Credential", java.flags == PUBLIC, .name == "setCaCertificate", .descriptor == "(Ljava/security/cert/X509Certificate;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/hotspot2/pps/Credential\0", "setCaCertificate\0", "(Ljava/security/cert/X509Certificate;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCaCertificate](https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.html#getCaCertificate())
        ///
        /// Required features: "java-security-cert-X509Certificate"
        #[cfg(any(feature = "all", all(feature = "java-security-cert-X509Certificate")))]
        pub fn getCaCertificate<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::security::cert::X509Certificate>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/hotspot2/pps/Credential", java.flags == PUBLIC, .name == "getCaCertificate", .descriptor == "()Ljava/security/cert/X509Certificate;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/hotspot2/pps/Credential\0", "getCaCertificate\0", "()Ljava/security/cert/X509Certificate;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setClientCertificateChain](https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.html#setClientCertificateChain(java.security.cert.X509Certificate%5B%5D))
        ///
        /// Required features: "java-security-cert-X509Certificate"
        #[cfg(any(feature = "all", all(feature = "java-security-cert-X509Certificate")))]
        pub fn setClientCertificateChain<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::security::cert::X509Certificate, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/hotspot2/pps/Credential", java.flags == PUBLIC, .name == "setClientCertificateChain", .descriptor == "([Ljava/security/cert/X509Certificate;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/hotspot2/pps/Credential\0", "setClientCertificateChain\0", "([Ljava/security/cert/X509Certificate;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getClientCertificateChain](https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.html#getClientCertificateChain())
        ///
        /// Required features: "java-security-cert-X509Certificate"
        #[cfg(any(feature = "all", all(feature = "java-security-cert-X509Certificate")))]
        pub fn getClientCertificateChain<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::security::cert::X509Certificate, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/hotspot2/pps/Credential", java.flags == PUBLIC, .name == "getClientCertificateChain", .descriptor == "()[Ljava/security/cert/X509Certificate;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/hotspot2/pps/Credential\0", "getClientCertificateChain\0", "()[Ljava/security/cert/X509Certificate;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setClientPrivateKey](https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.html#setClientPrivateKey(java.security.PrivateKey))
        ///
        /// Required features: "java-security-PrivateKey"
        #[cfg(any(feature = "all", all(feature = "java-security-PrivateKey")))]
        pub fn setClientPrivateKey<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::PrivateKey>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/hotspot2/pps/Credential", java.flags == PUBLIC, .name == "setClientPrivateKey", .descriptor == "(Ljava/security/PrivateKey;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/hotspot2/pps/Credential\0", "setClientPrivateKey\0", "(Ljava/security/PrivateKey;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getClientPrivateKey](https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.html#getClientPrivateKey())
        ///
        /// Required features: "java-security-PrivateKey"
        #[cfg(any(feature = "all", all(feature = "java-security-PrivateKey")))]
        pub fn getClientPrivateKey<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::security::PrivateKey>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/hotspot2/pps/Credential", java.flags == PUBLIC, .name == "getClientPrivateKey", .descriptor == "()Ljava/security/PrivateKey;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/hotspot2/pps/Credential\0", "getClientPrivateKey\0", "()Ljava/security/PrivateKey;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [describeContents](https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.html#describeContents())
        pub fn describeContents<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/hotspot2/pps/Credential", java.flags == PUBLIC, .name == "describeContents", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/hotspot2/pps/Credential\0", "describeContents\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [writeToParcel](https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.html#writeToParcel(android.os.Parcel,%20int))
        ///
        /// Required features: "android-os-Parcel"
        #[cfg(any(feature = "all", all(feature = "android-os-Parcel")))]
        pub fn writeToParcel<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Parcel>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/hotspot2/pps/Credential", java.flags == PUBLIC, .name == "writeToParcel", .descriptor == "(Landroid/os/Parcel;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/hotspot2/pps/Credential\0", "writeToParcel\0", "(Landroid/os/Parcel;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [equals](https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.html#equals(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn equals<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/hotspot2/pps/Credential", java.flags == PUBLIC, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/hotspot2/pps/Credential\0", "equals\0", "(Ljava/lang/Object;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hashCode](https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.html#hashCode())
        pub fn hashCode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/hotspot2/pps/Credential", java.flags == PUBLIC, .name == "hashCode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/hotspot2/pps/Credential\0", "hashCode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/hotspot2/pps/Credential", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/hotspot2/pps/Credential\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// **get** public static final [CREATOR](https://developer.android.com/reference/android/net/wifi/hotspot2/pps/Credential.html#CREATOR)
        ///
        /// Required feature: android-os-Parcelable_Creator
        #[cfg(any(feature = "all", feature = "android-os-Parcelable_Creator"))]
        pub fn CREATOR<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Parcelable_Creator>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/net/wifi/hotspot2/pps/Credential\0", "CREATOR\0", "Landroid/os/Parcelable$Creator;\0");
                env.get_static_object_field(class, field)
            }
        }
    }
}
