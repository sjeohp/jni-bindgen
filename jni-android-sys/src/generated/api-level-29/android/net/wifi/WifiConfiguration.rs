// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-net-wifi-WifiConfiguration"))]
__jni_bindgen! {
    /// public class [WifiConfiguration](https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html)
    ///
    /// Required feature: android-net-wifi-WifiConfiguration
    #[deprecated] public class WifiConfiguration ("android/net/wifi/WifiConfiguration") extends crate::java::lang::Object, implements crate::android::os::Parcelable {

        /// [WifiConfiguration](https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#WifiConfiguration())
        #[deprecated] pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::net::wifi::WifiConfiguration>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiConfiguration", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiConfiguration\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRandomizedMacAddress](https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#getRandomizedMacAddress())
        ///
        /// Required features: "android-net-MacAddress"
        #[cfg(any(feature = "all", all(feature = "android-net-MacAddress")))]
        #[deprecated] pub fn getRandomizedMacAddress<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::MacAddress>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiConfiguration", java.flags == PUBLIC, .name == "getRandomizedMacAddress", .descriptor == "()Landroid/net/MacAddress;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiConfiguration\0", "getRandomizedMacAddress\0", "()Landroid/net/MacAddress;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isPasspoint](https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#isPasspoint())
        #[deprecated] pub fn isPasspoint<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiConfiguration", java.flags == PUBLIC, .name == "isPasspoint", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiConfiguration\0", "isPasspoint\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        #[deprecated] pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiConfiguration", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiConfiguration\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getHttpProxy](https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#getHttpProxy())
        ///
        /// Required features: "android-net-ProxyInfo"
        #[cfg(any(feature = "all", all(feature = "android-net-ProxyInfo")))]
        #[deprecated] pub fn getHttpProxy<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::ProxyInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiConfiguration", java.flags == PUBLIC, .name == "getHttpProxy", .descriptor == "()Landroid/net/ProxyInfo;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiConfiguration\0", "getHttpProxy\0", "()Landroid/net/ProxyInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setHttpProxy](https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#setHttpProxy(android.net.ProxyInfo))
        ///
        /// Required features: "android-net-ProxyInfo"
        #[cfg(any(feature = "all", all(feature = "android-net-ProxyInfo")))]
        #[deprecated] pub fn setHttpProxy<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::ProxyInfo>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiConfiguration", java.flags == PUBLIC, .name == "setHttpProxy", .descriptor == "(Landroid/net/ProxyInfo;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiConfiguration\0", "setHttpProxy\0", "(Landroid/net/ProxyInfo;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [describeContents](https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#describeContents())
        pub fn describeContents<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiConfiguration", java.flags == PUBLIC, .name == "describeContents", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiConfiguration\0", "describeContents\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [writeToParcel](https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#writeToParcel(android.os.Parcel,%20int))
        ///
        /// Required features: "android-os-Parcel"
        #[cfg(any(feature = "all", all(feature = "android-os-Parcel")))]
        pub fn writeToParcel<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Parcel>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiConfiguration", java.flags == PUBLIC, .name == "writeToParcel", .descriptor == "(Landroid/os/Parcel;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiConfiguration\0", "writeToParcel\0", "(Landroid/os/Parcel;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// **get** public [BSSID](https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#BSSID)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        #[deprecated] pub fn BSSID<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/net/wifi/WifiConfiguration\0", "BSSID\0", "Ljava/lang/String;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [BSSID](https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#BSSID)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        #[deprecated] pub fn set_BSSID<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::java::lang::String>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/net/wifi/WifiConfiguration\0", "BSSID\0", "Ljava/lang/String;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [FQDN](https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#FQDN)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        #[deprecated] pub fn FQDN<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/net/wifi/WifiConfiguration\0", "FQDN\0", "Ljava/lang/String;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [FQDN](https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#FQDN)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        #[deprecated] pub fn set_FQDN<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::java::lang::String>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/net/wifi/WifiConfiguration\0", "FQDN\0", "Ljava/lang/String;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [SSID](https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#SSID)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        #[deprecated] pub fn SSID<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/net/wifi/WifiConfiguration\0", "SSID\0", "Ljava/lang/String;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [SSID](https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#SSID)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        #[deprecated] pub fn set_SSID<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::java::lang::String>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/net/wifi/WifiConfiguration\0", "SSID\0", "Ljava/lang/String;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [allowedAuthAlgorithms](https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#allowedAuthAlgorithms)
        ///
        /// Required feature: java-util-BitSet
        #[cfg(any(feature = "all", feature = "java-util-BitSet"))]
        #[deprecated] pub fn allowedAuthAlgorithms<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::BitSet>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/net/wifi/WifiConfiguration\0", "allowedAuthAlgorithms\0", "Ljava/util/BitSet;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [allowedAuthAlgorithms](https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#allowedAuthAlgorithms)
        ///
        /// Required feature: java-util-BitSet
        #[cfg(any(feature = "all", feature = "java-util-BitSet"))]
        #[deprecated] pub fn set_allowedAuthAlgorithms<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::java::util::BitSet>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/net/wifi/WifiConfiguration\0", "allowedAuthAlgorithms\0", "Ljava/util/BitSet;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [allowedGroupCiphers](https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#allowedGroupCiphers)
        ///
        /// Required feature: java-util-BitSet
        #[cfg(any(feature = "all", feature = "java-util-BitSet"))]
        #[deprecated] pub fn allowedGroupCiphers<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::BitSet>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/net/wifi/WifiConfiguration\0", "allowedGroupCiphers\0", "Ljava/util/BitSet;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [allowedGroupCiphers](https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#allowedGroupCiphers)
        ///
        /// Required feature: java-util-BitSet
        #[cfg(any(feature = "all", feature = "java-util-BitSet"))]
        #[deprecated] pub fn set_allowedGroupCiphers<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::java::util::BitSet>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/net/wifi/WifiConfiguration\0", "allowedGroupCiphers\0", "Ljava/util/BitSet;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [allowedGroupManagementCiphers](https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#allowedGroupManagementCiphers)
        ///
        /// Required feature: java-util-BitSet
        #[cfg(any(feature = "all", feature = "java-util-BitSet"))]
        #[deprecated] pub fn allowedGroupManagementCiphers<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::BitSet>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/net/wifi/WifiConfiguration\0", "allowedGroupManagementCiphers\0", "Ljava/util/BitSet;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [allowedGroupManagementCiphers](https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#allowedGroupManagementCiphers)
        ///
        /// Required feature: java-util-BitSet
        #[cfg(any(feature = "all", feature = "java-util-BitSet"))]
        #[deprecated] pub fn set_allowedGroupManagementCiphers<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::java::util::BitSet>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/net/wifi/WifiConfiguration\0", "allowedGroupManagementCiphers\0", "Ljava/util/BitSet;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [allowedKeyManagement](https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#allowedKeyManagement)
        ///
        /// Required feature: java-util-BitSet
        #[cfg(any(feature = "all", feature = "java-util-BitSet"))]
        #[deprecated] pub fn allowedKeyManagement<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::BitSet>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/net/wifi/WifiConfiguration\0", "allowedKeyManagement\0", "Ljava/util/BitSet;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [allowedKeyManagement](https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#allowedKeyManagement)
        ///
        /// Required feature: java-util-BitSet
        #[cfg(any(feature = "all", feature = "java-util-BitSet"))]
        #[deprecated] pub fn set_allowedKeyManagement<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::java::util::BitSet>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/net/wifi/WifiConfiguration\0", "allowedKeyManagement\0", "Ljava/util/BitSet;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [allowedPairwiseCiphers](https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#allowedPairwiseCiphers)
        ///
        /// Required feature: java-util-BitSet
        #[cfg(any(feature = "all", feature = "java-util-BitSet"))]
        #[deprecated] pub fn allowedPairwiseCiphers<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::BitSet>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/net/wifi/WifiConfiguration\0", "allowedPairwiseCiphers\0", "Ljava/util/BitSet;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [allowedPairwiseCiphers](https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#allowedPairwiseCiphers)
        ///
        /// Required feature: java-util-BitSet
        #[cfg(any(feature = "all", feature = "java-util-BitSet"))]
        #[deprecated] pub fn set_allowedPairwiseCiphers<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::java::util::BitSet>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/net/wifi/WifiConfiguration\0", "allowedPairwiseCiphers\0", "Ljava/util/BitSet;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [allowedProtocols](https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#allowedProtocols)
        ///
        /// Required feature: java-util-BitSet
        #[cfg(any(feature = "all", feature = "java-util-BitSet"))]
        #[deprecated] pub fn allowedProtocols<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::BitSet>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/net/wifi/WifiConfiguration\0", "allowedProtocols\0", "Ljava/util/BitSet;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [allowedProtocols](https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#allowedProtocols)
        ///
        /// Required feature: java-util-BitSet
        #[cfg(any(feature = "all", feature = "java-util-BitSet"))]
        #[deprecated] pub fn set_allowedProtocols<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::java::util::BitSet>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/net/wifi/WifiConfiguration\0", "allowedProtocols\0", "Ljava/util/BitSet;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [allowedSuiteBCiphers](https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#allowedSuiteBCiphers)
        ///
        /// Required feature: java-util-BitSet
        #[cfg(any(feature = "all", feature = "java-util-BitSet"))]
        #[deprecated] pub fn allowedSuiteBCiphers<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::BitSet>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/net/wifi/WifiConfiguration\0", "allowedSuiteBCiphers\0", "Ljava/util/BitSet;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [allowedSuiteBCiphers](https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#allowedSuiteBCiphers)
        ///
        /// Required feature: java-util-BitSet
        #[cfg(any(feature = "all", feature = "java-util-BitSet"))]
        #[deprecated] pub fn set_allowedSuiteBCiphers<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::java::util::BitSet>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/net/wifi/WifiConfiguration\0", "allowedSuiteBCiphers\0", "Ljava/util/BitSet;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [enterpriseConfig](https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#enterpriseConfig)
        ///
        /// Required feature: android-net-wifi-WifiEnterpriseConfig
        #[cfg(any(feature = "all", feature = "android-net-wifi-WifiEnterpriseConfig"))]
        #[deprecated] pub fn enterpriseConfig<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::wifi::WifiEnterpriseConfig>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/net/wifi/WifiConfiguration\0", "enterpriseConfig\0", "Landroid/net/wifi/WifiEnterpriseConfig;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [enterpriseConfig](https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#enterpriseConfig)
        ///
        /// Required feature: android-net-wifi-WifiEnterpriseConfig
        #[cfg(any(feature = "all", feature = "android-net-wifi-WifiEnterpriseConfig"))]
        #[deprecated] pub fn set_enterpriseConfig<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::android::net::wifi::WifiEnterpriseConfig>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/net/wifi/WifiConfiguration\0", "enterpriseConfig\0", "Landroid/net/wifi/WifiEnterpriseConfig;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [hiddenSSID](https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#hiddenSSID)
        #[deprecated] pub fn hiddenSSID<'env>(&'env self) -> bool {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/net/wifi/WifiConfiguration\0", "hiddenSSID\0", "Z\0");
                env.get_boolean_field(class, field)
            }
        }

        /// **set** public [hiddenSSID](https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#hiddenSSID)
        #[deprecated] pub fn set_hiddenSSID<'env>(&'env self, value: bool) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/net/wifi/WifiConfiguration\0", "hiddenSSID\0", "Z\0");
                env.set_boolean_field(class, field, value)
            }
        }

        /// **get** public [isHomeProviderNetwork](https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#isHomeProviderNetwork)
        #[deprecated] pub fn isHomeProviderNetwork<'env>(&'env self) -> bool {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/net/wifi/WifiConfiguration\0", "isHomeProviderNetwork\0", "Z\0");
                env.get_boolean_field(class, field)
            }
        }

        /// **set** public [isHomeProviderNetwork](https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#isHomeProviderNetwork)
        #[deprecated] pub fn set_isHomeProviderNetwork<'env>(&'env self, value: bool) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/net/wifi/WifiConfiguration\0", "isHomeProviderNetwork\0", "Z\0");
                env.set_boolean_field(class, field, value)
            }
        }

        /// **get** public [networkId](https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#networkId)
        #[deprecated] pub fn networkId<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/net/wifi/WifiConfiguration\0", "networkId\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [networkId](https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#networkId)
        #[deprecated] pub fn set_networkId<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/net/wifi/WifiConfiguration\0", "networkId\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [preSharedKey](https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#preSharedKey)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        #[deprecated] pub fn preSharedKey<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/net/wifi/WifiConfiguration\0", "preSharedKey\0", "Ljava/lang/String;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [preSharedKey](https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#preSharedKey)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        #[deprecated] pub fn set_preSharedKey<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::java::lang::String>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/net/wifi/WifiConfiguration\0", "preSharedKey\0", "Ljava/lang/String;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [priority](https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#priority)
        #[deprecated] pub fn priority<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/net/wifi/WifiConfiguration\0", "priority\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [priority](https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#priority)
        #[deprecated] pub fn set_priority<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/net/wifi/WifiConfiguration\0", "priority\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [providerFriendlyName](https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#providerFriendlyName)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        #[deprecated] pub fn providerFriendlyName<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/net/wifi/WifiConfiguration\0", "providerFriendlyName\0", "Ljava/lang/String;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [providerFriendlyName](https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#providerFriendlyName)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        #[deprecated] pub fn set_providerFriendlyName<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::java::lang::String>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/net/wifi/WifiConfiguration\0", "providerFriendlyName\0", "Ljava/lang/String;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [roamingConsortiumIds](https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#roamingConsortiumIds)
        #[deprecated] pub fn roamingConsortiumIds<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::LongArray>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/net/wifi/WifiConfiguration\0", "roamingConsortiumIds\0", "[J\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [roamingConsortiumIds](https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#roamingConsortiumIds)
        #[deprecated] pub fn set_roamingConsortiumIds<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj __jni_bindgen::LongArray>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/net/wifi/WifiConfiguration\0", "roamingConsortiumIds\0", "[J\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [status](https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#status)
        #[deprecated] pub fn status<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/net/wifi/WifiConfiguration\0", "status\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [status](https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#status)
        #[deprecated] pub fn set_status<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/net/wifi/WifiConfiguration\0", "status\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [wepKeys](https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#wepKeys)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        #[deprecated] pub fn wepKeys<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/net/wifi/WifiConfiguration\0", "wepKeys\0", "[Ljava/lang/String;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [wepKeys](https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#wepKeys)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        #[deprecated] pub fn set_wepKeys<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/net/wifi/WifiConfiguration\0", "wepKeys\0", "[Ljava/lang/String;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [wepTxKeyIndex](https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#wepTxKeyIndex)
        #[deprecated] pub fn wepTxKeyIndex<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/net/wifi/WifiConfiguration\0", "wepTxKeyIndex\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [wepTxKeyIndex](https://developer.android.com/reference/android/net/wifi/WifiConfiguration.html#wepTxKeyIndex)
        #[deprecated] pub fn set_wepTxKeyIndex<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/net/wifi/WifiConfiguration\0", "wepTxKeyIndex\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }
    }
}
