// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-net-wifi-WifiNetworkSuggestion_Builder"))]
__jni_bindgen! {
    /// public final class [WifiNetworkSuggestion.Builder](https://developer.android.com/reference/android/net/wifi/WifiNetworkSuggestion.Builder.html)
    ///
    /// Required feature: android-net-wifi-WifiNetworkSuggestion_Builder
    public final class WifiNetworkSuggestion_Builder ("android/net/wifi/WifiNetworkSuggestion$Builder") extends crate::java::lang::Object {

        /// [Builder](https://developer.android.com/reference/android/net/wifi/WifiNetworkSuggestion.Builder.html#Builder())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::net::wifi::WifiNetworkSuggestion_Builder>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiNetworkSuggestion$Builder", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiNetworkSuggestion$Builder\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setSsid](https://developer.android.com/reference/android/net/wifi/WifiNetworkSuggestion.Builder.html#setSsid(java.lang.String))
        ///
        /// Required features: "android-net-wifi-WifiNetworkSuggestion_Builder", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-WifiNetworkSuggestion_Builder", feature = "java-lang-String")))]
        pub fn setSsid<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::wifi::WifiNetworkSuggestion_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiNetworkSuggestion$Builder", java.flags == PUBLIC, .name == "setSsid", .descriptor == "(Ljava/lang/String;)Landroid/net/wifi/WifiNetworkSuggestion$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiNetworkSuggestion$Builder\0", "setSsid\0", "(Ljava/lang/String;)Landroid/net/wifi/WifiNetworkSuggestion$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setBssid](https://developer.android.com/reference/android/net/wifi/WifiNetworkSuggestion.Builder.html#setBssid(android.net.MacAddress))
        ///
        /// Required features: "android-net-MacAddress", "android-net-wifi-WifiNetworkSuggestion_Builder"
        #[cfg(any(feature = "all", all(feature = "android-net-MacAddress", feature = "android-net-wifi-WifiNetworkSuggestion_Builder")))]
        pub fn setBssid<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::MacAddress>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::wifi::WifiNetworkSuggestion_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiNetworkSuggestion$Builder", java.flags == PUBLIC, .name == "setBssid", .descriptor == "(Landroid/net/MacAddress;)Landroid/net/wifi/WifiNetworkSuggestion$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiNetworkSuggestion$Builder\0", "setBssid\0", "(Landroid/net/MacAddress;)Landroid/net/wifi/WifiNetworkSuggestion$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setIsEnhancedOpen](https://developer.android.com/reference/android/net/wifi/WifiNetworkSuggestion.Builder.html#setIsEnhancedOpen(boolean))
        ///
        /// Required features: "android-net-wifi-WifiNetworkSuggestion_Builder"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-WifiNetworkSuggestion_Builder")))]
        pub fn setIsEnhancedOpen<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::wifi::WifiNetworkSuggestion_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiNetworkSuggestion$Builder", java.flags == PUBLIC, .name == "setIsEnhancedOpen", .descriptor == "(Z)Landroid/net/wifi/WifiNetworkSuggestion$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiNetworkSuggestion$Builder\0", "setIsEnhancedOpen\0", "(Z)Landroid/net/wifi/WifiNetworkSuggestion$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setWpa2Passphrase](https://developer.android.com/reference/android/net/wifi/WifiNetworkSuggestion.Builder.html#setWpa2Passphrase(java.lang.String))
        ///
        /// Required features: "android-net-wifi-WifiNetworkSuggestion_Builder", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-WifiNetworkSuggestion_Builder", feature = "java-lang-String")))]
        pub fn setWpa2Passphrase<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::wifi::WifiNetworkSuggestion_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiNetworkSuggestion$Builder", java.flags == PUBLIC, .name == "setWpa2Passphrase", .descriptor == "(Ljava/lang/String;)Landroid/net/wifi/WifiNetworkSuggestion$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiNetworkSuggestion$Builder\0", "setWpa2Passphrase\0", "(Ljava/lang/String;)Landroid/net/wifi/WifiNetworkSuggestion$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setWpa3Passphrase](https://developer.android.com/reference/android/net/wifi/WifiNetworkSuggestion.Builder.html#setWpa3Passphrase(java.lang.String))
        ///
        /// Required features: "android-net-wifi-WifiNetworkSuggestion_Builder", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-WifiNetworkSuggestion_Builder", feature = "java-lang-String")))]
        pub fn setWpa3Passphrase<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::wifi::WifiNetworkSuggestion_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiNetworkSuggestion$Builder", java.flags == PUBLIC, .name == "setWpa3Passphrase", .descriptor == "(Ljava/lang/String;)Landroid/net/wifi/WifiNetworkSuggestion$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiNetworkSuggestion$Builder\0", "setWpa3Passphrase\0", "(Ljava/lang/String;)Landroid/net/wifi/WifiNetworkSuggestion$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setWpa2EnterpriseConfig](https://developer.android.com/reference/android/net/wifi/WifiNetworkSuggestion.Builder.html#setWpa2EnterpriseConfig(android.net.wifi.WifiEnterpriseConfig))
        ///
        /// Required features: "android-net-wifi-WifiEnterpriseConfig", "android-net-wifi-WifiNetworkSuggestion_Builder"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-WifiEnterpriseConfig", feature = "android-net-wifi-WifiNetworkSuggestion_Builder")))]
        pub fn setWpa2EnterpriseConfig<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::WifiEnterpriseConfig>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::wifi::WifiNetworkSuggestion_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiNetworkSuggestion$Builder", java.flags == PUBLIC, .name == "setWpa2EnterpriseConfig", .descriptor == "(Landroid/net/wifi/WifiEnterpriseConfig;)Landroid/net/wifi/WifiNetworkSuggestion$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiNetworkSuggestion$Builder\0", "setWpa2EnterpriseConfig\0", "(Landroid/net/wifi/WifiEnterpriseConfig;)Landroid/net/wifi/WifiNetworkSuggestion$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setWpa3EnterpriseConfig](https://developer.android.com/reference/android/net/wifi/WifiNetworkSuggestion.Builder.html#setWpa3EnterpriseConfig(android.net.wifi.WifiEnterpriseConfig))
        ///
        /// Required features: "android-net-wifi-WifiEnterpriseConfig", "android-net-wifi-WifiNetworkSuggestion_Builder"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-WifiEnterpriseConfig", feature = "android-net-wifi-WifiNetworkSuggestion_Builder")))]
        pub fn setWpa3EnterpriseConfig<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::WifiEnterpriseConfig>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::wifi::WifiNetworkSuggestion_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiNetworkSuggestion$Builder", java.flags == PUBLIC, .name == "setWpa3EnterpriseConfig", .descriptor == "(Landroid/net/wifi/WifiEnterpriseConfig;)Landroid/net/wifi/WifiNetworkSuggestion$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiNetworkSuggestion$Builder\0", "setWpa3EnterpriseConfig\0", "(Landroid/net/wifi/WifiEnterpriseConfig;)Landroid/net/wifi/WifiNetworkSuggestion$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setIsHiddenSsid](https://developer.android.com/reference/android/net/wifi/WifiNetworkSuggestion.Builder.html#setIsHiddenSsid(boolean))
        ///
        /// Required features: "android-net-wifi-WifiNetworkSuggestion_Builder"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-WifiNetworkSuggestion_Builder")))]
        pub fn setIsHiddenSsid<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::wifi::WifiNetworkSuggestion_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiNetworkSuggestion$Builder", java.flags == PUBLIC, .name == "setIsHiddenSsid", .descriptor == "(Z)Landroid/net/wifi/WifiNetworkSuggestion$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiNetworkSuggestion$Builder\0", "setIsHiddenSsid\0", "(Z)Landroid/net/wifi/WifiNetworkSuggestion$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setIsAppInteractionRequired](https://developer.android.com/reference/android/net/wifi/WifiNetworkSuggestion.Builder.html#setIsAppInteractionRequired(boolean))
        ///
        /// Required features: "android-net-wifi-WifiNetworkSuggestion_Builder"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-WifiNetworkSuggestion_Builder")))]
        pub fn setIsAppInteractionRequired<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::wifi::WifiNetworkSuggestion_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiNetworkSuggestion$Builder", java.flags == PUBLIC, .name == "setIsAppInteractionRequired", .descriptor == "(Z)Landroid/net/wifi/WifiNetworkSuggestion$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiNetworkSuggestion$Builder\0", "setIsAppInteractionRequired\0", "(Z)Landroid/net/wifi/WifiNetworkSuggestion$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setIsUserInteractionRequired](https://developer.android.com/reference/android/net/wifi/WifiNetworkSuggestion.Builder.html#setIsUserInteractionRequired(boolean))
        ///
        /// Required features: "android-net-wifi-WifiNetworkSuggestion_Builder"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-WifiNetworkSuggestion_Builder")))]
        pub fn setIsUserInteractionRequired<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::wifi::WifiNetworkSuggestion_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiNetworkSuggestion$Builder", java.flags == PUBLIC, .name == "setIsUserInteractionRequired", .descriptor == "(Z)Landroid/net/wifi/WifiNetworkSuggestion$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiNetworkSuggestion$Builder\0", "setIsUserInteractionRequired\0", "(Z)Landroid/net/wifi/WifiNetworkSuggestion$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPriority](https://developer.android.com/reference/android/net/wifi/WifiNetworkSuggestion.Builder.html#setPriority(int))
        ///
        /// Required features: "android-net-wifi-WifiNetworkSuggestion_Builder"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-WifiNetworkSuggestion_Builder")))]
        pub fn setPriority<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::wifi::WifiNetworkSuggestion_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiNetworkSuggestion$Builder", java.flags == PUBLIC, .name == "setPriority", .descriptor == "(I)Landroid/net/wifi/WifiNetworkSuggestion$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiNetworkSuggestion$Builder\0", "setPriority\0", "(I)Landroid/net/wifi/WifiNetworkSuggestion$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setIsMetered](https://developer.android.com/reference/android/net/wifi/WifiNetworkSuggestion.Builder.html#setIsMetered(boolean))
        ///
        /// Required features: "android-net-wifi-WifiNetworkSuggestion_Builder"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-WifiNetworkSuggestion_Builder")))]
        pub fn setIsMetered<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::wifi::WifiNetworkSuggestion_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiNetworkSuggestion$Builder", java.flags == PUBLIC, .name == "setIsMetered", .descriptor == "(Z)Landroid/net/wifi/WifiNetworkSuggestion$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiNetworkSuggestion$Builder\0", "setIsMetered\0", "(Z)Landroid/net/wifi/WifiNetworkSuggestion$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [build](https://developer.android.com/reference/android/net/wifi/WifiNetworkSuggestion.Builder.html#build())
        ///
        /// Required features: "android-net-wifi-WifiNetworkSuggestion"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-WifiNetworkSuggestion")))]
        pub fn build<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::wifi::WifiNetworkSuggestion>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiNetworkSuggestion$Builder", java.flags == PUBLIC, .name == "build", .descriptor == "()Landroid/net/wifi/WifiNetworkSuggestion;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiNetworkSuggestion$Builder\0", "build\0", "()Landroid/net/wifi/WifiNetworkSuggestion;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
