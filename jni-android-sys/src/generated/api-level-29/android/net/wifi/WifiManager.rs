// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-net-wifi-WifiManager"))]
__jni_bindgen! {
    /// public class [WifiManager](https://developer.android.com/reference/android/net/wifi/WifiManager.html)
    ///
    /// Required feature: android-net-wifi-WifiManager
    public class WifiManager ("android/net/wifi/WifiManager") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [WifiManager](https://developer.android.com/reference/android/net/wifi/WifiManager.html#WifiManager())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::net::wifi::WifiManager>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/net/wifi/WifiManager", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiManager\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getConfiguredNetworks](https://developer.android.com/reference/android/net/wifi/WifiManager.html#getConfiguredNetworks())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        #[deprecated] pub fn getConfiguredNetworks<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiManager", java.flags == PUBLIC, .name == "getConfiguredNetworks", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiManager\0", "getConfiguredNetworks\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addNetwork](https://developer.android.com/reference/android/net/wifi/WifiManager.html#addNetwork(android.net.wifi.WifiConfiguration))
        ///
        /// Required features: "android-net-wifi-WifiConfiguration"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-WifiConfiguration")))]
        #[deprecated] pub fn addNetwork<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::WifiConfiguration>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiManager", java.flags == PUBLIC, .name == "addNetwork", .descriptor == "(Landroid/net/wifi/WifiConfiguration;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiManager\0", "addNetwork\0", "(Landroid/net/wifi/WifiConfiguration;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateNetwork](https://developer.android.com/reference/android/net/wifi/WifiManager.html#updateNetwork(android.net.wifi.WifiConfiguration))
        ///
        /// Required features: "android-net-wifi-WifiConfiguration"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-WifiConfiguration")))]
        #[deprecated] pub fn updateNetwork<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::WifiConfiguration>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiManager", java.flags == PUBLIC, .name == "updateNetwork", .descriptor == "(Landroid/net/wifi/WifiConfiguration;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiManager\0", "updateNetwork\0", "(Landroid/net/wifi/WifiConfiguration;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addNetworkSuggestions](https://developer.android.com/reference/android/net/wifi/WifiManager.html#addNetworkSuggestions(java.util.List))
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn addNetworkSuggestions<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiManager", java.flags == PUBLIC, .name == "addNetworkSuggestions", .descriptor == "(Ljava/util/List;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiManager\0", "addNetworkSuggestions\0", "(Ljava/util/List;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeNetworkSuggestions](https://developer.android.com/reference/android/net/wifi/WifiManager.html#removeNetworkSuggestions(java.util.List))
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn removeNetworkSuggestions<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiManager", java.flags == PUBLIC, .name == "removeNetworkSuggestions", .descriptor == "(Ljava/util/List;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiManager\0", "removeNetworkSuggestions\0", "(Ljava/util/List;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMaxNumberOfNetworkSuggestionsPerApp](https://developer.android.com/reference/android/net/wifi/WifiManager.html#getMaxNumberOfNetworkSuggestionsPerApp())
        pub fn getMaxNumberOfNetworkSuggestionsPerApp<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiManager", java.flags == PUBLIC, .name == "getMaxNumberOfNetworkSuggestionsPerApp", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiManager\0", "getMaxNumberOfNetworkSuggestionsPerApp\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addOrUpdatePasspointConfiguration](https://developer.android.com/reference/android/net/wifi/WifiManager.html#addOrUpdatePasspointConfiguration(android.net.wifi.hotspot2.PasspointConfiguration))
        ///
        /// Required features: "android-net-wifi-hotspot2-PasspointConfiguration"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-hotspot2-PasspointConfiguration")))]
        pub fn addOrUpdatePasspointConfiguration<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::hotspot2::PasspointConfiguration>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiManager", java.flags == PUBLIC, .name == "addOrUpdatePasspointConfiguration", .descriptor == "(Landroid/net/wifi/hotspot2/PasspointConfiguration;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiManager\0", "addOrUpdatePasspointConfiguration\0", "(Landroid/net/wifi/hotspot2/PasspointConfiguration;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removePasspointConfiguration](https://developer.android.com/reference/android/net/wifi/WifiManager.html#removePasspointConfiguration(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        #[deprecated] pub fn removePasspointConfiguration<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiManager", java.flags == PUBLIC, .name == "removePasspointConfiguration", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiManager\0", "removePasspointConfiguration\0", "(Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPasspointConfigurations](https://developer.android.com/reference/android/net/wifi/WifiManager.html#getPasspointConfigurations())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        #[deprecated] pub fn getPasspointConfigurations<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiManager", java.flags == PUBLIC, .name == "getPasspointConfigurations", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiManager\0", "getPasspointConfigurations\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeNetwork](https://developer.android.com/reference/android/net/wifi/WifiManager.html#removeNetwork(int))
        #[deprecated] pub fn removeNetwork<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiManager", java.flags == PUBLIC, .name == "removeNetwork", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiManager\0", "removeNetwork\0", "(I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [enableNetwork](https://developer.android.com/reference/android/net/wifi/WifiManager.html#enableNetwork(int,%20boolean))
        #[deprecated] pub fn enableNetwork<'env>(&'env self, arg0: i32, arg1: bool) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiManager", java.flags == PUBLIC, .name == "enableNetwork", .descriptor == "(IZ)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiManager\0", "enableNetwork\0", "(IZ)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [disableNetwork](https://developer.android.com/reference/android/net/wifi/WifiManager.html#disableNetwork(int))
        #[deprecated] pub fn disableNetwork<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiManager", java.flags == PUBLIC, .name == "disableNetwork", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiManager\0", "disableNetwork\0", "(I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [disconnect](https://developer.android.com/reference/android/net/wifi/WifiManager.html#disconnect())
        #[deprecated] pub fn disconnect<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiManager", java.flags == PUBLIC, .name == "disconnect", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiManager\0", "disconnect\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [reconnect](https://developer.android.com/reference/android/net/wifi/WifiManager.html#reconnect())
        #[deprecated] pub fn reconnect<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiManager", java.flags == PUBLIC, .name == "reconnect", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiManager\0", "reconnect\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [reassociate](https://developer.android.com/reference/android/net/wifi/WifiManager.html#reassociate())
        #[deprecated] pub fn reassociate<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiManager", java.flags == PUBLIC, .name == "reassociate", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiManager\0", "reassociate\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [pingSupplicant](https://developer.android.com/reference/android/net/wifi/WifiManager.html#pingSupplicant())
        #[deprecated] pub fn pingSupplicant<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiManager", java.flags == PUBLIC, .name == "pingSupplicant", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiManager\0", "pingSupplicant\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [is5GHzBandSupported](https://developer.android.com/reference/android/net/wifi/WifiManager.html#is5GHzBandSupported())
        pub fn is5GHzBandSupported<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiManager", java.flags == PUBLIC, .name == "is5GHzBandSupported", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiManager\0", "is5GHzBandSupported\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isP2pSupported](https://developer.android.com/reference/android/net/wifi/WifiManager.html#isP2pSupported())
        pub fn isP2pSupported<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiManager", java.flags == PUBLIC, .name == "isP2pSupported", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiManager\0", "isP2pSupported\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isDeviceToApRttSupported](https://developer.android.com/reference/android/net/wifi/WifiManager.html#isDeviceToApRttSupported())
        #[deprecated] pub fn isDeviceToApRttSupported<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiManager", java.flags == PUBLIC, .name == "isDeviceToApRttSupported", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiManager\0", "isDeviceToApRttSupported\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isPreferredNetworkOffloadSupported](https://developer.android.com/reference/android/net/wifi/WifiManager.html#isPreferredNetworkOffloadSupported())
        pub fn isPreferredNetworkOffloadSupported<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiManager", java.flags == PUBLIC, .name == "isPreferredNetworkOffloadSupported", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiManager\0", "isPreferredNetworkOffloadSupported\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isTdlsSupported](https://developer.android.com/reference/android/net/wifi/WifiManager.html#isTdlsSupported())
        pub fn isTdlsSupported<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiManager", java.flags == PUBLIC, .name == "isTdlsSupported", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiManager\0", "isTdlsSupported\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isEnhancedPowerReportingSupported](https://developer.android.com/reference/android/net/wifi/WifiManager.html#isEnhancedPowerReportingSupported())
        pub fn isEnhancedPowerReportingSupported<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiManager", java.flags == PUBLIC, .name == "isEnhancedPowerReportingSupported", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiManager\0", "isEnhancedPowerReportingSupported\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [startScan](https://developer.android.com/reference/android/net/wifi/WifiManager.html#startScan())
        #[deprecated] pub fn startScan<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiManager", java.flags == PUBLIC, .name == "startScan", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiManager\0", "startScan\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getConnectionInfo](https://developer.android.com/reference/android/net/wifi/WifiManager.html#getConnectionInfo())
        ///
        /// Required features: "android-net-wifi-WifiInfo"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-WifiInfo")))]
        pub fn getConnectionInfo<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::wifi::WifiInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiManager", java.flags == PUBLIC, .name == "getConnectionInfo", .descriptor == "()Landroid/net/wifi/WifiInfo;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiManager\0", "getConnectionInfo\0", "()Landroid/net/wifi/WifiInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getScanResults](https://developer.android.com/reference/android/net/wifi/WifiManager.html#getScanResults())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getScanResults<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiManager", java.flags == PUBLIC, .name == "getScanResults", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiManager\0", "getScanResults\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isScanAlwaysAvailable](https://developer.android.com/reference/android/net/wifi/WifiManager.html#isScanAlwaysAvailable())
        #[deprecated] pub fn isScanAlwaysAvailable<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiManager", java.flags == PUBLIC, .name == "isScanAlwaysAvailable", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiManager\0", "isScanAlwaysAvailable\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [saveConfiguration](https://developer.android.com/reference/android/net/wifi/WifiManager.html#saveConfiguration())
        #[deprecated] pub fn saveConfiguration<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiManager", java.flags == PUBLIC, .name == "saveConfiguration", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiManager\0", "saveConfiguration\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDhcpInfo](https://developer.android.com/reference/android/net/wifi/WifiManager.html#getDhcpInfo())
        ///
        /// Required features: "android-net-DhcpInfo"
        #[cfg(any(feature = "all", all(feature = "android-net-DhcpInfo")))]
        pub fn getDhcpInfo<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::DhcpInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiManager", java.flags == PUBLIC, .name == "getDhcpInfo", .descriptor == "()Landroid/net/DhcpInfo;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiManager\0", "getDhcpInfo\0", "()Landroid/net/DhcpInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setWifiEnabled](https://developer.android.com/reference/android/net/wifi/WifiManager.html#setWifiEnabled(boolean))
        #[deprecated] pub fn setWifiEnabled<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiManager", java.flags == PUBLIC, .name == "setWifiEnabled", .descriptor == "(Z)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiManager\0", "setWifiEnabled\0", "(Z)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getWifiState](https://developer.android.com/reference/android/net/wifi/WifiManager.html#getWifiState())
        pub fn getWifiState<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiManager", java.flags == PUBLIC, .name == "getWifiState", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiManager\0", "getWifiState\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isWifiEnabled](https://developer.android.com/reference/android/net/wifi/WifiManager.html#isWifiEnabled())
        pub fn isWifiEnabled<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiManager", java.flags == PUBLIC, .name == "isWifiEnabled", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiManager\0", "isWifiEnabled\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [calculateSignalLevel](https://developer.android.com/reference/android/net/wifi/WifiManager.html#calculateSignalLevel(int,%20int))
        pub fn calculateSignalLevel<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiManager", java.flags == PUBLIC | STATIC, .name == "calculateSignalLevel", .descriptor == "(II)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/net/wifi/WifiManager\0", "calculateSignalLevel\0", "(II)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [compareSignalLevel](https://developer.android.com/reference/android/net/wifi/WifiManager.html#compareSignalLevel(int,%20int))
        pub fn compareSignalLevel<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiManager", java.flags == PUBLIC | STATIC, .name == "compareSignalLevel", .descriptor == "(II)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/net/wifi/WifiManager\0", "compareSignalLevel\0", "(II)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [startLocalOnlyHotspot](https://developer.android.com/reference/android/net/wifi/WifiManager.html#startLocalOnlyHotspot(android.net.wifi.WifiManager.LocalOnlyHotspotCallback,%20android.os.Handler))
        ///
        /// Required features: "android-net-wifi-WifiManager_LocalOnlyHotspotCallback", "android-os-Handler"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-WifiManager_LocalOnlyHotspotCallback", feature = "android-os-Handler")))]
        pub fn startLocalOnlyHotspot<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::WifiManager_LocalOnlyHotspotCallback>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiManager", java.flags == PUBLIC, .name == "startLocalOnlyHotspot", .descriptor == "(Landroid/net/wifi/WifiManager$LocalOnlyHotspotCallback;Landroid/os/Handler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiManager\0", "startLocalOnlyHotspot\0", "(Landroid/net/wifi/WifiManager$LocalOnlyHotspotCallback;Landroid/os/Handler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTdlsEnabled](https://developer.android.com/reference/android/net/wifi/WifiManager.html#setTdlsEnabled(java.net.InetAddress,%20boolean))
        ///
        /// Required features: "java-net-InetAddress"
        #[cfg(any(feature = "all", all(feature = "java-net-InetAddress")))]
        pub fn setTdlsEnabled<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::InetAddress>>, arg1: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiManager", java.flags == PUBLIC, .name == "setTdlsEnabled", .descriptor == "(Ljava/net/InetAddress;Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiManager\0", "setTdlsEnabled\0", "(Ljava/net/InetAddress;Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTdlsEnabledWithMacAddress](https://developer.android.com/reference/android/net/wifi/WifiManager.html#setTdlsEnabledWithMacAddress(java.lang.String,%20boolean))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn setTdlsEnabledWithMacAddress<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiManager", java.flags == PUBLIC, .name == "setTdlsEnabledWithMacAddress", .descriptor == "(Ljava/lang/String;Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiManager\0", "setTdlsEnabledWithMacAddress\0", "(Ljava/lang/String;Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [startWps](https://developer.android.com/reference/android/net/wifi/WifiManager.html#startWps(android.net.wifi.WpsInfo,%20android.net.wifi.WifiManager.WpsCallback))
        ///
        /// Required features: "android-net-wifi-WifiManager_WpsCallback", "android-net-wifi-WpsInfo"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-WifiManager_WpsCallback", feature = "android-net-wifi-WpsInfo")))]
        #[deprecated] pub fn startWps<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::WpsInfo>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::WifiManager_WpsCallback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiManager", java.flags == PUBLIC, .name == "startWps", .descriptor == "(Landroid/net/wifi/WpsInfo;Landroid/net/wifi/WifiManager$WpsCallback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiManager\0", "startWps\0", "(Landroid/net/wifi/WpsInfo;Landroid/net/wifi/WifiManager$WpsCallback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [cancelWps](https://developer.android.com/reference/android/net/wifi/WifiManager.html#cancelWps(android.net.wifi.WifiManager.WpsCallback))
        ///
        /// Required features: "android-net-wifi-WifiManager_WpsCallback"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-WifiManager_WpsCallback")))]
        #[deprecated] pub fn cancelWps<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::WifiManager_WpsCallback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiManager", java.flags == PUBLIC, .name == "cancelWps", .descriptor == "(Landroid/net/wifi/WifiManager$WpsCallback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiManager\0", "cancelWps\0", "(Landroid/net/wifi/WifiManager$WpsCallback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createWifiLock](https://developer.android.com/reference/android/net/wifi/WifiManager.html#createWifiLock(int,%20java.lang.String))
        ///
        /// Required features: "android-net-wifi-WifiManager_WifiLock", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-WifiManager_WifiLock", feature = "java-lang-String")))]
        pub fn createWifiLock_int_String<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::wifi::WifiManager_WifiLock>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiManager", java.flags == PUBLIC, .name == "createWifiLock", .descriptor == "(ILjava/lang/String;)Landroid/net/wifi/WifiManager$WifiLock;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiManager\0", "createWifiLock\0", "(ILjava/lang/String;)Landroid/net/wifi/WifiManager$WifiLock;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createWifiLock](https://developer.android.com/reference/android/net/wifi/WifiManager.html#createWifiLock(java.lang.String))
        ///
        /// Required features: "android-net-wifi-WifiManager_WifiLock", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-WifiManager_WifiLock", feature = "java-lang-String")))]
        #[deprecated] pub fn createWifiLock_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::wifi::WifiManager_WifiLock>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiManager", java.flags == PUBLIC, .name == "createWifiLock", .descriptor == "(Ljava/lang/String;)Landroid/net/wifi/WifiManager$WifiLock;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiManager\0", "createWifiLock\0", "(Ljava/lang/String;)Landroid/net/wifi/WifiManager$WifiLock;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createMulticastLock](https://developer.android.com/reference/android/net/wifi/WifiManager.html#createMulticastLock(java.lang.String))
        ///
        /// Required features: "android-net-wifi-WifiManager_MulticastLock", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-WifiManager_MulticastLock", feature = "java-lang-String")))]
        pub fn createMulticastLock<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::wifi::WifiManager_MulticastLock>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiManager", java.flags == PUBLIC, .name == "createMulticastLock", .descriptor == "(Ljava/lang/String;)Landroid/net/wifi/WifiManager$MulticastLock;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiManager\0", "createMulticastLock\0", "(Ljava/lang/String;)Landroid/net/wifi/WifiManager$MulticastLock;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [finalize](https://developer.android.com/reference/android/net/wifi/WifiManager.html#finalize())
        // fn finalize<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/net/wifi/WifiManager", java.flags == PROTECTED, .name == "finalize", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiManager\0", "finalize\0", "()V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [isWpa3SaeSupported](https://developer.android.com/reference/android/net/wifi/WifiManager.html#isWpa3SaeSupported())
        pub fn isWpa3SaeSupported<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiManager", java.flags == PUBLIC, .name == "isWpa3SaeSupported", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiManager\0", "isWpa3SaeSupported\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isWpa3SuiteBSupported](https://developer.android.com/reference/android/net/wifi/WifiManager.html#isWpa3SuiteBSupported())
        pub fn isWpa3SuiteBSupported<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiManager", java.flags == PUBLIC, .name == "isWpa3SuiteBSupported", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiManager\0", "isWpa3SuiteBSupported\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isEnhancedOpenSupported](https://developer.android.com/reference/android/net/wifi/WifiManager.html#isEnhancedOpenSupported())
        pub fn isEnhancedOpenSupported<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiManager", java.flags == PUBLIC, .name == "isEnhancedOpenSupported", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiManager\0", "isEnhancedOpenSupported\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isEasyConnectSupported](https://developer.android.com/reference/android/net/wifi/WifiManager.html#isEasyConnectSupported())
        pub fn isEasyConnectSupported<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiManager", java.flags == PUBLIC, .name == "isEasyConnectSupported", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiManager\0", "isEasyConnectSupported\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [ACTION_PICK_WIFI_NETWORK](https://developer.android.com/reference/android/net/wifi/WifiManager.html#ACTION_PICK_WIFI_NETWORK)
        pub const ACTION_PICK_WIFI_NETWORK : &'static str = "android.net.wifi.PICK_WIFI_NETWORK";

        /// public static final [ACTION_REQUEST_SCAN_ALWAYS_AVAILABLE](https://developer.android.com/reference/android/net/wifi/WifiManager.html#ACTION_REQUEST_SCAN_ALWAYS_AVAILABLE)
        pub const ACTION_REQUEST_SCAN_ALWAYS_AVAILABLE : &'static str = "android.net.wifi.action.REQUEST_SCAN_ALWAYS_AVAILABLE";

        /// public static final [ACTION_WIFI_NETWORK_SUGGESTION_POST_CONNECTION](https://developer.android.com/reference/android/net/wifi/WifiManager.html#ACTION_WIFI_NETWORK_SUGGESTION_POST_CONNECTION)
        pub const ACTION_WIFI_NETWORK_SUGGESTION_POST_CONNECTION : &'static str = "android.net.wifi.action.WIFI_NETWORK_SUGGESTION_POST_CONNECTION";

        /// public static final [ERROR_AUTHENTICATING](https://developer.android.com/reference/android/net/wifi/WifiManager.html#ERROR_AUTHENTICATING)
        #[deprecated] pub const ERROR_AUTHENTICATING : i32 = 1;

        /// public static final [EXTRA_BSSID](https://developer.android.com/reference/android/net/wifi/WifiManager.html#EXTRA_BSSID)
        #[deprecated] pub const EXTRA_BSSID : &'static str = "bssid";

        /// public static final [EXTRA_NETWORK_INFO](https://developer.android.com/reference/android/net/wifi/WifiManager.html#EXTRA_NETWORK_INFO)
        pub const EXTRA_NETWORK_INFO : &'static str = "networkInfo";

        /// public static final [EXTRA_NETWORK_SUGGESTION](https://developer.android.com/reference/android/net/wifi/WifiManager.html#EXTRA_NETWORK_SUGGESTION)
        pub const EXTRA_NETWORK_SUGGESTION : &'static str = "android.net.wifi.extra.NETWORK_SUGGESTION";

        /// public static final [EXTRA_NEW_RSSI](https://developer.android.com/reference/android/net/wifi/WifiManager.html#EXTRA_NEW_RSSI)
        pub const EXTRA_NEW_RSSI : &'static str = "newRssi";

        /// public static final [EXTRA_NEW_STATE](https://developer.android.com/reference/android/net/wifi/WifiManager.html#EXTRA_NEW_STATE)
        #[deprecated] pub const EXTRA_NEW_STATE : &'static str = "newState";

        /// public static final [EXTRA_PREVIOUS_WIFI_STATE](https://developer.android.com/reference/android/net/wifi/WifiManager.html#EXTRA_PREVIOUS_WIFI_STATE)
        pub const EXTRA_PREVIOUS_WIFI_STATE : &'static str = "previous_wifi_state";

        /// public static final [EXTRA_RESULTS_UPDATED](https://developer.android.com/reference/android/net/wifi/WifiManager.html#EXTRA_RESULTS_UPDATED)
        pub const EXTRA_RESULTS_UPDATED : &'static str = "resultsUpdated";

        /// public static final [EXTRA_SUPPLICANT_CONNECTED](https://developer.android.com/reference/android/net/wifi/WifiManager.html#EXTRA_SUPPLICANT_CONNECTED)
        #[deprecated] pub const EXTRA_SUPPLICANT_CONNECTED : &'static str = "connected";

        /// public static final [EXTRA_SUPPLICANT_ERROR](https://developer.android.com/reference/android/net/wifi/WifiManager.html#EXTRA_SUPPLICANT_ERROR)
        #[deprecated] pub const EXTRA_SUPPLICANT_ERROR : &'static str = "supplicantError";

        /// public static final [EXTRA_WIFI_INFO](https://developer.android.com/reference/android/net/wifi/WifiManager.html#EXTRA_WIFI_INFO)
        #[deprecated] pub const EXTRA_WIFI_INFO : &'static str = "wifiInfo";

        /// public static final [EXTRA_WIFI_STATE](https://developer.android.com/reference/android/net/wifi/WifiManager.html#EXTRA_WIFI_STATE)
        pub const EXTRA_WIFI_STATE : &'static str = "wifi_state";

        /// public static final [NETWORK_IDS_CHANGED_ACTION](https://developer.android.com/reference/android/net/wifi/WifiManager.html#NETWORK_IDS_CHANGED_ACTION)
        pub const NETWORK_IDS_CHANGED_ACTION : &'static str = "android.net.wifi.NETWORK_IDS_CHANGED";

        /// public static final [NETWORK_STATE_CHANGED_ACTION](https://developer.android.com/reference/android/net/wifi/WifiManager.html#NETWORK_STATE_CHANGED_ACTION)
        pub const NETWORK_STATE_CHANGED_ACTION : &'static str = "android.net.wifi.STATE_CHANGE";

        /// public static final [RSSI_CHANGED_ACTION](https://developer.android.com/reference/android/net/wifi/WifiManager.html#RSSI_CHANGED_ACTION)
        pub const RSSI_CHANGED_ACTION : &'static str = "android.net.wifi.RSSI_CHANGED";

        /// public static final [SCAN_RESULTS_AVAILABLE_ACTION](https://developer.android.com/reference/android/net/wifi/WifiManager.html#SCAN_RESULTS_AVAILABLE_ACTION)
        pub const SCAN_RESULTS_AVAILABLE_ACTION : &'static str = "android.net.wifi.SCAN_RESULTS";

        /// public static final [STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_DUPLICATE](https://developer.android.com/reference/android/net/wifi/WifiManager.html#STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_DUPLICATE)
        pub const STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_DUPLICATE : i32 = 3;

        /// public static final [STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_EXCEEDS_MAX_PER_APP](https://developer.android.com/reference/android/net/wifi/WifiManager.html#STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_EXCEEDS_MAX_PER_APP)
        pub const STATUS_NETWORK_SUGGESTIONS_ERROR_ADD_EXCEEDS_MAX_PER_APP : i32 = 4;

        /// public static final [STATUS_NETWORK_SUGGESTIONS_ERROR_APP_DISALLOWED](https://developer.android.com/reference/android/net/wifi/WifiManager.html#STATUS_NETWORK_SUGGESTIONS_ERROR_APP_DISALLOWED)
        pub const STATUS_NETWORK_SUGGESTIONS_ERROR_APP_DISALLOWED : i32 = 2;

        /// public static final [STATUS_NETWORK_SUGGESTIONS_ERROR_INTERNAL](https://developer.android.com/reference/android/net/wifi/WifiManager.html#STATUS_NETWORK_SUGGESTIONS_ERROR_INTERNAL)
        pub const STATUS_NETWORK_SUGGESTIONS_ERROR_INTERNAL : i32 = 1;

        /// public static final [STATUS_NETWORK_SUGGESTIONS_ERROR_REMOVE_INVALID](https://developer.android.com/reference/android/net/wifi/WifiManager.html#STATUS_NETWORK_SUGGESTIONS_ERROR_REMOVE_INVALID)
        pub const STATUS_NETWORK_SUGGESTIONS_ERROR_REMOVE_INVALID : i32 = 5;

        /// public static final [STATUS_NETWORK_SUGGESTIONS_SUCCESS](https://developer.android.com/reference/android/net/wifi/WifiManager.html#STATUS_NETWORK_SUGGESTIONS_SUCCESS)
        pub const STATUS_NETWORK_SUGGESTIONS_SUCCESS : i32 = 0;

        /// public static final [SUPPLICANT_CONNECTION_CHANGE_ACTION](https://developer.android.com/reference/android/net/wifi/WifiManager.html#SUPPLICANT_CONNECTION_CHANGE_ACTION)
        #[deprecated] pub const SUPPLICANT_CONNECTION_CHANGE_ACTION : &'static str = "android.net.wifi.supplicant.CONNECTION_CHANGE";

        /// public static final [SUPPLICANT_STATE_CHANGED_ACTION](https://developer.android.com/reference/android/net/wifi/WifiManager.html#SUPPLICANT_STATE_CHANGED_ACTION)
        #[deprecated] pub const SUPPLICANT_STATE_CHANGED_ACTION : &'static str = "android.net.wifi.supplicant.STATE_CHANGE";

        /// public static final [WIFI_MODE_FULL](https://developer.android.com/reference/android/net/wifi/WifiManager.html#WIFI_MODE_FULL)
        #[deprecated] pub const WIFI_MODE_FULL : i32 = 1;

        /// public static final [WIFI_MODE_FULL_HIGH_PERF](https://developer.android.com/reference/android/net/wifi/WifiManager.html#WIFI_MODE_FULL_HIGH_PERF)
        pub const WIFI_MODE_FULL_HIGH_PERF : i32 = 3;

        /// public static final [WIFI_MODE_FULL_LOW_LATENCY](https://developer.android.com/reference/android/net/wifi/WifiManager.html#WIFI_MODE_FULL_LOW_LATENCY)
        pub const WIFI_MODE_FULL_LOW_LATENCY : i32 = 4;

        /// public static final [WIFI_MODE_SCAN_ONLY](https://developer.android.com/reference/android/net/wifi/WifiManager.html#WIFI_MODE_SCAN_ONLY)
        #[deprecated] pub const WIFI_MODE_SCAN_ONLY : i32 = 2;

        /// public static final [WIFI_STATE_CHANGED_ACTION](https://developer.android.com/reference/android/net/wifi/WifiManager.html#WIFI_STATE_CHANGED_ACTION)
        pub const WIFI_STATE_CHANGED_ACTION : &'static str = "android.net.wifi.WIFI_STATE_CHANGED";

        /// public static final [WIFI_STATE_DISABLED](https://developer.android.com/reference/android/net/wifi/WifiManager.html#WIFI_STATE_DISABLED)
        pub const WIFI_STATE_DISABLED : i32 = 1;

        /// public static final [WIFI_STATE_DISABLING](https://developer.android.com/reference/android/net/wifi/WifiManager.html#WIFI_STATE_DISABLING)
        pub const WIFI_STATE_DISABLING : i32 = 0;

        /// public static final [WIFI_STATE_ENABLED](https://developer.android.com/reference/android/net/wifi/WifiManager.html#WIFI_STATE_ENABLED)
        pub const WIFI_STATE_ENABLED : i32 = 3;

        /// public static final [WIFI_STATE_ENABLING](https://developer.android.com/reference/android/net/wifi/WifiManager.html#WIFI_STATE_ENABLING)
        pub const WIFI_STATE_ENABLING : i32 = 2;

        /// public static final [WIFI_STATE_UNKNOWN](https://developer.android.com/reference/android/net/wifi/WifiManager.html#WIFI_STATE_UNKNOWN)
        pub const WIFI_STATE_UNKNOWN : i32 = 4;

        /// public static final [WPS_AUTH_FAILURE](https://developer.android.com/reference/android/net/wifi/WifiManager.html#WPS_AUTH_FAILURE)
        #[deprecated] pub const WPS_AUTH_FAILURE : i32 = 6;

        /// public static final [WPS_OVERLAP_ERROR](https://developer.android.com/reference/android/net/wifi/WifiManager.html#WPS_OVERLAP_ERROR)
        #[deprecated] pub const WPS_OVERLAP_ERROR : i32 = 3;

        /// public static final [WPS_TIMED_OUT](https://developer.android.com/reference/android/net/wifi/WifiManager.html#WPS_TIMED_OUT)
        #[deprecated] pub const WPS_TIMED_OUT : i32 = 7;

        /// public static final [WPS_TKIP_ONLY_PROHIBITED](https://developer.android.com/reference/android/net/wifi/WifiManager.html#WPS_TKIP_ONLY_PROHIBITED)
        #[deprecated] pub const WPS_TKIP_ONLY_PROHIBITED : i32 = 5;

        /// public static final [WPS_WEP_PROHIBITED](https://developer.android.com/reference/android/net/wifi/WifiManager.html#WPS_WEP_PROHIBITED)
        #[deprecated] pub const WPS_WEP_PROHIBITED : i32 = 4;
    }
}
