// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-net-wifi-aware-PublishDiscoverySession"))]
__jni_bindgen! {
    /// public class [PublishDiscoverySession](https://developer.android.com/reference/android/net/wifi/aware/PublishDiscoverySession.html)
    ///
    /// Required feature: android-net-wifi-aware-PublishDiscoverySession
    public class PublishDiscoverySession ("android/net/wifi/aware/PublishDiscoverySession") extends crate::android::net::wifi::aware::DiscoverySession {

        // // Not emitting: Non-public method
        // /// [PublishDiscoverySession](https://developer.android.com/reference/android/net/wifi/aware/PublishDiscoverySession.html#PublishDiscoverySession(android.net.wifi.aware.WifiAwareManager,%20int,%20int))
        // ///
        // /// Required features: "android-net-wifi-aware-WifiAwareManager"
        // #[cfg(any(feature = "all", all(feature = "android-net-wifi-aware-WifiAwareManager")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::aware::WifiAwareManager>>, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::net::wifi::aware::PublishDiscoverySession>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/net/wifi/aware/PublishDiscoverySession", java.flags == (empty), .name == "<init>", .descriptor == "(Landroid/net/wifi/aware/WifiAwareManager;II)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/aware/PublishDiscoverySession\0", "<init>\0", "(Landroid/net/wifi/aware/WifiAwareManager;II)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [updatePublish](https://developer.android.com/reference/android/net/wifi/aware/PublishDiscoverySession.html#updatePublish(android.net.wifi.aware.PublishConfig))
        ///
        /// Required features: "android-net-wifi-aware-PublishConfig"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-aware-PublishConfig")))]
        pub fn updatePublish<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::aware::PublishConfig>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/aware/PublishDiscoverySession", java.flags == PUBLIC, .name == "updatePublish", .descriptor == "(Landroid/net/wifi/aware/PublishConfig;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/aware/PublishDiscoverySession\0", "updatePublish\0", "(Landroid/net/wifi/aware/PublishConfig;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
