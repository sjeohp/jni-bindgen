// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-net-wifi-aware-DiscoverySessionCallback"))]
__jni_bindgen! {
    /// public class [DiscoverySessionCallback](https://developer.android.com/reference/android/net/wifi/aware/DiscoverySessionCallback.html)
    ///
    /// Required feature: android-net-wifi-aware-DiscoverySessionCallback
    public class DiscoverySessionCallback ("android/net/wifi/aware/DiscoverySessionCallback") extends crate::java::lang::Object {

        /// [DiscoverySessionCallback](https://developer.android.com/reference/android/net/wifi/aware/DiscoverySessionCallback.html#DiscoverySessionCallback())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::net::wifi::aware::DiscoverySessionCallback>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/aware/DiscoverySessionCallback", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/aware/DiscoverySessionCallback\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onPublishStarted](https://developer.android.com/reference/android/net/wifi/aware/DiscoverySessionCallback.html#onPublishStarted(android.net.wifi.aware.PublishDiscoverySession))
        ///
        /// Required features: "android-net-wifi-aware-PublishDiscoverySession"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-aware-PublishDiscoverySession")))]
        pub fn onPublishStarted<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::aware::PublishDiscoverySession>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/aware/DiscoverySessionCallback", java.flags == PUBLIC, .name == "onPublishStarted", .descriptor == "(Landroid/net/wifi/aware/PublishDiscoverySession;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/aware/DiscoverySessionCallback\0", "onPublishStarted\0", "(Landroid/net/wifi/aware/PublishDiscoverySession;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onSubscribeStarted](https://developer.android.com/reference/android/net/wifi/aware/DiscoverySessionCallback.html#onSubscribeStarted(android.net.wifi.aware.SubscribeDiscoverySession))
        ///
        /// Required features: "android-net-wifi-aware-SubscribeDiscoverySession"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-aware-SubscribeDiscoverySession")))]
        pub fn onSubscribeStarted<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::aware::SubscribeDiscoverySession>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/aware/DiscoverySessionCallback", java.flags == PUBLIC, .name == "onSubscribeStarted", .descriptor == "(Landroid/net/wifi/aware/SubscribeDiscoverySession;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/aware/DiscoverySessionCallback\0", "onSubscribeStarted\0", "(Landroid/net/wifi/aware/SubscribeDiscoverySession;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onSessionConfigUpdated](https://developer.android.com/reference/android/net/wifi/aware/DiscoverySessionCallback.html#onSessionConfigUpdated())
        pub fn onSessionConfigUpdated<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/aware/DiscoverySessionCallback", java.flags == PUBLIC, .name == "onSessionConfigUpdated", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/aware/DiscoverySessionCallback\0", "onSessionConfigUpdated\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onSessionConfigFailed](https://developer.android.com/reference/android/net/wifi/aware/DiscoverySessionCallback.html#onSessionConfigFailed())
        pub fn onSessionConfigFailed<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/aware/DiscoverySessionCallback", java.flags == PUBLIC, .name == "onSessionConfigFailed", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/aware/DiscoverySessionCallback\0", "onSessionConfigFailed\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onSessionTerminated](https://developer.android.com/reference/android/net/wifi/aware/DiscoverySessionCallback.html#onSessionTerminated())
        pub fn onSessionTerminated<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/aware/DiscoverySessionCallback", java.flags == PUBLIC, .name == "onSessionTerminated", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/aware/DiscoverySessionCallback\0", "onSessionTerminated\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onServiceDiscovered](https://developer.android.com/reference/android/net/wifi/aware/DiscoverySessionCallback.html#onServiceDiscovered(android.net.wifi.aware.PeerHandle,%20byte%5B%5D,%20java.util.List))
        ///
        /// Required features: "android-net-wifi-aware-PeerHandle", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-aware-PeerHandle", feature = "java-util-List")))]
        pub fn onServiceDiscovered<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::aware::PeerHandle>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/aware/DiscoverySessionCallback", java.flags == PUBLIC, .name == "onServiceDiscovered", .descriptor == "(Landroid/net/wifi/aware/PeerHandle;[BLjava/util/List;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/aware/DiscoverySessionCallback\0", "onServiceDiscovered\0", "(Landroid/net/wifi/aware/PeerHandle;[BLjava/util/List;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onServiceDiscoveredWithinRange](https://developer.android.com/reference/android/net/wifi/aware/DiscoverySessionCallback.html#onServiceDiscoveredWithinRange(android.net.wifi.aware.PeerHandle,%20byte%5B%5D,%20java.util.List,%20int))
        ///
        /// Required features: "android-net-wifi-aware-PeerHandle", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-aware-PeerHandle", feature = "java-util-List")))]
        pub fn onServiceDiscoveredWithinRange<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::aware::PeerHandle>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/aware/DiscoverySessionCallback", java.flags == PUBLIC, .name == "onServiceDiscoveredWithinRange", .descriptor == "(Landroid/net/wifi/aware/PeerHandle;[BLjava/util/List;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/aware/DiscoverySessionCallback\0", "onServiceDiscoveredWithinRange\0", "(Landroid/net/wifi/aware/PeerHandle;[BLjava/util/List;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onMessageSendSucceeded](https://developer.android.com/reference/android/net/wifi/aware/DiscoverySessionCallback.html#onMessageSendSucceeded(int))
        pub fn onMessageSendSucceeded<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/aware/DiscoverySessionCallback", java.flags == PUBLIC, .name == "onMessageSendSucceeded", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/aware/DiscoverySessionCallback\0", "onMessageSendSucceeded\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onMessageSendFailed](https://developer.android.com/reference/android/net/wifi/aware/DiscoverySessionCallback.html#onMessageSendFailed(int))
        pub fn onMessageSendFailed<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/aware/DiscoverySessionCallback", java.flags == PUBLIC, .name == "onMessageSendFailed", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/aware/DiscoverySessionCallback\0", "onMessageSendFailed\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onMessageReceived](https://developer.android.com/reference/android/net/wifi/aware/DiscoverySessionCallback.html#onMessageReceived(android.net.wifi.aware.PeerHandle,%20byte%5B%5D))
        ///
        /// Required features: "android-net-wifi-aware-PeerHandle"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-aware-PeerHandle")))]
        pub fn onMessageReceived<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::aware::PeerHandle>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/aware/DiscoverySessionCallback", java.flags == PUBLIC, .name == "onMessageReceived", .descriptor == "(Landroid/net/wifi/aware/PeerHandle;[B)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/aware/DiscoverySessionCallback\0", "onMessageReceived\0", "(Landroid/net/wifi/aware/PeerHandle;[B)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
