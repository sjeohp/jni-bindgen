// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-net-wifi-aware-DiscoverySession"))]
__jni_bindgen! {
    /// public class [DiscoverySession](https://developer.android.com/reference/android/net/wifi/aware/DiscoverySession.html)
    ///
    /// Required feature: android-net-wifi-aware-DiscoverySession
    public class DiscoverySession ("android/net/wifi/aware/DiscoverySession") extends crate::java::lang::Object, implements crate::java::lang::AutoCloseable {

        // // Not emitting: Non-public method
        // /// [DiscoverySession](https://developer.android.com/reference/android/net/wifi/aware/DiscoverySession.html#DiscoverySession(android.net.wifi.aware.WifiAwareManager,%20int,%20int))
        // ///
        // /// Required features: "android-net-wifi-aware-WifiAwareManager"
        // #[cfg(any(feature = "all", all(feature = "android-net-wifi-aware-WifiAwareManager")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::aware::WifiAwareManager>>, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::net::wifi::aware::DiscoverySession>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/net/wifi/aware/DiscoverySession", java.flags == (empty), .name == "<init>", .descriptor == "(Landroid/net/wifi/aware/WifiAwareManager;II)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/aware/DiscoverySession\0", "<init>\0", "(Landroid/net/wifi/aware/WifiAwareManager;II)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [close](https://developer.android.com/reference/android/net/wifi/aware/DiscoverySession.html#close())
        pub fn close<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/aware/DiscoverySession", java.flags == PUBLIC, .name == "close", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/aware/DiscoverySession\0", "close\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [finalize](https://developer.android.com/reference/android/net/wifi/aware/DiscoverySession.html#finalize())
        // fn finalize<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/net/wifi/aware/DiscoverySession", java.flags == PROTECTED, .name == "finalize", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/aware/DiscoverySession\0", "finalize\0", "()V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [sendMessage](https://developer.android.com/reference/android/net/wifi/aware/DiscoverySession.html#sendMessage(android.net.wifi.aware.PeerHandle,%20int,%20byte%5B%5D))
        ///
        /// Required features: "android-net-wifi-aware-PeerHandle"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-aware-PeerHandle")))]
        pub fn sendMessage<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::aware::PeerHandle>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/aware/DiscoverySession", java.flags == PUBLIC, .name == "sendMessage", .descriptor == "(Landroid/net/wifi/aware/PeerHandle;I[B)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/aware/DiscoverySession\0", "sendMessage\0", "(Landroid/net/wifi/aware/PeerHandle;I[B)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createNetworkSpecifierOpen](https://developer.android.com/reference/android/net/wifi/aware/DiscoverySession.html#createNetworkSpecifierOpen(android.net.wifi.aware.PeerHandle))
        ///
        /// Required features: "android-net-NetworkSpecifier", "android-net-wifi-aware-PeerHandle"
        #[cfg(any(feature = "all", all(feature = "android-net-NetworkSpecifier", feature = "android-net-wifi-aware-PeerHandle")))]
        #[deprecated] pub fn createNetworkSpecifierOpen<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::aware::PeerHandle>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::NetworkSpecifier>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/aware/DiscoverySession", java.flags == PUBLIC, .name == "createNetworkSpecifierOpen", .descriptor == "(Landroid/net/wifi/aware/PeerHandle;)Landroid/net/NetworkSpecifier;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/aware/DiscoverySession\0", "createNetworkSpecifierOpen\0", "(Landroid/net/wifi/aware/PeerHandle;)Landroid/net/NetworkSpecifier;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createNetworkSpecifierPassphrase](https://developer.android.com/reference/android/net/wifi/aware/DiscoverySession.html#createNetworkSpecifierPassphrase(android.net.wifi.aware.PeerHandle,%20java.lang.String))
        ///
        /// Required features: "android-net-NetworkSpecifier", "android-net-wifi-aware-PeerHandle", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-NetworkSpecifier", feature = "android-net-wifi-aware-PeerHandle", feature = "java-lang-String")))]
        #[deprecated] pub fn createNetworkSpecifierPassphrase<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::aware::PeerHandle>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::NetworkSpecifier>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/aware/DiscoverySession", java.flags == PUBLIC, .name == "createNetworkSpecifierPassphrase", .descriptor == "(Landroid/net/wifi/aware/PeerHandle;Ljava/lang/String;)Landroid/net/NetworkSpecifier;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/aware/DiscoverySession\0", "createNetworkSpecifierPassphrase\0", "(Landroid/net/wifi/aware/PeerHandle;Ljava/lang/String;)Landroid/net/NetworkSpecifier;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
