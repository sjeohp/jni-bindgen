// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-net-wifi-aware-WifiAwareManager"))]
__jni_bindgen! {
    /// public class [WifiAwareManager](https://developer.android.com/reference/android/net/wifi/aware/WifiAwareManager.html)
    ///
    /// Required feature: android-net-wifi-aware-WifiAwareManager
    public class WifiAwareManager ("android/net/wifi/aware/WifiAwareManager") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [WifiAwareManager](https://developer.android.com/reference/android/net/wifi/aware/WifiAwareManager.html#WifiAwareManager())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::net::wifi::aware::WifiAwareManager>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/net/wifi/aware/WifiAwareManager", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/aware/WifiAwareManager\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [isAvailable](https://developer.android.com/reference/android/net/wifi/aware/WifiAwareManager.html#isAvailable())
        pub fn isAvailable<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/aware/WifiAwareManager", java.flags == PUBLIC, .name == "isAvailable", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/aware/WifiAwareManager\0", "isAvailable\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCharacteristics](https://developer.android.com/reference/android/net/wifi/aware/WifiAwareManager.html#getCharacteristics())
        ///
        /// Required features: "android-net-wifi-aware-Characteristics"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-aware-Characteristics")))]
        pub fn getCharacteristics<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::wifi::aware::Characteristics>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/aware/WifiAwareManager", java.flags == PUBLIC, .name == "getCharacteristics", .descriptor == "()Landroid/net/wifi/aware/Characteristics;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/aware/WifiAwareManager\0", "getCharacteristics\0", "()Landroid/net/wifi/aware/Characteristics;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [attach](https://developer.android.com/reference/android/net/wifi/aware/WifiAwareManager.html#attach(android.net.wifi.aware.AttachCallback,%20android.os.Handler))
        ///
        /// Required features: "android-net-wifi-aware-AttachCallback", "android-os-Handler"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-aware-AttachCallback", feature = "android-os-Handler")))]
        pub fn attach_AttachCallback_Handler<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::aware::AttachCallback>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/aware/WifiAwareManager", java.flags == PUBLIC, .name == "attach", .descriptor == "(Landroid/net/wifi/aware/AttachCallback;Landroid/os/Handler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/aware/WifiAwareManager\0", "attach\0", "(Landroid/net/wifi/aware/AttachCallback;Landroid/os/Handler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [attach](https://developer.android.com/reference/android/net/wifi/aware/WifiAwareManager.html#attach(android.net.wifi.aware.AttachCallback,%20android.net.wifi.aware.IdentityChangedListener,%20android.os.Handler))
        ///
        /// Required features: "android-net-wifi-aware-AttachCallback", "android-net-wifi-aware-IdentityChangedListener", "android-os-Handler"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-aware-AttachCallback", feature = "android-net-wifi-aware-IdentityChangedListener", feature = "android-os-Handler")))]
        pub fn attach_AttachCallback_IdentityChangedListener_Handler<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::aware::AttachCallback>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::aware::IdentityChangedListener>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/aware/WifiAwareManager", java.flags == PUBLIC, .name == "attach", .descriptor == "(Landroid/net/wifi/aware/AttachCallback;Landroid/net/wifi/aware/IdentityChangedListener;Landroid/os/Handler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/aware/WifiAwareManager\0", "attach\0", "(Landroid/net/wifi/aware/AttachCallback;Landroid/net/wifi/aware/IdentityChangedListener;Landroid/os/Handler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [ACTION_WIFI_AWARE_STATE_CHANGED](https://developer.android.com/reference/android/net/wifi/aware/WifiAwareManager.html#ACTION_WIFI_AWARE_STATE_CHANGED)
        pub const ACTION_WIFI_AWARE_STATE_CHANGED : &'static str = "android.net.wifi.aware.action.WIFI_AWARE_STATE_CHANGED";

        /// public static final [WIFI_AWARE_DATA_PATH_ROLE_INITIATOR](https://developer.android.com/reference/android/net/wifi/aware/WifiAwareManager.html#WIFI_AWARE_DATA_PATH_ROLE_INITIATOR)
        pub const WIFI_AWARE_DATA_PATH_ROLE_INITIATOR : i32 = 0;

        /// public static final [WIFI_AWARE_DATA_PATH_ROLE_RESPONDER](https://developer.android.com/reference/android/net/wifi/aware/WifiAwareManager.html#WIFI_AWARE_DATA_PATH_ROLE_RESPONDER)
        pub const WIFI_AWARE_DATA_PATH_ROLE_RESPONDER : i32 = 1;
    }
}
