// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-net-wifi-aware-SubscribeConfig_Builder"))]
__jni_bindgen! {
    /// public final class [SubscribeConfig.Builder](https://developer.android.com/reference/android/net/wifi/aware/SubscribeConfig.Builder.html)
    ///
    /// Required feature: android-net-wifi-aware-SubscribeConfig_Builder
    public final class SubscribeConfig_Builder ("android/net/wifi/aware/SubscribeConfig$Builder") extends crate::java::lang::Object {

        /// [Builder](https://developer.android.com/reference/android/net/wifi/aware/SubscribeConfig.Builder.html#Builder())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::net::wifi::aware::SubscribeConfig_Builder>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/aware/SubscribeConfig$Builder", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/aware/SubscribeConfig$Builder\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setServiceName](https://developer.android.com/reference/android/net/wifi/aware/SubscribeConfig.Builder.html#setServiceName(java.lang.String))
        ///
        /// Required features: "android-net-wifi-aware-SubscribeConfig_Builder", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-aware-SubscribeConfig_Builder", feature = "java-lang-String")))]
        pub fn setServiceName<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::wifi::aware::SubscribeConfig_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/aware/SubscribeConfig$Builder", java.flags == PUBLIC, .name == "setServiceName", .descriptor == "(Ljava/lang/String;)Landroid/net/wifi/aware/SubscribeConfig$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/aware/SubscribeConfig$Builder\0", "setServiceName\0", "(Ljava/lang/String;)Landroid/net/wifi/aware/SubscribeConfig$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setServiceSpecificInfo](https://developer.android.com/reference/android/net/wifi/aware/SubscribeConfig.Builder.html#setServiceSpecificInfo(byte%5B%5D))
        ///
        /// Required features: "android-net-wifi-aware-SubscribeConfig_Builder"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-aware-SubscribeConfig_Builder")))]
        pub fn setServiceSpecificInfo<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::wifi::aware::SubscribeConfig_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/aware/SubscribeConfig$Builder", java.flags == PUBLIC, .name == "setServiceSpecificInfo", .descriptor == "([B)Landroid/net/wifi/aware/SubscribeConfig$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/aware/SubscribeConfig$Builder\0", "setServiceSpecificInfo\0", "([B)Landroid/net/wifi/aware/SubscribeConfig$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setMatchFilter](https://developer.android.com/reference/android/net/wifi/aware/SubscribeConfig.Builder.html#setMatchFilter(java.util.List))
        ///
        /// Required features: "android-net-wifi-aware-SubscribeConfig_Builder", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-aware-SubscribeConfig_Builder", feature = "java-util-List")))]
        pub fn setMatchFilter<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::wifi::aware::SubscribeConfig_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/aware/SubscribeConfig$Builder", java.flags == PUBLIC, .name == "setMatchFilter", .descriptor == "(Ljava/util/List;)Landroid/net/wifi/aware/SubscribeConfig$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/aware/SubscribeConfig$Builder\0", "setMatchFilter\0", "(Ljava/util/List;)Landroid/net/wifi/aware/SubscribeConfig$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setSubscribeType](https://developer.android.com/reference/android/net/wifi/aware/SubscribeConfig.Builder.html#setSubscribeType(int))
        ///
        /// Required features: "android-net-wifi-aware-SubscribeConfig_Builder"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-aware-SubscribeConfig_Builder")))]
        pub fn setSubscribeType<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::wifi::aware::SubscribeConfig_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/aware/SubscribeConfig$Builder", java.flags == PUBLIC, .name == "setSubscribeType", .descriptor == "(I)Landroid/net/wifi/aware/SubscribeConfig$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/aware/SubscribeConfig$Builder\0", "setSubscribeType\0", "(I)Landroid/net/wifi/aware/SubscribeConfig$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTtlSec](https://developer.android.com/reference/android/net/wifi/aware/SubscribeConfig.Builder.html#setTtlSec(int))
        ///
        /// Required features: "android-net-wifi-aware-SubscribeConfig_Builder"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-aware-SubscribeConfig_Builder")))]
        pub fn setTtlSec<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::wifi::aware::SubscribeConfig_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/aware/SubscribeConfig$Builder", java.flags == PUBLIC, .name == "setTtlSec", .descriptor == "(I)Landroid/net/wifi/aware/SubscribeConfig$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/aware/SubscribeConfig$Builder\0", "setTtlSec\0", "(I)Landroid/net/wifi/aware/SubscribeConfig$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTerminateNotificationEnabled](https://developer.android.com/reference/android/net/wifi/aware/SubscribeConfig.Builder.html#setTerminateNotificationEnabled(boolean))
        ///
        /// Required features: "android-net-wifi-aware-SubscribeConfig_Builder"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-aware-SubscribeConfig_Builder")))]
        pub fn setTerminateNotificationEnabled<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::wifi::aware::SubscribeConfig_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/aware/SubscribeConfig$Builder", java.flags == PUBLIC, .name == "setTerminateNotificationEnabled", .descriptor == "(Z)Landroid/net/wifi/aware/SubscribeConfig$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/aware/SubscribeConfig$Builder\0", "setTerminateNotificationEnabled\0", "(Z)Landroid/net/wifi/aware/SubscribeConfig$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setMinDistanceMm](https://developer.android.com/reference/android/net/wifi/aware/SubscribeConfig.Builder.html#setMinDistanceMm(int))
        ///
        /// Required features: "android-net-wifi-aware-SubscribeConfig_Builder"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-aware-SubscribeConfig_Builder")))]
        pub fn setMinDistanceMm<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::wifi::aware::SubscribeConfig_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/aware/SubscribeConfig$Builder", java.flags == PUBLIC, .name == "setMinDistanceMm", .descriptor == "(I)Landroid/net/wifi/aware/SubscribeConfig$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/aware/SubscribeConfig$Builder\0", "setMinDistanceMm\0", "(I)Landroid/net/wifi/aware/SubscribeConfig$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setMaxDistanceMm](https://developer.android.com/reference/android/net/wifi/aware/SubscribeConfig.Builder.html#setMaxDistanceMm(int))
        ///
        /// Required features: "android-net-wifi-aware-SubscribeConfig_Builder"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-aware-SubscribeConfig_Builder")))]
        pub fn setMaxDistanceMm<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::wifi::aware::SubscribeConfig_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/aware/SubscribeConfig$Builder", java.flags == PUBLIC, .name == "setMaxDistanceMm", .descriptor == "(I)Landroid/net/wifi/aware/SubscribeConfig$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/aware/SubscribeConfig$Builder\0", "setMaxDistanceMm\0", "(I)Landroid/net/wifi/aware/SubscribeConfig$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [build](https://developer.android.com/reference/android/net/wifi/aware/SubscribeConfig.Builder.html#build())
        ///
        /// Required features: "android-net-wifi-aware-SubscribeConfig"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-aware-SubscribeConfig")))]
        pub fn build<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::wifi::aware::SubscribeConfig>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/aware/SubscribeConfig$Builder", java.flags == PUBLIC, .name == "build", .descriptor == "()Landroid/net/wifi/aware/SubscribeConfig;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/aware/SubscribeConfig$Builder\0", "build\0", "()Landroid/net/wifi/aware/SubscribeConfig;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
