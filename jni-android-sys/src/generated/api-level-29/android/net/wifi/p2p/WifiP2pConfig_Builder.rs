// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-net-wifi-p2p-WifiP2pConfig_Builder"))]
__jni_bindgen! {
    /// public final class [WifiP2pConfig.Builder](https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pConfig.Builder.html)
    ///
    /// Required feature: android-net-wifi-p2p-WifiP2pConfig_Builder
    public final class WifiP2pConfig_Builder ("android/net/wifi/p2p/WifiP2pConfig$Builder") extends crate::java::lang::Object {

        /// [Builder](https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pConfig.Builder.html#Builder())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::net::wifi::p2p::WifiP2pConfig_Builder>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/p2p/WifiP2pConfig$Builder", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/p2p/WifiP2pConfig$Builder\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDeviceAddress](https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pConfig.Builder.html#setDeviceAddress(android.net.MacAddress))
        ///
        /// Required features: "android-net-MacAddress", "android-net-wifi-p2p-WifiP2pConfig_Builder"
        #[cfg(any(feature = "all", all(feature = "android-net-MacAddress", feature = "android-net-wifi-p2p-WifiP2pConfig_Builder")))]
        pub fn setDeviceAddress<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::MacAddress>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::wifi::p2p::WifiP2pConfig_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/p2p/WifiP2pConfig$Builder", java.flags == PUBLIC, .name == "setDeviceAddress", .descriptor == "(Landroid/net/MacAddress;)Landroid/net/wifi/p2p/WifiP2pConfig$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/p2p/WifiP2pConfig$Builder\0", "setDeviceAddress\0", "(Landroid/net/MacAddress;)Landroid/net/wifi/p2p/WifiP2pConfig$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setNetworkName](https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pConfig.Builder.html#setNetworkName(java.lang.String))
        ///
        /// Required features: "android-net-wifi-p2p-WifiP2pConfig_Builder", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-p2p-WifiP2pConfig_Builder", feature = "java-lang-String")))]
        pub fn setNetworkName<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::wifi::p2p::WifiP2pConfig_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/p2p/WifiP2pConfig$Builder", java.flags == PUBLIC, .name == "setNetworkName", .descriptor == "(Ljava/lang/String;)Landroid/net/wifi/p2p/WifiP2pConfig$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/p2p/WifiP2pConfig$Builder\0", "setNetworkName\0", "(Ljava/lang/String;)Landroid/net/wifi/p2p/WifiP2pConfig$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPassphrase](https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pConfig.Builder.html#setPassphrase(java.lang.String))
        ///
        /// Required features: "android-net-wifi-p2p-WifiP2pConfig_Builder", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-p2p-WifiP2pConfig_Builder", feature = "java-lang-String")))]
        pub fn setPassphrase<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::wifi::p2p::WifiP2pConfig_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/p2p/WifiP2pConfig$Builder", java.flags == PUBLIC, .name == "setPassphrase", .descriptor == "(Ljava/lang/String;)Landroid/net/wifi/p2p/WifiP2pConfig$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/p2p/WifiP2pConfig$Builder\0", "setPassphrase\0", "(Ljava/lang/String;)Landroid/net/wifi/p2p/WifiP2pConfig$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setGroupOperatingBand](https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pConfig.Builder.html#setGroupOperatingBand(int))
        ///
        /// Required features: "android-net-wifi-p2p-WifiP2pConfig_Builder"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-p2p-WifiP2pConfig_Builder")))]
        pub fn setGroupOperatingBand<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::wifi::p2p::WifiP2pConfig_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/p2p/WifiP2pConfig$Builder", java.flags == PUBLIC, .name == "setGroupOperatingBand", .descriptor == "(I)Landroid/net/wifi/p2p/WifiP2pConfig$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/p2p/WifiP2pConfig$Builder\0", "setGroupOperatingBand\0", "(I)Landroid/net/wifi/p2p/WifiP2pConfig$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setGroupOperatingFrequency](https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pConfig.Builder.html#setGroupOperatingFrequency(int))
        ///
        /// Required features: "android-net-wifi-p2p-WifiP2pConfig_Builder"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-p2p-WifiP2pConfig_Builder")))]
        pub fn setGroupOperatingFrequency<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::wifi::p2p::WifiP2pConfig_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/p2p/WifiP2pConfig$Builder", java.flags == PUBLIC, .name == "setGroupOperatingFrequency", .descriptor == "(I)Landroid/net/wifi/p2p/WifiP2pConfig$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/p2p/WifiP2pConfig$Builder\0", "setGroupOperatingFrequency\0", "(I)Landroid/net/wifi/p2p/WifiP2pConfig$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [enablePersistentMode](https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pConfig.Builder.html#enablePersistentMode(boolean))
        ///
        /// Required features: "android-net-wifi-p2p-WifiP2pConfig_Builder"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-p2p-WifiP2pConfig_Builder")))]
        pub fn enablePersistentMode<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::wifi::p2p::WifiP2pConfig_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/p2p/WifiP2pConfig$Builder", java.flags == PUBLIC, .name == "enablePersistentMode", .descriptor == "(Z)Landroid/net/wifi/p2p/WifiP2pConfig$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/p2p/WifiP2pConfig$Builder\0", "enablePersistentMode\0", "(Z)Landroid/net/wifi/p2p/WifiP2pConfig$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [build](https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pConfig.Builder.html#build())
        ///
        /// Required features: "android-net-wifi-p2p-WifiP2pConfig"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-p2p-WifiP2pConfig")))]
        pub fn build<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::wifi::p2p::WifiP2pConfig>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/p2p/WifiP2pConfig$Builder", java.flags == PUBLIC, .name == "build", .descriptor == "()Landroid/net/wifi/p2p/WifiP2pConfig;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/p2p/WifiP2pConfig$Builder\0", "build\0", "()Landroid/net/wifi/p2p/WifiP2pConfig;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
