// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-net-wifi-p2p-WifiP2pManager"))]
__jni_bindgen! {
    /// public class [WifiP2pManager](https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html)
    ///
    /// Required feature: android-net-wifi-p2p-WifiP2pManager
    public class WifiP2pManager ("android/net/wifi/p2p/WifiP2pManager") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [WifiP2pManager](https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#WifiP2pManager())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::net::wifi::p2p::WifiP2pManager>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/net/wifi/p2p/WifiP2pManager", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/p2p/WifiP2pManager\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [initialize](https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#initialize(android.content.Context,%20android.os.Looper,%20android.net.wifi.p2p.WifiP2pManager.ChannelListener))
        ///
        /// Required features: "android-content-Context", "android-net-wifi-p2p-WifiP2pManager_Channel", "android-net-wifi-p2p-WifiP2pManager_ChannelListener", "android-os-Looper"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-net-wifi-p2p-WifiP2pManager_Channel", feature = "android-net-wifi-p2p-WifiP2pManager_ChannelListener", feature = "android-os-Looper")))]
        pub fn initialize<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Looper>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::p2p::WifiP2pManager_ChannelListener>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::wifi::p2p::WifiP2pManager_Channel>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/p2p/WifiP2pManager", java.flags == PUBLIC, .name == "initialize", .descriptor == "(Landroid/content/Context;Landroid/os/Looper;Landroid/net/wifi/p2p/WifiP2pManager$ChannelListener;)Landroid/net/wifi/p2p/WifiP2pManager$Channel;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/p2p/WifiP2pManager\0", "initialize\0", "(Landroid/content/Context;Landroid/os/Looper;Landroid/net/wifi/p2p/WifiP2pManager$ChannelListener;)Landroid/net/wifi/p2p/WifiP2pManager$Channel;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [discoverPeers](https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#discoverPeers(android.net.wifi.p2p.WifiP2pManager.Channel,%20android.net.wifi.p2p.WifiP2pManager.ActionListener))
        ///
        /// Required features: "android-net-wifi-p2p-WifiP2pManager_ActionListener", "android-net-wifi-p2p-WifiP2pManager_Channel"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-p2p-WifiP2pManager_ActionListener", feature = "android-net-wifi-p2p-WifiP2pManager_Channel")))]
        pub fn discoverPeers<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::p2p::WifiP2pManager_Channel>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::p2p::WifiP2pManager_ActionListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/p2p/WifiP2pManager", java.flags == PUBLIC, .name == "discoverPeers", .descriptor == "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/WifiP2pManager$ActionListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/p2p/WifiP2pManager\0", "discoverPeers\0", "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/WifiP2pManager$ActionListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [stopPeerDiscovery](https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#stopPeerDiscovery(android.net.wifi.p2p.WifiP2pManager.Channel,%20android.net.wifi.p2p.WifiP2pManager.ActionListener))
        ///
        /// Required features: "android-net-wifi-p2p-WifiP2pManager_ActionListener", "android-net-wifi-p2p-WifiP2pManager_Channel"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-p2p-WifiP2pManager_ActionListener", feature = "android-net-wifi-p2p-WifiP2pManager_Channel")))]
        pub fn stopPeerDiscovery<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::p2p::WifiP2pManager_Channel>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::p2p::WifiP2pManager_ActionListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/p2p/WifiP2pManager", java.flags == PUBLIC, .name == "stopPeerDiscovery", .descriptor == "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/WifiP2pManager$ActionListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/p2p/WifiP2pManager\0", "stopPeerDiscovery\0", "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/WifiP2pManager$ActionListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [connect](https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#connect(android.net.wifi.p2p.WifiP2pManager.Channel,%20android.net.wifi.p2p.WifiP2pConfig,%20android.net.wifi.p2p.WifiP2pManager.ActionListener))
        ///
        /// Required features: "android-net-wifi-p2p-WifiP2pConfig", "android-net-wifi-p2p-WifiP2pManager_ActionListener", "android-net-wifi-p2p-WifiP2pManager_Channel"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-p2p-WifiP2pConfig", feature = "android-net-wifi-p2p-WifiP2pManager_ActionListener", feature = "android-net-wifi-p2p-WifiP2pManager_Channel")))]
        pub fn connect<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::p2p::WifiP2pManager_Channel>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::p2p::WifiP2pConfig>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::p2p::WifiP2pManager_ActionListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/p2p/WifiP2pManager", java.flags == PUBLIC, .name == "connect", .descriptor == "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/WifiP2pConfig;Landroid/net/wifi/p2p/WifiP2pManager$ActionListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/p2p/WifiP2pManager\0", "connect\0", "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/WifiP2pConfig;Landroid/net/wifi/p2p/WifiP2pManager$ActionListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [cancelConnect](https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#cancelConnect(android.net.wifi.p2p.WifiP2pManager.Channel,%20android.net.wifi.p2p.WifiP2pManager.ActionListener))
        ///
        /// Required features: "android-net-wifi-p2p-WifiP2pManager_ActionListener", "android-net-wifi-p2p-WifiP2pManager_Channel"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-p2p-WifiP2pManager_ActionListener", feature = "android-net-wifi-p2p-WifiP2pManager_Channel")))]
        pub fn cancelConnect<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::p2p::WifiP2pManager_Channel>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::p2p::WifiP2pManager_ActionListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/p2p/WifiP2pManager", java.flags == PUBLIC, .name == "cancelConnect", .descriptor == "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/WifiP2pManager$ActionListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/p2p/WifiP2pManager\0", "cancelConnect\0", "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/WifiP2pManager$ActionListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createGroup](https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#createGroup(android.net.wifi.p2p.WifiP2pManager.Channel,%20android.net.wifi.p2p.WifiP2pManager.ActionListener))
        ///
        /// Required features: "android-net-wifi-p2p-WifiP2pManager_ActionListener", "android-net-wifi-p2p-WifiP2pManager_Channel"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-p2p-WifiP2pManager_ActionListener", feature = "android-net-wifi-p2p-WifiP2pManager_Channel")))]
        pub fn createGroup_Channel_ActionListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::p2p::WifiP2pManager_Channel>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::p2p::WifiP2pManager_ActionListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/p2p/WifiP2pManager", java.flags == PUBLIC, .name == "createGroup", .descriptor == "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/WifiP2pManager$ActionListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/p2p/WifiP2pManager\0", "createGroup\0", "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/WifiP2pManager$ActionListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createGroup](https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#createGroup(android.net.wifi.p2p.WifiP2pManager.Channel,%20android.net.wifi.p2p.WifiP2pConfig,%20android.net.wifi.p2p.WifiP2pManager.ActionListener))
        ///
        /// Required features: "android-net-wifi-p2p-WifiP2pConfig", "android-net-wifi-p2p-WifiP2pManager_ActionListener", "android-net-wifi-p2p-WifiP2pManager_Channel"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-p2p-WifiP2pConfig", feature = "android-net-wifi-p2p-WifiP2pManager_ActionListener", feature = "android-net-wifi-p2p-WifiP2pManager_Channel")))]
        pub fn createGroup_Channel_WifiP2pConfig_ActionListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::p2p::WifiP2pManager_Channel>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::p2p::WifiP2pConfig>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::p2p::WifiP2pManager_ActionListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/p2p/WifiP2pManager", java.flags == PUBLIC, .name == "createGroup", .descriptor == "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/WifiP2pConfig;Landroid/net/wifi/p2p/WifiP2pManager$ActionListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/p2p/WifiP2pManager\0", "createGroup\0", "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/WifiP2pConfig;Landroid/net/wifi/p2p/WifiP2pManager$ActionListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeGroup](https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#removeGroup(android.net.wifi.p2p.WifiP2pManager.Channel,%20android.net.wifi.p2p.WifiP2pManager.ActionListener))
        ///
        /// Required features: "android-net-wifi-p2p-WifiP2pManager_ActionListener", "android-net-wifi-p2p-WifiP2pManager_Channel"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-p2p-WifiP2pManager_ActionListener", feature = "android-net-wifi-p2p-WifiP2pManager_Channel")))]
        pub fn removeGroup<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::p2p::WifiP2pManager_Channel>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::p2p::WifiP2pManager_ActionListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/p2p/WifiP2pManager", java.flags == PUBLIC, .name == "removeGroup", .descriptor == "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/WifiP2pManager$ActionListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/p2p/WifiP2pManager\0", "removeGroup\0", "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/WifiP2pManager$ActionListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addLocalService](https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#addLocalService(android.net.wifi.p2p.WifiP2pManager.Channel,%20android.net.wifi.p2p.nsd.WifiP2pServiceInfo,%20android.net.wifi.p2p.WifiP2pManager.ActionListener))
        ///
        /// Required features: "android-net-wifi-p2p-WifiP2pManager_ActionListener", "android-net-wifi-p2p-WifiP2pManager_Channel", "android-net-wifi-p2p-nsd-WifiP2pServiceInfo"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-p2p-WifiP2pManager_ActionListener", feature = "android-net-wifi-p2p-WifiP2pManager_Channel", feature = "android-net-wifi-p2p-nsd-WifiP2pServiceInfo")))]
        pub fn addLocalService<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::p2p::WifiP2pManager_Channel>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::p2p::nsd::WifiP2pServiceInfo>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::p2p::WifiP2pManager_ActionListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/p2p/WifiP2pManager", java.flags == PUBLIC, .name == "addLocalService", .descriptor == "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/nsd/WifiP2pServiceInfo;Landroid/net/wifi/p2p/WifiP2pManager$ActionListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/p2p/WifiP2pManager\0", "addLocalService\0", "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/nsd/WifiP2pServiceInfo;Landroid/net/wifi/p2p/WifiP2pManager$ActionListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeLocalService](https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#removeLocalService(android.net.wifi.p2p.WifiP2pManager.Channel,%20android.net.wifi.p2p.nsd.WifiP2pServiceInfo,%20android.net.wifi.p2p.WifiP2pManager.ActionListener))
        ///
        /// Required features: "android-net-wifi-p2p-WifiP2pManager_ActionListener", "android-net-wifi-p2p-WifiP2pManager_Channel", "android-net-wifi-p2p-nsd-WifiP2pServiceInfo"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-p2p-WifiP2pManager_ActionListener", feature = "android-net-wifi-p2p-WifiP2pManager_Channel", feature = "android-net-wifi-p2p-nsd-WifiP2pServiceInfo")))]
        pub fn removeLocalService<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::p2p::WifiP2pManager_Channel>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::p2p::nsd::WifiP2pServiceInfo>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::p2p::WifiP2pManager_ActionListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/p2p/WifiP2pManager", java.flags == PUBLIC, .name == "removeLocalService", .descriptor == "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/nsd/WifiP2pServiceInfo;Landroid/net/wifi/p2p/WifiP2pManager$ActionListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/p2p/WifiP2pManager\0", "removeLocalService\0", "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/nsd/WifiP2pServiceInfo;Landroid/net/wifi/p2p/WifiP2pManager$ActionListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clearLocalServices](https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#clearLocalServices(android.net.wifi.p2p.WifiP2pManager.Channel,%20android.net.wifi.p2p.WifiP2pManager.ActionListener))
        ///
        /// Required features: "android-net-wifi-p2p-WifiP2pManager_ActionListener", "android-net-wifi-p2p-WifiP2pManager_Channel"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-p2p-WifiP2pManager_ActionListener", feature = "android-net-wifi-p2p-WifiP2pManager_Channel")))]
        pub fn clearLocalServices<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::p2p::WifiP2pManager_Channel>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::p2p::WifiP2pManager_ActionListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/p2p/WifiP2pManager", java.flags == PUBLIC, .name == "clearLocalServices", .descriptor == "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/WifiP2pManager$ActionListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/p2p/WifiP2pManager\0", "clearLocalServices\0", "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/WifiP2pManager$ActionListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setServiceResponseListener](https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#setServiceResponseListener(android.net.wifi.p2p.WifiP2pManager.Channel,%20android.net.wifi.p2p.WifiP2pManager.ServiceResponseListener))
        ///
        /// Required features: "android-net-wifi-p2p-WifiP2pManager_Channel", "android-net-wifi-p2p-WifiP2pManager_ServiceResponseListener"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-p2p-WifiP2pManager_Channel", feature = "android-net-wifi-p2p-WifiP2pManager_ServiceResponseListener")))]
        pub fn setServiceResponseListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::p2p::WifiP2pManager_Channel>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::p2p::WifiP2pManager_ServiceResponseListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/p2p/WifiP2pManager", java.flags == PUBLIC, .name == "setServiceResponseListener", .descriptor == "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/WifiP2pManager$ServiceResponseListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/p2p/WifiP2pManager\0", "setServiceResponseListener\0", "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/WifiP2pManager$ServiceResponseListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDnsSdResponseListeners](https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#setDnsSdResponseListeners(android.net.wifi.p2p.WifiP2pManager.Channel,%20android.net.wifi.p2p.WifiP2pManager.DnsSdServiceResponseListener,%20android.net.wifi.p2p.WifiP2pManager.DnsSdTxtRecordListener))
        ///
        /// Required features: "android-net-wifi-p2p-WifiP2pManager_Channel", "android-net-wifi-p2p-WifiP2pManager_DnsSdServiceResponseListener", "android-net-wifi-p2p-WifiP2pManager_DnsSdTxtRecordListener"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-p2p-WifiP2pManager_Channel", feature = "android-net-wifi-p2p-WifiP2pManager_DnsSdServiceResponseListener", feature = "android-net-wifi-p2p-WifiP2pManager_DnsSdTxtRecordListener")))]
        pub fn setDnsSdResponseListeners<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::p2p::WifiP2pManager_Channel>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::p2p::WifiP2pManager_DnsSdServiceResponseListener>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::p2p::WifiP2pManager_DnsSdTxtRecordListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/p2p/WifiP2pManager", java.flags == PUBLIC, .name == "setDnsSdResponseListeners", .descriptor == "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/WifiP2pManager$DnsSdServiceResponseListener;Landroid/net/wifi/p2p/WifiP2pManager$DnsSdTxtRecordListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/p2p/WifiP2pManager\0", "setDnsSdResponseListeners\0", "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/WifiP2pManager$DnsSdServiceResponseListener;Landroid/net/wifi/p2p/WifiP2pManager$DnsSdTxtRecordListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setUpnpServiceResponseListener](https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#setUpnpServiceResponseListener(android.net.wifi.p2p.WifiP2pManager.Channel,%20android.net.wifi.p2p.WifiP2pManager.UpnpServiceResponseListener))
        ///
        /// Required features: "android-net-wifi-p2p-WifiP2pManager_Channel", "android-net-wifi-p2p-WifiP2pManager_UpnpServiceResponseListener"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-p2p-WifiP2pManager_Channel", feature = "android-net-wifi-p2p-WifiP2pManager_UpnpServiceResponseListener")))]
        pub fn setUpnpServiceResponseListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::p2p::WifiP2pManager_Channel>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::p2p::WifiP2pManager_UpnpServiceResponseListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/p2p/WifiP2pManager", java.flags == PUBLIC, .name == "setUpnpServiceResponseListener", .descriptor == "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/WifiP2pManager$UpnpServiceResponseListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/p2p/WifiP2pManager\0", "setUpnpServiceResponseListener\0", "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/WifiP2pManager$UpnpServiceResponseListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [discoverServices](https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#discoverServices(android.net.wifi.p2p.WifiP2pManager.Channel,%20android.net.wifi.p2p.WifiP2pManager.ActionListener))
        ///
        /// Required features: "android-net-wifi-p2p-WifiP2pManager_ActionListener", "android-net-wifi-p2p-WifiP2pManager_Channel"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-p2p-WifiP2pManager_ActionListener", feature = "android-net-wifi-p2p-WifiP2pManager_Channel")))]
        pub fn discoverServices<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::p2p::WifiP2pManager_Channel>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::p2p::WifiP2pManager_ActionListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/p2p/WifiP2pManager", java.flags == PUBLIC, .name == "discoverServices", .descriptor == "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/WifiP2pManager$ActionListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/p2p/WifiP2pManager\0", "discoverServices\0", "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/WifiP2pManager$ActionListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addServiceRequest](https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#addServiceRequest(android.net.wifi.p2p.WifiP2pManager.Channel,%20android.net.wifi.p2p.nsd.WifiP2pServiceRequest,%20android.net.wifi.p2p.WifiP2pManager.ActionListener))
        ///
        /// Required features: "android-net-wifi-p2p-WifiP2pManager_ActionListener", "android-net-wifi-p2p-WifiP2pManager_Channel", "android-net-wifi-p2p-nsd-WifiP2pServiceRequest"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-p2p-WifiP2pManager_ActionListener", feature = "android-net-wifi-p2p-WifiP2pManager_Channel", feature = "android-net-wifi-p2p-nsd-WifiP2pServiceRequest")))]
        pub fn addServiceRequest<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::p2p::WifiP2pManager_Channel>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::p2p::nsd::WifiP2pServiceRequest>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::p2p::WifiP2pManager_ActionListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/p2p/WifiP2pManager", java.flags == PUBLIC, .name == "addServiceRequest", .descriptor == "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/nsd/WifiP2pServiceRequest;Landroid/net/wifi/p2p/WifiP2pManager$ActionListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/p2p/WifiP2pManager\0", "addServiceRequest\0", "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/nsd/WifiP2pServiceRequest;Landroid/net/wifi/p2p/WifiP2pManager$ActionListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeServiceRequest](https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#removeServiceRequest(android.net.wifi.p2p.WifiP2pManager.Channel,%20android.net.wifi.p2p.nsd.WifiP2pServiceRequest,%20android.net.wifi.p2p.WifiP2pManager.ActionListener))
        ///
        /// Required features: "android-net-wifi-p2p-WifiP2pManager_ActionListener", "android-net-wifi-p2p-WifiP2pManager_Channel", "android-net-wifi-p2p-nsd-WifiP2pServiceRequest"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-p2p-WifiP2pManager_ActionListener", feature = "android-net-wifi-p2p-WifiP2pManager_Channel", feature = "android-net-wifi-p2p-nsd-WifiP2pServiceRequest")))]
        pub fn removeServiceRequest<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::p2p::WifiP2pManager_Channel>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::p2p::nsd::WifiP2pServiceRequest>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::p2p::WifiP2pManager_ActionListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/p2p/WifiP2pManager", java.flags == PUBLIC, .name == "removeServiceRequest", .descriptor == "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/nsd/WifiP2pServiceRequest;Landroid/net/wifi/p2p/WifiP2pManager$ActionListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/p2p/WifiP2pManager\0", "removeServiceRequest\0", "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/nsd/WifiP2pServiceRequest;Landroid/net/wifi/p2p/WifiP2pManager$ActionListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clearServiceRequests](https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#clearServiceRequests(android.net.wifi.p2p.WifiP2pManager.Channel,%20android.net.wifi.p2p.WifiP2pManager.ActionListener))
        ///
        /// Required features: "android-net-wifi-p2p-WifiP2pManager_ActionListener", "android-net-wifi-p2p-WifiP2pManager_Channel"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-p2p-WifiP2pManager_ActionListener", feature = "android-net-wifi-p2p-WifiP2pManager_Channel")))]
        pub fn clearServiceRequests<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::p2p::WifiP2pManager_Channel>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::p2p::WifiP2pManager_ActionListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/p2p/WifiP2pManager", java.flags == PUBLIC, .name == "clearServiceRequests", .descriptor == "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/WifiP2pManager$ActionListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/p2p/WifiP2pManager\0", "clearServiceRequests\0", "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/WifiP2pManager$ActionListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [requestPeers](https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#requestPeers(android.net.wifi.p2p.WifiP2pManager.Channel,%20android.net.wifi.p2p.WifiP2pManager.PeerListListener))
        ///
        /// Required features: "android-net-wifi-p2p-WifiP2pManager_Channel", "android-net-wifi-p2p-WifiP2pManager_PeerListListener"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-p2p-WifiP2pManager_Channel", feature = "android-net-wifi-p2p-WifiP2pManager_PeerListListener")))]
        pub fn requestPeers<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::p2p::WifiP2pManager_Channel>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::p2p::WifiP2pManager_PeerListListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/p2p/WifiP2pManager", java.flags == PUBLIC, .name == "requestPeers", .descriptor == "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/WifiP2pManager$PeerListListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/p2p/WifiP2pManager\0", "requestPeers\0", "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/WifiP2pManager$PeerListListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [requestConnectionInfo](https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#requestConnectionInfo(android.net.wifi.p2p.WifiP2pManager.Channel,%20android.net.wifi.p2p.WifiP2pManager.ConnectionInfoListener))
        ///
        /// Required features: "android-net-wifi-p2p-WifiP2pManager_Channel", "android-net-wifi-p2p-WifiP2pManager_ConnectionInfoListener"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-p2p-WifiP2pManager_Channel", feature = "android-net-wifi-p2p-WifiP2pManager_ConnectionInfoListener")))]
        pub fn requestConnectionInfo<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::p2p::WifiP2pManager_Channel>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::p2p::WifiP2pManager_ConnectionInfoListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/p2p/WifiP2pManager", java.flags == PUBLIC, .name == "requestConnectionInfo", .descriptor == "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/WifiP2pManager$ConnectionInfoListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/p2p/WifiP2pManager\0", "requestConnectionInfo\0", "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/WifiP2pManager$ConnectionInfoListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [requestGroupInfo](https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#requestGroupInfo(android.net.wifi.p2p.WifiP2pManager.Channel,%20android.net.wifi.p2p.WifiP2pManager.GroupInfoListener))
        ///
        /// Required features: "android-net-wifi-p2p-WifiP2pManager_Channel", "android-net-wifi-p2p-WifiP2pManager_GroupInfoListener"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-p2p-WifiP2pManager_Channel", feature = "android-net-wifi-p2p-WifiP2pManager_GroupInfoListener")))]
        pub fn requestGroupInfo<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::p2p::WifiP2pManager_Channel>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::p2p::WifiP2pManager_GroupInfoListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/p2p/WifiP2pManager", java.flags == PUBLIC, .name == "requestGroupInfo", .descriptor == "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/WifiP2pManager$GroupInfoListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/p2p/WifiP2pManager\0", "requestGroupInfo\0", "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/WifiP2pManager$GroupInfoListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [requestP2pState](https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#requestP2pState(android.net.wifi.p2p.WifiP2pManager.Channel,%20android.net.wifi.p2p.WifiP2pManager.P2pStateListener))
        ///
        /// Required features: "android-net-wifi-p2p-WifiP2pManager_Channel", "android-net-wifi-p2p-WifiP2pManager_P2pStateListener"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-p2p-WifiP2pManager_Channel", feature = "android-net-wifi-p2p-WifiP2pManager_P2pStateListener")))]
        pub fn requestP2pState<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::p2p::WifiP2pManager_Channel>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::p2p::WifiP2pManager_P2pStateListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/p2p/WifiP2pManager", java.flags == PUBLIC, .name == "requestP2pState", .descriptor == "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/WifiP2pManager$P2pStateListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/p2p/WifiP2pManager\0", "requestP2pState\0", "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/WifiP2pManager$P2pStateListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [requestDiscoveryState](https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#requestDiscoveryState(android.net.wifi.p2p.WifiP2pManager.Channel,%20android.net.wifi.p2p.WifiP2pManager.DiscoveryStateListener))
        ///
        /// Required features: "android-net-wifi-p2p-WifiP2pManager_Channel", "android-net-wifi-p2p-WifiP2pManager_DiscoveryStateListener"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-p2p-WifiP2pManager_Channel", feature = "android-net-wifi-p2p-WifiP2pManager_DiscoveryStateListener")))]
        pub fn requestDiscoveryState<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::p2p::WifiP2pManager_Channel>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::p2p::WifiP2pManager_DiscoveryStateListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/p2p/WifiP2pManager", java.flags == PUBLIC, .name == "requestDiscoveryState", .descriptor == "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/WifiP2pManager$DiscoveryStateListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/p2p/WifiP2pManager\0", "requestDiscoveryState\0", "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/WifiP2pManager$DiscoveryStateListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [requestNetworkInfo](https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#requestNetworkInfo(android.net.wifi.p2p.WifiP2pManager.Channel,%20android.net.wifi.p2p.WifiP2pManager.NetworkInfoListener))
        ///
        /// Required features: "android-net-wifi-p2p-WifiP2pManager_Channel", "android-net-wifi-p2p-WifiP2pManager_NetworkInfoListener"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-p2p-WifiP2pManager_Channel", feature = "android-net-wifi-p2p-WifiP2pManager_NetworkInfoListener")))]
        pub fn requestNetworkInfo<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::p2p::WifiP2pManager_Channel>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::p2p::WifiP2pManager_NetworkInfoListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/p2p/WifiP2pManager", java.flags == PUBLIC, .name == "requestNetworkInfo", .descriptor == "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/WifiP2pManager$NetworkInfoListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/p2p/WifiP2pManager\0", "requestNetworkInfo\0", "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/WifiP2pManager$NetworkInfoListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [requestDeviceInfo](https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#requestDeviceInfo(android.net.wifi.p2p.WifiP2pManager.Channel,%20android.net.wifi.p2p.WifiP2pManager.DeviceInfoListener))
        ///
        /// Required features: "android-net-wifi-p2p-WifiP2pManager_Channel", "android-net-wifi-p2p-WifiP2pManager_DeviceInfoListener"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-p2p-WifiP2pManager_Channel", feature = "android-net-wifi-p2p-WifiP2pManager_DeviceInfoListener")))]
        pub fn requestDeviceInfo<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::p2p::WifiP2pManager_Channel>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::p2p::WifiP2pManager_DeviceInfoListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/p2p/WifiP2pManager", java.flags == PUBLIC, .name == "requestDeviceInfo", .descriptor == "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/WifiP2pManager$DeviceInfoListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/p2p/WifiP2pManager\0", "requestDeviceInfo\0", "(Landroid/net/wifi/p2p/WifiP2pManager$Channel;Landroid/net/wifi/p2p/WifiP2pManager$DeviceInfoListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [BUSY](https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#BUSY)
        pub const BUSY : i32 = 2;

        /// public static final [ERROR](https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#ERROR)
        pub const ERROR : i32 = 0;

        /// public static final [EXTRA_DISCOVERY_STATE](https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#EXTRA_DISCOVERY_STATE)
        pub const EXTRA_DISCOVERY_STATE : &'static str = "discoveryState";

        /// public static final [EXTRA_NETWORK_INFO](https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#EXTRA_NETWORK_INFO)
        pub const EXTRA_NETWORK_INFO : &'static str = "networkInfo";

        /// public static final [EXTRA_P2P_DEVICE_LIST](https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#EXTRA_P2P_DEVICE_LIST)
        pub const EXTRA_P2P_DEVICE_LIST : &'static str = "wifiP2pDeviceList";

        /// public static final [EXTRA_WIFI_P2P_DEVICE](https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#EXTRA_WIFI_P2P_DEVICE)
        pub const EXTRA_WIFI_P2P_DEVICE : &'static str = "wifiP2pDevice";

        /// public static final [EXTRA_WIFI_P2P_GROUP](https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#EXTRA_WIFI_P2P_GROUP)
        pub const EXTRA_WIFI_P2P_GROUP : &'static str = "p2pGroupInfo";

        /// public static final [EXTRA_WIFI_P2P_INFO](https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#EXTRA_WIFI_P2P_INFO)
        pub const EXTRA_WIFI_P2P_INFO : &'static str = "wifiP2pInfo";

        /// public static final [EXTRA_WIFI_STATE](https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#EXTRA_WIFI_STATE)
        pub const EXTRA_WIFI_STATE : &'static str = "wifi_p2p_state";

        /// public static final [NO_SERVICE_REQUESTS](https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#NO_SERVICE_REQUESTS)
        pub const NO_SERVICE_REQUESTS : i32 = 3;

        /// public static final [P2P_UNSUPPORTED](https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#P2P_UNSUPPORTED)
        pub const P2P_UNSUPPORTED : i32 = 1;

        /// public static final [WIFI_P2P_CONNECTION_CHANGED_ACTION](https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#WIFI_P2P_CONNECTION_CHANGED_ACTION)
        pub const WIFI_P2P_CONNECTION_CHANGED_ACTION : &'static str = "android.net.wifi.p2p.CONNECTION_STATE_CHANGE";

        /// public static final [WIFI_P2P_DISCOVERY_CHANGED_ACTION](https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#WIFI_P2P_DISCOVERY_CHANGED_ACTION)
        pub const WIFI_P2P_DISCOVERY_CHANGED_ACTION : &'static str = "android.net.wifi.p2p.DISCOVERY_STATE_CHANGE";

        /// public static final [WIFI_P2P_DISCOVERY_STARTED](https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#WIFI_P2P_DISCOVERY_STARTED)
        pub const WIFI_P2P_DISCOVERY_STARTED : i32 = 2;

        /// public static final [WIFI_P2P_DISCOVERY_STOPPED](https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#WIFI_P2P_DISCOVERY_STOPPED)
        pub const WIFI_P2P_DISCOVERY_STOPPED : i32 = 1;

        /// public static final [WIFI_P2P_PEERS_CHANGED_ACTION](https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#WIFI_P2P_PEERS_CHANGED_ACTION)
        pub const WIFI_P2P_PEERS_CHANGED_ACTION : &'static str = "android.net.wifi.p2p.PEERS_CHANGED";

        /// public static final [WIFI_P2P_STATE_CHANGED_ACTION](https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#WIFI_P2P_STATE_CHANGED_ACTION)
        pub const WIFI_P2P_STATE_CHANGED_ACTION : &'static str = "android.net.wifi.p2p.STATE_CHANGED";

        /// public static final [WIFI_P2P_STATE_DISABLED](https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#WIFI_P2P_STATE_DISABLED)
        pub const WIFI_P2P_STATE_DISABLED : i32 = 1;

        /// public static final [WIFI_P2P_STATE_ENABLED](https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#WIFI_P2P_STATE_ENABLED)
        pub const WIFI_P2P_STATE_ENABLED : i32 = 2;

        /// public static final [WIFI_P2P_THIS_DEVICE_CHANGED_ACTION](https://developer.android.com/reference/android/net/wifi/p2p/WifiP2pManager.html#WIFI_P2P_THIS_DEVICE_CHANGED_ACTION)
        pub const WIFI_P2P_THIS_DEVICE_CHANGED_ACTION : &'static str = "android.net.wifi.p2p.THIS_DEVICE_CHANGED";
    }
}
