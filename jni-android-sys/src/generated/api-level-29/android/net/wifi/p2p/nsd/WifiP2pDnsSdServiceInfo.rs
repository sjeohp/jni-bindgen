// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-net-wifi-p2p-nsd-WifiP2pDnsSdServiceInfo"))]
__jni_bindgen! {
    /// public class [WifiP2pDnsSdServiceInfo](https://developer.android.com/reference/android/net/wifi/p2p/nsd/WifiP2pDnsSdServiceInfo.html)
    ///
    /// Required feature: android-net-wifi-p2p-nsd-WifiP2pDnsSdServiceInfo
    public class WifiP2pDnsSdServiceInfo ("android/net/wifi/p2p/nsd/WifiP2pDnsSdServiceInfo") extends crate::android::net::wifi::p2p::nsd::WifiP2pServiceInfo {

        // // Not emitting: Non-public method
        // /// [WifiP2pDnsSdServiceInfo](https://developer.android.com/reference/android/net/wifi/p2p/nsd/WifiP2pDnsSdServiceInfo.html#WifiP2pDnsSdServiceInfo(java.util.List))
        // ///
        // /// Required features: "java-util-List"
        // #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::net::wifi::p2p::nsd::WifiP2pDnsSdServiceInfo>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/net/wifi/p2p/nsd/WifiP2pDnsSdServiceInfo", java.flags == (empty), .name == "<init>", .descriptor == "(Ljava/util/List;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/p2p/nsd/WifiP2pDnsSdServiceInfo\0", "<init>\0", "(Ljava/util/List;)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [newInstance](https://developer.android.com/reference/android/net/wifi/p2p/nsd/WifiP2pDnsSdServiceInfo.html#newInstance(java.lang.String,%20java.lang.String,%20java.util.Map))
        ///
        /// Required features: "android-net-wifi-p2p-nsd-WifiP2pDnsSdServiceInfo", "java-lang-String", "java-util-Map"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-p2p-nsd-WifiP2pDnsSdServiceInfo", feature = "java-lang-String", feature = "java-util-Map")))]
        pub fn newInstance<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Map>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::wifi::p2p::nsd::WifiP2pDnsSdServiceInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/p2p/nsd/WifiP2pDnsSdServiceInfo", java.flags == PUBLIC | STATIC, .name == "newInstance", .descriptor == "(Ljava/lang/String;Ljava/lang/String;Ljava/util/Map;)Landroid/net/wifi/p2p/nsd/WifiP2pDnsSdServiceInfo;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/net/wifi/p2p/nsd/WifiP2pDnsSdServiceInfo\0", "newInstance\0", "(Ljava/lang/String;Ljava/lang/String;Ljava/util/Map;)Landroid/net/wifi/p2p/nsd/WifiP2pDnsSdServiceInfo;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
