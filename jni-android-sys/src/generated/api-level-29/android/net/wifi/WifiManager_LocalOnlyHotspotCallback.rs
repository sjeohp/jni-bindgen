// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-net-wifi-WifiManager_LocalOnlyHotspotCallback"))]
__jni_bindgen! {
    /// public class [WifiManager.LocalOnlyHotspotCallback](https://developer.android.com/reference/android/net/wifi/WifiManager.LocalOnlyHotspotCallback.html)
    ///
    /// Required feature: android-net-wifi-WifiManager_LocalOnlyHotspotCallback
    public class WifiManager_LocalOnlyHotspotCallback ("android/net/wifi/WifiManager$LocalOnlyHotspotCallback") extends crate::java::lang::Object {

        /// [LocalOnlyHotspotCallback](https://developer.android.com/reference/android/net/wifi/WifiManager.LocalOnlyHotspotCallback.html#LocalOnlyHotspotCallback())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::net::wifi::WifiManager_LocalOnlyHotspotCallback>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiManager$LocalOnlyHotspotCallback", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiManager$LocalOnlyHotspotCallback\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onStarted](https://developer.android.com/reference/android/net/wifi/WifiManager.LocalOnlyHotspotCallback.html#onStarted(android.net.wifi.WifiManager.LocalOnlyHotspotReservation))
        ///
        /// Required features: "android-net-wifi-WifiManager_LocalOnlyHotspotReservation"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-WifiManager_LocalOnlyHotspotReservation")))]
        pub fn onStarted<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::WifiManager_LocalOnlyHotspotReservation>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiManager$LocalOnlyHotspotCallback", java.flags == PUBLIC, .name == "onStarted", .descriptor == "(Landroid/net/wifi/WifiManager$LocalOnlyHotspotReservation;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiManager$LocalOnlyHotspotCallback\0", "onStarted\0", "(Landroid/net/wifi/WifiManager$LocalOnlyHotspotReservation;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onStopped](https://developer.android.com/reference/android/net/wifi/WifiManager.LocalOnlyHotspotCallback.html#onStopped())
        pub fn onStopped<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiManager$LocalOnlyHotspotCallback", java.flags == PUBLIC, .name == "onStopped", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiManager$LocalOnlyHotspotCallback\0", "onStopped\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onFailed](https://developer.android.com/reference/android/net/wifi/WifiManager.LocalOnlyHotspotCallback.html#onFailed(int))
        pub fn onFailed<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiManager$LocalOnlyHotspotCallback", java.flags == PUBLIC, .name == "onFailed", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiManager$LocalOnlyHotspotCallback\0", "onFailed\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [ERROR_GENERIC](https://developer.android.com/reference/android/net/wifi/WifiManager.LocalOnlyHotspotCallback.html#ERROR_GENERIC)
        pub const ERROR_GENERIC : i32 = 2;

        /// public static final [ERROR_INCOMPATIBLE_MODE](https://developer.android.com/reference/android/net/wifi/WifiManager.LocalOnlyHotspotCallback.html#ERROR_INCOMPATIBLE_MODE)
        pub const ERROR_INCOMPATIBLE_MODE : i32 = 3;

        /// public static final [ERROR_NO_CHANNEL](https://developer.android.com/reference/android/net/wifi/WifiManager.LocalOnlyHotspotCallback.html#ERROR_NO_CHANNEL)
        pub const ERROR_NO_CHANNEL : i32 = 1;

        /// public static final [ERROR_TETHERING_DISALLOWED](https://developer.android.com/reference/android/net/wifi/WifiManager.LocalOnlyHotspotCallback.html#ERROR_TETHERING_DISALLOWED)
        pub const ERROR_TETHERING_DISALLOWED : i32 = 4;
    }
}
