// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-net-wifi-WifiManager_LocalOnlyHotspotReservation"))]
__jni_bindgen! {
    /// public class [WifiManager.LocalOnlyHotspotReservation](https://developer.android.com/reference/android/net/wifi/WifiManager.LocalOnlyHotspotReservation.html)
    ///
    /// Required feature: android-net-wifi-WifiManager_LocalOnlyHotspotReservation
    public class WifiManager_LocalOnlyHotspotReservation ("android/net/wifi/WifiManager$LocalOnlyHotspotReservation") extends crate::java::lang::Object, implements crate::java::lang::AutoCloseable {

        // // Not emitting: Non-public method
        // /// [LocalOnlyHotspotReservation](https://developer.android.com/reference/android/net/wifi/WifiManager.LocalOnlyHotspotReservation.html#LocalOnlyHotspotReservation(android.net.wifi.WifiManager,%20android.net.wifi.WifiConfiguration))
        // ///
        // /// Required features: "android-net-wifi-WifiConfiguration", "android-net-wifi-WifiManager"
        // #[cfg(any(feature = "all", all(feature = "android-net-wifi-WifiConfiguration", feature = "android-net-wifi-WifiManager")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::WifiManager>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::wifi::WifiConfiguration>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::net::wifi::WifiManager_LocalOnlyHotspotReservation>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/net/wifi/WifiManager$LocalOnlyHotspotReservation", java.flags == (empty), .name == "<init>", .descriptor == "(Landroid/net/wifi/WifiManager;Landroid/net/wifi/WifiConfiguration;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiManager$LocalOnlyHotspotReservation\0", "<init>\0", "(Landroid/net/wifi/WifiManager;Landroid/net/wifi/WifiConfiguration;)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getWifiConfiguration](https://developer.android.com/reference/android/net/wifi/WifiManager.LocalOnlyHotspotReservation.html#getWifiConfiguration())
        ///
        /// Required features: "android-net-wifi-WifiConfiguration"
        #[cfg(any(feature = "all", all(feature = "android-net-wifi-WifiConfiguration")))]
        pub fn getWifiConfiguration<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::wifi::WifiConfiguration>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiManager$LocalOnlyHotspotReservation", java.flags == PUBLIC, .name == "getWifiConfiguration", .descriptor == "()Landroid/net/wifi/WifiConfiguration;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiManager$LocalOnlyHotspotReservation\0", "getWifiConfiguration\0", "()Landroid/net/wifi/WifiConfiguration;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [close](https://developer.android.com/reference/android/net/wifi/WifiManager.LocalOnlyHotspotReservation.html#close())
        pub fn close<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/WifiManager$LocalOnlyHotspotReservation", java.flags == PUBLIC, .name == "close", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiManager$LocalOnlyHotspotReservation\0", "close\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [finalize](https://developer.android.com/reference/android/net/wifi/WifiManager.LocalOnlyHotspotReservation.html#finalize())
        // fn finalize<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/net/wifi/WifiManager$LocalOnlyHotspotReservation", java.flags == PROTECTED, .name == "finalize", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/WifiManager$LocalOnlyHotspotReservation\0", "finalize\0", "()V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public field
        // // Not emitting: Failed to mangle field name: this$N outer class pointer
        // pub fn get_"this$0"<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::wifi::WifiManager>> { ... }
    }
}
