// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-net-wifi-rtt-ResponderLocation"))]
__jni_bindgen! {
    /// public final class [ResponderLocation](https://developer.android.com/reference/android/net/wifi/rtt/ResponderLocation.html)
    ///
    /// Required feature: android-net-wifi-rtt-ResponderLocation
    public final class ResponderLocation ("android/net/wifi/rtt/ResponderLocation") extends crate::java::lang::Object, implements crate::android::os::Parcelable {

        // // Not emitting: Non-public method
        // /// [ResponderLocation](https://developer.android.com/reference/android/net/wifi/rtt/ResponderLocation.html#ResponderLocation(android.os.Parcel))
        // ///
        // /// Required features: "android-os-Parcel"
        // #[cfg(any(feature = "all", all(feature = "android-os-Parcel")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Parcel>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::net::wifi::rtt::ResponderLocation>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/net/wifi/rtt/ResponderLocation", java.flags == (empty), .name == "<init>", .descriptor == "(Landroid/os/Parcel;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/rtt/ResponderLocation\0", "<init>\0", "(Landroid/os/Parcel;)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [describeContents](https://developer.android.com/reference/android/net/wifi/rtt/ResponderLocation.html#describeContents())
        pub fn describeContents<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/rtt/ResponderLocation", java.flags == PUBLIC, .name == "describeContents", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/rtt/ResponderLocation\0", "describeContents\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [writeToParcel](https://developer.android.com/reference/android/net/wifi/rtt/ResponderLocation.html#writeToParcel(android.os.Parcel,%20int))
        ///
        /// Required features: "android-os-Parcel"
        #[cfg(any(feature = "all", all(feature = "android-os-Parcel")))]
        pub fn writeToParcel<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Parcel>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/rtt/ResponderLocation", java.flags == PUBLIC, .name == "writeToParcel", .descriptor == "(Landroid/os/Parcel;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/rtt/ResponderLocation\0", "writeToParcel\0", "(Landroid/os/Parcel;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [equals](https://developer.android.com/reference/android/net/wifi/rtt/ResponderLocation.html#equals(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn equals<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/rtt/ResponderLocation", java.flags == PUBLIC, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/rtt/ResponderLocation\0", "equals\0", "(Ljava/lang/Object;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hashCode](https://developer.android.com/reference/android/net/wifi/rtt/ResponderLocation.html#hashCode())
        pub fn hashCode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/rtt/ResponderLocation", java.flags == PUBLIC, .name == "hashCode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/rtt/ResponderLocation\0", "hashCode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isLciSubelementValid](https://developer.android.com/reference/android/net/wifi/rtt/ResponderLocation.html#isLciSubelementValid())
        pub fn isLciSubelementValid<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/rtt/ResponderLocation", java.flags == PUBLIC, .name == "isLciSubelementValid", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/rtt/ResponderLocation\0", "isLciSubelementValid\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLatitudeUncertainty](https://developer.android.com/reference/android/net/wifi/rtt/ResponderLocation.html#getLatitudeUncertainty())
        pub fn getLatitudeUncertainty<'env>(&'env self) -> __jni_bindgen::std::result::Result<f64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/rtt/ResponderLocation", java.flags == PUBLIC, .name == "getLatitudeUncertainty", .descriptor == "()D"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/rtt/ResponderLocation\0", "getLatitudeUncertainty\0", "()D\0");
                __jni_env.call_double_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLatitude](https://developer.android.com/reference/android/net/wifi/rtt/ResponderLocation.html#getLatitude())
        pub fn getLatitude<'env>(&'env self) -> __jni_bindgen::std::result::Result<f64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/rtt/ResponderLocation", java.flags == PUBLIC, .name == "getLatitude", .descriptor == "()D"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/rtt/ResponderLocation\0", "getLatitude\0", "()D\0");
                __jni_env.call_double_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLongitudeUncertainty](https://developer.android.com/reference/android/net/wifi/rtt/ResponderLocation.html#getLongitudeUncertainty())
        pub fn getLongitudeUncertainty<'env>(&'env self) -> __jni_bindgen::std::result::Result<f64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/rtt/ResponderLocation", java.flags == PUBLIC, .name == "getLongitudeUncertainty", .descriptor == "()D"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/rtt/ResponderLocation\0", "getLongitudeUncertainty\0", "()D\0");
                __jni_env.call_double_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLongitude](https://developer.android.com/reference/android/net/wifi/rtt/ResponderLocation.html#getLongitude())
        pub fn getLongitude<'env>(&'env self) -> __jni_bindgen::std::result::Result<f64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/rtt/ResponderLocation", java.flags == PUBLIC, .name == "getLongitude", .descriptor == "()D"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/rtt/ResponderLocation\0", "getLongitude\0", "()D\0");
                __jni_env.call_double_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAltitudeType](https://developer.android.com/reference/android/net/wifi/rtt/ResponderLocation.html#getAltitudeType())
        pub fn getAltitudeType<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/rtt/ResponderLocation", java.flags == PUBLIC, .name == "getAltitudeType", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/rtt/ResponderLocation\0", "getAltitudeType\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAltitudeUncertainty](https://developer.android.com/reference/android/net/wifi/rtt/ResponderLocation.html#getAltitudeUncertainty())
        pub fn getAltitudeUncertainty<'env>(&'env self) -> __jni_bindgen::std::result::Result<f64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/rtt/ResponderLocation", java.flags == PUBLIC, .name == "getAltitudeUncertainty", .descriptor == "()D"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/rtt/ResponderLocation\0", "getAltitudeUncertainty\0", "()D\0");
                __jni_env.call_double_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAltitude](https://developer.android.com/reference/android/net/wifi/rtt/ResponderLocation.html#getAltitude())
        pub fn getAltitude<'env>(&'env self) -> __jni_bindgen::std::result::Result<f64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/rtt/ResponderLocation", java.flags == PUBLIC, .name == "getAltitude", .descriptor == "()D"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/rtt/ResponderLocation\0", "getAltitude\0", "()D\0");
                __jni_env.call_double_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDatum](https://developer.android.com/reference/android/net/wifi/rtt/ResponderLocation.html#getDatum())
        pub fn getDatum<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/rtt/ResponderLocation", java.flags == PUBLIC, .name == "getDatum", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/rtt/ResponderLocation\0", "getDatum\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRegisteredLocationAgreementIndication](https://developer.android.com/reference/android/net/wifi/rtt/ResponderLocation.html#getRegisteredLocationAgreementIndication())
        pub fn getRegisteredLocationAgreementIndication<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/rtt/ResponderLocation", java.flags == PUBLIC, .name == "getRegisteredLocationAgreementIndication", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/rtt/ResponderLocation\0", "getRegisteredLocationAgreementIndication\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLciVersion](https://developer.android.com/reference/android/net/wifi/rtt/ResponderLocation.html#getLciVersion())
        pub fn getLciVersion<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/rtt/ResponderLocation", java.flags == PUBLIC, .name == "getLciVersion", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/rtt/ResponderLocation\0", "getLciVersion\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toLocation](https://developer.android.com/reference/android/net/wifi/rtt/ResponderLocation.html#toLocation())
        ///
        /// Required features: "android-location-Location"
        #[cfg(any(feature = "all", all(feature = "android-location-Location")))]
        pub fn toLocation<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::location::Location>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/rtt/ResponderLocation", java.flags == PUBLIC, .name == "toLocation", .descriptor == "()Landroid/location/Location;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/rtt/ResponderLocation\0", "toLocation\0", "()Landroid/location/Location;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isZaxisSubelementValid](https://developer.android.com/reference/android/net/wifi/rtt/ResponderLocation.html#isZaxisSubelementValid())
        pub fn isZaxisSubelementValid<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/rtt/ResponderLocation", java.flags == PUBLIC, .name == "isZaxisSubelementValid", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/rtt/ResponderLocation\0", "isZaxisSubelementValid\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getExpectedToMove](https://developer.android.com/reference/android/net/wifi/rtt/ResponderLocation.html#getExpectedToMove())
        pub fn getExpectedToMove<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/rtt/ResponderLocation", java.flags == PUBLIC, .name == "getExpectedToMove", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/rtt/ResponderLocation\0", "getExpectedToMove\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFloorNumber](https://developer.android.com/reference/android/net/wifi/rtt/ResponderLocation.html#getFloorNumber())
        pub fn getFloorNumber<'env>(&'env self) -> __jni_bindgen::std::result::Result<f64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/rtt/ResponderLocation", java.flags == PUBLIC, .name == "getFloorNumber", .descriptor == "()D"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/rtt/ResponderLocation\0", "getFloorNumber\0", "()D\0");
                __jni_env.call_double_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getHeightAboveFloorMeters](https://developer.android.com/reference/android/net/wifi/rtt/ResponderLocation.html#getHeightAboveFloorMeters())
        pub fn getHeightAboveFloorMeters<'env>(&'env self) -> __jni_bindgen::std::result::Result<f64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/rtt/ResponderLocation", java.flags == PUBLIC, .name == "getHeightAboveFloorMeters", .descriptor == "()D"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/rtt/ResponderLocation\0", "getHeightAboveFloorMeters\0", "()D\0");
                __jni_env.call_double_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getHeightAboveFloorUncertaintyMeters](https://developer.android.com/reference/android/net/wifi/rtt/ResponderLocation.html#getHeightAboveFloorUncertaintyMeters())
        pub fn getHeightAboveFloorUncertaintyMeters<'env>(&'env self) -> __jni_bindgen::std::result::Result<f64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/rtt/ResponderLocation", java.flags == PUBLIC, .name == "getHeightAboveFloorUncertaintyMeters", .descriptor == "()D"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/rtt/ResponderLocation\0", "getHeightAboveFloorUncertaintyMeters\0", "()D\0");
                __jni_env.call_double_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getColocatedBssids](https://developer.android.com/reference/android/net/wifi/rtt/ResponderLocation.html#getColocatedBssids())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getColocatedBssids<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/rtt/ResponderLocation", java.flags == PUBLIC, .name == "getColocatedBssids", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/rtt/ResponderLocation\0", "getColocatedBssids\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toCivicLocationAddress](https://developer.android.com/reference/android/net/wifi/rtt/ResponderLocation.html#toCivicLocationAddress())
        ///
        /// Required features: "android-location-Address"
        #[cfg(any(feature = "all", all(feature = "android-location-Address")))]
        pub fn toCivicLocationAddress<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::location::Address>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/rtt/ResponderLocation", java.flags == PUBLIC, .name == "toCivicLocationAddress", .descriptor == "()Landroid/location/Address;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/rtt/ResponderLocation\0", "toCivicLocationAddress\0", "()Landroid/location/Address;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toCivicLocationSparseArray](https://developer.android.com/reference/android/net/wifi/rtt/ResponderLocation.html#toCivicLocationSparseArray())
        ///
        /// Required features: "android-util-SparseArray"
        #[cfg(any(feature = "all", all(feature = "android-util-SparseArray")))]
        pub fn toCivicLocationSparseArray<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::util::SparseArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/rtt/ResponderLocation", java.flags == PUBLIC, .name == "toCivicLocationSparseArray", .descriptor == "()Landroid/util/SparseArray;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/rtt/ResponderLocation\0", "toCivicLocationSparseArray\0", "()Landroid/util/SparseArray;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMapImageMimeType](https://developer.android.com/reference/android/net/wifi/rtt/ResponderLocation.html#getMapImageMimeType())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getMapImageMimeType<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/rtt/ResponderLocation", java.flags == PUBLIC, .name == "getMapImageMimeType", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/rtt/ResponderLocation\0", "getMapImageMimeType\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMapImageUri](https://developer.android.com/reference/android/net/wifi/rtt/ResponderLocation.html#getMapImageUri())
        ///
        /// Required features: "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri")))]
        pub fn getMapImageUri<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/wifi/rtt/ResponderLocation", java.flags == PUBLIC, .name == "getMapImageUri", .descriptor == "()Landroid/net/Uri;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/wifi/rtt/ResponderLocation\0", "getMapImageUri\0", "()Landroid/net/Uri;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [ALTITUDE_FLOORS](https://developer.android.com/reference/android/net/wifi/rtt/ResponderLocation.html#ALTITUDE_FLOORS)
        pub const ALTITUDE_FLOORS : i32 = 2;

        /// public static final [ALTITUDE_METERS](https://developer.android.com/reference/android/net/wifi/rtt/ResponderLocation.html#ALTITUDE_METERS)
        pub const ALTITUDE_METERS : i32 = 1;

        /// public static final [ALTITUDE_UNDEFINED](https://developer.android.com/reference/android/net/wifi/rtt/ResponderLocation.html#ALTITUDE_UNDEFINED)
        pub const ALTITUDE_UNDEFINED : i32 = 0;

        /// **get** public static final [CREATOR](https://developer.android.com/reference/android/net/wifi/rtt/ResponderLocation.html#CREATOR)
        ///
        /// Required feature: android-os-Parcelable_Creator
        #[cfg(any(feature = "all", feature = "android-os-Parcelable_Creator"))]
        pub fn CREATOR<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Parcelable_Creator>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/net/wifi/rtt/ResponderLocation\0", "CREATOR\0", "Landroid/os/Parcelable$Creator;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// public static final [DATUM_NAD83_MLLW](https://developer.android.com/reference/android/net/wifi/rtt/ResponderLocation.html#DATUM_NAD83_MLLW)
        pub const DATUM_NAD83_MLLW : i32 = 3;

        /// public static final [DATUM_NAD83_NAV88](https://developer.android.com/reference/android/net/wifi/rtt/ResponderLocation.html#DATUM_NAD83_NAV88)
        pub const DATUM_NAD83_NAV88 : i32 = 2;

        /// public static final [DATUM_UNDEFINED](https://developer.android.com/reference/android/net/wifi/rtt/ResponderLocation.html#DATUM_UNDEFINED)
        pub const DATUM_UNDEFINED : i32 = 0;

        /// public static final [DATUM_WGS84](https://developer.android.com/reference/android/net/wifi/rtt/ResponderLocation.html#DATUM_WGS84)
        pub const DATUM_WGS84 : i32 = 1;

        /// public static final [LCI_VERSION_1](https://developer.android.com/reference/android/net/wifi/rtt/ResponderLocation.html#LCI_VERSION_1)
        pub const LCI_VERSION_1 : i32 = 1;

        /// public static final [LOCATION_FIXED](https://developer.android.com/reference/android/net/wifi/rtt/ResponderLocation.html#LOCATION_FIXED)
        pub const LOCATION_FIXED : i32 = 0;

        /// public static final [LOCATION_MOVEMENT_UNKNOWN](https://developer.android.com/reference/android/net/wifi/rtt/ResponderLocation.html#LOCATION_MOVEMENT_UNKNOWN)
        pub const LOCATION_MOVEMENT_UNKNOWN : i32 = 2;

        /// public static final [LOCATION_RESERVED](https://developer.android.com/reference/android/net/wifi/rtt/ResponderLocation.html#LOCATION_RESERVED)
        pub const LOCATION_RESERVED : i32 = 3;

        /// public static final [LOCATION_VARIABLE](https://developer.android.com/reference/android/net/wifi/rtt/ResponderLocation.html#LOCATION_VARIABLE)
        pub const LOCATION_VARIABLE : i32 = 1;
    }
}
