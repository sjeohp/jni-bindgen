// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-net-IpSecTransform_Builder"))]
__jni_bindgen! {
    /// public class [IpSecTransform.Builder](https://developer.android.com/reference/android/net/IpSecTransform.Builder.html)
    ///
    /// Required feature: android-net-IpSecTransform_Builder
    public class IpSecTransform_Builder ("android/net/IpSecTransform$Builder") extends crate::java::lang::Object {

        /// [Builder](https://developer.android.com/reference/android/net/IpSecTransform.Builder.html#Builder(android.content.Context))
        ///
        /// Required features: "android-content-Context"
        #[cfg(any(feature = "all", all(feature = "android-content-Context")))]
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::net::IpSecTransform_Builder>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/IpSecTransform$Builder", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/content/Context;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/IpSecTransform$Builder\0", "<init>\0", "(Landroid/content/Context;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setEncryption](https://developer.android.com/reference/android/net/IpSecTransform.Builder.html#setEncryption(android.net.IpSecAlgorithm))
        ///
        /// Required features: "android-net-IpSecAlgorithm", "android-net-IpSecTransform_Builder"
        #[cfg(any(feature = "all", all(feature = "android-net-IpSecAlgorithm", feature = "android-net-IpSecTransform_Builder")))]
        pub fn setEncryption<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::IpSecAlgorithm>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::IpSecTransform_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/IpSecTransform$Builder", java.flags == PUBLIC, .name == "setEncryption", .descriptor == "(Landroid/net/IpSecAlgorithm;)Landroid/net/IpSecTransform$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/IpSecTransform$Builder\0", "setEncryption\0", "(Landroid/net/IpSecAlgorithm;)Landroid/net/IpSecTransform$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAuthentication](https://developer.android.com/reference/android/net/IpSecTransform.Builder.html#setAuthentication(android.net.IpSecAlgorithm))
        ///
        /// Required features: "android-net-IpSecAlgorithm", "android-net-IpSecTransform_Builder"
        #[cfg(any(feature = "all", all(feature = "android-net-IpSecAlgorithm", feature = "android-net-IpSecTransform_Builder")))]
        pub fn setAuthentication<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::IpSecAlgorithm>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::IpSecTransform_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/IpSecTransform$Builder", java.flags == PUBLIC, .name == "setAuthentication", .descriptor == "(Landroid/net/IpSecAlgorithm;)Landroid/net/IpSecTransform$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/IpSecTransform$Builder\0", "setAuthentication\0", "(Landroid/net/IpSecAlgorithm;)Landroid/net/IpSecTransform$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAuthenticatedEncryption](https://developer.android.com/reference/android/net/IpSecTransform.Builder.html#setAuthenticatedEncryption(android.net.IpSecAlgorithm))
        ///
        /// Required features: "android-net-IpSecAlgorithm", "android-net-IpSecTransform_Builder"
        #[cfg(any(feature = "all", all(feature = "android-net-IpSecAlgorithm", feature = "android-net-IpSecTransform_Builder")))]
        pub fn setAuthenticatedEncryption<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::IpSecAlgorithm>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::IpSecTransform_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/IpSecTransform$Builder", java.flags == PUBLIC, .name == "setAuthenticatedEncryption", .descriptor == "(Landroid/net/IpSecAlgorithm;)Landroid/net/IpSecTransform$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/IpSecTransform$Builder\0", "setAuthenticatedEncryption\0", "(Landroid/net/IpSecAlgorithm;)Landroid/net/IpSecTransform$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setIpv4Encapsulation](https://developer.android.com/reference/android/net/IpSecTransform.Builder.html#setIpv4Encapsulation(android.net.IpSecManager.UdpEncapsulationSocket,%20int))
        ///
        /// Required features: "android-net-IpSecManager_UdpEncapsulationSocket", "android-net-IpSecTransform_Builder"
        #[cfg(any(feature = "all", all(feature = "android-net-IpSecManager_UdpEncapsulationSocket", feature = "android-net-IpSecTransform_Builder")))]
        pub fn setIpv4Encapsulation<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::IpSecManager_UdpEncapsulationSocket>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::IpSecTransform_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/IpSecTransform$Builder", java.flags == PUBLIC, .name == "setIpv4Encapsulation", .descriptor == "(Landroid/net/IpSecManager$UdpEncapsulationSocket;I)Landroid/net/IpSecTransform$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/IpSecTransform$Builder\0", "setIpv4Encapsulation\0", "(Landroid/net/IpSecManager$UdpEncapsulationSocket;I)Landroid/net/IpSecTransform$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [buildTransportModeTransform](https://developer.android.com/reference/android/net/IpSecTransform.Builder.html#buildTransportModeTransform(java.net.InetAddress,%20android.net.IpSecManager.SecurityParameterIndex))
        ///
        /// Required features: "android-net-IpSecManager_SecurityParameterIndex", "android-net-IpSecTransform", "java-net-InetAddress"
        #[cfg(any(feature = "all", all(feature = "android-net-IpSecManager_SecurityParameterIndex", feature = "android-net-IpSecTransform", feature = "java-net-InetAddress")))]
        pub fn buildTransportModeTransform<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::InetAddress>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::IpSecManager_SecurityParameterIndex>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::IpSecTransform>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/IpSecTransform$Builder", java.flags == PUBLIC, .name == "buildTransportModeTransform", .descriptor == "(Ljava/net/InetAddress;Landroid/net/IpSecManager$SecurityParameterIndex;)Landroid/net/IpSecTransform;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/IpSecTransform$Builder\0", "buildTransportModeTransform\0", "(Ljava/net/InetAddress;Landroid/net/IpSecManager$SecurityParameterIndex;)Landroid/net/IpSecTransform;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
