// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-net-ConnectivityManager_NetworkCallback"))]
__jni_bindgen! {
    /// public class [ConnectivityManager.NetworkCallback](https://developer.android.com/reference/android/net/ConnectivityManager.NetworkCallback.html)
    ///
    /// Required feature: android-net-ConnectivityManager_NetworkCallback
    public class ConnectivityManager_NetworkCallback ("android/net/ConnectivityManager$NetworkCallback") extends crate::java::lang::Object {

        /// [NetworkCallback](https://developer.android.com/reference/android/net/ConnectivityManager.NetworkCallback.html#NetworkCallback())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::net::ConnectivityManager_NetworkCallback>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/ConnectivityManager$NetworkCallback", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/ConnectivityManager$NetworkCallback\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onAvailable](https://developer.android.com/reference/android/net/ConnectivityManager.NetworkCallback.html#onAvailable(android.net.Network))
        ///
        /// Required features: "android-net-Network"
        #[cfg(any(feature = "all", all(feature = "android-net-Network")))]
        pub fn onAvailable<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Network>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/ConnectivityManager$NetworkCallback", java.flags == PUBLIC, .name == "onAvailable", .descriptor == "(Landroid/net/Network;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/ConnectivityManager$NetworkCallback\0", "onAvailable\0", "(Landroid/net/Network;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onLosing](https://developer.android.com/reference/android/net/ConnectivityManager.NetworkCallback.html#onLosing(android.net.Network,%20int))
        ///
        /// Required features: "android-net-Network"
        #[cfg(any(feature = "all", all(feature = "android-net-Network")))]
        pub fn onLosing<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Network>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/ConnectivityManager$NetworkCallback", java.flags == PUBLIC, .name == "onLosing", .descriptor == "(Landroid/net/Network;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/ConnectivityManager$NetworkCallback\0", "onLosing\0", "(Landroid/net/Network;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onLost](https://developer.android.com/reference/android/net/ConnectivityManager.NetworkCallback.html#onLost(android.net.Network))
        ///
        /// Required features: "android-net-Network"
        #[cfg(any(feature = "all", all(feature = "android-net-Network")))]
        pub fn onLost<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Network>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/ConnectivityManager$NetworkCallback", java.flags == PUBLIC, .name == "onLost", .descriptor == "(Landroid/net/Network;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/ConnectivityManager$NetworkCallback\0", "onLost\0", "(Landroid/net/Network;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onUnavailable](https://developer.android.com/reference/android/net/ConnectivityManager.NetworkCallback.html#onUnavailable())
        pub fn onUnavailable<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/ConnectivityManager$NetworkCallback", java.flags == PUBLIC, .name == "onUnavailable", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/ConnectivityManager$NetworkCallback\0", "onUnavailable\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onCapabilitiesChanged](https://developer.android.com/reference/android/net/ConnectivityManager.NetworkCallback.html#onCapabilitiesChanged(android.net.Network,%20android.net.NetworkCapabilities))
        ///
        /// Required features: "android-net-Network", "android-net-NetworkCapabilities"
        #[cfg(any(feature = "all", all(feature = "android-net-Network", feature = "android-net-NetworkCapabilities")))]
        pub fn onCapabilitiesChanged<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Network>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::NetworkCapabilities>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/ConnectivityManager$NetworkCallback", java.flags == PUBLIC, .name == "onCapabilitiesChanged", .descriptor == "(Landroid/net/Network;Landroid/net/NetworkCapabilities;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/ConnectivityManager$NetworkCallback\0", "onCapabilitiesChanged\0", "(Landroid/net/Network;Landroid/net/NetworkCapabilities;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onLinkPropertiesChanged](https://developer.android.com/reference/android/net/ConnectivityManager.NetworkCallback.html#onLinkPropertiesChanged(android.net.Network,%20android.net.LinkProperties))
        ///
        /// Required features: "android-net-LinkProperties", "android-net-Network"
        #[cfg(any(feature = "all", all(feature = "android-net-LinkProperties", feature = "android-net-Network")))]
        pub fn onLinkPropertiesChanged<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Network>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::LinkProperties>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/ConnectivityManager$NetworkCallback", java.flags == PUBLIC, .name == "onLinkPropertiesChanged", .descriptor == "(Landroid/net/Network;Landroid/net/LinkProperties;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/ConnectivityManager$NetworkCallback\0", "onLinkPropertiesChanged\0", "(Landroid/net/Network;Landroid/net/LinkProperties;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onBlockedStatusChanged](https://developer.android.com/reference/android/net/ConnectivityManager.NetworkCallback.html#onBlockedStatusChanged(android.net.Network,%20boolean))
        ///
        /// Required features: "android-net-Network"
        #[cfg(any(feature = "all", all(feature = "android-net-Network")))]
        pub fn onBlockedStatusChanged<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Network>>, arg1: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/ConnectivityManager$NetworkCallback", java.flags == PUBLIC, .name == "onBlockedStatusChanged", .descriptor == "(Landroid/net/Network;Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/ConnectivityManager$NetworkCallback\0", "onBlockedStatusChanged\0", "(Landroid/net/Network;Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
