// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-net-IpSecManager"))]
__jni_bindgen! {
    /// public final class [IpSecManager](https://developer.android.com/reference/android/net/IpSecManager.html)
    ///
    /// Required feature: android-net-IpSecManager
    public final class IpSecManager ("android/net/IpSecManager") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [IpSecManager](https://developer.android.com/reference/android/net/IpSecManager.html#IpSecManager())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::net::IpSecManager>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/net/IpSecManager", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/IpSecManager\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [allocateSecurityParameterIndex](https://developer.android.com/reference/android/net/IpSecManager.html#allocateSecurityParameterIndex(java.net.InetAddress))
        ///
        /// Required features: "android-net-IpSecManager_SecurityParameterIndex", "java-net-InetAddress"
        #[cfg(any(feature = "all", all(feature = "android-net-IpSecManager_SecurityParameterIndex", feature = "java-net-InetAddress")))]
        pub fn allocateSecurityParameterIndex_InetAddress<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::InetAddress>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::IpSecManager_SecurityParameterIndex>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/IpSecManager", java.flags == PUBLIC, .name == "allocateSecurityParameterIndex", .descriptor == "(Ljava/net/InetAddress;)Landroid/net/IpSecManager$SecurityParameterIndex;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/IpSecManager\0", "allocateSecurityParameterIndex\0", "(Ljava/net/InetAddress;)Landroid/net/IpSecManager$SecurityParameterIndex;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [allocateSecurityParameterIndex](https://developer.android.com/reference/android/net/IpSecManager.html#allocateSecurityParameterIndex(java.net.InetAddress,%20int))
        ///
        /// Required features: "android-net-IpSecManager_SecurityParameterIndex", "java-net-InetAddress"
        #[cfg(any(feature = "all", all(feature = "android-net-IpSecManager_SecurityParameterIndex", feature = "java-net-InetAddress")))]
        pub fn allocateSecurityParameterIndex_InetAddress_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::InetAddress>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::IpSecManager_SecurityParameterIndex>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/IpSecManager", java.flags == PUBLIC, .name == "allocateSecurityParameterIndex", .descriptor == "(Ljava/net/InetAddress;I)Landroid/net/IpSecManager$SecurityParameterIndex;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/IpSecManager\0", "allocateSecurityParameterIndex\0", "(Ljava/net/InetAddress;I)Landroid/net/IpSecManager$SecurityParameterIndex;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [applyTransportModeTransform](https://developer.android.com/reference/android/net/IpSecManager.html#applyTransportModeTransform(java.net.Socket,%20int,%20android.net.IpSecTransform))
        ///
        /// Required features: "android-net-IpSecTransform", "java-net-Socket"
        #[cfg(any(feature = "all", all(feature = "android-net-IpSecTransform", feature = "java-net-Socket")))]
        pub fn applyTransportModeTransform_Socket_int_IpSecTransform<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::Socket>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::IpSecTransform>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/IpSecManager", java.flags == PUBLIC, .name == "applyTransportModeTransform", .descriptor == "(Ljava/net/Socket;ILandroid/net/IpSecTransform;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/IpSecManager\0", "applyTransportModeTransform\0", "(Ljava/net/Socket;ILandroid/net/IpSecTransform;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [applyTransportModeTransform](https://developer.android.com/reference/android/net/IpSecManager.html#applyTransportModeTransform(java.net.DatagramSocket,%20int,%20android.net.IpSecTransform))
        ///
        /// Required features: "android-net-IpSecTransform", "java-net-DatagramSocket"
        #[cfg(any(feature = "all", all(feature = "android-net-IpSecTransform", feature = "java-net-DatagramSocket")))]
        pub fn applyTransportModeTransform_DatagramSocket_int_IpSecTransform<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::DatagramSocket>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::IpSecTransform>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/IpSecManager", java.flags == PUBLIC, .name == "applyTransportModeTransform", .descriptor == "(Ljava/net/DatagramSocket;ILandroid/net/IpSecTransform;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/IpSecManager\0", "applyTransportModeTransform\0", "(Ljava/net/DatagramSocket;ILandroid/net/IpSecTransform;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [applyTransportModeTransform](https://developer.android.com/reference/android/net/IpSecManager.html#applyTransportModeTransform(java.io.FileDescriptor,%20int,%20android.net.IpSecTransform))
        ///
        /// Required features: "android-net-IpSecTransform", "java-io-FileDescriptor"
        #[cfg(any(feature = "all", all(feature = "android-net-IpSecTransform", feature = "java-io-FileDescriptor")))]
        pub fn applyTransportModeTransform_FileDescriptor_int_IpSecTransform<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::FileDescriptor>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::IpSecTransform>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/IpSecManager", java.flags == PUBLIC, .name == "applyTransportModeTransform", .descriptor == "(Ljava/io/FileDescriptor;ILandroid/net/IpSecTransform;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/IpSecManager\0", "applyTransportModeTransform\0", "(Ljava/io/FileDescriptor;ILandroid/net/IpSecTransform;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeTransportModeTransforms](https://developer.android.com/reference/android/net/IpSecManager.html#removeTransportModeTransforms(java.net.Socket))
        ///
        /// Required features: "java-net-Socket"
        #[cfg(any(feature = "all", all(feature = "java-net-Socket")))]
        pub fn removeTransportModeTransforms_Socket<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::Socket>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/IpSecManager", java.flags == PUBLIC, .name == "removeTransportModeTransforms", .descriptor == "(Ljava/net/Socket;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/IpSecManager\0", "removeTransportModeTransforms\0", "(Ljava/net/Socket;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeTransportModeTransforms](https://developer.android.com/reference/android/net/IpSecManager.html#removeTransportModeTransforms(java.net.DatagramSocket))
        ///
        /// Required features: "java-net-DatagramSocket"
        #[cfg(any(feature = "all", all(feature = "java-net-DatagramSocket")))]
        pub fn removeTransportModeTransforms_DatagramSocket<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::DatagramSocket>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/IpSecManager", java.flags == PUBLIC, .name == "removeTransportModeTransforms", .descriptor == "(Ljava/net/DatagramSocket;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/IpSecManager\0", "removeTransportModeTransforms\0", "(Ljava/net/DatagramSocket;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeTransportModeTransforms](https://developer.android.com/reference/android/net/IpSecManager.html#removeTransportModeTransforms(java.io.FileDescriptor))
        ///
        /// Required features: "java-io-FileDescriptor"
        #[cfg(any(feature = "all", all(feature = "java-io-FileDescriptor")))]
        pub fn removeTransportModeTransforms_FileDescriptor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::FileDescriptor>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/IpSecManager", java.flags == PUBLIC, .name == "removeTransportModeTransforms", .descriptor == "(Ljava/io/FileDescriptor;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/IpSecManager\0", "removeTransportModeTransforms\0", "(Ljava/io/FileDescriptor;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [openUdpEncapsulationSocket](https://developer.android.com/reference/android/net/IpSecManager.html#openUdpEncapsulationSocket(int))
        ///
        /// Required features: "android-net-IpSecManager_UdpEncapsulationSocket"
        #[cfg(any(feature = "all", all(feature = "android-net-IpSecManager_UdpEncapsulationSocket")))]
        pub fn openUdpEncapsulationSocket_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::IpSecManager_UdpEncapsulationSocket>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/IpSecManager", java.flags == PUBLIC, .name == "openUdpEncapsulationSocket", .descriptor == "(I)Landroid/net/IpSecManager$UdpEncapsulationSocket;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/IpSecManager\0", "openUdpEncapsulationSocket\0", "(I)Landroid/net/IpSecManager$UdpEncapsulationSocket;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [openUdpEncapsulationSocket](https://developer.android.com/reference/android/net/IpSecManager.html#openUdpEncapsulationSocket())
        ///
        /// Required features: "android-net-IpSecManager_UdpEncapsulationSocket"
        #[cfg(any(feature = "all", all(feature = "android-net-IpSecManager_UdpEncapsulationSocket")))]
        pub fn openUdpEncapsulationSocket<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::IpSecManager_UdpEncapsulationSocket>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/IpSecManager", java.flags == PUBLIC, .name == "openUdpEncapsulationSocket", .descriptor == "()Landroid/net/IpSecManager$UdpEncapsulationSocket;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/IpSecManager\0", "openUdpEncapsulationSocket\0", "()Landroid/net/IpSecManager$UdpEncapsulationSocket;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [DIRECTION_IN](https://developer.android.com/reference/android/net/IpSecManager.html#DIRECTION_IN)
        pub const DIRECTION_IN : i32 = 0;

        /// public static final [DIRECTION_OUT](https://developer.android.com/reference/android/net/IpSecManager.html#DIRECTION_OUT)
        pub const DIRECTION_OUT : i32 = 1;
    }
}
