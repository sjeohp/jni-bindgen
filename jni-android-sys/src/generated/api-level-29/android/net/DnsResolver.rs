// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-net-DnsResolver"))]
__jni_bindgen! {
    /// public final class [DnsResolver](https://developer.android.com/reference/android/net/DnsResolver.html)
    ///
    /// Required feature: android-net-DnsResolver
    public final class DnsResolver ("android/net/DnsResolver") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [DnsResolver](https://developer.android.com/reference/android/net/DnsResolver.html#DnsResolver())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::net::DnsResolver>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/net/DnsResolver", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/DnsResolver\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getInstance](https://developer.android.com/reference/android/net/DnsResolver.html#getInstance())
        ///
        /// Required features: "android-net-DnsResolver"
        #[cfg(any(feature = "all", all(feature = "android-net-DnsResolver")))]
        pub fn getInstance<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::DnsResolver>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/DnsResolver", java.flags == PUBLIC | STATIC, .name == "getInstance", .descriptor == "()Landroid/net/DnsResolver;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/net/DnsResolver\0", "getInstance\0", "()Landroid/net/DnsResolver;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [rawQuery](https://developer.android.com/reference/android/net/DnsResolver.html#rawQuery(android.net.Network,%20byte%5B%5D,%20int,%20java.util.concurrent.Executor,%20android.os.CancellationSignal,%20android.net.DnsResolver.Callback))
        ///
        /// Required features: "android-net-DnsResolver_Callback", "android-net-Network", "android-os-CancellationSignal", "java-util-concurrent-Executor"
        #[cfg(any(feature = "all", all(feature = "android-net-DnsResolver_Callback", feature = "android-net-Network", feature = "android-os-CancellationSignal", feature = "java-util-concurrent-Executor")))]
        pub fn rawQuery_Network_byte_array_int_Executor_CancellationSignal_Callback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Network>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::CancellationSignal>>, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::DnsResolver_Callback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/DnsResolver", java.flags == PUBLIC, .name == "rawQuery", .descriptor == "(Landroid/net/Network;[BILjava/util/concurrent/Executor;Landroid/os/CancellationSignal;Landroid/net/DnsResolver$Callback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/DnsResolver\0", "rawQuery\0", "(Landroid/net/Network;[BILjava/util/concurrent/Executor;Landroid/os/CancellationSignal;Landroid/net/DnsResolver$Callback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [rawQuery](https://developer.android.com/reference/android/net/DnsResolver.html#rawQuery(android.net.Network,%20java.lang.String,%20int,%20int,%20int,%20java.util.concurrent.Executor,%20android.os.CancellationSignal,%20android.net.DnsResolver.Callback))
        ///
        /// Required features: "android-net-DnsResolver_Callback", "android-net-Network", "android-os-CancellationSignal", "java-lang-String", "java-util-concurrent-Executor"
        #[cfg(any(feature = "all", all(feature = "android-net-DnsResolver_Callback", feature = "android-net-Network", feature = "android-os-CancellationSignal", feature = "java-lang-String", feature = "java-util-concurrent-Executor")))]
        pub fn rawQuery_Network_String_int_int_int_Executor_CancellationSignal_Callback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Network>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: i32, arg3: i32, arg4: i32, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::CancellationSignal>>, arg7: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::DnsResolver_Callback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/DnsResolver", java.flags == PUBLIC, .name == "rawQuery", .descriptor == "(Landroid/net/Network;Ljava/lang/String;IIILjava/util/concurrent/Executor;Landroid/os/CancellationSignal;Landroid/net/DnsResolver$Callback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5.into()), __jni_bindgen::AsJValue::as_jvalue(&arg6.into()), __jni_bindgen::AsJValue::as_jvalue(&arg7.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/DnsResolver\0", "rawQuery\0", "(Landroid/net/Network;Ljava/lang/String;IIILjava/util/concurrent/Executor;Landroid/os/CancellationSignal;Landroid/net/DnsResolver$Callback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [query](https://developer.android.com/reference/android/net/DnsResolver.html#query(android.net.Network,%20java.lang.String,%20int,%20java.util.concurrent.Executor,%20android.os.CancellationSignal,%20android.net.DnsResolver.Callback))
        ///
        /// Required features: "android-net-DnsResolver_Callback", "android-net-Network", "android-os-CancellationSignal", "java-lang-String", "java-util-concurrent-Executor"
        #[cfg(any(feature = "all", all(feature = "android-net-DnsResolver_Callback", feature = "android-net-Network", feature = "android-os-CancellationSignal", feature = "java-lang-String", feature = "java-util-concurrent-Executor")))]
        pub fn query_Network_String_int_Executor_CancellationSignal_Callback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Network>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::CancellationSignal>>, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::DnsResolver_Callback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/DnsResolver", java.flags == PUBLIC, .name == "query", .descriptor == "(Landroid/net/Network;Ljava/lang/String;ILjava/util/concurrent/Executor;Landroid/os/CancellationSignal;Landroid/net/DnsResolver$Callback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/DnsResolver\0", "query\0", "(Landroid/net/Network;Ljava/lang/String;ILjava/util/concurrent/Executor;Landroid/os/CancellationSignal;Landroid/net/DnsResolver$Callback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [query](https://developer.android.com/reference/android/net/DnsResolver.html#query(android.net.Network,%20java.lang.String,%20int,%20int,%20java.util.concurrent.Executor,%20android.os.CancellationSignal,%20android.net.DnsResolver.Callback))
        ///
        /// Required features: "android-net-DnsResolver_Callback", "android-net-Network", "android-os-CancellationSignal", "java-lang-String", "java-util-concurrent-Executor"
        #[cfg(any(feature = "all", all(feature = "android-net-DnsResolver_Callback", feature = "android-net-Network", feature = "android-os-CancellationSignal", feature = "java-lang-String", feature = "java-util-concurrent-Executor")))]
        pub fn query_Network_String_int_int_Executor_CancellationSignal_Callback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Network>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: i32, arg3: i32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::CancellationSignal>>, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::DnsResolver_Callback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/DnsResolver", java.flags == PUBLIC, .name == "query", .descriptor == "(Landroid/net/Network;Ljava/lang/String;IILjava/util/concurrent/Executor;Landroid/os/CancellationSignal;Landroid/net/DnsResolver$Callback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5.into()), __jni_bindgen::AsJValue::as_jvalue(&arg6.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/DnsResolver\0", "query\0", "(Landroid/net/Network;Ljava/lang/String;IILjava/util/concurrent/Executor;Landroid/os/CancellationSignal;Landroid/net/DnsResolver$Callback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [CLASS_IN](https://developer.android.com/reference/android/net/DnsResolver.html#CLASS_IN)
        pub const CLASS_IN : i32 = 1;

        /// public static final [ERROR_PARSE](https://developer.android.com/reference/android/net/DnsResolver.html#ERROR_PARSE)
        pub const ERROR_PARSE : i32 = 0;

        /// public static final [ERROR_SYSTEM](https://developer.android.com/reference/android/net/DnsResolver.html#ERROR_SYSTEM)
        pub const ERROR_SYSTEM : i32 = 1;

        /// public static final [FLAG_EMPTY](https://developer.android.com/reference/android/net/DnsResolver.html#FLAG_EMPTY)
        pub const FLAG_EMPTY : i32 = 0;

        /// public static final [FLAG_NO_CACHE_LOOKUP](https://developer.android.com/reference/android/net/DnsResolver.html#FLAG_NO_CACHE_LOOKUP)
        pub const FLAG_NO_CACHE_LOOKUP : i32 = 4;

        /// public static final [FLAG_NO_CACHE_STORE](https://developer.android.com/reference/android/net/DnsResolver.html#FLAG_NO_CACHE_STORE)
        pub const FLAG_NO_CACHE_STORE : i32 = 2;

        /// public static final [FLAG_NO_RETRY](https://developer.android.com/reference/android/net/DnsResolver.html#FLAG_NO_RETRY)
        pub const FLAG_NO_RETRY : i32 = 1;

        /// public static final [TYPE_A](https://developer.android.com/reference/android/net/DnsResolver.html#TYPE_A)
        pub const TYPE_A : i32 = 1;

        /// public static final [TYPE_AAAA](https://developer.android.com/reference/android/net/DnsResolver.html#TYPE_AAAA)
        pub const TYPE_AAAA : i32 = 28;
    }
}
