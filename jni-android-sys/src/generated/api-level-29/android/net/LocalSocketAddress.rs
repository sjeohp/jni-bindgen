// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-net-LocalSocketAddress"))]
__jni_bindgen! {
    /// public class [LocalSocketAddress](https://developer.android.com/reference/android/net/LocalSocketAddress.html)
    ///
    /// Required feature: android-net-LocalSocketAddress
    public class LocalSocketAddress ("android/net/LocalSocketAddress") extends crate::java::lang::Object {

        /// [LocalSocketAddress](https://developer.android.com/reference/android/net/LocalSocketAddress.html#LocalSocketAddress(java.lang.String,%20android.net.LocalSocketAddress.Namespace))
        ///
        /// Required features: "android-net-LocalSocketAddress_Namespace", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-LocalSocketAddress_Namespace", feature = "java-lang-String")))]
        pub fn new_String_Namespace<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::LocalSocketAddress_Namespace>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::net::LocalSocketAddress>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/LocalSocketAddress", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/lang/String;Landroid/net/LocalSocketAddress$Namespace;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/LocalSocketAddress\0", "<init>\0", "(Ljava/lang/String;Landroid/net/LocalSocketAddress$Namespace;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [LocalSocketAddress](https://developer.android.com/reference/android/net/LocalSocketAddress.html#LocalSocketAddress(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn new_String<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::net::LocalSocketAddress>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/LocalSocketAddress", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/LocalSocketAddress\0", "<init>\0", "(Ljava/lang/String;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getName](https://developer.android.com/reference/android/net/LocalSocketAddress.html#getName())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getName<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/LocalSocketAddress", java.flags == PUBLIC, .name == "getName", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/LocalSocketAddress\0", "getName\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNamespace](https://developer.android.com/reference/android/net/LocalSocketAddress.html#getNamespace())
        ///
        /// Required features: "android-net-LocalSocketAddress_Namespace"
        #[cfg(any(feature = "all", all(feature = "android-net-LocalSocketAddress_Namespace")))]
        pub fn getNamespace<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::LocalSocketAddress_Namespace>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/LocalSocketAddress", java.flags == PUBLIC, .name == "getNamespace", .descriptor == "()Landroid/net/LocalSocketAddress$Namespace;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/LocalSocketAddress\0", "getNamespace\0", "()Landroid/net/LocalSocketAddress$Namespace;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
