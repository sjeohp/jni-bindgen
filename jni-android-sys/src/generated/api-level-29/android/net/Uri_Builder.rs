// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-net-Uri_Builder"))]
__jni_bindgen! {
    /// public final class [Uri.Builder](https://developer.android.com/reference/android/net/Uri.Builder.html)
    ///
    /// Required feature: android-net-Uri_Builder
    public final class Uri_Builder ("android/net/Uri$Builder") extends crate::java::lang::Object {

        /// [Builder](https://developer.android.com/reference/android/net/Uri.Builder.html#Builder())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::net::Uri_Builder>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/Uri$Builder", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/Uri$Builder\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [scheme](https://developer.android.com/reference/android/net/Uri.Builder.html#scheme(java.lang.String))
        ///
        /// Required features: "android-net-Uri_Builder", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri_Builder", feature = "java-lang-String")))]
        pub fn scheme<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/Uri$Builder", java.flags == PUBLIC, .name == "scheme", .descriptor == "(Ljava/lang/String;)Landroid/net/Uri$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/Uri$Builder\0", "scheme\0", "(Ljava/lang/String;)Landroid/net/Uri$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [opaquePart](https://developer.android.com/reference/android/net/Uri.Builder.html#opaquePart(java.lang.String))
        ///
        /// Required features: "android-net-Uri_Builder", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri_Builder", feature = "java-lang-String")))]
        pub fn opaquePart<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/Uri$Builder", java.flags == PUBLIC, .name == "opaquePart", .descriptor == "(Ljava/lang/String;)Landroid/net/Uri$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/Uri$Builder\0", "opaquePart\0", "(Ljava/lang/String;)Landroid/net/Uri$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [encodedOpaquePart](https://developer.android.com/reference/android/net/Uri.Builder.html#encodedOpaquePart(java.lang.String))
        ///
        /// Required features: "android-net-Uri_Builder", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri_Builder", feature = "java-lang-String")))]
        pub fn encodedOpaquePart<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/Uri$Builder", java.flags == PUBLIC, .name == "encodedOpaquePart", .descriptor == "(Ljava/lang/String;)Landroid/net/Uri$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/Uri$Builder\0", "encodedOpaquePart\0", "(Ljava/lang/String;)Landroid/net/Uri$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [authority](https://developer.android.com/reference/android/net/Uri.Builder.html#authority(java.lang.String))
        ///
        /// Required features: "android-net-Uri_Builder", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri_Builder", feature = "java-lang-String")))]
        pub fn authority<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/Uri$Builder", java.flags == PUBLIC, .name == "authority", .descriptor == "(Ljava/lang/String;)Landroid/net/Uri$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/Uri$Builder\0", "authority\0", "(Ljava/lang/String;)Landroid/net/Uri$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [encodedAuthority](https://developer.android.com/reference/android/net/Uri.Builder.html#encodedAuthority(java.lang.String))
        ///
        /// Required features: "android-net-Uri_Builder", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri_Builder", feature = "java-lang-String")))]
        pub fn encodedAuthority<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/Uri$Builder", java.flags == PUBLIC, .name == "encodedAuthority", .descriptor == "(Ljava/lang/String;)Landroid/net/Uri$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/Uri$Builder\0", "encodedAuthority\0", "(Ljava/lang/String;)Landroid/net/Uri$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [path](https://developer.android.com/reference/android/net/Uri.Builder.html#path(java.lang.String))
        ///
        /// Required features: "android-net-Uri_Builder", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri_Builder", feature = "java-lang-String")))]
        pub fn path<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/Uri$Builder", java.flags == PUBLIC, .name == "path", .descriptor == "(Ljava/lang/String;)Landroid/net/Uri$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/Uri$Builder\0", "path\0", "(Ljava/lang/String;)Landroid/net/Uri$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [encodedPath](https://developer.android.com/reference/android/net/Uri.Builder.html#encodedPath(java.lang.String))
        ///
        /// Required features: "android-net-Uri_Builder", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri_Builder", feature = "java-lang-String")))]
        pub fn encodedPath<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/Uri$Builder", java.flags == PUBLIC, .name == "encodedPath", .descriptor == "(Ljava/lang/String;)Landroid/net/Uri$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/Uri$Builder\0", "encodedPath\0", "(Ljava/lang/String;)Landroid/net/Uri$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [appendPath](https://developer.android.com/reference/android/net/Uri.Builder.html#appendPath(java.lang.String))
        ///
        /// Required features: "android-net-Uri_Builder", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri_Builder", feature = "java-lang-String")))]
        pub fn appendPath<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/Uri$Builder", java.flags == PUBLIC, .name == "appendPath", .descriptor == "(Ljava/lang/String;)Landroid/net/Uri$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/Uri$Builder\0", "appendPath\0", "(Ljava/lang/String;)Landroid/net/Uri$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [appendEncodedPath](https://developer.android.com/reference/android/net/Uri.Builder.html#appendEncodedPath(java.lang.String))
        ///
        /// Required features: "android-net-Uri_Builder", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri_Builder", feature = "java-lang-String")))]
        pub fn appendEncodedPath<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/Uri$Builder", java.flags == PUBLIC, .name == "appendEncodedPath", .descriptor == "(Ljava/lang/String;)Landroid/net/Uri$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/Uri$Builder\0", "appendEncodedPath\0", "(Ljava/lang/String;)Landroid/net/Uri$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [query](https://developer.android.com/reference/android/net/Uri.Builder.html#query(java.lang.String))
        ///
        /// Required features: "android-net-Uri_Builder", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri_Builder", feature = "java-lang-String")))]
        pub fn query<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/Uri$Builder", java.flags == PUBLIC, .name == "query", .descriptor == "(Ljava/lang/String;)Landroid/net/Uri$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/Uri$Builder\0", "query\0", "(Ljava/lang/String;)Landroid/net/Uri$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [encodedQuery](https://developer.android.com/reference/android/net/Uri.Builder.html#encodedQuery(java.lang.String))
        ///
        /// Required features: "android-net-Uri_Builder", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri_Builder", feature = "java-lang-String")))]
        pub fn encodedQuery<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/Uri$Builder", java.flags == PUBLIC, .name == "encodedQuery", .descriptor == "(Ljava/lang/String;)Landroid/net/Uri$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/Uri$Builder\0", "encodedQuery\0", "(Ljava/lang/String;)Landroid/net/Uri$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [fragment](https://developer.android.com/reference/android/net/Uri.Builder.html#fragment(java.lang.String))
        ///
        /// Required features: "android-net-Uri_Builder", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri_Builder", feature = "java-lang-String")))]
        pub fn fragment<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/Uri$Builder", java.flags == PUBLIC, .name == "fragment", .descriptor == "(Ljava/lang/String;)Landroid/net/Uri$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/Uri$Builder\0", "fragment\0", "(Ljava/lang/String;)Landroid/net/Uri$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [encodedFragment](https://developer.android.com/reference/android/net/Uri.Builder.html#encodedFragment(java.lang.String))
        ///
        /// Required features: "android-net-Uri_Builder", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri_Builder", feature = "java-lang-String")))]
        pub fn encodedFragment<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/Uri$Builder", java.flags == PUBLIC, .name == "encodedFragment", .descriptor == "(Ljava/lang/String;)Landroid/net/Uri$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/Uri$Builder\0", "encodedFragment\0", "(Ljava/lang/String;)Landroid/net/Uri$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [appendQueryParameter](https://developer.android.com/reference/android/net/Uri.Builder.html#appendQueryParameter(java.lang.String,%20java.lang.String))
        ///
        /// Required features: "android-net-Uri_Builder", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri_Builder", feature = "java-lang-String")))]
        pub fn appendQueryParameter<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/Uri$Builder", java.flags == PUBLIC, .name == "appendQueryParameter", .descriptor == "(Ljava/lang/String;Ljava/lang/String;)Landroid/net/Uri$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/Uri$Builder\0", "appendQueryParameter\0", "(Ljava/lang/String;Ljava/lang/String;)Landroid/net/Uri$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clearQuery](https://developer.android.com/reference/android/net/Uri.Builder.html#clearQuery())
        ///
        /// Required features: "android-net-Uri_Builder"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri_Builder")))]
        pub fn clearQuery<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/Uri$Builder", java.flags == PUBLIC, .name == "clearQuery", .descriptor == "()Landroid/net/Uri$Builder;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/Uri$Builder\0", "clearQuery\0", "()Landroid/net/Uri$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [build](https://developer.android.com/reference/android/net/Uri.Builder.html#build())
        ///
        /// Required features: "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri")))]
        pub fn build<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/Uri$Builder", java.flags == PUBLIC, .name == "build", .descriptor == "()Landroid/net/Uri;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/Uri$Builder\0", "build\0", "()Landroid/net/Uri;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/android/net/Uri.Builder.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/Uri$Builder", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/Uri$Builder\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
