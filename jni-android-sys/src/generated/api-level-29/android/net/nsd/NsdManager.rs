// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-net-nsd-NsdManager"))]
__jni_bindgen! {
    /// public final class [NsdManager](https://developer.android.com/reference/android/net/nsd/NsdManager.html)
    ///
    /// Required feature: android-net-nsd-NsdManager
    public final class NsdManager ("android/net/nsd/NsdManager") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [NsdManager](https://developer.android.com/reference/android/net/nsd/NsdManager.html#NsdManager())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::net::nsd::NsdManager>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/net/nsd/NsdManager", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/nsd/NsdManager\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [registerService](https://developer.android.com/reference/android/net/nsd/NsdManager.html#registerService(android.net.nsd.NsdServiceInfo,%20int,%20android.net.nsd.NsdManager.RegistrationListener))
        ///
        /// Required features: "android-net-nsd-NsdManager_RegistrationListener", "android-net-nsd-NsdServiceInfo"
        #[cfg(any(feature = "all", all(feature = "android-net-nsd-NsdManager_RegistrationListener", feature = "android-net-nsd-NsdServiceInfo")))]
        pub fn registerService<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::nsd::NsdServiceInfo>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::nsd::NsdManager_RegistrationListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/nsd/NsdManager", java.flags == PUBLIC, .name == "registerService", .descriptor == "(Landroid/net/nsd/NsdServiceInfo;ILandroid/net/nsd/NsdManager$RegistrationListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/nsd/NsdManager\0", "registerService\0", "(Landroid/net/nsd/NsdServiceInfo;ILandroid/net/nsd/NsdManager$RegistrationListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unregisterService](https://developer.android.com/reference/android/net/nsd/NsdManager.html#unregisterService(android.net.nsd.NsdManager.RegistrationListener))
        ///
        /// Required features: "android-net-nsd-NsdManager_RegistrationListener"
        #[cfg(any(feature = "all", all(feature = "android-net-nsd-NsdManager_RegistrationListener")))]
        pub fn unregisterService<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::nsd::NsdManager_RegistrationListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/nsd/NsdManager", java.flags == PUBLIC, .name == "unregisterService", .descriptor == "(Landroid/net/nsd/NsdManager$RegistrationListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/nsd/NsdManager\0", "unregisterService\0", "(Landroid/net/nsd/NsdManager$RegistrationListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [discoverServices](https://developer.android.com/reference/android/net/nsd/NsdManager.html#discoverServices(java.lang.String,%20int,%20android.net.nsd.NsdManager.DiscoveryListener))
        ///
        /// Required features: "android-net-nsd-NsdManager_DiscoveryListener", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-nsd-NsdManager_DiscoveryListener", feature = "java-lang-String")))]
        pub fn discoverServices<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::nsd::NsdManager_DiscoveryListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/nsd/NsdManager", java.flags == PUBLIC, .name == "discoverServices", .descriptor == "(Ljava/lang/String;ILandroid/net/nsd/NsdManager$DiscoveryListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/nsd/NsdManager\0", "discoverServices\0", "(Ljava/lang/String;ILandroid/net/nsd/NsdManager$DiscoveryListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [stopServiceDiscovery](https://developer.android.com/reference/android/net/nsd/NsdManager.html#stopServiceDiscovery(android.net.nsd.NsdManager.DiscoveryListener))
        ///
        /// Required features: "android-net-nsd-NsdManager_DiscoveryListener"
        #[cfg(any(feature = "all", all(feature = "android-net-nsd-NsdManager_DiscoveryListener")))]
        pub fn stopServiceDiscovery<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::nsd::NsdManager_DiscoveryListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/nsd/NsdManager", java.flags == PUBLIC, .name == "stopServiceDiscovery", .descriptor == "(Landroid/net/nsd/NsdManager$DiscoveryListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/nsd/NsdManager\0", "stopServiceDiscovery\0", "(Landroid/net/nsd/NsdManager$DiscoveryListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [resolveService](https://developer.android.com/reference/android/net/nsd/NsdManager.html#resolveService(android.net.nsd.NsdServiceInfo,%20android.net.nsd.NsdManager.ResolveListener))
        ///
        /// Required features: "android-net-nsd-NsdManager_ResolveListener", "android-net-nsd-NsdServiceInfo"
        #[cfg(any(feature = "all", all(feature = "android-net-nsd-NsdManager_ResolveListener", feature = "android-net-nsd-NsdServiceInfo")))]
        pub fn resolveService<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::nsd::NsdServiceInfo>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::nsd::NsdManager_ResolveListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/nsd/NsdManager", java.flags == PUBLIC, .name == "resolveService", .descriptor == "(Landroid/net/nsd/NsdServiceInfo;Landroid/net/nsd/NsdManager$ResolveListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/nsd/NsdManager\0", "resolveService\0", "(Landroid/net/nsd/NsdServiceInfo;Landroid/net/nsd/NsdManager$ResolveListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [ACTION_NSD_STATE_CHANGED](https://developer.android.com/reference/android/net/nsd/NsdManager.html#ACTION_NSD_STATE_CHANGED)
        pub const ACTION_NSD_STATE_CHANGED : &'static str = "android.net.nsd.STATE_CHANGED";

        /// public static final [EXTRA_NSD_STATE](https://developer.android.com/reference/android/net/nsd/NsdManager.html#EXTRA_NSD_STATE)
        pub const EXTRA_NSD_STATE : &'static str = "nsd_state";

        /// public static final [FAILURE_ALREADY_ACTIVE](https://developer.android.com/reference/android/net/nsd/NsdManager.html#FAILURE_ALREADY_ACTIVE)
        pub const FAILURE_ALREADY_ACTIVE : i32 = 3;

        /// public static final [FAILURE_INTERNAL_ERROR](https://developer.android.com/reference/android/net/nsd/NsdManager.html#FAILURE_INTERNAL_ERROR)
        pub const FAILURE_INTERNAL_ERROR : i32 = 0;

        /// public static final [FAILURE_MAX_LIMIT](https://developer.android.com/reference/android/net/nsd/NsdManager.html#FAILURE_MAX_LIMIT)
        pub const FAILURE_MAX_LIMIT : i32 = 4;

        /// public static final [NSD_STATE_DISABLED](https://developer.android.com/reference/android/net/nsd/NsdManager.html#NSD_STATE_DISABLED)
        pub const NSD_STATE_DISABLED : i32 = 1;

        /// public static final [NSD_STATE_ENABLED](https://developer.android.com/reference/android/net/nsd/NsdManager.html#NSD_STATE_ENABLED)
        pub const NSD_STATE_ENABLED : i32 = 2;

        /// public static final [PROTOCOL_DNS_SD](https://developer.android.com/reference/android/net/nsd/NsdManager.html#PROTOCOL_DNS_SD)
        pub const PROTOCOL_DNS_SD : i32 = 1;
    }
}
