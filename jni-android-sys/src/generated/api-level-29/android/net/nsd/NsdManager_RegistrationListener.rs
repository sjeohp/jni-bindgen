// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-net-nsd-NsdManager_RegistrationListener"))]
__jni_bindgen! {
    /// public interface [NsdManager.RegistrationListener](https://developer.android.com/reference/android/net/nsd/NsdManager.RegistrationListener.html)
    ///
    /// Required feature: android-net-nsd-NsdManager_RegistrationListener
    public interface NsdManager_RegistrationListener ("android/net/nsd/NsdManager$RegistrationListener") extends crate::java::lang::Object {

        /// [onRegistrationFailed](https://developer.android.com/reference/android/net/nsd/NsdManager.RegistrationListener.html#onRegistrationFailed(android.net.nsd.NsdServiceInfo,%20int))
        ///
        /// Required features: "android-net-nsd-NsdServiceInfo"
        #[cfg(any(feature = "all", all(feature = "android-net-nsd-NsdServiceInfo")))]
        pub fn onRegistrationFailed<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::nsd::NsdServiceInfo>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/nsd/NsdManager$RegistrationListener", java.flags == PUBLIC | ABSTRACT, .name == "onRegistrationFailed", .descriptor == "(Landroid/net/nsd/NsdServiceInfo;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/nsd/NsdManager$RegistrationListener\0", "onRegistrationFailed\0", "(Landroid/net/nsd/NsdServiceInfo;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onUnregistrationFailed](https://developer.android.com/reference/android/net/nsd/NsdManager.RegistrationListener.html#onUnregistrationFailed(android.net.nsd.NsdServiceInfo,%20int))
        ///
        /// Required features: "android-net-nsd-NsdServiceInfo"
        #[cfg(any(feature = "all", all(feature = "android-net-nsd-NsdServiceInfo")))]
        pub fn onUnregistrationFailed<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::nsd::NsdServiceInfo>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/nsd/NsdManager$RegistrationListener", java.flags == PUBLIC | ABSTRACT, .name == "onUnregistrationFailed", .descriptor == "(Landroid/net/nsd/NsdServiceInfo;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/nsd/NsdManager$RegistrationListener\0", "onUnregistrationFailed\0", "(Landroid/net/nsd/NsdServiceInfo;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onServiceRegistered](https://developer.android.com/reference/android/net/nsd/NsdManager.RegistrationListener.html#onServiceRegistered(android.net.nsd.NsdServiceInfo))
        ///
        /// Required features: "android-net-nsd-NsdServiceInfo"
        #[cfg(any(feature = "all", all(feature = "android-net-nsd-NsdServiceInfo")))]
        pub fn onServiceRegistered<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::nsd::NsdServiceInfo>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/nsd/NsdManager$RegistrationListener", java.flags == PUBLIC | ABSTRACT, .name == "onServiceRegistered", .descriptor == "(Landroid/net/nsd/NsdServiceInfo;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/nsd/NsdManager$RegistrationListener\0", "onServiceRegistered\0", "(Landroid/net/nsd/NsdServiceInfo;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onServiceUnregistered](https://developer.android.com/reference/android/net/nsd/NsdManager.RegistrationListener.html#onServiceUnregistered(android.net.nsd.NsdServiceInfo))
        ///
        /// Required features: "android-net-nsd-NsdServiceInfo"
        #[cfg(any(feature = "all", all(feature = "android-net-nsd-NsdServiceInfo")))]
        pub fn onServiceUnregistered<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::nsd::NsdServiceInfo>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/nsd/NsdManager$RegistrationListener", java.flags == PUBLIC | ABSTRACT, .name == "onServiceUnregistered", .descriptor == "(Landroid/net/nsd/NsdServiceInfo;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/nsd/NsdManager$RegistrationListener\0", "onServiceUnregistered\0", "(Landroid/net/nsd/NsdServiceInfo;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
