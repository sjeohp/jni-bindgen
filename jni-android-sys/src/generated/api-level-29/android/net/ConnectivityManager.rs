// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-net-ConnectivityManager"))]
__jni_bindgen! {
    /// public class [ConnectivityManager](https://developer.android.com/reference/android/net/ConnectivityManager.html)
    ///
    /// Required feature: android-net-ConnectivityManager
    public class ConnectivityManager ("android/net/ConnectivityManager") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [ConnectivityManager](https://developer.android.com/reference/android/net/ConnectivityManager.html#ConnectivityManager())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::net::ConnectivityManager>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/net/ConnectivityManager", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/ConnectivityManager\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [isNetworkTypeValid](https://developer.android.com/reference/android/net/ConnectivityManager.html#isNetworkTypeValid(int))
        #[deprecated] pub fn isNetworkTypeValid<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/ConnectivityManager", java.flags == PUBLIC | STATIC, .name == "isNetworkTypeValid", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/net/ConnectivityManager\0", "isNetworkTypeValid\0", "(I)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setNetworkPreference](https://developer.android.com/reference/android/net/ConnectivityManager.html#setNetworkPreference(int))
        #[deprecated] pub fn setNetworkPreference<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/ConnectivityManager", java.flags == PUBLIC, .name == "setNetworkPreference", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/ConnectivityManager\0", "setNetworkPreference\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNetworkPreference](https://developer.android.com/reference/android/net/ConnectivityManager.html#getNetworkPreference())
        #[deprecated] pub fn getNetworkPreference<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/ConnectivityManager", java.flags == PUBLIC, .name == "getNetworkPreference", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/ConnectivityManager\0", "getNetworkPreference\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getActiveNetworkInfo](https://developer.android.com/reference/android/net/ConnectivityManager.html#getActiveNetworkInfo())
        ///
        /// Required features: "android-net-NetworkInfo"
        #[cfg(any(feature = "all", all(feature = "android-net-NetworkInfo")))]
        #[deprecated] pub fn getActiveNetworkInfo<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::NetworkInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/ConnectivityManager", java.flags == PUBLIC, .name == "getActiveNetworkInfo", .descriptor == "()Landroid/net/NetworkInfo;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/ConnectivityManager\0", "getActiveNetworkInfo\0", "()Landroid/net/NetworkInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getActiveNetwork](https://developer.android.com/reference/android/net/ConnectivityManager.html#getActiveNetwork())
        ///
        /// Required features: "android-net-Network"
        #[cfg(any(feature = "all", all(feature = "android-net-Network")))]
        pub fn getActiveNetwork<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Network>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/ConnectivityManager", java.flags == PUBLIC, .name == "getActiveNetwork", .descriptor == "()Landroid/net/Network;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/ConnectivityManager\0", "getActiveNetwork\0", "()Landroid/net/Network;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNetworkInfo](https://developer.android.com/reference/android/net/ConnectivityManager.html#getNetworkInfo(int))
        ///
        /// Required features: "android-net-NetworkInfo"
        #[cfg(any(feature = "all", all(feature = "android-net-NetworkInfo")))]
        #[deprecated] pub fn getNetworkInfo_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::NetworkInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/ConnectivityManager", java.flags == PUBLIC, .name == "getNetworkInfo", .descriptor == "(I)Landroid/net/NetworkInfo;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/ConnectivityManager\0", "getNetworkInfo\0", "(I)Landroid/net/NetworkInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNetworkInfo](https://developer.android.com/reference/android/net/ConnectivityManager.html#getNetworkInfo(android.net.Network))
        ///
        /// Required features: "android-net-Network", "android-net-NetworkInfo"
        #[cfg(any(feature = "all", all(feature = "android-net-Network", feature = "android-net-NetworkInfo")))]
        #[deprecated] pub fn getNetworkInfo_Network<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Network>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::NetworkInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/ConnectivityManager", java.flags == PUBLIC, .name == "getNetworkInfo", .descriptor == "(Landroid/net/Network;)Landroid/net/NetworkInfo;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/ConnectivityManager\0", "getNetworkInfo\0", "(Landroid/net/Network;)Landroid/net/NetworkInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAllNetworkInfo](https://developer.android.com/reference/android/net/ConnectivityManager.html#getAllNetworkInfo())
        ///
        /// Required features: "android-net-NetworkInfo"
        #[cfg(any(feature = "all", all(feature = "android-net-NetworkInfo")))]
        #[deprecated] pub fn getAllNetworkInfo<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::android::net::NetworkInfo, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/ConnectivityManager", java.flags == PUBLIC, .name == "getAllNetworkInfo", .descriptor == "()[Landroid/net/NetworkInfo;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/ConnectivityManager\0", "getAllNetworkInfo\0", "()[Landroid/net/NetworkInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAllNetworks](https://developer.android.com/reference/android/net/ConnectivityManager.html#getAllNetworks())
        ///
        /// Required features: "android-net-Network"
        #[cfg(any(feature = "all", all(feature = "android-net-Network")))]
        pub fn getAllNetworks<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::android::net::Network, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/ConnectivityManager", java.flags == PUBLIC, .name == "getAllNetworks", .descriptor == "()[Landroid/net/Network;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/ConnectivityManager\0", "getAllNetworks\0", "()[Landroid/net/Network;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLinkProperties](https://developer.android.com/reference/android/net/ConnectivityManager.html#getLinkProperties(android.net.Network))
        ///
        /// Required features: "android-net-LinkProperties", "android-net-Network"
        #[cfg(any(feature = "all", all(feature = "android-net-LinkProperties", feature = "android-net-Network")))]
        pub fn getLinkProperties<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Network>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::LinkProperties>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/ConnectivityManager", java.flags == PUBLIC, .name == "getLinkProperties", .descriptor == "(Landroid/net/Network;)Landroid/net/LinkProperties;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/ConnectivityManager\0", "getLinkProperties\0", "(Landroid/net/Network;)Landroid/net/LinkProperties;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNetworkCapabilities](https://developer.android.com/reference/android/net/ConnectivityManager.html#getNetworkCapabilities(android.net.Network))
        ///
        /// Required features: "android-net-Network", "android-net-NetworkCapabilities"
        #[cfg(any(feature = "all", all(feature = "android-net-Network", feature = "android-net-NetworkCapabilities")))]
        pub fn getNetworkCapabilities<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Network>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::NetworkCapabilities>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/ConnectivityManager", java.flags == PUBLIC, .name == "getNetworkCapabilities", .descriptor == "(Landroid/net/Network;)Landroid/net/NetworkCapabilities;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/ConnectivityManager\0", "getNetworkCapabilities\0", "(Landroid/net/Network;)Landroid/net/NetworkCapabilities;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createSocketKeepalive](https://developer.android.com/reference/android/net/ConnectivityManager.html#createSocketKeepalive(android.net.Network,%20android.net.IpSecManager.UdpEncapsulationSocket,%20java.net.InetAddress,%20java.net.InetAddress,%20java.util.concurrent.Executor,%20android.net.SocketKeepalive.Callback))
        ///
        /// Required features: "android-net-IpSecManager_UdpEncapsulationSocket", "android-net-Network", "android-net-SocketKeepalive", "android-net-SocketKeepalive_Callback", "java-net-InetAddress", "java-util-concurrent-Executor"
        #[cfg(any(feature = "all", all(feature = "android-net-IpSecManager_UdpEncapsulationSocket", feature = "android-net-Network", feature = "android-net-SocketKeepalive", feature = "android-net-SocketKeepalive_Callback", feature = "java-net-InetAddress", feature = "java-util-concurrent-Executor")))]
        pub fn createSocketKeepalive<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Network>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::IpSecManager_UdpEncapsulationSocket>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::InetAddress>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::InetAddress>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::SocketKeepalive_Callback>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::SocketKeepalive>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/ConnectivityManager", java.flags == PUBLIC, .name == "createSocketKeepalive", .descriptor == "(Landroid/net/Network;Landroid/net/IpSecManager$UdpEncapsulationSocket;Ljava/net/InetAddress;Ljava/net/InetAddress;Ljava/util/concurrent/Executor;Landroid/net/SocketKeepalive$Callback;)Landroid/net/SocketKeepalive;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/ConnectivityManager\0", "createSocketKeepalive\0", "(Landroid/net/Network;Landroid/net/IpSecManager$UdpEncapsulationSocket;Ljava/net/InetAddress;Ljava/net/InetAddress;Ljava/util/concurrent/Executor;Landroid/net/SocketKeepalive$Callback;)Landroid/net/SocketKeepalive;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getBackgroundDataSetting](https://developer.android.com/reference/android/net/ConnectivityManager.html#getBackgroundDataSetting())
        #[deprecated] pub fn getBackgroundDataSetting<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/ConnectivityManager", java.flags == PUBLIC, .name == "getBackgroundDataSetting", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/ConnectivityManager\0", "getBackgroundDataSetting\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addDefaultNetworkActiveListener](https://developer.android.com/reference/android/net/ConnectivityManager.html#addDefaultNetworkActiveListener(android.net.ConnectivityManager.OnNetworkActiveListener))
        ///
        /// Required features: "android-net-ConnectivityManager_OnNetworkActiveListener"
        #[cfg(any(feature = "all", all(feature = "android-net-ConnectivityManager_OnNetworkActiveListener")))]
        pub fn addDefaultNetworkActiveListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::ConnectivityManager_OnNetworkActiveListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/ConnectivityManager", java.flags == PUBLIC, .name == "addDefaultNetworkActiveListener", .descriptor == "(Landroid/net/ConnectivityManager$OnNetworkActiveListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/ConnectivityManager\0", "addDefaultNetworkActiveListener\0", "(Landroid/net/ConnectivityManager$OnNetworkActiveListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeDefaultNetworkActiveListener](https://developer.android.com/reference/android/net/ConnectivityManager.html#removeDefaultNetworkActiveListener(android.net.ConnectivityManager.OnNetworkActiveListener))
        ///
        /// Required features: "android-net-ConnectivityManager_OnNetworkActiveListener"
        #[cfg(any(feature = "all", all(feature = "android-net-ConnectivityManager_OnNetworkActiveListener")))]
        pub fn removeDefaultNetworkActiveListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::ConnectivityManager_OnNetworkActiveListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/ConnectivityManager", java.flags == PUBLIC, .name == "removeDefaultNetworkActiveListener", .descriptor == "(Landroid/net/ConnectivityManager$OnNetworkActiveListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/ConnectivityManager\0", "removeDefaultNetworkActiveListener\0", "(Landroid/net/ConnectivityManager$OnNetworkActiveListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isDefaultNetworkActive](https://developer.android.com/reference/android/net/ConnectivityManager.html#isDefaultNetworkActive())
        pub fn isDefaultNetworkActive<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/ConnectivityManager", java.flags == PUBLIC, .name == "isDefaultNetworkActive", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/ConnectivityManager\0", "isDefaultNetworkActive\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [reportBadNetwork](https://developer.android.com/reference/android/net/ConnectivityManager.html#reportBadNetwork(android.net.Network))
        ///
        /// Required features: "android-net-Network"
        #[cfg(any(feature = "all", all(feature = "android-net-Network")))]
        #[deprecated] pub fn reportBadNetwork<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Network>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/ConnectivityManager", java.flags == PUBLIC, .name == "reportBadNetwork", .descriptor == "(Landroid/net/Network;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/ConnectivityManager\0", "reportBadNetwork\0", "(Landroid/net/Network;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [reportNetworkConnectivity](https://developer.android.com/reference/android/net/ConnectivityManager.html#reportNetworkConnectivity(android.net.Network,%20boolean))
        ///
        /// Required features: "android-net-Network"
        #[cfg(any(feature = "all", all(feature = "android-net-Network")))]
        pub fn reportNetworkConnectivity<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Network>>, arg1: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/ConnectivityManager", java.flags == PUBLIC, .name == "reportNetworkConnectivity", .descriptor == "(Landroid/net/Network;Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/ConnectivityManager\0", "reportNetworkConnectivity\0", "(Landroid/net/Network;Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDefaultProxy](https://developer.android.com/reference/android/net/ConnectivityManager.html#getDefaultProxy())
        ///
        /// Required features: "android-net-ProxyInfo"
        #[cfg(any(feature = "all", all(feature = "android-net-ProxyInfo")))]
        pub fn getDefaultProxy<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::ProxyInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/ConnectivityManager", java.flags == PUBLIC, .name == "getDefaultProxy", .descriptor == "()Landroid/net/ProxyInfo;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/ConnectivityManager\0", "getDefaultProxy\0", "()Landroid/net/ProxyInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isActiveNetworkMetered](https://developer.android.com/reference/android/net/ConnectivityManager.html#isActiveNetworkMetered())
        pub fn isActiveNetworkMetered<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/ConnectivityManager", java.flags == PUBLIC, .name == "isActiveNetworkMetered", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/ConnectivityManager\0", "isActiveNetworkMetered\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [requestNetwork](https://developer.android.com/reference/android/net/ConnectivityManager.html#requestNetwork(android.net.NetworkRequest,%20android.net.ConnectivityManager.NetworkCallback))
        ///
        /// Required features: "android-net-ConnectivityManager_NetworkCallback", "android-net-NetworkRequest"
        #[cfg(any(feature = "all", all(feature = "android-net-ConnectivityManager_NetworkCallback", feature = "android-net-NetworkRequest")))]
        pub fn requestNetwork_NetworkRequest_NetworkCallback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::NetworkRequest>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::ConnectivityManager_NetworkCallback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/ConnectivityManager", java.flags == PUBLIC, .name == "requestNetwork", .descriptor == "(Landroid/net/NetworkRequest;Landroid/net/ConnectivityManager$NetworkCallback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/ConnectivityManager\0", "requestNetwork\0", "(Landroid/net/NetworkRequest;Landroid/net/ConnectivityManager$NetworkCallback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [requestNetwork](https://developer.android.com/reference/android/net/ConnectivityManager.html#requestNetwork(android.net.NetworkRequest,%20android.net.ConnectivityManager.NetworkCallback,%20android.os.Handler))
        ///
        /// Required features: "android-net-ConnectivityManager_NetworkCallback", "android-net-NetworkRequest", "android-os-Handler"
        #[cfg(any(feature = "all", all(feature = "android-net-ConnectivityManager_NetworkCallback", feature = "android-net-NetworkRequest", feature = "android-os-Handler")))]
        pub fn requestNetwork_NetworkRequest_NetworkCallback_Handler<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::NetworkRequest>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::ConnectivityManager_NetworkCallback>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/ConnectivityManager", java.flags == PUBLIC, .name == "requestNetwork", .descriptor == "(Landroid/net/NetworkRequest;Landroid/net/ConnectivityManager$NetworkCallback;Landroid/os/Handler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/ConnectivityManager\0", "requestNetwork\0", "(Landroid/net/NetworkRequest;Landroid/net/ConnectivityManager$NetworkCallback;Landroid/os/Handler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [requestNetwork](https://developer.android.com/reference/android/net/ConnectivityManager.html#requestNetwork(android.net.NetworkRequest,%20android.net.ConnectivityManager.NetworkCallback,%20int))
        ///
        /// Required features: "android-net-ConnectivityManager_NetworkCallback", "android-net-NetworkRequest"
        #[cfg(any(feature = "all", all(feature = "android-net-ConnectivityManager_NetworkCallback", feature = "android-net-NetworkRequest")))]
        pub fn requestNetwork_NetworkRequest_NetworkCallback_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::NetworkRequest>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::ConnectivityManager_NetworkCallback>>, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/ConnectivityManager", java.flags == PUBLIC, .name == "requestNetwork", .descriptor == "(Landroid/net/NetworkRequest;Landroid/net/ConnectivityManager$NetworkCallback;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/ConnectivityManager\0", "requestNetwork\0", "(Landroid/net/NetworkRequest;Landroid/net/ConnectivityManager$NetworkCallback;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [requestNetwork](https://developer.android.com/reference/android/net/ConnectivityManager.html#requestNetwork(android.net.NetworkRequest,%20android.net.ConnectivityManager.NetworkCallback,%20android.os.Handler,%20int))
        ///
        /// Required features: "android-net-ConnectivityManager_NetworkCallback", "android-net-NetworkRequest", "android-os-Handler"
        #[cfg(any(feature = "all", all(feature = "android-net-ConnectivityManager_NetworkCallback", feature = "android-net-NetworkRequest", feature = "android-os-Handler")))]
        pub fn requestNetwork_NetworkRequest_NetworkCallback_Handler_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::NetworkRequest>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::ConnectivityManager_NetworkCallback>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/ConnectivityManager", java.flags == PUBLIC, .name == "requestNetwork", .descriptor == "(Landroid/net/NetworkRequest;Landroid/net/ConnectivityManager$NetworkCallback;Landroid/os/Handler;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/ConnectivityManager\0", "requestNetwork\0", "(Landroid/net/NetworkRequest;Landroid/net/ConnectivityManager$NetworkCallback;Landroid/os/Handler;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [requestNetwork](https://developer.android.com/reference/android/net/ConnectivityManager.html#requestNetwork(android.net.NetworkRequest,%20android.app.PendingIntent))
        ///
        /// Required features: "android-app-PendingIntent", "android-net-NetworkRequest"
        #[cfg(any(feature = "all", all(feature = "android-app-PendingIntent", feature = "android-net-NetworkRequest")))]
        pub fn requestNetwork_NetworkRequest_PendingIntent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::NetworkRequest>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::PendingIntent>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/ConnectivityManager", java.flags == PUBLIC, .name == "requestNetwork", .descriptor == "(Landroid/net/NetworkRequest;Landroid/app/PendingIntent;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/ConnectivityManager\0", "requestNetwork\0", "(Landroid/net/NetworkRequest;Landroid/app/PendingIntent;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [releaseNetworkRequest](https://developer.android.com/reference/android/net/ConnectivityManager.html#releaseNetworkRequest(android.app.PendingIntent))
        ///
        /// Required features: "android-app-PendingIntent"
        #[cfg(any(feature = "all", all(feature = "android-app-PendingIntent")))]
        pub fn releaseNetworkRequest<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::PendingIntent>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/ConnectivityManager", java.flags == PUBLIC, .name == "releaseNetworkRequest", .descriptor == "(Landroid/app/PendingIntent;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/ConnectivityManager\0", "releaseNetworkRequest\0", "(Landroid/app/PendingIntent;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [registerNetworkCallback](https://developer.android.com/reference/android/net/ConnectivityManager.html#registerNetworkCallback(android.net.NetworkRequest,%20android.net.ConnectivityManager.NetworkCallback))
        ///
        /// Required features: "android-net-ConnectivityManager_NetworkCallback", "android-net-NetworkRequest"
        #[cfg(any(feature = "all", all(feature = "android-net-ConnectivityManager_NetworkCallback", feature = "android-net-NetworkRequest")))]
        pub fn registerNetworkCallback_NetworkRequest_NetworkCallback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::NetworkRequest>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::ConnectivityManager_NetworkCallback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/ConnectivityManager", java.flags == PUBLIC, .name == "registerNetworkCallback", .descriptor == "(Landroid/net/NetworkRequest;Landroid/net/ConnectivityManager$NetworkCallback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/ConnectivityManager\0", "registerNetworkCallback\0", "(Landroid/net/NetworkRequest;Landroid/net/ConnectivityManager$NetworkCallback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [registerNetworkCallback](https://developer.android.com/reference/android/net/ConnectivityManager.html#registerNetworkCallback(android.net.NetworkRequest,%20android.net.ConnectivityManager.NetworkCallback,%20android.os.Handler))
        ///
        /// Required features: "android-net-ConnectivityManager_NetworkCallback", "android-net-NetworkRequest", "android-os-Handler"
        #[cfg(any(feature = "all", all(feature = "android-net-ConnectivityManager_NetworkCallback", feature = "android-net-NetworkRequest", feature = "android-os-Handler")))]
        pub fn registerNetworkCallback_NetworkRequest_NetworkCallback_Handler<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::NetworkRequest>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::ConnectivityManager_NetworkCallback>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/ConnectivityManager", java.flags == PUBLIC, .name == "registerNetworkCallback", .descriptor == "(Landroid/net/NetworkRequest;Landroid/net/ConnectivityManager$NetworkCallback;Landroid/os/Handler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/ConnectivityManager\0", "registerNetworkCallback\0", "(Landroid/net/NetworkRequest;Landroid/net/ConnectivityManager$NetworkCallback;Landroid/os/Handler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [registerNetworkCallback](https://developer.android.com/reference/android/net/ConnectivityManager.html#registerNetworkCallback(android.net.NetworkRequest,%20android.app.PendingIntent))
        ///
        /// Required features: "android-app-PendingIntent", "android-net-NetworkRequest"
        #[cfg(any(feature = "all", all(feature = "android-app-PendingIntent", feature = "android-net-NetworkRequest")))]
        pub fn registerNetworkCallback_NetworkRequest_PendingIntent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::NetworkRequest>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::PendingIntent>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/ConnectivityManager", java.flags == PUBLIC, .name == "registerNetworkCallback", .descriptor == "(Landroid/net/NetworkRequest;Landroid/app/PendingIntent;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/ConnectivityManager\0", "registerNetworkCallback\0", "(Landroid/net/NetworkRequest;Landroid/app/PendingIntent;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [registerDefaultNetworkCallback](https://developer.android.com/reference/android/net/ConnectivityManager.html#registerDefaultNetworkCallback(android.net.ConnectivityManager.NetworkCallback))
        ///
        /// Required features: "android-net-ConnectivityManager_NetworkCallback"
        #[cfg(any(feature = "all", all(feature = "android-net-ConnectivityManager_NetworkCallback")))]
        pub fn registerDefaultNetworkCallback_NetworkCallback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::ConnectivityManager_NetworkCallback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/ConnectivityManager", java.flags == PUBLIC, .name == "registerDefaultNetworkCallback", .descriptor == "(Landroid/net/ConnectivityManager$NetworkCallback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/ConnectivityManager\0", "registerDefaultNetworkCallback\0", "(Landroid/net/ConnectivityManager$NetworkCallback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [registerDefaultNetworkCallback](https://developer.android.com/reference/android/net/ConnectivityManager.html#registerDefaultNetworkCallback(android.net.ConnectivityManager.NetworkCallback,%20android.os.Handler))
        ///
        /// Required features: "android-net-ConnectivityManager_NetworkCallback", "android-os-Handler"
        #[cfg(any(feature = "all", all(feature = "android-net-ConnectivityManager_NetworkCallback", feature = "android-os-Handler")))]
        pub fn registerDefaultNetworkCallback_NetworkCallback_Handler<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::ConnectivityManager_NetworkCallback>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/ConnectivityManager", java.flags == PUBLIC, .name == "registerDefaultNetworkCallback", .descriptor == "(Landroid/net/ConnectivityManager$NetworkCallback;Landroid/os/Handler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/ConnectivityManager\0", "registerDefaultNetworkCallback\0", "(Landroid/net/ConnectivityManager$NetworkCallback;Landroid/os/Handler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [requestBandwidthUpdate](https://developer.android.com/reference/android/net/ConnectivityManager.html#requestBandwidthUpdate(android.net.Network))
        ///
        /// Required features: "android-net-Network"
        #[cfg(any(feature = "all", all(feature = "android-net-Network")))]
        pub fn requestBandwidthUpdate<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Network>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/ConnectivityManager", java.flags == PUBLIC, .name == "requestBandwidthUpdate", .descriptor == "(Landroid/net/Network;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/ConnectivityManager\0", "requestBandwidthUpdate\0", "(Landroid/net/Network;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unregisterNetworkCallback](https://developer.android.com/reference/android/net/ConnectivityManager.html#unregisterNetworkCallback(android.net.ConnectivityManager.NetworkCallback))
        ///
        /// Required features: "android-net-ConnectivityManager_NetworkCallback"
        #[cfg(any(feature = "all", all(feature = "android-net-ConnectivityManager_NetworkCallback")))]
        pub fn unregisterNetworkCallback_NetworkCallback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::ConnectivityManager_NetworkCallback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/ConnectivityManager", java.flags == PUBLIC, .name == "unregisterNetworkCallback", .descriptor == "(Landroid/net/ConnectivityManager$NetworkCallback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/ConnectivityManager\0", "unregisterNetworkCallback\0", "(Landroid/net/ConnectivityManager$NetworkCallback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unregisterNetworkCallback](https://developer.android.com/reference/android/net/ConnectivityManager.html#unregisterNetworkCallback(android.app.PendingIntent))
        ///
        /// Required features: "android-app-PendingIntent"
        #[cfg(any(feature = "all", all(feature = "android-app-PendingIntent")))]
        pub fn unregisterNetworkCallback_PendingIntent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::PendingIntent>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/ConnectivityManager", java.flags == PUBLIC, .name == "unregisterNetworkCallback", .descriptor == "(Landroid/app/PendingIntent;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/ConnectivityManager\0", "unregisterNetworkCallback\0", "(Landroid/app/PendingIntent;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMultipathPreference](https://developer.android.com/reference/android/net/ConnectivityManager.html#getMultipathPreference(android.net.Network))
        ///
        /// Required features: "android-net-Network"
        #[cfg(any(feature = "all", all(feature = "android-net-Network")))]
        pub fn getMultipathPreference<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Network>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/ConnectivityManager", java.flags == PUBLIC, .name == "getMultipathPreference", .descriptor == "(Landroid/net/Network;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/ConnectivityManager\0", "getMultipathPreference\0", "(Landroid/net/Network;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [bindProcessToNetwork](https://developer.android.com/reference/android/net/ConnectivityManager.html#bindProcessToNetwork(android.net.Network))
        ///
        /// Required features: "android-net-Network"
        #[cfg(any(feature = "all", all(feature = "android-net-Network")))]
        pub fn bindProcessToNetwork<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Network>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/ConnectivityManager", java.flags == PUBLIC, .name == "bindProcessToNetwork", .descriptor == "(Landroid/net/Network;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/ConnectivityManager\0", "bindProcessToNetwork\0", "(Landroid/net/Network;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setProcessDefaultNetwork](https://developer.android.com/reference/android/net/ConnectivityManager.html#setProcessDefaultNetwork(android.net.Network))
        ///
        /// Required features: "android-net-Network"
        #[cfg(any(feature = "all", all(feature = "android-net-Network")))]
        #[deprecated] pub fn setProcessDefaultNetwork<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Network>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/ConnectivityManager", java.flags == PUBLIC | STATIC, .name == "setProcessDefaultNetwork", .descriptor == "(Landroid/net/Network;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/net/ConnectivityManager\0", "setProcessDefaultNetwork\0", "(Landroid/net/Network;)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getBoundNetworkForProcess](https://developer.android.com/reference/android/net/ConnectivityManager.html#getBoundNetworkForProcess())
        ///
        /// Required features: "android-net-Network"
        #[cfg(any(feature = "all", all(feature = "android-net-Network")))]
        pub fn getBoundNetworkForProcess<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Network>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/ConnectivityManager", java.flags == PUBLIC, .name == "getBoundNetworkForProcess", .descriptor == "()Landroid/net/Network;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/ConnectivityManager\0", "getBoundNetworkForProcess\0", "()Landroid/net/Network;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getProcessDefaultNetwork](https://developer.android.com/reference/android/net/ConnectivityManager.html#getProcessDefaultNetwork())
        ///
        /// Required features: "android-net-Network"
        #[cfg(any(feature = "all", all(feature = "android-net-Network")))]
        #[deprecated] pub fn getProcessDefaultNetwork<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Network>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/ConnectivityManager", java.flags == PUBLIC | STATIC, .name == "getProcessDefaultNetwork", .descriptor == "()Landroid/net/Network;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/net/ConnectivityManager\0", "getProcessDefaultNetwork\0", "()Landroid/net/Network;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRestrictBackgroundStatus](https://developer.android.com/reference/android/net/ConnectivityManager.html#getRestrictBackgroundStatus())
        pub fn getRestrictBackgroundStatus<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/ConnectivityManager", java.flags == PUBLIC, .name == "getRestrictBackgroundStatus", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/ConnectivityManager\0", "getRestrictBackgroundStatus\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNetworkWatchlistConfigHash](https://developer.android.com/reference/android/net/ConnectivityManager.html#getNetworkWatchlistConfigHash())
        pub fn getNetworkWatchlistConfigHash<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ByteArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/ConnectivityManager", java.flags == PUBLIC, .name == "getNetworkWatchlistConfigHash", .descriptor == "()[B"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/ConnectivityManager\0", "getNetworkWatchlistConfigHash\0", "()[B\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getConnectionOwnerUid](https://developer.android.com/reference/android/net/ConnectivityManager.html#getConnectionOwnerUid(int,%20java.net.InetSocketAddress,%20java.net.InetSocketAddress))
        ///
        /// Required features: "java-net-InetSocketAddress"
        #[cfg(any(feature = "all", all(feature = "java-net-InetSocketAddress")))]
        pub fn getConnectionOwnerUid<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::InetSocketAddress>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::InetSocketAddress>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/ConnectivityManager", java.flags == PUBLIC, .name == "getConnectionOwnerUid", .descriptor == "(ILjava/net/InetSocketAddress;Ljava/net/InetSocketAddress;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/ConnectivityManager\0", "getConnectionOwnerUid\0", "(ILjava/net/InetSocketAddress;Ljava/net/InetSocketAddress;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [ACTION_BACKGROUND_DATA_SETTING_CHANGED](https://developer.android.com/reference/android/net/ConnectivityManager.html#ACTION_BACKGROUND_DATA_SETTING_CHANGED)
        #[deprecated] pub const ACTION_BACKGROUND_DATA_SETTING_CHANGED : &'static str = "android.net.conn.BACKGROUND_DATA_SETTING_CHANGED";

        /// public static final [ACTION_CAPTIVE_PORTAL_SIGN_IN](https://developer.android.com/reference/android/net/ConnectivityManager.html#ACTION_CAPTIVE_PORTAL_SIGN_IN)
        pub const ACTION_CAPTIVE_PORTAL_SIGN_IN : &'static str = "android.net.conn.CAPTIVE_PORTAL";

        /// public static final [ACTION_RESTRICT_BACKGROUND_CHANGED](https://developer.android.com/reference/android/net/ConnectivityManager.html#ACTION_RESTRICT_BACKGROUND_CHANGED)
        pub const ACTION_RESTRICT_BACKGROUND_CHANGED : &'static str = "android.net.conn.RESTRICT_BACKGROUND_CHANGED";

        /// public static final [CONNECTIVITY_ACTION](https://developer.android.com/reference/android/net/ConnectivityManager.html#CONNECTIVITY_ACTION)
        #[deprecated] pub const CONNECTIVITY_ACTION : &'static str = "android.net.conn.CONNECTIVITY_CHANGE";

        /// public static final [DEFAULT_NETWORK_PREFERENCE](https://developer.android.com/reference/android/net/ConnectivityManager.html#DEFAULT_NETWORK_PREFERENCE)
        #[deprecated] pub const DEFAULT_NETWORK_PREFERENCE : i32 = 1;

        /// public static final [EXTRA_CAPTIVE_PORTAL](https://developer.android.com/reference/android/net/ConnectivityManager.html#EXTRA_CAPTIVE_PORTAL)
        pub const EXTRA_CAPTIVE_PORTAL : &'static str = "android.net.extra.CAPTIVE_PORTAL";

        /// public static final [EXTRA_CAPTIVE_PORTAL_URL](https://developer.android.com/reference/android/net/ConnectivityManager.html#EXTRA_CAPTIVE_PORTAL_URL)
        pub const EXTRA_CAPTIVE_PORTAL_URL : &'static str = "android.net.extra.CAPTIVE_PORTAL_URL";

        /// public static final [EXTRA_EXTRA_INFO](https://developer.android.com/reference/android/net/ConnectivityManager.html#EXTRA_EXTRA_INFO)
        #[deprecated] pub const EXTRA_EXTRA_INFO : &'static str = "extraInfo";

        /// public static final [EXTRA_IS_FAILOVER](https://developer.android.com/reference/android/net/ConnectivityManager.html#EXTRA_IS_FAILOVER)
        #[deprecated] pub const EXTRA_IS_FAILOVER : &'static str = "isFailover";

        /// public static final [EXTRA_NETWORK](https://developer.android.com/reference/android/net/ConnectivityManager.html#EXTRA_NETWORK)
        pub const EXTRA_NETWORK : &'static str = "android.net.extra.NETWORK";

        /// public static final [EXTRA_NETWORK_INFO](https://developer.android.com/reference/android/net/ConnectivityManager.html#EXTRA_NETWORK_INFO)
        #[deprecated] pub const EXTRA_NETWORK_INFO : &'static str = "networkInfo";

        /// public static final [EXTRA_NETWORK_REQUEST](https://developer.android.com/reference/android/net/ConnectivityManager.html#EXTRA_NETWORK_REQUEST)
        pub const EXTRA_NETWORK_REQUEST : &'static str = "android.net.extra.NETWORK_REQUEST";

        /// public static final [EXTRA_NETWORK_TYPE](https://developer.android.com/reference/android/net/ConnectivityManager.html#EXTRA_NETWORK_TYPE)
        #[deprecated] pub const EXTRA_NETWORK_TYPE : &'static str = "networkType";

        /// public static final [EXTRA_NO_CONNECTIVITY](https://developer.android.com/reference/android/net/ConnectivityManager.html#EXTRA_NO_CONNECTIVITY)
        pub const EXTRA_NO_CONNECTIVITY : &'static str = "noConnectivity";

        /// public static final [EXTRA_OTHER_NETWORK_INFO](https://developer.android.com/reference/android/net/ConnectivityManager.html#EXTRA_OTHER_NETWORK_INFO)
        #[deprecated] pub const EXTRA_OTHER_NETWORK_INFO : &'static str = "otherNetwork";

        /// public static final [EXTRA_REASON](https://developer.android.com/reference/android/net/ConnectivityManager.html#EXTRA_REASON)
        pub const EXTRA_REASON : &'static str = "reason";

        /// public static final [MULTIPATH_PREFERENCE_HANDOVER](https://developer.android.com/reference/android/net/ConnectivityManager.html#MULTIPATH_PREFERENCE_HANDOVER)
        pub const MULTIPATH_PREFERENCE_HANDOVER : i32 = 1;

        /// public static final [MULTIPATH_PREFERENCE_PERFORMANCE](https://developer.android.com/reference/android/net/ConnectivityManager.html#MULTIPATH_PREFERENCE_PERFORMANCE)
        pub const MULTIPATH_PREFERENCE_PERFORMANCE : i32 = 4;

        /// public static final [MULTIPATH_PREFERENCE_RELIABILITY](https://developer.android.com/reference/android/net/ConnectivityManager.html#MULTIPATH_PREFERENCE_RELIABILITY)
        pub const MULTIPATH_PREFERENCE_RELIABILITY : i32 = 2;

        /// public static final [RESTRICT_BACKGROUND_STATUS_DISABLED](https://developer.android.com/reference/android/net/ConnectivityManager.html#RESTRICT_BACKGROUND_STATUS_DISABLED)
        pub const RESTRICT_BACKGROUND_STATUS_DISABLED : i32 = 1;

        /// public static final [RESTRICT_BACKGROUND_STATUS_ENABLED](https://developer.android.com/reference/android/net/ConnectivityManager.html#RESTRICT_BACKGROUND_STATUS_ENABLED)
        pub const RESTRICT_BACKGROUND_STATUS_ENABLED : i32 = 3;

        /// public static final [RESTRICT_BACKGROUND_STATUS_WHITELISTED](https://developer.android.com/reference/android/net/ConnectivityManager.html#RESTRICT_BACKGROUND_STATUS_WHITELISTED)
        pub const RESTRICT_BACKGROUND_STATUS_WHITELISTED : i32 = 2;

        /// public static final [TYPE_BLUETOOTH](https://developer.android.com/reference/android/net/ConnectivityManager.html#TYPE_BLUETOOTH)
        #[deprecated] pub const TYPE_BLUETOOTH : i32 = 7;

        /// public static final [TYPE_DUMMY](https://developer.android.com/reference/android/net/ConnectivityManager.html#TYPE_DUMMY)
        #[deprecated] pub const TYPE_DUMMY : i32 = 8;

        /// public static final [TYPE_ETHERNET](https://developer.android.com/reference/android/net/ConnectivityManager.html#TYPE_ETHERNET)
        #[deprecated] pub const TYPE_ETHERNET : i32 = 9;

        /// public static final [TYPE_MOBILE](https://developer.android.com/reference/android/net/ConnectivityManager.html#TYPE_MOBILE)
        #[deprecated] pub const TYPE_MOBILE : i32 = 0;

        /// public static final [TYPE_MOBILE_DUN](https://developer.android.com/reference/android/net/ConnectivityManager.html#TYPE_MOBILE_DUN)
        #[deprecated] pub const TYPE_MOBILE_DUN : i32 = 4;

        /// public static final [TYPE_MOBILE_HIPRI](https://developer.android.com/reference/android/net/ConnectivityManager.html#TYPE_MOBILE_HIPRI)
        #[deprecated] pub const TYPE_MOBILE_HIPRI : i32 = 5;

        /// public static final [TYPE_MOBILE_MMS](https://developer.android.com/reference/android/net/ConnectivityManager.html#TYPE_MOBILE_MMS)
        #[deprecated] pub const TYPE_MOBILE_MMS : i32 = 2;

        /// public static final [TYPE_MOBILE_SUPL](https://developer.android.com/reference/android/net/ConnectivityManager.html#TYPE_MOBILE_SUPL)
        #[deprecated] pub const TYPE_MOBILE_SUPL : i32 = 3;

        /// public static final [TYPE_VPN](https://developer.android.com/reference/android/net/ConnectivityManager.html#TYPE_VPN)
        #[deprecated] pub const TYPE_VPN : i32 = 17;

        /// public static final [TYPE_WIFI](https://developer.android.com/reference/android/net/ConnectivityManager.html#TYPE_WIFI)
        #[deprecated] pub const TYPE_WIFI : i32 = 1;

        /// public static final [TYPE_WIMAX](https://developer.android.com/reference/android/net/ConnectivityManager.html#TYPE_WIMAX)
        #[deprecated] pub const TYPE_WIMAX : i32 = 6;
    }
}
