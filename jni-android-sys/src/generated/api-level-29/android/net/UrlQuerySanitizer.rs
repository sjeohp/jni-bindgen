// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-net-UrlQuerySanitizer"))]
__jni_bindgen! {
    /// public class [UrlQuerySanitizer](https://developer.android.com/reference/android/net/UrlQuerySanitizer.html)
    ///
    /// Required feature: android-net-UrlQuerySanitizer
    public class UrlQuerySanitizer ("android/net/UrlQuerySanitizer") extends crate::java::lang::Object {

        /// [UrlQuerySanitizer](https://developer.android.com/reference/android/net/UrlQuerySanitizer.html#UrlQuerySanitizer())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::net::UrlQuerySanitizer>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/UrlQuerySanitizer", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/UrlQuerySanitizer\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [UrlQuerySanitizer](https://developer.android.com/reference/android/net/UrlQuerySanitizer.html#UrlQuerySanitizer(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn new_String<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::net::UrlQuerySanitizer>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/UrlQuerySanitizer", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/UrlQuerySanitizer\0", "<init>\0", "(Ljava/lang/String;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getUnregisteredParameterValueSanitizer](https://developer.android.com/reference/android/net/UrlQuerySanitizer.html#getUnregisteredParameterValueSanitizer())
        ///
        /// Required features: "android-net-UrlQuerySanitizer_ValueSanitizer"
        #[cfg(any(feature = "all", all(feature = "android-net-UrlQuerySanitizer_ValueSanitizer")))]
        pub fn getUnregisteredParameterValueSanitizer<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::UrlQuerySanitizer_ValueSanitizer>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/UrlQuerySanitizer", java.flags == PUBLIC, .name == "getUnregisteredParameterValueSanitizer", .descriptor == "()Landroid/net/UrlQuerySanitizer$ValueSanitizer;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/UrlQuerySanitizer\0", "getUnregisteredParameterValueSanitizer\0", "()Landroid/net/UrlQuerySanitizer$ValueSanitizer;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setUnregisteredParameterValueSanitizer](https://developer.android.com/reference/android/net/UrlQuerySanitizer.html#setUnregisteredParameterValueSanitizer(android.net.UrlQuerySanitizer.ValueSanitizer))
        ///
        /// Required features: "android-net-UrlQuerySanitizer_ValueSanitizer"
        #[cfg(any(feature = "all", all(feature = "android-net-UrlQuerySanitizer_ValueSanitizer")))]
        pub fn setUnregisteredParameterValueSanitizer<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::UrlQuerySanitizer_ValueSanitizer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/UrlQuerySanitizer", java.flags == PUBLIC, .name == "setUnregisteredParameterValueSanitizer", .descriptor == "(Landroid/net/UrlQuerySanitizer$ValueSanitizer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/UrlQuerySanitizer\0", "setUnregisteredParameterValueSanitizer\0", "(Landroid/net/UrlQuerySanitizer$ValueSanitizer;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAllIllegal](https://developer.android.com/reference/android/net/UrlQuerySanitizer.html#getAllIllegal())
        ///
        /// Required features: "android-net-UrlQuerySanitizer_ValueSanitizer"
        #[cfg(any(feature = "all", all(feature = "android-net-UrlQuerySanitizer_ValueSanitizer")))]
        pub fn getAllIllegal<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::UrlQuerySanitizer_ValueSanitizer>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/UrlQuerySanitizer", java.flags == PUBLIC | STATIC | FINAL, .name == "getAllIllegal", .descriptor == "()Landroid/net/UrlQuerySanitizer$ValueSanitizer;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/net/UrlQuerySanitizer\0", "getAllIllegal\0", "()Landroid/net/UrlQuerySanitizer$ValueSanitizer;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAllButNulLegal](https://developer.android.com/reference/android/net/UrlQuerySanitizer.html#getAllButNulLegal())
        ///
        /// Required features: "android-net-UrlQuerySanitizer_ValueSanitizer"
        #[cfg(any(feature = "all", all(feature = "android-net-UrlQuerySanitizer_ValueSanitizer")))]
        pub fn getAllButNulLegal<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::UrlQuerySanitizer_ValueSanitizer>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/UrlQuerySanitizer", java.flags == PUBLIC | STATIC | FINAL, .name == "getAllButNulLegal", .descriptor == "()Landroid/net/UrlQuerySanitizer$ValueSanitizer;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/net/UrlQuerySanitizer\0", "getAllButNulLegal\0", "()Landroid/net/UrlQuerySanitizer$ValueSanitizer;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAllButWhitespaceLegal](https://developer.android.com/reference/android/net/UrlQuerySanitizer.html#getAllButWhitespaceLegal())
        ///
        /// Required features: "android-net-UrlQuerySanitizer_ValueSanitizer"
        #[cfg(any(feature = "all", all(feature = "android-net-UrlQuerySanitizer_ValueSanitizer")))]
        pub fn getAllButWhitespaceLegal<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::UrlQuerySanitizer_ValueSanitizer>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/UrlQuerySanitizer", java.flags == PUBLIC | STATIC | FINAL, .name == "getAllButWhitespaceLegal", .descriptor == "()Landroid/net/UrlQuerySanitizer$ValueSanitizer;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/net/UrlQuerySanitizer\0", "getAllButWhitespaceLegal\0", "()Landroid/net/UrlQuerySanitizer$ValueSanitizer;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getUrlLegal](https://developer.android.com/reference/android/net/UrlQuerySanitizer.html#getUrlLegal())
        ///
        /// Required features: "android-net-UrlQuerySanitizer_ValueSanitizer"
        #[cfg(any(feature = "all", all(feature = "android-net-UrlQuerySanitizer_ValueSanitizer")))]
        pub fn getUrlLegal<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::UrlQuerySanitizer_ValueSanitizer>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/UrlQuerySanitizer", java.flags == PUBLIC | STATIC | FINAL, .name == "getUrlLegal", .descriptor == "()Landroid/net/UrlQuerySanitizer$ValueSanitizer;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/net/UrlQuerySanitizer\0", "getUrlLegal\0", "()Landroid/net/UrlQuerySanitizer$ValueSanitizer;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getUrlAndSpaceLegal](https://developer.android.com/reference/android/net/UrlQuerySanitizer.html#getUrlAndSpaceLegal())
        ///
        /// Required features: "android-net-UrlQuerySanitizer_ValueSanitizer"
        #[cfg(any(feature = "all", all(feature = "android-net-UrlQuerySanitizer_ValueSanitizer")))]
        pub fn getUrlAndSpaceLegal<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::UrlQuerySanitizer_ValueSanitizer>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/UrlQuerySanitizer", java.flags == PUBLIC | STATIC | FINAL, .name == "getUrlAndSpaceLegal", .descriptor == "()Landroid/net/UrlQuerySanitizer$ValueSanitizer;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/net/UrlQuerySanitizer\0", "getUrlAndSpaceLegal\0", "()Landroid/net/UrlQuerySanitizer$ValueSanitizer;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAmpLegal](https://developer.android.com/reference/android/net/UrlQuerySanitizer.html#getAmpLegal())
        ///
        /// Required features: "android-net-UrlQuerySanitizer_ValueSanitizer"
        #[cfg(any(feature = "all", all(feature = "android-net-UrlQuerySanitizer_ValueSanitizer")))]
        pub fn getAmpLegal<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::UrlQuerySanitizer_ValueSanitizer>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/UrlQuerySanitizer", java.flags == PUBLIC | STATIC | FINAL, .name == "getAmpLegal", .descriptor == "()Landroid/net/UrlQuerySanitizer$ValueSanitizer;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/net/UrlQuerySanitizer\0", "getAmpLegal\0", "()Landroid/net/UrlQuerySanitizer$ValueSanitizer;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAmpAndSpaceLegal](https://developer.android.com/reference/android/net/UrlQuerySanitizer.html#getAmpAndSpaceLegal())
        ///
        /// Required features: "android-net-UrlQuerySanitizer_ValueSanitizer"
        #[cfg(any(feature = "all", all(feature = "android-net-UrlQuerySanitizer_ValueSanitizer")))]
        pub fn getAmpAndSpaceLegal<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::UrlQuerySanitizer_ValueSanitizer>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/UrlQuerySanitizer", java.flags == PUBLIC | STATIC | FINAL, .name == "getAmpAndSpaceLegal", .descriptor == "()Landroid/net/UrlQuerySanitizer$ValueSanitizer;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/net/UrlQuerySanitizer\0", "getAmpAndSpaceLegal\0", "()Landroid/net/UrlQuerySanitizer$ValueSanitizer;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSpaceLegal](https://developer.android.com/reference/android/net/UrlQuerySanitizer.html#getSpaceLegal())
        ///
        /// Required features: "android-net-UrlQuerySanitizer_ValueSanitizer"
        #[cfg(any(feature = "all", all(feature = "android-net-UrlQuerySanitizer_ValueSanitizer")))]
        pub fn getSpaceLegal<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::UrlQuerySanitizer_ValueSanitizer>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/UrlQuerySanitizer", java.flags == PUBLIC | STATIC | FINAL, .name == "getSpaceLegal", .descriptor == "()Landroid/net/UrlQuerySanitizer$ValueSanitizer;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/net/UrlQuerySanitizer\0", "getSpaceLegal\0", "()Landroid/net/UrlQuerySanitizer$ValueSanitizer;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAllButNulAndAngleBracketsLegal](https://developer.android.com/reference/android/net/UrlQuerySanitizer.html#getAllButNulAndAngleBracketsLegal())
        ///
        /// Required features: "android-net-UrlQuerySanitizer_ValueSanitizer"
        #[cfg(any(feature = "all", all(feature = "android-net-UrlQuerySanitizer_ValueSanitizer")))]
        pub fn getAllButNulAndAngleBracketsLegal<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::UrlQuerySanitizer_ValueSanitizer>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/UrlQuerySanitizer", java.flags == PUBLIC | STATIC | FINAL, .name == "getAllButNulAndAngleBracketsLegal", .descriptor == "()Landroid/net/UrlQuerySanitizer$ValueSanitizer;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/net/UrlQuerySanitizer\0", "getAllButNulAndAngleBracketsLegal\0", "()Landroid/net/UrlQuerySanitizer$ValueSanitizer;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [parseUrl](https://developer.android.com/reference/android/net/UrlQuerySanitizer.html#parseUrl(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn parseUrl<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/UrlQuerySanitizer", java.flags == PUBLIC, .name == "parseUrl", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/UrlQuerySanitizer\0", "parseUrl\0", "(Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [parseQuery](https://developer.android.com/reference/android/net/UrlQuerySanitizer.html#parseQuery(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn parseQuery<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/UrlQuerySanitizer", java.flags == PUBLIC, .name == "parseQuery", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/UrlQuerySanitizer\0", "parseQuery\0", "(Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getParameterSet](https://developer.android.com/reference/android/net/UrlQuerySanitizer.html#getParameterSet())
        ///
        /// Required features: "java-util-Set"
        #[cfg(any(feature = "all", all(feature = "java-util-Set")))]
        pub fn getParameterSet<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Set>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/UrlQuerySanitizer", java.flags == PUBLIC, .name == "getParameterSet", .descriptor == "()Ljava/util/Set;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/UrlQuerySanitizer\0", "getParameterSet\0", "()Ljava/util/Set;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getParameterList](https://developer.android.com/reference/android/net/UrlQuerySanitizer.html#getParameterList())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getParameterList<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/UrlQuerySanitizer", java.flags == PUBLIC, .name == "getParameterList", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/UrlQuerySanitizer\0", "getParameterList\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasParameter](https://developer.android.com/reference/android/net/UrlQuerySanitizer.html#hasParameter(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn hasParameter<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/UrlQuerySanitizer", java.flags == PUBLIC, .name == "hasParameter", .descriptor == "(Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/UrlQuerySanitizer\0", "hasParameter\0", "(Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getValue](https://developer.android.com/reference/android/net/UrlQuerySanitizer.html#getValue(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getValue<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/UrlQuerySanitizer", java.flags == PUBLIC, .name == "getValue", .descriptor == "(Ljava/lang/String;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/UrlQuerySanitizer\0", "getValue\0", "(Ljava/lang/String;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [registerParameter](https://developer.android.com/reference/android/net/UrlQuerySanitizer.html#registerParameter(java.lang.String,%20android.net.UrlQuerySanitizer.ValueSanitizer))
        ///
        /// Required features: "android-net-UrlQuerySanitizer_ValueSanitizer", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-UrlQuerySanitizer_ValueSanitizer", feature = "java-lang-String")))]
        pub fn registerParameter<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::UrlQuerySanitizer_ValueSanitizer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/UrlQuerySanitizer", java.flags == PUBLIC, .name == "registerParameter", .descriptor == "(Ljava/lang/String;Landroid/net/UrlQuerySanitizer$ValueSanitizer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/UrlQuerySanitizer\0", "registerParameter\0", "(Ljava/lang/String;Landroid/net/UrlQuerySanitizer$ValueSanitizer;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [registerParameters](https://developer.android.com/reference/android/net/UrlQuerySanitizer.html#registerParameters(java.lang.String%5B%5D,%20android.net.UrlQuerySanitizer.ValueSanitizer))
        ///
        /// Required features: "android-net-UrlQuerySanitizer_ValueSanitizer", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-UrlQuerySanitizer_ValueSanitizer", feature = "java-lang-String")))]
        pub fn registerParameters<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::UrlQuerySanitizer_ValueSanitizer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/UrlQuerySanitizer", java.flags == PUBLIC, .name == "registerParameters", .descriptor == "([Ljava/lang/String;Landroid/net/UrlQuerySanitizer$ValueSanitizer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/UrlQuerySanitizer\0", "registerParameters\0", "([Ljava/lang/String;Landroid/net/UrlQuerySanitizer$ValueSanitizer;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAllowUnregisteredParamaters](https://developer.android.com/reference/android/net/UrlQuerySanitizer.html#setAllowUnregisteredParamaters(boolean))
        pub fn setAllowUnregisteredParamaters<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/UrlQuerySanitizer", java.flags == PUBLIC, .name == "setAllowUnregisteredParamaters", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/UrlQuerySanitizer\0", "setAllowUnregisteredParamaters\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAllowUnregisteredParamaters](https://developer.android.com/reference/android/net/UrlQuerySanitizer.html#getAllowUnregisteredParamaters())
        pub fn getAllowUnregisteredParamaters<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/UrlQuerySanitizer", java.flags == PUBLIC, .name == "getAllowUnregisteredParamaters", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/UrlQuerySanitizer\0", "getAllowUnregisteredParamaters\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPreferFirstRepeatedParameter](https://developer.android.com/reference/android/net/UrlQuerySanitizer.html#setPreferFirstRepeatedParameter(boolean))
        pub fn setPreferFirstRepeatedParameter<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/UrlQuerySanitizer", java.flags == PUBLIC, .name == "setPreferFirstRepeatedParameter", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/UrlQuerySanitizer\0", "setPreferFirstRepeatedParameter\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPreferFirstRepeatedParameter](https://developer.android.com/reference/android/net/UrlQuerySanitizer.html#getPreferFirstRepeatedParameter())
        pub fn getPreferFirstRepeatedParameter<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/UrlQuerySanitizer", java.flags == PUBLIC, .name == "getPreferFirstRepeatedParameter", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/UrlQuerySanitizer\0", "getPreferFirstRepeatedParameter\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [parseEntry](https://developer.android.com/reference/android/net/UrlQuerySanitizer.html#parseEntry(java.lang.String,%20java.lang.String))
        // ///
        // /// Required features: "java-lang-String"
        // #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        // fn parseEntry<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/net/UrlQuerySanitizer", java.flags == PROTECTED, .name == "parseEntry", .descriptor == "(Ljava/lang/String;Ljava/lang/String;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/UrlQuerySanitizer\0", "parseEntry\0", "(Ljava/lang/String;Ljava/lang/String;)V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [addSanitizedEntry](https://developer.android.com/reference/android/net/UrlQuerySanitizer.html#addSanitizedEntry(java.lang.String,%20java.lang.String))
        // ///
        // /// Required features: "java-lang-String"
        // #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        // fn addSanitizedEntry<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/net/UrlQuerySanitizer", java.flags == PROTECTED, .name == "addSanitizedEntry", .descriptor == "(Ljava/lang/String;Ljava/lang/String;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/UrlQuerySanitizer\0", "addSanitizedEntry\0", "(Ljava/lang/String;Ljava/lang/String;)V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getValueSanitizer](https://developer.android.com/reference/android/net/UrlQuerySanitizer.html#getValueSanitizer(java.lang.String))
        ///
        /// Required features: "android-net-UrlQuerySanitizer_ValueSanitizer", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-UrlQuerySanitizer_ValueSanitizer", feature = "java-lang-String")))]
        pub fn getValueSanitizer<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::UrlQuerySanitizer_ValueSanitizer>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/UrlQuerySanitizer", java.flags == PUBLIC, .name == "getValueSanitizer", .descriptor == "(Ljava/lang/String;)Landroid/net/UrlQuerySanitizer$ValueSanitizer;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/UrlQuerySanitizer\0", "getValueSanitizer\0", "(Ljava/lang/String;)Landroid/net/UrlQuerySanitizer$ValueSanitizer;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getEffectiveValueSanitizer](https://developer.android.com/reference/android/net/UrlQuerySanitizer.html#getEffectiveValueSanitizer(java.lang.String))
        ///
        /// Required features: "android-net-UrlQuerySanitizer_ValueSanitizer", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-UrlQuerySanitizer_ValueSanitizer", feature = "java-lang-String")))]
        pub fn getEffectiveValueSanitizer<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::UrlQuerySanitizer_ValueSanitizer>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/UrlQuerySanitizer", java.flags == PUBLIC, .name == "getEffectiveValueSanitizer", .descriptor == "(Ljava/lang/String;)Landroid/net/UrlQuerySanitizer$ValueSanitizer;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/UrlQuerySanitizer\0", "getEffectiveValueSanitizer\0", "(Ljava/lang/String;)Landroid/net/UrlQuerySanitizer$ValueSanitizer;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unescape](https://developer.android.com/reference/android/net/UrlQuerySanitizer.html#unescape(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn unescape<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/UrlQuerySanitizer", java.flags == PUBLIC, .name == "unescape", .descriptor == "(Ljava/lang/String;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/UrlQuerySanitizer\0", "unescape\0", "(Ljava/lang/String;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [isHexDigit](https://developer.android.com/reference/android/net/UrlQuerySanitizer.html#isHexDigit(char))
        // fn isHexDigit<'env>(&'env self, arg0: __jni_bindgen::jchar) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/net/UrlQuerySanitizer", java.flags == PROTECTED, .name == "isHexDigit", .descriptor == "(C)Z"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/UrlQuerySanitizer\0", "isHexDigit\0", "(C)Z\0");
        //         __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [decodeHexDigit](https://developer.android.com/reference/android/net/UrlQuerySanitizer.html#decodeHexDigit(char))
        // fn decodeHexDigit<'env>(&'env self, arg0: __jni_bindgen::jchar) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/net/UrlQuerySanitizer", java.flags == PROTECTED, .name == "decodeHexDigit", .descriptor == "(C)I"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/UrlQuerySanitizer\0", "decodeHexDigit\0", "(C)I\0");
        //         __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [clear](https://developer.android.com/reference/android/net/UrlQuerySanitizer.html#clear())
        // fn clear<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/net/UrlQuerySanitizer", java.flags == PROTECTED, .name == "clear", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/UrlQuerySanitizer\0", "clear\0", "()V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }
    }
}
