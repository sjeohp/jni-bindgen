// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-net-sip-SipAudioCall"))]
__jni_bindgen! {
    /// public class [SipAudioCall](https://developer.android.com/reference/android/net/sip/SipAudioCall.html)
    ///
    /// Required feature: android-net-sip-SipAudioCall
    public class SipAudioCall ("android/net/sip/SipAudioCall") extends crate::java::lang::Object {

        /// [SipAudioCall](https://developer.android.com/reference/android/net/sip/SipAudioCall.html#SipAudioCall(android.content.Context,%20android.net.sip.SipProfile))
        ///
        /// Required features: "android-content-Context", "android-net-sip-SipProfile"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-net-sip-SipProfile")))]
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::sip::SipProfile>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::net::sip::SipAudioCall>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/sip/SipAudioCall", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/content/Context;Landroid/net/sip/SipProfile;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/sip/SipAudioCall\0", "<init>\0", "(Landroid/content/Context;Landroid/net/sip/SipProfile;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setListener](https://developer.android.com/reference/android/net/sip/SipAudioCall.html#setListener(android.net.sip.SipAudioCall.Listener))
        ///
        /// Required features: "android-net-sip-SipAudioCall_Listener"
        #[cfg(any(feature = "all", all(feature = "android-net-sip-SipAudioCall_Listener")))]
        pub fn setListener_Listener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::sip::SipAudioCall_Listener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/sip/SipAudioCall", java.flags == PUBLIC, .name == "setListener", .descriptor == "(Landroid/net/sip/SipAudioCall$Listener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/sip/SipAudioCall\0", "setListener\0", "(Landroid/net/sip/SipAudioCall$Listener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setListener](https://developer.android.com/reference/android/net/sip/SipAudioCall.html#setListener(android.net.sip.SipAudioCall.Listener,%20boolean))
        ///
        /// Required features: "android-net-sip-SipAudioCall_Listener"
        #[cfg(any(feature = "all", all(feature = "android-net-sip-SipAudioCall_Listener")))]
        pub fn setListener_Listener_boolean<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::sip::SipAudioCall_Listener>>, arg1: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/sip/SipAudioCall", java.flags == PUBLIC, .name == "setListener", .descriptor == "(Landroid/net/sip/SipAudioCall$Listener;Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/sip/SipAudioCall\0", "setListener\0", "(Landroid/net/sip/SipAudioCall$Listener;Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isInCall](https://developer.android.com/reference/android/net/sip/SipAudioCall.html#isInCall())
        pub fn isInCall<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/sip/SipAudioCall", java.flags == PUBLIC, .name == "isInCall", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/sip/SipAudioCall\0", "isInCall\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isOnHold](https://developer.android.com/reference/android/net/sip/SipAudioCall.html#isOnHold())
        pub fn isOnHold<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/sip/SipAudioCall", java.flags == PUBLIC, .name == "isOnHold", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/sip/SipAudioCall\0", "isOnHold\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [close](https://developer.android.com/reference/android/net/sip/SipAudioCall.html#close())
        pub fn close<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/sip/SipAudioCall", java.flags == PUBLIC, .name == "close", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/sip/SipAudioCall\0", "close\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLocalProfile](https://developer.android.com/reference/android/net/sip/SipAudioCall.html#getLocalProfile())
        ///
        /// Required features: "android-net-sip-SipProfile"
        #[cfg(any(feature = "all", all(feature = "android-net-sip-SipProfile")))]
        pub fn getLocalProfile<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::sip::SipProfile>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/sip/SipAudioCall", java.flags == PUBLIC, .name == "getLocalProfile", .descriptor == "()Landroid/net/sip/SipProfile;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/sip/SipAudioCall\0", "getLocalProfile\0", "()Landroid/net/sip/SipProfile;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPeerProfile](https://developer.android.com/reference/android/net/sip/SipAudioCall.html#getPeerProfile())
        ///
        /// Required features: "android-net-sip-SipProfile"
        #[cfg(any(feature = "all", all(feature = "android-net-sip-SipProfile")))]
        pub fn getPeerProfile<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::sip::SipProfile>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/sip/SipAudioCall", java.flags == PUBLIC, .name == "getPeerProfile", .descriptor == "()Landroid/net/sip/SipProfile;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/sip/SipAudioCall\0", "getPeerProfile\0", "()Landroid/net/sip/SipProfile;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getState](https://developer.android.com/reference/android/net/sip/SipAudioCall.html#getState())
        pub fn getState<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/sip/SipAudioCall", java.flags == PUBLIC, .name == "getState", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/sip/SipAudioCall\0", "getState\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [attachCall](https://developer.android.com/reference/android/net/sip/SipAudioCall.html#attachCall(android.net.sip.SipSession,%20java.lang.String))
        ///
        /// Required features: "android-net-sip-SipSession", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-sip-SipSession", feature = "java-lang-String")))]
        pub fn attachCall<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::sip::SipSession>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/sip/SipAudioCall", java.flags == PUBLIC, .name == "attachCall", .descriptor == "(Landroid/net/sip/SipSession;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/sip/SipAudioCall\0", "attachCall\0", "(Landroid/net/sip/SipSession;Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [makeCall](https://developer.android.com/reference/android/net/sip/SipAudioCall.html#makeCall(android.net.sip.SipProfile,%20android.net.sip.SipSession,%20int))
        ///
        /// Required features: "android-net-sip-SipProfile", "android-net-sip-SipSession"
        #[cfg(any(feature = "all", all(feature = "android-net-sip-SipProfile", feature = "android-net-sip-SipSession")))]
        pub fn makeCall<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::sip::SipProfile>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::sip::SipSession>>, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/sip/SipAudioCall", java.flags == PUBLIC, .name == "makeCall", .descriptor == "(Landroid/net/sip/SipProfile;Landroid/net/sip/SipSession;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/sip/SipAudioCall\0", "makeCall\0", "(Landroid/net/sip/SipProfile;Landroid/net/sip/SipSession;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [endCall](https://developer.android.com/reference/android/net/sip/SipAudioCall.html#endCall())
        pub fn endCall<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/sip/SipAudioCall", java.flags == PUBLIC, .name == "endCall", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/sip/SipAudioCall\0", "endCall\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [holdCall](https://developer.android.com/reference/android/net/sip/SipAudioCall.html#holdCall(int))
        pub fn holdCall<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/sip/SipAudioCall", java.flags == PUBLIC, .name == "holdCall", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/sip/SipAudioCall\0", "holdCall\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [answerCall](https://developer.android.com/reference/android/net/sip/SipAudioCall.html#answerCall(int))
        pub fn answerCall<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/sip/SipAudioCall", java.flags == PUBLIC, .name == "answerCall", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/sip/SipAudioCall\0", "answerCall\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [continueCall](https://developer.android.com/reference/android/net/sip/SipAudioCall.html#continueCall(int))
        pub fn continueCall<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/sip/SipAudioCall", java.flags == PUBLIC, .name == "continueCall", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/sip/SipAudioCall\0", "continueCall\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toggleMute](https://developer.android.com/reference/android/net/sip/SipAudioCall.html#toggleMute())
        pub fn toggleMute<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/sip/SipAudioCall", java.flags == PUBLIC, .name == "toggleMute", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/sip/SipAudioCall\0", "toggleMute\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isMuted](https://developer.android.com/reference/android/net/sip/SipAudioCall.html#isMuted())
        pub fn isMuted<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/sip/SipAudioCall", java.flags == PUBLIC, .name == "isMuted", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/sip/SipAudioCall\0", "isMuted\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setSpeakerMode](https://developer.android.com/reference/android/net/sip/SipAudioCall.html#setSpeakerMode(boolean))
        pub fn setSpeakerMode<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/sip/SipAudioCall", java.flags == PUBLIC, .name == "setSpeakerMode", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/sip/SipAudioCall\0", "setSpeakerMode\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [sendDtmf](https://developer.android.com/reference/android/net/sip/SipAudioCall.html#sendDtmf(int))
        pub fn sendDtmf_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/sip/SipAudioCall", java.flags == PUBLIC, .name == "sendDtmf", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/sip/SipAudioCall\0", "sendDtmf\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [sendDtmf](https://developer.android.com/reference/android/net/sip/SipAudioCall.html#sendDtmf(int,%20android.os.Message))
        ///
        /// Required features: "android-os-Message"
        #[cfg(any(feature = "all", all(feature = "android-os-Message")))]
        pub fn sendDtmf_int_Message<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Message>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/sip/SipAudioCall", java.flags == PUBLIC, .name == "sendDtmf", .descriptor == "(ILandroid/os/Message;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/sip/SipAudioCall\0", "sendDtmf\0", "(ILandroid/os/Message;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [startAudio](https://developer.android.com/reference/android/net/sip/SipAudioCall.html#startAudio())
        pub fn startAudio<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/sip/SipAudioCall", java.flags == PUBLIC, .name == "startAudio", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/sip/SipAudioCall\0", "startAudio\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
