// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-net-sip-SipManager"))]
__jni_bindgen! {
    /// public class [SipManager](https://developer.android.com/reference/android/net/sip/SipManager.html)
    ///
    /// Required feature: android-net-sip-SipManager
    public class SipManager ("android/net/sip/SipManager") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [SipManager](https://developer.android.com/reference/android/net/sip/SipManager.html#SipManager(android.content.Context))
        // ///
        // /// Required features: "android-content-Context"
        // #[cfg(any(feature = "all", all(feature = "android-content-Context")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::net::sip::SipManager>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/net/sip/SipManager", java.flags == (empty), .name == "<init>", .descriptor == "(Landroid/content/Context;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/sip/SipManager\0", "<init>\0", "(Landroid/content/Context;)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [newInstance](https://developer.android.com/reference/android/net/sip/SipManager.html#newInstance(android.content.Context))
        ///
        /// Required features: "android-content-Context", "android-net-sip-SipManager"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-net-sip-SipManager")))]
        pub fn newInstance<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::sip::SipManager>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/sip/SipManager", java.flags == PUBLIC | STATIC, .name == "newInstance", .descriptor == "(Landroid/content/Context;)Landroid/net/sip/SipManager;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/net/sip/SipManager\0", "newInstance\0", "(Landroid/content/Context;)Landroid/net/sip/SipManager;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isApiSupported](https://developer.android.com/reference/android/net/sip/SipManager.html#isApiSupported(android.content.Context))
        ///
        /// Required features: "android-content-Context"
        #[cfg(any(feature = "all", all(feature = "android-content-Context")))]
        pub fn isApiSupported<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/sip/SipManager", java.flags == PUBLIC | STATIC, .name == "isApiSupported", .descriptor == "(Landroid/content/Context;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/net/sip/SipManager\0", "isApiSupported\0", "(Landroid/content/Context;)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isVoipSupported](https://developer.android.com/reference/android/net/sip/SipManager.html#isVoipSupported(android.content.Context))
        ///
        /// Required features: "android-content-Context"
        #[cfg(any(feature = "all", all(feature = "android-content-Context")))]
        pub fn isVoipSupported<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/sip/SipManager", java.flags == PUBLIC | STATIC, .name == "isVoipSupported", .descriptor == "(Landroid/content/Context;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/net/sip/SipManager\0", "isVoipSupported\0", "(Landroid/content/Context;)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isSipWifiOnly](https://developer.android.com/reference/android/net/sip/SipManager.html#isSipWifiOnly(android.content.Context))
        ///
        /// Required features: "android-content-Context"
        #[cfg(any(feature = "all", all(feature = "android-content-Context")))]
        pub fn isSipWifiOnly<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/sip/SipManager", java.flags == PUBLIC | STATIC, .name == "isSipWifiOnly", .descriptor == "(Landroid/content/Context;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/net/sip/SipManager\0", "isSipWifiOnly\0", "(Landroid/content/Context;)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [open](https://developer.android.com/reference/android/net/sip/SipManager.html#open(android.net.sip.SipProfile))
        ///
        /// Required features: "android-net-sip-SipProfile"
        #[cfg(any(feature = "all", all(feature = "android-net-sip-SipProfile")))]
        pub fn open_SipProfile<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::sip::SipProfile>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/sip/SipManager", java.flags == PUBLIC, .name == "open", .descriptor == "(Landroid/net/sip/SipProfile;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/sip/SipManager\0", "open\0", "(Landroid/net/sip/SipProfile;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [open](https://developer.android.com/reference/android/net/sip/SipManager.html#open(android.net.sip.SipProfile,%20android.app.PendingIntent,%20android.net.sip.SipRegistrationListener))
        ///
        /// Required features: "android-app-PendingIntent", "android-net-sip-SipProfile", "android-net-sip-SipRegistrationListener"
        #[cfg(any(feature = "all", all(feature = "android-app-PendingIntent", feature = "android-net-sip-SipProfile", feature = "android-net-sip-SipRegistrationListener")))]
        pub fn open_SipProfile_PendingIntent_SipRegistrationListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::sip::SipProfile>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::PendingIntent>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::sip::SipRegistrationListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/sip/SipManager", java.flags == PUBLIC, .name == "open", .descriptor == "(Landroid/net/sip/SipProfile;Landroid/app/PendingIntent;Landroid/net/sip/SipRegistrationListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/sip/SipManager\0", "open\0", "(Landroid/net/sip/SipProfile;Landroid/app/PendingIntent;Landroid/net/sip/SipRegistrationListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setRegistrationListener](https://developer.android.com/reference/android/net/sip/SipManager.html#setRegistrationListener(java.lang.String,%20android.net.sip.SipRegistrationListener))
        ///
        /// Required features: "android-net-sip-SipRegistrationListener", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-sip-SipRegistrationListener", feature = "java-lang-String")))]
        pub fn setRegistrationListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::sip::SipRegistrationListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/sip/SipManager", java.flags == PUBLIC, .name == "setRegistrationListener", .descriptor == "(Ljava/lang/String;Landroid/net/sip/SipRegistrationListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/sip/SipManager\0", "setRegistrationListener\0", "(Ljava/lang/String;Landroid/net/sip/SipRegistrationListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [close](https://developer.android.com/reference/android/net/sip/SipManager.html#close(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn close<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/sip/SipManager", java.flags == PUBLIC, .name == "close", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/sip/SipManager\0", "close\0", "(Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isOpened](https://developer.android.com/reference/android/net/sip/SipManager.html#isOpened(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn isOpened<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/sip/SipManager", java.flags == PUBLIC, .name == "isOpened", .descriptor == "(Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/sip/SipManager\0", "isOpened\0", "(Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isRegistered](https://developer.android.com/reference/android/net/sip/SipManager.html#isRegistered(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn isRegistered<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/sip/SipManager", java.flags == PUBLIC, .name == "isRegistered", .descriptor == "(Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/sip/SipManager\0", "isRegistered\0", "(Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [makeAudioCall](https://developer.android.com/reference/android/net/sip/SipManager.html#makeAudioCall(android.net.sip.SipProfile,%20android.net.sip.SipProfile,%20android.net.sip.SipAudioCall.Listener,%20int))
        ///
        /// Required features: "android-net-sip-SipAudioCall", "android-net-sip-SipAudioCall_Listener", "android-net-sip-SipProfile"
        #[cfg(any(feature = "all", all(feature = "android-net-sip-SipAudioCall", feature = "android-net-sip-SipAudioCall_Listener", feature = "android-net-sip-SipProfile")))]
        pub fn makeAudioCall_SipProfile_SipProfile_Listener_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::sip::SipProfile>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::sip::SipProfile>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::sip::SipAudioCall_Listener>>, arg3: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::sip::SipAudioCall>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/sip/SipManager", java.flags == PUBLIC, .name == "makeAudioCall", .descriptor == "(Landroid/net/sip/SipProfile;Landroid/net/sip/SipProfile;Landroid/net/sip/SipAudioCall$Listener;I)Landroid/net/sip/SipAudioCall;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/sip/SipManager\0", "makeAudioCall\0", "(Landroid/net/sip/SipProfile;Landroid/net/sip/SipProfile;Landroid/net/sip/SipAudioCall$Listener;I)Landroid/net/sip/SipAudioCall;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [makeAudioCall](https://developer.android.com/reference/android/net/sip/SipManager.html#makeAudioCall(java.lang.String,%20java.lang.String,%20android.net.sip.SipAudioCall.Listener,%20int))
        ///
        /// Required features: "android-net-sip-SipAudioCall", "android-net-sip-SipAudioCall_Listener", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-sip-SipAudioCall", feature = "android-net-sip-SipAudioCall_Listener", feature = "java-lang-String")))]
        pub fn makeAudioCall_String_String_Listener_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::sip::SipAudioCall_Listener>>, arg3: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::sip::SipAudioCall>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/sip/SipManager", java.flags == PUBLIC, .name == "makeAudioCall", .descriptor == "(Ljava/lang/String;Ljava/lang/String;Landroid/net/sip/SipAudioCall$Listener;I)Landroid/net/sip/SipAudioCall;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/sip/SipManager\0", "makeAudioCall\0", "(Ljava/lang/String;Ljava/lang/String;Landroid/net/sip/SipAudioCall$Listener;I)Landroid/net/sip/SipAudioCall;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [takeAudioCall](https://developer.android.com/reference/android/net/sip/SipManager.html#takeAudioCall(android.content.Intent,%20android.net.sip.SipAudioCall.Listener))
        ///
        /// Required features: "android-content-Intent", "android-net-sip-SipAudioCall", "android-net-sip-SipAudioCall_Listener"
        #[cfg(any(feature = "all", all(feature = "android-content-Intent", feature = "android-net-sip-SipAudioCall", feature = "android-net-sip-SipAudioCall_Listener")))]
        pub fn takeAudioCall<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::sip::SipAudioCall_Listener>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::sip::SipAudioCall>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/sip/SipManager", java.flags == PUBLIC, .name == "takeAudioCall", .descriptor == "(Landroid/content/Intent;Landroid/net/sip/SipAudioCall$Listener;)Landroid/net/sip/SipAudioCall;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/sip/SipManager\0", "takeAudioCall\0", "(Landroid/content/Intent;Landroid/net/sip/SipAudioCall$Listener;)Landroid/net/sip/SipAudioCall;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isIncomingCallIntent](https://developer.android.com/reference/android/net/sip/SipManager.html#isIncomingCallIntent(android.content.Intent))
        ///
        /// Required features: "android-content-Intent"
        #[cfg(any(feature = "all", all(feature = "android-content-Intent")))]
        pub fn isIncomingCallIntent<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/sip/SipManager", java.flags == PUBLIC | STATIC, .name == "isIncomingCallIntent", .descriptor == "(Landroid/content/Intent;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/net/sip/SipManager\0", "isIncomingCallIntent\0", "(Landroid/content/Intent;)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCallId](https://developer.android.com/reference/android/net/sip/SipManager.html#getCallId(android.content.Intent))
        ///
        /// Required features: "android-content-Intent", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-Intent", feature = "java-lang-String")))]
        pub fn getCallId<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/sip/SipManager", java.flags == PUBLIC | STATIC, .name == "getCallId", .descriptor == "(Landroid/content/Intent;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/net/sip/SipManager\0", "getCallId\0", "(Landroid/content/Intent;)Ljava/lang/String;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getOfferSessionDescription](https://developer.android.com/reference/android/net/sip/SipManager.html#getOfferSessionDescription(android.content.Intent))
        ///
        /// Required features: "android-content-Intent", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-Intent", feature = "java-lang-String")))]
        pub fn getOfferSessionDescription<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/sip/SipManager", java.flags == PUBLIC | STATIC, .name == "getOfferSessionDescription", .descriptor == "(Landroid/content/Intent;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/net/sip/SipManager\0", "getOfferSessionDescription\0", "(Landroid/content/Intent;)Ljava/lang/String;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [register](https://developer.android.com/reference/android/net/sip/SipManager.html#register(android.net.sip.SipProfile,%20int,%20android.net.sip.SipRegistrationListener))
        ///
        /// Required features: "android-net-sip-SipProfile", "android-net-sip-SipRegistrationListener"
        #[cfg(any(feature = "all", all(feature = "android-net-sip-SipProfile", feature = "android-net-sip-SipRegistrationListener")))]
        pub fn register<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::sip::SipProfile>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::sip::SipRegistrationListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/sip/SipManager", java.flags == PUBLIC, .name == "register", .descriptor == "(Landroid/net/sip/SipProfile;ILandroid/net/sip/SipRegistrationListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/sip/SipManager\0", "register\0", "(Landroid/net/sip/SipProfile;ILandroid/net/sip/SipRegistrationListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unregister](https://developer.android.com/reference/android/net/sip/SipManager.html#unregister(android.net.sip.SipProfile,%20android.net.sip.SipRegistrationListener))
        ///
        /// Required features: "android-net-sip-SipProfile", "android-net-sip-SipRegistrationListener"
        #[cfg(any(feature = "all", all(feature = "android-net-sip-SipProfile", feature = "android-net-sip-SipRegistrationListener")))]
        pub fn unregister<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::sip::SipProfile>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::sip::SipRegistrationListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/sip/SipManager", java.flags == PUBLIC, .name == "unregister", .descriptor == "(Landroid/net/sip/SipProfile;Landroid/net/sip/SipRegistrationListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/sip/SipManager\0", "unregister\0", "(Landroid/net/sip/SipProfile;Landroid/net/sip/SipRegistrationListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSessionFor](https://developer.android.com/reference/android/net/sip/SipManager.html#getSessionFor(android.content.Intent))
        ///
        /// Required features: "android-content-Intent", "android-net-sip-SipSession"
        #[cfg(any(feature = "all", all(feature = "android-content-Intent", feature = "android-net-sip-SipSession")))]
        pub fn getSessionFor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::sip::SipSession>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/sip/SipManager", java.flags == PUBLIC, .name == "getSessionFor", .descriptor == "(Landroid/content/Intent;)Landroid/net/sip/SipSession;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/sip/SipManager\0", "getSessionFor\0", "(Landroid/content/Intent;)Landroid/net/sip/SipSession;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createSipSession](https://developer.android.com/reference/android/net/sip/SipManager.html#createSipSession(android.net.sip.SipProfile,%20android.net.sip.SipSession.Listener))
        ///
        /// Required features: "android-net-sip-SipProfile", "android-net-sip-SipSession", "android-net-sip-SipSession_Listener"
        #[cfg(any(feature = "all", all(feature = "android-net-sip-SipProfile", feature = "android-net-sip-SipSession", feature = "android-net-sip-SipSession_Listener")))]
        pub fn createSipSession<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::sip::SipProfile>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::sip::SipSession_Listener>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::sip::SipSession>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/sip/SipManager", java.flags == PUBLIC, .name == "createSipSession", .descriptor == "(Landroid/net/sip/SipProfile;Landroid/net/sip/SipSession$Listener;)Landroid/net/sip/SipSession;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/sip/SipManager\0", "createSipSession\0", "(Landroid/net/sip/SipProfile;Landroid/net/sip/SipSession$Listener;)Landroid/net/sip/SipSession;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [EXTRA_CALL_ID](https://developer.android.com/reference/android/net/sip/SipManager.html#EXTRA_CALL_ID)
        pub const EXTRA_CALL_ID : &'static str = "android:sipCallID";

        /// public static final [EXTRA_OFFER_SD](https://developer.android.com/reference/android/net/sip/SipManager.html#EXTRA_OFFER_SD)
        pub const EXTRA_OFFER_SD : &'static str = "android:sipOfferSD";

        /// public static final [INCOMING_CALL_RESULT_CODE](https://developer.android.com/reference/android/net/sip/SipManager.html#INCOMING_CALL_RESULT_CODE)
        pub const INCOMING_CALL_RESULT_CODE : i32 = 101;
    }
}
