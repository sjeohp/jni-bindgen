// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-net-sip-SipAudioCall_Listener"))]
__jni_bindgen! {
    /// public class [SipAudioCall.Listener](https://developer.android.com/reference/android/net/sip/SipAudioCall.Listener.html)
    ///
    /// Required feature: android-net-sip-SipAudioCall_Listener
    public class SipAudioCall_Listener ("android/net/sip/SipAudioCall$Listener") extends crate::java::lang::Object {

        /// [Listener](https://developer.android.com/reference/android/net/sip/SipAudioCall.Listener.html#Listener())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::net::sip::SipAudioCall_Listener>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/sip/SipAudioCall$Listener", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/sip/SipAudioCall$Listener\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onReadyToCall](https://developer.android.com/reference/android/net/sip/SipAudioCall.Listener.html#onReadyToCall(android.net.sip.SipAudioCall))
        ///
        /// Required features: "android-net-sip-SipAudioCall"
        #[cfg(any(feature = "all", all(feature = "android-net-sip-SipAudioCall")))]
        pub fn onReadyToCall<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::sip::SipAudioCall>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/sip/SipAudioCall$Listener", java.flags == PUBLIC, .name == "onReadyToCall", .descriptor == "(Landroid/net/sip/SipAudioCall;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/sip/SipAudioCall$Listener\0", "onReadyToCall\0", "(Landroid/net/sip/SipAudioCall;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onCalling](https://developer.android.com/reference/android/net/sip/SipAudioCall.Listener.html#onCalling(android.net.sip.SipAudioCall))
        ///
        /// Required features: "android-net-sip-SipAudioCall"
        #[cfg(any(feature = "all", all(feature = "android-net-sip-SipAudioCall")))]
        pub fn onCalling<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::sip::SipAudioCall>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/sip/SipAudioCall$Listener", java.flags == PUBLIC, .name == "onCalling", .descriptor == "(Landroid/net/sip/SipAudioCall;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/sip/SipAudioCall$Listener\0", "onCalling\0", "(Landroid/net/sip/SipAudioCall;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onRinging](https://developer.android.com/reference/android/net/sip/SipAudioCall.Listener.html#onRinging(android.net.sip.SipAudioCall,%20android.net.sip.SipProfile))
        ///
        /// Required features: "android-net-sip-SipAudioCall", "android-net-sip-SipProfile"
        #[cfg(any(feature = "all", all(feature = "android-net-sip-SipAudioCall", feature = "android-net-sip-SipProfile")))]
        pub fn onRinging<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::sip::SipAudioCall>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::sip::SipProfile>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/sip/SipAudioCall$Listener", java.flags == PUBLIC, .name == "onRinging", .descriptor == "(Landroid/net/sip/SipAudioCall;Landroid/net/sip/SipProfile;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/sip/SipAudioCall$Listener\0", "onRinging\0", "(Landroid/net/sip/SipAudioCall;Landroid/net/sip/SipProfile;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onRingingBack](https://developer.android.com/reference/android/net/sip/SipAudioCall.Listener.html#onRingingBack(android.net.sip.SipAudioCall))
        ///
        /// Required features: "android-net-sip-SipAudioCall"
        #[cfg(any(feature = "all", all(feature = "android-net-sip-SipAudioCall")))]
        pub fn onRingingBack<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::sip::SipAudioCall>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/sip/SipAudioCall$Listener", java.flags == PUBLIC, .name == "onRingingBack", .descriptor == "(Landroid/net/sip/SipAudioCall;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/sip/SipAudioCall$Listener\0", "onRingingBack\0", "(Landroid/net/sip/SipAudioCall;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onCallEstablished](https://developer.android.com/reference/android/net/sip/SipAudioCall.Listener.html#onCallEstablished(android.net.sip.SipAudioCall))
        ///
        /// Required features: "android-net-sip-SipAudioCall"
        #[cfg(any(feature = "all", all(feature = "android-net-sip-SipAudioCall")))]
        pub fn onCallEstablished<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::sip::SipAudioCall>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/sip/SipAudioCall$Listener", java.flags == PUBLIC, .name == "onCallEstablished", .descriptor == "(Landroid/net/sip/SipAudioCall;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/sip/SipAudioCall$Listener\0", "onCallEstablished\0", "(Landroid/net/sip/SipAudioCall;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onCallEnded](https://developer.android.com/reference/android/net/sip/SipAudioCall.Listener.html#onCallEnded(android.net.sip.SipAudioCall))
        ///
        /// Required features: "android-net-sip-SipAudioCall"
        #[cfg(any(feature = "all", all(feature = "android-net-sip-SipAudioCall")))]
        pub fn onCallEnded<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::sip::SipAudioCall>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/sip/SipAudioCall$Listener", java.flags == PUBLIC, .name == "onCallEnded", .descriptor == "(Landroid/net/sip/SipAudioCall;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/sip/SipAudioCall$Listener\0", "onCallEnded\0", "(Landroid/net/sip/SipAudioCall;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onCallBusy](https://developer.android.com/reference/android/net/sip/SipAudioCall.Listener.html#onCallBusy(android.net.sip.SipAudioCall))
        ///
        /// Required features: "android-net-sip-SipAudioCall"
        #[cfg(any(feature = "all", all(feature = "android-net-sip-SipAudioCall")))]
        pub fn onCallBusy<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::sip::SipAudioCall>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/sip/SipAudioCall$Listener", java.flags == PUBLIC, .name == "onCallBusy", .descriptor == "(Landroid/net/sip/SipAudioCall;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/sip/SipAudioCall$Listener\0", "onCallBusy\0", "(Landroid/net/sip/SipAudioCall;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onCallHeld](https://developer.android.com/reference/android/net/sip/SipAudioCall.Listener.html#onCallHeld(android.net.sip.SipAudioCall))
        ///
        /// Required features: "android-net-sip-SipAudioCall"
        #[cfg(any(feature = "all", all(feature = "android-net-sip-SipAudioCall")))]
        pub fn onCallHeld<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::sip::SipAudioCall>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/sip/SipAudioCall$Listener", java.flags == PUBLIC, .name == "onCallHeld", .descriptor == "(Landroid/net/sip/SipAudioCall;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/sip/SipAudioCall$Listener\0", "onCallHeld\0", "(Landroid/net/sip/SipAudioCall;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onError](https://developer.android.com/reference/android/net/sip/SipAudioCall.Listener.html#onError(android.net.sip.SipAudioCall,%20int,%20java.lang.String))
        ///
        /// Required features: "android-net-sip-SipAudioCall", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-sip-SipAudioCall", feature = "java-lang-String")))]
        pub fn onError<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::sip::SipAudioCall>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/sip/SipAudioCall$Listener", java.flags == PUBLIC, .name == "onError", .descriptor == "(Landroid/net/sip/SipAudioCall;ILjava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/sip/SipAudioCall$Listener\0", "onError\0", "(Landroid/net/sip/SipAudioCall;ILjava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onChanged](https://developer.android.com/reference/android/net/sip/SipAudioCall.Listener.html#onChanged(android.net.sip.SipAudioCall))
        ///
        /// Required features: "android-net-sip-SipAudioCall"
        #[cfg(any(feature = "all", all(feature = "android-net-sip-SipAudioCall")))]
        pub fn onChanged<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::sip::SipAudioCall>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/sip/SipAudioCall$Listener", java.flags == PUBLIC, .name == "onChanged", .descriptor == "(Landroid/net/sip/SipAudioCall;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/sip/SipAudioCall$Listener\0", "onChanged\0", "(Landroid/net/sip/SipAudioCall;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
