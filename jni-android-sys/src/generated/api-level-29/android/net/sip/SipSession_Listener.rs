// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-net-sip-SipSession_Listener"))]
__jni_bindgen! {
    /// public class [SipSession.Listener](https://developer.android.com/reference/android/net/sip/SipSession.Listener.html)
    ///
    /// Required feature: android-net-sip-SipSession_Listener
    public class SipSession_Listener ("android/net/sip/SipSession$Listener") extends crate::java::lang::Object {

        /// [Listener](https://developer.android.com/reference/android/net/sip/SipSession.Listener.html#Listener())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::net::sip::SipSession_Listener>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/sip/SipSession$Listener", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/sip/SipSession$Listener\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onCalling](https://developer.android.com/reference/android/net/sip/SipSession.Listener.html#onCalling(android.net.sip.SipSession))
        ///
        /// Required features: "android-net-sip-SipSession"
        #[cfg(any(feature = "all", all(feature = "android-net-sip-SipSession")))]
        pub fn onCalling<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::sip::SipSession>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/sip/SipSession$Listener", java.flags == PUBLIC, .name == "onCalling", .descriptor == "(Landroid/net/sip/SipSession;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/sip/SipSession$Listener\0", "onCalling\0", "(Landroid/net/sip/SipSession;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onRinging](https://developer.android.com/reference/android/net/sip/SipSession.Listener.html#onRinging(android.net.sip.SipSession,%20android.net.sip.SipProfile,%20java.lang.String))
        ///
        /// Required features: "android-net-sip-SipProfile", "android-net-sip-SipSession", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-sip-SipProfile", feature = "android-net-sip-SipSession", feature = "java-lang-String")))]
        pub fn onRinging<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::sip::SipSession>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::sip::SipProfile>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/sip/SipSession$Listener", java.flags == PUBLIC, .name == "onRinging", .descriptor == "(Landroid/net/sip/SipSession;Landroid/net/sip/SipProfile;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/sip/SipSession$Listener\0", "onRinging\0", "(Landroid/net/sip/SipSession;Landroid/net/sip/SipProfile;Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onRingingBack](https://developer.android.com/reference/android/net/sip/SipSession.Listener.html#onRingingBack(android.net.sip.SipSession))
        ///
        /// Required features: "android-net-sip-SipSession"
        #[cfg(any(feature = "all", all(feature = "android-net-sip-SipSession")))]
        pub fn onRingingBack<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::sip::SipSession>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/sip/SipSession$Listener", java.flags == PUBLIC, .name == "onRingingBack", .descriptor == "(Landroid/net/sip/SipSession;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/sip/SipSession$Listener\0", "onRingingBack\0", "(Landroid/net/sip/SipSession;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onCallEstablished](https://developer.android.com/reference/android/net/sip/SipSession.Listener.html#onCallEstablished(android.net.sip.SipSession,%20java.lang.String))
        ///
        /// Required features: "android-net-sip-SipSession", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-sip-SipSession", feature = "java-lang-String")))]
        pub fn onCallEstablished<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::sip::SipSession>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/sip/SipSession$Listener", java.flags == PUBLIC, .name == "onCallEstablished", .descriptor == "(Landroid/net/sip/SipSession;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/sip/SipSession$Listener\0", "onCallEstablished\0", "(Landroid/net/sip/SipSession;Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onCallEnded](https://developer.android.com/reference/android/net/sip/SipSession.Listener.html#onCallEnded(android.net.sip.SipSession))
        ///
        /// Required features: "android-net-sip-SipSession"
        #[cfg(any(feature = "all", all(feature = "android-net-sip-SipSession")))]
        pub fn onCallEnded<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::sip::SipSession>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/sip/SipSession$Listener", java.flags == PUBLIC, .name == "onCallEnded", .descriptor == "(Landroid/net/sip/SipSession;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/sip/SipSession$Listener\0", "onCallEnded\0", "(Landroid/net/sip/SipSession;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onCallBusy](https://developer.android.com/reference/android/net/sip/SipSession.Listener.html#onCallBusy(android.net.sip.SipSession))
        ///
        /// Required features: "android-net-sip-SipSession"
        #[cfg(any(feature = "all", all(feature = "android-net-sip-SipSession")))]
        pub fn onCallBusy<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::sip::SipSession>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/sip/SipSession$Listener", java.flags == PUBLIC, .name == "onCallBusy", .descriptor == "(Landroid/net/sip/SipSession;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/sip/SipSession$Listener\0", "onCallBusy\0", "(Landroid/net/sip/SipSession;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onError](https://developer.android.com/reference/android/net/sip/SipSession.Listener.html#onError(android.net.sip.SipSession,%20int,%20java.lang.String))
        ///
        /// Required features: "android-net-sip-SipSession", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-sip-SipSession", feature = "java-lang-String")))]
        pub fn onError<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::sip::SipSession>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/sip/SipSession$Listener", java.flags == PUBLIC, .name == "onError", .descriptor == "(Landroid/net/sip/SipSession;ILjava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/sip/SipSession$Listener\0", "onError\0", "(Landroid/net/sip/SipSession;ILjava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onCallChangeFailed](https://developer.android.com/reference/android/net/sip/SipSession.Listener.html#onCallChangeFailed(android.net.sip.SipSession,%20int,%20java.lang.String))
        ///
        /// Required features: "android-net-sip-SipSession", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-sip-SipSession", feature = "java-lang-String")))]
        pub fn onCallChangeFailed<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::sip::SipSession>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/sip/SipSession$Listener", java.flags == PUBLIC, .name == "onCallChangeFailed", .descriptor == "(Landroid/net/sip/SipSession;ILjava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/sip/SipSession$Listener\0", "onCallChangeFailed\0", "(Landroid/net/sip/SipSession;ILjava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onRegistering](https://developer.android.com/reference/android/net/sip/SipSession.Listener.html#onRegistering(android.net.sip.SipSession))
        ///
        /// Required features: "android-net-sip-SipSession"
        #[cfg(any(feature = "all", all(feature = "android-net-sip-SipSession")))]
        pub fn onRegistering<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::sip::SipSession>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/sip/SipSession$Listener", java.flags == PUBLIC, .name == "onRegistering", .descriptor == "(Landroid/net/sip/SipSession;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/sip/SipSession$Listener\0", "onRegistering\0", "(Landroid/net/sip/SipSession;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onRegistrationDone](https://developer.android.com/reference/android/net/sip/SipSession.Listener.html#onRegistrationDone(android.net.sip.SipSession,%20int))
        ///
        /// Required features: "android-net-sip-SipSession"
        #[cfg(any(feature = "all", all(feature = "android-net-sip-SipSession")))]
        pub fn onRegistrationDone<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::sip::SipSession>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/sip/SipSession$Listener", java.flags == PUBLIC, .name == "onRegistrationDone", .descriptor == "(Landroid/net/sip/SipSession;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/sip/SipSession$Listener\0", "onRegistrationDone\0", "(Landroid/net/sip/SipSession;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onRegistrationFailed](https://developer.android.com/reference/android/net/sip/SipSession.Listener.html#onRegistrationFailed(android.net.sip.SipSession,%20int,%20java.lang.String))
        ///
        /// Required features: "android-net-sip-SipSession", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-sip-SipSession", feature = "java-lang-String")))]
        pub fn onRegistrationFailed<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::sip::SipSession>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/sip/SipSession$Listener", java.flags == PUBLIC, .name == "onRegistrationFailed", .descriptor == "(Landroid/net/sip/SipSession;ILjava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/sip/SipSession$Listener\0", "onRegistrationFailed\0", "(Landroid/net/sip/SipSession;ILjava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onRegistrationTimeout](https://developer.android.com/reference/android/net/sip/SipSession.Listener.html#onRegistrationTimeout(android.net.sip.SipSession))
        ///
        /// Required features: "android-net-sip-SipSession"
        #[cfg(any(feature = "all", all(feature = "android-net-sip-SipSession")))]
        pub fn onRegistrationTimeout<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::sip::SipSession>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/sip/SipSession$Listener", java.flags == PUBLIC, .name == "onRegistrationTimeout", .descriptor == "(Landroid/net/sip/SipSession;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/sip/SipSession$Listener\0", "onRegistrationTimeout\0", "(Landroid/net/sip/SipSession;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
