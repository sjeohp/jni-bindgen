// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-net-rtp-AudioStream"))]
__jni_bindgen! {
    /// public class [AudioStream](https://developer.android.com/reference/android/net/rtp/AudioStream.html)
    ///
    /// Required feature: android-net-rtp-AudioStream
    public class AudioStream ("android/net/rtp/AudioStream") extends crate::android::net::rtp::RtpStream {

        /// [AudioStream](https://developer.android.com/reference/android/net/rtp/AudioStream.html#AudioStream(java.net.InetAddress))
        ///
        /// Required features: "java-net-InetAddress"
        #[cfg(any(feature = "all", all(feature = "java-net-InetAddress")))]
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::net::InetAddress>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::net::rtp::AudioStream>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/rtp/AudioStream", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/net/InetAddress;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/rtp/AudioStream\0", "<init>\0", "(Ljava/net/InetAddress;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isBusy](https://developer.android.com/reference/android/net/rtp/AudioStream.html#isBusy())
        pub fn isBusy<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/rtp/AudioStream", java.flags == PUBLIC | FINAL, .name == "isBusy", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/rtp/AudioStream\0", "isBusy\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getGroup](https://developer.android.com/reference/android/net/rtp/AudioStream.html#getGroup())
        ///
        /// Required features: "android-net-rtp-AudioGroup"
        #[cfg(any(feature = "all", all(feature = "android-net-rtp-AudioGroup")))]
        pub fn getGroup<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::rtp::AudioGroup>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/rtp/AudioStream", java.flags == PUBLIC, .name == "getGroup", .descriptor == "()Landroid/net/rtp/AudioGroup;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/rtp/AudioStream\0", "getGroup\0", "()Landroid/net/rtp/AudioGroup;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [join](https://developer.android.com/reference/android/net/rtp/AudioStream.html#join(android.net.rtp.AudioGroup))
        ///
        /// Required features: "android-net-rtp-AudioGroup"
        #[cfg(any(feature = "all", all(feature = "android-net-rtp-AudioGroup")))]
        pub fn join<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::rtp::AudioGroup>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/rtp/AudioStream", java.flags == PUBLIC, .name == "join", .descriptor == "(Landroid/net/rtp/AudioGroup;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/rtp/AudioStream\0", "join\0", "(Landroid/net/rtp/AudioGroup;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCodec](https://developer.android.com/reference/android/net/rtp/AudioStream.html#getCodec())
        ///
        /// Required features: "android-net-rtp-AudioCodec"
        #[cfg(any(feature = "all", all(feature = "android-net-rtp-AudioCodec")))]
        pub fn getCodec<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::rtp::AudioCodec>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/rtp/AudioStream", java.flags == PUBLIC, .name == "getCodec", .descriptor == "()Landroid/net/rtp/AudioCodec;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/rtp/AudioStream\0", "getCodec\0", "()Landroid/net/rtp/AudioCodec;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setCodec](https://developer.android.com/reference/android/net/rtp/AudioStream.html#setCodec(android.net.rtp.AudioCodec))
        ///
        /// Required features: "android-net-rtp-AudioCodec"
        #[cfg(any(feature = "all", all(feature = "android-net-rtp-AudioCodec")))]
        pub fn setCodec<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::rtp::AudioCodec>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/rtp/AudioStream", java.flags == PUBLIC, .name == "setCodec", .descriptor == "(Landroid/net/rtp/AudioCodec;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/rtp/AudioStream\0", "setCodec\0", "(Landroid/net/rtp/AudioCodec;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDtmfType](https://developer.android.com/reference/android/net/rtp/AudioStream.html#getDtmfType())
        pub fn getDtmfType<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/rtp/AudioStream", java.flags == PUBLIC, .name == "getDtmfType", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/rtp/AudioStream\0", "getDtmfType\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDtmfType](https://developer.android.com/reference/android/net/rtp/AudioStream.html#setDtmfType(int))
        pub fn setDtmfType<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/rtp/AudioStream", java.flags == PUBLIC, .name == "setDtmfType", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/rtp/AudioStream\0", "setDtmfType\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
