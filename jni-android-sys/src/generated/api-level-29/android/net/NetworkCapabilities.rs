// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-net-NetworkCapabilities"))]
__jni_bindgen! {
    /// public final class [NetworkCapabilities](https://developer.android.com/reference/android/net/NetworkCapabilities.html)
    ///
    /// Required feature: android-net-NetworkCapabilities
    public final class NetworkCapabilities ("android/net/NetworkCapabilities") extends crate::java::lang::Object, implements crate::android::os::Parcelable {

        /// [NetworkCapabilities](https://developer.android.com/reference/android/net/NetworkCapabilities.html#NetworkCapabilities(android.net.NetworkCapabilities))
        ///
        /// Required features: "android-net-NetworkCapabilities"
        #[cfg(any(feature = "all", all(feature = "android-net-NetworkCapabilities")))]
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::NetworkCapabilities>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::net::NetworkCapabilities>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/NetworkCapabilities", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/net/NetworkCapabilities;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/NetworkCapabilities\0", "<init>\0", "(Landroid/net/NetworkCapabilities;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasCapability](https://developer.android.com/reference/android/net/NetworkCapabilities.html#hasCapability(int))
        pub fn hasCapability<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/NetworkCapabilities", java.flags == PUBLIC, .name == "hasCapability", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/NetworkCapabilities\0", "hasCapability\0", "(I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasTransport](https://developer.android.com/reference/android/net/NetworkCapabilities.html#hasTransport(int))
        pub fn hasTransport<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/NetworkCapabilities", java.flags == PUBLIC, .name == "hasTransport", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/NetworkCapabilities\0", "hasTransport\0", "(I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLinkUpstreamBandwidthKbps](https://developer.android.com/reference/android/net/NetworkCapabilities.html#getLinkUpstreamBandwidthKbps())
        pub fn getLinkUpstreamBandwidthKbps<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/NetworkCapabilities", java.flags == PUBLIC, .name == "getLinkUpstreamBandwidthKbps", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/NetworkCapabilities\0", "getLinkUpstreamBandwidthKbps\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLinkDownstreamBandwidthKbps](https://developer.android.com/reference/android/net/NetworkCapabilities.html#getLinkDownstreamBandwidthKbps())
        pub fn getLinkDownstreamBandwidthKbps<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/NetworkCapabilities", java.flags == PUBLIC, .name == "getLinkDownstreamBandwidthKbps", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/NetworkCapabilities\0", "getLinkDownstreamBandwidthKbps\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTransportInfo](https://developer.android.com/reference/android/net/NetworkCapabilities.html#getTransportInfo())
        ///
        /// Required features: "android-net-TransportInfo"
        #[cfg(any(feature = "all", all(feature = "android-net-TransportInfo")))]
        pub fn getTransportInfo<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::TransportInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/NetworkCapabilities", java.flags == PUBLIC, .name == "getTransportInfo", .descriptor == "()Landroid/net/TransportInfo;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/NetworkCapabilities\0", "getTransportInfo\0", "()Landroid/net/TransportInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSignalStrength](https://developer.android.com/reference/android/net/NetworkCapabilities.html#getSignalStrength())
        pub fn getSignalStrength<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/NetworkCapabilities", java.flags == PUBLIC, .name == "getSignalStrength", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/NetworkCapabilities\0", "getSignalStrength\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [equals](https://developer.android.com/reference/android/net/NetworkCapabilities.html#equals(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn equals<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/NetworkCapabilities", java.flags == PUBLIC, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/NetworkCapabilities\0", "equals\0", "(Ljava/lang/Object;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hashCode](https://developer.android.com/reference/android/net/NetworkCapabilities.html#hashCode())
        pub fn hashCode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/NetworkCapabilities", java.flags == PUBLIC, .name == "hashCode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/NetworkCapabilities\0", "hashCode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [describeContents](https://developer.android.com/reference/android/net/NetworkCapabilities.html#describeContents())
        pub fn describeContents<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/NetworkCapabilities", java.flags == PUBLIC, .name == "describeContents", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/NetworkCapabilities\0", "describeContents\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [writeToParcel](https://developer.android.com/reference/android/net/NetworkCapabilities.html#writeToParcel(android.os.Parcel,%20int))
        ///
        /// Required features: "android-os-Parcel"
        #[cfg(any(feature = "all", all(feature = "android-os-Parcel")))]
        pub fn writeToParcel<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Parcel>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/NetworkCapabilities", java.flags == PUBLIC, .name == "writeToParcel", .descriptor == "(Landroid/os/Parcel;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/NetworkCapabilities\0", "writeToParcel\0", "(Landroid/os/Parcel;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/android/net/NetworkCapabilities.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/NetworkCapabilities", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/NetworkCapabilities\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// **get** public static final [CREATOR](https://developer.android.com/reference/android/net/NetworkCapabilities.html#CREATOR)
        ///
        /// Required feature: android-os-Parcelable_Creator
        #[cfg(any(feature = "all", feature = "android-os-Parcelable_Creator"))]
        pub fn CREATOR<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Parcelable_Creator>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/net/NetworkCapabilities\0", "CREATOR\0", "Landroid/os/Parcelable$Creator;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// public static final [NET_CAPABILITY_CAPTIVE_PORTAL](https://developer.android.com/reference/android/net/NetworkCapabilities.html#NET_CAPABILITY_CAPTIVE_PORTAL)
        pub const NET_CAPABILITY_CAPTIVE_PORTAL : i32 = 17;

        /// public static final [NET_CAPABILITY_CBS](https://developer.android.com/reference/android/net/NetworkCapabilities.html#NET_CAPABILITY_CBS)
        pub const NET_CAPABILITY_CBS : i32 = 5;

        /// public static final [NET_CAPABILITY_DUN](https://developer.android.com/reference/android/net/NetworkCapabilities.html#NET_CAPABILITY_DUN)
        pub const NET_CAPABILITY_DUN : i32 = 2;

        /// public static final [NET_CAPABILITY_EIMS](https://developer.android.com/reference/android/net/NetworkCapabilities.html#NET_CAPABILITY_EIMS)
        pub const NET_CAPABILITY_EIMS : i32 = 10;

        /// public static final [NET_CAPABILITY_FOREGROUND](https://developer.android.com/reference/android/net/NetworkCapabilities.html#NET_CAPABILITY_FOREGROUND)
        pub const NET_CAPABILITY_FOREGROUND : i32 = 19;

        /// public static final [NET_CAPABILITY_FOTA](https://developer.android.com/reference/android/net/NetworkCapabilities.html#NET_CAPABILITY_FOTA)
        pub const NET_CAPABILITY_FOTA : i32 = 3;

        /// public static final [NET_CAPABILITY_IA](https://developer.android.com/reference/android/net/NetworkCapabilities.html#NET_CAPABILITY_IA)
        pub const NET_CAPABILITY_IA : i32 = 7;

        /// public static final [NET_CAPABILITY_IMS](https://developer.android.com/reference/android/net/NetworkCapabilities.html#NET_CAPABILITY_IMS)
        pub const NET_CAPABILITY_IMS : i32 = 4;

        /// public static final [NET_CAPABILITY_INTERNET](https://developer.android.com/reference/android/net/NetworkCapabilities.html#NET_CAPABILITY_INTERNET)
        pub const NET_CAPABILITY_INTERNET : i32 = 12;

        /// public static final [NET_CAPABILITY_MCX](https://developer.android.com/reference/android/net/NetworkCapabilities.html#NET_CAPABILITY_MCX)
        pub const NET_CAPABILITY_MCX : i32 = 23;

        /// public static final [NET_CAPABILITY_MMS](https://developer.android.com/reference/android/net/NetworkCapabilities.html#NET_CAPABILITY_MMS)
        pub const NET_CAPABILITY_MMS : i32 = 0;

        /// public static final [NET_CAPABILITY_NOT_CONGESTED](https://developer.android.com/reference/android/net/NetworkCapabilities.html#NET_CAPABILITY_NOT_CONGESTED)
        pub const NET_CAPABILITY_NOT_CONGESTED : i32 = 20;

        /// public static final [NET_CAPABILITY_NOT_METERED](https://developer.android.com/reference/android/net/NetworkCapabilities.html#NET_CAPABILITY_NOT_METERED)
        pub const NET_CAPABILITY_NOT_METERED : i32 = 11;

        /// public static final [NET_CAPABILITY_NOT_RESTRICTED](https://developer.android.com/reference/android/net/NetworkCapabilities.html#NET_CAPABILITY_NOT_RESTRICTED)
        pub const NET_CAPABILITY_NOT_RESTRICTED : i32 = 13;

        /// public static final [NET_CAPABILITY_NOT_ROAMING](https://developer.android.com/reference/android/net/NetworkCapabilities.html#NET_CAPABILITY_NOT_ROAMING)
        pub const NET_CAPABILITY_NOT_ROAMING : i32 = 18;

        /// public static final [NET_CAPABILITY_NOT_SUSPENDED](https://developer.android.com/reference/android/net/NetworkCapabilities.html#NET_CAPABILITY_NOT_SUSPENDED)
        pub const NET_CAPABILITY_NOT_SUSPENDED : i32 = 21;

        /// public static final [NET_CAPABILITY_NOT_VPN](https://developer.android.com/reference/android/net/NetworkCapabilities.html#NET_CAPABILITY_NOT_VPN)
        pub const NET_CAPABILITY_NOT_VPN : i32 = 15;

        /// public static final [NET_CAPABILITY_RCS](https://developer.android.com/reference/android/net/NetworkCapabilities.html#NET_CAPABILITY_RCS)
        pub const NET_CAPABILITY_RCS : i32 = 8;

        /// public static final [NET_CAPABILITY_SUPL](https://developer.android.com/reference/android/net/NetworkCapabilities.html#NET_CAPABILITY_SUPL)
        pub const NET_CAPABILITY_SUPL : i32 = 1;

        /// public static final [NET_CAPABILITY_TRUSTED](https://developer.android.com/reference/android/net/NetworkCapabilities.html#NET_CAPABILITY_TRUSTED)
        pub const NET_CAPABILITY_TRUSTED : i32 = 14;

        /// public static final [NET_CAPABILITY_VALIDATED](https://developer.android.com/reference/android/net/NetworkCapabilities.html#NET_CAPABILITY_VALIDATED)
        pub const NET_CAPABILITY_VALIDATED : i32 = 16;

        /// public static final [NET_CAPABILITY_WIFI_P2P](https://developer.android.com/reference/android/net/NetworkCapabilities.html#NET_CAPABILITY_WIFI_P2P)
        pub const NET_CAPABILITY_WIFI_P2P : i32 = 6;

        /// public static final [NET_CAPABILITY_XCAP](https://developer.android.com/reference/android/net/NetworkCapabilities.html#NET_CAPABILITY_XCAP)
        pub const NET_CAPABILITY_XCAP : i32 = 9;

        /// public static final [SIGNAL_STRENGTH_UNSPECIFIED](https://developer.android.com/reference/android/net/NetworkCapabilities.html#SIGNAL_STRENGTH_UNSPECIFIED)
        pub const SIGNAL_STRENGTH_UNSPECIFIED : i32 = -2147483648;

        /// public static final [TRANSPORT_BLUETOOTH](https://developer.android.com/reference/android/net/NetworkCapabilities.html#TRANSPORT_BLUETOOTH)
        pub const TRANSPORT_BLUETOOTH : i32 = 2;

        /// public static final [TRANSPORT_CELLULAR](https://developer.android.com/reference/android/net/NetworkCapabilities.html#TRANSPORT_CELLULAR)
        pub const TRANSPORT_CELLULAR : i32 = 0;

        /// public static final [TRANSPORT_ETHERNET](https://developer.android.com/reference/android/net/NetworkCapabilities.html#TRANSPORT_ETHERNET)
        pub const TRANSPORT_ETHERNET : i32 = 3;

        /// public static final [TRANSPORT_LOWPAN](https://developer.android.com/reference/android/net/NetworkCapabilities.html#TRANSPORT_LOWPAN)
        pub const TRANSPORT_LOWPAN : i32 = 6;

        /// public static final [TRANSPORT_VPN](https://developer.android.com/reference/android/net/NetworkCapabilities.html#TRANSPORT_VPN)
        pub const TRANSPORT_VPN : i32 = 4;

        /// public static final [TRANSPORT_WIFI](https://developer.android.com/reference/android/net/NetworkCapabilities.html#TRANSPORT_WIFI)
        pub const TRANSPORT_WIFI : i32 = 1;

        /// public static final [TRANSPORT_WIFI_AWARE](https://developer.android.com/reference/android/net/NetworkCapabilities.html#TRANSPORT_WIFI_AWARE)
        pub const TRANSPORT_WIFI_AWARE : i32 = 5;
    }
}
