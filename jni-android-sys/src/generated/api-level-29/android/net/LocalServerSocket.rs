// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-net-LocalServerSocket"))]
__jni_bindgen! {
    /// public class [LocalServerSocket](https://developer.android.com/reference/android/net/LocalServerSocket.html)
    ///
    /// Required feature: android-net-LocalServerSocket
    public class LocalServerSocket ("android/net/LocalServerSocket") extends crate::java::lang::Object, implements crate::java::io::Closeable {

        /// [LocalServerSocket](https://developer.android.com/reference/android/net/LocalServerSocket.html#LocalServerSocket(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn new_String<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::net::LocalServerSocket>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/LocalServerSocket", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/LocalServerSocket\0", "<init>\0", "(Ljava/lang/String;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [LocalServerSocket](https://developer.android.com/reference/android/net/LocalServerSocket.html#LocalServerSocket(java.io.FileDescriptor))
        ///
        /// Required features: "java-io-FileDescriptor"
        #[cfg(any(feature = "all", all(feature = "java-io-FileDescriptor")))]
        pub fn new_FileDescriptor<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::FileDescriptor>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::net::LocalServerSocket>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/LocalServerSocket", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/io/FileDescriptor;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/LocalServerSocket\0", "<init>\0", "(Ljava/io/FileDescriptor;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLocalSocketAddress](https://developer.android.com/reference/android/net/LocalServerSocket.html#getLocalSocketAddress())
        ///
        /// Required features: "android-net-LocalSocketAddress"
        #[cfg(any(feature = "all", all(feature = "android-net-LocalSocketAddress")))]
        pub fn getLocalSocketAddress<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::LocalSocketAddress>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/LocalServerSocket", java.flags == PUBLIC, .name == "getLocalSocketAddress", .descriptor == "()Landroid/net/LocalSocketAddress;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/LocalServerSocket\0", "getLocalSocketAddress\0", "()Landroid/net/LocalSocketAddress;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [accept](https://developer.android.com/reference/android/net/LocalServerSocket.html#accept())
        ///
        /// Required features: "android-net-LocalSocket"
        #[cfg(any(feature = "all", all(feature = "android-net-LocalSocket")))]
        pub fn accept<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::LocalSocket>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/LocalServerSocket", java.flags == PUBLIC, .name == "accept", .descriptor == "()Landroid/net/LocalSocket;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/LocalServerSocket\0", "accept\0", "()Landroid/net/LocalSocket;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFileDescriptor](https://developer.android.com/reference/android/net/LocalServerSocket.html#getFileDescriptor())
        ///
        /// Required features: "java-io-FileDescriptor"
        #[cfg(any(feature = "all", all(feature = "java-io-FileDescriptor")))]
        pub fn getFileDescriptor<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::io::FileDescriptor>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/LocalServerSocket", java.flags == PUBLIC, .name == "getFileDescriptor", .descriptor == "()Ljava/io/FileDescriptor;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/LocalServerSocket\0", "getFileDescriptor\0", "()Ljava/io/FileDescriptor;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [close](https://developer.android.com/reference/android/net/LocalServerSocket.html#close())
        pub fn close<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/LocalServerSocket", java.flags == PUBLIC, .name == "close", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/LocalServerSocket\0", "close\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
