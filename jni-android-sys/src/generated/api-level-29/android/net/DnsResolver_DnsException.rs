// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-net-DnsResolver_DnsException"))]
__jni_bindgen! {
    /// public class [DnsResolver.DnsException](https://developer.android.com/reference/android/net/DnsResolver.DnsException.html)
    ///
    /// Required feature: android-net-DnsResolver_DnsException
    public class DnsResolver_DnsException ("android/net/DnsResolver$DnsException") extends crate::java::lang::Exception {

        // // Not emitting: Non-public method
        // /// [DnsException](https://developer.android.com/reference/android/net/DnsResolver.DnsException.html#DnsException(int,%20java.lang.Throwable))
        // ///
        // /// Required features: "java-lang-Throwable"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Throwable")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Throwable>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::net::DnsResolver_DnsException>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/net/DnsResolver$DnsException", java.flags == (empty), .name == "<init>", .descriptor == "(ILjava/lang/Throwable;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/DnsResolver$DnsException\0", "<init>\0", "(ILjava/lang/Throwable;)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// **get** public final [code](https://developer.android.com/reference/android/net/DnsResolver.DnsException.html#code)
        pub fn code<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/net/DnsResolver$DnsException\0", "code\0", "I\0");
                env.get_int_field(class, field)
            }
        }
    }
}
