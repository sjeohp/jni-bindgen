// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-net-http-SslError"))]
__jni_bindgen! {
    /// public class [SslError](https://developer.android.com/reference/android/net/http/SslError.html)
    ///
    /// Required feature: android-net-http-SslError
    public class SslError ("android/net/http/SslError") extends crate::java::lang::Object {

        /// [SslError](https://developer.android.com/reference/android/net/http/SslError.html#SslError(int,%20android.net.http.SslCertificate))
        ///
        /// Required features: "android-net-http-SslCertificate"
        #[cfg(any(feature = "all", all(feature = "android-net-http-SslCertificate")))]
        #[deprecated] pub fn new_int_SslCertificate<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::http::SslCertificate>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::net::http::SslError>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/http/SslError", java.flags == PUBLIC, .name == "<init>", .descriptor == "(ILandroid/net/http/SslCertificate;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/http/SslError\0", "<init>\0", "(ILandroid/net/http/SslCertificate;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [SslError](https://developer.android.com/reference/android/net/http/SslError.html#SslError(int,%20java.security.cert.X509Certificate))
        ///
        /// Required features: "java-security-cert-X509Certificate"
        #[cfg(any(feature = "all", all(feature = "java-security-cert-X509Certificate")))]
        #[deprecated] pub fn new_int_X509Certificate<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::cert::X509Certificate>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::net::http::SslError>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/http/SslError", java.flags == PUBLIC, .name == "<init>", .descriptor == "(ILjava/security/cert/X509Certificate;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/http/SslError\0", "<init>\0", "(ILjava/security/cert/X509Certificate;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [SslError](https://developer.android.com/reference/android/net/http/SslError.html#SslError(int,%20android.net.http.SslCertificate,%20java.lang.String))
        ///
        /// Required features: "android-net-http-SslCertificate", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-http-SslCertificate", feature = "java-lang-String")))]
        pub fn new_int_SslCertificate_String<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::http::SslCertificate>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::net::http::SslError>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/http/SslError", java.flags == PUBLIC, .name == "<init>", .descriptor == "(ILandroid/net/http/SslCertificate;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/http/SslError\0", "<init>\0", "(ILandroid/net/http/SslCertificate;Ljava/lang/String;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [SslError](https://developer.android.com/reference/android/net/http/SslError.html#SslError(int,%20java.security.cert.X509Certificate,%20java.lang.String))
        ///
        /// Required features: "java-lang-String", "java-security-cert-X509Certificate"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-security-cert-X509Certificate")))]
        pub fn new_int_X509Certificate_String<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::cert::X509Certificate>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::net::http::SslError>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/http/SslError", java.flags == PUBLIC, .name == "<init>", .descriptor == "(ILjava/security/cert/X509Certificate;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/http/SslError\0", "<init>\0", "(ILjava/security/cert/X509Certificate;Ljava/lang/String;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCertificate](https://developer.android.com/reference/android/net/http/SslError.html#getCertificate())
        ///
        /// Required features: "android-net-http-SslCertificate"
        #[cfg(any(feature = "all", all(feature = "android-net-http-SslCertificate")))]
        pub fn getCertificate<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::http::SslCertificate>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/http/SslError", java.flags == PUBLIC, .name == "getCertificate", .descriptor == "()Landroid/net/http/SslCertificate;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/http/SslError\0", "getCertificate\0", "()Landroid/net/http/SslCertificate;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getUrl](https://developer.android.com/reference/android/net/http/SslError.html#getUrl())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getUrl<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/http/SslError", java.flags == PUBLIC, .name == "getUrl", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/http/SslError\0", "getUrl\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addError](https://developer.android.com/reference/android/net/http/SslError.html#addError(int))
        pub fn addError<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/http/SslError", java.flags == PUBLIC, .name == "addError", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/http/SslError\0", "addError\0", "(I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasError](https://developer.android.com/reference/android/net/http/SslError.html#hasError(int))
        pub fn hasError<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/http/SslError", java.flags == PUBLIC, .name == "hasError", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/http/SslError\0", "hasError\0", "(I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPrimaryError](https://developer.android.com/reference/android/net/http/SslError.html#getPrimaryError())
        pub fn getPrimaryError<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/http/SslError", java.flags == PUBLIC, .name == "getPrimaryError", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/http/SslError\0", "getPrimaryError\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/android/net/http/SslError.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/http/SslError", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/http/SslError\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [SSL_DATE_INVALID](https://developer.android.com/reference/android/net/http/SslError.html#SSL_DATE_INVALID)
        pub const SSL_DATE_INVALID : i32 = 4;

        /// public static final [SSL_EXPIRED](https://developer.android.com/reference/android/net/http/SslError.html#SSL_EXPIRED)
        pub const SSL_EXPIRED : i32 = 1;

        /// public static final [SSL_IDMISMATCH](https://developer.android.com/reference/android/net/http/SslError.html#SSL_IDMISMATCH)
        pub const SSL_IDMISMATCH : i32 = 2;

        /// public static final [SSL_INVALID](https://developer.android.com/reference/android/net/http/SslError.html#SSL_INVALID)
        pub const SSL_INVALID : i32 = 5;

        /// public static final [SSL_MAX_ERROR](https://developer.android.com/reference/android/net/http/SslError.html#SSL_MAX_ERROR)
        #[deprecated] pub const SSL_MAX_ERROR : i32 = 6;

        /// public static final [SSL_NOTYETVALID](https://developer.android.com/reference/android/net/http/SslError.html#SSL_NOTYETVALID)
        pub const SSL_NOTYETVALID : i32 = 0;

        /// public static final [SSL_UNTRUSTED](https://developer.android.com/reference/android/net/http/SslError.html#SSL_UNTRUSTED)
        pub const SSL_UNTRUSTED : i32 = 3;
    }
}
