// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-net-http-X509TrustManagerExtensions"))]
__jni_bindgen! {
    /// public class [X509TrustManagerExtensions](https://developer.android.com/reference/android/net/http/X509TrustManagerExtensions.html)
    ///
    /// Required feature: android-net-http-X509TrustManagerExtensions
    public class X509TrustManagerExtensions ("android/net/http/X509TrustManagerExtensions") extends crate::java::lang::Object {

        /// [X509TrustManagerExtensions](https://developer.android.com/reference/android/net/http/X509TrustManagerExtensions.html#X509TrustManagerExtensions(javax.net.ssl.X509TrustManager))
        ///
        /// Required features: "javax-net-ssl-X509TrustManager"
        #[cfg(any(feature = "all", all(feature = "javax-net-ssl-X509TrustManager")))]
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::javax::net::ssl::X509TrustManager>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::net::http::X509TrustManagerExtensions>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/http/X509TrustManagerExtensions", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljavax/net/ssl/X509TrustManager;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/http/X509TrustManagerExtensions\0", "<init>\0", "(Ljavax/net/ssl/X509TrustManager;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [checkServerTrusted](https://developer.android.com/reference/android/net/http/X509TrustManagerExtensions.html#checkServerTrusted(java.security.cert.X509Certificate%5B%5D,%20java.lang.String,%20java.lang.String))
        ///
        /// Required features: "java-lang-String", "java-security-cert-X509Certificate", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-security-cert-X509Certificate", feature = "java-util-List")))]
        pub fn checkServerTrusted<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::security::cert::X509Certificate, crate::java::lang::Throwable>>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/http/X509TrustManagerExtensions", java.flags == PUBLIC, .name == "checkServerTrusted", .descriptor == "([Ljava/security/cert/X509Certificate;Ljava/lang/String;Ljava/lang/String;)Ljava/util/List;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/http/X509TrustManagerExtensions\0", "checkServerTrusted\0", "([Ljava/security/cert/X509Certificate;Ljava/lang/String;Ljava/lang/String;)Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isUserAddedCertificate](https://developer.android.com/reference/android/net/http/X509TrustManagerExtensions.html#isUserAddedCertificate(java.security.cert.X509Certificate))
        ///
        /// Required features: "java-security-cert-X509Certificate"
        #[cfg(any(feature = "all", all(feature = "java-security-cert-X509Certificate")))]
        pub fn isUserAddedCertificate<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::cert::X509Certificate>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/http/X509TrustManagerExtensions", java.flags == PUBLIC, .name == "isUserAddedCertificate", .descriptor == "(Ljava/security/cert/X509Certificate;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/http/X509TrustManagerExtensions\0", "isUserAddedCertificate\0", "(Ljava/security/cert/X509Certificate;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isSameTrustConfiguration](https://developer.android.com/reference/android/net/http/X509TrustManagerExtensions.html#isSameTrustConfiguration(java.lang.String,%20java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn isSameTrustConfiguration<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/net/http/X509TrustManagerExtensions", java.flags == PUBLIC, .name == "isSameTrustConfiguration", .descriptor == "(Ljava/lang/String;Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/net/http/X509TrustManagerExtensions\0", "isSameTrustConfiguration\0", "(Ljava/lang/String;Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
