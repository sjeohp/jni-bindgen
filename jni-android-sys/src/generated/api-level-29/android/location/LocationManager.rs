// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-location-LocationManager"))]
__jni_bindgen! {
    /// public class [LocationManager](https://developer.android.com/reference/android/location/LocationManager.html)
    ///
    /// Required feature: android-location-LocationManager
    public class LocationManager ("android/location/LocationManager") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [LocationManager](https://developer.android.com/reference/android/location/LocationManager.html#LocationManager())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::location::LocationManager>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/location/LocationManager", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/LocationManager\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getAllProviders](https://developer.android.com/reference/android/location/LocationManager.html#getAllProviders())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getAllProviders<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/LocationManager", java.flags == PUBLIC, .name == "getAllProviders", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/LocationManager\0", "getAllProviders\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getProviders](https://developer.android.com/reference/android/location/LocationManager.html#getProviders(boolean))
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getProviders_boolean<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/LocationManager", java.flags == PUBLIC, .name == "getProviders", .descriptor == "(Z)Ljava/util/List;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/LocationManager\0", "getProviders\0", "(Z)Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getProvider](https://developer.android.com/reference/android/location/LocationManager.html#getProvider(java.lang.String))
        ///
        /// Required features: "android-location-LocationProvider", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-location-LocationProvider", feature = "java-lang-String")))]
        pub fn getProvider<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::location::LocationProvider>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/LocationManager", java.flags == PUBLIC, .name == "getProvider", .descriptor == "(Ljava/lang/String;)Landroid/location/LocationProvider;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/LocationManager\0", "getProvider\0", "(Ljava/lang/String;)Landroid/location/LocationProvider;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getProviders](https://developer.android.com/reference/android/location/LocationManager.html#getProviders(android.location.Criteria,%20boolean))
        ///
        /// Required features: "android-location-Criteria", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "android-location-Criteria", feature = "java-util-List")))]
        pub fn getProviders_Criteria_boolean<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::location::Criteria>>, arg1: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/LocationManager", java.flags == PUBLIC, .name == "getProviders", .descriptor == "(Landroid/location/Criteria;Z)Ljava/util/List;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/LocationManager\0", "getProviders\0", "(Landroid/location/Criteria;Z)Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getBestProvider](https://developer.android.com/reference/android/location/LocationManager.html#getBestProvider(android.location.Criteria,%20boolean))
        ///
        /// Required features: "android-location-Criteria", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-location-Criteria", feature = "java-lang-String")))]
        pub fn getBestProvider<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::location::Criteria>>, arg1: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/LocationManager", java.flags == PUBLIC, .name == "getBestProvider", .descriptor == "(Landroid/location/Criteria;Z)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/LocationManager\0", "getBestProvider\0", "(Landroid/location/Criteria;Z)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [requestLocationUpdates](https://developer.android.com/reference/android/location/LocationManager.html#requestLocationUpdates(java.lang.String,%20long,%20float,%20android.location.LocationListener))
        ///
        /// Required features: "android-location-LocationListener", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-location-LocationListener", feature = "java-lang-String")))]
        pub fn requestLocationUpdates_String_long_float_LocationListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i64, arg2: f32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::location::LocationListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/LocationManager", java.flags == PUBLIC, .name == "requestLocationUpdates", .descriptor == "(Ljava/lang/String;JFLandroid/location/LocationListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/LocationManager\0", "requestLocationUpdates\0", "(Ljava/lang/String;JFLandroid/location/LocationListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [requestLocationUpdates](https://developer.android.com/reference/android/location/LocationManager.html#requestLocationUpdates(java.lang.String,%20long,%20float,%20android.location.LocationListener,%20android.os.Looper))
        ///
        /// Required features: "android-location-LocationListener", "android-os-Looper", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-location-LocationListener", feature = "android-os-Looper", feature = "java-lang-String")))]
        pub fn requestLocationUpdates_String_long_float_LocationListener_Looper<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i64, arg2: f32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::location::LocationListener>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Looper>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/LocationManager", java.flags == PUBLIC, .name == "requestLocationUpdates", .descriptor == "(Ljava/lang/String;JFLandroid/location/LocationListener;Landroid/os/Looper;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/LocationManager\0", "requestLocationUpdates\0", "(Ljava/lang/String;JFLandroid/location/LocationListener;Landroid/os/Looper;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [requestLocationUpdates](https://developer.android.com/reference/android/location/LocationManager.html#requestLocationUpdates(long,%20float,%20android.location.Criteria,%20android.location.LocationListener,%20android.os.Looper))
        ///
        /// Required features: "android-location-Criteria", "android-location-LocationListener", "android-os-Looper"
        #[cfg(any(feature = "all", all(feature = "android-location-Criteria", feature = "android-location-LocationListener", feature = "android-os-Looper")))]
        pub fn requestLocationUpdates_long_float_Criteria_LocationListener_Looper<'env>(&'env self, arg0: i64, arg1: f32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::location::Criteria>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::location::LocationListener>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Looper>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/LocationManager", java.flags == PUBLIC, .name == "requestLocationUpdates", .descriptor == "(JFLandroid/location/Criteria;Landroid/location/LocationListener;Landroid/os/Looper;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/LocationManager\0", "requestLocationUpdates\0", "(JFLandroid/location/Criteria;Landroid/location/LocationListener;Landroid/os/Looper;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [requestLocationUpdates](https://developer.android.com/reference/android/location/LocationManager.html#requestLocationUpdates(java.lang.String,%20long,%20float,%20android.app.PendingIntent))
        ///
        /// Required features: "android-app-PendingIntent", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-app-PendingIntent", feature = "java-lang-String")))]
        pub fn requestLocationUpdates_String_long_float_PendingIntent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i64, arg2: f32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::PendingIntent>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/LocationManager", java.flags == PUBLIC, .name == "requestLocationUpdates", .descriptor == "(Ljava/lang/String;JFLandroid/app/PendingIntent;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/LocationManager\0", "requestLocationUpdates\0", "(Ljava/lang/String;JFLandroid/app/PendingIntent;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [requestLocationUpdates](https://developer.android.com/reference/android/location/LocationManager.html#requestLocationUpdates(long,%20float,%20android.location.Criteria,%20android.app.PendingIntent))
        ///
        /// Required features: "android-app-PendingIntent", "android-location-Criteria"
        #[cfg(any(feature = "all", all(feature = "android-app-PendingIntent", feature = "android-location-Criteria")))]
        pub fn requestLocationUpdates_long_float_Criteria_PendingIntent<'env>(&'env self, arg0: i64, arg1: f32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::location::Criteria>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::PendingIntent>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/LocationManager", java.flags == PUBLIC, .name == "requestLocationUpdates", .descriptor == "(JFLandroid/location/Criteria;Landroid/app/PendingIntent;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/LocationManager\0", "requestLocationUpdates\0", "(JFLandroid/location/Criteria;Landroid/app/PendingIntent;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [requestSingleUpdate](https://developer.android.com/reference/android/location/LocationManager.html#requestSingleUpdate(java.lang.String,%20android.location.LocationListener,%20android.os.Looper))
        ///
        /// Required features: "android-location-LocationListener", "android-os-Looper", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-location-LocationListener", feature = "android-os-Looper", feature = "java-lang-String")))]
        pub fn requestSingleUpdate_String_LocationListener_Looper<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::location::LocationListener>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Looper>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/LocationManager", java.flags == PUBLIC, .name == "requestSingleUpdate", .descriptor == "(Ljava/lang/String;Landroid/location/LocationListener;Landroid/os/Looper;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/LocationManager\0", "requestSingleUpdate\0", "(Ljava/lang/String;Landroid/location/LocationListener;Landroid/os/Looper;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [requestSingleUpdate](https://developer.android.com/reference/android/location/LocationManager.html#requestSingleUpdate(android.location.Criteria,%20android.location.LocationListener,%20android.os.Looper))
        ///
        /// Required features: "android-location-Criteria", "android-location-LocationListener", "android-os-Looper"
        #[cfg(any(feature = "all", all(feature = "android-location-Criteria", feature = "android-location-LocationListener", feature = "android-os-Looper")))]
        pub fn requestSingleUpdate_Criteria_LocationListener_Looper<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::location::Criteria>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::location::LocationListener>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Looper>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/LocationManager", java.flags == PUBLIC, .name == "requestSingleUpdate", .descriptor == "(Landroid/location/Criteria;Landroid/location/LocationListener;Landroid/os/Looper;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/LocationManager\0", "requestSingleUpdate\0", "(Landroid/location/Criteria;Landroid/location/LocationListener;Landroid/os/Looper;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [requestSingleUpdate](https://developer.android.com/reference/android/location/LocationManager.html#requestSingleUpdate(java.lang.String,%20android.app.PendingIntent))
        ///
        /// Required features: "android-app-PendingIntent", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-app-PendingIntent", feature = "java-lang-String")))]
        pub fn requestSingleUpdate_String_PendingIntent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::PendingIntent>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/LocationManager", java.flags == PUBLIC, .name == "requestSingleUpdate", .descriptor == "(Ljava/lang/String;Landroid/app/PendingIntent;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/LocationManager\0", "requestSingleUpdate\0", "(Ljava/lang/String;Landroid/app/PendingIntent;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [requestSingleUpdate](https://developer.android.com/reference/android/location/LocationManager.html#requestSingleUpdate(android.location.Criteria,%20android.app.PendingIntent))
        ///
        /// Required features: "android-app-PendingIntent", "android-location-Criteria"
        #[cfg(any(feature = "all", all(feature = "android-app-PendingIntent", feature = "android-location-Criteria")))]
        pub fn requestSingleUpdate_Criteria_PendingIntent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::location::Criteria>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::PendingIntent>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/LocationManager", java.flags == PUBLIC, .name == "requestSingleUpdate", .descriptor == "(Landroid/location/Criteria;Landroid/app/PendingIntent;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/LocationManager\0", "requestSingleUpdate\0", "(Landroid/location/Criteria;Landroid/app/PendingIntent;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeUpdates](https://developer.android.com/reference/android/location/LocationManager.html#removeUpdates(android.location.LocationListener))
        ///
        /// Required features: "android-location-LocationListener"
        #[cfg(any(feature = "all", all(feature = "android-location-LocationListener")))]
        pub fn removeUpdates_LocationListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::location::LocationListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/LocationManager", java.flags == PUBLIC, .name == "removeUpdates", .descriptor == "(Landroid/location/LocationListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/LocationManager\0", "removeUpdates\0", "(Landroid/location/LocationListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeUpdates](https://developer.android.com/reference/android/location/LocationManager.html#removeUpdates(android.app.PendingIntent))
        ///
        /// Required features: "android-app-PendingIntent"
        #[cfg(any(feature = "all", all(feature = "android-app-PendingIntent")))]
        pub fn removeUpdates_PendingIntent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::PendingIntent>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/LocationManager", java.flags == PUBLIC, .name == "removeUpdates", .descriptor == "(Landroid/app/PendingIntent;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/LocationManager\0", "removeUpdates\0", "(Landroid/app/PendingIntent;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addProximityAlert](https://developer.android.com/reference/android/location/LocationManager.html#addProximityAlert(double,%20double,%20float,%20long,%20android.app.PendingIntent))
        ///
        /// Required features: "android-app-PendingIntent"
        #[cfg(any(feature = "all", all(feature = "android-app-PendingIntent")))]
        pub fn addProximityAlert<'env>(&'env self, arg0: f64, arg1: f64, arg2: f32, arg3: i64, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::PendingIntent>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/LocationManager", java.flags == PUBLIC, .name == "addProximityAlert", .descriptor == "(DDFJLandroid/app/PendingIntent;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/LocationManager\0", "addProximityAlert\0", "(DDFJLandroid/app/PendingIntent;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeProximityAlert](https://developer.android.com/reference/android/location/LocationManager.html#removeProximityAlert(android.app.PendingIntent))
        ///
        /// Required features: "android-app-PendingIntent"
        #[cfg(any(feature = "all", all(feature = "android-app-PendingIntent")))]
        pub fn removeProximityAlert<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::PendingIntent>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/LocationManager", java.flags == PUBLIC, .name == "removeProximityAlert", .descriptor == "(Landroid/app/PendingIntent;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/LocationManager\0", "removeProximityAlert\0", "(Landroid/app/PendingIntent;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isLocationEnabled](https://developer.android.com/reference/android/location/LocationManager.html#isLocationEnabled())
        pub fn isLocationEnabled<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/LocationManager", java.flags == PUBLIC, .name == "isLocationEnabled", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/LocationManager\0", "isLocationEnabled\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isProviderEnabled](https://developer.android.com/reference/android/location/LocationManager.html#isProviderEnabled(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn isProviderEnabled<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/LocationManager", java.flags == PUBLIC, .name == "isProviderEnabled", .descriptor == "(Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/LocationManager\0", "isProviderEnabled\0", "(Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLastKnownLocation](https://developer.android.com/reference/android/location/LocationManager.html#getLastKnownLocation(java.lang.String))
        ///
        /// Required features: "android-location-Location", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-location-Location", feature = "java-lang-String")))]
        pub fn getLastKnownLocation<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::location::Location>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/LocationManager", java.flags == PUBLIC, .name == "getLastKnownLocation", .descriptor == "(Ljava/lang/String;)Landroid/location/Location;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/LocationManager\0", "getLastKnownLocation\0", "(Ljava/lang/String;)Landroid/location/Location;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addTestProvider](https://developer.android.com/reference/android/location/LocationManager.html#addTestProvider(java.lang.String,%20boolean,%20boolean,%20boolean,%20boolean,%20boolean,%20boolean,%20boolean,%20int,%20int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn addTestProvider<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: bool, arg2: bool, arg3: bool, arg4: bool, arg5: bool, arg6: bool, arg7: bool, arg8: i32, arg9: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/LocationManager", java.flags == PUBLIC, .name == "addTestProvider", .descriptor == "(Ljava/lang/String;ZZZZZZZII)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6), __jni_bindgen::AsJValue::as_jvalue(&arg7), __jni_bindgen::AsJValue::as_jvalue(&arg8), __jni_bindgen::AsJValue::as_jvalue(&arg9)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/LocationManager\0", "addTestProvider\0", "(Ljava/lang/String;ZZZZZZZII)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeTestProvider](https://developer.android.com/reference/android/location/LocationManager.html#removeTestProvider(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn removeTestProvider<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/LocationManager", java.flags == PUBLIC, .name == "removeTestProvider", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/LocationManager\0", "removeTestProvider\0", "(Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTestProviderLocation](https://developer.android.com/reference/android/location/LocationManager.html#setTestProviderLocation(java.lang.String,%20android.location.Location))
        ///
        /// Required features: "android-location-Location", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-location-Location", feature = "java-lang-String")))]
        pub fn setTestProviderLocation<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::location::Location>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/LocationManager", java.flags == PUBLIC, .name == "setTestProviderLocation", .descriptor == "(Ljava/lang/String;Landroid/location/Location;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/LocationManager\0", "setTestProviderLocation\0", "(Ljava/lang/String;Landroid/location/Location;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clearTestProviderLocation](https://developer.android.com/reference/android/location/LocationManager.html#clearTestProviderLocation(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        #[deprecated] pub fn clearTestProviderLocation<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/LocationManager", java.flags == PUBLIC, .name == "clearTestProviderLocation", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/LocationManager\0", "clearTestProviderLocation\0", "(Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTestProviderEnabled](https://developer.android.com/reference/android/location/LocationManager.html#setTestProviderEnabled(java.lang.String,%20boolean))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn setTestProviderEnabled<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/LocationManager", java.flags == PUBLIC, .name == "setTestProviderEnabled", .descriptor == "(Ljava/lang/String;Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/LocationManager\0", "setTestProviderEnabled\0", "(Ljava/lang/String;Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clearTestProviderEnabled](https://developer.android.com/reference/android/location/LocationManager.html#clearTestProviderEnabled(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        #[deprecated] pub fn clearTestProviderEnabled<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/LocationManager", java.flags == PUBLIC, .name == "clearTestProviderEnabled", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/LocationManager\0", "clearTestProviderEnabled\0", "(Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTestProviderStatus](https://developer.android.com/reference/android/location/LocationManager.html#setTestProviderStatus(java.lang.String,%20int,%20android.os.Bundle,%20long))
        ///
        /// Required features: "android-os-Bundle", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-os-Bundle", feature = "java-lang-String")))]
        #[deprecated] pub fn setTestProviderStatus<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>, arg3: i64) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/LocationManager", java.flags == PUBLIC, .name == "setTestProviderStatus", .descriptor == "(Ljava/lang/String;ILandroid/os/Bundle;J)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/LocationManager\0", "setTestProviderStatus\0", "(Ljava/lang/String;ILandroid/os/Bundle;J)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clearTestProviderStatus](https://developer.android.com/reference/android/location/LocationManager.html#clearTestProviderStatus(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        #[deprecated] pub fn clearTestProviderStatus<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/LocationManager", java.flags == PUBLIC, .name == "clearTestProviderStatus", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/LocationManager\0", "clearTestProviderStatus\0", "(Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addGpsStatusListener](https://developer.android.com/reference/android/location/LocationManager.html#addGpsStatusListener(android.location.GpsStatus.Listener))
        ///
        /// Required features: "android-location-GpsStatus_Listener"
        #[cfg(any(feature = "all", all(feature = "android-location-GpsStatus_Listener")))]
        #[deprecated] pub fn addGpsStatusListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::location::GpsStatus_Listener>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/LocationManager", java.flags == PUBLIC, .name == "addGpsStatusListener", .descriptor == "(Landroid/location/GpsStatus$Listener;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/LocationManager\0", "addGpsStatusListener\0", "(Landroid/location/GpsStatus$Listener;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeGpsStatusListener](https://developer.android.com/reference/android/location/LocationManager.html#removeGpsStatusListener(android.location.GpsStatus.Listener))
        ///
        /// Required features: "android-location-GpsStatus_Listener"
        #[cfg(any(feature = "all", all(feature = "android-location-GpsStatus_Listener")))]
        #[deprecated] pub fn removeGpsStatusListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::location::GpsStatus_Listener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/LocationManager", java.flags == PUBLIC, .name == "removeGpsStatusListener", .descriptor == "(Landroid/location/GpsStatus$Listener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/LocationManager\0", "removeGpsStatusListener\0", "(Landroid/location/GpsStatus$Listener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [registerGnssStatusCallback](https://developer.android.com/reference/android/location/LocationManager.html#registerGnssStatusCallback(android.location.GnssStatus.Callback))
        ///
        /// Required features: "android-location-GnssStatus_Callback"
        #[cfg(any(feature = "all", all(feature = "android-location-GnssStatus_Callback")))]
        pub fn registerGnssStatusCallback_Callback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::location::GnssStatus_Callback>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/LocationManager", java.flags == PUBLIC, .name == "registerGnssStatusCallback", .descriptor == "(Landroid/location/GnssStatus$Callback;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/LocationManager\0", "registerGnssStatusCallback\0", "(Landroid/location/GnssStatus$Callback;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [registerGnssStatusCallback](https://developer.android.com/reference/android/location/LocationManager.html#registerGnssStatusCallback(android.location.GnssStatus.Callback,%20android.os.Handler))
        ///
        /// Required features: "android-location-GnssStatus_Callback", "android-os-Handler"
        #[cfg(any(feature = "all", all(feature = "android-location-GnssStatus_Callback", feature = "android-os-Handler")))]
        pub fn registerGnssStatusCallback_Callback_Handler<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::location::GnssStatus_Callback>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/LocationManager", java.flags == PUBLIC, .name == "registerGnssStatusCallback", .descriptor == "(Landroid/location/GnssStatus$Callback;Landroid/os/Handler;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/LocationManager\0", "registerGnssStatusCallback\0", "(Landroid/location/GnssStatus$Callback;Landroid/os/Handler;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unregisterGnssStatusCallback](https://developer.android.com/reference/android/location/LocationManager.html#unregisterGnssStatusCallback(android.location.GnssStatus.Callback))
        ///
        /// Required features: "android-location-GnssStatus_Callback"
        #[cfg(any(feature = "all", all(feature = "android-location-GnssStatus_Callback")))]
        pub fn unregisterGnssStatusCallback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::location::GnssStatus_Callback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/LocationManager", java.flags == PUBLIC, .name == "unregisterGnssStatusCallback", .descriptor == "(Landroid/location/GnssStatus$Callback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/LocationManager\0", "unregisterGnssStatusCallback\0", "(Landroid/location/GnssStatus$Callback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addNmeaListener](https://developer.android.com/reference/android/location/LocationManager.html#addNmeaListener(android.location.OnNmeaMessageListener))
        ///
        /// Required features: "android-location-OnNmeaMessageListener"
        #[cfg(any(feature = "all", all(feature = "android-location-OnNmeaMessageListener")))]
        pub fn addNmeaListener_OnNmeaMessageListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::location::OnNmeaMessageListener>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/LocationManager", java.flags == PUBLIC, .name == "addNmeaListener", .descriptor == "(Landroid/location/OnNmeaMessageListener;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/LocationManager\0", "addNmeaListener\0", "(Landroid/location/OnNmeaMessageListener;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addNmeaListener](https://developer.android.com/reference/android/location/LocationManager.html#addNmeaListener(android.location.OnNmeaMessageListener,%20android.os.Handler))
        ///
        /// Required features: "android-location-OnNmeaMessageListener", "android-os-Handler"
        #[cfg(any(feature = "all", all(feature = "android-location-OnNmeaMessageListener", feature = "android-os-Handler")))]
        pub fn addNmeaListener_OnNmeaMessageListener_Handler<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::location::OnNmeaMessageListener>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/LocationManager", java.flags == PUBLIC, .name == "addNmeaListener", .descriptor == "(Landroid/location/OnNmeaMessageListener;Landroid/os/Handler;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/LocationManager\0", "addNmeaListener\0", "(Landroid/location/OnNmeaMessageListener;Landroid/os/Handler;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeNmeaListener](https://developer.android.com/reference/android/location/LocationManager.html#removeNmeaListener(android.location.OnNmeaMessageListener))
        ///
        /// Required features: "android-location-OnNmeaMessageListener"
        #[cfg(any(feature = "all", all(feature = "android-location-OnNmeaMessageListener")))]
        pub fn removeNmeaListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::location::OnNmeaMessageListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/LocationManager", java.flags == PUBLIC, .name == "removeNmeaListener", .descriptor == "(Landroid/location/OnNmeaMessageListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/LocationManager\0", "removeNmeaListener\0", "(Landroid/location/OnNmeaMessageListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [registerGnssMeasurementsCallback](https://developer.android.com/reference/android/location/LocationManager.html#registerGnssMeasurementsCallback(android.location.GnssMeasurementsEvent.Callback))
        ///
        /// Required features: "android-location-GnssMeasurementsEvent_Callback"
        #[cfg(any(feature = "all", all(feature = "android-location-GnssMeasurementsEvent_Callback")))]
        pub fn registerGnssMeasurementsCallback_Callback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::location::GnssMeasurementsEvent_Callback>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/LocationManager", java.flags == PUBLIC, .name == "registerGnssMeasurementsCallback", .descriptor == "(Landroid/location/GnssMeasurementsEvent$Callback;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/LocationManager\0", "registerGnssMeasurementsCallback\0", "(Landroid/location/GnssMeasurementsEvent$Callback;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [registerGnssMeasurementsCallback](https://developer.android.com/reference/android/location/LocationManager.html#registerGnssMeasurementsCallback(android.location.GnssMeasurementsEvent.Callback,%20android.os.Handler))
        ///
        /// Required features: "android-location-GnssMeasurementsEvent_Callback", "android-os-Handler"
        #[cfg(any(feature = "all", all(feature = "android-location-GnssMeasurementsEvent_Callback", feature = "android-os-Handler")))]
        pub fn registerGnssMeasurementsCallback_Callback_Handler<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::location::GnssMeasurementsEvent_Callback>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/LocationManager", java.flags == PUBLIC, .name == "registerGnssMeasurementsCallback", .descriptor == "(Landroid/location/GnssMeasurementsEvent$Callback;Landroid/os/Handler;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/LocationManager\0", "registerGnssMeasurementsCallback\0", "(Landroid/location/GnssMeasurementsEvent$Callback;Landroid/os/Handler;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unregisterGnssMeasurementsCallback](https://developer.android.com/reference/android/location/LocationManager.html#unregisterGnssMeasurementsCallback(android.location.GnssMeasurementsEvent.Callback))
        ///
        /// Required features: "android-location-GnssMeasurementsEvent_Callback"
        #[cfg(any(feature = "all", all(feature = "android-location-GnssMeasurementsEvent_Callback")))]
        pub fn unregisterGnssMeasurementsCallback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::location::GnssMeasurementsEvent_Callback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/LocationManager", java.flags == PUBLIC, .name == "unregisterGnssMeasurementsCallback", .descriptor == "(Landroid/location/GnssMeasurementsEvent$Callback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/LocationManager\0", "unregisterGnssMeasurementsCallback\0", "(Landroid/location/GnssMeasurementsEvent$Callback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [registerGnssNavigationMessageCallback](https://developer.android.com/reference/android/location/LocationManager.html#registerGnssNavigationMessageCallback(android.location.GnssNavigationMessage.Callback))
        ///
        /// Required features: "android-location-GnssNavigationMessage_Callback"
        #[cfg(any(feature = "all", all(feature = "android-location-GnssNavigationMessage_Callback")))]
        pub fn registerGnssNavigationMessageCallback_Callback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::location::GnssNavigationMessage_Callback>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/LocationManager", java.flags == PUBLIC, .name == "registerGnssNavigationMessageCallback", .descriptor == "(Landroid/location/GnssNavigationMessage$Callback;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/LocationManager\0", "registerGnssNavigationMessageCallback\0", "(Landroid/location/GnssNavigationMessage$Callback;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [registerGnssNavigationMessageCallback](https://developer.android.com/reference/android/location/LocationManager.html#registerGnssNavigationMessageCallback(android.location.GnssNavigationMessage.Callback,%20android.os.Handler))
        ///
        /// Required features: "android-location-GnssNavigationMessage_Callback", "android-os-Handler"
        #[cfg(any(feature = "all", all(feature = "android-location-GnssNavigationMessage_Callback", feature = "android-os-Handler")))]
        pub fn registerGnssNavigationMessageCallback_Callback_Handler<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::location::GnssNavigationMessage_Callback>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/LocationManager", java.flags == PUBLIC, .name == "registerGnssNavigationMessageCallback", .descriptor == "(Landroid/location/GnssNavigationMessage$Callback;Landroid/os/Handler;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/LocationManager\0", "registerGnssNavigationMessageCallback\0", "(Landroid/location/GnssNavigationMessage$Callback;Landroid/os/Handler;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unregisterGnssNavigationMessageCallback](https://developer.android.com/reference/android/location/LocationManager.html#unregisterGnssNavigationMessageCallback(android.location.GnssNavigationMessage.Callback))
        ///
        /// Required features: "android-location-GnssNavigationMessage_Callback"
        #[cfg(any(feature = "all", all(feature = "android-location-GnssNavigationMessage_Callback")))]
        pub fn unregisterGnssNavigationMessageCallback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::location::GnssNavigationMessage_Callback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/LocationManager", java.flags == PUBLIC, .name == "unregisterGnssNavigationMessageCallback", .descriptor == "(Landroid/location/GnssNavigationMessage$Callback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/LocationManager\0", "unregisterGnssNavigationMessageCallback\0", "(Landroid/location/GnssNavigationMessage$Callback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getGpsStatus](https://developer.android.com/reference/android/location/LocationManager.html#getGpsStatus(android.location.GpsStatus))
        ///
        /// Required features: "android-location-GpsStatus"
        #[cfg(any(feature = "all", all(feature = "android-location-GpsStatus")))]
        #[deprecated] pub fn getGpsStatus<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::location::GpsStatus>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::location::GpsStatus>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/LocationManager", java.flags == PUBLIC, .name == "getGpsStatus", .descriptor == "(Landroid/location/GpsStatus;)Landroid/location/GpsStatus;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/LocationManager\0", "getGpsStatus\0", "(Landroid/location/GpsStatus;)Landroid/location/GpsStatus;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getGnssYearOfHardware](https://developer.android.com/reference/android/location/LocationManager.html#getGnssYearOfHardware())
        pub fn getGnssYearOfHardware<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/LocationManager", java.flags == PUBLIC, .name == "getGnssYearOfHardware", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/LocationManager\0", "getGnssYearOfHardware\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getGnssHardwareModelName](https://developer.android.com/reference/android/location/LocationManager.html#getGnssHardwareModelName())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getGnssHardwareModelName<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/LocationManager", java.flags == PUBLIC, .name == "getGnssHardwareModelName", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/LocationManager\0", "getGnssHardwareModelName\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [sendExtraCommand](https://developer.android.com/reference/android/location/LocationManager.html#sendExtraCommand(java.lang.String,%20java.lang.String,%20android.os.Bundle))
        ///
        /// Required features: "android-os-Bundle", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-os-Bundle", feature = "java-lang-String")))]
        pub fn sendExtraCommand<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/LocationManager", java.flags == PUBLIC, .name == "sendExtraCommand", .descriptor == "(Ljava/lang/String;Ljava/lang/String;Landroid/os/Bundle;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/LocationManager\0", "sendExtraCommand\0", "(Ljava/lang/String;Ljava/lang/String;Landroid/os/Bundle;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [EXTRA_PROVIDER_NAME](https://developer.android.com/reference/android/location/LocationManager.html#EXTRA_PROVIDER_NAME)
        pub const EXTRA_PROVIDER_NAME : &'static str = "android.location.extra.PROVIDER_NAME";

        /// public static final [GPS_PROVIDER](https://developer.android.com/reference/android/location/LocationManager.html#GPS_PROVIDER)
        pub const GPS_PROVIDER : &'static str = "gps";

        /// public static final [KEY_LOCATION_CHANGED](https://developer.android.com/reference/android/location/LocationManager.html#KEY_LOCATION_CHANGED)
        pub const KEY_LOCATION_CHANGED : &'static str = "location";

        /// public static final [KEY_PROVIDER_ENABLED](https://developer.android.com/reference/android/location/LocationManager.html#KEY_PROVIDER_ENABLED)
        pub const KEY_PROVIDER_ENABLED : &'static str = "providerEnabled";

        /// public static final [KEY_PROXIMITY_ENTERING](https://developer.android.com/reference/android/location/LocationManager.html#KEY_PROXIMITY_ENTERING)
        pub const KEY_PROXIMITY_ENTERING : &'static str = "entering";

        /// public static final [KEY_STATUS_CHANGED](https://developer.android.com/reference/android/location/LocationManager.html#KEY_STATUS_CHANGED)
        #[deprecated] pub const KEY_STATUS_CHANGED : &'static str = "status";

        /// public static final [MODE_CHANGED_ACTION](https://developer.android.com/reference/android/location/LocationManager.html#MODE_CHANGED_ACTION)
        pub const MODE_CHANGED_ACTION : &'static str = "android.location.MODE_CHANGED";

        /// public static final [NETWORK_PROVIDER](https://developer.android.com/reference/android/location/LocationManager.html#NETWORK_PROVIDER)
        pub const NETWORK_PROVIDER : &'static str = "network";

        /// public static final [PASSIVE_PROVIDER](https://developer.android.com/reference/android/location/LocationManager.html#PASSIVE_PROVIDER)
        pub const PASSIVE_PROVIDER : &'static str = "passive";

        /// public static final [PROVIDERS_CHANGED_ACTION](https://developer.android.com/reference/android/location/LocationManager.html#PROVIDERS_CHANGED_ACTION)
        pub const PROVIDERS_CHANGED_ACTION : &'static str = "android.location.PROVIDERS_CHANGED";
    }
}
