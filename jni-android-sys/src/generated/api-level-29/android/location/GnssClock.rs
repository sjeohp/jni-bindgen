// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-location-GnssClock"))]
__jni_bindgen! {
    /// public final class [GnssClock](https://developer.android.com/reference/android/location/GnssClock.html)
    ///
    /// Required feature: android-location-GnssClock
    public final class GnssClock ("android/location/GnssClock") extends crate::java::lang::Object, implements crate::android::os::Parcelable {

        // // Not emitting: Non-public method
        // /// [GnssClock](https://developer.android.com/reference/android/location/GnssClock.html#GnssClock())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::location::GnssClock>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/location/GnssClock", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/GnssClock\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [hasLeapSecond](https://developer.android.com/reference/android/location/GnssClock.html#hasLeapSecond())
        pub fn hasLeapSecond<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/GnssClock", java.flags == PUBLIC, .name == "hasLeapSecond", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/GnssClock\0", "hasLeapSecond\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLeapSecond](https://developer.android.com/reference/android/location/GnssClock.html#getLeapSecond())
        pub fn getLeapSecond<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/GnssClock", java.flags == PUBLIC, .name == "getLeapSecond", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/GnssClock\0", "getLeapSecond\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTimeNanos](https://developer.android.com/reference/android/location/GnssClock.html#getTimeNanos())
        pub fn getTimeNanos<'env>(&'env self) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/GnssClock", java.flags == PUBLIC, .name == "getTimeNanos", .descriptor == "()J"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/GnssClock\0", "getTimeNanos\0", "()J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasTimeUncertaintyNanos](https://developer.android.com/reference/android/location/GnssClock.html#hasTimeUncertaintyNanos())
        pub fn hasTimeUncertaintyNanos<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/GnssClock", java.flags == PUBLIC, .name == "hasTimeUncertaintyNanos", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/GnssClock\0", "hasTimeUncertaintyNanos\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTimeUncertaintyNanos](https://developer.android.com/reference/android/location/GnssClock.html#getTimeUncertaintyNanos())
        pub fn getTimeUncertaintyNanos<'env>(&'env self) -> __jni_bindgen::std::result::Result<f64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/GnssClock", java.flags == PUBLIC, .name == "getTimeUncertaintyNanos", .descriptor == "()D"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/GnssClock\0", "getTimeUncertaintyNanos\0", "()D\0");
                __jni_env.call_double_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasFullBiasNanos](https://developer.android.com/reference/android/location/GnssClock.html#hasFullBiasNanos())
        pub fn hasFullBiasNanos<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/GnssClock", java.flags == PUBLIC, .name == "hasFullBiasNanos", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/GnssClock\0", "hasFullBiasNanos\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFullBiasNanos](https://developer.android.com/reference/android/location/GnssClock.html#getFullBiasNanos())
        pub fn getFullBiasNanos<'env>(&'env self) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/GnssClock", java.flags == PUBLIC, .name == "getFullBiasNanos", .descriptor == "()J"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/GnssClock\0", "getFullBiasNanos\0", "()J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasBiasNanos](https://developer.android.com/reference/android/location/GnssClock.html#hasBiasNanos())
        pub fn hasBiasNanos<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/GnssClock", java.flags == PUBLIC, .name == "hasBiasNanos", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/GnssClock\0", "hasBiasNanos\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getBiasNanos](https://developer.android.com/reference/android/location/GnssClock.html#getBiasNanos())
        pub fn getBiasNanos<'env>(&'env self) -> __jni_bindgen::std::result::Result<f64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/GnssClock", java.flags == PUBLIC, .name == "getBiasNanos", .descriptor == "()D"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/GnssClock\0", "getBiasNanos\0", "()D\0");
                __jni_env.call_double_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasBiasUncertaintyNanos](https://developer.android.com/reference/android/location/GnssClock.html#hasBiasUncertaintyNanos())
        pub fn hasBiasUncertaintyNanos<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/GnssClock", java.flags == PUBLIC, .name == "hasBiasUncertaintyNanos", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/GnssClock\0", "hasBiasUncertaintyNanos\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getBiasUncertaintyNanos](https://developer.android.com/reference/android/location/GnssClock.html#getBiasUncertaintyNanos())
        pub fn getBiasUncertaintyNanos<'env>(&'env self) -> __jni_bindgen::std::result::Result<f64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/GnssClock", java.flags == PUBLIC, .name == "getBiasUncertaintyNanos", .descriptor == "()D"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/GnssClock\0", "getBiasUncertaintyNanos\0", "()D\0");
                __jni_env.call_double_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasDriftNanosPerSecond](https://developer.android.com/reference/android/location/GnssClock.html#hasDriftNanosPerSecond())
        pub fn hasDriftNanosPerSecond<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/GnssClock", java.flags == PUBLIC, .name == "hasDriftNanosPerSecond", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/GnssClock\0", "hasDriftNanosPerSecond\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDriftNanosPerSecond](https://developer.android.com/reference/android/location/GnssClock.html#getDriftNanosPerSecond())
        pub fn getDriftNanosPerSecond<'env>(&'env self) -> __jni_bindgen::std::result::Result<f64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/GnssClock", java.flags == PUBLIC, .name == "getDriftNanosPerSecond", .descriptor == "()D"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/GnssClock\0", "getDriftNanosPerSecond\0", "()D\0");
                __jni_env.call_double_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasDriftUncertaintyNanosPerSecond](https://developer.android.com/reference/android/location/GnssClock.html#hasDriftUncertaintyNanosPerSecond())
        pub fn hasDriftUncertaintyNanosPerSecond<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/GnssClock", java.flags == PUBLIC, .name == "hasDriftUncertaintyNanosPerSecond", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/GnssClock\0", "hasDriftUncertaintyNanosPerSecond\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDriftUncertaintyNanosPerSecond](https://developer.android.com/reference/android/location/GnssClock.html#getDriftUncertaintyNanosPerSecond())
        pub fn getDriftUncertaintyNanosPerSecond<'env>(&'env self) -> __jni_bindgen::std::result::Result<f64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/GnssClock", java.flags == PUBLIC, .name == "getDriftUncertaintyNanosPerSecond", .descriptor == "()D"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/GnssClock\0", "getDriftUncertaintyNanosPerSecond\0", "()D\0");
                __jni_env.call_double_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasElapsedRealtimeNanos](https://developer.android.com/reference/android/location/GnssClock.html#hasElapsedRealtimeNanos())
        pub fn hasElapsedRealtimeNanos<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/GnssClock", java.flags == PUBLIC, .name == "hasElapsedRealtimeNanos", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/GnssClock\0", "hasElapsedRealtimeNanos\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getElapsedRealtimeNanos](https://developer.android.com/reference/android/location/GnssClock.html#getElapsedRealtimeNanos())
        pub fn getElapsedRealtimeNanos<'env>(&'env self) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/GnssClock", java.flags == PUBLIC, .name == "getElapsedRealtimeNanos", .descriptor == "()J"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/GnssClock\0", "getElapsedRealtimeNanos\0", "()J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasElapsedRealtimeUncertaintyNanos](https://developer.android.com/reference/android/location/GnssClock.html#hasElapsedRealtimeUncertaintyNanos())
        pub fn hasElapsedRealtimeUncertaintyNanos<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/GnssClock", java.flags == PUBLIC, .name == "hasElapsedRealtimeUncertaintyNanos", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/GnssClock\0", "hasElapsedRealtimeUncertaintyNanos\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getElapsedRealtimeUncertaintyNanos](https://developer.android.com/reference/android/location/GnssClock.html#getElapsedRealtimeUncertaintyNanos())
        pub fn getElapsedRealtimeUncertaintyNanos<'env>(&'env self) -> __jni_bindgen::std::result::Result<f64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/GnssClock", java.flags == PUBLIC, .name == "getElapsedRealtimeUncertaintyNanos", .descriptor == "()D"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/GnssClock\0", "getElapsedRealtimeUncertaintyNanos\0", "()D\0");
                __jni_env.call_double_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getHardwareClockDiscontinuityCount](https://developer.android.com/reference/android/location/GnssClock.html#getHardwareClockDiscontinuityCount())
        pub fn getHardwareClockDiscontinuityCount<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/GnssClock", java.flags == PUBLIC, .name == "getHardwareClockDiscontinuityCount", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/GnssClock\0", "getHardwareClockDiscontinuityCount\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [writeToParcel](https://developer.android.com/reference/android/location/GnssClock.html#writeToParcel(android.os.Parcel,%20int))
        ///
        /// Required features: "android-os-Parcel"
        #[cfg(any(feature = "all", all(feature = "android-os-Parcel")))]
        pub fn writeToParcel<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Parcel>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/GnssClock", java.flags == PUBLIC, .name == "writeToParcel", .descriptor == "(Landroid/os/Parcel;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/GnssClock\0", "writeToParcel\0", "(Landroid/os/Parcel;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [describeContents](https://developer.android.com/reference/android/location/GnssClock.html#describeContents())
        pub fn describeContents<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/GnssClock", java.flags == PUBLIC, .name == "describeContents", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/GnssClock\0", "describeContents\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/android/location/GnssClock.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/GnssClock", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/GnssClock\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// **get** public static final [CREATOR](https://developer.android.com/reference/android/location/GnssClock.html#CREATOR)
        ///
        /// Required feature: android-os-Parcelable_Creator
        #[cfg(any(feature = "all", feature = "android-os-Parcelable_Creator"))]
        pub fn CREATOR<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Parcelable_Creator>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/location/GnssClock\0", "CREATOR\0", "Landroid/os/Parcelable$Creator;\0");
                env.get_static_object_field(class, field)
            }
        }
    }
}
