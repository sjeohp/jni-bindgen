// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-location-LocationProvider"))]
__jni_bindgen! {
    /// public class [LocationProvider](https://developer.android.com/reference/android/location/LocationProvider.html)
    ///
    /// Required feature: android-location-LocationProvider
    public class LocationProvider ("android/location/LocationProvider") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [LocationProvider](https://developer.android.com/reference/android/location/LocationProvider.html#LocationProvider())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::location::LocationProvider>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/location/LocationProvider", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/LocationProvider\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getName](https://developer.android.com/reference/android/location/LocationProvider.html#getName())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getName<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/LocationProvider", java.flags == PUBLIC, .name == "getName", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/LocationProvider\0", "getName\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [meetsCriteria](https://developer.android.com/reference/android/location/LocationProvider.html#meetsCriteria(android.location.Criteria))
        ///
        /// Required features: "android-location-Criteria"
        #[cfg(any(feature = "all", all(feature = "android-location-Criteria")))]
        pub fn meetsCriteria<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::location::Criteria>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/LocationProvider", java.flags == PUBLIC, .name == "meetsCriteria", .descriptor == "(Landroid/location/Criteria;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/LocationProvider\0", "meetsCriteria\0", "(Landroid/location/Criteria;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [requiresNetwork](https://developer.android.com/reference/android/location/LocationProvider.html#requiresNetwork())
        pub fn requiresNetwork<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/LocationProvider", java.flags == PUBLIC, .name == "requiresNetwork", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/LocationProvider\0", "requiresNetwork\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [requiresSatellite](https://developer.android.com/reference/android/location/LocationProvider.html#requiresSatellite())
        pub fn requiresSatellite<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/LocationProvider", java.flags == PUBLIC, .name == "requiresSatellite", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/LocationProvider\0", "requiresSatellite\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [requiresCell](https://developer.android.com/reference/android/location/LocationProvider.html#requiresCell())
        pub fn requiresCell<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/LocationProvider", java.flags == PUBLIC, .name == "requiresCell", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/LocationProvider\0", "requiresCell\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasMonetaryCost](https://developer.android.com/reference/android/location/LocationProvider.html#hasMonetaryCost())
        pub fn hasMonetaryCost<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/LocationProvider", java.flags == PUBLIC, .name == "hasMonetaryCost", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/LocationProvider\0", "hasMonetaryCost\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [supportsAltitude](https://developer.android.com/reference/android/location/LocationProvider.html#supportsAltitude())
        pub fn supportsAltitude<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/LocationProvider", java.flags == PUBLIC, .name == "supportsAltitude", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/LocationProvider\0", "supportsAltitude\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [supportsSpeed](https://developer.android.com/reference/android/location/LocationProvider.html#supportsSpeed())
        pub fn supportsSpeed<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/LocationProvider", java.flags == PUBLIC, .name == "supportsSpeed", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/LocationProvider\0", "supportsSpeed\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [supportsBearing](https://developer.android.com/reference/android/location/LocationProvider.html#supportsBearing())
        pub fn supportsBearing<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/LocationProvider", java.flags == PUBLIC, .name == "supportsBearing", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/LocationProvider\0", "supportsBearing\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPowerRequirement](https://developer.android.com/reference/android/location/LocationProvider.html#getPowerRequirement())
        pub fn getPowerRequirement<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/LocationProvider", java.flags == PUBLIC, .name == "getPowerRequirement", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/LocationProvider\0", "getPowerRequirement\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAccuracy](https://developer.android.com/reference/android/location/LocationProvider.html#getAccuracy())
        pub fn getAccuracy<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/location/LocationProvider", java.flags == PUBLIC, .name == "getAccuracy", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/location/LocationProvider\0", "getAccuracy\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [AVAILABLE](https://developer.android.com/reference/android/location/LocationProvider.html#AVAILABLE)
        #[deprecated] pub const AVAILABLE : i32 = 2;

        /// public static final [OUT_OF_SERVICE](https://developer.android.com/reference/android/location/LocationProvider.html#OUT_OF_SERVICE)
        #[deprecated] pub const OUT_OF_SERVICE : i32 = 0;

        /// public static final [TEMPORARILY_UNAVAILABLE](https://developer.android.com/reference/android/location/LocationProvider.html#TEMPORARILY_UNAVAILABLE)
        #[deprecated] pub const TEMPORARILY_UNAVAILABLE : i32 = 1;
    }
}
