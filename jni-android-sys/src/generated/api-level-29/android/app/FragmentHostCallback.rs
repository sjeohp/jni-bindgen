// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-app-FragmentHostCallback"))]
__jni_bindgen! {
    /// public class [FragmentHostCallback](https://developer.android.com/reference/android/app/FragmentHostCallback.html)
    ///
    /// Required feature: android-app-FragmentHostCallback
    #[deprecated] public class FragmentHostCallback ("android/app/FragmentHostCallback") extends crate::android::app::FragmentContainer {

        /// [FragmentHostCallback](https://developer.android.com/reference/android/app/FragmentHostCallback.html#FragmentHostCallback(android.content.Context,%20android.os.Handler,%20int))
        ///
        /// Required features: "android-content-Context", "android-os-Handler"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-os-Handler")))]
        #[deprecated] pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>, arg2: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::app::FragmentHostCallback>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentHostCallback", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/content/Context;Landroid/os/Handler;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentHostCallback\0", "<init>\0", "(Landroid/content/Context;Landroid/os/Handler;I)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onDump](https://developer.android.com/reference/android/app/FragmentHostCallback.html#onDump(java.lang.String,%20java.io.FileDescriptor,%20java.io.PrintWriter,%20java.lang.String%5B%5D))
        ///
        /// Required features: "java-io-FileDescriptor", "java-io-PrintWriter", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-io-FileDescriptor", feature = "java-io-PrintWriter", feature = "java-lang-String")))]
        #[deprecated] pub fn onDump<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::FileDescriptor>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::PrintWriter>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentHostCallback", java.flags == PUBLIC, .name == "onDump", .descriptor == "(Ljava/lang/String;Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentHostCallback\0", "onDump\0", "(Ljava/lang/String;Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onShouldSaveFragmentState](https://developer.android.com/reference/android/app/FragmentHostCallback.html#onShouldSaveFragmentState(android.app.Fragment))
        ///
        /// Required features: "android-app-Fragment"
        #[cfg(any(feature = "all", all(feature = "android-app-Fragment")))]
        #[deprecated] pub fn onShouldSaveFragmentState<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Fragment>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentHostCallback", java.flags == PUBLIC, .name == "onShouldSaveFragmentState", .descriptor == "(Landroid/app/Fragment;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentHostCallback\0", "onShouldSaveFragmentState\0", "(Landroid/app/Fragment;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onGetLayoutInflater](https://developer.android.com/reference/android/app/FragmentHostCallback.html#onGetLayoutInflater())
        ///
        /// Required features: "android-view-LayoutInflater"
        #[cfg(any(feature = "all", all(feature = "android-view-LayoutInflater")))]
        #[deprecated] pub fn onGetLayoutInflater<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::LayoutInflater>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentHostCallback", java.flags == PUBLIC, .name == "onGetLayoutInflater", .descriptor == "()Landroid/view/LayoutInflater;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentHostCallback\0", "onGetLayoutInflater\0", "()Landroid/view/LayoutInflater;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onUseFragmentManagerInflaterFactory](https://developer.android.com/reference/android/app/FragmentHostCallback.html#onUseFragmentManagerInflaterFactory())
        #[deprecated] pub fn onUseFragmentManagerInflaterFactory<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentHostCallback", java.flags == PUBLIC, .name == "onUseFragmentManagerInflaterFactory", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentHostCallback\0", "onUseFragmentManagerInflaterFactory\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onGetHost](https://developer.android.com/reference/android/app/FragmentHostCallback.html#onGetHost())
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        #[deprecated] pub fn onGetHost<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentHostCallback", java.flags == PUBLIC | ABSTRACT, .name == "onGetHost", .descriptor == "()Ljava/lang/Object;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentHostCallback\0", "onGetHost\0", "()Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onInvalidateOptionsMenu](https://developer.android.com/reference/android/app/FragmentHostCallback.html#onInvalidateOptionsMenu())
        #[deprecated] pub fn onInvalidateOptionsMenu<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentHostCallback", java.flags == PUBLIC, .name == "onInvalidateOptionsMenu", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentHostCallback\0", "onInvalidateOptionsMenu\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onStartActivityFromFragment](https://developer.android.com/reference/android/app/FragmentHostCallback.html#onStartActivityFromFragment(android.app.Fragment,%20android.content.Intent,%20int,%20android.os.Bundle))
        ///
        /// Required features: "android-app-Fragment", "android-content-Intent", "android-os-Bundle"
        #[cfg(any(feature = "all", all(feature = "android-app-Fragment", feature = "android-content-Intent", feature = "android-os-Bundle")))]
        #[deprecated] pub fn onStartActivityFromFragment<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Fragment>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentHostCallback", java.flags == PUBLIC, .name == "onStartActivityFromFragment", .descriptor == "(Landroid/app/Fragment;Landroid/content/Intent;ILandroid/os/Bundle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentHostCallback\0", "onStartActivityFromFragment\0", "(Landroid/app/Fragment;Landroid/content/Intent;ILandroid/os/Bundle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onStartIntentSenderFromFragment](https://developer.android.com/reference/android/app/FragmentHostCallback.html#onStartIntentSenderFromFragment(android.app.Fragment,%20android.content.IntentSender,%20int,%20android.content.Intent,%20int,%20int,%20int,%20android.os.Bundle))
        ///
        /// Required features: "android-app-Fragment", "android-content-Intent", "android-content-IntentSender", "android-os-Bundle"
        #[cfg(any(feature = "all", all(feature = "android-app-Fragment", feature = "android-content-Intent", feature = "android-content-IntentSender", feature = "android-os-Bundle")))]
        #[deprecated] pub fn onStartIntentSenderFromFragment<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Fragment>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::IntentSender>>, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>, arg4: i32, arg5: i32, arg6: i32, arg7: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentHostCallback", java.flags == PUBLIC, .name == "onStartIntentSenderFromFragment", .descriptor == "(Landroid/app/Fragment;Landroid/content/IntentSender;ILandroid/content/Intent;IIILandroid/os/Bundle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6), __jni_bindgen::AsJValue::as_jvalue(&arg7.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentHostCallback\0", "onStartIntentSenderFromFragment\0", "(Landroid/app/Fragment;Landroid/content/IntentSender;ILandroid/content/Intent;IIILandroid/os/Bundle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onRequestPermissionsFromFragment](https://developer.android.com/reference/android/app/FragmentHostCallback.html#onRequestPermissionsFromFragment(android.app.Fragment,%20java.lang.String%5B%5D,%20int))
        ///
        /// Required features: "android-app-Fragment", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-app-Fragment", feature = "java-lang-String")))]
        #[deprecated] pub fn onRequestPermissionsFromFragment<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Fragment>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentHostCallback", java.flags == PUBLIC, .name == "onRequestPermissionsFromFragment", .descriptor == "(Landroid/app/Fragment;[Ljava/lang/String;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentHostCallback\0", "onRequestPermissionsFromFragment\0", "(Landroid/app/Fragment;[Ljava/lang/String;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onHasWindowAnimations](https://developer.android.com/reference/android/app/FragmentHostCallback.html#onHasWindowAnimations())
        #[deprecated] pub fn onHasWindowAnimations<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentHostCallback", java.flags == PUBLIC, .name == "onHasWindowAnimations", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentHostCallback\0", "onHasWindowAnimations\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onGetWindowAnimations](https://developer.android.com/reference/android/app/FragmentHostCallback.html#onGetWindowAnimations())
        #[deprecated] pub fn onGetWindowAnimations<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentHostCallback", java.flags == PUBLIC, .name == "onGetWindowAnimations", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentHostCallback\0", "onGetWindowAnimations\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onAttachFragment](https://developer.android.com/reference/android/app/FragmentHostCallback.html#onAttachFragment(android.app.Fragment))
        ///
        /// Required features: "android-app-Fragment"
        #[cfg(any(feature = "all", all(feature = "android-app-Fragment")))]
        #[deprecated] pub fn onAttachFragment<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Fragment>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentHostCallback", java.flags == PUBLIC, .name == "onAttachFragment", .descriptor == "(Landroid/app/Fragment;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentHostCallback\0", "onAttachFragment\0", "(Landroid/app/Fragment;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onFindViewById](https://developer.android.com/reference/android/app/FragmentHostCallback.html#onFindViewById(int))
        ///
        /// Required features: "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-view-View")))]
        #[deprecated] pub fn onFindViewById<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::View>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentHostCallback", java.flags == PUBLIC, .name == "onFindViewById", .descriptor == "(I)Landroid/view/View;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentHostCallback\0", "onFindViewById\0", "(I)Landroid/view/View;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onHasView](https://developer.android.com/reference/android/app/FragmentHostCallback.html#onHasView())
        #[deprecated] pub fn onHasView<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentHostCallback", java.flags == PUBLIC, .name == "onHasView", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentHostCallback\0", "onHasView\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
