// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-app-NotificationManager"))]
__jni_bindgen! {
    /// public class [NotificationManager](https://developer.android.com/reference/android/app/NotificationManager.html)
    ///
    /// Required feature: android-app-NotificationManager
    public class NotificationManager ("android/app/NotificationManager") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [NotificationManager](https://developer.android.com/reference/android/app/NotificationManager.html#NotificationManager(android.content.Context,%20android.os.Handler))
        // ///
        // /// Required features: "android-content-Context", "android-os-Handler"
        // #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-os-Handler")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::app::NotificationManager>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/app/NotificationManager", java.flags == (empty), .name == "<init>", .descriptor == "(Landroid/content/Context;Landroid/os/Handler;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/NotificationManager\0", "<init>\0", "(Landroid/content/Context;Landroid/os/Handler;)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [notify](https://developer.android.com/reference/android/app/NotificationManager.html#notify(int,%20android.app.Notification))
        ///
        /// Required features: "android-app-Notification"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification")))]
        pub fn notify_int_Notification<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Notification>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/NotificationManager", java.flags == PUBLIC, .name == "notify", .descriptor == "(ILandroid/app/Notification;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/NotificationManager\0", "notify\0", "(ILandroid/app/Notification;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [notify](https://developer.android.com/reference/android/app/NotificationManager.html#notify(java.lang.String,%20int,%20android.app.Notification))
        ///
        /// Required features: "android-app-Notification", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification", feature = "java-lang-String")))]
        pub fn notify_String_int_Notification<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Notification>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/NotificationManager", java.flags == PUBLIC, .name == "notify", .descriptor == "(Ljava/lang/String;ILandroid/app/Notification;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/NotificationManager\0", "notify\0", "(Ljava/lang/String;ILandroid/app/Notification;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [notifyAsPackage](https://developer.android.com/reference/android/app/NotificationManager.html#notifyAsPackage(java.lang.String,%20java.lang.String,%20int,%20android.app.Notification))
        ///
        /// Required features: "android-app-Notification", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification", feature = "java-lang-String")))]
        pub fn notifyAsPackage<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Notification>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/NotificationManager", java.flags == PUBLIC, .name == "notifyAsPackage", .descriptor == "(Ljava/lang/String;Ljava/lang/String;ILandroid/app/Notification;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/NotificationManager\0", "notifyAsPackage\0", "(Ljava/lang/String;Ljava/lang/String;ILandroid/app/Notification;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [cancel](https://developer.android.com/reference/android/app/NotificationManager.html#cancel(int))
        pub fn cancel_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/NotificationManager", java.flags == PUBLIC, .name == "cancel", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/NotificationManager\0", "cancel\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [cancel](https://developer.android.com/reference/android/app/NotificationManager.html#cancel(java.lang.String,%20int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn cancel_String_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/NotificationManager", java.flags == PUBLIC, .name == "cancel", .descriptor == "(Ljava/lang/String;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/NotificationManager\0", "cancel\0", "(Ljava/lang/String;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [cancelAll](https://developer.android.com/reference/android/app/NotificationManager.html#cancelAll())
        pub fn cancelAll<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/NotificationManager", java.flags == PUBLIC, .name == "cancelAll", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/NotificationManager\0", "cancelAll\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setNotificationDelegate](https://developer.android.com/reference/android/app/NotificationManager.html#setNotificationDelegate(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn setNotificationDelegate<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/NotificationManager", java.flags == PUBLIC, .name == "setNotificationDelegate", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/NotificationManager\0", "setNotificationDelegate\0", "(Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNotificationDelegate](https://developer.android.com/reference/android/app/NotificationManager.html#getNotificationDelegate())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getNotificationDelegate<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/NotificationManager", java.flags == PUBLIC, .name == "getNotificationDelegate", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/NotificationManager\0", "getNotificationDelegate\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [canNotifyAsPackage](https://developer.android.com/reference/android/app/NotificationManager.html#canNotifyAsPackage(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn canNotifyAsPackage<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/NotificationManager", java.flags == PUBLIC, .name == "canNotifyAsPackage", .descriptor == "(Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/NotificationManager\0", "canNotifyAsPackage\0", "(Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createNotificationChannelGroup](https://developer.android.com/reference/android/app/NotificationManager.html#createNotificationChannelGroup(android.app.NotificationChannelGroup))
        ///
        /// Required features: "android-app-NotificationChannelGroup"
        #[cfg(any(feature = "all", all(feature = "android-app-NotificationChannelGroup")))]
        pub fn createNotificationChannelGroup<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::NotificationChannelGroup>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/NotificationManager", java.flags == PUBLIC, .name == "createNotificationChannelGroup", .descriptor == "(Landroid/app/NotificationChannelGroup;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/NotificationManager\0", "createNotificationChannelGroup\0", "(Landroid/app/NotificationChannelGroup;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createNotificationChannelGroups](https://developer.android.com/reference/android/app/NotificationManager.html#createNotificationChannelGroups(java.util.List))
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn createNotificationChannelGroups<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/NotificationManager", java.flags == PUBLIC, .name == "createNotificationChannelGroups", .descriptor == "(Ljava/util/List;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/NotificationManager\0", "createNotificationChannelGroups\0", "(Ljava/util/List;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createNotificationChannel](https://developer.android.com/reference/android/app/NotificationManager.html#createNotificationChannel(android.app.NotificationChannel))
        ///
        /// Required features: "android-app-NotificationChannel"
        #[cfg(any(feature = "all", all(feature = "android-app-NotificationChannel")))]
        pub fn createNotificationChannel<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::NotificationChannel>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/NotificationManager", java.flags == PUBLIC, .name == "createNotificationChannel", .descriptor == "(Landroid/app/NotificationChannel;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/NotificationManager\0", "createNotificationChannel\0", "(Landroid/app/NotificationChannel;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createNotificationChannels](https://developer.android.com/reference/android/app/NotificationManager.html#createNotificationChannels(java.util.List))
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn createNotificationChannels<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/NotificationManager", java.flags == PUBLIC, .name == "createNotificationChannels", .descriptor == "(Ljava/util/List;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/NotificationManager\0", "createNotificationChannels\0", "(Ljava/util/List;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNotificationChannel](https://developer.android.com/reference/android/app/NotificationManager.html#getNotificationChannel(java.lang.String))
        ///
        /// Required features: "android-app-NotificationChannel", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-app-NotificationChannel", feature = "java-lang-String")))]
        pub fn getNotificationChannel<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::NotificationChannel>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/NotificationManager", java.flags == PUBLIC, .name == "getNotificationChannel", .descriptor == "(Ljava/lang/String;)Landroid/app/NotificationChannel;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/NotificationManager\0", "getNotificationChannel\0", "(Ljava/lang/String;)Landroid/app/NotificationChannel;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNotificationChannels](https://developer.android.com/reference/android/app/NotificationManager.html#getNotificationChannels())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getNotificationChannels<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/NotificationManager", java.flags == PUBLIC, .name == "getNotificationChannels", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/NotificationManager\0", "getNotificationChannels\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [deleteNotificationChannel](https://developer.android.com/reference/android/app/NotificationManager.html#deleteNotificationChannel(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn deleteNotificationChannel<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/NotificationManager", java.flags == PUBLIC, .name == "deleteNotificationChannel", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/NotificationManager\0", "deleteNotificationChannel\0", "(Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNotificationChannelGroup](https://developer.android.com/reference/android/app/NotificationManager.html#getNotificationChannelGroup(java.lang.String))
        ///
        /// Required features: "android-app-NotificationChannelGroup", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-app-NotificationChannelGroup", feature = "java-lang-String")))]
        pub fn getNotificationChannelGroup<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::NotificationChannelGroup>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/NotificationManager", java.flags == PUBLIC, .name == "getNotificationChannelGroup", .descriptor == "(Ljava/lang/String;)Landroid/app/NotificationChannelGroup;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/NotificationManager\0", "getNotificationChannelGroup\0", "(Ljava/lang/String;)Landroid/app/NotificationChannelGroup;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNotificationChannelGroups](https://developer.android.com/reference/android/app/NotificationManager.html#getNotificationChannelGroups())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getNotificationChannelGroups<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/NotificationManager", java.flags == PUBLIC, .name == "getNotificationChannelGroups", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/NotificationManager\0", "getNotificationChannelGroups\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [deleteNotificationChannelGroup](https://developer.android.com/reference/android/app/NotificationManager.html#deleteNotificationChannelGroup(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn deleteNotificationChannelGroup<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/NotificationManager", java.flags == PUBLIC, .name == "deleteNotificationChannelGroup", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/NotificationManager\0", "deleteNotificationChannelGroup\0", "(Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAutomaticZenRules](https://developer.android.com/reference/android/app/NotificationManager.html#getAutomaticZenRules())
        ///
        /// Required features: "java-util-Map"
        #[cfg(any(feature = "all", all(feature = "java-util-Map")))]
        pub fn getAutomaticZenRules<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Map>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/NotificationManager", java.flags == PUBLIC, .name == "getAutomaticZenRules", .descriptor == "()Ljava/util/Map;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/NotificationManager\0", "getAutomaticZenRules\0", "()Ljava/util/Map;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAutomaticZenRule](https://developer.android.com/reference/android/app/NotificationManager.html#getAutomaticZenRule(java.lang.String))
        ///
        /// Required features: "android-app-AutomaticZenRule", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-app-AutomaticZenRule", feature = "java-lang-String")))]
        pub fn getAutomaticZenRule<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::AutomaticZenRule>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/NotificationManager", java.flags == PUBLIC, .name == "getAutomaticZenRule", .descriptor == "(Ljava/lang/String;)Landroid/app/AutomaticZenRule;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/NotificationManager\0", "getAutomaticZenRule\0", "(Ljava/lang/String;)Landroid/app/AutomaticZenRule;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addAutomaticZenRule](https://developer.android.com/reference/android/app/NotificationManager.html#addAutomaticZenRule(android.app.AutomaticZenRule))
        ///
        /// Required features: "android-app-AutomaticZenRule", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-app-AutomaticZenRule", feature = "java-lang-String")))]
        pub fn addAutomaticZenRule<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::AutomaticZenRule>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/NotificationManager", java.flags == PUBLIC, .name == "addAutomaticZenRule", .descriptor == "(Landroid/app/AutomaticZenRule;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/NotificationManager\0", "addAutomaticZenRule\0", "(Landroid/app/AutomaticZenRule;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateAutomaticZenRule](https://developer.android.com/reference/android/app/NotificationManager.html#updateAutomaticZenRule(java.lang.String,%20android.app.AutomaticZenRule))
        ///
        /// Required features: "android-app-AutomaticZenRule", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-app-AutomaticZenRule", feature = "java-lang-String")))]
        pub fn updateAutomaticZenRule<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::AutomaticZenRule>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/NotificationManager", java.flags == PUBLIC, .name == "updateAutomaticZenRule", .descriptor == "(Ljava/lang/String;Landroid/app/AutomaticZenRule;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/NotificationManager\0", "updateAutomaticZenRule\0", "(Ljava/lang/String;Landroid/app/AutomaticZenRule;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAutomaticZenRuleState](https://developer.android.com/reference/android/app/NotificationManager.html#setAutomaticZenRuleState(java.lang.String,%20android.service.notification.Condition))
        ///
        /// Required features: "android-service-notification-Condition", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-service-notification-Condition", feature = "java-lang-String")))]
        pub fn setAutomaticZenRuleState<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::service::notification::Condition>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/NotificationManager", java.flags == PUBLIC, .name == "setAutomaticZenRuleState", .descriptor == "(Ljava/lang/String;Landroid/service/notification/Condition;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/NotificationManager\0", "setAutomaticZenRuleState\0", "(Ljava/lang/String;Landroid/service/notification/Condition;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeAutomaticZenRule](https://developer.android.com/reference/android/app/NotificationManager.html#removeAutomaticZenRule(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn removeAutomaticZenRule<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/NotificationManager", java.flags == PUBLIC, .name == "removeAutomaticZenRule", .descriptor == "(Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/NotificationManager\0", "removeAutomaticZenRule\0", "(Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getImportance](https://developer.android.com/reference/android/app/NotificationManager.html#getImportance())
        pub fn getImportance<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/NotificationManager", java.flags == PUBLIC, .name == "getImportance", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/NotificationManager\0", "getImportance\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [areNotificationsEnabled](https://developer.android.com/reference/android/app/NotificationManager.html#areNotificationsEnabled())
        pub fn areNotificationsEnabled<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/NotificationManager", java.flags == PUBLIC, .name == "areNotificationsEnabled", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/NotificationManager\0", "areNotificationsEnabled\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [areBubblesAllowed](https://developer.android.com/reference/android/app/NotificationManager.html#areBubblesAllowed())
        pub fn areBubblesAllowed<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/NotificationManager", java.flags == PUBLIC, .name == "areBubblesAllowed", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/NotificationManager\0", "areBubblesAllowed\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [areNotificationsPaused](https://developer.android.com/reference/android/app/NotificationManager.html#areNotificationsPaused())
        pub fn areNotificationsPaused<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/NotificationManager", java.flags == PUBLIC, .name == "areNotificationsPaused", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/NotificationManager\0", "areNotificationsPaused\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isNotificationPolicyAccessGranted](https://developer.android.com/reference/android/app/NotificationManager.html#isNotificationPolicyAccessGranted())
        pub fn isNotificationPolicyAccessGranted<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/NotificationManager", java.flags == PUBLIC, .name == "isNotificationPolicyAccessGranted", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/NotificationManager\0", "isNotificationPolicyAccessGranted\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isNotificationListenerAccessGranted](https://developer.android.com/reference/android/app/NotificationManager.html#isNotificationListenerAccessGranted(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn isNotificationListenerAccessGranted<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/NotificationManager", java.flags == PUBLIC, .name == "isNotificationListenerAccessGranted", .descriptor == "(Landroid/content/ComponentName;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/NotificationManager\0", "isNotificationListenerAccessGranted\0", "(Landroid/content/ComponentName;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [shouldHideSilentStatusBarIcons](https://developer.android.com/reference/android/app/NotificationManager.html#shouldHideSilentStatusBarIcons())
        pub fn shouldHideSilentStatusBarIcons<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/NotificationManager", java.flags == PUBLIC, .name == "shouldHideSilentStatusBarIcons", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/NotificationManager\0", "shouldHideSilentStatusBarIcons\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNotificationPolicy](https://developer.android.com/reference/android/app/NotificationManager.html#getNotificationPolicy())
        ///
        /// Required features: "android-app-NotificationManager_Policy"
        #[cfg(any(feature = "all", all(feature = "android-app-NotificationManager_Policy")))]
        pub fn getNotificationPolicy<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::NotificationManager_Policy>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/NotificationManager", java.flags == PUBLIC, .name == "getNotificationPolicy", .descriptor == "()Landroid/app/NotificationManager$Policy;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/NotificationManager\0", "getNotificationPolicy\0", "()Landroid/app/NotificationManager$Policy;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setNotificationPolicy](https://developer.android.com/reference/android/app/NotificationManager.html#setNotificationPolicy(android.app.NotificationManager.Policy))
        ///
        /// Required features: "android-app-NotificationManager_Policy"
        #[cfg(any(feature = "all", all(feature = "android-app-NotificationManager_Policy")))]
        pub fn setNotificationPolicy<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::NotificationManager_Policy>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/NotificationManager", java.flags == PUBLIC, .name == "setNotificationPolicy", .descriptor == "(Landroid/app/NotificationManager$Policy;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/NotificationManager\0", "setNotificationPolicy\0", "(Landroid/app/NotificationManager$Policy;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getActiveNotifications](https://developer.android.com/reference/android/app/NotificationManager.html#getActiveNotifications())
        ///
        /// Required features: "android-service-notification-StatusBarNotification"
        #[cfg(any(feature = "all", all(feature = "android-service-notification-StatusBarNotification")))]
        pub fn getActiveNotifications<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::android::service::notification::StatusBarNotification, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/NotificationManager", java.flags == PUBLIC, .name == "getActiveNotifications", .descriptor == "()[Landroid/service/notification/StatusBarNotification;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/NotificationManager\0", "getActiveNotifications\0", "()[Landroid/service/notification/StatusBarNotification;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCurrentInterruptionFilter](https://developer.android.com/reference/android/app/NotificationManager.html#getCurrentInterruptionFilter())
        pub fn getCurrentInterruptionFilter<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/NotificationManager", java.flags == PUBLIC | FINAL, .name == "getCurrentInterruptionFilter", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/NotificationManager\0", "getCurrentInterruptionFilter\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setInterruptionFilter](https://developer.android.com/reference/android/app/NotificationManager.html#setInterruptionFilter(int))
        pub fn setInterruptionFilter<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/NotificationManager", java.flags == PUBLIC | FINAL, .name == "setInterruptionFilter", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/NotificationManager\0", "setInterruptionFilter\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [ACTION_APP_BLOCK_STATE_CHANGED](https://developer.android.com/reference/android/app/NotificationManager.html#ACTION_APP_BLOCK_STATE_CHANGED)
        pub const ACTION_APP_BLOCK_STATE_CHANGED : &'static str = "android.app.action.APP_BLOCK_STATE_CHANGED";

        /// public static final [ACTION_AUTOMATIC_ZEN_RULE](https://developer.android.com/reference/android/app/NotificationManager.html#ACTION_AUTOMATIC_ZEN_RULE)
        pub const ACTION_AUTOMATIC_ZEN_RULE : &'static str = "android.app.action.AUTOMATIC_ZEN_RULE";

        /// public static final [ACTION_INTERRUPTION_FILTER_CHANGED](https://developer.android.com/reference/android/app/NotificationManager.html#ACTION_INTERRUPTION_FILTER_CHANGED)
        pub const ACTION_INTERRUPTION_FILTER_CHANGED : &'static str = "android.app.action.INTERRUPTION_FILTER_CHANGED";

        /// public static final [ACTION_NOTIFICATION_CHANNEL_BLOCK_STATE_CHANGED](https://developer.android.com/reference/android/app/NotificationManager.html#ACTION_NOTIFICATION_CHANNEL_BLOCK_STATE_CHANGED)
        pub const ACTION_NOTIFICATION_CHANNEL_BLOCK_STATE_CHANGED : &'static str = "android.app.action.NOTIFICATION_CHANNEL_BLOCK_STATE_CHANGED";

        /// public static final [ACTION_NOTIFICATION_CHANNEL_GROUP_BLOCK_STATE_CHANGED](https://developer.android.com/reference/android/app/NotificationManager.html#ACTION_NOTIFICATION_CHANNEL_GROUP_BLOCK_STATE_CHANGED)
        pub const ACTION_NOTIFICATION_CHANNEL_GROUP_BLOCK_STATE_CHANGED : &'static str = "android.app.action.NOTIFICATION_CHANNEL_GROUP_BLOCK_STATE_CHANGED";

        /// public static final [ACTION_NOTIFICATION_POLICY_ACCESS_GRANTED_CHANGED](https://developer.android.com/reference/android/app/NotificationManager.html#ACTION_NOTIFICATION_POLICY_ACCESS_GRANTED_CHANGED)
        pub const ACTION_NOTIFICATION_POLICY_ACCESS_GRANTED_CHANGED : &'static str = "android.app.action.NOTIFICATION_POLICY_ACCESS_GRANTED_CHANGED";

        /// public static final [ACTION_NOTIFICATION_POLICY_CHANGED](https://developer.android.com/reference/android/app/NotificationManager.html#ACTION_NOTIFICATION_POLICY_CHANGED)
        pub const ACTION_NOTIFICATION_POLICY_CHANGED : &'static str = "android.app.action.NOTIFICATION_POLICY_CHANGED";

        /// public static final [EXTRA_AUTOMATIC_RULE_ID](https://developer.android.com/reference/android/app/NotificationManager.html#EXTRA_AUTOMATIC_RULE_ID)
        pub const EXTRA_AUTOMATIC_RULE_ID : &'static str = "android.app.extra.AUTOMATIC_RULE_ID";

        /// public static final [EXTRA_BLOCKED_STATE](https://developer.android.com/reference/android/app/NotificationManager.html#EXTRA_BLOCKED_STATE)
        pub const EXTRA_BLOCKED_STATE : &'static str = "android.app.extra.BLOCKED_STATE";

        /// public static final [EXTRA_NOTIFICATION_CHANNEL_GROUP_ID](https://developer.android.com/reference/android/app/NotificationManager.html#EXTRA_NOTIFICATION_CHANNEL_GROUP_ID)
        pub const EXTRA_NOTIFICATION_CHANNEL_GROUP_ID : &'static str = "android.app.extra.NOTIFICATION_CHANNEL_GROUP_ID";

        /// public static final [EXTRA_NOTIFICATION_CHANNEL_ID](https://developer.android.com/reference/android/app/NotificationManager.html#EXTRA_NOTIFICATION_CHANNEL_ID)
        pub const EXTRA_NOTIFICATION_CHANNEL_ID : &'static str = "android.app.extra.NOTIFICATION_CHANNEL_ID";

        /// public static final [IMPORTANCE_DEFAULT](https://developer.android.com/reference/android/app/NotificationManager.html#IMPORTANCE_DEFAULT)
        pub const IMPORTANCE_DEFAULT : i32 = 3;

        /// public static final [IMPORTANCE_HIGH](https://developer.android.com/reference/android/app/NotificationManager.html#IMPORTANCE_HIGH)
        pub const IMPORTANCE_HIGH : i32 = 4;

        /// public static final [IMPORTANCE_LOW](https://developer.android.com/reference/android/app/NotificationManager.html#IMPORTANCE_LOW)
        pub const IMPORTANCE_LOW : i32 = 2;

        /// public static final [IMPORTANCE_MAX](https://developer.android.com/reference/android/app/NotificationManager.html#IMPORTANCE_MAX)
        pub const IMPORTANCE_MAX : i32 = 5;

        /// public static final [IMPORTANCE_MIN](https://developer.android.com/reference/android/app/NotificationManager.html#IMPORTANCE_MIN)
        pub const IMPORTANCE_MIN : i32 = 1;

        /// public static final [IMPORTANCE_NONE](https://developer.android.com/reference/android/app/NotificationManager.html#IMPORTANCE_NONE)
        pub const IMPORTANCE_NONE : i32 = 0;

        /// public static final [IMPORTANCE_UNSPECIFIED](https://developer.android.com/reference/android/app/NotificationManager.html#IMPORTANCE_UNSPECIFIED)
        pub const IMPORTANCE_UNSPECIFIED : i32 = -1000;

        /// public static final [INTERRUPTION_FILTER_ALARMS](https://developer.android.com/reference/android/app/NotificationManager.html#INTERRUPTION_FILTER_ALARMS)
        pub const INTERRUPTION_FILTER_ALARMS : i32 = 4;

        /// public static final [INTERRUPTION_FILTER_ALL](https://developer.android.com/reference/android/app/NotificationManager.html#INTERRUPTION_FILTER_ALL)
        pub const INTERRUPTION_FILTER_ALL : i32 = 1;

        /// public static final [INTERRUPTION_FILTER_NONE](https://developer.android.com/reference/android/app/NotificationManager.html#INTERRUPTION_FILTER_NONE)
        pub const INTERRUPTION_FILTER_NONE : i32 = 3;

        /// public static final [INTERRUPTION_FILTER_PRIORITY](https://developer.android.com/reference/android/app/NotificationManager.html#INTERRUPTION_FILTER_PRIORITY)
        pub const INTERRUPTION_FILTER_PRIORITY : i32 = 2;

        /// public static final [INTERRUPTION_FILTER_UNKNOWN](https://developer.android.com/reference/android/app/NotificationManager.html#INTERRUPTION_FILTER_UNKNOWN)
        pub const INTERRUPTION_FILTER_UNKNOWN : i32 = 0;

        /// public static final [META_DATA_AUTOMATIC_RULE_TYPE](https://developer.android.com/reference/android/app/NotificationManager.html#META_DATA_AUTOMATIC_RULE_TYPE)
        pub const META_DATA_AUTOMATIC_RULE_TYPE : &'static str = "android.service.zen.automatic.ruleType";

        /// public static final [META_DATA_RULE_INSTANCE_LIMIT](https://developer.android.com/reference/android/app/NotificationManager.html#META_DATA_RULE_INSTANCE_LIMIT)
        pub const META_DATA_RULE_INSTANCE_LIMIT : &'static str = "android.service.zen.automatic.ruleInstanceLimit";
    }
}
