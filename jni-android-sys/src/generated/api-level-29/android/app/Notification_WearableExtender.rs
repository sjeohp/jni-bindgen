// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-app-Notification_WearableExtender"))]
__jni_bindgen! {
    /// public final class [Notification.WearableExtender](https://developer.android.com/reference/android/app/Notification.WearableExtender.html)
    ///
    /// Required feature: android-app-Notification_WearableExtender
    public final class Notification_WearableExtender ("android/app/Notification$WearableExtender") extends crate::java::lang::Object, implements crate::android::app::Notification_Extender {

        /// [WearableExtender](https://developer.android.com/reference/android/app/Notification.WearableExtender.html#WearableExtender())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::app::Notification_WearableExtender>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$WearableExtender", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$WearableExtender\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [WearableExtender](https://developer.android.com/reference/android/app/Notification.WearableExtender.html#WearableExtender(android.app.Notification))
        ///
        /// Required features: "android-app-Notification"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification")))]
        pub fn new_Notification<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Notification>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::app::Notification_WearableExtender>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$WearableExtender", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/app/Notification;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$WearableExtender\0", "<init>\0", "(Landroid/app/Notification;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [extend](https://developer.android.com/reference/android/app/Notification.WearableExtender.html#extend(android.app.Notification.Builder))
        ///
        /// Required features: "android-app-Notification_Builder"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Builder")))]
        pub fn extend<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Notification_Builder>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$WearableExtender", java.flags == PUBLIC, .name == "extend", .descriptor == "(Landroid/app/Notification$Builder;)Landroid/app/Notification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$WearableExtender\0", "extend\0", "(Landroid/app/Notification$Builder;)Landroid/app/Notification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clone](https://developer.android.com/reference/android/app/Notification.WearableExtender.html#clone())
        ///
        /// Required features: "android-app-Notification_WearableExtender"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_WearableExtender")))]
        pub fn clone<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_WearableExtender>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$WearableExtender", java.flags == PUBLIC, .name == "clone", .descriptor == "()Landroid/app/Notification$WearableExtender;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$WearableExtender\0", "clone\0", "()Landroid/app/Notification$WearableExtender;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addAction](https://developer.android.com/reference/android/app/Notification.WearableExtender.html#addAction(android.app.Notification.Action))
        ///
        /// Required features: "android-app-Notification_Action", "android-app-Notification_WearableExtender"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Action", feature = "android-app-Notification_WearableExtender")))]
        pub fn addAction<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Notification_Action>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_WearableExtender>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$WearableExtender", java.flags == PUBLIC, .name == "addAction", .descriptor == "(Landroid/app/Notification$Action;)Landroid/app/Notification$WearableExtender;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$WearableExtender\0", "addAction\0", "(Landroid/app/Notification$Action;)Landroid/app/Notification$WearableExtender;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addActions](https://developer.android.com/reference/android/app/Notification.WearableExtender.html#addActions(java.util.List))
        ///
        /// Required features: "android-app-Notification_WearableExtender", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_WearableExtender", feature = "java-util-List")))]
        pub fn addActions<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_WearableExtender>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$WearableExtender", java.flags == PUBLIC, .name == "addActions", .descriptor == "(Ljava/util/List;)Landroid/app/Notification$WearableExtender;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$WearableExtender\0", "addActions\0", "(Ljava/util/List;)Landroid/app/Notification$WearableExtender;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clearActions](https://developer.android.com/reference/android/app/Notification.WearableExtender.html#clearActions())
        ///
        /// Required features: "android-app-Notification_WearableExtender"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_WearableExtender")))]
        pub fn clearActions<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_WearableExtender>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$WearableExtender", java.flags == PUBLIC, .name == "clearActions", .descriptor == "()Landroid/app/Notification$WearableExtender;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$WearableExtender\0", "clearActions\0", "()Landroid/app/Notification$WearableExtender;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getActions](https://developer.android.com/reference/android/app/Notification.WearableExtender.html#getActions())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getActions<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$WearableExtender", java.flags == PUBLIC, .name == "getActions", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$WearableExtender\0", "getActions\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDisplayIntent](https://developer.android.com/reference/android/app/Notification.WearableExtender.html#setDisplayIntent(android.app.PendingIntent))
        ///
        /// Required features: "android-app-Notification_WearableExtender", "android-app-PendingIntent"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_WearableExtender", feature = "android-app-PendingIntent")))]
        #[deprecated] pub fn setDisplayIntent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::PendingIntent>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_WearableExtender>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$WearableExtender", java.flags == PUBLIC, .name == "setDisplayIntent", .descriptor == "(Landroid/app/PendingIntent;)Landroid/app/Notification$WearableExtender;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$WearableExtender\0", "setDisplayIntent\0", "(Landroid/app/PendingIntent;)Landroid/app/Notification$WearableExtender;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDisplayIntent](https://developer.android.com/reference/android/app/Notification.WearableExtender.html#getDisplayIntent())
        ///
        /// Required features: "android-app-PendingIntent"
        #[cfg(any(feature = "all", all(feature = "android-app-PendingIntent")))]
        #[deprecated] pub fn getDisplayIntent<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::PendingIntent>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$WearableExtender", java.flags == PUBLIC, .name == "getDisplayIntent", .descriptor == "()Landroid/app/PendingIntent;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$WearableExtender\0", "getDisplayIntent\0", "()Landroid/app/PendingIntent;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addPage](https://developer.android.com/reference/android/app/Notification.WearableExtender.html#addPage(android.app.Notification))
        ///
        /// Required features: "android-app-Notification", "android-app-Notification_WearableExtender"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification", feature = "android-app-Notification_WearableExtender")))]
        #[deprecated] pub fn addPage<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Notification>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_WearableExtender>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$WearableExtender", java.flags == PUBLIC, .name == "addPage", .descriptor == "(Landroid/app/Notification;)Landroid/app/Notification$WearableExtender;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$WearableExtender\0", "addPage\0", "(Landroid/app/Notification;)Landroid/app/Notification$WearableExtender;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addPages](https://developer.android.com/reference/android/app/Notification.WearableExtender.html#addPages(java.util.List))
        ///
        /// Required features: "android-app-Notification_WearableExtender", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_WearableExtender", feature = "java-util-List")))]
        #[deprecated] pub fn addPages<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_WearableExtender>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$WearableExtender", java.flags == PUBLIC, .name == "addPages", .descriptor == "(Ljava/util/List;)Landroid/app/Notification$WearableExtender;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$WearableExtender\0", "addPages\0", "(Ljava/util/List;)Landroid/app/Notification$WearableExtender;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clearPages](https://developer.android.com/reference/android/app/Notification.WearableExtender.html#clearPages())
        ///
        /// Required features: "android-app-Notification_WearableExtender"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_WearableExtender")))]
        #[deprecated] pub fn clearPages<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_WearableExtender>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$WearableExtender", java.flags == PUBLIC, .name == "clearPages", .descriptor == "()Landroid/app/Notification$WearableExtender;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$WearableExtender\0", "clearPages\0", "()Landroid/app/Notification$WearableExtender;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPages](https://developer.android.com/reference/android/app/Notification.WearableExtender.html#getPages())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        #[deprecated] pub fn getPages<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$WearableExtender", java.flags == PUBLIC, .name == "getPages", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$WearableExtender\0", "getPages\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setBackground](https://developer.android.com/reference/android/app/Notification.WearableExtender.html#setBackground(android.graphics.Bitmap))
        ///
        /// Required features: "android-app-Notification_WearableExtender", "android-graphics-Bitmap"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_WearableExtender", feature = "android-graphics-Bitmap")))]
        #[deprecated] pub fn setBackground<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Bitmap>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_WearableExtender>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$WearableExtender", java.flags == PUBLIC, .name == "setBackground", .descriptor == "(Landroid/graphics/Bitmap;)Landroid/app/Notification$WearableExtender;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$WearableExtender\0", "setBackground\0", "(Landroid/graphics/Bitmap;)Landroid/app/Notification$WearableExtender;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getBackground](https://developer.android.com/reference/android/app/Notification.WearableExtender.html#getBackground())
        ///
        /// Required features: "android-graphics-Bitmap"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Bitmap")))]
        #[deprecated] pub fn getBackground<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Bitmap>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$WearableExtender", java.flags == PUBLIC, .name == "getBackground", .descriptor == "()Landroid/graphics/Bitmap;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$WearableExtender\0", "getBackground\0", "()Landroid/graphics/Bitmap;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setContentIcon](https://developer.android.com/reference/android/app/Notification.WearableExtender.html#setContentIcon(int))
        ///
        /// Required features: "android-app-Notification_WearableExtender"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_WearableExtender")))]
        #[deprecated] pub fn setContentIcon<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_WearableExtender>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$WearableExtender", java.flags == PUBLIC, .name == "setContentIcon", .descriptor == "(I)Landroid/app/Notification$WearableExtender;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$WearableExtender\0", "setContentIcon\0", "(I)Landroid/app/Notification$WearableExtender;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getContentIcon](https://developer.android.com/reference/android/app/Notification.WearableExtender.html#getContentIcon())
        #[deprecated] pub fn getContentIcon<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$WearableExtender", java.flags == PUBLIC, .name == "getContentIcon", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$WearableExtender\0", "getContentIcon\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setContentIconGravity](https://developer.android.com/reference/android/app/Notification.WearableExtender.html#setContentIconGravity(int))
        ///
        /// Required features: "android-app-Notification_WearableExtender"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_WearableExtender")))]
        #[deprecated] pub fn setContentIconGravity<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_WearableExtender>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$WearableExtender", java.flags == PUBLIC, .name == "setContentIconGravity", .descriptor == "(I)Landroid/app/Notification$WearableExtender;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$WearableExtender\0", "setContentIconGravity\0", "(I)Landroid/app/Notification$WearableExtender;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getContentIconGravity](https://developer.android.com/reference/android/app/Notification.WearableExtender.html#getContentIconGravity())
        #[deprecated] pub fn getContentIconGravity<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$WearableExtender", java.flags == PUBLIC, .name == "getContentIconGravity", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$WearableExtender\0", "getContentIconGravity\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setContentAction](https://developer.android.com/reference/android/app/Notification.WearableExtender.html#setContentAction(int))
        ///
        /// Required features: "android-app-Notification_WearableExtender"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_WearableExtender")))]
        pub fn setContentAction<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_WearableExtender>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$WearableExtender", java.flags == PUBLIC, .name == "setContentAction", .descriptor == "(I)Landroid/app/Notification$WearableExtender;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$WearableExtender\0", "setContentAction\0", "(I)Landroid/app/Notification$WearableExtender;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getContentAction](https://developer.android.com/reference/android/app/Notification.WearableExtender.html#getContentAction())
        pub fn getContentAction<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$WearableExtender", java.flags == PUBLIC, .name == "getContentAction", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$WearableExtender\0", "getContentAction\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setGravity](https://developer.android.com/reference/android/app/Notification.WearableExtender.html#setGravity(int))
        ///
        /// Required features: "android-app-Notification_WearableExtender"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_WearableExtender")))]
        #[deprecated] pub fn setGravity<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_WearableExtender>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$WearableExtender", java.flags == PUBLIC, .name == "setGravity", .descriptor == "(I)Landroid/app/Notification$WearableExtender;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$WearableExtender\0", "setGravity\0", "(I)Landroid/app/Notification$WearableExtender;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getGravity](https://developer.android.com/reference/android/app/Notification.WearableExtender.html#getGravity())
        #[deprecated] pub fn getGravity<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$WearableExtender", java.flags == PUBLIC, .name == "getGravity", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$WearableExtender\0", "getGravity\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setCustomSizePreset](https://developer.android.com/reference/android/app/Notification.WearableExtender.html#setCustomSizePreset(int))
        ///
        /// Required features: "android-app-Notification_WearableExtender"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_WearableExtender")))]
        #[deprecated] pub fn setCustomSizePreset<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_WearableExtender>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$WearableExtender", java.flags == PUBLIC, .name == "setCustomSizePreset", .descriptor == "(I)Landroid/app/Notification$WearableExtender;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$WearableExtender\0", "setCustomSizePreset\0", "(I)Landroid/app/Notification$WearableExtender;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCustomSizePreset](https://developer.android.com/reference/android/app/Notification.WearableExtender.html#getCustomSizePreset())
        #[deprecated] pub fn getCustomSizePreset<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$WearableExtender", java.flags == PUBLIC, .name == "getCustomSizePreset", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$WearableExtender\0", "getCustomSizePreset\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setCustomContentHeight](https://developer.android.com/reference/android/app/Notification.WearableExtender.html#setCustomContentHeight(int))
        ///
        /// Required features: "android-app-Notification_WearableExtender"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_WearableExtender")))]
        #[deprecated] pub fn setCustomContentHeight<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_WearableExtender>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$WearableExtender", java.flags == PUBLIC, .name == "setCustomContentHeight", .descriptor == "(I)Landroid/app/Notification$WearableExtender;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$WearableExtender\0", "setCustomContentHeight\0", "(I)Landroid/app/Notification$WearableExtender;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCustomContentHeight](https://developer.android.com/reference/android/app/Notification.WearableExtender.html#getCustomContentHeight())
        #[deprecated] pub fn getCustomContentHeight<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$WearableExtender", java.flags == PUBLIC, .name == "getCustomContentHeight", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$WearableExtender\0", "getCustomContentHeight\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setStartScrollBottom](https://developer.android.com/reference/android/app/Notification.WearableExtender.html#setStartScrollBottom(boolean))
        ///
        /// Required features: "android-app-Notification_WearableExtender"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_WearableExtender")))]
        pub fn setStartScrollBottom<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_WearableExtender>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$WearableExtender", java.flags == PUBLIC, .name == "setStartScrollBottom", .descriptor == "(Z)Landroid/app/Notification$WearableExtender;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$WearableExtender\0", "setStartScrollBottom\0", "(Z)Landroid/app/Notification$WearableExtender;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getStartScrollBottom](https://developer.android.com/reference/android/app/Notification.WearableExtender.html#getStartScrollBottom())
        pub fn getStartScrollBottom<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$WearableExtender", java.flags == PUBLIC, .name == "getStartScrollBottom", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$WearableExtender\0", "getStartScrollBottom\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setContentIntentAvailableOffline](https://developer.android.com/reference/android/app/Notification.WearableExtender.html#setContentIntentAvailableOffline(boolean))
        ///
        /// Required features: "android-app-Notification_WearableExtender"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_WearableExtender")))]
        pub fn setContentIntentAvailableOffline<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_WearableExtender>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$WearableExtender", java.flags == PUBLIC, .name == "setContentIntentAvailableOffline", .descriptor == "(Z)Landroid/app/Notification$WearableExtender;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$WearableExtender\0", "setContentIntentAvailableOffline\0", "(Z)Landroid/app/Notification$WearableExtender;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getContentIntentAvailableOffline](https://developer.android.com/reference/android/app/Notification.WearableExtender.html#getContentIntentAvailableOffline())
        pub fn getContentIntentAvailableOffline<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$WearableExtender", java.flags == PUBLIC, .name == "getContentIntentAvailableOffline", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$WearableExtender\0", "getContentIntentAvailableOffline\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setHintHideIcon](https://developer.android.com/reference/android/app/Notification.WearableExtender.html#setHintHideIcon(boolean))
        ///
        /// Required features: "android-app-Notification_WearableExtender"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_WearableExtender")))]
        #[deprecated] pub fn setHintHideIcon<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_WearableExtender>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$WearableExtender", java.flags == PUBLIC, .name == "setHintHideIcon", .descriptor == "(Z)Landroid/app/Notification$WearableExtender;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$WearableExtender\0", "setHintHideIcon\0", "(Z)Landroid/app/Notification$WearableExtender;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getHintHideIcon](https://developer.android.com/reference/android/app/Notification.WearableExtender.html#getHintHideIcon())
        #[deprecated] pub fn getHintHideIcon<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$WearableExtender", java.flags == PUBLIC, .name == "getHintHideIcon", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$WearableExtender\0", "getHintHideIcon\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setHintShowBackgroundOnly](https://developer.android.com/reference/android/app/Notification.WearableExtender.html#setHintShowBackgroundOnly(boolean))
        ///
        /// Required features: "android-app-Notification_WearableExtender"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_WearableExtender")))]
        #[deprecated] pub fn setHintShowBackgroundOnly<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_WearableExtender>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$WearableExtender", java.flags == PUBLIC, .name == "setHintShowBackgroundOnly", .descriptor == "(Z)Landroid/app/Notification$WearableExtender;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$WearableExtender\0", "setHintShowBackgroundOnly\0", "(Z)Landroid/app/Notification$WearableExtender;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getHintShowBackgroundOnly](https://developer.android.com/reference/android/app/Notification.WearableExtender.html#getHintShowBackgroundOnly())
        #[deprecated] pub fn getHintShowBackgroundOnly<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$WearableExtender", java.flags == PUBLIC, .name == "getHintShowBackgroundOnly", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$WearableExtender\0", "getHintShowBackgroundOnly\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setHintAvoidBackgroundClipping](https://developer.android.com/reference/android/app/Notification.WearableExtender.html#setHintAvoidBackgroundClipping(boolean))
        ///
        /// Required features: "android-app-Notification_WearableExtender"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_WearableExtender")))]
        #[deprecated] pub fn setHintAvoidBackgroundClipping<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_WearableExtender>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$WearableExtender", java.flags == PUBLIC, .name == "setHintAvoidBackgroundClipping", .descriptor == "(Z)Landroid/app/Notification$WearableExtender;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$WearableExtender\0", "setHintAvoidBackgroundClipping\0", "(Z)Landroid/app/Notification$WearableExtender;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getHintAvoidBackgroundClipping](https://developer.android.com/reference/android/app/Notification.WearableExtender.html#getHintAvoidBackgroundClipping())
        #[deprecated] pub fn getHintAvoidBackgroundClipping<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$WearableExtender", java.flags == PUBLIC, .name == "getHintAvoidBackgroundClipping", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$WearableExtender\0", "getHintAvoidBackgroundClipping\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setHintScreenTimeout](https://developer.android.com/reference/android/app/Notification.WearableExtender.html#setHintScreenTimeout(int))
        ///
        /// Required features: "android-app-Notification_WearableExtender"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_WearableExtender")))]
        #[deprecated] pub fn setHintScreenTimeout<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_WearableExtender>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$WearableExtender", java.flags == PUBLIC, .name == "setHintScreenTimeout", .descriptor == "(I)Landroid/app/Notification$WearableExtender;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$WearableExtender\0", "setHintScreenTimeout\0", "(I)Landroid/app/Notification$WearableExtender;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getHintScreenTimeout](https://developer.android.com/reference/android/app/Notification.WearableExtender.html#getHintScreenTimeout())
        #[deprecated] pub fn getHintScreenTimeout<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$WearableExtender", java.flags == PUBLIC, .name == "getHintScreenTimeout", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$WearableExtender\0", "getHintScreenTimeout\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setHintAmbientBigPicture](https://developer.android.com/reference/android/app/Notification.WearableExtender.html#setHintAmbientBigPicture(boolean))
        ///
        /// Required features: "android-app-Notification_WearableExtender"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_WearableExtender")))]
        #[deprecated] pub fn setHintAmbientBigPicture<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_WearableExtender>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$WearableExtender", java.flags == PUBLIC, .name == "setHintAmbientBigPicture", .descriptor == "(Z)Landroid/app/Notification$WearableExtender;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$WearableExtender\0", "setHintAmbientBigPicture\0", "(Z)Landroid/app/Notification$WearableExtender;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getHintAmbientBigPicture](https://developer.android.com/reference/android/app/Notification.WearableExtender.html#getHintAmbientBigPicture())
        #[deprecated] pub fn getHintAmbientBigPicture<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$WearableExtender", java.flags == PUBLIC, .name == "getHintAmbientBigPicture", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$WearableExtender\0", "getHintAmbientBigPicture\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setHintContentIntentLaunchesActivity](https://developer.android.com/reference/android/app/Notification.WearableExtender.html#setHintContentIntentLaunchesActivity(boolean))
        ///
        /// Required features: "android-app-Notification_WearableExtender"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_WearableExtender")))]
        pub fn setHintContentIntentLaunchesActivity<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_WearableExtender>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$WearableExtender", java.flags == PUBLIC, .name == "setHintContentIntentLaunchesActivity", .descriptor == "(Z)Landroid/app/Notification$WearableExtender;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$WearableExtender\0", "setHintContentIntentLaunchesActivity\0", "(Z)Landroid/app/Notification$WearableExtender;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getHintContentIntentLaunchesActivity](https://developer.android.com/reference/android/app/Notification.WearableExtender.html#getHintContentIntentLaunchesActivity())
        pub fn getHintContentIntentLaunchesActivity<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$WearableExtender", java.flags == PUBLIC, .name == "getHintContentIntentLaunchesActivity", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$WearableExtender\0", "getHintContentIntentLaunchesActivity\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDismissalId](https://developer.android.com/reference/android/app/Notification.WearableExtender.html#setDismissalId(java.lang.String))
        ///
        /// Required features: "android-app-Notification_WearableExtender", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_WearableExtender", feature = "java-lang-String")))]
        pub fn setDismissalId<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_WearableExtender>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$WearableExtender", java.flags == PUBLIC, .name == "setDismissalId", .descriptor == "(Ljava/lang/String;)Landroid/app/Notification$WearableExtender;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$WearableExtender\0", "setDismissalId\0", "(Ljava/lang/String;)Landroid/app/Notification$WearableExtender;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDismissalId](https://developer.android.com/reference/android/app/Notification.WearableExtender.html#getDismissalId())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getDismissalId<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$WearableExtender", java.flags == PUBLIC, .name == "getDismissalId", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$WearableExtender\0", "getDismissalId\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setBridgeTag](https://developer.android.com/reference/android/app/Notification.WearableExtender.html#setBridgeTag(java.lang.String))
        ///
        /// Required features: "android-app-Notification_WearableExtender", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_WearableExtender", feature = "java-lang-String")))]
        pub fn setBridgeTag<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_WearableExtender>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$WearableExtender", java.flags == PUBLIC, .name == "setBridgeTag", .descriptor == "(Ljava/lang/String;)Landroid/app/Notification$WearableExtender;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$WearableExtender\0", "setBridgeTag\0", "(Ljava/lang/String;)Landroid/app/Notification$WearableExtender;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getBridgeTag](https://developer.android.com/reference/android/app/Notification.WearableExtender.html#getBridgeTag())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getBridgeTag<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$WearableExtender", java.flags == PUBLIC, .name == "getBridgeTag", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$WearableExtender\0", "getBridgeTag\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Bridge method - type erasure
        // /// [clone](https://developer.android.com/reference/android/app/Notification.WearableExtender.html#clone())
        // ///
        // /// Required features: "java-lang-Object"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        // pub fn clone<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/app/Notification$WearableExtender", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "clone", .descriptor == "()Ljava/lang/Object;"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$WearableExtender\0", "clone\0", "()Ljava/lang/Object;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// public static final [SCREEN_TIMEOUT_LONG](https://developer.android.com/reference/android/app/Notification.WearableExtender.html#SCREEN_TIMEOUT_LONG)
        #[deprecated] pub const SCREEN_TIMEOUT_LONG : i32 = -1;

        /// public static final [SCREEN_TIMEOUT_SHORT](https://developer.android.com/reference/android/app/Notification.WearableExtender.html#SCREEN_TIMEOUT_SHORT)
        #[deprecated] pub const SCREEN_TIMEOUT_SHORT : i32 = 0;

        /// public static final [SIZE_DEFAULT](https://developer.android.com/reference/android/app/Notification.WearableExtender.html#SIZE_DEFAULT)
        #[deprecated] pub const SIZE_DEFAULT : i32 = 0;

        /// public static final [SIZE_FULL_SCREEN](https://developer.android.com/reference/android/app/Notification.WearableExtender.html#SIZE_FULL_SCREEN)
        #[deprecated] pub const SIZE_FULL_SCREEN : i32 = 5;

        /// public static final [SIZE_LARGE](https://developer.android.com/reference/android/app/Notification.WearableExtender.html#SIZE_LARGE)
        #[deprecated] pub const SIZE_LARGE : i32 = 4;

        /// public static final [SIZE_MEDIUM](https://developer.android.com/reference/android/app/Notification.WearableExtender.html#SIZE_MEDIUM)
        #[deprecated] pub const SIZE_MEDIUM : i32 = 3;

        /// public static final [SIZE_SMALL](https://developer.android.com/reference/android/app/Notification.WearableExtender.html#SIZE_SMALL)
        #[deprecated] pub const SIZE_SMALL : i32 = 2;

        /// public static final [SIZE_XSMALL](https://developer.android.com/reference/android/app/Notification.WearableExtender.html#SIZE_XSMALL)
        #[deprecated] pub const SIZE_XSMALL : i32 = 1;

        /// public static final [UNSET_ACTION_INDEX](https://developer.android.com/reference/android/app/Notification.WearableExtender.html#UNSET_ACTION_INDEX)
        pub const UNSET_ACTION_INDEX : i32 = -1;
    }
}
