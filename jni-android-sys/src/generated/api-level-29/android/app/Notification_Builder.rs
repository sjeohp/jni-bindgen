// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-app-Notification_Builder"))]
__jni_bindgen! {
    /// public class [Notification.Builder](https://developer.android.com/reference/android/app/Notification.Builder.html)
    ///
    /// Required feature: android-app-Notification_Builder
    public class Notification_Builder ("android/app/Notification$Builder") extends crate::java::lang::Object {

        /// [Builder](https://developer.android.com/reference/android/app/Notification.Builder.html#Builder(android.content.Context,%20java.lang.String))
        ///
        /// Required features: "android-content-Context", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "java-lang-String")))]
        pub fn new_Context_String<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::app::Notification_Builder>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/content/Context;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "<init>\0", "(Landroid/content/Context;Ljava/lang/String;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [Builder](https://developer.android.com/reference/android/app/Notification.Builder.html#Builder(android.content.Context))
        ///
        /// Required features: "android-content-Context"
        #[cfg(any(feature = "all", all(feature = "android-content-Context")))]
        #[deprecated] pub fn new_Context<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::app::Notification_Builder>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/content/Context;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "<init>\0", "(Landroid/content/Context;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setShortcutId](https://developer.android.com/reference/android/app/Notification.Builder.html#setShortcutId(java.lang.String))
        ///
        /// Required features: "android-app-Notification_Builder", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Builder", feature = "java-lang-String")))]
        pub fn setShortcutId<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC, .name == "setShortcutId", .descriptor == "(Ljava/lang/String;)Landroid/app/Notification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "setShortcutId\0", "(Ljava/lang/String;)Landroid/app/Notification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setLocusId](https://developer.android.com/reference/android/app/Notification.Builder.html#setLocusId(android.content.LocusId))
        ///
        /// Required features: "android-app-Notification_Builder", "android-content-LocusId"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Builder", feature = "android-content-LocusId")))]
        pub fn setLocusId<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::LocusId>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC, .name == "setLocusId", .descriptor == "(Landroid/content/LocusId;)Landroid/app/Notification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "setLocusId\0", "(Landroid/content/LocusId;)Landroid/app/Notification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setBadgeIconType](https://developer.android.com/reference/android/app/Notification.Builder.html#setBadgeIconType(int))
        ///
        /// Required features: "android-app-Notification_Builder"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Builder")))]
        pub fn setBadgeIconType<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC, .name == "setBadgeIconType", .descriptor == "(I)Landroid/app/Notification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "setBadgeIconType\0", "(I)Landroid/app/Notification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setGroupAlertBehavior](https://developer.android.com/reference/android/app/Notification.Builder.html#setGroupAlertBehavior(int))
        ///
        /// Required features: "android-app-Notification_Builder"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Builder")))]
        pub fn setGroupAlertBehavior<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC, .name == "setGroupAlertBehavior", .descriptor == "(I)Landroid/app/Notification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "setGroupAlertBehavior\0", "(I)Landroid/app/Notification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setBubbleMetadata](https://developer.android.com/reference/android/app/Notification.Builder.html#setBubbleMetadata(android.app.Notification.BubbleMetadata))
        ///
        /// Required features: "android-app-Notification_BubbleMetadata", "android-app-Notification_Builder"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_BubbleMetadata", feature = "android-app-Notification_Builder")))]
        pub fn setBubbleMetadata<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Notification_BubbleMetadata>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC, .name == "setBubbleMetadata", .descriptor == "(Landroid/app/Notification$BubbleMetadata;)Landroid/app/Notification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "setBubbleMetadata\0", "(Landroid/app/Notification$BubbleMetadata;)Landroid/app/Notification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setChannelId](https://developer.android.com/reference/android/app/Notification.Builder.html#setChannelId(java.lang.String))
        ///
        /// Required features: "android-app-Notification_Builder", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Builder", feature = "java-lang-String")))]
        pub fn setChannelId<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC, .name == "setChannelId", .descriptor == "(Ljava/lang/String;)Landroid/app/Notification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "setChannelId\0", "(Ljava/lang/String;)Landroid/app/Notification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTimeoutAfter](https://developer.android.com/reference/android/app/Notification.Builder.html#setTimeoutAfter(long))
        ///
        /// Required features: "android-app-Notification_Builder"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Builder")))]
        pub fn setTimeoutAfter<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC, .name == "setTimeoutAfter", .descriptor == "(J)Landroid/app/Notification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "setTimeoutAfter\0", "(J)Landroid/app/Notification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setWhen](https://developer.android.com/reference/android/app/Notification.Builder.html#setWhen(long))
        ///
        /// Required features: "android-app-Notification_Builder"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Builder")))]
        pub fn setWhen<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC, .name == "setWhen", .descriptor == "(J)Landroid/app/Notification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "setWhen\0", "(J)Landroid/app/Notification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setShowWhen](https://developer.android.com/reference/android/app/Notification.Builder.html#setShowWhen(boolean))
        ///
        /// Required features: "android-app-Notification_Builder"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Builder")))]
        pub fn setShowWhen<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC, .name == "setShowWhen", .descriptor == "(Z)Landroid/app/Notification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "setShowWhen\0", "(Z)Landroid/app/Notification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setUsesChronometer](https://developer.android.com/reference/android/app/Notification.Builder.html#setUsesChronometer(boolean))
        ///
        /// Required features: "android-app-Notification_Builder"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Builder")))]
        pub fn setUsesChronometer<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC, .name == "setUsesChronometer", .descriptor == "(Z)Landroid/app/Notification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "setUsesChronometer\0", "(Z)Landroid/app/Notification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setChronometerCountDown](https://developer.android.com/reference/android/app/Notification.Builder.html#setChronometerCountDown(boolean))
        ///
        /// Required features: "android-app-Notification_Builder"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Builder")))]
        pub fn setChronometerCountDown<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC, .name == "setChronometerCountDown", .descriptor == "(Z)Landroid/app/Notification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "setChronometerCountDown\0", "(Z)Landroid/app/Notification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setSmallIcon](https://developer.android.com/reference/android/app/Notification.Builder.html#setSmallIcon(int))
        ///
        /// Required features: "android-app-Notification_Builder"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Builder")))]
        pub fn setSmallIcon_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC, .name == "setSmallIcon", .descriptor == "(I)Landroid/app/Notification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "setSmallIcon\0", "(I)Landroid/app/Notification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setSmallIcon](https://developer.android.com/reference/android/app/Notification.Builder.html#setSmallIcon(int,%20int))
        ///
        /// Required features: "android-app-Notification_Builder"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Builder")))]
        pub fn setSmallIcon_int_int<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC, .name == "setSmallIcon", .descriptor == "(II)Landroid/app/Notification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "setSmallIcon\0", "(II)Landroid/app/Notification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setSmallIcon](https://developer.android.com/reference/android/app/Notification.Builder.html#setSmallIcon(android.graphics.drawable.Icon))
        ///
        /// Required features: "android-app-Notification_Builder", "android-graphics-drawable-Icon"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Builder", feature = "android-graphics-drawable-Icon")))]
        pub fn setSmallIcon_Icon<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::drawable::Icon>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC, .name == "setSmallIcon", .descriptor == "(Landroid/graphics/drawable/Icon;)Landroid/app/Notification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "setSmallIcon\0", "(Landroid/graphics/drawable/Icon;)Landroid/app/Notification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setContentTitle](https://developer.android.com/reference/android/app/Notification.Builder.html#setContentTitle(java.lang.CharSequence))
        ///
        /// Required features: "android-app-Notification_Builder", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Builder", feature = "java-lang-CharSequence")))]
        pub fn setContentTitle<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC, .name == "setContentTitle", .descriptor == "(Ljava/lang/CharSequence;)Landroid/app/Notification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "setContentTitle\0", "(Ljava/lang/CharSequence;)Landroid/app/Notification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setContentText](https://developer.android.com/reference/android/app/Notification.Builder.html#setContentText(java.lang.CharSequence))
        ///
        /// Required features: "android-app-Notification_Builder", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Builder", feature = "java-lang-CharSequence")))]
        pub fn setContentText<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC, .name == "setContentText", .descriptor == "(Ljava/lang/CharSequence;)Landroid/app/Notification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "setContentText\0", "(Ljava/lang/CharSequence;)Landroid/app/Notification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setSubText](https://developer.android.com/reference/android/app/Notification.Builder.html#setSubText(java.lang.CharSequence))
        ///
        /// Required features: "android-app-Notification_Builder", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Builder", feature = "java-lang-CharSequence")))]
        pub fn setSubText<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC, .name == "setSubText", .descriptor == "(Ljava/lang/CharSequence;)Landroid/app/Notification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "setSubText\0", "(Ljava/lang/CharSequence;)Landroid/app/Notification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setSettingsText](https://developer.android.com/reference/android/app/Notification.Builder.html#setSettingsText(java.lang.CharSequence))
        ///
        /// Required features: "android-app-Notification_Builder", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Builder", feature = "java-lang-CharSequence")))]
        pub fn setSettingsText<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC, .name == "setSettingsText", .descriptor == "(Ljava/lang/CharSequence;)Landroid/app/Notification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "setSettingsText\0", "(Ljava/lang/CharSequence;)Landroid/app/Notification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setRemoteInputHistory](https://developer.android.com/reference/android/app/Notification.Builder.html#setRemoteInputHistory(java.lang.CharSequence%5B%5D))
        ///
        /// Required features: "android-app-Notification_Builder", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Builder", feature = "java-lang-CharSequence")))]
        pub fn setRemoteInputHistory<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::CharSequence, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC, .name == "setRemoteInputHistory", .descriptor == "([Ljava/lang/CharSequence;)Landroid/app/Notification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "setRemoteInputHistory\0", "([Ljava/lang/CharSequence;)Landroid/app/Notification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setNumber](https://developer.android.com/reference/android/app/Notification.Builder.html#setNumber(int))
        ///
        /// Required features: "android-app-Notification_Builder"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Builder")))]
        pub fn setNumber<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC, .name == "setNumber", .descriptor == "(I)Landroid/app/Notification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "setNumber\0", "(I)Landroid/app/Notification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setContentInfo](https://developer.android.com/reference/android/app/Notification.Builder.html#setContentInfo(java.lang.CharSequence))
        ///
        /// Required features: "android-app-Notification_Builder", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Builder", feature = "java-lang-CharSequence")))]
        #[deprecated] pub fn setContentInfo<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC, .name == "setContentInfo", .descriptor == "(Ljava/lang/CharSequence;)Landroid/app/Notification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "setContentInfo\0", "(Ljava/lang/CharSequence;)Landroid/app/Notification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setProgress](https://developer.android.com/reference/android/app/Notification.Builder.html#setProgress(int,%20int,%20boolean))
        ///
        /// Required features: "android-app-Notification_Builder"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Builder")))]
        pub fn setProgress<'env>(&'env self, arg0: i32, arg1: i32, arg2: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC, .name == "setProgress", .descriptor == "(IIZ)Landroid/app/Notification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "setProgress\0", "(IIZ)Landroid/app/Notification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setContent](https://developer.android.com/reference/android/app/Notification.Builder.html#setContent(android.widget.RemoteViews))
        ///
        /// Required features: "android-app-Notification_Builder", "android-widget-RemoteViews"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Builder", feature = "android-widget-RemoteViews")))]
        #[deprecated] pub fn setContent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::widget::RemoteViews>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC, .name == "setContent", .descriptor == "(Landroid/widget/RemoteViews;)Landroid/app/Notification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "setContent\0", "(Landroid/widget/RemoteViews;)Landroid/app/Notification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setCustomContentView](https://developer.android.com/reference/android/app/Notification.Builder.html#setCustomContentView(android.widget.RemoteViews))
        ///
        /// Required features: "android-app-Notification_Builder", "android-widget-RemoteViews"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Builder", feature = "android-widget-RemoteViews")))]
        pub fn setCustomContentView<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::widget::RemoteViews>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC, .name == "setCustomContentView", .descriptor == "(Landroid/widget/RemoteViews;)Landroid/app/Notification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "setCustomContentView\0", "(Landroid/widget/RemoteViews;)Landroid/app/Notification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setCustomBigContentView](https://developer.android.com/reference/android/app/Notification.Builder.html#setCustomBigContentView(android.widget.RemoteViews))
        ///
        /// Required features: "android-app-Notification_Builder", "android-widget-RemoteViews"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Builder", feature = "android-widget-RemoteViews")))]
        pub fn setCustomBigContentView<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::widget::RemoteViews>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC, .name == "setCustomBigContentView", .descriptor == "(Landroid/widget/RemoteViews;)Landroid/app/Notification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "setCustomBigContentView\0", "(Landroid/widget/RemoteViews;)Landroid/app/Notification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setCustomHeadsUpContentView](https://developer.android.com/reference/android/app/Notification.Builder.html#setCustomHeadsUpContentView(android.widget.RemoteViews))
        ///
        /// Required features: "android-app-Notification_Builder", "android-widget-RemoteViews"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Builder", feature = "android-widget-RemoteViews")))]
        pub fn setCustomHeadsUpContentView<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::widget::RemoteViews>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC, .name == "setCustomHeadsUpContentView", .descriptor == "(Landroid/widget/RemoteViews;)Landroid/app/Notification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "setCustomHeadsUpContentView\0", "(Landroid/widget/RemoteViews;)Landroid/app/Notification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setContentIntent](https://developer.android.com/reference/android/app/Notification.Builder.html#setContentIntent(android.app.PendingIntent))
        ///
        /// Required features: "android-app-Notification_Builder", "android-app-PendingIntent"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Builder", feature = "android-app-PendingIntent")))]
        pub fn setContentIntent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::PendingIntent>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC, .name == "setContentIntent", .descriptor == "(Landroid/app/PendingIntent;)Landroid/app/Notification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "setContentIntent\0", "(Landroid/app/PendingIntent;)Landroid/app/Notification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDeleteIntent](https://developer.android.com/reference/android/app/Notification.Builder.html#setDeleteIntent(android.app.PendingIntent))
        ///
        /// Required features: "android-app-Notification_Builder", "android-app-PendingIntent"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Builder", feature = "android-app-PendingIntent")))]
        pub fn setDeleteIntent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::PendingIntent>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC, .name == "setDeleteIntent", .descriptor == "(Landroid/app/PendingIntent;)Landroid/app/Notification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "setDeleteIntent\0", "(Landroid/app/PendingIntent;)Landroid/app/Notification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setFullScreenIntent](https://developer.android.com/reference/android/app/Notification.Builder.html#setFullScreenIntent(android.app.PendingIntent,%20boolean))
        ///
        /// Required features: "android-app-Notification_Builder", "android-app-PendingIntent"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Builder", feature = "android-app-PendingIntent")))]
        pub fn setFullScreenIntent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::PendingIntent>>, arg1: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC, .name == "setFullScreenIntent", .descriptor == "(Landroid/app/PendingIntent;Z)Landroid/app/Notification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "setFullScreenIntent\0", "(Landroid/app/PendingIntent;Z)Landroid/app/Notification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTicker](https://developer.android.com/reference/android/app/Notification.Builder.html#setTicker(java.lang.CharSequence))
        ///
        /// Required features: "android-app-Notification_Builder", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Builder", feature = "java-lang-CharSequence")))]
        pub fn setTicker_CharSequence<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC, .name == "setTicker", .descriptor == "(Ljava/lang/CharSequence;)Landroid/app/Notification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "setTicker\0", "(Ljava/lang/CharSequence;)Landroid/app/Notification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTicker](https://developer.android.com/reference/android/app/Notification.Builder.html#setTicker(java.lang.CharSequence,%20android.widget.RemoteViews))
        ///
        /// Required features: "android-app-Notification_Builder", "android-widget-RemoteViews", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Builder", feature = "android-widget-RemoteViews", feature = "java-lang-CharSequence")))]
        #[deprecated] pub fn setTicker_CharSequence_RemoteViews<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::widget::RemoteViews>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC, .name == "setTicker", .descriptor == "(Ljava/lang/CharSequence;Landroid/widget/RemoteViews;)Landroid/app/Notification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "setTicker\0", "(Ljava/lang/CharSequence;Landroid/widget/RemoteViews;)Landroid/app/Notification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setLargeIcon](https://developer.android.com/reference/android/app/Notification.Builder.html#setLargeIcon(android.graphics.Bitmap))
        ///
        /// Required features: "android-app-Notification_Builder", "android-graphics-Bitmap"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Builder", feature = "android-graphics-Bitmap")))]
        pub fn setLargeIcon_Bitmap<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Bitmap>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC, .name == "setLargeIcon", .descriptor == "(Landroid/graphics/Bitmap;)Landroid/app/Notification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "setLargeIcon\0", "(Landroid/graphics/Bitmap;)Landroid/app/Notification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setLargeIcon](https://developer.android.com/reference/android/app/Notification.Builder.html#setLargeIcon(android.graphics.drawable.Icon))
        ///
        /// Required features: "android-app-Notification_Builder", "android-graphics-drawable-Icon"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Builder", feature = "android-graphics-drawable-Icon")))]
        pub fn setLargeIcon_Icon<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::drawable::Icon>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC, .name == "setLargeIcon", .descriptor == "(Landroid/graphics/drawable/Icon;)Landroid/app/Notification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "setLargeIcon\0", "(Landroid/graphics/drawable/Icon;)Landroid/app/Notification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setSound](https://developer.android.com/reference/android/app/Notification.Builder.html#setSound(android.net.Uri))
        ///
        /// Required features: "android-app-Notification_Builder", "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Builder", feature = "android-net-Uri")))]
        #[deprecated] pub fn setSound_Uri<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC, .name == "setSound", .descriptor == "(Landroid/net/Uri;)Landroid/app/Notification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "setSound\0", "(Landroid/net/Uri;)Landroid/app/Notification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setSound](https://developer.android.com/reference/android/app/Notification.Builder.html#setSound(android.net.Uri,%20int))
        ///
        /// Required features: "android-app-Notification_Builder", "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Builder", feature = "android-net-Uri")))]
        #[deprecated] pub fn setSound_Uri_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC, .name == "setSound", .descriptor == "(Landroid/net/Uri;I)Landroid/app/Notification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "setSound\0", "(Landroid/net/Uri;I)Landroid/app/Notification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setSound](https://developer.android.com/reference/android/app/Notification.Builder.html#setSound(android.net.Uri,%20android.media.AudioAttributes))
        ///
        /// Required features: "android-app-Notification_Builder", "android-media-AudioAttributes", "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Builder", feature = "android-media-AudioAttributes", feature = "android-net-Uri")))]
        #[deprecated] pub fn setSound_Uri_AudioAttributes<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::AudioAttributes>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC, .name == "setSound", .descriptor == "(Landroid/net/Uri;Landroid/media/AudioAttributes;)Landroid/app/Notification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "setSound\0", "(Landroid/net/Uri;Landroid/media/AudioAttributes;)Landroid/app/Notification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setVibrate](https://developer.android.com/reference/android/app/Notification.Builder.html#setVibrate(long%5B%5D))
        ///
        /// Required features: "android-app-Notification_Builder"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Builder")))]
        #[deprecated] pub fn setVibrate<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::LongArray>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC, .name == "setVibrate", .descriptor == "([J)Landroid/app/Notification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "setVibrate\0", "([J)Landroid/app/Notification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setLights](https://developer.android.com/reference/android/app/Notification.Builder.html#setLights(int,%20int,%20int))
        ///
        /// Required features: "android-app-Notification_Builder"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Builder")))]
        #[deprecated] pub fn setLights<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC, .name == "setLights", .descriptor == "(III)Landroid/app/Notification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "setLights\0", "(III)Landroid/app/Notification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOngoing](https://developer.android.com/reference/android/app/Notification.Builder.html#setOngoing(boolean))
        ///
        /// Required features: "android-app-Notification_Builder"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Builder")))]
        pub fn setOngoing<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC, .name == "setOngoing", .descriptor == "(Z)Landroid/app/Notification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "setOngoing\0", "(Z)Landroid/app/Notification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setColorized](https://developer.android.com/reference/android/app/Notification.Builder.html#setColorized(boolean))
        ///
        /// Required features: "android-app-Notification_Builder"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Builder")))]
        pub fn setColorized<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC, .name == "setColorized", .descriptor == "(Z)Landroid/app/Notification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "setColorized\0", "(Z)Landroid/app/Notification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOnlyAlertOnce](https://developer.android.com/reference/android/app/Notification.Builder.html#setOnlyAlertOnce(boolean))
        ///
        /// Required features: "android-app-Notification_Builder"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Builder")))]
        pub fn setOnlyAlertOnce<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC, .name == "setOnlyAlertOnce", .descriptor == "(Z)Landroid/app/Notification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "setOnlyAlertOnce\0", "(Z)Landroid/app/Notification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAutoCancel](https://developer.android.com/reference/android/app/Notification.Builder.html#setAutoCancel(boolean))
        ///
        /// Required features: "android-app-Notification_Builder"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Builder")))]
        pub fn setAutoCancel<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC, .name == "setAutoCancel", .descriptor == "(Z)Landroid/app/Notification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "setAutoCancel\0", "(Z)Landroid/app/Notification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setLocalOnly](https://developer.android.com/reference/android/app/Notification.Builder.html#setLocalOnly(boolean))
        ///
        /// Required features: "android-app-Notification_Builder"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Builder")))]
        pub fn setLocalOnly<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC, .name == "setLocalOnly", .descriptor == "(Z)Landroid/app/Notification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "setLocalOnly\0", "(Z)Landroid/app/Notification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDefaults](https://developer.android.com/reference/android/app/Notification.Builder.html#setDefaults(int))
        ///
        /// Required features: "android-app-Notification_Builder"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Builder")))]
        #[deprecated] pub fn setDefaults<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC, .name == "setDefaults", .descriptor == "(I)Landroid/app/Notification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "setDefaults\0", "(I)Landroid/app/Notification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPriority](https://developer.android.com/reference/android/app/Notification.Builder.html#setPriority(int))
        ///
        /// Required features: "android-app-Notification_Builder"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Builder")))]
        #[deprecated] pub fn setPriority<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC, .name == "setPriority", .descriptor == "(I)Landroid/app/Notification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "setPriority\0", "(I)Landroid/app/Notification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setCategory](https://developer.android.com/reference/android/app/Notification.Builder.html#setCategory(java.lang.String))
        ///
        /// Required features: "android-app-Notification_Builder", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Builder", feature = "java-lang-String")))]
        pub fn setCategory<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC, .name == "setCategory", .descriptor == "(Ljava/lang/String;)Landroid/app/Notification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "setCategory\0", "(Ljava/lang/String;)Landroid/app/Notification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addPerson](https://developer.android.com/reference/android/app/Notification.Builder.html#addPerson(java.lang.String))
        ///
        /// Required features: "android-app-Notification_Builder", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Builder", feature = "java-lang-String")))]
        #[deprecated] pub fn addPerson_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC, .name == "addPerson", .descriptor == "(Ljava/lang/String;)Landroid/app/Notification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "addPerson\0", "(Ljava/lang/String;)Landroid/app/Notification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addPerson](https://developer.android.com/reference/android/app/Notification.Builder.html#addPerson(android.app.Person))
        ///
        /// Required features: "android-app-Notification_Builder", "android-app-Person"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Builder", feature = "android-app-Person")))]
        pub fn addPerson_Person<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Person>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC, .name == "addPerson", .descriptor == "(Landroid/app/Person;)Landroid/app/Notification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "addPerson\0", "(Landroid/app/Person;)Landroid/app/Notification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setGroup](https://developer.android.com/reference/android/app/Notification.Builder.html#setGroup(java.lang.String))
        ///
        /// Required features: "android-app-Notification_Builder", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Builder", feature = "java-lang-String")))]
        pub fn setGroup<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC, .name == "setGroup", .descriptor == "(Ljava/lang/String;)Landroid/app/Notification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "setGroup\0", "(Ljava/lang/String;)Landroid/app/Notification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setGroupSummary](https://developer.android.com/reference/android/app/Notification.Builder.html#setGroupSummary(boolean))
        ///
        /// Required features: "android-app-Notification_Builder"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Builder")))]
        pub fn setGroupSummary<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC, .name == "setGroupSummary", .descriptor == "(Z)Landroid/app/Notification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "setGroupSummary\0", "(Z)Landroid/app/Notification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setSortKey](https://developer.android.com/reference/android/app/Notification.Builder.html#setSortKey(java.lang.String))
        ///
        /// Required features: "android-app-Notification_Builder", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Builder", feature = "java-lang-String")))]
        pub fn setSortKey<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC, .name == "setSortKey", .descriptor == "(Ljava/lang/String;)Landroid/app/Notification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "setSortKey\0", "(Ljava/lang/String;)Landroid/app/Notification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addExtras](https://developer.android.com/reference/android/app/Notification.Builder.html#addExtras(android.os.Bundle))
        ///
        /// Required features: "android-app-Notification_Builder", "android-os-Bundle"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Builder", feature = "android-os-Bundle")))]
        pub fn addExtras<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC, .name == "addExtras", .descriptor == "(Landroid/os/Bundle;)Landroid/app/Notification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "addExtras\0", "(Landroid/os/Bundle;)Landroid/app/Notification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setExtras](https://developer.android.com/reference/android/app/Notification.Builder.html#setExtras(android.os.Bundle))
        ///
        /// Required features: "android-app-Notification_Builder", "android-os-Bundle"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Builder", feature = "android-os-Bundle")))]
        pub fn setExtras<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC, .name == "setExtras", .descriptor == "(Landroid/os/Bundle;)Landroid/app/Notification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "setExtras\0", "(Landroid/os/Bundle;)Landroid/app/Notification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getExtras](https://developer.android.com/reference/android/app/Notification.Builder.html#getExtras())
        ///
        /// Required features: "android-os-Bundle"
        #[cfg(any(feature = "all", all(feature = "android-os-Bundle")))]
        pub fn getExtras<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Bundle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC, .name == "getExtras", .descriptor == "()Landroid/os/Bundle;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "getExtras\0", "()Landroid/os/Bundle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addAction](https://developer.android.com/reference/android/app/Notification.Builder.html#addAction(int,%20java.lang.CharSequence,%20android.app.PendingIntent))
        ///
        /// Required features: "android-app-Notification_Builder", "android-app-PendingIntent", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Builder", feature = "android-app-PendingIntent", feature = "java-lang-CharSequence")))]
        #[deprecated] pub fn addAction_int_CharSequence_PendingIntent<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::PendingIntent>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC, .name == "addAction", .descriptor == "(ILjava/lang/CharSequence;Landroid/app/PendingIntent;)Landroid/app/Notification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "addAction\0", "(ILjava/lang/CharSequence;Landroid/app/PendingIntent;)Landroid/app/Notification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addAction](https://developer.android.com/reference/android/app/Notification.Builder.html#addAction(android.app.Notification.Action))
        ///
        /// Required features: "android-app-Notification_Action", "android-app-Notification_Builder"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Action", feature = "android-app-Notification_Builder")))]
        pub fn addAction_Action<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Notification_Action>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC, .name == "addAction", .descriptor == "(Landroid/app/Notification$Action;)Landroid/app/Notification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "addAction\0", "(Landroid/app/Notification$Action;)Landroid/app/Notification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setActions](https://developer.android.com/reference/android/app/Notification.Builder.html#setActions(android.app.Notification.Action...))
        ///
        /// Required features: "android-app-Notification_Action", "android-app-Notification_Builder"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Action", feature = "android-app-Notification_Builder")))]
        pub fn setActions<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::android::app::Notification_Action, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC | VARARGS, .name == "setActions", .descriptor == "([Landroid/app/Notification$Action;)Landroid/app/Notification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "setActions\0", "([Landroid/app/Notification$Action;)Landroid/app/Notification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setStyle](https://developer.android.com/reference/android/app/Notification.Builder.html#setStyle(android.app.Notification.Style))
        ///
        /// Required features: "android-app-Notification_Builder", "android-app-Notification_Style"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Builder", feature = "android-app-Notification_Style")))]
        pub fn setStyle<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Notification_Style>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC, .name == "setStyle", .descriptor == "(Landroid/app/Notification$Style;)Landroid/app/Notification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "setStyle\0", "(Landroid/app/Notification$Style;)Landroid/app/Notification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getStyle](https://developer.android.com/reference/android/app/Notification.Builder.html#getStyle())
        ///
        /// Required features: "android-app-Notification_Style"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Style")))]
        pub fn getStyle<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Style>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC, .name == "getStyle", .descriptor == "()Landroid/app/Notification$Style;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "getStyle\0", "()Landroid/app/Notification$Style;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setVisibility](https://developer.android.com/reference/android/app/Notification.Builder.html#setVisibility(int))
        ///
        /// Required features: "android-app-Notification_Builder"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Builder")))]
        pub fn setVisibility<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC, .name == "setVisibility", .descriptor == "(I)Landroid/app/Notification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "setVisibility\0", "(I)Landroid/app/Notification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPublicVersion](https://developer.android.com/reference/android/app/Notification.Builder.html#setPublicVersion(android.app.Notification))
        ///
        /// Required features: "android-app-Notification", "android-app-Notification_Builder"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification", feature = "android-app-Notification_Builder")))]
        pub fn setPublicVersion<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Notification>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC, .name == "setPublicVersion", .descriptor == "(Landroid/app/Notification;)Landroid/app/Notification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "setPublicVersion\0", "(Landroid/app/Notification;)Landroid/app/Notification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [extend](https://developer.android.com/reference/android/app/Notification.Builder.html#extend(android.app.Notification.Extender))
        ///
        /// Required features: "android-app-Notification_Builder", "android-app-Notification_Extender"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Builder", feature = "android-app-Notification_Extender")))]
        pub fn extend<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Notification_Extender>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC, .name == "extend", .descriptor == "(Landroid/app/Notification$Extender;)Landroid/app/Notification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "extend\0", "(Landroid/app/Notification$Extender;)Landroid/app/Notification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setColor](https://developer.android.com/reference/android/app/Notification.Builder.html#setColor(int))
        ///
        /// Required features: "android-app-Notification_Builder"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Builder")))]
        pub fn setColor<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC, .name == "setColor", .descriptor == "(I)Landroid/app/Notification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "setColor\0", "(I)Landroid/app/Notification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createContentView](https://developer.android.com/reference/android/app/Notification.Builder.html#createContentView())
        ///
        /// Required features: "android-widget-RemoteViews"
        #[cfg(any(feature = "all", all(feature = "android-widget-RemoteViews")))]
        pub fn createContentView<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::widget::RemoteViews>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC, .name == "createContentView", .descriptor == "()Landroid/widget/RemoteViews;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "createContentView\0", "()Landroid/widget/RemoteViews;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createBigContentView](https://developer.android.com/reference/android/app/Notification.Builder.html#createBigContentView())
        ///
        /// Required features: "android-widget-RemoteViews"
        #[cfg(any(feature = "all", all(feature = "android-widget-RemoteViews")))]
        pub fn createBigContentView<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::widget::RemoteViews>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC, .name == "createBigContentView", .descriptor == "()Landroid/widget/RemoteViews;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "createBigContentView\0", "()Landroid/widget/RemoteViews;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createHeadsUpContentView](https://developer.android.com/reference/android/app/Notification.Builder.html#createHeadsUpContentView())
        ///
        /// Required features: "android-widget-RemoteViews"
        #[cfg(any(feature = "all", all(feature = "android-widget-RemoteViews")))]
        pub fn createHeadsUpContentView<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::widget::RemoteViews>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC, .name == "createHeadsUpContentView", .descriptor == "()Landroid/widget/RemoteViews;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "createHeadsUpContentView\0", "()Landroid/widget/RemoteViews;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [recoverBuilder](https://developer.android.com/reference/android/app/Notification.Builder.html#recoverBuilder(android.content.Context,%20android.app.Notification))
        ///
        /// Required features: "android-app-Notification", "android-app-Notification_Builder", "android-content-Context"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification", feature = "android-app-Notification_Builder", feature = "android-content-Context")))]
        pub fn recoverBuilder<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Notification>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC | STATIC, .name == "recoverBuilder", .descriptor == "(Landroid/content/Context;Landroid/app/Notification;)Landroid/app/Notification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/app/Notification$Builder\0", "recoverBuilder\0", "(Landroid/content/Context;Landroid/app/Notification;)Landroid/app/Notification$Builder;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAllowSystemGeneratedContextualActions](https://developer.android.com/reference/android/app/Notification.Builder.html#setAllowSystemGeneratedContextualActions(boolean))
        ///
        /// Required features: "android-app-Notification_Builder"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Builder")))]
        pub fn setAllowSystemGeneratedContextualActions<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC, .name == "setAllowSystemGeneratedContextualActions", .descriptor == "(Z)Landroid/app/Notification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "setAllowSystemGeneratedContextualActions\0", "(Z)Landroid/app/Notification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNotification](https://developer.android.com/reference/android/app/Notification.Builder.html#getNotification())
        ///
        /// Required features: "android-app-Notification"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification")))]
        #[deprecated] pub fn getNotification<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC, .name == "getNotification", .descriptor == "()Landroid/app/Notification;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "getNotification\0", "()Landroid/app/Notification;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [build](https://developer.android.com/reference/android/app/Notification.Builder.html#build())
        ///
        /// Required features: "android-app-Notification"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification")))]
        pub fn build<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Builder", java.flags == PUBLIC, .name == "build", .descriptor == "()Landroid/app/Notification;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Builder\0", "build\0", "()Landroid/app/Notification;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
