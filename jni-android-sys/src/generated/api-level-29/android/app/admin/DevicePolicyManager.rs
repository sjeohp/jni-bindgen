// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-app-admin-DevicePolicyManager"))]
__jni_bindgen! {
    /// public class [DevicePolicyManager](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html)
    ///
    /// Required feature: android-app-admin-DevicePolicyManager
    public class DevicePolicyManager ("android/app/admin/DevicePolicyManager") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [DevicePolicyManager](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#DevicePolicyManager())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::app::admin::DevicePolicyManager>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/app/admin/DevicePolicyManager", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [isAdminActive](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isAdminActive(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn isAdminActive<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "isAdminActive", .descriptor == "(Landroid/content/ComponentName;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "isAdminActive\0", "(Landroid/content/ComponentName;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getActiveAdmins](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getActiveAdmins())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getActiveAdmins<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "getActiveAdmins", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "getActiveAdmins\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeActiveAdmin](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#removeActiveAdmin(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn removeActiveAdmin<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "removeActiveAdmin", .descriptor == "(Landroid/content/ComponentName;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "removeActiveAdmin\0", "(Landroid/content/ComponentName;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasGrantedPolicy](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#hasGrantedPolicy(android.content.ComponentName,%20int))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn hasGrantedPolicy<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "hasGrantedPolicy", .descriptor == "(Landroid/content/ComponentName;I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "hasGrantedPolicy\0", "(Landroid/content/ComponentName;I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPasswordQuality](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setPasswordQuality(android.content.ComponentName,%20int))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn setPasswordQuality<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setPasswordQuality", .descriptor == "(Landroid/content/ComponentName;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setPasswordQuality\0", "(Landroid/content/ComponentName;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPasswordQuality](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getPasswordQuality(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn getPasswordQuality<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "getPasswordQuality", .descriptor == "(Landroid/content/ComponentName;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "getPasswordQuality\0", "(Landroid/content/ComponentName;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPasswordMinimumLength](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setPasswordMinimumLength(android.content.ComponentName,%20int))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn setPasswordMinimumLength<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setPasswordMinimumLength", .descriptor == "(Landroid/content/ComponentName;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setPasswordMinimumLength\0", "(Landroid/content/ComponentName;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPasswordMinimumLength](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getPasswordMinimumLength(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn getPasswordMinimumLength<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "getPasswordMinimumLength", .descriptor == "(Landroid/content/ComponentName;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "getPasswordMinimumLength\0", "(Landroid/content/ComponentName;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPasswordMinimumUpperCase](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setPasswordMinimumUpperCase(android.content.ComponentName,%20int))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn setPasswordMinimumUpperCase<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setPasswordMinimumUpperCase", .descriptor == "(Landroid/content/ComponentName;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setPasswordMinimumUpperCase\0", "(Landroid/content/ComponentName;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPasswordMinimumUpperCase](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getPasswordMinimumUpperCase(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn getPasswordMinimumUpperCase<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "getPasswordMinimumUpperCase", .descriptor == "(Landroid/content/ComponentName;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "getPasswordMinimumUpperCase\0", "(Landroid/content/ComponentName;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPasswordMinimumLowerCase](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setPasswordMinimumLowerCase(android.content.ComponentName,%20int))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn setPasswordMinimumLowerCase<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setPasswordMinimumLowerCase", .descriptor == "(Landroid/content/ComponentName;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setPasswordMinimumLowerCase\0", "(Landroid/content/ComponentName;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPasswordMinimumLowerCase](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getPasswordMinimumLowerCase(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn getPasswordMinimumLowerCase<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "getPasswordMinimumLowerCase", .descriptor == "(Landroid/content/ComponentName;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "getPasswordMinimumLowerCase\0", "(Landroid/content/ComponentName;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPasswordMinimumLetters](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setPasswordMinimumLetters(android.content.ComponentName,%20int))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn setPasswordMinimumLetters<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setPasswordMinimumLetters", .descriptor == "(Landroid/content/ComponentName;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setPasswordMinimumLetters\0", "(Landroid/content/ComponentName;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPasswordMinimumLetters](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getPasswordMinimumLetters(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn getPasswordMinimumLetters<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "getPasswordMinimumLetters", .descriptor == "(Landroid/content/ComponentName;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "getPasswordMinimumLetters\0", "(Landroid/content/ComponentName;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPasswordMinimumNumeric](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setPasswordMinimumNumeric(android.content.ComponentName,%20int))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn setPasswordMinimumNumeric<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setPasswordMinimumNumeric", .descriptor == "(Landroid/content/ComponentName;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setPasswordMinimumNumeric\0", "(Landroid/content/ComponentName;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPasswordMinimumNumeric](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getPasswordMinimumNumeric(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn getPasswordMinimumNumeric<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "getPasswordMinimumNumeric", .descriptor == "(Landroid/content/ComponentName;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "getPasswordMinimumNumeric\0", "(Landroid/content/ComponentName;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPasswordMinimumSymbols](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setPasswordMinimumSymbols(android.content.ComponentName,%20int))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn setPasswordMinimumSymbols<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setPasswordMinimumSymbols", .descriptor == "(Landroid/content/ComponentName;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setPasswordMinimumSymbols\0", "(Landroid/content/ComponentName;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPasswordMinimumSymbols](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getPasswordMinimumSymbols(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn getPasswordMinimumSymbols<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "getPasswordMinimumSymbols", .descriptor == "(Landroid/content/ComponentName;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "getPasswordMinimumSymbols\0", "(Landroid/content/ComponentName;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPasswordMinimumNonLetter](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setPasswordMinimumNonLetter(android.content.ComponentName,%20int))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn setPasswordMinimumNonLetter<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setPasswordMinimumNonLetter", .descriptor == "(Landroid/content/ComponentName;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setPasswordMinimumNonLetter\0", "(Landroid/content/ComponentName;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPasswordMinimumNonLetter](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getPasswordMinimumNonLetter(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn getPasswordMinimumNonLetter<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "getPasswordMinimumNonLetter", .descriptor == "(Landroid/content/ComponentName;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "getPasswordMinimumNonLetter\0", "(Landroid/content/ComponentName;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPasswordHistoryLength](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setPasswordHistoryLength(android.content.ComponentName,%20int))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn setPasswordHistoryLength<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setPasswordHistoryLength", .descriptor == "(Landroid/content/ComponentName;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setPasswordHistoryLength\0", "(Landroid/content/ComponentName;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPasswordExpirationTimeout](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setPasswordExpirationTimeout(android.content.ComponentName,%20long))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn setPasswordExpirationTimeout<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: i64) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setPasswordExpirationTimeout", .descriptor == "(Landroid/content/ComponentName;J)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setPasswordExpirationTimeout\0", "(Landroid/content/ComponentName;J)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPasswordExpirationTimeout](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getPasswordExpirationTimeout(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn getPasswordExpirationTimeout<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "getPasswordExpirationTimeout", .descriptor == "(Landroid/content/ComponentName;)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "getPasswordExpirationTimeout\0", "(Landroid/content/ComponentName;)J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPasswordExpiration](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getPasswordExpiration(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn getPasswordExpiration<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "getPasswordExpiration", .descriptor == "(Landroid/content/ComponentName;)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "getPasswordExpiration\0", "(Landroid/content/ComponentName;)J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPasswordHistoryLength](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getPasswordHistoryLength(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn getPasswordHistoryLength<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "getPasswordHistoryLength", .descriptor == "(Landroid/content/ComponentName;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "getPasswordHistoryLength\0", "(Landroid/content/ComponentName;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPasswordMaximumLength](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getPasswordMaximumLength(int))
        pub fn getPasswordMaximumLength<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "getPasswordMaximumLength", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "getPasswordMaximumLength\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isActivePasswordSufficient](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isActivePasswordSufficient())
        pub fn isActivePasswordSufficient<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "isActivePasswordSufficient", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "isActivePasswordSufficient\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPasswordComplexity](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getPasswordComplexity())
        pub fn getPasswordComplexity<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "getPasswordComplexity", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "getPasswordComplexity\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isUsingUnifiedPassword](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isUsingUnifiedPassword(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn isUsingUnifiedPassword<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "isUsingUnifiedPassword", .descriptor == "(Landroid/content/ComponentName;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "isUsingUnifiedPassword\0", "(Landroid/content/ComponentName;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCurrentFailedPasswordAttempts](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getCurrentFailedPasswordAttempts())
        pub fn getCurrentFailedPasswordAttempts<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "getCurrentFailedPasswordAttempts", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "getCurrentFailedPasswordAttempts\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setMaximumFailedPasswordsForWipe](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setMaximumFailedPasswordsForWipe(android.content.ComponentName,%20int))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn setMaximumFailedPasswordsForWipe<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setMaximumFailedPasswordsForWipe", .descriptor == "(Landroid/content/ComponentName;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setMaximumFailedPasswordsForWipe\0", "(Landroid/content/ComponentName;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMaximumFailedPasswordsForWipe](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getMaximumFailedPasswordsForWipe(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn getMaximumFailedPasswordsForWipe<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "getMaximumFailedPasswordsForWipe", .descriptor == "(Landroid/content/ComponentName;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "getMaximumFailedPasswordsForWipe\0", "(Landroid/content/ComponentName;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [resetPassword](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#resetPassword(java.lang.String,%20int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn resetPassword<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "resetPassword", .descriptor == "(Ljava/lang/String;I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "resetPassword\0", "(Ljava/lang/String;I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setResetPasswordToken](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setResetPasswordToken(android.content.ComponentName,%20byte%5B%5D))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn setResetPasswordToken<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setResetPasswordToken", .descriptor == "(Landroid/content/ComponentName;[B)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setResetPasswordToken\0", "(Landroid/content/ComponentName;[B)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clearResetPasswordToken](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#clearResetPasswordToken(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn clearResetPasswordToken<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "clearResetPasswordToken", .descriptor == "(Landroid/content/ComponentName;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "clearResetPasswordToken\0", "(Landroid/content/ComponentName;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isResetPasswordTokenActive](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isResetPasswordTokenActive(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn isResetPasswordTokenActive<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "isResetPasswordTokenActive", .descriptor == "(Landroid/content/ComponentName;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "isResetPasswordTokenActive\0", "(Landroid/content/ComponentName;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [resetPasswordWithToken](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#resetPasswordWithToken(android.content.ComponentName,%20java.lang.String,%20byte%5B%5D,%20int))
        ///
        /// Required features: "android-content-ComponentName", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-lang-String")))]
        pub fn resetPasswordWithToken<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>, arg3: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "resetPasswordWithToken", .descriptor == "(Landroid/content/ComponentName;Ljava/lang/String;[BI)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "resetPasswordWithToken\0", "(Landroid/content/ComponentName;Ljava/lang/String;[BI)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setMaximumTimeToLock](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setMaximumTimeToLock(android.content.ComponentName,%20long))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn setMaximumTimeToLock<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: i64) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setMaximumTimeToLock", .descriptor == "(Landroid/content/ComponentName;J)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setMaximumTimeToLock\0", "(Landroid/content/ComponentName;J)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMaximumTimeToLock](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getMaximumTimeToLock(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn getMaximumTimeToLock<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "getMaximumTimeToLock", .descriptor == "(Landroid/content/ComponentName;)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "getMaximumTimeToLock\0", "(Landroid/content/ComponentName;)J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setRequiredStrongAuthTimeout](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setRequiredStrongAuthTimeout(android.content.ComponentName,%20long))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn setRequiredStrongAuthTimeout<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: i64) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setRequiredStrongAuthTimeout", .descriptor == "(Landroid/content/ComponentName;J)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setRequiredStrongAuthTimeout\0", "(Landroid/content/ComponentName;J)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRequiredStrongAuthTimeout](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getRequiredStrongAuthTimeout(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn getRequiredStrongAuthTimeout<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "getRequiredStrongAuthTimeout", .descriptor == "(Landroid/content/ComponentName;)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "getRequiredStrongAuthTimeout\0", "(Landroid/content/ComponentName;)J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [lockNow](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#lockNow())
        pub fn lockNow<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "lockNow", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "lockNow\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [lockNow](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#lockNow(int))
        pub fn lockNow_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "lockNow", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "lockNow\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [wipeData](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#wipeData(int))
        pub fn wipeData_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "wipeData", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "wipeData\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [wipeData](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#wipeData(int,%20java.lang.CharSequence))
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn wipeData_int_CharSequence<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "wipeData", .descriptor == "(ILjava/lang/CharSequence;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "wipeData\0", "(ILjava/lang/CharSequence;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setRecommendedGlobalProxy](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setRecommendedGlobalProxy(android.content.ComponentName,%20android.net.ProxyInfo))
        ///
        /// Required features: "android-content-ComponentName", "android-net-ProxyInfo"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "android-net-ProxyInfo")))]
        pub fn setRecommendedGlobalProxy<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::ProxyInfo>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setRecommendedGlobalProxy", .descriptor == "(Landroid/content/ComponentName;Landroid/net/ProxyInfo;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setRecommendedGlobalProxy\0", "(Landroid/content/ComponentName;Landroid/net/ProxyInfo;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setStorageEncryption](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setStorageEncryption(android.content.ComponentName,%20boolean))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn setStorageEncryption<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: bool) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setStorageEncryption", .descriptor == "(Landroid/content/ComponentName;Z)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setStorageEncryption\0", "(Landroid/content/ComponentName;Z)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getStorageEncryption](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getStorageEncryption(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn getStorageEncryption<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "getStorageEncryption", .descriptor == "(Landroid/content/ComponentName;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "getStorageEncryption\0", "(Landroid/content/ComponentName;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getStorageEncryptionStatus](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getStorageEncryptionStatus())
        pub fn getStorageEncryptionStatus<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "getStorageEncryptionStatus", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "getStorageEncryptionStatus\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [installCaCert](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#installCaCert(android.content.ComponentName,%20byte%5B%5D))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn installCaCert<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "installCaCert", .descriptor == "(Landroid/content/ComponentName;[B)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "installCaCert\0", "(Landroid/content/ComponentName;[B)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [uninstallCaCert](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#uninstallCaCert(android.content.ComponentName,%20byte%5B%5D))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn uninstallCaCert<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "uninstallCaCert", .descriptor == "(Landroid/content/ComponentName;[B)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "uninstallCaCert\0", "(Landroid/content/ComponentName;[B)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInstalledCaCerts](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getInstalledCaCerts(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-util-List")))]
        pub fn getInstalledCaCerts<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "getInstalledCaCerts", .descriptor == "(Landroid/content/ComponentName;)Ljava/util/List;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "getInstalledCaCerts\0", "(Landroid/content/ComponentName;)Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [uninstallAllUserCaCerts](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#uninstallAllUserCaCerts(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn uninstallAllUserCaCerts<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "uninstallAllUserCaCerts", .descriptor == "(Landroid/content/ComponentName;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "uninstallAllUserCaCerts\0", "(Landroid/content/ComponentName;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasCaCertInstalled](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#hasCaCertInstalled(android.content.ComponentName,%20byte%5B%5D))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn hasCaCertInstalled<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "hasCaCertInstalled", .descriptor == "(Landroid/content/ComponentName;[B)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "hasCaCertInstalled\0", "(Landroid/content/ComponentName;[B)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [installKeyPair](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#installKeyPair(android.content.ComponentName,%20java.security.PrivateKey,%20java.security.cert.Certificate,%20java.lang.String))
        ///
        /// Required features: "android-content-ComponentName", "java-lang-String", "java-security-PrivateKey", "java-security-cert-Certificate"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-lang-String", feature = "java-security-PrivateKey", feature = "java-security-cert-Certificate")))]
        pub fn installKeyPair_ComponentName_PrivateKey_Certificate_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::PrivateKey>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::cert::Certificate>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "installKeyPair", .descriptor == "(Landroid/content/ComponentName;Ljava/security/PrivateKey;Ljava/security/cert/Certificate;Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "installKeyPair\0", "(Landroid/content/ComponentName;Ljava/security/PrivateKey;Ljava/security/cert/Certificate;Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [installKeyPair](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#installKeyPair(android.content.ComponentName,%20java.security.PrivateKey,%20java.security.cert.Certificate%5B%5D,%20java.lang.String,%20boolean))
        ///
        /// Required features: "android-content-ComponentName", "java-lang-String", "java-security-PrivateKey", "java-security-cert-Certificate"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-lang-String", feature = "java-security-PrivateKey", feature = "java-security-cert-Certificate")))]
        pub fn installKeyPair_ComponentName_PrivateKey_Certificate_array_String_boolean<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::PrivateKey>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::security::cert::Certificate, crate::java::lang::Throwable>>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg4: bool) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "installKeyPair", .descriptor == "(Landroid/content/ComponentName;Ljava/security/PrivateKey;[Ljava/security/cert/Certificate;Ljava/lang/String;Z)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "installKeyPair\0", "(Landroid/content/ComponentName;Ljava/security/PrivateKey;[Ljava/security/cert/Certificate;Ljava/lang/String;Z)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [installKeyPair](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#installKeyPair(android.content.ComponentName,%20java.security.PrivateKey,%20java.security.cert.Certificate%5B%5D,%20java.lang.String,%20int))
        ///
        /// Required features: "android-content-ComponentName", "java-lang-String", "java-security-PrivateKey", "java-security-cert-Certificate"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-lang-String", feature = "java-security-PrivateKey", feature = "java-security-cert-Certificate")))]
        pub fn installKeyPair_ComponentName_PrivateKey_Certificate_array_String_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::security::PrivateKey>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::security::cert::Certificate, crate::java::lang::Throwable>>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg4: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "installKeyPair", .descriptor == "(Landroid/content/ComponentName;Ljava/security/PrivateKey;[Ljava/security/cert/Certificate;Ljava/lang/String;I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "installKeyPair\0", "(Landroid/content/ComponentName;Ljava/security/PrivateKey;[Ljava/security/cert/Certificate;Ljava/lang/String;I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeKeyPair](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#removeKeyPair(android.content.ComponentName,%20java.lang.String))
        ///
        /// Required features: "android-content-ComponentName", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-lang-String")))]
        pub fn removeKeyPair<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "removeKeyPair", .descriptor == "(Landroid/content/ComponentName;Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "removeKeyPair\0", "(Landroid/content/ComponentName;Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [generateKeyPair](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#generateKeyPair(android.content.ComponentName,%20java.lang.String,%20android.security.keystore.KeyGenParameterSpec,%20int))
        ///
        /// Required features: "android-content-ComponentName", "android-security-AttestedKeyPair", "android-security-keystore-KeyGenParameterSpec", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "android-security-AttestedKeyPair", feature = "android-security-keystore-KeyGenParameterSpec", feature = "java-lang-String")))]
        pub fn generateKeyPair<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::security::keystore::KeyGenParameterSpec>>, arg3: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::security::AttestedKeyPair>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "generateKeyPair", .descriptor == "(Landroid/content/ComponentName;Ljava/lang/String;Landroid/security/keystore/KeyGenParameterSpec;I)Landroid/security/AttestedKeyPair;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "generateKeyPair\0", "(Landroid/content/ComponentName;Ljava/lang/String;Landroid/security/keystore/KeyGenParameterSpec;I)Landroid/security/AttestedKeyPair;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isDeviceIdAttestationSupported](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isDeviceIdAttestationSupported())
        pub fn isDeviceIdAttestationSupported<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "isDeviceIdAttestationSupported", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "isDeviceIdAttestationSupported\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setKeyPairCertificate](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setKeyPairCertificate(android.content.ComponentName,%20java.lang.String,%20java.util.List,%20boolean))
        ///
        /// Required features: "android-content-ComponentName", "java-lang-String", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-lang-String", feature = "java-util-List")))]
        pub fn setKeyPairCertificate<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>, arg3: bool) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setKeyPairCertificate", .descriptor == "(Landroid/content/ComponentName;Ljava/lang/String;Ljava/util/List;Z)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setKeyPairCertificate\0", "(Landroid/content/ComponentName;Ljava/lang/String;Ljava/util/List;Z)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setCertInstallerPackage](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setCertInstallerPackage(android.content.ComponentName,%20java.lang.String))
        ///
        /// Required features: "android-content-ComponentName", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-lang-String")))]
        #[deprecated] pub fn setCertInstallerPackage<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setCertInstallerPackage", .descriptor == "(Landroid/content/ComponentName;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setCertInstallerPackage\0", "(Landroid/content/ComponentName;Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCertInstallerPackage](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getCertInstallerPackage(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-lang-String")))]
        #[deprecated] pub fn getCertInstallerPackage<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "getCertInstallerPackage", .descriptor == "(Landroid/content/ComponentName;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "getCertInstallerPackage\0", "(Landroid/content/ComponentName;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDelegatedScopes](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setDelegatedScopes(android.content.ComponentName,%20java.lang.String,%20java.util.List))
        ///
        /// Required features: "android-content-ComponentName", "java-lang-String", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-lang-String", feature = "java-util-List")))]
        pub fn setDelegatedScopes<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setDelegatedScopes", .descriptor == "(Landroid/content/ComponentName;Ljava/lang/String;Ljava/util/List;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setDelegatedScopes\0", "(Landroid/content/ComponentName;Ljava/lang/String;Ljava/util/List;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDelegatedScopes](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getDelegatedScopes(android.content.ComponentName,%20java.lang.String))
        ///
        /// Required features: "android-content-ComponentName", "java-lang-String", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-lang-String", feature = "java-util-List")))]
        pub fn getDelegatedScopes<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "getDelegatedScopes", .descriptor == "(Landroid/content/ComponentName;Ljava/lang/String;)Ljava/util/List;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "getDelegatedScopes\0", "(Landroid/content/ComponentName;Ljava/lang/String;)Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDelegatePackages](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getDelegatePackages(android.content.ComponentName,%20java.lang.String))
        ///
        /// Required features: "android-content-ComponentName", "java-lang-String", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-lang-String", feature = "java-util-List")))]
        pub fn getDelegatePackages<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "getDelegatePackages", .descriptor == "(Landroid/content/ComponentName;Ljava/lang/String;)Ljava/util/List;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "getDelegatePackages\0", "(Landroid/content/ComponentName;Ljava/lang/String;)Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAlwaysOnVpnPackage](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setAlwaysOnVpnPackage(android.content.ComponentName,%20java.lang.String,%20boolean))
        ///
        /// Required features: "android-content-ComponentName", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-lang-String")))]
        pub fn setAlwaysOnVpnPackage_ComponentName_String_boolean<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setAlwaysOnVpnPackage", .descriptor == "(Landroid/content/ComponentName;Ljava/lang/String;Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setAlwaysOnVpnPackage\0", "(Landroid/content/ComponentName;Ljava/lang/String;Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAlwaysOnVpnPackage](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setAlwaysOnVpnPackage(android.content.ComponentName,%20java.lang.String,%20boolean,%20java.util.Set))
        ///
        /// Required features: "android-content-ComponentName", "java-lang-String", "java-util-Set"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-lang-String", feature = "java-util-Set")))]
        pub fn setAlwaysOnVpnPackage_ComponentName_String_boolean_Set<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: bool, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Set>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setAlwaysOnVpnPackage", .descriptor == "(Landroid/content/ComponentName;Ljava/lang/String;ZLjava/util/Set;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setAlwaysOnVpnPackage\0", "(Landroid/content/ComponentName;Ljava/lang/String;ZLjava/util/Set;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isAlwaysOnVpnLockdownEnabled](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isAlwaysOnVpnLockdownEnabled(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn isAlwaysOnVpnLockdownEnabled<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "isAlwaysOnVpnLockdownEnabled", .descriptor == "(Landroid/content/ComponentName;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "isAlwaysOnVpnLockdownEnabled\0", "(Landroid/content/ComponentName;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAlwaysOnVpnLockdownWhitelist](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getAlwaysOnVpnLockdownWhitelist(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName", "java-util-Set"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-util-Set")))]
        pub fn getAlwaysOnVpnLockdownWhitelist<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Set>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "getAlwaysOnVpnLockdownWhitelist", .descriptor == "(Landroid/content/ComponentName;)Ljava/util/Set;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "getAlwaysOnVpnLockdownWhitelist\0", "(Landroid/content/ComponentName;)Ljava/util/Set;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAlwaysOnVpnPackage](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getAlwaysOnVpnPackage(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-lang-String")))]
        pub fn getAlwaysOnVpnPackage<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "getAlwaysOnVpnPackage", .descriptor == "(Landroid/content/ComponentName;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "getAlwaysOnVpnPackage\0", "(Landroid/content/ComponentName;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setCameraDisabled](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setCameraDisabled(android.content.ComponentName,%20boolean))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn setCameraDisabled<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setCameraDisabled", .descriptor == "(Landroid/content/ComponentName;Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setCameraDisabled\0", "(Landroid/content/ComponentName;Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCameraDisabled](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getCameraDisabled(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn getCameraDisabled<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "getCameraDisabled", .descriptor == "(Landroid/content/ComponentName;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "getCameraDisabled\0", "(Landroid/content/ComponentName;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [requestBugreport](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#requestBugreport(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn requestBugreport<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "requestBugreport", .descriptor == "(Landroid/content/ComponentName;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "requestBugreport\0", "(Landroid/content/ComponentName;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setScreenCaptureDisabled](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setScreenCaptureDisabled(android.content.ComponentName,%20boolean))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn setScreenCaptureDisabled<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setScreenCaptureDisabled", .descriptor == "(Landroid/content/ComponentName;Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setScreenCaptureDisabled\0", "(Landroid/content/ComponentName;Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getScreenCaptureDisabled](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getScreenCaptureDisabled(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn getScreenCaptureDisabled<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "getScreenCaptureDisabled", .descriptor == "(Landroid/content/ComponentName;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "getScreenCaptureDisabled\0", "(Landroid/content/ComponentName;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAutoTimeRequired](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setAutoTimeRequired(android.content.ComponentName,%20boolean))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn setAutoTimeRequired<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setAutoTimeRequired", .descriptor == "(Landroid/content/ComponentName;Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setAutoTimeRequired\0", "(Landroid/content/ComponentName;Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAutoTimeRequired](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getAutoTimeRequired())
        pub fn getAutoTimeRequired<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "getAutoTimeRequired", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "getAutoTimeRequired\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setKeyguardDisabledFeatures](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setKeyguardDisabledFeatures(android.content.ComponentName,%20int))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn setKeyguardDisabledFeatures<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setKeyguardDisabledFeatures", .descriptor == "(Landroid/content/ComponentName;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setKeyguardDisabledFeatures\0", "(Landroid/content/ComponentName;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getKeyguardDisabledFeatures](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getKeyguardDisabledFeatures(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn getKeyguardDisabledFeatures<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "getKeyguardDisabledFeatures", .descriptor == "(Landroid/content/ComponentName;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "getKeyguardDisabledFeatures\0", "(Landroid/content/ComponentName;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isDeviceOwnerApp](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isDeviceOwnerApp(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn isDeviceOwnerApp<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "isDeviceOwnerApp", .descriptor == "(Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "isDeviceOwnerApp\0", "(Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clearDeviceOwnerApp](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#clearDeviceOwnerApp(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        #[deprecated] pub fn clearDeviceOwnerApp<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "clearDeviceOwnerApp", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "clearDeviceOwnerApp\0", "(Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clearProfileOwner](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#clearProfileOwner(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        #[deprecated] pub fn clearProfileOwner<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "clearProfileOwner", .descriptor == "(Landroid/content/ComponentName;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "clearProfileOwner\0", "(Landroid/content/ComponentName;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDeviceOwnerLockScreenInfo](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setDeviceOwnerLockScreenInfo(android.content.ComponentName,%20java.lang.CharSequence))
        ///
        /// Required features: "android-content-ComponentName", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-lang-CharSequence")))]
        pub fn setDeviceOwnerLockScreenInfo<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setDeviceOwnerLockScreenInfo", .descriptor == "(Landroid/content/ComponentName;Ljava/lang/CharSequence;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setDeviceOwnerLockScreenInfo\0", "(Landroid/content/ComponentName;Ljava/lang/CharSequence;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDeviceOwnerLockScreenInfo](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getDeviceOwnerLockScreenInfo())
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn getDeviceOwnerLockScreenInfo<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::CharSequence>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "getDeviceOwnerLockScreenInfo", .descriptor == "()Ljava/lang/CharSequence;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "getDeviceOwnerLockScreenInfo\0", "()Ljava/lang/CharSequence;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPackagesSuspended](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setPackagesSuspended(android.content.ComponentName,%20java.lang.String%5B%5D,%20boolean))
        ///
        /// Required features: "android-content-ComponentName", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-lang-String")))]
        pub fn setPackagesSuspended<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, arg2: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setPackagesSuspended", .descriptor == "(Landroid/content/ComponentName;[Ljava/lang/String;Z)[Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setPackagesSuspended\0", "(Landroid/content/ComponentName;[Ljava/lang/String;Z)[Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isPackageSuspended](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isPackageSuspended(android.content.ComponentName,%20java.lang.String))
        ///
        /// Required features: "android-content-ComponentName", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-lang-String")))]
        pub fn isPackageSuspended<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "isPackageSuspended", .descriptor == "(Landroid/content/ComponentName;Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "isPackageSuspended\0", "(Landroid/content/ComponentName;Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setProfileEnabled](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setProfileEnabled(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn setProfileEnabled<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setProfileEnabled", .descriptor == "(Landroid/content/ComponentName;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setProfileEnabled\0", "(Landroid/content/ComponentName;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setProfileName](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setProfileName(android.content.ComponentName,%20java.lang.String))
        ///
        /// Required features: "android-content-ComponentName", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-lang-String")))]
        pub fn setProfileName<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setProfileName", .descriptor == "(Landroid/content/ComponentName;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setProfileName\0", "(Landroid/content/ComponentName;Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isProfileOwnerApp](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isProfileOwnerApp(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn isProfileOwnerApp<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "isProfileOwnerApp", .descriptor == "(Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "isProfileOwnerApp\0", "(Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addPersistentPreferredActivity](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#addPersistentPreferredActivity(android.content.ComponentName,%20android.content.IntentFilter,%20android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName", "android-content-IntentFilter"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "android-content-IntentFilter")))]
        pub fn addPersistentPreferredActivity<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::IntentFilter>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "addPersistentPreferredActivity", .descriptor == "(Landroid/content/ComponentName;Landroid/content/IntentFilter;Landroid/content/ComponentName;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "addPersistentPreferredActivity\0", "(Landroid/content/ComponentName;Landroid/content/IntentFilter;Landroid/content/ComponentName;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clearPackagePersistentPreferredActivities](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#clearPackagePersistentPreferredActivities(android.content.ComponentName,%20java.lang.String))
        ///
        /// Required features: "android-content-ComponentName", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-lang-String")))]
        pub fn clearPackagePersistentPreferredActivities<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "clearPackagePersistentPreferredActivities", .descriptor == "(Landroid/content/ComponentName;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "clearPackagePersistentPreferredActivities\0", "(Landroid/content/ComponentName;Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDefaultSmsApplication](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setDefaultSmsApplication(android.content.ComponentName,%20java.lang.String))
        ///
        /// Required features: "android-content-ComponentName", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-lang-String")))]
        pub fn setDefaultSmsApplication<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setDefaultSmsApplication", .descriptor == "(Landroid/content/ComponentName;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setDefaultSmsApplication\0", "(Landroid/content/ComponentName;Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setApplicationRestrictionsManagingPackage](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setApplicationRestrictionsManagingPackage(android.content.ComponentName,%20java.lang.String))
        ///
        /// Required features: "android-content-ComponentName", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-lang-String")))]
        #[deprecated] pub fn setApplicationRestrictionsManagingPackage<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setApplicationRestrictionsManagingPackage", .descriptor == "(Landroid/content/ComponentName;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setApplicationRestrictionsManagingPackage\0", "(Landroid/content/ComponentName;Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getApplicationRestrictionsManagingPackage](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getApplicationRestrictionsManagingPackage(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-lang-String")))]
        #[deprecated] pub fn getApplicationRestrictionsManagingPackage<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "getApplicationRestrictionsManagingPackage", .descriptor == "(Landroid/content/ComponentName;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "getApplicationRestrictionsManagingPackage\0", "(Landroid/content/ComponentName;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isCallerApplicationRestrictionsManagingPackage](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isCallerApplicationRestrictionsManagingPackage())
        #[deprecated] pub fn isCallerApplicationRestrictionsManagingPackage<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "isCallerApplicationRestrictionsManagingPackage", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "isCallerApplicationRestrictionsManagingPackage\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setApplicationRestrictions](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setApplicationRestrictions(android.content.ComponentName,%20java.lang.String,%20android.os.Bundle))
        ///
        /// Required features: "android-content-ComponentName", "android-os-Bundle", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "android-os-Bundle", feature = "java-lang-String")))]
        pub fn setApplicationRestrictions<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setApplicationRestrictions", .descriptor == "(Landroid/content/ComponentName;Ljava/lang/String;Landroid/os/Bundle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setApplicationRestrictions\0", "(Landroid/content/ComponentName;Ljava/lang/String;Landroid/os/Bundle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTrustAgentConfiguration](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setTrustAgentConfiguration(android.content.ComponentName,%20android.content.ComponentName,%20android.os.PersistableBundle))
        ///
        /// Required features: "android-content-ComponentName", "android-os-PersistableBundle"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "android-os-PersistableBundle")))]
        pub fn setTrustAgentConfiguration<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::PersistableBundle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setTrustAgentConfiguration", .descriptor == "(Landroid/content/ComponentName;Landroid/content/ComponentName;Landroid/os/PersistableBundle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setTrustAgentConfiguration\0", "(Landroid/content/ComponentName;Landroid/content/ComponentName;Landroid/os/PersistableBundle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTrustAgentConfiguration](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getTrustAgentConfiguration(android.content.ComponentName,%20android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-util-List")))]
        pub fn getTrustAgentConfiguration<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "getTrustAgentConfiguration", .descriptor == "(Landroid/content/ComponentName;Landroid/content/ComponentName;)Ljava/util/List;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "getTrustAgentConfiguration\0", "(Landroid/content/ComponentName;Landroid/content/ComponentName;)Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setCrossProfileCallerIdDisabled](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setCrossProfileCallerIdDisabled(android.content.ComponentName,%20boolean))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn setCrossProfileCallerIdDisabled<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setCrossProfileCallerIdDisabled", .descriptor == "(Landroid/content/ComponentName;Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setCrossProfileCallerIdDisabled\0", "(Landroid/content/ComponentName;Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCrossProfileCallerIdDisabled](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getCrossProfileCallerIdDisabled(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn getCrossProfileCallerIdDisabled<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "getCrossProfileCallerIdDisabled", .descriptor == "(Landroid/content/ComponentName;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "getCrossProfileCallerIdDisabled\0", "(Landroid/content/ComponentName;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setCrossProfileContactsSearchDisabled](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setCrossProfileContactsSearchDisabled(android.content.ComponentName,%20boolean))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn setCrossProfileContactsSearchDisabled<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setCrossProfileContactsSearchDisabled", .descriptor == "(Landroid/content/ComponentName;Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setCrossProfileContactsSearchDisabled\0", "(Landroid/content/ComponentName;Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCrossProfileContactsSearchDisabled](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getCrossProfileContactsSearchDisabled(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn getCrossProfileContactsSearchDisabled<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "getCrossProfileContactsSearchDisabled", .descriptor == "(Landroid/content/ComponentName;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "getCrossProfileContactsSearchDisabled\0", "(Landroid/content/ComponentName;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setBluetoothContactSharingDisabled](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setBluetoothContactSharingDisabled(android.content.ComponentName,%20boolean))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn setBluetoothContactSharingDisabled<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setBluetoothContactSharingDisabled", .descriptor == "(Landroid/content/ComponentName;Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setBluetoothContactSharingDisabled\0", "(Landroid/content/ComponentName;Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getBluetoothContactSharingDisabled](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getBluetoothContactSharingDisabled(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn getBluetoothContactSharingDisabled<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "getBluetoothContactSharingDisabled", .descriptor == "(Landroid/content/ComponentName;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "getBluetoothContactSharingDisabled\0", "(Landroid/content/ComponentName;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addCrossProfileIntentFilter](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#addCrossProfileIntentFilter(android.content.ComponentName,%20android.content.IntentFilter,%20int))
        ///
        /// Required features: "android-content-ComponentName", "android-content-IntentFilter"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "android-content-IntentFilter")))]
        pub fn addCrossProfileIntentFilter<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::IntentFilter>>, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "addCrossProfileIntentFilter", .descriptor == "(Landroid/content/ComponentName;Landroid/content/IntentFilter;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "addCrossProfileIntentFilter\0", "(Landroid/content/ComponentName;Landroid/content/IntentFilter;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clearCrossProfileIntentFilters](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#clearCrossProfileIntentFilters(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn clearCrossProfileIntentFilters<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "clearCrossProfileIntentFilters", .descriptor == "(Landroid/content/ComponentName;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "clearCrossProfileIntentFilters\0", "(Landroid/content/ComponentName;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPermittedAccessibilityServices](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setPermittedAccessibilityServices(android.content.ComponentName,%20java.util.List))
        ///
        /// Required features: "android-content-ComponentName", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-util-List")))]
        pub fn setPermittedAccessibilityServices<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setPermittedAccessibilityServices", .descriptor == "(Landroid/content/ComponentName;Ljava/util/List;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setPermittedAccessibilityServices\0", "(Landroid/content/ComponentName;Ljava/util/List;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPermittedAccessibilityServices](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getPermittedAccessibilityServices(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-util-List")))]
        pub fn getPermittedAccessibilityServices<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "getPermittedAccessibilityServices", .descriptor == "(Landroid/content/ComponentName;)Ljava/util/List;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "getPermittedAccessibilityServices\0", "(Landroid/content/ComponentName;)Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPermittedInputMethods](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setPermittedInputMethods(android.content.ComponentName,%20java.util.List))
        ///
        /// Required features: "android-content-ComponentName", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-util-List")))]
        pub fn setPermittedInputMethods<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setPermittedInputMethods", .descriptor == "(Landroid/content/ComponentName;Ljava/util/List;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setPermittedInputMethods\0", "(Landroid/content/ComponentName;Ljava/util/List;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPermittedInputMethods](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getPermittedInputMethods(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-util-List")))]
        pub fn getPermittedInputMethods<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "getPermittedInputMethods", .descriptor == "(Landroid/content/ComponentName;)Ljava/util/List;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "getPermittedInputMethods\0", "(Landroid/content/ComponentName;)Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPermittedCrossProfileNotificationListeners](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setPermittedCrossProfileNotificationListeners(android.content.ComponentName,%20java.util.List))
        ///
        /// Required features: "android-content-ComponentName", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-util-List")))]
        pub fn setPermittedCrossProfileNotificationListeners<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setPermittedCrossProfileNotificationListeners", .descriptor == "(Landroid/content/ComponentName;Ljava/util/List;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setPermittedCrossProfileNotificationListeners\0", "(Landroid/content/ComponentName;Ljava/util/List;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPermittedCrossProfileNotificationListeners](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getPermittedCrossProfileNotificationListeners(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-util-List")))]
        pub fn getPermittedCrossProfileNotificationListeners<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "getPermittedCrossProfileNotificationListeners", .descriptor == "(Landroid/content/ComponentName;)Ljava/util/List;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "getPermittedCrossProfileNotificationListeners\0", "(Landroid/content/ComponentName;)Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getKeepUninstalledPackages](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getKeepUninstalledPackages(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-util-List")))]
        pub fn getKeepUninstalledPackages<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "getKeepUninstalledPackages", .descriptor == "(Landroid/content/ComponentName;)Ljava/util/List;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "getKeepUninstalledPackages\0", "(Landroid/content/ComponentName;)Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setKeepUninstalledPackages](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setKeepUninstalledPackages(android.content.ComponentName,%20java.util.List))
        ///
        /// Required features: "android-content-ComponentName", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-util-List")))]
        pub fn setKeepUninstalledPackages<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setKeepUninstalledPackages", .descriptor == "(Landroid/content/ComponentName;Ljava/util/List;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setKeepUninstalledPackages\0", "(Landroid/content/ComponentName;Ljava/util/List;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createAndManageUser](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#createAndManageUser(android.content.ComponentName,%20java.lang.String,%20android.content.ComponentName,%20android.os.PersistableBundle,%20int))
        ///
        /// Required features: "android-content-ComponentName", "android-os-PersistableBundle", "android-os-UserHandle", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "android-os-PersistableBundle", feature = "android-os-UserHandle", feature = "java-lang-String")))]
        pub fn createAndManageUser<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::PersistableBundle>>, arg4: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::UserHandle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "createAndManageUser", .descriptor == "(Landroid/content/ComponentName;Ljava/lang/String;Landroid/content/ComponentName;Landroid/os/PersistableBundle;I)Landroid/os/UserHandle;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "createAndManageUser\0", "(Landroid/content/ComponentName;Ljava/lang/String;Landroid/content/ComponentName;Landroid/os/PersistableBundle;I)Landroid/os/UserHandle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeUser](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#removeUser(android.content.ComponentName,%20android.os.UserHandle))
        ///
        /// Required features: "android-content-ComponentName", "android-os-UserHandle"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "android-os-UserHandle")))]
        pub fn removeUser<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::UserHandle>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "removeUser", .descriptor == "(Landroid/content/ComponentName;Landroid/os/UserHandle;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "removeUser\0", "(Landroid/content/ComponentName;Landroid/os/UserHandle;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [switchUser](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#switchUser(android.content.ComponentName,%20android.os.UserHandle))
        ///
        /// Required features: "android-content-ComponentName", "android-os-UserHandle"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "android-os-UserHandle")))]
        pub fn switchUser<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::UserHandle>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "switchUser", .descriptor == "(Landroid/content/ComponentName;Landroid/os/UserHandle;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "switchUser\0", "(Landroid/content/ComponentName;Landroid/os/UserHandle;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [startUserInBackground](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#startUserInBackground(android.content.ComponentName,%20android.os.UserHandle))
        ///
        /// Required features: "android-content-ComponentName", "android-os-UserHandle"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "android-os-UserHandle")))]
        pub fn startUserInBackground<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::UserHandle>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "startUserInBackground", .descriptor == "(Landroid/content/ComponentName;Landroid/os/UserHandle;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "startUserInBackground\0", "(Landroid/content/ComponentName;Landroid/os/UserHandle;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [stopUser](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#stopUser(android.content.ComponentName,%20android.os.UserHandle))
        ///
        /// Required features: "android-content-ComponentName", "android-os-UserHandle"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "android-os-UserHandle")))]
        pub fn stopUser<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::UserHandle>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "stopUser", .descriptor == "(Landroid/content/ComponentName;Landroid/os/UserHandle;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "stopUser\0", "(Landroid/content/ComponentName;Landroid/os/UserHandle;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [logoutUser](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#logoutUser(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn logoutUser<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "logoutUser", .descriptor == "(Landroid/content/ComponentName;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "logoutUser\0", "(Landroid/content/ComponentName;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSecondaryUsers](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getSecondaryUsers(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-util-List")))]
        pub fn getSecondaryUsers<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "getSecondaryUsers", .descriptor == "(Landroid/content/ComponentName;)Ljava/util/List;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "getSecondaryUsers\0", "(Landroid/content/ComponentName;)Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isEphemeralUser](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isEphemeralUser(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn isEphemeralUser<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "isEphemeralUser", .descriptor == "(Landroid/content/ComponentName;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "isEphemeralUser\0", "(Landroid/content/ComponentName;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getApplicationRestrictions](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getApplicationRestrictions(android.content.ComponentName,%20java.lang.String))
        ///
        /// Required features: "android-content-ComponentName", "android-os-Bundle", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "android-os-Bundle", feature = "java-lang-String")))]
        pub fn getApplicationRestrictions<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Bundle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "getApplicationRestrictions", .descriptor == "(Landroid/content/ComponentName;Ljava/lang/String;)Landroid/os/Bundle;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "getApplicationRestrictions\0", "(Landroid/content/ComponentName;Ljava/lang/String;)Landroid/os/Bundle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addUserRestriction](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#addUserRestriction(android.content.ComponentName,%20java.lang.String))
        ///
        /// Required features: "android-content-ComponentName", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-lang-String")))]
        pub fn addUserRestriction<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "addUserRestriction", .descriptor == "(Landroid/content/ComponentName;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "addUserRestriction\0", "(Landroid/content/ComponentName;Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clearUserRestriction](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#clearUserRestriction(android.content.ComponentName,%20java.lang.String))
        ///
        /// Required features: "android-content-ComponentName", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-lang-String")))]
        pub fn clearUserRestriction<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "clearUserRestriction", .descriptor == "(Landroid/content/ComponentName;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "clearUserRestriction\0", "(Landroid/content/ComponentName;Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getUserRestrictions](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getUserRestrictions(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName", "android-os-Bundle"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "android-os-Bundle")))]
        pub fn getUserRestrictions<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Bundle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "getUserRestrictions", .descriptor == "(Landroid/content/ComponentName;)Landroid/os/Bundle;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "getUserRestrictions\0", "(Landroid/content/ComponentName;)Landroid/os/Bundle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createAdminSupportIntent](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#createAdminSupportIntent(java.lang.String))
        ///
        /// Required features: "android-content-Intent", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-Intent", feature = "java-lang-String")))]
        pub fn createAdminSupportIntent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::Intent>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "createAdminSupportIntent", .descriptor == "(Ljava/lang/String;)Landroid/content/Intent;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "createAdminSupportIntent\0", "(Ljava/lang/String;)Landroid/content/Intent;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setApplicationHidden](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setApplicationHidden(android.content.ComponentName,%20java.lang.String,%20boolean))
        ///
        /// Required features: "android-content-ComponentName", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-lang-String")))]
        pub fn setApplicationHidden<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: bool) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setApplicationHidden", .descriptor == "(Landroid/content/ComponentName;Ljava/lang/String;Z)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setApplicationHidden\0", "(Landroid/content/ComponentName;Ljava/lang/String;Z)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isApplicationHidden](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isApplicationHidden(android.content.ComponentName,%20java.lang.String))
        ///
        /// Required features: "android-content-ComponentName", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-lang-String")))]
        pub fn isApplicationHidden<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "isApplicationHidden", .descriptor == "(Landroid/content/ComponentName;Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "isApplicationHidden\0", "(Landroid/content/ComponentName;Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [enableSystemApp](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#enableSystemApp(android.content.ComponentName,%20java.lang.String))
        ///
        /// Required features: "android-content-ComponentName", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-lang-String")))]
        pub fn enableSystemApp_ComponentName_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "enableSystemApp", .descriptor == "(Landroid/content/ComponentName;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "enableSystemApp\0", "(Landroid/content/ComponentName;Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [enableSystemApp](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#enableSystemApp(android.content.ComponentName,%20android.content.Intent))
        ///
        /// Required features: "android-content-ComponentName", "android-content-Intent"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "android-content-Intent")))]
        pub fn enableSystemApp_ComponentName_Intent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "enableSystemApp", .descriptor == "(Landroid/content/ComponentName;Landroid/content/Intent;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "enableSystemApp\0", "(Landroid/content/ComponentName;Landroid/content/Intent;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [installExistingPackage](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#installExistingPackage(android.content.ComponentName,%20java.lang.String))
        ///
        /// Required features: "android-content-ComponentName", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-lang-String")))]
        pub fn installExistingPackage<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "installExistingPackage", .descriptor == "(Landroid/content/ComponentName;Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "installExistingPackage\0", "(Landroid/content/ComponentName;Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAccountManagementDisabled](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setAccountManagementDisabled(android.content.ComponentName,%20java.lang.String,%20boolean))
        ///
        /// Required features: "android-content-ComponentName", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-lang-String")))]
        pub fn setAccountManagementDisabled<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setAccountManagementDisabled", .descriptor == "(Landroid/content/ComponentName;Ljava/lang/String;Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setAccountManagementDisabled\0", "(Landroid/content/ComponentName;Ljava/lang/String;Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAccountTypesWithManagementDisabled](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getAccountTypesWithManagementDisabled())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getAccountTypesWithManagementDisabled<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "getAccountTypesWithManagementDisabled", .descriptor == "()[Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "getAccountTypesWithManagementDisabled\0", "()[Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setLockTaskPackages](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setLockTaskPackages(android.content.ComponentName,%20java.lang.String%5B%5D))
        ///
        /// Required features: "android-content-ComponentName", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-lang-String")))]
        pub fn setLockTaskPackages<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setLockTaskPackages", .descriptor == "(Landroid/content/ComponentName;[Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setLockTaskPackages\0", "(Landroid/content/ComponentName;[Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLockTaskPackages](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getLockTaskPackages(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-lang-String")))]
        pub fn getLockTaskPackages<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "getLockTaskPackages", .descriptor == "(Landroid/content/ComponentName;)[Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "getLockTaskPackages\0", "(Landroid/content/ComponentName;)[Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isLockTaskPermitted](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isLockTaskPermitted(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn isLockTaskPermitted<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "isLockTaskPermitted", .descriptor == "(Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "isLockTaskPermitted\0", "(Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setLockTaskFeatures](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setLockTaskFeatures(android.content.ComponentName,%20int))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn setLockTaskFeatures<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setLockTaskFeatures", .descriptor == "(Landroid/content/ComponentName;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setLockTaskFeatures\0", "(Landroid/content/ComponentName;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLockTaskFeatures](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getLockTaskFeatures(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn getLockTaskFeatures<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "getLockTaskFeatures", .descriptor == "(Landroid/content/ComponentName;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "getLockTaskFeatures\0", "(Landroid/content/ComponentName;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setGlobalSetting](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setGlobalSetting(android.content.ComponentName,%20java.lang.String,%20java.lang.String))
        ///
        /// Required features: "android-content-ComponentName", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-lang-String")))]
        pub fn setGlobalSetting<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setGlobalSetting", .descriptor == "(Landroid/content/ComponentName;Ljava/lang/String;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setGlobalSetting\0", "(Landroid/content/ComponentName;Ljava/lang/String;Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setSystemSetting](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setSystemSetting(android.content.ComponentName,%20java.lang.String,%20java.lang.String))
        ///
        /// Required features: "android-content-ComponentName", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-lang-String")))]
        pub fn setSystemSetting<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setSystemSetting", .descriptor == "(Landroid/content/ComponentName;Ljava/lang/String;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setSystemSetting\0", "(Landroid/content/ComponentName;Ljava/lang/String;Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTime](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setTime(android.content.ComponentName,%20long))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn setTime<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: i64) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setTime", .descriptor == "(Landroid/content/ComponentName;J)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setTime\0", "(Landroid/content/ComponentName;J)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTimeZone](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setTimeZone(android.content.ComponentName,%20java.lang.String))
        ///
        /// Required features: "android-content-ComponentName", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-lang-String")))]
        pub fn setTimeZone<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setTimeZone", .descriptor == "(Landroid/content/ComponentName;Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setTimeZone\0", "(Landroid/content/ComponentName;Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setSecureSetting](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setSecureSetting(android.content.ComponentName,%20java.lang.String,%20java.lang.String))
        ///
        /// Required features: "android-content-ComponentName", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-lang-String")))]
        pub fn setSecureSetting<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setSecureSetting", .descriptor == "(Landroid/content/ComponentName;Ljava/lang/String;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setSecureSetting\0", "(Landroid/content/ComponentName;Ljava/lang/String;Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setRestrictionsProvider](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setRestrictionsProvider(android.content.ComponentName,%20android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn setRestrictionsProvider<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setRestrictionsProvider", .descriptor == "(Landroid/content/ComponentName;Landroid/content/ComponentName;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setRestrictionsProvider\0", "(Landroid/content/ComponentName;Landroid/content/ComponentName;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setMasterVolumeMuted](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setMasterVolumeMuted(android.content.ComponentName,%20boolean))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn setMasterVolumeMuted<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setMasterVolumeMuted", .descriptor == "(Landroid/content/ComponentName;Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setMasterVolumeMuted\0", "(Landroid/content/ComponentName;Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isMasterVolumeMuted](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isMasterVolumeMuted(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn isMasterVolumeMuted<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "isMasterVolumeMuted", .descriptor == "(Landroid/content/ComponentName;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "isMasterVolumeMuted\0", "(Landroid/content/ComponentName;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setUninstallBlocked](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setUninstallBlocked(android.content.ComponentName,%20java.lang.String,%20boolean))
        ///
        /// Required features: "android-content-ComponentName", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-lang-String")))]
        pub fn setUninstallBlocked<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setUninstallBlocked", .descriptor == "(Landroid/content/ComponentName;Ljava/lang/String;Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setUninstallBlocked\0", "(Landroid/content/ComponentName;Ljava/lang/String;Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isUninstallBlocked](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isUninstallBlocked(android.content.ComponentName,%20java.lang.String))
        ///
        /// Required features: "android-content-ComponentName", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-lang-String")))]
        pub fn isUninstallBlocked<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "isUninstallBlocked", .descriptor == "(Landroid/content/ComponentName;Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "isUninstallBlocked\0", "(Landroid/content/ComponentName;Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addCrossProfileWidgetProvider](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#addCrossProfileWidgetProvider(android.content.ComponentName,%20java.lang.String))
        ///
        /// Required features: "android-content-ComponentName", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-lang-String")))]
        pub fn addCrossProfileWidgetProvider<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "addCrossProfileWidgetProvider", .descriptor == "(Landroid/content/ComponentName;Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "addCrossProfileWidgetProvider\0", "(Landroid/content/ComponentName;Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeCrossProfileWidgetProvider](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#removeCrossProfileWidgetProvider(android.content.ComponentName,%20java.lang.String))
        ///
        /// Required features: "android-content-ComponentName", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-lang-String")))]
        pub fn removeCrossProfileWidgetProvider<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "removeCrossProfileWidgetProvider", .descriptor == "(Landroid/content/ComponentName;Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "removeCrossProfileWidgetProvider\0", "(Landroid/content/ComponentName;Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCrossProfileWidgetProviders](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getCrossProfileWidgetProviders(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-util-List")))]
        pub fn getCrossProfileWidgetProviders<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "getCrossProfileWidgetProviders", .descriptor == "(Landroid/content/ComponentName;)Ljava/util/List;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "getCrossProfileWidgetProviders\0", "(Landroid/content/ComponentName;)Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setUserIcon](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setUserIcon(android.content.ComponentName,%20android.graphics.Bitmap))
        ///
        /// Required features: "android-content-ComponentName", "android-graphics-Bitmap"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "android-graphics-Bitmap")))]
        pub fn setUserIcon<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Bitmap>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setUserIcon", .descriptor == "(Landroid/content/ComponentName;Landroid/graphics/Bitmap;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setUserIcon\0", "(Landroid/content/ComponentName;Landroid/graphics/Bitmap;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setSystemUpdatePolicy](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setSystemUpdatePolicy(android.content.ComponentName,%20android.app.admin.SystemUpdatePolicy))
        ///
        /// Required features: "android-app-admin-SystemUpdatePolicy", "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-app-admin-SystemUpdatePolicy", feature = "android-content-ComponentName")))]
        pub fn setSystemUpdatePolicy<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::admin::SystemUpdatePolicy>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setSystemUpdatePolicy", .descriptor == "(Landroid/content/ComponentName;Landroid/app/admin/SystemUpdatePolicy;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setSystemUpdatePolicy\0", "(Landroid/content/ComponentName;Landroid/app/admin/SystemUpdatePolicy;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSystemUpdatePolicy](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getSystemUpdatePolicy())
        ///
        /// Required features: "android-app-admin-SystemUpdatePolicy"
        #[cfg(any(feature = "all", all(feature = "android-app-admin-SystemUpdatePolicy")))]
        pub fn getSystemUpdatePolicy<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::admin::SystemUpdatePolicy>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "getSystemUpdatePolicy", .descriptor == "()Landroid/app/admin/SystemUpdatePolicy;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "getSystemUpdatePolicy\0", "()Landroid/app/admin/SystemUpdatePolicy;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setKeyguardDisabled](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setKeyguardDisabled(android.content.ComponentName,%20boolean))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn setKeyguardDisabled<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: bool) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setKeyguardDisabled", .descriptor == "(Landroid/content/ComponentName;Z)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setKeyguardDisabled\0", "(Landroid/content/ComponentName;Z)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setStatusBarDisabled](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setStatusBarDisabled(android.content.ComponentName,%20boolean))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn setStatusBarDisabled<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: bool) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setStatusBarDisabled", .descriptor == "(Landroid/content/ComponentName;Z)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setStatusBarDisabled\0", "(Landroid/content/ComponentName;Z)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPendingSystemUpdate](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getPendingSystemUpdate(android.content.ComponentName))
        ///
        /// Required features: "android-app-admin-SystemUpdateInfo", "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-app-admin-SystemUpdateInfo", feature = "android-content-ComponentName")))]
        pub fn getPendingSystemUpdate<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::admin::SystemUpdateInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "getPendingSystemUpdate", .descriptor == "(Landroid/content/ComponentName;)Landroid/app/admin/SystemUpdateInfo;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "getPendingSystemUpdate\0", "(Landroid/content/ComponentName;)Landroid/app/admin/SystemUpdateInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPermissionPolicy](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setPermissionPolicy(android.content.ComponentName,%20int))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn setPermissionPolicy<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setPermissionPolicy", .descriptor == "(Landroid/content/ComponentName;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setPermissionPolicy\0", "(Landroid/content/ComponentName;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPermissionPolicy](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getPermissionPolicy(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn getPermissionPolicy<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "getPermissionPolicy", .descriptor == "(Landroid/content/ComponentName;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "getPermissionPolicy\0", "(Landroid/content/ComponentName;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPermissionGrantState](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setPermissionGrantState(android.content.ComponentName,%20java.lang.String,%20java.lang.String,%20int))
        ///
        /// Required features: "android-content-ComponentName", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-lang-String")))]
        pub fn setPermissionGrantState<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg3: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setPermissionGrantState", .descriptor == "(Landroid/content/ComponentName;Ljava/lang/String;Ljava/lang/String;I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setPermissionGrantState\0", "(Landroid/content/ComponentName;Ljava/lang/String;Ljava/lang/String;I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPermissionGrantState](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getPermissionGrantState(android.content.ComponentName,%20java.lang.String,%20java.lang.String))
        ///
        /// Required features: "android-content-ComponentName", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-lang-String")))]
        pub fn getPermissionGrantState<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "getPermissionGrantState", .descriptor == "(Landroid/content/ComponentName;Ljava/lang/String;Ljava/lang/String;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "getPermissionGrantState\0", "(Landroid/content/ComponentName;Ljava/lang/String;Ljava/lang/String;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isProvisioningAllowed](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isProvisioningAllowed(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn isProvisioningAllowed<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "isProvisioningAllowed", .descriptor == "(Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "isProvisioningAllowed\0", "(Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isManagedProfile](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isManagedProfile(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn isManagedProfile<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "isManagedProfile", .descriptor == "(Landroid/content/ComponentName;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "isManagedProfile\0", "(Landroid/content/ComponentName;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getWifiMacAddress](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getWifiMacAddress(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-lang-String")))]
        pub fn getWifiMacAddress<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "getWifiMacAddress", .descriptor == "(Landroid/content/ComponentName;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "getWifiMacAddress\0", "(Landroid/content/ComponentName;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [reboot](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#reboot(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn reboot<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "reboot", .descriptor == "(Landroid/content/ComponentName;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "reboot\0", "(Landroid/content/ComponentName;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setShortSupportMessage](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setShortSupportMessage(android.content.ComponentName,%20java.lang.CharSequence))
        ///
        /// Required features: "android-content-ComponentName", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-lang-CharSequence")))]
        pub fn setShortSupportMessage<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setShortSupportMessage", .descriptor == "(Landroid/content/ComponentName;Ljava/lang/CharSequence;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setShortSupportMessage\0", "(Landroid/content/ComponentName;Ljava/lang/CharSequence;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getShortSupportMessage](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getShortSupportMessage(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-lang-CharSequence")))]
        pub fn getShortSupportMessage<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::CharSequence>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "getShortSupportMessage", .descriptor == "(Landroid/content/ComponentName;)Ljava/lang/CharSequence;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "getShortSupportMessage\0", "(Landroid/content/ComponentName;)Ljava/lang/CharSequence;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setLongSupportMessage](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setLongSupportMessage(android.content.ComponentName,%20java.lang.CharSequence))
        ///
        /// Required features: "android-content-ComponentName", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-lang-CharSequence")))]
        pub fn setLongSupportMessage<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setLongSupportMessage", .descriptor == "(Landroid/content/ComponentName;Ljava/lang/CharSequence;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setLongSupportMessage\0", "(Landroid/content/ComponentName;Ljava/lang/CharSequence;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLongSupportMessage](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getLongSupportMessage(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-lang-CharSequence")))]
        pub fn getLongSupportMessage<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::CharSequence>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "getLongSupportMessage", .descriptor == "(Landroid/content/ComponentName;)Ljava/lang/CharSequence;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "getLongSupportMessage\0", "(Landroid/content/ComponentName;)Ljava/lang/CharSequence;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getParentProfileInstance](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getParentProfileInstance(android.content.ComponentName))
        ///
        /// Required features: "android-app-admin-DevicePolicyManager", "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-app-admin-DevicePolicyManager", feature = "android-content-ComponentName")))]
        pub fn getParentProfileInstance<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::admin::DevicePolicyManager>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "getParentProfileInstance", .descriptor == "(Landroid/content/ComponentName;)Landroid/app/admin/DevicePolicyManager;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "getParentProfileInstance\0", "(Landroid/content/ComponentName;)Landroid/app/admin/DevicePolicyManager;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setSecurityLoggingEnabled](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setSecurityLoggingEnabled(android.content.ComponentName,%20boolean))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn setSecurityLoggingEnabled<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setSecurityLoggingEnabled", .descriptor == "(Landroid/content/ComponentName;Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setSecurityLoggingEnabled\0", "(Landroid/content/ComponentName;Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isSecurityLoggingEnabled](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isSecurityLoggingEnabled(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn isSecurityLoggingEnabled<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "isSecurityLoggingEnabled", .descriptor == "(Landroid/content/ComponentName;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "isSecurityLoggingEnabled\0", "(Landroid/content/ComponentName;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [retrieveSecurityLogs](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#retrieveSecurityLogs(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-util-List")))]
        pub fn retrieveSecurityLogs<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "retrieveSecurityLogs", .descriptor == "(Landroid/content/ComponentName;)Ljava/util/List;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "retrieveSecurityLogs\0", "(Landroid/content/ComponentName;)Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setMeteredDataDisabledPackages](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setMeteredDataDisabledPackages(android.content.ComponentName,%20java.util.List))
        ///
        /// Required features: "android-content-ComponentName", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-util-List")))]
        pub fn setMeteredDataDisabledPackages<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setMeteredDataDisabledPackages", .descriptor == "(Landroid/content/ComponentName;Ljava/util/List;)Ljava/util/List;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setMeteredDataDisabledPackages\0", "(Landroid/content/ComponentName;Ljava/util/List;)Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMeteredDataDisabledPackages](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getMeteredDataDisabledPackages(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-util-List")))]
        pub fn getMeteredDataDisabledPackages<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "getMeteredDataDisabledPackages", .descriptor == "(Landroid/content/ComponentName;)Ljava/util/List;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "getMeteredDataDisabledPackages\0", "(Landroid/content/ComponentName;)Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [retrievePreRebootSecurityLogs](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#retrievePreRebootSecurityLogs(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-util-List")))]
        pub fn retrievePreRebootSecurityLogs<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "retrievePreRebootSecurityLogs", .descriptor == "(Landroid/content/ComponentName;)Ljava/util/List;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "retrievePreRebootSecurityLogs\0", "(Landroid/content/ComponentName;)Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOrganizationColor](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setOrganizationColor(android.content.ComponentName,%20int))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn setOrganizationColor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setOrganizationColor", .descriptor == "(Landroid/content/ComponentName;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setOrganizationColor\0", "(Landroid/content/ComponentName;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getOrganizationColor](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getOrganizationColor(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn getOrganizationColor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "getOrganizationColor", .descriptor == "(Landroid/content/ComponentName;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "getOrganizationColor\0", "(Landroid/content/ComponentName;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOrganizationName](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setOrganizationName(android.content.ComponentName,%20java.lang.CharSequence))
        ///
        /// Required features: "android-content-ComponentName", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-lang-CharSequence")))]
        pub fn setOrganizationName<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setOrganizationName", .descriptor == "(Landroid/content/ComponentName;Ljava/lang/CharSequence;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setOrganizationName\0", "(Landroid/content/ComponentName;Ljava/lang/CharSequence;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getOrganizationName](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getOrganizationName(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-lang-CharSequence")))]
        pub fn getOrganizationName<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::CharSequence>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "getOrganizationName", .descriptor == "(Landroid/content/ComponentName;)Ljava/lang/CharSequence;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "getOrganizationName\0", "(Landroid/content/ComponentName;)Ljava/lang/CharSequence;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAffiliationIds](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setAffiliationIds(android.content.ComponentName,%20java.util.Set))
        ///
        /// Required features: "android-content-ComponentName", "java-util-Set"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-util-Set")))]
        pub fn setAffiliationIds<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Set>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setAffiliationIds", .descriptor == "(Landroid/content/ComponentName;Ljava/util/Set;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setAffiliationIds\0", "(Landroid/content/ComponentName;Ljava/util/Set;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAffiliationIds](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getAffiliationIds(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName", "java-util-Set"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-util-Set")))]
        pub fn getAffiliationIds<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Set>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "getAffiliationIds", .descriptor == "(Landroid/content/ComponentName;)Ljava/util/Set;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "getAffiliationIds\0", "(Landroid/content/ComponentName;)Ljava/util/Set;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isAffiliatedUser](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isAffiliatedUser())
        pub fn isAffiliatedUser<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "isAffiliatedUser", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "isAffiliatedUser\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setBackupServiceEnabled](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setBackupServiceEnabled(android.content.ComponentName,%20boolean))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn setBackupServiceEnabled<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setBackupServiceEnabled", .descriptor == "(Landroid/content/ComponentName;Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setBackupServiceEnabled\0", "(Landroid/content/ComponentName;Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isBackupServiceEnabled](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isBackupServiceEnabled(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn isBackupServiceEnabled<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "isBackupServiceEnabled", .descriptor == "(Landroid/content/ComponentName;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "isBackupServiceEnabled\0", "(Landroid/content/ComponentName;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setNetworkLoggingEnabled](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setNetworkLoggingEnabled(android.content.ComponentName,%20boolean))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn setNetworkLoggingEnabled<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setNetworkLoggingEnabled", .descriptor == "(Landroid/content/ComponentName;Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setNetworkLoggingEnabled\0", "(Landroid/content/ComponentName;Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isNetworkLoggingEnabled](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isNetworkLoggingEnabled(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn isNetworkLoggingEnabled<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "isNetworkLoggingEnabled", .descriptor == "(Landroid/content/ComponentName;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "isNetworkLoggingEnabled\0", "(Landroid/content/ComponentName;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [retrieveNetworkLogs](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#retrieveNetworkLogs(android.content.ComponentName,%20long))
        ///
        /// Required features: "android-content-ComponentName", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-util-List")))]
        pub fn retrieveNetworkLogs<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "retrieveNetworkLogs", .descriptor == "(Landroid/content/ComponentName;J)Ljava/util/List;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "retrieveNetworkLogs\0", "(Landroid/content/ComponentName;J)Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [bindDeviceAdminServiceAsUser](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#bindDeviceAdminServiceAsUser(android.content.ComponentName,%20android.content.Intent,%20android.content.ServiceConnection,%20int,%20android.os.UserHandle))
        ///
        /// Required features: "android-content-ComponentName", "android-content-Intent", "android-content-ServiceConnection", "android-os-UserHandle"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "android-content-Intent", feature = "android-content-ServiceConnection", feature = "android-os-UserHandle")))]
        pub fn bindDeviceAdminServiceAsUser<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ServiceConnection>>, arg3: i32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::UserHandle>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "bindDeviceAdminServiceAsUser", .descriptor == "(Landroid/content/ComponentName;Landroid/content/Intent;Landroid/content/ServiceConnection;ILandroid/os/UserHandle;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "bindDeviceAdminServiceAsUser\0", "(Landroid/content/ComponentName;Landroid/content/Intent;Landroid/content/ServiceConnection;ILandroid/os/UserHandle;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getBindDeviceAdminTargetUsers](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getBindDeviceAdminTargetUsers(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-util-List")))]
        pub fn getBindDeviceAdminTargetUsers<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "getBindDeviceAdminTargetUsers", .descriptor == "(Landroid/content/ComponentName;)Ljava/util/List;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "getBindDeviceAdminTargetUsers\0", "(Landroid/content/ComponentName;)Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clearApplicationUserData](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#clearApplicationUserData(android.content.ComponentName,%20java.lang.String,%20java.util.concurrent.Executor,%20android.app.admin.DevicePolicyManager.OnClearApplicationUserDataListener))
        ///
        /// Required features: "android-app-admin-DevicePolicyManager_OnClearApplicationUserDataListener", "android-content-ComponentName", "java-lang-String", "java-util-concurrent-Executor"
        #[cfg(any(feature = "all", all(feature = "android-app-admin-DevicePolicyManager_OnClearApplicationUserDataListener", feature = "android-content-ComponentName", feature = "java-lang-String", feature = "java-util-concurrent-Executor")))]
        pub fn clearApplicationUserData<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::admin::DevicePolicyManager_OnClearApplicationUserDataListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "clearApplicationUserData", .descriptor == "(Landroid/content/ComponentName;Ljava/lang/String;Ljava/util/concurrent/Executor;Landroid/app/admin/DevicePolicyManager$OnClearApplicationUserDataListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "clearApplicationUserData\0", "(Landroid/content/ComponentName;Ljava/lang/String;Ljava/util/concurrent/Executor;Landroid/app/admin/DevicePolicyManager$OnClearApplicationUserDataListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setLogoutEnabled](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setLogoutEnabled(android.content.ComponentName,%20boolean))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn setLogoutEnabled<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setLogoutEnabled", .descriptor == "(Landroid/content/ComponentName;Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setLogoutEnabled\0", "(Landroid/content/ComponentName;Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isLogoutEnabled](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isLogoutEnabled())
        pub fn isLogoutEnabled<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "isLogoutEnabled", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "isLogoutEnabled\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [transferOwnership](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#transferOwnership(android.content.ComponentName,%20android.content.ComponentName,%20android.os.PersistableBundle))
        ///
        /// Required features: "android-content-ComponentName", "android-os-PersistableBundle"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "android-os-PersistableBundle")))]
        pub fn transferOwnership<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::PersistableBundle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "transferOwnership", .descriptor == "(Landroid/content/ComponentName;Landroid/content/ComponentName;Landroid/os/PersistableBundle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "transferOwnership\0", "(Landroid/content/ComponentName;Landroid/content/ComponentName;Landroid/os/PersistableBundle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setStartUserSessionMessage](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setStartUserSessionMessage(android.content.ComponentName,%20java.lang.CharSequence))
        ///
        /// Required features: "android-content-ComponentName", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-lang-CharSequence")))]
        pub fn setStartUserSessionMessage<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setStartUserSessionMessage", .descriptor == "(Landroid/content/ComponentName;Ljava/lang/CharSequence;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setStartUserSessionMessage\0", "(Landroid/content/ComponentName;Ljava/lang/CharSequence;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setEndUserSessionMessage](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setEndUserSessionMessage(android.content.ComponentName,%20java.lang.CharSequence))
        ///
        /// Required features: "android-content-ComponentName", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-lang-CharSequence")))]
        pub fn setEndUserSessionMessage<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setEndUserSessionMessage", .descriptor == "(Landroid/content/ComponentName;Ljava/lang/CharSequence;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setEndUserSessionMessage\0", "(Landroid/content/ComponentName;Ljava/lang/CharSequence;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getStartUserSessionMessage](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getStartUserSessionMessage(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-lang-CharSequence")))]
        pub fn getStartUserSessionMessage<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::CharSequence>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "getStartUserSessionMessage", .descriptor == "(Landroid/content/ComponentName;)Ljava/lang/CharSequence;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "getStartUserSessionMessage\0", "(Landroid/content/ComponentName;)Ljava/lang/CharSequence;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getEndUserSessionMessage](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getEndUserSessionMessage(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-lang-CharSequence")))]
        pub fn getEndUserSessionMessage<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::CharSequence>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "getEndUserSessionMessage", .descriptor == "(Landroid/content/ComponentName;)Ljava/lang/CharSequence;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "getEndUserSessionMessage\0", "(Landroid/content/ComponentName;)Ljava/lang/CharSequence;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addOverrideApn](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#addOverrideApn(android.content.ComponentName,%20android.telephony.data.ApnSetting))
        ///
        /// Required features: "android-content-ComponentName", "android-telephony-data-ApnSetting"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "android-telephony-data-ApnSetting")))]
        pub fn addOverrideApn<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telephony::data::ApnSetting>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "addOverrideApn", .descriptor == "(Landroid/content/ComponentName;Landroid/telephony/data/ApnSetting;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "addOverrideApn\0", "(Landroid/content/ComponentName;Landroid/telephony/data/ApnSetting;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateOverrideApn](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#updateOverrideApn(android.content.ComponentName,%20int,%20android.telephony.data.ApnSetting))
        ///
        /// Required features: "android-content-ComponentName", "android-telephony-data-ApnSetting"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "android-telephony-data-ApnSetting")))]
        pub fn updateOverrideApn<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::telephony::data::ApnSetting>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "updateOverrideApn", .descriptor == "(Landroid/content/ComponentName;ILandroid/telephony/data/ApnSetting;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "updateOverrideApn\0", "(Landroid/content/ComponentName;ILandroid/telephony/data/ApnSetting;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeOverrideApn](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#removeOverrideApn(android.content.ComponentName,%20int))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn removeOverrideApn<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "removeOverrideApn", .descriptor == "(Landroid/content/ComponentName;I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "removeOverrideApn\0", "(Landroid/content/ComponentName;I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getOverrideApns](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getOverrideApns(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-util-List")))]
        pub fn getOverrideApns<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "getOverrideApns", .descriptor == "(Landroid/content/ComponentName;)Ljava/util/List;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "getOverrideApns\0", "(Landroid/content/ComponentName;)Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOverrideApnsEnabled](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setOverrideApnsEnabled(android.content.ComponentName,%20boolean))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn setOverrideApnsEnabled<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setOverrideApnsEnabled", .descriptor == "(Landroid/content/ComponentName;Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setOverrideApnsEnabled\0", "(Landroid/content/ComponentName;Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isOverrideApnEnabled](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isOverrideApnEnabled(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn isOverrideApnEnabled<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "isOverrideApnEnabled", .descriptor == "(Landroid/content/ComponentName;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "isOverrideApnEnabled\0", "(Landroid/content/ComponentName;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTransferOwnershipBundle](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getTransferOwnershipBundle())
        ///
        /// Required features: "android-os-PersistableBundle"
        #[cfg(any(feature = "all", all(feature = "android-os-PersistableBundle")))]
        pub fn getTransferOwnershipBundle<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::PersistableBundle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "getTransferOwnershipBundle", .descriptor == "()Landroid/os/PersistableBundle;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "getTransferOwnershipBundle\0", "()Landroid/os/PersistableBundle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setGlobalPrivateDnsModeOpportunistic](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setGlobalPrivateDnsModeOpportunistic(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn setGlobalPrivateDnsModeOpportunistic<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setGlobalPrivateDnsModeOpportunistic", .descriptor == "(Landroid/content/ComponentName;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setGlobalPrivateDnsModeOpportunistic\0", "(Landroid/content/ComponentName;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setGlobalPrivateDnsModeSpecifiedHost](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setGlobalPrivateDnsModeSpecifiedHost(android.content.ComponentName,%20java.lang.String))
        ///
        /// Required features: "android-content-ComponentName", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-lang-String")))]
        pub fn setGlobalPrivateDnsModeSpecifiedHost<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setGlobalPrivateDnsModeSpecifiedHost", .descriptor == "(Landroid/content/ComponentName;Ljava/lang/String;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setGlobalPrivateDnsModeSpecifiedHost\0", "(Landroid/content/ComponentName;Ljava/lang/String;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [installSystemUpdate](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#installSystemUpdate(android.content.ComponentName,%20android.net.Uri,%20java.util.concurrent.Executor,%20android.app.admin.DevicePolicyManager.InstallSystemUpdateCallback))
        ///
        /// Required features: "android-app-admin-DevicePolicyManager_InstallSystemUpdateCallback", "android-content-ComponentName", "android-net-Uri", "java-util-concurrent-Executor"
        #[cfg(any(feature = "all", all(feature = "android-app-admin-DevicePolicyManager_InstallSystemUpdateCallback", feature = "android-content-ComponentName", feature = "android-net-Uri", feature = "java-util-concurrent-Executor")))]
        pub fn installSystemUpdate<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::admin::DevicePolicyManager_InstallSystemUpdateCallback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "installSystemUpdate", .descriptor == "(Landroid/content/ComponentName;Landroid/net/Uri;Ljava/util/concurrent/Executor;Landroid/app/admin/DevicePolicyManager$InstallSystemUpdateCallback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "installSystemUpdate\0", "(Landroid/content/ComponentName;Landroid/net/Uri;Ljava/util/concurrent/Executor;Landroid/app/admin/DevicePolicyManager$InstallSystemUpdateCallback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getGlobalPrivateDnsMode](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getGlobalPrivateDnsMode(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn getGlobalPrivateDnsMode<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "getGlobalPrivateDnsMode", .descriptor == "(Landroid/content/ComponentName;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "getGlobalPrivateDnsMode\0", "(Landroid/content/ComponentName;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getGlobalPrivateDnsHost](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getGlobalPrivateDnsHost(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-lang-String")))]
        pub fn getGlobalPrivateDnsHost<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "getGlobalPrivateDnsHost", .descriptor == "(Landroid/content/ComponentName;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "getGlobalPrivateDnsHost\0", "(Landroid/content/ComponentName;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setCrossProfileCalendarPackages](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setCrossProfileCalendarPackages(android.content.ComponentName,%20java.util.Set))
        ///
        /// Required features: "android-content-ComponentName", "java-util-Set"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-util-Set")))]
        pub fn setCrossProfileCalendarPackages<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Set>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "setCrossProfileCalendarPackages", .descriptor == "(Landroid/content/ComponentName;Ljava/util/Set;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "setCrossProfileCalendarPackages\0", "(Landroid/content/ComponentName;Ljava/util/Set;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCrossProfileCalendarPackages](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#getCrossProfileCalendarPackages(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName", "java-util-Set"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-util-Set")))]
        pub fn getCrossProfileCalendarPackages<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Set>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DevicePolicyManager", java.flags == PUBLIC, .name == "getCrossProfileCalendarPackages", .descriptor == "(Landroid/content/ComponentName;)Ljava/util/Set;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DevicePolicyManager\0", "getCrossProfileCalendarPackages\0", "(Landroid/content/ComponentName;)Ljava/util/Set;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [ACTION_ADD_DEVICE_ADMIN](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#ACTION_ADD_DEVICE_ADMIN)
        pub const ACTION_ADD_DEVICE_ADMIN : &'static str = "android.app.action.ADD_DEVICE_ADMIN";

        /// public static final [ACTION_ADMIN_POLICY_COMPLIANCE](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#ACTION_ADMIN_POLICY_COMPLIANCE)
        pub const ACTION_ADMIN_POLICY_COMPLIANCE : &'static str = "android.app.action.ADMIN_POLICY_COMPLIANCE";

        /// public static final [ACTION_APPLICATION_DELEGATION_SCOPES_CHANGED](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#ACTION_APPLICATION_DELEGATION_SCOPES_CHANGED)
        pub const ACTION_APPLICATION_DELEGATION_SCOPES_CHANGED : &'static str = "android.app.action.APPLICATION_DELEGATION_SCOPES_CHANGED";

        /// public static final [ACTION_DEVICE_ADMIN_SERVICE](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#ACTION_DEVICE_ADMIN_SERVICE)
        pub const ACTION_DEVICE_ADMIN_SERVICE : &'static str = "android.app.action.DEVICE_ADMIN_SERVICE";

        /// public static final [ACTION_DEVICE_OWNER_CHANGED](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#ACTION_DEVICE_OWNER_CHANGED)
        pub const ACTION_DEVICE_OWNER_CHANGED : &'static str = "android.app.action.DEVICE_OWNER_CHANGED";

        /// public static final [ACTION_GET_PROVISIONING_MODE](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#ACTION_GET_PROVISIONING_MODE)
        pub const ACTION_GET_PROVISIONING_MODE : &'static str = "android.app.action.GET_PROVISIONING_MODE";

        /// public static final [ACTION_MANAGED_PROFILE_PROVISIONED](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#ACTION_MANAGED_PROFILE_PROVISIONED)
        pub const ACTION_MANAGED_PROFILE_PROVISIONED : &'static str = "android.app.action.MANAGED_PROFILE_PROVISIONED";

        /// public static final [ACTION_PROFILE_OWNER_CHANGED](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#ACTION_PROFILE_OWNER_CHANGED)
        pub const ACTION_PROFILE_OWNER_CHANGED : &'static str = "android.app.action.PROFILE_OWNER_CHANGED";

        /// public static final [ACTION_PROVISIONING_SUCCESSFUL](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#ACTION_PROVISIONING_SUCCESSFUL)
        pub const ACTION_PROVISIONING_SUCCESSFUL : &'static str = "android.app.action.PROVISIONING_SUCCESSFUL";

        /// public static final [ACTION_PROVISION_MANAGED_DEVICE](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#ACTION_PROVISION_MANAGED_DEVICE)
        pub const ACTION_PROVISION_MANAGED_DEVICE : &'static str = "android.app.action.PROVISION_MANAGED_DEVICE";

        /// public static final [ACTION_PROVISION_MANAGED_PROFILE](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#ACTION_PROVISION_MANAGED_PROFILE)
        pub const ACTION_PROVISION_MANAGED_PROFILE : &'static str = "android.app.action.PROVISION_MANAGED_PROFILE";

        /// public static final [ACTION_SET_NEW_PARENT_PROFILE_PASSWORD](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#ACTION_SET_NEW_PARENT_PROFILE_PASSWORD)
        pub const ACTION_SET_NEW_PARENT_PROFILE_PASSWORD : &'static str = "android.app.action.SET_NEW_PARENT_PROFILE_PASSWORD";

        /// public static final [ACTION_SET_NEW_PASSWORD](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#ACTION_SET_NEW_PASSWORD)
        pub const ACTION_SET_NEW_PASSWORD : &'static str = "android.app.action.SET_NEW_PASSWORD";

        /// public static final [ACTION_START_ENCRYPTION](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#ACTION_START_ENCRYPTION)
        pub const ACTION_START_ENCRYPTION : &'static str = "android.app.action.START_ENCRYPTION";

        /// public static final [ACTION_SYSTEM_UPDATE_POLICY_CHANGED](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#ACTION_SYSTEM_UPDATE_POLICY_CHANGED)
        pub const ACTION_SYSTEM_UPDATE_POLICY_CHANGED : &'static str = "android.app.action.SYSTEM_UPDATE_POLICY_CHANGED";

        /// public static final [DELEGATION_APP_RESTRICTIONS](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#DELEGATION_APP_RESTRICTIONS)
        pub const DELEGATION_APP_RESTRICTIONS : &'static str = "delegation-app-restrictions";

        /// public static final [DELEGATION_BLOCK_UNINSTALL](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#DELEGATION_BLOCK_UNINSTALL)
        pub const DELEGATION_BLOCK_UNINSTALL : &'static str = "delegation-block-uninstall";

        /// public static final [DELEGATION_CERT_INSTALL](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#DELEGATION_CERT_INSTALL)
        pub const DELEGATION_CERT_INSTALL : &'static str = "delegation-cert-install";

        /// public static final [DELEGATION_CERT_SELECTION](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#DELEGATION_CERT_SELECTION)
        pub const DELEGATION_CERT_SELECTION : &'static str = "delegation-cert-selection";

        /// public static final [DELEGATION_ENABLE_SYSTEM_APP](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#DELEGATION_ENABLE_SYSTEM_APP)
        pub const DELEGATION_ENABLE_SYSTEM_APP : &'static str = "delegation-enable-system-app";

        /// public static final [DELEGATION_INSTALL_EXISTING_PACKAGE](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#DELEGATION_INSTALL_EXISTING_PACKAGE)
        pub const DELEGATION_INSTALL_EXISTING_PACKAGE : &'static str = "delegation-install-existing-package";

        /// public static final [DELEGATION_KEEP_UNINSTALLED_PACKAGES](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#DELEGATION_KEEP_UNINSTALLED_PACKAGES)
        pub const DELEGATION_KEEP_UNINSTALLED_PACKAGES : &'static str = "delegation-keep-uninstalled-packages";

        /// public static final [DELEGATION_NETWORK_LOGGING](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#DELEGATION_NETWORK_LOGGING)
        pub const DELEGATION_NETWORK_LOGGING : &'static str = "delegation-network-logging";

        /// public static final [DELEGATION_PACKAGE_ACCESS](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#DELEGATION_PACKAGE_ACCESS)
        pub const DELEGATION_PACKAGE_ACCESS : &'static str = "delegation-package-access";

        /// public static final [DELEGATION_PERMISSION_GRANT](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#DELEGATION_PERMISSION_GRANT)
        pub const DELEGATION_PERMISSION_GRANT : &'static str = "delegation-permission-grant";

        /// public static final [ENCRYPTION_STATUS_ACTIVATING](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#ENCRYPTION_STATUS_ACTIVATING)
        pub const ENCRYPTION_STATUS_ACTIVATING : i32 = 2;

        /// public static final [ENCRYPTION_STATUS_ACTIVE](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#ENCRYPTION_STATUS_ACTIVE)
        pub const ENCRYPTION_STATUS_ACTIVE : i32 = 3;

        /// public static final [ENCRYPTION_STATUS_ACTIVE_DEFAULT_KEY](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#ENCRYPTION_STATUS_ACTIVE_DEFAULT_KEY)
        pub const ENCRYPTION_STATUS_ACTIVE_DEFAULT_KEY : i32 = 4;

        /// public static final [ENCRYPTION_STATUS_ACTIVE_PER_USER](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#ENCRYPTION_STATUS_ACTIVE_PER_USER)
        pub const ENCRYPTION_STATUS_ACTIVE_PER_USER : i32 = 5;

        /// public static final [ENCRYPTION_STATUS_INACTIVE](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#ENCRYPTION_STATUS_INACTIVE)
        pub const ENCRYPTION_STATUS_INACTIVE : i32 = 1;

        /// public static final [ENCRYPTION_STATUS_UNSUPPORTED](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#ENCRYPTION_STATUS_UNSUPPORTED)
        pub const ENCRYPTION_STATUS_UNSUPPORTED : i32 = 0;

        /// public static final [EXTRA_ADD_EXPLANATION](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_ADD_EXPLANATION)
        pub const EXTRA_ADD_EXPLANATION : &'static str = "android.app.extra.ADD_EXPLANATION";

        /// public static final [EXTRA_DELEGATION_SCOPES](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_DELEGATION_SCOPES)
        pub const EXTRA_DELEGATION_SCOPES : &'static str = "android.app.extra.DELEGATION_SCOPES";

        /// public static final [EXTRA_DEVICE_ADMIN](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_DEVICE_ADMIN)
        pub const EXTRA_DEVICE_ADMIN : &'static str = "android.app.extra.DEVICE_ADMIN";

        /// public static final [EXTRA_PASSWORD_COMPLEXITY](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PASSWORD_COMPLEXITY)
        pub const EXTRA_PASSWORD_COMPLEXITY : &'static str = "android.app.extra.PASSWORD_COMPLEXITY";

        /// public static final [EXTRA_PROVISIONING_ACCOUNT_TO_MIGRATE](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_ACCOUNT_TO_MIGRATE)
        pub const EXTRA_PROVISIONING_ACCOUNT_TO_MIGRATE : &'static str = "android.app.extra.PROVISIONING_ACCOUNT_TO_MIGRATE";

        /// public static final [EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLE](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLE)
        pub const EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLE : &'static str = "android.app.extra.PROVISIONING_ADMIN_EXTRAS_BUNDLE";

        /// public static final [EXTRA_PROVISIONING_DEVICE_ADMIN_COMPONENT_NAME](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_DEVICE_ADMIN_COMPONENT_NAME)
        pub const EXTRA_PROVISIONING_DEVICE_ADMIN_COMPONENT_NAME : &'static str = "android.app.extra.PROVISIONING_DEVICE_ADMIN_COMPONENT_NAME";

        /// public static final [EXTRA_PROVISIONING_DEVICE_ADMIN_MINIMUM_VERSION_CODE](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_DEVICE_ADMIN_MINIMUM_VERSION_CODE)
        pub const EXTRA_PROVISIONING_DEVICE_ADMIN_MINIMUM_VERSION_CODE : &'static str = "android.app.extra.PROVISIONING_DEVICE_ADMIN_MINIMUM_VERSION_CODE";

        /// public static final [EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_CHECKSUM](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_CHECKSUM)
        pub const EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_CHECKSUM : &'static str = "android.app.extra.PROVISIONING_DEVICE_ADMIN_PACKAGE_CHECKSUM";

        /// public static final [EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_COOKIE_HEADER](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_COOKIE_HEADER)
        pub const EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_COOKIE_HEADER : &'static str = "android.app.extra.PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_COOKIE_HEADER";

        /// public static final [EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATION](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATION)
        pub const EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATION : &'static str = "android.app.extra.PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATION";

        /// public static final [EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME)
        #[deprecated] pub const EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME : &'static str = "android.app.extra.PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME";

        /// public static final [EXTRA_PROVISIONING_DEVICE_ADMIN_SIGNATURE_CHECKSUM](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_DEVICE_ADMIN_SIGNATURE_CHECKSUM)
        pub const EXTRA_PROVISIONING_DEVICE_ADMIN_SIGNATURE_CHECKSUM : &'static str = "android.app.extra.PROVISIONING_DEVICE_ADMIN_SIGNATURE_CHECKSUM";

        /// public static final [EXTRA_PROVISIONING_DISCLAIMERS](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_DISCLAIMERS)
        pub const EXTRA_PROVISIONING_DISCLAIMERS : &'static str = "android.app.extra.PROVISIONING_DISCLAIMERS";

        /// public static final [EXTRA_PROVISIONING_DISCLAIMER_CONTENT](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_DISCLAIMER_CONTENT)
        pub const EXTRA_PROVISIONING_DISCLAIMER_CONTENT : &'static str = "android.app.extra.PROVISIONING_DISCLAIMER_CONTENT";

        /// public static final [EXTRA_PROVISIONING_DISCLAIMER_HEADER](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_DISCLAIMER_HEADER)
        pub const EXTRA_PROVISIONING_DISCLAIMER_HEADER : &'static str = "android.app.extra.PROVISIONING_DISCLAIMER_HEADER";

        /// public static final [EXTRA_PROVISIONING_EMAIL_ADDRESS](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_EMAIL_ADDRESS)
        #[deprecated] pub const EXTRA_PROVISIONING_EMAIL_ADDRESS : &'static str = "android.app.extra.PROVISIONING_EMAIL_ADDRESS";

        /// public static final [EXTRA_PROVISIONING_IMEI](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_IMEI)
        pub const EXTRA_PROVISIONING_IMEI : &'static str = "android.app.extra.PROVISIONING_IMEI";

        /// public static final [EXTRA_PROVISIONING_KEEP_ACCOUNT_ON_MIGRATION](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_KEEP_ACCOUNT_ON_MIGRATION)
        pub const EXTRA_PROVISIONING_KEEP_ACCOUNT_ON_MIGRATION : &'static str = "android.app.extra.PROVISIONING_KEEP_ACCOUNT_ON_MIGRATION";

        /// public static final [EXTRA_PROVISIONING_LEAVE_ALL_SYSTEM_APPS_ENABLED](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_LEAVE_ALL_SYSTEM_APPS_ENABLED)
        pub const EXTRA_PROVISIONING_LEAVE_ALL_SYSTEM_APPS_ENABLED : &'static str = "android.app.extra.PROVISIONING_LEAVE_ALL_SYSTEM_APPS_ENABLED";

        /// public static final [EXTRA_PROVISIONING_LOCALE](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_LOCALE)
        pub const EXTRA_PROVISIONING_LOCALE : &'static str = "android.app.extra.PROVISIONING_LOCALE";

        /// public static final [EXTRA_PROVISIONING_LOCAL_TIME](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_LOCAL_TIME)
        pub const EXTRA_PROVISIONING_LOCAL_TIME : &'static str = "android.app.extra.PROVISIONING_LOCAL_TIME";

        /// public static final [EXTRA_PROVISIONING_LOGO_URI](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_LOGO_URI)
        pub const EXTRA_PROVISIONING_LOGO_URI : &'static str = "android.app.extra.PROVISIONING_LOGO_URI";

        /// public static final [EXTRA_PROVISIONING_MAIN_COLOR](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_MAIN_COLOR)
        pub const EXTRA_PROVISIONING_MAIN_COLOR : &'static str = "android.app.extra.PROVISIONING_MAIN_COLOR";

        /// public static final [EXTRA_PROVISIONING_MODE](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_MODE)
        pub const EXTRA_PROVISIONING_MODE : &'static str = "android.app.extra.PROVISIONING_MODE";

        /// public static final [EXTRA_PROVISIONING_SERIAL_NUMBER](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_SERIAL_NUMBER)
        pub const EXTRA_PROVISIONING_SERIAL_NUMBER : &'static str = "android.app.extra.PROVISIONING_SERIAL_NUMBER";

        /// public static final [EXTRA_PROVISIONING_SKIP_EDUCATION_SCREENS](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_SKIP_EDUCATION_SCREENS)
        pub const EXTRA_PROVISIONING_SKIP_EDUCATION_SCREENS : &'static str = "android.app.extra.PROVISIONING_SKIP_EDUCATION_SCREENS";

        /// public static final [EXTRA_PROVISIONING_SKIP_ENCRYPTION](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_SKIP_ENCRYPTION)
        pub const EXTRA_PROVISIONING_SKIP_ENCRYPTION : &'static str = "android.app.extra.PROVISIONING_SKIP_ENCRYPTION";

        /// public static final [EXTRA_PROVISIONING_SKIP_USER_CONSENT](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_SKIP_USER_CONSENT)
        pub const EXTRA_PROVISIONING_SKIP_USER_CONSENT : &'static str = "android.app.extra.PROVISIONING_SKIP_USER_CONSENT";

        /// public static final [EXTRA_PROVISIONING_TIME_ZONE](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_TIME_ZONE)
        pub const EXTRA_PROVISIONING_TIME_ZONE : &'static str = "android.app.extra.PROVISIONING_TIME_ZONE";

        /// public static final [EXTRA_PROVISIONING_WIFI_ANONYMOUS_IDENTITY](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_WIFI_ANONYMOUS_IDENTITY)
        pub const EXTRA_PROVISIONING_WIFI_ANONYMOUS_IDENTITY : &'static str = "android.app.extra.PROVISIONING_WIFI_ANONYMOUS_IDENTITY";

        /// public static final [EXTRA_PROVISIONING_WIFI_CA_CERTIFICATE](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_WIFI_CA_CERTIFICATE)
        pub const EXTRA_PROVISIONING_WIFI_CA_CERTIFICATE : &'static str = "android.app.extra.PROVISIONING_WIFI_CA_CERTIFICATE";

        /// public static final [EXTRA_PROVISIONING_WIFI_DOMAIN](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_WIFI_DOMAIN)
        pub const EXTRA_PROVISIONING_WIFI_DOMAIN : &'static str = "android.app.extra.PROVISIONING_WIFI_DOMAIN";

        /// public static final [EXTRA_PROVISIONING_WIFI_EAP_METHOD](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_WIFI_EAP_METHOD)
        pub const EXTRA_PROVISIONING_WIFI_EAP_METHOD : &'static str = "android.app.extra.PROVISIONING_WIFI_EAP_METHOD";

        /// public static final [EXTRA_PROVISIONING_WIFI_HIDDEN](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_WIFI_HIDDEN)
        pub const EXTRA_PROVISIONING_WIFI_HIDDEN : &'static str = "android.app.extra.PROVISIONING_WIFI_HIDDEN";

        /// public static final [EXTRA_PROVISIONING_WIFI_IDENTITY](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_WIFI_IDENTITY)
        pub const EXTRA_PROVISIONING_WIFI_IDENTITY : &'static str = "android.app.extra.PROVISIONING_WIFI_IDENTITY";

        /// public static final [EXTRA_PROVISIONING_WIFI_PAC_URL](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_WIFI_PAC_URL)
        pub const EXTRA_PROVISIONING_WIFI_PAC_URL : &'static str = "android.app.extra.PROVISIONING_WIFI_PAC_URL";

        /// public static final [EXTRA_PROVISIONING_WIFI_PASSWORD](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_WIFI_PASSWORD)
        pub const EXTRA_PROVISIONING_WIFI_PASSWORD : &'static str = "android.app.extra.PROVISIONING_WIFI_PASSWORD";

        /// public static final [EXTRA_PROVISIONING_WIFI_PHASE2_AUTH](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_WIFI_PHASE2_AUTH)
        pub const EXTRA_PROVISIONING_WIFI_PHASE2_AUTH : &'static str = "android.app.extra.PROVISIONING_WIFI_PHASE2_AUTH";

        /// public static final [EXTRA_PROVISIONING_WIFI_PROXY_BYPASS](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_WIFI_PROXY_BYPASS)
        pub const EXTRA_PROVISIONING_WIFI_PROXY_BYPASS : &'static str = "android.app.extra.PROVISIONING_WIFI_PROXY_BYPASS";

        /// public static final [EXTRA_PROVISIONING_WIFI_PROXY_HOST](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_WIFI_PROXY_HOST)
        pub const EXTRA_PROVISIONING_WIFI_PROXY_HOST : &'static str = "android.app.extra.PROVISIONING_WIFI_PROXY_HOST";

        /// public static final [EXTRA_PROVISIONING_WIFI_PROXY_PORT](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_WIFI_PROXY_PORT)
        pub const EXTRA_PROVISIONING_WIFI_PROXY_PORT : &'static str = "android.app.extra.PROVISIONING_WIFI_PROXY_PORT";

        /// public static final [EXTRA_PROVISIONING_WIFI_SECURITY_TYPE](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_WIFI_SECURITY_TYPE)
        pub const EXTRA_PROVISIONING_WIFI_SECURITY_TYPE : &'static str = "android.app.extra.PROVISIONING_WIFI_SECURITY_TYPE";

        /// public static final [EXTRA_PROVISIONING_WIFI_SSID](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_WIFI_SSID)
        pub const EXTRA_PROVISIONING_WIFI_SSID : &'static str = "android.app.extra.PROVISIONING_WIFI_SSID";

        /// public static final [EXTRA_PROVISIONING_WIFI_USER_CERTIFICATE](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#EXTRA_PROVISIONING_WIFI_USER_CERTIFICATE)
        pub const EXTRA_PROVISIONING_WIFI_USER_CERTIFICATE : &'static str = "android.app.extra.PROVISIONING_WIFI_USER_CERTIFICATE";

        /// public static final [FLAG_EVICT_CREDENTIAL_ENCRYPTION_KEY](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#FLAG_EVICT_CREDENTIAL_ENCRYPTION_KEY)
        pub const FLAG_EVICT_CREDENTIAL_ENCRYPTION_KEY : i32 = 1;

        /// public static final [FLAG_MANAGED_CAN_ACCESS_PARENT](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#FLAG_MANAGED_CAN_ACCESS_PARENT)
        pub const FLAG_MANAGED_CAN_ACCESS_PARENT : i32 = 2;

        /// public static final [FLAG_PARENT_CAN_ACCESS_MANAGED](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#FLAG_PARENT_CAN_ACCESS_MANAGED)
        pub const FLAG_PARENT_CAN_ACCESS_MANAGED : i32 = 1;

        /// public static final [ID_TYPE_BASE_INFO](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#ID_TYPE_BASE_INFO)
        pub const ID_TYPE_BASE_INFO : i32 = 1;

        /// public static final [ID_TYPE_IMEI](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#ID_TYPE_IMEI)
        pub const ID_TYPE_IMEI : i32 = 4;

        /// public static final [ID_TYPE_MEID](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#ID_TYPE_MEID)
        pub const ID_TYPE_MEID : i32 = 8;

        /// public static final [ID_TYPE_SERIAL](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#ID_TYPE_SERIAL)
        pub const ID_TYPE_SERIAL : i32 = 2;

        /// public static final [INSTALLKEY_REQUEST_CREDENTIALS_ACCESS](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#INSTALLKEY_REQUEST_CREDENTIALS_ACCESS)
        pub const INSTALLKEY_REQUEST_CREDENTIALS_ACCESS : i32 = 1;

        /// public static final [INSTALLKEY_SET_USER_SELECTABLE](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#INSTALLKEY_SET_USER_SELECTABLE)
        pub const INSTALLKEY_SET_USER_SELECTABLE : i32 = 2;

        /// public static final [KEYGUARD_DISABLE_BIOMETRICS](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#KEYGUARD_DISABLE_BIOMETRICS)
        pub const KEYGUARD_DISABLE_BIOMETRICS : i32 = 416;

        /// public static final [KEYGUARD_DISABLE_FACE](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#KEYGUARD_DISABLE_FACE)
        pub const KEYGUARD_DISABLE_FACE : i32 = 128;

        /// public static final [KEYGUARD_DISABLE_FEATURES_ALL](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#KEYGUARD_DISABLE_FEATURES_ALL)
        pub const KEYGUARD_DISABLE_FEATURES_ALL : i32 = 2147483647;

        /// public static final [KEYGUARD_DISABLE_FEATURES_NONE](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#KEYGUARD_DISABLE_FEATURES_NONE)
        pub const KEYGUARD_DISABLE_FEATURES_NONE : i32 = 0;

        /// public static final [KEYGUARD_DISABLE_FINGERPRINT](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#KEYGUARD_DISABLE_FINGERPRINT)
        pub const KEYGUARD_DISABLE_FINGERPRINT : i32 = 32;

        /// public static final [KEYGUARD_DISABLE_IRIS](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#KEYGUARD_DISABLE_IRIS)
        pub const KEYGUARD_DISABLE_IRIS : i32 = 256;

        /// public static final [KEYGUARD_DISABLE_REMOTE_INPUT](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#KEYGUARD_DISABLE_REMOTE_INPUT)
        pub const KEYGUARD_DISABLE_REMOTE_INPUT : i32 = 64;

        /// public static final [KEYGUARD_DISABLE_SECURE_CAMERA](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#KEYGUARD_DISABLE_SECURE_CAMERA)
        pub const KEYGUARD_DISABLE_SECURE_CAMERA : i32 = 2;

        /// public static final [KEYGUARD_DISABLE_SECURE_NOTIFICATIONS](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#KEYGUARD_DISABLE_SECURE_NOTIFICATIONS)
        pub const KEYGUARD_DISABLE_SECURE_NOTIFICATIONS : i32 = 4;

        /// public static final [KEYGUARD_DISABLE_TRUST_AGENTS](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#KEYGUARD_DISABLE_TRUST_AGENTS)
        pub const KEYGUARD_DISABLE_TRUST_AGENTS : i32 = 16;

        /// public static final [KEYGUARD_DISABLE_UNREDACTED_NOTIFICATIONS](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#KEYGUARD_DISABLE_UNREDACTED_NOTIFICATIONS)
        pub const KEYGUARD_DISABLE_UNREDACTED_NOTIFICATIONS : i32 = 8;

        /// public static final [KEYGUARD_DISABLE_WIDGETS_ALL](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#KEYGUARD_DISABLE_WIDGETS_ALL)
        pub const KEYGUARD_DISABLE_WIDGETS_ALL : i32 = 1;

        /// public static final [LEAVE_ALL_SYSTEM_APPS_ENABLED](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#LEAVE_ALL_SYSTEM_APPS_ENABLED)
        pub const LEAVE_ALL_SYSTEM_APPS_ENABLED : i32 = 16;

        /// public static final [LOCK_TASK_FEATURE_GLOBAL_ACTIONS](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#LOCK_TASK_FEATURE_GLOBAL_ACTIONS)
        pub const LOCK_TASK_FEATURE_GLOBAL_ACTIONS : i32 = 16;

        /// public static final [LOCK_TASK_FEATURE_HOME](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#LOCK_TASK_FEATURE_HOME)
        pub const LOCK_TASK_FEATURE_HOME : i32 = 4;

        /// public static final [LOCK_TASK_FEATURE_KEYGUARD](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#LOCK_TASK_FEATURE_KEYGUARD)
        pub const LOCK_TASK_FEATURE_KEYGUARD : i32 = 32;

        /// public static final [LOCK_TASK_FEATURE_NONE](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#LOCK_TASK_FEATURE_NONE)
        pub const LOCK_TASK_FEATURE_NONE : i32 = 0;

        /// public static final [LOCK_TASK_FEATURE_NOTIFICATIONS](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#LOCK_TASK_FEATURE_NOTIFICATIONS)
        pub const LOCK_TASK_FEATURE_NOTIFICATIONS : i32 = 2;

        /// public static final [LOCK_TASK_FEATURE_OVERVIEW](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#LOCK_TASK_FEATURE_OVERVIEW)
        pub const LOCK_TASK_FEATURE_OVERVIEW : i32 = 8;

        /// public static final [LOCK_TASK_FEATURE_SYSTEM_INFO](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#LOCK_TASK_FEATURE_SYSTEM_INFO)
        pub const LOCK_TASK_FEATURE_SYSTEM_INFO : i32 = 1;

        /// public static final [MAKE_USER_EPHEMERAL](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#MAKE_USER_EPHEMERAL)
        pub const MAKE_USER_EPHEMERAL : i32 = 2;

        /// public static final [MIME_TYPE_PROVISIONING_NFC](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#MIME_TYPE_PROVISIONING_NFC)
        pub const MIME_TYPE_PROVISIONING_NFC : &'static str = "application/com.android.managedprovisioning";

        /// public static final [PASSWORD_COMPLEXITY_HIGH](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#PASSWORD_COMPLEXITY_HIGH)
        pub const PASSWORD_COMPLEXITY_HIGH : i32 = 327680;

        /// public static final [PASSWORD_COMPLEXITY_LOW](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#PASSWORD_COMPLEXITY_LOW)
        pub const PASSWORD_COMPLEXITY_LOW : i32 = 65536;

        /// public static final [PASSWORD_COMPLEXITY_MEDIUM](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#PASSWORD_COMPLEXITY_MEDIUM)
        pub const PASSWORD_COMPLEXITY_MEDIUM : i32 = 196608;

        /// public static final [PASSWORD_COMPLEXITY_NONE](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#PASSWORD_COMPLEXITY_NONE)
        pub const PASSWORD_COMPLEXITY_NONE : i32 = 0;

        /// public static final [PASSWORD_QUALITY_ALPHABETIC](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#PASSWORD_QUALITY_ALPHABETIC)
        pub const PASSWORD_QUALITY_ALPHABETIC : i32 = 262144;

        /// public static final [PASSWORD_QUALITY_ALPHANUMERIC](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#PASSWORD_QUALITY_ALPHANUMERIC)
        pub const PASSWORD_QUALITY_ALPHANUMERIC : i32 = 327680;

        /// public static final [PASSWORD_QUALITY_BIOMETRIC_WEAK](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#PASSWORD_QUALITY_BIOMETRIC_WEAK)
        pub const PASSWORD_QUALITY_BIOMETRIC_WEAK : i32 = 32768;

        /// public static final [PASSWORD_QUALITY_COMPLEX](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#PASSWORD_QUALITY_COMPLEX)
        pub const PASSWORD_QUALITY_COMPLEX : i32 = 393216;

        /// public static final [PASSWORD_QUALITY_NUMERIC](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#PASSWORD_QUALITY_NUMERIC)
        pub const PASSWORD_QUALITY_NUMERIC : i32 = 131072;

        /// public static final [PASSWORD_QUALITY_NUMERIC_COMPLEX](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#PASSWORD_QUALITY_NUMERIC_COMPLEX)
        pub const PASSWORD_QUALITY_NUMERIC_COMPLEX : i32 = 196608;

        /// public static final [PASSWORD_QUALITY_SOMETHING](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#PASSWORD_QUALITY_SOMETHING)
        pub const PASSWORD_QUALITY_SOMETHING : i32 = 65536;

        /// public static final [PASSWORD_QUALITY_UNSPECIFIED](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#PASSWORD_QUALITY_UNSPECIFIED)
        pub const PASSWORD_QUALITY_UNSPECIFIED : i32 = 0;

        /// public static final [PERMISSION_GRANT_STATE_DEFAULT](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#PERMISSION_GRANT_STATE_DEFAULT)
        pub const PERMISSION_GRANT_STATE_DEFAULT : i32 = 0;

        /// public static final [PERMISSION_GRANT_STATE_DENIED](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#PERMISSION_GRANT_STATE_DENIED)
        pub const PERMISSION_GRANT_STATE_DENIED : i32 = 2;

        /// public static final [PERMISSION_GRANT_STATE_GRANTED](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#PERMISSION_GRANT_STATE_GRANTED)
        pub const PERMISSION_GRANT_STATE_GRANTED : i32 = 1;

        /// public static final [PERMISSION_POLICY_AUTO_DENY](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#PERMISSION_POLICY_AUTO_DENY)
        pub const PERMISSION_POLICY_AUTO_DENY : i32 = 2;

        /// public static final [PERMISSION_POLICY_AUTO_GRANT](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#PERMISSION_POLICY_AUTO_GRANT)
        pub const PERMISSION_POLICY_AUTO_GRANT : i32 = 1;

        /// public static final [PERMISSION_POLICY_PROMPT](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#PERMISSION_POLICY_PROMPT)
        pub const PERMISSION_POLICY_PROMPT : i32 = 0;

        /// public static final [POLICY_DISABLE_CAMERA](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#POLICY_DISABLE_CAMERA)
        pub const POLICY_DISABLE_CAMERA : &'static str = "policy_disable_camera";

        /// public static final [POLICY_DISABLE_SCREEN_CAPTURE](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#POLICY_DISABLE_SCREEN_CAPTURE)
        pub const POLICY_DISABLE_SCREEN_CAPTURE : &'static str = "policy_disable_screen_capture";

        /// public static final [PRIVATE_DNS_MODE_OFF](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#PRIVATE_DNS_MODE_OFF)
        pub const PRIVATE_DNS_MODE_OFF : i32 = 1;

        /// public static final [PRIVATE_DNS_MODE_OPPORTUNISTIC](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#PRIVATE_DNS_MODE_OPPORTUNISTIC)
        pub const PRIVATE_DNS_MODE_OPPORTUNISTIC : i32 = 2;

        /// public static final [PRIVATE_DNS_MODE_PROVIDER_HOSTNAME](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#PRIVATE_DNS_MODE_PROVIDER_HOSTNAME)
        pub const PRIVATE_DNS_MODE_PROVIDER_HOSTNAME : i32 = 3;

        /// public static final [PRIVATE_DNS_MODE_UNKNOWN](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#PRIVATE_DNS_MODE_UNKNOWN)
        pub const PRIVATE_DNS_MODE_UNKNOWN : i32 = 0;

        /// public static final [PRIVATE_DNS_SET_ERROR_FAILURE_SETTING](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#PRIVATE_DNS_SET_ERROR_FAILURE_SETTING)
        pub const PRIVATE_DNS_SET_ERROR_FAILURE_SETTING : i32 = 2;

        /// public static final [PRIVATE_DNS_SET_ERROR_HOST_NOT_SERVING](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#PRIVATE_DNS_SET_ERROR_HOST_NOT_SERVING)
        pub const PRIVATE_DNS_SET_ERROR_HOST_NOT_SERVING : i32 = 1;

        /// public static final [PRIVATE_DNS_SET_NO_ERROR](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#PRIVATE_DNS_SET_NO_ERROR)
        pub const PRIVATE_DNS_SET_NO_ERROR : i32 = 0;

        /// public static final [PROVISIONING_MODE_FULLY_MANAGED_DEVICE](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#PROVISIONING_MODE_FULLY_MANAGED_DEVICE)
        pub const PROVISIONING_MODE_FULLY_MANAGED_DEVICE : i32 = 1;

        /// public static final [PROVISIONING_MODE_MANAGED_PROFILE](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#PROVISIONING_MODE_MANAGED_PROFILE)
        pub const PROVISIONING_MODE_MANAGED_PROFILE : i32 = 2;

        /// public static final [RESET_PASSWORD_DO_NOT_ASK_CREDENTIALS_ON_BOOT](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#RESET_PASSWORD_DO_NOT_ASK_CREDENTIALS_ON_BOOT)
        pub const RESET_PASSWORD_DO_NOT_ASK_CREDENTIALS_ON_BOOT : i32 = 2;

        /// public static final [RESET_PASSWORD_REQUIRE_ENTRY](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#RESET_PASSWORD_REQUIRE_ENTRY)
        pub const RESET_PASSWORD_REQUIRE_ENTRY : i32 = 1;

        /// public static final [SKIP_SETUP_WIZARD](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#SKIP_SETUP_WIZARD)
        pub const SKIP_SETUP_WIZARD : i32 = 1;

        /// public static final [WIPE_EUICC](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#WIPE_EUICC)
        pub const WIPE_EUICC : i32 = 4;

        /// public static final [WIPE_EXTERNAL_STORAGE](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#WIPE_EXTERNAL_STORAGE)
        pub const WIPE_EXTERNAL_STORAGE : i32 = 1;

        /// public static final [WIPE_RESET_PROTECTION_DATA](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#WIPE_RESET_PROTECTION_DATA)
        pub const WIPE_RESET_PROTECTION_DATA : i32 = 2;

        /// public static final [WIPE_SILENTLY](https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#WIPE_SILENTLY)
        pub const WIPE_SILENTLY : i32 = 8;
    }
}
