// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-app-admin-SystemUpdatePolicy_ValidationFailedException"))]
__jni_bindgen! {
    /// public final class [SystemUpdatePolicy.ValidationFailedException](https://developer.android.com/reference/android/app/admin/SystemUpdatePolicy.ValidationFailedException.html)
    ///
    /// Required feature: android-app-admin-SystemUpdatePolicy_ValidationFailedException
    public final class SystemUpdatePolicy_ValidationFailedException ("android/app/admin/SystemUpdatePolicy$ValidationFailedException") extends crate::java::lang::IllegalArgumentException, implements crate::android::os::Parcelable {

        // // Not emitting: Non-public method
        // /// [ValidationFailedException](https://developer.android.com/reference/android/app/admin/SystemUpdatePolicy.ValidationFailedException.html#ValidationFailedException(int,%20java.lang.String))
        // ///
        // /// Required features: "java-lang-String"
        // #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::app::admin::SystemUpdatePolicy_ValidationFailedException>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/app/admin/SystemUpdatePolicy$ValidationFailedException", java.flags == (empty), .name == "<init>", .descriptor == "(ILjava/lang/String;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/SystemUpdatePolicy$ValidationFailedException\0", "<init>\0", "(ILjava/lang/String;)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getErrorCode](https://developer.android.com/reference/android/app/admin/SystemUpdatePolicy.ValidationFailedException.html#getErrorCode())
        pub fn getErrorCode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/SystemUpdatePolicy$ValidationFailedException", java.flags == PUBLIC, .name == "getErrorCode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/SystemUpdatePolicy$ValidationFailedException\0", "getErrorCode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [describeContents](https://developer.android.com/reference/android/app/admin/SystemUpdatePolicy.ValidationFailedException.html#describeContents())
        pub fn describeContents<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/SystemUpdatePolicy$ValidationFailedException", java.flags == PUBLIC, .name == "describeContents", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/SystemUpdatePolicy$ValidationFailedException\0", "describeContents\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [writeToParcel](https://developer.android.com/reference/android/app/admin/SystemUpdatePolicy.ValidationFailedException.html#writeToParcel(android.os.Parcel,%20int))
        ///
        /// Required features: "android-os-Parcel"
        #[cfg(any(feature = "all", all(feature = "android-os-Parcel")))]
        pub fn writeToParcel<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Parcel>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/SystemUpdatePolicy$ValidationFailedException", java.flags == PUBLIC, .name == "writeToParcel", .descriptor == "(Landroid/os/Parcel;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/SystemUpdatePolicy$ValidationFailedException\0", "writeToParcel\0", "(Landroid/os/Parcel;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// **get** public static final [CREATOR](https://developer.android.com/reference/android/app/admin/SystemUpdatePolicy.ValidationFailedException.html#CREATOR)
        ///
        /// Required feature: android-os-Parcelable_Creator
        #[cfg(any(feature = "all", feature = "android-os-Parcelable_Creator"))]
        pub fn CREATOR<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Parcelable_Creator>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/app/admin/SystemUpdatePolicy$ValidationFailedException\0", "CREATOR\0", "Landroid/os/Parcelable$Creator;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// public static final [ERROR_COMBINED_FREEZE_PERIOD_TOO_CLOSE](https://developer.android.com/reference/android/app/admin/SystemUpdatePolicy.ValidationFailedException.html#ERROR_COMBINED_FREEZE_PERIOD_TOO_CLOSE)
        pub const ERROR_COMBINED_FREEZE_PERIOD_TOO_CLOSE : i32 = 6;

        /// public static final [ERROR_COMBINED_FREEZE_PERIOD_TOO_LONG](https://developer.android.com/reference/android/app/admin/SystemUpdatePolicy.ValidationFailedException.html#ERROR_COMBINED_FREEZE_PERIOD_TOO_LONG)
        pub const ERROR_COMBINED_FREEZE_PERIOD_TOO_LONG : i32 = 5;

        /// public static final [ERROR_DUPLICATE_OR_OVERLAP](https://developer.android.com/reference/android/app/admin/SystemUpdatePolicy.ValidationFailedException.html#ERROR_DUPLICATE_OR_OVERLAP)
        pub const ERROR_DUPLICATE_OR_OVERLAP : i32 = 2;

        /// public static final [ERROR_NEW_FREEZE_PERIOD_TOO_CLOSE](https://developer.android.com/reference/android/app/admin/SystemUpdatePolicy.ValidationFailedException.html#ERROR_NEW_FREEZE_PERIOD_TOO_CLOSE)
        pub const ERROR_NEW_FREEZE_PERIOD_TOO_CLOSE : i32 = 4;

        /// public static final [ERROR_NEW_FREEZE_PERIOD_TOO_LONG](https://developer.android.com/reference/android/app/admin/SystemUpdatePolicy.ValidationFailedException.html#ERROR_NEW_FREEZE_PERIOD_TOO_LONG)
        pub const ERROR_NEW_FREEZE_PERIOD_TOO_LONG : i32 = 3;

        /// public static final [ERROR_UNKNOWN](https://developer.android.com/reference/android/app/admin/SystemUpdatePolicy.ValidationFailedException.html#ERROR_UNKNOWN)
        pub const ERROR_UNKNOWN : i32 = 1;
    }
}
