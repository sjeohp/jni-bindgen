// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-app-admin-DeviceAdminReceiver"))]
__jni_bindgen! {
    /// public class [DeviceAdminReceiver](https://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html)
    ///
    /// Required feature: android-app-admin-DeviceAdminReceiver
    public class DeviceAdminReceiver ("android/app/admin/DeviceAdminReceiver") extends crate::android::content::BroadcastReceiver {

        /// [DeviceAdminReceiver](https://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#DeviceAdminReceiver())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::app::admin::DeviceAdminReceiver>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DeviceAdminReceiver", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DeviceAdminReceiver\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getManager](https://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#getManager(android.content.Context))
        ///
        /// Required features: "android-app-admin-DevicePolicyManager", "android-content-Context"
        #[cfg(any(feature = "all", all(feature = "android-app-admin-DevicePolicyManager", feature = "android-content-Context")))]
        pub fn getManager<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::admin::DevicePolicyManager>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DeviceAdminReceiver", java.flags == PUBLIC, .name == "getManager", .descriptor == "(Landroid/content/Context;)Landroid/app/admin/DevicePolicyManager;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DeviceAdminReceiver\0", "getManager\0", "(Landroid/content/Context;)Landroid/app/admin/DevicePolicyManager;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getWho](https://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#getWho(android.content.Context))
        ///
        /// Required features: "android-content-ComponentName", "android-content-Context"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "android-content-Context")))]
        pub fn getWho<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::ComponentName>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DeviceAdminReceiver", java.flags == PUBLIC, .name == "getWho", .descriptor == "(Landroid/content/Context;)Landroid/content/ComponentName;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DeviceAdminReceiver\0", "getWho\0", "(Landroid/content/Context;)Landroid/content/ComponentName;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onEnabled](https://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#onEnabled(android.content.Context,%20android.content.Intent))
        ///
        /// Required features: "android-content-Context", "android-content-Intent"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-content-Intent")))]
        pub fn onEnabled<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DeviceAdminReceiver", java.flags == PUBLIC, .name == "onEnabled", .descriptor == "(Landroid/content/Context;Landroid/content/Intent;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DeviceAdminReceiver\0", "onEnabled\0", "(Landroid/content/Context;Landroid/content/Intent;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onDisableRequested](https://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#onDisableRequested(android.content.Context,%20android.content.Intent))
        ///
        /// Required features: "android-content-Context", "android-content-Intent", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-content-Intent", feature = "java-lang-CharSequence")))]
        pub fn onDisableRequested<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::CharSequence>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DeviceAdminReceiver", java.flags == PUBLIC, .name == "onDisableRequested", .descriptor == "(Landroid/content/Context;Landroid/content/Intent;)Ljava/lang/CharSequence;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DeviceAdminReceiver\0", "onDisableRequested\0", "(Landroid/content/Context;Landroid/content/Intent;)Ljava/lang/CharSequence;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onDisabled](https://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#onDisabled(android.content.Context,%20android.content.Intent))
        ///
        /// Required features: "android-content-Context", "android-content-Intent"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-content-Intent")))]
        pub fn onDisabled<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DeviceAdminReceiver", java.flags == PUBLIC, .name == "onDisabled", .descriptor == "(Landroid/content/Context;Landroid/content/Intent;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DeviceAdminReceiver\0", "onDisabled\0", "(Landroid/content/Context;Landroid/content/Intent;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onPasswordChanged](https://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#onPasswordChanged(android.content.Context,%20android.content.Intent))
        ///
        /// Required features: "android-content-Context", "android-content-Intent"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-content-Intent")))]
        #[deprecated] pub fn onPasswordChanged_Context_Intent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DeviceAdminReceiver", java.flags == PUBLIC, .name == "onPasswordChanged", .descriptor == "(Landroid/content/Context;Landroid/content/Intent;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DeviceAdminReceiver\0", "onPasswordChanged\0", "(Landroid/content/Context;Landroid/content/Intent;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onPasswordChanged](https://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#onPasswordChanged(android.content.Context,%20android.content.Intent,%20android.os.UserHandle))
        ///
        /// Required features: "android-content-Context", "android-content-Intent", "android-os-UserHandle"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-content-Intent", feature = "android-os-UserHandle")))]
        pub fn onPasswordChanged_Context_Intent_UserHandle<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::UserHandle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DeviceAdminReceiver", java.flags == PUBLIC, .name == "onPasswordChanged", .descriptor == "(Landroid/content/Context;Landroid/content/Intent;Landroid/os/UserHandle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DeviceAdminReceiver\0", "onPasswordChanged\0", "(Landroid/content/Context;Landroid/content/Intent;Landroid/os/UserHandle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onPasswordFailed](https://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#onPasswordFailed(android.content.Context,%20android.content.Intent))
        ///
        /// Required features: "android-content-Context", "android-content-Intent"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-content-Intent")))]
        #[deprecated] pub fn onPasswordFailed_Context_Intent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DeviceAdminReceiver", java.flags == PUBLIC, .name == "onPasswordFailed", .descriptor == "(Landroid/content/Context;Landroid/content/Intent;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DeviceAdminReceiver\0", "onPasswordFailed\0", "(Landroid/content/Context;Landroid/content/Intent;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onPasswordFailed](https://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#onPasswordFailed(android.content.Context,%20android.content.Intent,%20android.os.UserHandle))
        ///
        /// Required features: "android-content-Context", "android-content-Intent", "android-os-UserHandle"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-content-Intent", feature = "android-os-UserHandle")))]
        pub fn onPasswordFailed_Context_Intent_UserHandle<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::UserHandle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DeviceAdminReceiver", java.flags == PUBLIC, .name == "onPasswordFailed", .descriptor == "(Landroid/content/Context;Landroid/content/Intent;Landroid/os/UserHandle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DeviceAdminReceiver\0", "onPasswordFailed\0", "(Landroid/content/Context;Landroid/content/Intent;Landroid/os/UserHandle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onPasswordSucceeded](https://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#onPasswordSucceeded(android.content.Context,%20android.content.Intent))
        ///
        /// Required features: "android-content-Context", "android-content-Intent"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-content-Intent")))]
        #[deprecated] pub fn onPasswordSucceeded_Context_Intent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DeviceAdminReceiver", java.flags == PUBLIC, .name == "onPasswordSucceeded", .descriptor == "(Landroid/content/Context;Landroid/content/Intent;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DeviceAdminReceiver\0", "onPasswordSucceeded\0", "(Landroid/content/Context;Landroid/content/Intent;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onPasswordSucceeded](https://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#onPasswordSucceeded(android.content.Context,%20android.content.Intent,%20android.os.UserHandle))
        ///
        /// Required features: "android-content-Context", "android-content-Intent", "android-os-UserHandle"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-content-Intent", feature = "android-os-UserHandle")))]
        pub fn onPasswordSucceeded_Context_Intent_UserHandle<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::UserHandle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DeviceAdminReceiver", java.flags == PUBLIC, .name == "onPasswordSucceeded", .descriptor == "(Landroid/content/Context;Landroid/content/Intent;Landroid/os/UserHandle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DeviceAdminReceiver\0", "onPasswordSucceeded\0", "(Landroid/content/Context;Landroid/content/Intent;Landroid/os/UserHandle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onPasswordExpiring](https://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#onPasswordExpiring(android.content.Context,%20android.content.Intent))
        ///
        /// Required features: "android-content-Context", "android-content-Intent"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-content-Intent")))]
        #[deprecated] pub fn onPasswordExpiring_Context_Intent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DeviceAdminReceiver", java.flags == PUBLIC, .name == "onPasswordExpiring", .descriptor == "(Landroid/content/Context;Landroid/content/Intent;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DeviceAdminReceiver\0", "onPasswordExpiring\0", "(Landroid/content/Context;Landroid/content/Intent;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onPasswordExpiring](https://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#onPasswordExpiring(android.content.Context,%20android.content.Intent,%20android.os.UserHandle))
        ///
        /// Required features: "android-content-Context", "android-content-Intent", "android-os-UserHandle"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-content-Intent", feature = "android-os-UserHandle")))]
        pub fn onPasswordExpiring_Context_Intent_UserHandle<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::UserHandle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DeviceAdminReceiver", java.flags == PUBLIC, .name == "onPasswordExpiring", .descriptor == "(Landroid/content/Context;Landroid/content/Intent;Landroid/os/UserHandle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DeviceAdminReceiver\0", "onPasswordExpiring\0", "(Landroid/content/Context;Landroid/content/Intent;Landroid/os/UserHandle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onProfileProvisioningComplete](https://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#onProfileProvisioningComplete(android.content.Context,%20android.content.Intent))
        ///
        /// Required features: "android-content-Context", "android-content-Intent"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-content-Intent")))]
        pub fn onProfileProvisioningComplete<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DeviceAdminReceiver", java.flags == PUBLIC, .name == "onProfileProvisioningComplete", .descriptor == "(Landroid/content/Context;Landroid/content/Intent;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DeviceAdminReceiver\0", "onProfileProvisioningComplete\0", "(Landroid/content/Context;Landroid/content/Intent;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onReadyForUserInitialization](https://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#onReadyForUserInitialization(android.content.Context,%20android.content.Intent))
        ///
        /// Required features: "android-content-Context", "android-content-Intent"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-content-Intent")))]
        #[deprecated] pub fn onReadyForUserInitialization<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DeviceAdminReceiver", java.flags == PUBLIC, .name == "onReadyForUserInitialization", .descriptor == "(Landroid/content/Context;Landroid/content/Intent;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DeviceAdminReceiver\0", "onReadyForUserInitialization\0", "(Landroid/content/Context;Landroid/content/Intent;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onLockTaskModeEntering](https://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#onLockTaskModeEntering(android.content.Context,%20android.content.Intent,%20java.lang.String))
        ///
        /// Required features: "android-content-Context", "android-content-Intent", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-content-Intent", feature = "java-lang-String")))]
        pub fn onLockTaskModeEntering<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DeviceAdminReceiver", java.flags == PUBLIC, .name == "onLockTaskModeEntering", .descriptor == "(Landroid/content/Context;Landroid/content/Intent;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DeviceAdminReceiver\0", "onLockTaskModeEntering\0", "(Landroid/content/Context;Landroid/content/Intent;Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onLockTaskModeExiting](https://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#onLockTaskModeExiting(android.content.Context,%20android.content.Intent))
        ///
        /// Required features: "android-content-Context", "android-content-Intent"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-content-Intent")))]
        pub fn onLockTaskModeExiting<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DeviceAdminReceiver", java.flags == PUBLIC, .name == "onLockTaskModeExiting", .descriptor == "(Landroid/content/Context;Landroid/content/Intent;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DeviceAdminReceiver\0", "onLockTaskModeExiting\0", "(Landroid/content/Context;Landroid/content/Intent;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onChoosePrivateKeyAlias](https://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#onChoosePrivateKeyAlias(android.content.Context,%20android.content.Intent,%20int,%20android.net.Uri,%20java.lang.String))
        ///
        /// Required features: "android-content-Context", "android-content-Intent", "android-net-Uri", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-content-Intent", feature = "android-net-Uri", feature = "java-lang-String")))]
        pub fn onChoosePrivateKeyAlias<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DeviceAdminReceiver", java.flags == PUBLIC, .name == "onChoosePrivateKeyAlias", .descriptor == "(Landroid/content/Context;Landroid/content/Intent;ILandroid/net/Uri;Ljava/lang/String;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DeviceAdminReceiver\0", "onChoosePrivateKeyAlias\0", "(Landroid/content/Context;Landroid/content/Intent;ILandroid/net/Uri;Ljava/lang/String;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onSystemUpdatePending](https://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#onSystemUpdatePending(android.content.Context,%20android.content.Intent,%20long))
        ///
        /// Required features: "android-content-Context", "android-content-Intent"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-content-Intent")))]
        pub fn onSystemUpdatePending<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>, arg2: i64) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DeviceAdminReceiver", java.flags == PUBLIC, .name == "onSystemUpdatePending", .descriptor == "(Landroid/content/Context;Landroid/content/Intent;J)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DeviceAdminReceiver\0", "onSystemUpdatePending\0", "(Landroid/content/Context;Landroid/content/Intent;J)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onBugreportSharingDeclined](https://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#onBugreportSharingDeclined(android.content.Context,%20android.content.Intent))
        ///
        /// Required features: "android-content-Context", "android-content-Intent"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-content-Intent")))]
        pub fn onBugreportSharingDeclined<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DeviceAdminReceiver", java.flags == PUBLIC, .name == "onBugreportSharingDeclined", .descriptor == "(Landroid/content/Context;Landroid/content/Intent;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DeviceAdminReceiver\0", "onBugreportSharingDeclined\0", "(Landroid/content/Context;Landroid/content/Intent;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onBugreportShared](https://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#onBugreportShared(android.content.Context,%20android.content.Intent,%20java.lang.String))
        ///
        /// Required features: "android-content-Context", "android-content-Intent", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-content-Intent", feature = "java-lang-String")))]
        pub fn onBugreportShared<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DeviceAdminReceiver", java.flags == PUBLIC, .name == "onBugreportShared", .descriptor == "(Landroid/content/Context;Landroid/content/Intent;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DeviceAdminReceiver\0", "onBugreportShared\0", "(Landroid/content/Context;Landroid/content/Intent;Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onBugreportFailed](https://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#onBugreportFailed(android.content.Context,%20android.content.Intent,%20int))
        ///
        /// Required features: "android-content-Context", "android-content-Intent"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-content-Intent")))]
        pub fn onBugreportFailed<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DeviceAdminReceiver", java.flags == PUBLIC, .name == "onBugreportFailed", .descriptor == "(Landroid/content/Context;Landroid/content/Intent;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DeviceAdminReceiver\0", "onBugreportFailed\0", "(Landroid/content/Context;Landroid/content/Intent;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onSecurityLogsAvailable](https://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#onSecurityLogsAvailable(android.content.Context,%20android.content.Intent))
        ///
        /// Required features: "android-content-Context", "android-content-Intent"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-content-Intent")))]
        pub fn onSecurityLogsAvailable<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DeviceAdminReceiver", java.flags == PUBLIC, .name == "onSecurityLogsAvailable", .descriptor == "(Landroid/content/Context;Landroid/content/Intent;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DeviceAdminReceiver\0", "onSecurityLogsAvailable\0", "(Landroid/content/Context;Landroid/content/Intent;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onNetworkLogsAvailable](https://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#onNetworkLogsAvailable(android.content.Context,%20android.content.Intent,%20long,%20int))
        ///
        /// Required features: "android-content-Context", "android-content-Intent"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-content-Intent")))]
        pub fn onNetworkLogsAvailable<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>, arg2: i64, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DeviceAdminReceiver", java.flags == PUBLIC, .name == "onNetworkLogsAvailable", .descriptor == "(Landroid/content/Context;Landroid/content/Intent;JI)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DeviceAdminReceiver\0", "onNetworkLogsAvailable\0", "(Landroid/content/Context;Landroid/content/Intent;JI)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onUserAdded](https://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#onUserAdded(android.content.Context,%20android.content.Intent,%20android.os.UserHandle))
        ///
        /// Required features: "android-content-Context", "android-content-Intent", "android-os-UserHandle"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-content-Intent", feature = "android-os-UserHandle")))]
        pub fn onUserAdded<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::UserHandle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DeviceAdminReceiver", java.flags == PUBLIC, .name == "onUserAdded", .descriptor == "(Landroid/content/Context;Landroid/content/Intent;Landroid/os/UserHandle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DeviceAdminReceiver\0", "onUserAdded\0", "(Landroid/content/Context;Landroid/content/Intent;Landroid/os/UserHandle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onUserRemoved](https://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#onUserRemoved(android.content.Context,%20android.content.Intent,%20android.os.UserHandle))
        ///
        /// Required features: "android-content-Context", "android-content-Intent", "android-os-UserHandle"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-content-Intent", feature = "android-os-UserHandle")))]
        pub fn onUserRemoved<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::UserHandle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DeviceAdminReceiver", java.flags == PUBLIC, .name == "onUserRemoved", .descriptor == "(Landroid/content/Context;Landroid/content/Intent;Landroid/os/UserHandle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DeviceAdminReceiver\0", "onUserRemoved\0", "(Landroid/content/Context;Landroid/content/Intent;Landroid/os/UserHandle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onUserStarted](https://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#onUserStarted(android.content.Context,%20android.content.Intent,%20android.os.UserHandle))
        ///
        /// Required features: "android-content-Context", "android-content-Intent", "android-os-UserHandle"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-content-Intent", feature = "android-os-UserHandle")))]
        pub fn onUserStarted<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::UserHandle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DeviceAdminReceiver", java.flags == PUBLIC, .name == "onUserStarted", .descriptor == "(Landroid/content/Context;Landroid/content/Intent;Landroid/os/UserHandle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DeviceAdminReceiver\0", "onUserStarted\0", "(Landroid/content/Context;Landroid/content/Intent;Landroid/os/UserHandle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onUserStopped](https://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#onUserStopped(android.content.Context,%20android.content.Intent,%20android.os.UserHandle))
        ///
        /// Required features: "android-content-Context", "android-content-Intent", "android-os-UserHandle"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-content-Intent", feature = "android-os-UserHandle")))]
        pub fn onUserStopped<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::UserHandle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DeviceAdminReceiver", java.flags == PUBLIC, .name == "onUserStopped", .descriptor == "(Landroid/content/Context;Landroid/content/Intent;Landroid/os/UserHandle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DeviceAdminReceiver\0", "onUserStopped\0", "(Landroid/content/Context;Landroid/content/Intent;Landroid/os/UserHandle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onUserSwitched](https://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#onUserSwitched(android.content.Context,%20android.content.Intent,%20android.os.UserHandle))
        ///
        /// Required features: "android-content-Context", "android-content-Intent", "android-os-UserHandle"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-content-Intent", feature = "android-os-UserHandle")))]
        pub fn onUserSwitched<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::UserHandle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DeviceAdminReceiver", java.flags == PUBLIC, .name == "onUserSwitched", .descriptor == "(Landroid/content/Context;Landroid/content/Intent;Landroid/os/UserHandle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DeviceAdminReceiver\0", "onUserSwitched\0", "(Landroid/content/Context;Landroid/content/Intent;Landroid/os/UserHandle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onTransferOwnershipComplete](https://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#onTransferOwnershipComplete(android.content.Context,%20android.os.PersistableBundle))
        ///
        /// Required features: "android-content-Context", "android-os-PersistableBundle"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-os-PersistableBundle")))]
        pub fn onTransferOwnershipComplete<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::PersistableBundle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DeviceAdminReceiver", java.flags == PUBLIC, .name == "onTransferOwnershipComplete", .descriptor == "(Landroid/content/Context;Landroid/os/PersistableBundle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DeviceAdminReceiver\0", "onTransferOwnershipComplete\0", "(Landroid/content/Context;Landroid/os/PersistableBundle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onTransferAffiliatedProfileOwnershipComplete](https://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#onTransferAffiliatedProfileOwnershipComplete(android.content.Context,%20android.os.UserHandle))
        ///
        /// Required features: "android-content-Context", "android-os-UserHandle"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-os-UserHandle")))]
        pub fn onTransferAffiliatedProfileOwnershipComplete<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::UserHandle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DeviceAdminReceiver", java.flags == PUBLIC, .name == "onTransferAffiliatedProfileOwnershipComplete", .descriptor == "(Landroid/content/Context;Landroid/os/UserHandle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DeviceAdminReceiver\0", "onTransferAffiliatedProfileOwnershipComplete\0", "(Landroid/content/Context;Landroid/os/UserHandle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onReceive](https://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#onReceive(android.content.Context,%20android.content.Intent))
        ///
        /// Required features: "android-content-Context", "android-content-Intent"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-content-Intent")))]
        pub fn onReceive<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/admin/DeviceAdminReceiver", java.flags == PUBLIC, .name == "onReceive", .descriptor == "(Landroid/content/Context;Landroid/content/Intent;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/admin/DeviceAdminReceiver\0", "onReceive\0", "(Landroid/content/Context;Landroid/content/Intent;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [ACTION_CHOOSE_PRIVATE_KEY_ALIAS](https://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#ACTION_CHOOSE_PRIVATE_KEY_ALIAS)
        pub const ACTION_CHOOSE_PRIVATE_KEY_ALIAS : &'static str = "android.app.action.CHOOSE_PRIVATE_KEY_ALIAS";

        /// public static final [ACTION_DEVICE_ADMIN_DISABLED](https://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#ACTION_DEVICE_ADMIN_DISABLED)
        pub const ACTION_DEVICE_ADMIN_DISABLED : &'static str = "android.app.action.DEVICE_ADMIN_DISABLED";

        /// public static final [ACTION_DEVICE_ADMIN_DISABLE_REQUESTED](https://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#ACTION_DEVICE_ADMIN_DISABLE_REQUESTED)
        pub const ACTION_DEVICE_ADMIN_DISABLE_REQUESTED : &'static str = "android.app.action.DEVICE_ADMIN_DISABLE_REQUESTED";

        /// public static final [ACTION_DEVICE_ADMIN_ENABLED](https://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#ACTION_DEVICE_ADMIN_ENABLED)
        pub const ACTION_DEVICE_ADMIN_ENABLED : &'static str = "android.app.action.DEVICE_ADMIN_ENABLED";

        /// public static final [ACTION_LOCK_TASK_ENTERING](https://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#ACTION_LOCK_TASK_ENTERING)
        pub const ACTION_LOCK_TASK_ENTERING : &'static str = "android.app.action.LOCK_TASK_ENTERING";

        /// public static final [ACTION_LOCK_TASK_EXITING](https://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#ACTION_LOCK_TASK_EXITING)
        pub const ACTION_LOCK_TASK_EXITING : &'static str = "android.app.action.LOCK_TASK_EXITING";

        /// public static final [ACTION_NETWORK_LOGS_AVAILABLE](https://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#ACTION_NETWORK_LOGS_AVAILABLE)
        pub const ACTION_NETWORK_LOGS_AVAILABLE : &'static str = "android.app.action.NETWORK_LOGS_AVAILABLE";

        /// public static final [ACTION_PASSWORD_CHANGED](https://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#ACTION_PASSWORD_CHANGED)
        pub const ACTION_PASSWORD_CHANGED : &'static str = "android.app.action.ACTION_PASSWORD_CHANGED";

        /// public static final [ACTION_PASSWORD_EXPIRING](https://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#ACTION_PASSWORD_EXPIRING)
        pub const ACTION_PASSWORD_EXPIRING : &'static str = "android.app.action.ACTION_PASSWORD_EXPIRING";

        /// public static final [ACTION_PASSWORD_FAILED](https://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#ACTION_PASSWORD_FAILED)
        pub const ACTION_PASSWORD_FAILED : &'static str = "android.app.action.ACTION_PASSWORD_FAILED";

        /// public static final [ACTION_PASSWORD_SUCCEEDED](https://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#ACTION_PASSWORD_SUCCEEDED)
        pub const ACTION_PASSWORD_SUCCEEDED : &'static str = "android.app.action.ACTION_PASSWORD_SUCCEEDED";

        /// public static final [ACTION_PROFILE_PROVISIONING_COMPLETE](https://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#ACTION_PROFILE_PROVISIONING_COMPLETE)
        pub const ACTION_PROFILE_PROVISIONING_COMPLETE : &'static str = "android.app.action.PROFILE_PROVISIONING_COMPLETE";

        /// public static final [BUGREPORT_FAILURE_FAILED_COMPLETING](https://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#BUGREPORT_FAILURE_FAILED_COMPLETING)
        pub const BUGREPORT_FAILURE_FAILED_COMPLETING : i32 = 0;

        /// public static final [BUGREPORT_FAILURE_FILE_NO_LONGER_AVAILABLE](https://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#BUGREPORT_FAILURE_FILE_NO_LONGER_AVAILABLE)
        pub const BUGREPORT_FAILURE_FILE_NO_LONGER_AVAILABLE : i32 = 1;

        /// public static final [DEVICE_ADMIN_META_DATA](https://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#DEVICE_ADMIN_META_DATA)
        pub const DEVICE_ADMIN_META_DATA : &'static str = "android.app.device_admin";

        /// public static final [EXTRA_DISABLE_WARNING](https://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#EXTRA_DISABLE_WARNING)
        pub const EXTRA_DISABLE_WARNING : &'static str = "android.app.extra.DISABLE_WARNING";

        /// public static final [EXTRA_LOCK_TASK_PACKAGE](https://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#EXTRA_LOCK_TASK_PACKAGE)
        pub const EXTRA_LOCK_TASK_PACKAGE : &'static str = "android.app.extra.LOCK_TASK_PACKAGE";

        /// public static final [EXTRA_TRANSFER_OWNERSHIP_ADMIN_EXTRAS_BUNDLE](https://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html#EXTRA_TRANSFER_OWNERSHIP_ADMIN_EXTRAS_BUNDLE)
        pub const EXTRA_TRANSFER_OWNERSHIP_ADMIN_EXTRAS_BUNDLE : &'static str = "android.app.extra.TRANSFER_OWNERSHIP_ADMIN_EXTRAS_BUNDLE";
    }
}
