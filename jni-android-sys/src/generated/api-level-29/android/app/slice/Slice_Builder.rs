// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-app-slice-Slice_Builder"))]
__jni_bindgen! {
    /// public class [Slice.Builder](https://developer.android.com/reference/android/app/slice/Slice.Builder.html)
    ///
    /// Required feature: android-app-slice-Slice_Builder
    public class Slice_Builder ("android/app/slice/Slice$Builder") extends crate::java::lang::Object {

        /// [Builder](https://developer.android.com/reference/android/app/slice/Slice.Builder.html#Builder(android.net.Uri,%20android.app.slice.SliceSpec))
        ///
        /// Required features: "android-app-slice-SliceSpec", "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-app-slice-SliceSpec", feature = "android-net-Uri")))]
        pub fn new_Uri_SliceSpec<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::slice::SliceSpec>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::app::slice::Slice_Builder>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/slice/Slice$Builder", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/net/Uri;Landroid/app/slice/SliceSpec;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/slice/Slice$Builder\0", "<init>\0", "(Landroid/net/Uri;Landroid/app/slice/SliceSpec;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [Builder](https://developer.android.com/reference/android/app/slice/Slice.Builder.html#Builder(android.app.slice.Slice.Builder))
        ///
        /// Required features: "android-app-slice-Slice_Builder"
        #[cfg(any(feature = "all", all(feature = "android-app-slice-Slice_Builder")))]
        pub fn new_Builder<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::slice::Slice_Builder>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::app::slice::Slice_Builder>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/slice/Slice$Builder", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/app/slice/Slice$Builder;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/slice/Slice$Builder\0", "<init>\0", "(Landroid/app/slice/Slice$Builder;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setCallerNeeded](https://developer.android.com/reference/android/app/slice/Slice.Builder.html#setCallerNeeded(boolean))
        ///
        /// Required features: "android-app-slice-Slice_Builder"
        #[cfg(any(feature = "all", all(feature = "android-app-slice-Slice_Builder")))]
        pub fn setCallerNeeded<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::slice::Slice_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/slice/Slice$Builder", java.flags == PUBLIC, .name == "setCallerNeeded", .descriptor == "(Z)Landroid/app/slice/Slice$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/slice/Slice$Builder\0", "setCallerNeeded\0", "(Z)Landroid/app/slice/Slice$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addHints](https://developer.android.com/reference/android/app/slice/Slice.Builder.html#addHints(java.util.List))
        ///
        /// Required features: "android-app-slice-Slice_Builder", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "android-app-slice-Slice_Builder", feature = "java-util-List")))]
        pub fn addHints<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::slice::Slice_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/slice/Slice$Builder", java.flags == PUBLIC, .name == "addHints", .descriptor == "(Ljava/util/List;)Landroid/app/slice/Slice$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/slice/Slice$Builder\0", "addHints\0", "(Ljava/util/List;)Landroid/app/slice/Slice$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addSubSlice](https://developer.android.com/reference/android/app/slice/Slice.Builder.html#addSubSlice(android.app.slice.Slice,%20java.lang.String))
        ///
        /// Required features: "android-app-slice-Slice", "android-app-slice-Slice_Builder", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-app-slice-Slice", feature = "android-app-slice-Slice_Builder", feature = "java-lang-String")))]
        pub fn addSubSlice<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::slice::Slice>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::slice::Slice_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/slice/Slice$Builder", java.flags == PUBLIC, .name == "addSubSlice", .descriptor == "(Landroid/app/slice/Slice;Ljava/lang/String;)Landroid/app/slice/Slice$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/slice/Slice$Builder\0", "addSubSlice\0", "(Landroid/app/slice/Slice;Ljava/lang/String;)Landroid/app/slice/Slice$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addAction](https://developer.android.com/reference/android/app/slice/Slice.Builder.html#addAction(android.app.PendingIntent,%20android.app.slice.Slice,%20java.lang.String))
        ///
        /// Required features: "android-app-PendingIntent", "android-app-slice-Slice", "android-app-slice-Slice_Builder", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-app-PendingIntent", feature = "android-app-slice-Slice", feature = "android-app-slice-Slice_Builder", feature = "java-lang-String")))]
        pub fn addAction<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::PendingIntent>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::slice::Slice>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::slice::Slice_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/slice/Slice$Builder", java.flags == PUBLIC, .name == "addAction", .descriptor == "(Landroid/app/PendingIntent;Landroid/app/slice/Slice;Ljava/lang/String;)Landroid/app/slice/Slice$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/slice/Slice$Builder\0", "addAction\0", "(Landroid/app/PendingIntent;Landroid/app/slice/Slice;Ljava/lang/String;)Landroid/app/slice/Slice$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addText](https://developer.android.com/reference/android/app/slice/Slice.Builder.html#addText(java.lang.CharSequence,%20java.lang.String,%20java.util.List))
        ///
        /// Required features: "android-app-slice-Slice_Builder", "java-lang-CharSequence", "java-lang-String", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "android-app-slice-Slice_Builder", feature = "java-lang-CharSequence", feature = "java-lang-String", feature = "java-util-List")))]
        pub fn addText<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::slice::Slice_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/slice/Slice$Builder", java.flags == PUBLIC, .name == "addText", .descriptor == "(Ljava/lang/CharSequence;Ljava/lang/String;Ljava/util/List;)Landroid/app/slice/Slice$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/slice/Slice$Builder\0", "addText\0", "(Ljava/lang/CharSequence;Ljava/lang/String;Ljava/util/List;)Landroid/app/slice/Slice$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addIcon](https://developer.android.com/reference/android/app/slice/Slice.Builder.html#addIcon(android.graphics.drawable.Icon,%20java.lang.String,%20java.util.List))
        ///
        /// Required features: "android-app-slice-Slice_Builder", "android-graphics-drawable-Icon", "java-lang-String", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "android-app-slice-Slice_Builder", feature = "android-graphics-drawable-Icon", feature = "java-lang-String", feature = "java-util-List")))]
        pub fn addIcon<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::drawable::Icon>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::slice::Slice_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/slice/Slice$Builder", java.flags == PUBLIC, .name == "addIcon", .descriptor == "(Landroid/graphics/drawable/Icon;Ljava/lang/String;Ljava/util/List;)Landroid/app/slice/Slice$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/slice/Slice$Builder\0", "addIcon\0", "(Landroid/graphics/drawable/Icon;Ljava/lang/String;Ljava/util/List;)Landroid/app/slice/Slice$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addRemoteInput](https://developer.android.com/reference/android/app/slice/Slice.Builder.html#addRemoteInput(android.app.RemoteInput,%20java.lang.String,%20java.util.List))
        ///
        /// Required features: "android-app-RemoteInput", "android-app-slice-Slice_Builder", "java-lang-String", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "android-app-RemoteInput", feature = "android-app-slice-Slice_Builder", feature = "java-lang-String", feature = "java-util-List")))]
        pub fn addRemoteInput<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::RemoteInput>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::slice::Slice_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/slice/Slice$Builder", java.flags == PUBLIC, .name == "addRemoteInput", .descriptor == "(Landroid/app/RemoteInput;Ljava/lang/String;Ljava/util/List;)Landroid/app/slice/Slice$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/slice/Slice$Builder\0", "addRemoteInput\0", "(Landroid/app/RemoteInput;Ljava/lang/String;Ljava/util/List;)Landroid/app/slice/Slice$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addInt](https://developer.android.com/reference/android/app/slice/Slice.Builder.html#addInt(int,%20java.lang.String,%20java.util.List))
        ///
        /// Required features: "android-app-slice-Slice_Builder", "java-lang-String", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "android-app-slice-Slice_Builder", feature = "java-lang-String", feature = "java-util-List")))]
        pub fn addInt<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::slice::Slice_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/slice/Slice$Builder", java.flags == PUBLIC, .name == "addInt", .descriptor == "(ILjava/lang/String;Ljava/util/List;)Landroid/app/slice/Slice$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/slice/Slice$Builder\0", "addInt\0", "(ILjava/lang/String;Ljava/util/List;)Landroid/app/slice/Slice$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addLong](https://developer.android.com/reference/android/app/slice/Slice.Builder.html#addLong(long,%20java.lang.String,%20java.util.List))
        ///
        /// Required features: "android-app-slice-Slice_Builder", "java-lang-String", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "android-app-slice-Slice_Builder", feature = "java-lang-String", feature = "java-util-List")))]
        pub fn addLong<'env>(&'env self, arg0: i64, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::slice::Slice_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/slice/Slice$Builder", java.flags == PUBLIC, .name == "addLong", .descriptor == "(JLjava/lang/String;Ljava/util/List;)Landroid/app/slice/Slice$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/slice/Slice$Builder\0", "addLong\0", "(JLjava/lang/String;Ljava/util/List;)Landroid/app/slice/Slice$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addBundle](https://developer.android.com/reference/android/app/slice/Slice.Builder.html#addBundle(android.os.Bundle,%20java.lang.String,%20java.util.List))
        ///
        /// Required features: "android-app-slice-Slice_Builder", "android-os-Bundle", "java-lang-String", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "android-app-slice-Slice_Builder", feature = "android-os-Bundle", feature = "java-lang-String", feature = "java-util-List")))]
        pub fn addBundle<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::slice::Slice_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/slice/Slice$Builder", java.flags == PUBLIC, .name == "addBundle", .descriptor == "(Landroid/os/Bundle;Ljava/lang/String;Ljava/util/List;)Landroid/app/slice/Slice$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/slice/Slice$Builder\0", "addBundle\0", "(Landroid/os/Bundle;Ljava/lang/String;Ljava/util/List;)Landroid/app/slice/Slice$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [build](https://developer.android.com/reference/android/app/slice/Slice.Builder.html#build())
        ///
        /// Required features: "android-app-slice-Slice"
        #[cfg(any(feature = "all", all(feature = "android-app-slice-Slice")))]
        pub fn build<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::slice::Slice>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/slice/Slice$Builder", java.flags == PUBLIC, .name == "build", .descriptor == "()Landroid/app/slice/Slice;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/slice/Slice$Builder\0", "build\0", "()Landroid/app/slice/Slice;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
