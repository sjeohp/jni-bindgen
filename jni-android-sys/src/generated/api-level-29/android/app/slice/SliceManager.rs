// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-app-slice-SliceManager"))]
__jni_bindgen! {
    /// public class [SliceManager](https://developer.android.com/reference/android/app/slice/SliceManager.html)
    ///
    /// Required feature: android-app-slice-SliceManager
    public class SliceManager ("android/app/slice/SliceManager") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [SliceManager](https://developer.android.com/reference/android/app/slice/SliceManager.html#SliceManager())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::app::slice::SliceManager>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/app/slice/SliceManager", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/slice/SliceManager\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [pinSlice](https://developer.android.com/reference/android/app/slice/SliceManager.html#pinSlice(android.net.Uri,%20java.util.Set))
        ///
        /// Required features: "android-net-Uri", "java-util-Set"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri", feature = "java-util-Set")))]
        pub fn pinSlice<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Set>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/slice/SliceManager", java.flags == PUBLIC, .name == "pinSlice", .descriptor == "(Landroid/net/Uri;Ljava/util/Set;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/slice/SliceManager\0", "pinSlice\0", "(Landroid/net/Uri;Ljava/util/Set;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unpinSlice](https://developer.android.com/reference/android/app/slice/SliceManager.html#unpinSlice(android.net.Uri))
        ///
        /// Required features: "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri")))]
        pub fn unpinSlice<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/slice/SliceManager", java.flags == PUBLIC, .name == "unpinSlice", .descriptor == "(Landroid/net/Uri;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/slice/SliceManager\0", "unpinSlice\0", "(Landroid/net/Uri;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPinnedSpecs](https://developer.android.com/reference/android/app/slice/SliceManager.html#getPinnedSpecs(android.net.Uri))
        ///
        /// Required features: "android-net-Uri", "java-util-Set"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri", feature = "java-util-Set")))]
        pub fn getPinnedSpecs<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Set>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/slice/SliceManager", java.flags == PUBLIC, .name == "getPinnedSpecs", .descriptor == "(Landroid/net/Uri;)Ljava/util/Set;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/slice/SliceManager\0", "getPinnedSpecs\0", "(Landroid/net/Uri;)Ljava/util/Set;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPinnedSlices](https://developer.android.com/reference/android/app/slice/SliceManager.html#getPinnedSlices())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getPinnedSlices<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/slice/SliceManager", java.flags == PUBLIC, .name == "getPinnedSlices", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/slice/SliceManager\0", "getPinnedSlices\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSliceDescendants](https://developer.android.com/reference/android/app/slice/SliceManager.html#getSliceDescendants(android.net.Uri))
        ///
        /// Required features: "android-net-Uri", "java-util-Collection"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri", feature = "java-util-Collection")))]
        pub fn getSliceDescendants<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Collection>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/slice/SliceManager", java.flags == PUBLIC, .name == "getSliceDescendants", .descriptor == "(Landroid/net/Uri;)Ljava/util/Collection;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/slice/SliceManager\0", "getSliceDescendants\0", "(Landroid/net/Uri;)Ljava/util/Collection;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [bindSlice](https://developer.android.com/reference/android/app/slice/SliceManager.html#bindSlice(android.net.Uri,%20java.util.Set))
        ///
        /// Required features: "android-app-slice-Slice", "android-net-Uri", "java-util-Set"
        #[cfg(any(feature = "all", all(feature = "android-app-slice-Slice", feature = "android-net-Uri", feature = "java-util-Set")))]
        pub fn bindSlice_Uri_Set<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Set>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::slice::Slice>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/slice/SliceManager", java.flags == PUBLIC, .name == "bindSlice", .descriptor == "(Landroid/net/Uri;Ljava/util/Set;)Landroid/app/slice/Slice;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/slice/SliceManager\0", "bindSlice\0", "(Landroid/net/Uri;Ljava/util/Set;)Landroid/app/slice/Slice;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [mapIntentToUri](https://developer.android.com/reference/android/app/slice/SliceManager.html#mapIntentToUri(android.content.Intent))
        ///
        /// Required features: "android-content-Intent", "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-content-Intent", feature = "android-net-Uri")))]
        pub fn mapIntentToUri<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/slice/SliceManager", java.flags == PUBLIC, .name == "mapIntentToUri", .descriptor == "(Landroid/content/Intent;)Landroid/net/Uri;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/slice/SliceManager\0", "mapIntentToUri\0", "(Landroid/content/Intent;)Landroid/net/Uri;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [bindSlice](https://developer.android.com/reference/android/app/slice/SliceManager.html#bindSlice(android.content.Intent,%20java.util.Set))
        ///
        /// Required features: "android-app-slice-Slice", "android-content-Intent", "java-util-Set"
        #[cfg(any(feature = "all", all(feature = "android-app-slice-Slice", feature = "android-content-Intent", feature = "java-util-Set")))]
        pub fn bindSlice_Intent_Set<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Set>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::slice::Slice>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/slice/SliceManager", java.flags == PUBLIC, .name == "bindSlice", .descriptor == "(Landroid/content/Intent;Ljava/util/Set;)Landroid/app/slice/Slice;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/slice/SliceManager\0", "bindSlice\0", "(Landroid/content/Intent;Ljava/util/Set;)Landroid/app/slice/Slice;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [checkSlicePermission](https://developer.android.com/reference/android/app/slice/SliceManager.html#checkSlicePermission(android.net.Uri,%20int,%20int))
        ///
        /// Required features: "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri")))]
        pub fn checkSlicePermission<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/slice/SliceManager", java.flags == PUBLIC, .name == "checkSlicePermission", .descriptor == "(Landroid/net/Uri;II)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/slice/SliceManager\0", "checkSlicePermission\0", "(Landroid/net/Uri;II)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [grantSlicePermission](https://developer.android.com/reference/android/app/slice/SliceManager.html#grantSlicePermission(java.lang.String,%20android.net.Uri))
        ///
        /// Required features: "android-net-Uri", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri", feature = "java-lang-String")))]
        pub fn grantSlicePermission<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/slice/SliceManager", java.flags == PUBLIC, .name == "grantSlicePermission", .descriptor == "(Ljava/lang/String;Landroid/net/Uri;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/slice/SliceManager\0", "grantSlicePermission\0", "(Ljava/lang/String;Landroid/net/Uri;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [revokeSlicePermission](https://developer.android.com/reference/android/app/slice/SliceManager.html#revokeSlicePermission(java.lang.String,%20android.net.Uri))
        ///
        /// Required features: "android-net-Uri", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri", feature = "java-lang-String")))]
        pub fn revokeSlicePermission<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/slice/SliceManager", java.flags == PUBLIC, .name == "revokeSlicePermission", .descriptor == "(Ljava/lang/String;Landroid/net/Uri;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/slice/SliceManager\0", "revokeSlicePermission\0", "(Ljava/lang/String;Landroid/net/Uri;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [CATEGORY_SLICE](https://developer.android.com/reference/android/app/slice/SliceManager.html#CATEGORY_SLICE)
        pub const CATEGORY_SLICE : &'static str = "android.app.slice.category.SLICE";

        /// public static final [SLICE_METADATA_KEY](https://developer.android.com/reference/android/app/slice/SliceManager.html#SLICE_METADATA_KEY)
        pub const SLICE_METADATA_KEY : &'static str = "android.metadata.SLICE_URI";
    }
}
