// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-app-slice-Slice"))]
__jni_bindgen! {
    /// public final class [Slice](https://developer.android.com/reference/android/app/slice/Slice.html)
    ///
    /// Required feature: android-app-slice-Slice
    public final class Slice ("android/app/slice/Slice") extends crate::java::lang::Object, implements crate::android::os::Parcelable {

        // // Not emitting: Non-public method
        // /// [Slice](https://developer.android.com/reference/android/app/slice/Slice.html#Slice(android.os.Parcel))
        // ///
        // /// Required features: "android-os-Parcel"
        // #[cfg(any(feature = "all", all(feature = "android-os-Parcel")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Parcel>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::app::slice::Slice>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/app/slice/Slice", java.flags == PROTECTED, .name == "<init>", .descriptor == "(Landroid/os/Parcel;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/slice/Slice\0", "<init>\0", "(Landroid/os/Parcel;)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getSpec](https://developer.android.com/reference/android/app/slice/Slice.html#getSpec())
        ///
        /// Required features: "android-app-slice-SliceSpec"
        #[cfg(any(feature = "all", all(feature = "android-app-slice-SliceSpec")))]
        pub fn getSpec<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::slice::SliceSpec>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/slice/Slice", java.flags == PUBLIC, .name == "getSpec", .descriptor == "()Landroid/app/slice/SliceSpec;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/slice/Slice\0", "getSpec\0", "()Landroid/app/slice/SliceSpec;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getUri](https://developer.android.com/reference/android/app/slice/Slice.html#getUri())
        ///
        /// Required features: "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri")))]
        pub fn getUri<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/slice/Slice", java.flags == PUBLIC, .name == "getUri", .descriptor == "()Landroid/net/Uri;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/slice/Slice\0", "getUri\0", "()Landroid/net/Uri;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getItems](https://developer.android.com/reference/android/app/slice/Slice.html#getItems())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getItems<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/slice/Slice", java.flags == PUBLIC, .name == "getItems", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/slice/Slice\0", "getItems\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getHints](https://developer.android.com/reference/android/app/slice/Slice.html#getHints())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getHints<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/slice/Slice", java.flags == PUBLIC, .name == "getHints", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/slice/Slice\0", "getHints\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [writeToParcel](https://developer.android.com/reference/android/app/slice/Slice.html#writeToParcel(android.os.Parcel,%20int))
        ///
        /// Required features: "android-os-Parcel"
        #[cfg(any(feature = "all", all(feature = "android-os-Parcel")))]
        pub fn writeToParcel<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Parcel>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/slice/Slice", java.flags == PUBLIC, .name == "writeToParcel", .descriptor == "(Landroid/os/Parcel;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/slice/Slice\0", "writeToParcel\0", "(Landroid/os/Parcel;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [describeContents](https://developer.android.com/reference/android/app/slice/Slice.html#describeContents())
        pub fn describeContents<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/slice/Slice", java.flags == PUBLIC, .name == "describeContents", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/slice/Slice\0", "describeContents\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isCallerNeeded](https://developer.android.com/reference/android/app/slice/Slice.html#isCallerNeeded())
        pub fn isCallerNeeded<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/slice/Slice", java.flags == PUBLIC, .name == "isCallerNeeded", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/slice/Slice\0", "isCallerNeeded\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/android/app/slice/Slice.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/slice/Slice", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/slice/Slice\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// **get** public static final [CREATOR](https://developer.android.com/reference/android/app/slice/Slice.html#CREATOR)
        ///
        /// Required feature: android-os-Parcelable_Creator
        #[cfg(any(feature = "all", feature = "android-os-Parcelable_Creator"))]
        pub fn CREATOR<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Parcelable_Creator>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/app/slice/Slice\0", "CREATOR\0", "Landroid/os/Parcelable$Creator;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// public static final [EXTRA_RANGE_VALUE](https://developer.android.com/reference/android/app/slice/Slice.html#EXTRA_RANGE_VALUE)
        pub const EXTRA_RANGE_VALUE : &'static str = "android.app.slice.extra.RANGE_VALUE";

        /// public static final [EXTRA_TOGGLE_STATE](https://developer.android.com/reference/android/app/slice/Slice.html#EXTRA_TOGGLE_STATE)
        pub const EXTRA_TOGGLE_STATE : &'static str = "android.app.slice.extra.TOGGLE_STATE";

        /// public static final [HINT_ACTIONS](https://developer.android.com/reference/android/app/slice/Slice.html#HINT_ACTIONS)
        pub const HINT_ACTIONS : &'static str = "actions";

        /// public static final [HINT_ERROR](https://developer.android.com/reference/android/app/slice/Slice.html#HINT_ERROR)
        pub const HINT_ERROR : &'static str = "error";

        /// public static final [HINT_HORIZONTAL](https://developer.android.com/reference/android/app/slice/Slice.html#HINT_HORIZONTAL)
        pub const HINT_HORIZONTAL : &'static str = "horizontal";

        /// public static final [HINT_KEYWORDS](https://developer.android.com/reference/android/app/slice/Slice.html#HINT_KEYWORDS)
        pub const HINT_KEYWORDS : &'static str = "keywords";

        /// public static final [HINT_LARGE](https://developer.android.com/reference/android/app/slice/Slice.html#HINT_LARGE)
        pub const HINT_LARGE : &'static str = "large";

        /// public static final [HINT_LAST_UPDATED](https://developer.android.com/reference/android/app/slice/Slice.html#HINT_LAST_UPDATED)
        pub const HINT_LAST_UPDATED : &'static str = "last_updated";

        /// public static final [HINT_LIST](https://developer.android.com/reference/android/app/slice/Slice.html#HINT_LIST)
        pub const HINT_LIST : &'static str = "list";

        /// public static final [HINT_LIST_ITEM](https://developer.android.com/reference/android/app/slice/Slice.html#HINT_LIST_ITEM)
        pub const HINT_LIST_ITEM : &'static str = "list_item";

        /// public static final [HINT_NO_TINT](https://developer.android.com/reference/android/app/slice/Slice.html#HINT_NO_TINT)
        pub const HINT_NO_TINT : &'static str = "no_tint";

        /// public static final [HINT_PARTIAL](https://developer.android.com/reference/android/app/slice/Slice.html#HINT_PARTIAL)
        pub const HINT_PARTIAL : &'static str = "partial";

        /// public static final [HINT_PERMISSION_REQUEST](https://developer.android.com/reference/android/app/slice/Slice.html#HINT_PERMISSION_REQUEST)
        pub const HINT_PERMISSION_REQUEST : &'static str = "permission_request";

        /// public static final [HINT_SEE_MORE](https://developer.android.com/reference/android/app/slice/Slice.html#HINT_SEE_MORE)
        pub const HINT_SEE_MORE : &'static str = "see_more";

        /// public static final [HINT_SELECTED](https://developer.android.com/reference/android/app/slice/Slice.html#HINT_SELECTED)
        pub const HINT_SELECTED : &'static str = "selected";

        /// public static final [HINT_SHORTCUT](https://developer.android.com/reference/android/app/slice/Slice.html#HINT_SHORTCUT)
        pub const HINT_SHORTCUT : &'static str = "shortcut";

        /// public static final [HINT_SUMMARY](https://developer.android.com/reference/android/app/slice/Slice.html#HINT_SUMMARY)
        pub const HINT_SUMMARY : &'static str = "summary";

        /// public static final [HINT_TITLE](https://developer.android.com/reference/android/app/slice/Slice.html#HINT_TITLE)
        pub const HINT_TITLE : &'static str = "title";

        /// public static final [HINT_TTL](https://developer.android.com/reference/android/app/slice/Slice.html#HINT_TTL)
        pub const HINT_TTL : &'static str = "ttl";

        /// public static final [SUBTYPE_COLOR](https://developer.android.com/reference/android/app/slice/Slice.html#SUBTYPE_COLOR)
        pub const SUBTYPE_COLOR : &'static str = "color";

        /// public static final [SUBTYPE_CONTENT_DESCRIPTION](https://developer.android.com/reference/android/app/slice/Slice.html#SUBTYPE_CONTENT_DESCRIPTION)
        pub const SUBTYPE_CONTENT_DESCRIPTION : &'static str = "content_description";

        /// public static final [SUBTYPE_LAYOUT_DIRECTION](https://developer.android.com/reference/android/app/slice/Slice.html#SUBTYPE_LAYOUT_DIRECTION)
        pub const SUBTYPE_LAYOUT_DIRECTION : &'static str = "layout_direction";

        /// public static final [SUBTYPE_MAX](https://developer.android.com/reference/android/app/slice/Slice.html#SUBTYPE_MAX)
        pub const SUBTYPE_MAX : &'static str = "max";

        /// public static final [SUBTYPE_MESSAGE](https://developer.android.com/reference/android/app/slice/Slice.html#SUBTYPE_MESSAGE)
        pub const SUBTYPE_MESSAGE : &'static str = "message";

        /// public static final [SUBTYPE_MILLIS](https://developer.android.com/reference/android/app/slice/Slice.html#SUBTYPE_MILLIS)
        pub const SUBTYPE_MILLIS : &'static str = "millis";

        /// public static final [SUBTYPE_PRIORITY](https://developer.android.com/reference/android/app/slice/Slice.html#SUBTYPE_PRIORITY)
        pub const SUBTYPE_PRIORITY : &'static str = "priority";

        /// public static final [SUBTYPE_RANGE](https://developer.android.com/reference/android/app/slice/Slice.html#SUBTYPE_RANGE)
        pub const SUBTYPE_RANGE : &'static str = "range";

        /// public static final [SUBTYPE_SOURCE](https://developer.android.com/reference/android/app/slice/Slice.html#SUBTYPE_SOURCE)
        pub const SUBTYPE_SOURCE : &'static str = "source";

        /// public static final [SUBTYPE_TOGGLE](https://developer.android.com/reference/android/app/slice/Slice.html#SUBTYPE_TOGGLE)
        pub const SUBTYPE_TOGGLE : &'static str = "toggle";

        /// public static final [SUBTYPE_VALUE](https://developer.android.com/reference/android/app/slice/Slice.html#SUBTYPE_VALUE)
        pub const SUBTYPE_VALUE : &'static str = "value";
    }
}
