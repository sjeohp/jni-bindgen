// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-app-DownloadManager_Request"))]
__jni_bindgen! {
    /// public class [DownloadManager.Request](https://developer.android.com/reference/android/app/DownloadManager.Request.html)
    ///
    /// Required feature: android-app-DownloadManager_Request
    public class DownloadManager_Request ("android/app/DownloadManager$Request") extends crate::java::lang::Object {

        /// [Request](https://developer.android.com/reference/android/app/DownloadManager.Request.html#Request(android.net.Uri))
        ///
        /// Required features: "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri")))]
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::app::DownloadManager_Request>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/DownloadManager$Request", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/net/Uri;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/DownloadManager$Request\0", "<init>\0", "(Landroid/net/Uri;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDestinationUri](https://developer.android.com/reference/android/app/DownloadManager.Request.html#setDestinationUri(android.net.Uri))
        ///
        /// Required features: "android-app-DownloadManager_Request", "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-app-DownloadManager_Request", feature = "android-net-Uri")))]
        pub fn setDestinationUri<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::DownloadManager_Request>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/DownloadManager$Request", java.flags == PUBLIC, .name == "setDestinationUri", .descriptor == "(Landroid/net/Uri;)Landroid/app/DownloadManager$Request;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/DownloadManager$Request\0", "setDestinationUri\0", "(Landroid/net/Uri;)Landroid/app/DownloadManager$Request;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDestinationInExternalFilesDir](https://developer.android.com/reference/android/app/DownloadManager.Request.html#setDestinationInExternalFilesDir(android.content.Context,%20java.lang.String,%20java.lang.String))
        ///
        /// Required features: "android-app-DownloadManager_Request", "android-content-Context", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-app-DownloadManager_Request", feature = "android-content-Context", feature = "java-lang-String")))]
        pub fn setDestinationInExternalFilesDir<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::DownloadManager_Request>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/DownloadManager$Request", java.flags == PUBLIC, .name == "setDestinationInExternalFilesDir", .descriptor == "(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)Landroid/app/DownloadManager$Request;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/DownloadManager$Request\0", "setDestinationInExternalFilesDir\0", "(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)Landroid/app/DownloadManager$Request;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDestinationInExternalPublicDir](https://developer.android.com/reference/android/app/DownloadManager.Request.html#setDestinationInExternalPublicDir(java.lang.String,%20java.lang.String))
        ///
        /// Required features: "android-app-DownloadManager_Request", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-app-DownloadManager_Request", feature = "java-lang-String")))]
        pub fn setDestinationInExternalPublicDir<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::DownloadManager_Request>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/DownloadManager$Request", java.flags == PUBLIC, .name == "setDestinationInExternalPublicDir", .descriptor == "(Ljava/lang/String;Ljava/lang/String;)Landroid/app/DownloadManager$Request;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/DownloadManager$Request\0", "setDestinationInExternalPublicDir\0", "(Ljava/lang/String;Ljava/lang/String;)Landroid/app/DownloadManager$Request;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [allowScanningByMediaScanner](https://developer.android.com/reference/android/app/DownloadManager.Request.html#allowScanningByMediaScanner())
        #[deprecated] pub fn allowScanningByMediaScanner<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/DownloadManager$Request", java.flags == PUBLIC, .name == "allowScanningByMediaScanner", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/DownloadManager$Request\0", "allowScanningByMediaScanner\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addRequestHeader](https://developer.android.com/reference/android/app/DownloadManager.Request.html#addRequestHeader(java.lang.String,%20java.lang.String))
        ///
        /// Required features: "android-app-DownloadManager_Request", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-app-DownloadManager_Request", feature = "java-lang-String")))]
        pub fn addRequestHeader<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::DownloadManager_Request>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/DownloadManager$Request", java.flags == PUBLIC, .name == "addRequestHeader", .descriptor == "(Ljava/lang/String;Ljava/lang/String;)Landroid/app/DownloadManager$Request;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/DownloadManager$Request\0", "addRequestHeader\0", "(Ljava/lang/String;Ljava/lang/String;)Landroid/app/DownloadManager$Request;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTitle](https://developer.android.com/reference/android/app/DownloadManager.Request.html#setTitle(java.lang.CharSequence))
        ///
        /// Required features: "android-app-DownloadManager_Request", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-app-DownloadManager_Request", feature = "java-lang-CharSequence")))]
        pub fn setTitle<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::DownloadManager_Request>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/DownloadManager$Request", java.flags == PUBLIC, .name == "setTitle", .descriptor == "(Ljava/lang/CharSequence;)Landroid/app/DownloadManager$Request;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/DownloadManager$Request\0", "setTitle\0", "(Ljava/lang/CharSequence;)Landroid/app/DownloadManager$Request;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDescription](https://developer.android.com/reference/android/app/DownloadManager.Request.html#setDescription(java.lang.CharSequence))
        ///
        /// Required features: "android-app-DownloadManager_Request", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-app-DownloadManager_Request", feature = "java-lang-CharSequence")))]
        pub fn setDescription<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::DownloadManager_Request>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/DownloadManager$Request", java.flags == PUBLIC, .name == "setDescription", .descriptor == "(Ljava/lang/CharSequence;)Landroid/app/DownloadManager$Request;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/DownloadManager$Request\0", "setDescription\0", "(Ljava/lang/CharSequence;)Landroid/app/DownloadManager$Request;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setMimeType](https://developer.android.com/reference/android/app/DownloadManager.Request.html#setMimeType(java.lang.String))
        ///
        /// Required features: "android-app-DownloadManager_Request", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-app-DownloadManager_Request", feature = "java-lang-String")))]
        pub fn setMimeType<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::DownloadManager_Request>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/DownloadManager$Request", java.flags == PUBLIC, .name == "setMimeType", .descriptor == "(Ljava/lang/String;)Landroid/app/DownloadManager$Request;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/DownloadManager$Request\0", "setMimeType\0", "(Ljava/lang/String;)Landroid/app/DownloadManager$Request;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setShowRunningNotification](https://developer.android.com/reference/android/app/DownloadManager.Request.html#setShowRunningNotification(boolean))
        ///
        /// Required features: "android-app-DownloadManager_Request"
        #[cfg(any(feature = "all", all(feature = "android-app-DownloadManager_Request")))]
        #[deprecated] pub fn setShowRunningNotification<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::DownloadManager_Request>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/DownloadManager$Request", java.flags == PUBLIC, .name == "setShowRunningNotification", .descriptor == "(Z)Landroid/app/DownloadManager$Request;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/DownloadManager$Request\0", "setShowRunningNotification\0", "(Z)Landroid/app/DownloadManager$Request;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setNotificationVisibility](https://developer.android.com/reference/android/app/DownloadManager.Request.html#setNotificationVisibility(int))
        ///
        /// Required features: "android-app-DownloadManager_Request"
        #[cfg(any(feature = "all", all(feature = "android-app-DownloadManager_Request")))]
        pub fn setNotificationVisibility<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::DownloadManager_Request>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/DownloadManager$Request", java.flags == PUBLIC, .name == "setNotificationVisibility", .descriptor == "(I)Landroid/app/DownloadManager$Request;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/DownloadManager$Request\0", "setNotificationVisibility\0", "(I)Landroid/app/DownloadManager$Request;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAllowedNetworkTypes](https://developer.android.com/reference/android/app/DownloadManager.Request.html#setAllowedNetworkTypes(int))
        ///
        /// Required features: "android-app-DownloadManager_Request"
        #[cfg(any(feature = "all", all(feature = "android-app-DownloadManager_Request")))]
        pub fn setAllowedNetworkTypes<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::DownloadManager_Request>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/DownloadManager$Request", java.flags == PUBLIC, .name == "setAllowedNetworkTypes", .descriptor == "(I)Landroid/app/DownloadManager$Request;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/DownloadManager$Request\0", "setAllowedNetworkTypes\0", "(I)Landroid/app/DownloadManager$Request;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAllowedOverRoaming](https://developer.android.com/reference/android/app/DownloadManager.Request.html#setAllowedOverRoaming(boolean))
        ///
        /// Required features: "android-app-DownloadManager_Request"
        #[cfg(any(feature = "all", all(feature = "android-app-DownloadManager_Request")))]
        pub fn setAllowedOverRoaming<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::DownloadManager_Request>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/DownloadManager$Request", java.flags == PUBLIC, .name == "setAllowedOverRoaming", .descriptor == "(Z)Landroid/app/DownloadManager$Request;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/DownloadManager$Request\0", "setAllowedOverRoaming\0", "(Z)Landroid/app/DownloadManager$Request;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAllowedOverMetered](https://developer.android.com/reference/android/app/DownloadManager.Request.html#setAllowedOverMetered(boolean))
        ///
        /// Required features: "android-app-DownloadManager_Request"
        #[cfg(any(feature = "all", all(feature = "android-app-DownloadManager_Request")))]
        pub fn setAllowedOverMetered<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::DownloadManager_Request>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/DownloadManager$Request", java.flags == PUBLIC, .name == "setAllowedOverMetered", .descriptor == "(Z)Landroid/app/DownloadManager$Request;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/DownloadManager$Request\0", "setAllowedOverMetered\0", "(Z)Landroid/app/DownloadManager$Request;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setRequiresCharging](https://developer.android.com/reference/android/app/DownloadManager.Request.html#setRequiresCharging(boolean))
        ///
        /// Required features: "android-app-DownloadManager_Request"
        #[cfg(any(feature = "all", all(feature = "android-app-DownloadManager_Request")))]
        pub fn setRequiresCharging<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::DownloadManager_Request>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/DownloadManager$Request", java.flags == PUBLIC, .name == "setRequiresCharging", .descriptor == "(Z)Landroid/app/DownloadManager$Request;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/DownloadManager$Request\0", "setRequiresCharging\0", "(Z)Landroid/app/DownloadManager$Request;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setRequiresDeviceIdle](https://developer.android.com/reference/android/app/DownloadManager.Request.html#setRequiresDeviceIdle(boolean))
        ///
        /// Required features: "android-app-DownloadManager_Request"
        #[cfg(any(feature = "all", all(feature = "android-app-DownloadManager_Request")))]
        pub fn setRequiresDeviceIdle<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::DownloadManager_Request>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/DownloadManager$Request", java.flags == PUBLIC, .name == "setRequiresDeviceIdle", .descriptor == "(Z)Landroid/app/DownloadManager$Request;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/DownloadManager$Request\0", "setRequiresDeviceIdle\0", "(Z)Landroid/app/DownloadManager$Request;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setVisibleInDownloadsUi](https://developer.android.com/reference/android/app/DownloadManager.Request.html#setVisibleInDownloadsUi(boolean))
        ///
        /// Required features: "android-app-DownloadManager_Request"
        #[cfg(any(feature = "all", all(feature = "android-app-DownloadManager_Request")))]
        #[deprecated] pub fn setVisibleInDownloadsUi<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::DownloadManager_Request>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/DownloadManager$Request", java.flags == PUBLIC, .name == "setVisibleInDownloadsUi", .descriptor == "(Z)Landroid/app/DownloadManager$Request;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/DownloadManager$Request\0", "setVisibleInDownloadsUi\0", "(Z)Landroid/app/DownloadManager$Request;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [NETWORK_MOBILE](https://developer.android.com/reference/android/app/DownloadManager.Request.html#NETWORK_MOBILE)
        pub const NETWORK_MOBILE : i32 = 1;

        /// public static final [NETWORK_WIFI](https://developer.android.com/reference/android/app/DownloadManager.Request.html#NETWORK_WIFI)
        pub const NETWORK_WIFI : i32 = 2;

        /// public static final [VISIBILITY_HIDDEN](https://developer.android.com/reference/android/app/DownloadManager.Request.html#VISIBILITY_HIDDEN)
        pub const VISIBILITY_HIDDEN : i32 = 2;

        /// public static final [VISIBILITY_VISIBLE](https://developer.android.com/reference/android/app/DownloadManager.Request.html#VISIBILITY_VISIBLE)
        pub const VISIBILITY_VISIBLE : i32 = 0;

        /// public static final [VISIBILITY_VISIBLE_NOTIFY_COMPLETED](https://developer.android.com/reference/android/app/DownloadManager.Request.html#VISIBILITY_VISIBLE_NOTIFY_COMPLETED)
        pub const VISIBILITY_VISIBLE_NOTIFY_COMPLETED : i32 = 1;

        /// public static final [VISIBILITY_VISIBLE_NOTIFY_ONLY_COMPLETION](https://developer.android.com/reference/android/app/DownloadManager.Request.html#VISIBILITY_VISIBLE_NOTIFY_ONLY_COMPLETION)
        pub const VISIBILITY_VISIBLE_NOTIFY_ONLY_COMPLETION : i32 = 3;
    }
}
