// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-app-FragmentManager"))]
__jni_bindgen! {
    /// public class [FragmentManager](https://developer.android.com/reference/android/app/FragmentManager.html)
    ///
    /// Required feature: android-app-FragmentManager
    #[deprecated] public class FragmentManager ("android/app/FragmentManager") extends crate::java::lang::Object {

        /// [FragmentManager](https://developer.android.com/reference/android/app/FragmentManager.html#FragmentManager())
        #[deprecated] pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::app::FragmentManager>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentManager", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentManager\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [beginTransaction](https://developer.android.com/reference/android/app/FragmentManager.html#beginTransaction())
        ///
        /// Required features: "android-app-FragmentTransaction"
        #[cfg(any(feature = "all", all(feature = "android-app-FragmentTransaction")))]
        #[deprecated] pub fn beginTransaction<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::FragmentTransaction>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentManager", java.flags == PUBLIC | ABSTRACT, .name == "beginTransaction", .descriptor == "()Landroid/app/FragmentTransaction;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentManager\0", "beginTransaction\0", "()Landroid/app/FragmentTransaction;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [executePendingTransactions](https://developer.android.com/reference/android/app/FragmentManager.html#executePendingTransactions())
        #[deprecated] pub fn executePendingTransactions<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentManager", java.flags == PUBLIC | ABSTRACT, .name == "executePendingTransactions", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentManager\0", "executePendingTransactions\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [findFragmentById](https://developer.android.com/reference/android/app/FragmentManager.html#findFragmentById(int))
        ///
        /// Required features: "android-app-Fragment"
        #[cfg(any(feature = "all", all(feature = "android-app-Fragment")))]
        #[deprecated] pub fn findFragmentById<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Fragment>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentManager", java.flags == PUBLIC | ABSTRACT, .name == "findFragmentById", .descriptor == "(I)Landroid/app/Fragment;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentManager\0", "findFragmentById\0", "(I)Landroid/app/Fragment;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [findFragmentByTag](https://developer.android.com/reference/android/app/FragmentManager.html#findFragmentByTag(java.lang.String))
        ///
        /// Required features: "android-app-Fragment", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-app-Fragment", feature = "java-lang-String")))]
        #[deprecated] pub fn findFragmentByTag<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Fragment>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentManager", java.flags == PUBLIC | ABSTRACT, .name == "findFragmentByTag", .descriptor == "(Ljava/lang/String;)Landroid/app/Fragment;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentManager\0", "findFragmentByTag\0", "(Ljava/lang/String;)Landroid/app/Fragment;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [popBackStack](https://developer.android.com/reference/android/app/FragmentManager.html#popBackStack())
        #[deprecated] pub fn popBackStack<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentManager", java.flags == PUBLIC | ABSTRACT, .name == "popBackStack", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentManager\0", "popBackStack\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [popBackStackImmediate](https://developer.android.com/reference/android/app/FragmentManager.html#popBackStackImmediate())
        #[deprecated] pub fn popBackStackImmediate<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentManager", java.flags == PUBLIC | ABSTRACT, .name == "popBackStackImmediate", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentManager\0", "popBackStackImmediate\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [popBackStack](https://developer.android.com/reference/android/app/FragmentManager.html#popBackStack(java.lang.String,%20int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        #[deprecated] pub fn popBackStack_String_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentManager", java.flags == PUBLIC | ABSTRACT, .name == "popBackStack", .descriptor == "(Ljava/lang/String;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentManager\0", "popBackStack\0", "(Ljava/lang/String;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [popBackStackImmediate](https://developer.android.com/reference/android/app/FragmentManager.html#popBackStackImmediate(java.lang.String,%20int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        #[deprecated] pub fn popBackStackImmediate_String_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentManager", java.flags == PUBLIC | ABSTRACT, .name == "popBackStackImmediate", .descriptor == "(Ljava/lang/String;I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentManager\0", "popBackStackImmediate\0", "(Ljava/lang/String;I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [popBackStack](https://developer.android.com/reference/android/app/FragmentManager.html#popBackStack(int,%20int))
        #[deprecated] pub fn popBackStack_int_int<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentManager", java.flags == PUBLIC | ABSTRACT, .name == "popBackStack", .descriptor == "(II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentManager\0", "popBackStack\0", "(II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [popBackStackImmediate](https://developer.android.com/reference/android/app/FragmentManager.html#popBackStackImmediate(int,%20int))
        #[deprecated] pub fn popBackStackImmediate_int_int<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentManager", java.flags == PUBLIC | ABSTRACT, .name == "popBackStackImmediate", .descriptor == "(II)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentManager\0", "popBackStackImmediate\0", "(II)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getBackStackEntryCount](https://developer.android.com/reference/android/app/FragmentManager.html#getBackStackEntryCount())
        #[deprecated] pub fn getBackStackEntryCount<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentManager", java.flags == PUBLIC | ABSTRACT, .name == "getBackStackEntryCount", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentManager\0", "getBackStackEntryCount\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getBackStackEntryAt](https://developer.android.com/reference/android/app/FragmentManager.html#getBackStackEntryAt(int))
        ///
        /// Required features: "android-app-FragmentManager_BackStackEntry"
        #[cfg(any(feature = "all", all(feature = "android-app-FragmentManager_BackStackEntry")))]
        #[deprecated] pub fn getBackStackEntryAt<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::FragmentManager_BackStackEntry>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentManager", java.flags == PUBLIC | ABSTRACT, .name == "getBackStackEntryAt", .descriptor == "(I)Landroid/app/FragmentManager$BackStackEntry;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentManager\0", "getBackStackEntryAt\0", "(I)Landroid/app/FragmentManager$BackStackEntry;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addOnBackStackChangedListener](https://developer.android.com/reference/android/app/FragmentManager.html#addOnBackStackChangedListener(android.app.FragmentManager.OnBackStackChangedListener))
        ///
        /// Required features: "android-app-FragmentManager_OnBackStackChangedListener"
        #[cfg(any(feature = "all", all(feature = "android-app-FragmentManager_OnBackStackChangedListener")))]
        #[deprecated] pub fn addOnBackStackChangedListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::FragmentManager_OnBackStackChangedListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentManager", java.flags == PUBLIC | ABSTRACT, .name == "addOnBackStackChangedListener", .descriptor == "(Landroid/app/FragmentManager$OnBackStackChangedListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentManager\0", "addOnBackStackChangedListener\0", "(Landroid/app/FragmentManager$OnBackStackChangedListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeOnBackStackChangedListener](https://developer.android.com/reference/android/app/FragmentManager.html#removeOnBackStackChangedListener(android.app.FragmentManager.OnBackStackChangedListener))
        ///
        /// Required features: "android-app-FragmentManager_OnBackStackChangedListener"
        #[cfg(any(feature = "all", all(feature = "android-app-FragmentManager_OnBackStackChangedListener")))]
        #[deprecated] pub fn removeOnBackStackChangedListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::FragmentManager_OnBackStackChangedListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentManager", java.flags == PUBLIC | ABSTRACT, .name == "removeOnBackStackChangedListener", .descriptor == "(Landroid/app/FragmentManager$OnBackStackChangedListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentManager\0", "removeOnBackStackChangedListener\0", "(Landroid/app/FragmentManager$OnBackStackChangedListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [putFragment](https://developer.android.com/reference/android/app/FragmentManager.html#putFragment(android.os.Bundle,%20java.lang.String,%20android.app.Fragment))
        ///
        /// Required features: "android-app-Fragment", "android-os-Bundle", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-app-Fragment", feature = "android-os-Bundle", feature = "java-lang-String")))]
        #[deprecated] pub fn putFragment<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Fragment>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentManager", java.flags == PUBLIC | ABSTRACT, .name == "putFragment", .descriptor == "(Landroid/os/Bundle;Ljava/lang/String;Landroid/app/Fragment;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentManager\0", "putFragment\0", "(Landroid/os/Bundle;Ljava/lang/String;Landroid/app/Fragment;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFragment](https://developer.android.com/reference/android/app/FragmentManager.html#getFragment(android.os.Bundle,%20java.lang.String))
        ///
        /// Required features: "android-app-Fragment", "android-os-Bundle", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-app-Fragment", feature = "android-os-Bundle", feature = "java-lang-String")))]
        #[deprecated] pub fn getFragment<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Fragment>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentManager", java.flags == PUBLIC | ABSTRACT, .name == "getFragment", .descriptor == "(Landroid/os/Bundle;Ljava/lang/String;)Landroid/app/Fragment;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentManager\0", "getFragment\0", "(Landroid/os/Bundle;Ljava/lang/String;)Landroid/app/Fragment;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFragments](https://developer.android.com/reference/android/app/FragmentManager.html#getFragments())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        #[deprecated] pub fn getFragments<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentManager", java.flags == PUBLIC | ABSTRACT, .name == "getFragments", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentManager\0", "getFragments\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [saveFragmentInstanceState](https://developer.android.com/reference/android/app/FragmentManager.html#saveFragmentInstanceState(android.app.Fragment))
        ///
        /// Required features: "android-app-Fragment", "android-app-Fragment_SavedState"
        #[cfg(any(feature = "all", all(feature = "android-app-Fragment", feature = "android-app-Fragment_SavedState")))]
        #[deprecated] pub fn saveFragmentInstanceState<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Fragment>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Fragment_SavedState>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentManager", java.flags == PUBLIC | ABSTRACT, .name == "saveFragmentInstanceState", .descriptor == "(Landroid/app/Fragment;)Landroid/app/Fragment$SavedState;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentManager\0", "saveFragmentInstanceState\0", "(Landroid/app/Fragment;)Landroid/app/Fragment$SavedState;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isDestroyed](https://developer.android.com/reference/android/app/FragmentManager.html#isDestroyed())
        #[deprecated] pub fn isDestroyed<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentManager", java.flags == PUBLIC | ABSTRACT, .name == "isDestroyed", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentManager\0", "isDestroyed\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [registerFragmentLifecycleCallbacks](https://developer.android.com/reference/android/app/FragmentManager.html#registerFragmentLifecycleCallbacks(android.app.FragmentManager.FragmentLifecycleCallbacks,%20boolean))
        ///
        /// Required features: "android-app-FragmentManager_FragmentLifecycleCallbacks"
        #[cfg(any(feature = "all", all(feature = "android-app-FragmentManager_FragmentLifecycleCallbacks")))]
        #[deprecated] pub fn registerFragmentLifecycleCallbacks<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::FragmentManager_FragmentLifecycleCallbacks>>, arg1: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentManager", java.flags == PUBLIC | ABSTRACT, .name == "registerFragmentLifecycleCallbacks", .descriptor == "(Landroid/app/FragmentManager$FragmentLifecycleCallbacks;Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentManager\0", "registerFragmentLifecycleCallbacks\0", "(Landroid/app/FragmentManager$FragmentLifecycleCallbacks;Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unregisterFragmentLifecycleCallbacks](https://developer.android.com/reference/android/app/FragmentManager.html#unregisterFragmentLifecycleCallbacks(android.app.FragmentManager.FragmentLifecycleCallbacks))
        ///
        /// Required features: "android-app-FragmentManager_FragmentLifecycleCallbacks"
        #[cfg(any(feature = "all", all(feature = "android-app-FragmentManager_FragmentLifecycleCallbacks")))]
        #[deprecated] pub fn unregisterFragmentLifecycleCallbacks<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::FragmentManager_FragmentLifecycleCallbacks>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentManager", java.flags == PUBLIC | ABSTRACT, .name == "unregisterFragmentLifecycleCallbacks", .descriptor == "(Landroid/app/FragmentManager$FragmentLifecycleCallbacks;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentManager\0", "unregisterFragmentLifecycleCallbacks\0", "(Landroid/app/FragmentManager$FragmentLifecycleCallbacks;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPrimaryNavigationFragment](https://developer.android.com/reference/android/app/FragmentManager.html#getPrimaryNavigationFragment())
        ///
        /// Required features: "android-app-Fragment"
        #[cfg(any(feature = "all", all(feature = "android-app-Fragment")))]
        #[deprecated] pub fn getPrimaryNavigationFragment<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Fragment>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentManager", java.flags == PUBLIC | ABSTRACT, .name == "getPrimaryNavigationFragment", .descriptor == "()Landroid/app/Fragment;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentManager\0", "getPrimaryNavigationFragment\0", "()Landroid/app/Fragment;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dump](https://developer.android.com/reference/android/app/FragmentManager.html#dump(java.lang.String,%20java.io.FileDescriptor,%20java.io.PrintWriter,%20java.lang.String%5B%5D))
        ///
        /// Required features: "java-io-FileDescriptor", "java-io-PrintWriter", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-io-FileDescriptor", feature = "java-io-PrintWriter", feature = "java-lang-String")))]
        #[deprecated] pub fn dump<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::FileDescriptor>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::PrintWriter>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentManager", java.flags == PUBLIC | ABSTRACT, .name == "dump", .descriptor == "(Ljava/lang/String;Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentManager\0", "dump\0", "(Ljava/lang/String;Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [enableDebugLogging](https://developer.android.com/reference/android/app/FragmentManager.html#enableDebugLogging(boolean))
        #[deprecated] pub fn enableDebugLogging<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentManager", java.flags == PUBLIC | STATIC, .name == "enableDebugLogging", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/app/FragmentManager\0", "enableDebugLogging\0", "(Z)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [invalidateOptionsMenu](https://developer.android.com/reference/android/app/FragmentManager.html#invalidateOptionsMenu())
        #[deprecated] pub fn invalidateOptionsMenu<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentManager", java.flags == PUBLIC, .name == "invalidateOptionsMenu", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentManager\0", "invalidateOptionsMenu\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isStateSaved](https://developer.android.com/reference/android/app/FragmentManager.html#isStateSaved())
        #[deprecated] pub fn isStateSaved<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentManager", java.flags == PUBLIC | ABSTRACT, .name == "isStateSaved", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentManager\0", "isStateSaved\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [POP_BACK_STACK_INCLUSIVE](https://developer.android.com/reference/android/app/FragmentManager.html#POP_BACK_STACK_INCLUSIVE)
        #[deprecated] pub const POP_BACK_STACK_INCLUSIVE : i32 = 1;
    }
}
