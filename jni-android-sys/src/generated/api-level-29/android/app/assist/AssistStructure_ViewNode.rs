// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-app-assist-AssistStructure_ViewNode"))]
__jni_bindgen! {
    /// public class [AssistStructure.ViewNode](https://developer.android.com/reference/android/app/assist/AssistStructure.ViewNode.html)
    ///
    /// Required feature: android-app-assist-AssistStructure_ViewNode
    public class AssistStructure_ViewNode ("android/app/assist/AssistStructure$ViewNode") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [ViewNode](https://developer.android.com/reference/android/app/assist/AssistStructure.ViewNode.html#ViewNode())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::app::assist::AssistStructure_ViewNode>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/app/assist/AssistStructure$ViewNode", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/assist/AssistStructure$ViewNode\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getId](https://developer.android.com/reference/android/app/assist/AssistStructure.ViewNode.html#getId())
        pub fn getId<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/assist/AssistStructure$ViewNode", java.flags == PUBLIC, .name == "getId", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/assist/AssistStructure$ViewNode\0", "getId\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getIdPackage](https://developer.android.com/reference/android/app/assist/AssistStructure.ViewNode.html#getIdPackage())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getIdPackage<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/assist/AssistStructure$ViewNode", java.flags == PUBLIC, .name == "getIdPackage", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/assist/AssistStructure$ViewNode\0", "getIdPackage\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getIdType](https://developer.android.com/reference/android/app/assist/AssistStructure.ViewNode.html#getIdType())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getIdType<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/assist/AssistStructure$ViewNode", java.flags == PUBLIC, .name == "getIdType", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/assist/AssistStructure$ViewNode\0", "getIdType\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getIdEntry](https://developer.android.com/reference/android/app/assist/AssistStructure.ViewNode.html#getIdEntry())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getIdEntry<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/assist/AssistStructure$ViewNode", java.flags == PUBLIC, .name == "getIdEntry", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/assist/AssistStructure$ViewNode\0", "getIdEntry\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAutofillId](https://developer.android.com/reference/android/app/assist/AssistStructure.ViewNode.html#getAutofillId())
        ///
        /// Required features: "android-view-autofill-AutofillId"
        #[cfg(any(feature = "all", all(feature = "android-view-autofill-AutofillId")))]
        pub fn getAutofillId<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::autofill::AutofillId>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/assist/AssistStructure$ViewNode", java.flags == PUBLIC, .name == "getAutofillId", .descriptor == "()Landroid/view/autofill/AutofillId;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/assist/AssistStructure$ViewNode\0", "getAutofillId\0", "()Landroid/view/autofill/AutofillId;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAutofillType](https://developer.android.com/reference/android/app/assist/AssistStructure.ViewNode.html#getAutofillType())
        pub fn getAutofillType<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/assist/AssistStructure$ViewNode", java.flags == PUBLIC, .name == "getAutofillType", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/assist/AssistStructure$ViewNode\0", "getAutofillType\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAutofillHints](https://developer.android.com/reference/android/app/assist/AssistStructure.ViewNode.html#getAutofillHints())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getAutofillHints<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/assist/AssistStructure$ViewNode", java.flags == PUBLIC, .name == "getAutofillHints", .descriptor == "()[Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/assist/AssistStructure$ViewNode\0", "getAutofillHints\0", "()[Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAutofillValue](https://developer.android.com/reference/android/app/assist/AssistStructure.ViewNode.html#getAutofillValue())
        ///
        /// Required features: "android-view-autofill-AutofillValue"
        #[cfg(any(feature = "all", all(feature = "android-view-autofill-AutofillValue")))]
        pub fn getAutofillValue<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::autofill::AutofillValue>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/assist/AssistStructure$ViewNode", java.flags == PUBLIC, .name == "getAutofillValue", .descriptor == "()Landroid/view/autofill/AutofillValue;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/assist/AssistStructure$ViewNode\0", "getAutofillValue\0", "()Landroid/view/autofill/AutofillValue;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAutofillOptions](https://developer.android.com/reference/android/app/assist/AssistStructure.ViewNode.html#getAutofillOptions())
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn getAutofillOptions<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::CharSequence, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/assist/AssistStructure$ViewNode", java.flags == PUBLIC, .name == "getAutofillOptions", .descriptor == "()[Ljava/lang/CharSequence;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/assist/AssistStructure$ViewNode\0", "getAutofillOptions\0", "()[Ljava/lang/CharSequence;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInputType](https://developer.android.com/reference/android/app/assist/AssistStructure.ViewNode.html#getInputType())
        pub fn getInputType<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/assist/AssistStructure$ViewNode", java.flags == PUBLIC, .name == "getInputType", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/assist/AssistStructure$ViewNode\0", "getInputType\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLeft](https://developer.android.com/reference/android/app/assist/AssistStructure.ViewNode.html#getLeft())
        pub fn getLeft<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/assist/AssistStructure$ViewNode", java.flags == PUBLIC, .name == "getLeft", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/assist/AssistStructure$ViewNode\0", "getLeft\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTop](https://developer.android.com/reference/android/app/assist/AssistStructure.ViewNode.html#getTop())
        pub fn getTop<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/assist/AssistStructure$ViewNode", java.flags == PUBLIC, .name == "getTop", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/assist/AssistStructure$ViewNode\0", "getTop\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getScrollX](https://developer.android.com/reference/android/app/assist/AssistStructure.ViewNode.html#getScrollX())
        pub fn getScrollX<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/assist/AssistStructure$ViewNode", java.flags == PUBLIC, .name == "getScrollX", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/assist/AssistStructure$ViewNode\0", "getScrollX\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getScrollY](https://developer.android.com/reference/android/app/assist/AssistStructure.ViewNode.html#getScrollY())
        pub fn getScrollY<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/assist/AssistStructure$ViewNode", java.flags == PUBLIC, .name == "getScrollY", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/assist/AssistStructure$ViewNode\0", "getScrollY\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getWidth](https://developer.android.com/reference/android/app/assist/AssistStructure.ViewNode.html#getWidth())
        pub fn getWidth<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/assist/AssistStructure$ViewNode", java.flags == PUBLIC, .name == "getWidth", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/assist/AssistStructure$ViewNode\0", "getWidth\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getHeight](https://developer.android.com/reference/android/app/assist/AssistStructure.ViewNode.html#getHeight())
        pub fn getHeight<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/assist/AssistStructure$ViewNode", java.flags == PUBLIC, .name == "getHeight", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/assist/AssistStructure$ViewNode\0", "getHeight\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTransformation](https://developer.android.com/reference/android/app/assist/AssistStructure.ViewNode.html#getTransformation())
        ///
        /// Required features: "android-graphics-Matrix"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Matrix")))]
        pub fn getTransformation<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Matrix>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/assist/AssistStructure$ViewNode", java.flags == PUBLIC, .name == "getTransformation", .descriptor == "()Landroid/graphics/Matrix;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/assist/AssistStructure$ViewNode\0", "getTransformation\0", "()Landroid/graphics/Matrix;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getElevation](https://developer.android.com/reference/android/app/assist/AssistStructure.ViewNode.html#getElevation())
        pub fn getElevation<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/assist/AssistStructure$ViewNode", java.flags == PUBLIC, .name == "getElevation", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/assist/AssistStructure$ViewNode\0", "getElevation\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAlpha](https://developer.android.com/reference/android/app/assist/AssistStructure.ViewNode.html#getAlpha())
        pub fn getAlpha<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/assist/AssistStructure$ViewNode", java.flags == PUBLIC, .name == "getAlpha", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/assist/AssistStructure$ViewNode\0", "getAlpha\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getVisibility](https://developer.android.com/reference/android/app/assist/AssistStructure.ViewNode.html#getVisibility())
        pub fn getVisibility<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/assist/AssistStructure$ViewNode", java.flags == PUBLIC, .name == "getVisibility", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/assist/AssistStructure$ViewNode\0", "getVisibility\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isAssistBlocked](https://developer.android.com/reference/android/app/assist/AssistStructure.ViewNode.html#isAssistBlocked())
        pub fn isAssistBlocked<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/assist/AssistStructure$ViewNode", java.flags == PUBLIC, .name == "isAssistBlocked", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/assist/AssistStructure$ViewNode\0", "isAssistBlocked\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isEnabled](https://developer.android.com/reference/android/app/assist/AssistStructure.ViewNode.html#isEnabled())
        pub fn isEnabled<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/assist/AssistStructure$ViewNode", java.flags == PUBLIC, .name == "isEnabled", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/assist/AssistStructure$ViewNode\0", "isEnabled\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isClickable](https://developer.android.com/reference/android/app/assist/AssistStructure.ViewNode.html#isClickable())
        pub fn isClickable<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/assist/AssistStructure$ViewNode", java.flags == PUBLIC, .name == "isClickable", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/assist/AssistStructure$ViewNode\0", "isClickable\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isFocusable](https://developer.android.com/reference/android/app/assist/AssistStructure.ViewNode.html#isFocusable())
        pub fn isFocusable<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/assist/AssistStructure$ViewNode", java.flags == PUBLIC, .name == "isFocusable", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/assist/AssistStructure$ViewNode\0", "isFocusable\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isFocused](https://developer.android.com/reference/android/app/assist/AssistStructure.ViewNode.html#isFocused())
        pub fn isFocused<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/assist/AssistStructure$ViewNode", java.flags == PUBLIC, .name == "isFocused", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/assist/AssistStructure$ViewNode\0", "isFocused\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isAccessibilityFocused](https://developer.android.com/reference/android/app/assist/AssistStructure.ViewNode.html#isAccessibilityFocused())
        pub fn isAccessibilityFocused<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/assist/AssistStructure$ViewNode", java.flags == PUBLIC, .name == "isAccessibilityFocused", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/assist/AssistStructure$ViewNode\0", "isAccessibilityFocused\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isCheckable](https://developer.android.com/reference/android/app/assist/AssistStructure.ViewNode.html#isCheckable())
        pub fn isCheckable<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/assist/AssistStructure$ViewNode", java.flags == PUBLIC, .name == "isCheckable", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/assist/AssistStructure$ViewNode\0", "isCheckable\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isChecked](https://developer.android.com/reference/android/app/assist/AssistStructure.ViewNode.html#isChecked())
        pub fn isChecked<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/assist/AssistStructure$ViewNode", java.flags == PUBLIC, .name == "isChecked", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/assist/AssistStructure$ViewNode\0", "isChecked\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isSelected](https://developer.android.com/reference/android/app/assist/AssistStructure.ViewNode.html#isSelected())
        pub fn isSelected<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/assist/AssistStructure$ViewNode", java.flags == PUBLIC, .name == "isSelected", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/assist/AssistStructure$ViewNode\0", "isSelected\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isActivated](https://developer.android.com/reference/android/app/assist/AssistStructure.ViewNode.html#isActivated())
        pub fn isActivated<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/assist/AssistStructure$ViewNode", java.flags == PUBLIC, .name == "isActivated", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/assist/AssistStructure$ViewNode\0", "isActivated\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isOpaque](https://developer.android.com/reference/android/app/assist/AssistStructure.ViewNode.html#isOpaque())
        pub fn isOpaque<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/assist/AssistStructure$ViewNode", java.flags == PUBLIC, .name == "isOpaque", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/assist/AssistStructure$ViewNode\0", "isOpaque\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isLongClickable](https://developer.android.com/reference/android/app/assist/AssistStructure.ViewNode.html#isLongClickable())
        pub fn isLongClickable<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/assist/AssistStructure$ViewNode", java.flags == PUBLIC, .name == "isLongClickable", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/assist/AssistStructure$ViewNode\0", "isLongClickable\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isContextClickable](https://developer.android.com/reference/android/app/assist/AssistStructure.ViewNode.html#isContextClickable())
        pub fn isContextClickable<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/assist/AssistStructure$ViewNode", java.flags == PUBLIC, .name == "isContextClickable", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/assist/AssistStructure$ViewNode\0", "isContextClickable\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getClassName](https://developer.android.com/reference/android/app/assist/AssistStructure.ViewNode.html#getClassName())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getClassName<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/assist/AssistStructure$ViewNode", java.flags == PUBLIC, .name == "getClassName", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/assist/AssistStructure$ViewNode\0", "getClassName\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getContentDescription](https://developer.android.com/reference/android/app/assist/AssistStructure.ViewNode.html#getContentDescription())
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn getContentDescription<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::CharSequence>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/assist/AssistStructure$ViewNode", java.flags == PUBLIC, .name == "getContentDescription", .descriptor == "()Ljava/lang/CharSequence;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/assist/AssistStructure$ViewNode\0", "getContentDescription\0", "()Ljava/lang/CharSequence;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getWebDomain](https://developer.android.com/reference/android/app/assist/AssistStructure.ViewNode.html#getWebDomain())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getWebDomain<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/assist/AssistStructure$ViewNode", java.flags == PUBLIC, .name == "getWebDomain", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/assist/AssistStructure$ViewNode\0", "getWebDomain\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getWebScheme](https://developer.android.com/reference/android/app/assist/AssistStructure.ViewNode.html#getWebScheme())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getWebScheme<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/assist/AssistStructure$ViewNode", java.flags == PUBLIC, .name == "getWebScheme", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/assist/AssistStructure$ViewNode\0", "getWebScheme\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getHtmlInfo](https://developer.android.com/reference/android/app/assist/AssistStructure.ViewNode.html#getHtmlInfo())
        ///
        /// Required features: "android-view-ViewStructure_HtmlInfo"
        #[cfg(any(feature = "all", all(feature = "android-view-ViewStructure_HtmlInfo")))]
        pub fn getHtmlInfo<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::ViewStructure_HtmlInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/assist/AssistStructure$ViewNode", java.flags == PUBLIC, .name == "getHtmlInfo", .descriptor == "()Landroid/view/ViewStructure$HtmlInfo;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/assist/AssistStructure$ViewNode\0", "getHtmlInfo\0", "()Landroid/view/ViewStructure$HtmlInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLocaleList](https://developer.android.com/reference/android/app/assist/AssistStructure.ViewNode.html#getLocaleList())
        ///
        /// Required features: "android-os-LocaleList"
        #[cfg(any(feature = "all", all(feature = "android-os-LocaleList")))]
        pub fn getLocaleList<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::LocaleList>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/assist/AssistStructure$ViewNode", java.flags == PUBLIC, .name == "getLocaleList", .descriptor == "()Landroid/os/LocaleList;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/assist/AssistStructure$ViewNode\0", "getLocaleList\0", "()Landroid/os/LocaleList;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getText](https://developer.android.com/reference/android/app/assist/AssistStructure.ViewNode.html#getText())
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn getText<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::CharSequence>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/assist/AssistStructure$ViewNode", java.flags == PUBLIC, .name == "getText", .descriptor == "()Ljava/lang/CharSequence;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/assist/AssistStructure$ViewNode\0", "getText\0", "()Ljava/lang/CharSequence;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTextSelectionStart](https://developer.android.com/reference/android/app/assist/AssistStructure.ViewNode.html#getTextSelectionStart())
        pub fn getTextSelectionStart<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/assist/AssistStructure$ViewNode", java.flags == PUBLIC, .name == "getTextSelectionStart", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/assist/AssistStructure$ViewNode\0", "getTextSelectionStart\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTextSelectionEnd](https://developer.android.com/reference/android/app/assist/AssistStructure.ViewNode.html#getTextSelectionEnd())
        pub fn getTextSelectionEnd<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/assist/AssistStructure$ViewNode", java.flags == PUBLIC, .name == "getTextSelectionEnd", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/assist/AssistStructure$ViewNode\0", "getTextSelectionEnd\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTextColor](https://developer.android.com/reference/android/app/assist/AssistStructure.ViewNode.html#getTextColor())
        pub fn getTextColor<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/assist/AssistStructure$ViewNode", java.flags == PUBLIC, .name == "getTextColor", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/assist/AssistStructure$ViewNode\0", "getTextColor\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTextBackgroundColor](https://developer.android.com/reference/android/app/assist/AssistStructure.ViewNode.html#getTextBackgroundColor())
        pub fn getTextBackgroundColor<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/assist/AssistStructure$ViewNode", java.flags == PUBLIC, .name == "getTextBackgroundColor", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/assist/AssistStructure$ViewNode\0", "getTextBackgroundColor\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTextSize](https://developer.android.com/reference/android/app/assist/AssistStructure.ViewNode.html#getTextSize())
        pub fn getTextSize<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/assist/AssistStructure$ViewNode", java.flags == PUBLIC, .name == "getTextSize", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/assist/AssistStructure$ViewNode\0", "getTextSize\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTextStyle](https://developer.android.com/reference/android/app/assist/AssistStructure.ViewNode.html#getTextStyle())
        pub fn getTextStyle<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/assist/AssistStructure$ViewNode", java.flags == PUBLIC, .name == "getTextStyle", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/assist/AssistStructure$ViewNode\0", "getTextStyle\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTextLineCharOffsets](https://developer.android.com/reference/android/app/assist/AssistStructure.ViewNode.html#getTextLineCharOffsets())
        pub fn getTextLineCharOffsets<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::IntArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/assist/AssistStructure$ViewNode", java.flags == PUBLIC, .name == "getTextLineCharOffsets", .descriptor == "()[I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/assist/AssistStructure$ViewNode\0", "getTextLineCharOffsets\0", "()[I\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTextLineBaselines](https://developer.android.com/reference/android/app/assist/AssistStructure.ViewNode.html#getTextLineBaselines())
        pub fn getTextLineBaselines<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::IntArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/assist/AssistStructure$ViewNode", java.flags == PUBLIC, .name == "getTextLineBaselines", .descriptor == "()[I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/assist/AssistStructure$ViewNode\0", "getTextLineBaselines\0", "()[I\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTextIdEntry](https://developer.android.com/reference/android/app/assist/AssistStructure.ViewNode.html#getTextIdEntry())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getTextIdEntry<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/assist/AssistStructure$ViewNode", java.flags == PUBLIC, .name == "getTextIdEntry", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/assist/AssistStructure$ViewNode\0", "getTextIdEntry\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getHint](https://developer.android.com/reference/android/app/assist/AssistStructure.ViewNode.html#getHint())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getHint<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/assist/AssistStructure$ViewNode", java.flags == PUBLIC, .name == "getHint", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/assist/AssistStructure$ViewNode\0", "getHint\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getExtras](https://developer.android.com/reference/android/app/assist/AssistStructure.ViewNode.html#getExtras())
        ///
        /// Required features: "android-os-Bundle"
        #[cfg(any(feature = "all", all(feature = "android-os-Bundle")))]
        pub fn getExtras<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Bundle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/assist/AssistStructure$ViewNode", java.flags == PUBLIC, .name == "getExtras", .descriptor == "()Landroid/os/Bundle;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/assist/AssistStructure$ViewNode\0", "getExtras\0", "()Landroid/os/Bundle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getChildCount](https://developer.android.com/reference/android/app/assist/AssistStructure.ViewNode.html#getChildCount())
        pub fn getChildCount<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/assist/AssistStructure$ViewNode", java.flags == PUBLIC, .name == "getChildCount", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/assist/AssistStructure$ViewNode\0", "getChildCount\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getChildAt](https://developer.android.com/reference/android/app/assist/AssistStructure.ViewNode.html#getChildAt(int))
        ///
        /// Required features: "android-app-assist-AssistStructure_ViewNode"
        #[cfg(any(feature = "all", all(feature = "android-app-assist-AssistStructure_ViewNode")))]
        pub fn getChildAt<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::assist::AssistStructure_ViewNode>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/assist/AssistStructure$ViewNode", java.flags == PUBLIC, .name == "getChildAt", .descriptor == "(I)Landroid/app/assist/AssistStructure$ViewNode;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/assist/AssistStructure$ViewNode\0", "getChildAt\0", "(I)Landroid/app/assist/AssistStructure$ViewNode;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMinTextEms](https://developer.android.com/reference/android/app/assist/AssistStructure.ViewNode.html#getMinTextEms())
        pub fn getMinTextEms<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/assist/AssistStructure$ViewNode", java.flags == PUBLIC, .name == "getMinTextEms", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/assist/AssistStructure$ViewNode\0", "getMinTextEms\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMaxTextEms](https://developer.android.com/reference/android/app/assist/AssistStructure.ViewNode.html#getMaxTextEms())
        pub fn getMaxTextEms<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/assist/AssistStructure$ViewNode", java.flags == PUBLIC, .name == "getMaxTextEms", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/assist/AssistStructure$ViewNode\0", "getMaxTextEms\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMaxTextLength](https://developer.android.com/reference/android/app/assist/AssistStructure.ViewNode.html#getMaxTextLength())
        pub fn getMaxTextLength<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/assist/AssistStructure$ViewNode", java.flags == PUBLIC, .name == "getMaxTextLength", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/assist/AssistStructure$ViewNode\0", "getMaxTextLength\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getImportantForAutofill](https://developer.android.com/reference/android/app/assist/AssistStructure.ViewNode.html#getImportantForAutofill())
        pub fn getImportantForAutofill<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/assist/AssistStructure$ViewNode", java.flags == PUBLIC, .name == "getImportantForAutofill", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/assist/AssistStructure$ViewNode\0", "getImportantForAutofill\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [TEXT_COLOR_UNDEFINED](https://developer.android.com/reference/android/app/assist/AssistStructure.ViewNode.html#TEXT_COLOR_UNDEFINED)
        pub const TEXT_COLOR_UNDEFINED : i32 = 1;

        /// public static final [TEXT_STYLE_BOLD](https://developer.android.com/reference/android/app/assist/AssistStructure.ViewNode.html#TEXT_STYLE_BOLD)
        pub const TEXT_STYLE_BOLD : i32 = 1;

        /// public static final [TEXT_STYLE_ITALIC](https://developer.android.com/reference/android/app/assist/AssistStructure.ViewNode.html#TEXT_STYLE_ITALIC)
        pub const TEXT_STYLE_ITALIC : i32 = 2;

        /// public static final [TEXT_STYLE_STRIKE_THRU](https://developer.android.com/reference/android/app/assist/AssistStructure.ViewNode.html#TEXT_STYLE_STRIKE_THRU)
        pub const TEXT_STYLE_STRIKE_THRU : i32 = 8;

        /// public static final [TEXT_STYLE_UNDERLINE](https://developer.android.com/reference/android/app/assist/AssistStructure.ViewNode.html#TEXT_STYLE_UNDERLINE)
        pub const TEXT_STYLE_UNDERLINE : i32 = 4;
    }
}
