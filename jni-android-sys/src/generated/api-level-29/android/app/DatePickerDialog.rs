// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-app-DatePickerDialog"))]
__jni_bindgen! {
    /// public class [DatePickerDialog](https://developer.android.com/reference/android/app/DatePickerDialog.html)
    ///
    /// Required feature: android-app-DatePickerDialog
    public class DatePickerDialog ("android/app/DatePickerDialog") extends crate::android::app::AlertDialog, implements crate::android::content::DialogInterface_OnClickListener, crate::android::widget::DatePicker_OnDateChangedListener {

        /// [DatePickerDialog](https://developer.android.com/reference/android/app/DatePickerDialog.html#DatePickerDialog(android.content.Context))
        ///
        /// Required features: "android-content-Context"
        #[cfg(any(feature = "all", all(feature = "android-content-Context")))]
        pub fn new_Context<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::app::DatePickerDialog>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/DatePickerDialog", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/content/Context;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/DatePickerDialog\0", "<init>\0", "(Landroid/content/Context;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [DatePickerDialog](https://developer.android.com/reference/android/app/DatePickerDialog.html#DatePickerDialog(android.content.Context,%20int))
        ///
        /// Required features: "android-content-Context"
        #[cfg(any(feature = "all", all(feature = "android-content-Context")))]
        pub fn new_Context_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::app::DatePickerDialog>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/DatePickerDialog", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/content/Context;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/DatePickerDialog\0", "<init>\0", "(Landroid/content/Context;I)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [DatePickerDialog](https://developer.android.com/reference/android/app/DatePickerDialog.html#DatePickerDialog(android.content.Context,%20android.app.DatePickerDialog.OnDateSetListener,%20int,%20int,%20int))
        ///
        /// Required features: "android-app-DatePickerDialog_OnDateSetListener", "android-content-Context"
        #[cfg(any(feature = "all", all(feature = "android-app-DatePickerDialog_OnDateSetListener", feature = "android-content-Context")))]
        pub fn new_Context_OnDateSetListener_int_int_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::DatePickerDialog_OnDateSetListener>>, arg2: i32, arg3: i32, arg4: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::app::DatePickerDialog>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/DatePickerDialog", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/content/Context;Landroid/app/DatePickerDialog$OnDateSetListener;III)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/DatePickerDialog\0", "<init>\0", "(Landroid/content/Context;Landroid/app/DatePickerDialog$OnDateSetListener;III)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [DatePickerDialog](https://developer.android.com/reference/android/app/DatePickerDialog.html#DatePickerDialog(android.content.Context,%20int,%20android.app.DatePickerDialog.OnDateSetListener,%20int,%20int,%20int))
        ///
        /// Required features: "android-app-DatePickerDialog_OnDateSetListener", "android-content-Context"
        #[cfg(any(feature = "all", all(feature = "android-app-DatePickerDialog_OnDateSetListener", feature = "android-content-Context")))]
        pub fn new_Context_int_OnDateSetListener_int_int_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::DatePickerDialog_OnDateSetListener>>, arg3: i32, arg4: i32, arg5: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::app::DatePickerDialog>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/DatePickerDialog", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/content/Context;ILandroid/app/DatePickerDialog$OnDateSetListener;III)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/DatePickerDialog\0", "<init>\0", "(Landroid/content/Context;ILandroid/app/DatePickerDialog$OnDateSetListener;III)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onDateChanged](https://developer.android.com/reference/android/app/DatePickerDialog.html#onDateChanged(android.widget.DatePicker,%20int,%20int,%20int))
        ///
        /// Required features: "android-widget-DatePicker"
        #[cfg(any(feature = "all", all(feature = "android-widget-DatePicker")))]
        pub fn onDateChanged<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::widget::DatePicker>>, arg1: i32, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/DatePickerDialog", java.flags == PUBLIC, .name == "onDateChanged", .descriptor == "(Landroid/widget/DatePicker;III)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/DatePickerDialog\0", "onDateChanged\0", "(Landroid/widget/DatePicker;III)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOnDateSetListener](https://developer.android.com/reference/android/app/DatePickerDialog.html#setOnDateSetListener(android.app.DatePickerDialog.OnDateSetListener))
        ///
        /// Required features: "android-app-DatePickerDialog_OnDateSetListener"
        #[cfg(any(feature = "all", all(feature = "android-app-DatePickerDialog_OnDateSetListener")))]
        pub fn setOnDateSetListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::DatePickerDialog_OnDateSetListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/DatePickerDialog", java.flags == PUBLIC, .name == "setOnDateSetListener", .descriptor == "(Landroid/app/DatePickerDialog$OnDateSetListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/DatePickerDialog\0", "setOnDateSetListener\0", "(Landroid/app/DatePickerDialog$OnDateSetListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onClick](https://developer.android.com/reference/android/app/DatePickerDialog.html#onClick(android.content.DialogInterface,%20int))
        ///
        /// Required features: "android-content-DialogInterface"
        #[cfg(any(feature = "all", all(feature = "android-content-DialogInterface")))]
        pub fn onClick<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::DialogInterface>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/DatePickerDialog", java.flags == PUBLIC, .name == "onClick", .descriptor == "(Landroid/content/DialogInterface;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/DatePickerDialog\0", "onClick\0", "(Landroid/content/DialogInterface;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDatePicker](https://developer.android.com/reference/android/app/DatePickerDialog.html#getDatePicker())
        ///
        /// Required features: "android-widget-DatePicker"
        #[cfg(any(feature = "all", all(feature = "android-widget-DatePicker")))]
        pub fn getDatePicker<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::widget::DatePicker>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/DatePickerDialog", java.flags == PUBLIC, .name == "getDatePicker", .descriptor == "()Landroid/widget/DatePicker;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/DatePickerDialog\0", "getDatePicker\0", "()Landroid/widget/DatePicker;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateDate](https://developer.android.com/reference/android/app/DatePickerDialog.html#updateDate(int,%20int,%20int))
        pub fn updateDate<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/DatePickerDialog", java.flags == PUBLIC, .name == "updateDate", .descriptor == "(III)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/DatePickerDialog\0", "updateDate\0", "(III)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onSaveInstanceState](https://developer.android.com/reference/android/app/DatePickerDialog.html#onSaveInstanceState())
        ///
        /// Required features: "android-os-Bundle"
        #[cfg(any(feature = "all", all(feature = "android-os-Bundle")))]
        pub fn onSaveInstanceState<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Bundle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/DatePickerDialog", java.flags == PUBLIC, .name == "onSaveInstanceState", .descriptor == "()Landroid/os/Bundle;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/DatePickerDialog\0", "onSaveInstanceState\0", "()Landroid/os/Bundle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onRestoreInstanceState](https://developer.android.com/reference/android/app/DatePickerDialog.html#onRestoreInstanceState(android.os.Bundle))
        ///
        /// Required features: "android-os-Bundle"
        #[cfg(any(feature = "all", all(feature = "android-os-Bundle")))]
        pub fn onRestoreInstanceState<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/DatePickerDialog", java.flags == PUBLIC, .name == "onRestoreInstanceState", .descriptor == "(Landroid/os/Bundle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/DatePickerDialog\0", "onRestoreInstanceState\0", "(Landroid/os/Bundle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
