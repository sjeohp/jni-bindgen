// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-app-Instrumentation_ActivityMonitor"))]
__jni_bindgen! {
    /// public class [Instrumentation.ActivityMonitor](https://developer.android.com/reference/android/app/Instrumentation.ActivityMonitor.html)
    ///
    /// Required feature: android-app-Instrumentation_ActivityMonitor
    public class Instrumentation_ActivityMonitor ("android/app/Instrumentation$ActivityMonitor") extends crate::java::lang::Object {

        /// [ActivityMonitor](https://developer.android.com/reference/android/app/Instrumentation.ActivityMonitor.html#ActivityMonitor(android.content.IntentFilter,%20android.app.Instrumentation.ActivityResult,%20boolean))
        ///
        /// Required features: "android-app-Instrumentation_ActivityResult", "android-content-IntentFilter"
        #[cfg(any(feature = "all", all(feature = "android-app-Instrumentation_ActivityResult", feature = "android-content-IntentFilter")))]
        pub fn new_IntentFilter_ActivityResult_boolean<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::IntentFilter>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Instrumentation_ActivityResult>>, arg2: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::app::Instrumentation_ActivityMonitor>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation$ActivityMonitor", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/content/IntentFilter;Landroid/app/Instrumentation$ActivityResult;Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation$ActivityMonitor\0", "<init>\0", "(Landroid/content/IntentFilter;Landroid/app/Instrumentation$ActivityResult;Z)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ActivityMonitor](https://developer.android.com/reference/android/app/Instrumentation.ActivityMonitor.html#ActivityMonitor(java.lang.String,%20android.app.Instrumentation.ActivityResult,%20boolean))
        ///
        /// Required features: "android-app-Instrumentation_ActivityResult", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-app-Instrumentation_ActivityResult", feature = "java-lang-String")))]
        pub fn new_String_ActivityResult_boolean<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Instrumentation_ActivityResult>>, arg2: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::app::Instrumentation_ActivityMonitor>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation$ActivityMonitor", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/lang/String;Landroid/app/Instrumentation$ActivityResult;Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation$ActivityMonitor\0", "<init>\0", "(Ljava/lang/String;Landroid/app/Instrumentation$ActivityResult;Z)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ActivityMonitor](https://developer.android.com/reference/android/app/Instrumentation.ActivityMonitor.html#ActivityMonitor())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::app::Instrumentation_ActivityMonitor>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation$ActivityMonitor", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation$ActivityMonitor\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFilter](https://developer.android.com/reference/android/app/Instrumentation.ActivityMonitor.html#getFilter())
        ///
        /// Required features: "android-content-IntentFilter"
        #[cfg(any(feature = "all", all(feature = "android-content-IntentFilter")))]
        pub fn getFilter<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::IntentFilter>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation$ActivityMonitor", java.flags == PUBLIC | FINAL, .name == "getFilter", .descriptor == "()Landroid/content/IntentFilter;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation$ActivityMonitor\0", "getFilter\0", "()Landroid/content/IntentFilter;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getResult](https://developer.android.com/reference/android/app/Instrumentation.ActivityMonitor.html#getResult())
        ///
        /// Required features: "android-app-Instrumentation_ActivityResult"
        #[cfg(any(feature = "all", all(feature = "android-app-Instrumentation_ActivityResult")))]
        pub fn getResult<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Instrumentation_ActivityResult>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation$ActivityMonitor", java.flags == PUBLIC | FINAL, .name == "getResult", .descriptor == "()Landroid/app/Instrumentation$ActivityResult;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation$ActivityMonitor\0", "getResult\0", "()Landroid/app/Instrumentation$ActivityResult;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isBlocking](https://developer.android.com/reference/android/app/Instrumentation.ActivityMonitor.html#isBlocking())
        pub fn isBlocking<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation$ActivityMonitor", java.flags == PUBLIC | FINAL, .name == "isBlocking", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation$ActivityMonitor\0", "isBlocking\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getHits](https://developer.android.com/reference/android/app/Instrumentation.ActivityMonitor.html#getHits())
        pub fn getHits<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation$ActivityMonitor", java.flags == PUBLIC | FINAL, .name == "getHits", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation$ActivityMonitor\0", "getHits\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLastActivity](https://developer.android.com/reference/android/app/Instrumentation.ActivityMonitor.html#getLastActivity())
        ///
        /// Required features: "android-app-Activity"
        #[cfg(any(feature = "all", all(feature = "android-app-Activity")))]
        pub fn getLastActivity<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Activity>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation$ActivityMonitor", java.flags == PUBLIC | FINAL, .name == "getLastActivity", .descriptor == "()Landroid/app/Activity;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation$ActivityMonitor\0", "getLastActivity\0", "()Landroid/app/Activity;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [waitForActivity](https://developer.android.com/reference/android/app/Instrumentation.ActivityMonitor.html#waitForActivity())
        ///
        /// Required features: "android-app-Activity"
        #[cfg(any(feature = "all", all(feature = "android-app-Activity")))]
        pub fn waitForActivity<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Activity>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation$ActivityMonitor", java.flags == PUBLIC | FINAL, .name == "waitForActivity", .descriptor == "()Landroid/app/Activity;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation$ActivityMonitor\0", "waitForActivity\0", "()Landroid/app/Activity;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [waitForActivityWithTimeout](https://developer.android.com/reference/android/app/Instrumentation.ActivityMonitor.html#waitForActivityWithTimeout(long))
        ///
        /// Required features: "android-app-Activity"
        #[cfg(any(feature = "all", all(feature = "android-app-Activity")))]
        pub fn waitForActivityWithTimeout<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Activity>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation$ActivityMonitor", java.flags == PUBLIC | FINAL, .name == "waitForActivityWithTimeout", .descriptor == "(J)Landroid/app/Activity;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation$ActivityMonitor\0", "waitForActivityWithTimeout\0", "(J)Landroid/app/Activity;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onStartActivity](https://developer.android.com/reference/android/app/Instrumentation.ActivityMonitor.html#onStartActivity(android.content.Intent))
        ///
        /// Required features: "android-app-Instrumentation_ActivityResult", "android-content-Intent"
        #[cfg(any(feature = "all", all(feature = "android-app-Instrumentation_ActivityResult", feature = "android-content-Intent")))]
        pub fn onStartActivity<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Instrumentation_ActivityResult>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation$ActivityMonitor", java.flags == PUBLIC, .name == "onStartActivity", .descriptor == "(Landroid/content/Intent;)Landroid/app/Instrumentation$ActivityResult;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation$ActivityMonitor\0", "onStartActivity\0", "(Landroid/content/Intent;)Landroid/app/Instrumentation$ActivityResult;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
