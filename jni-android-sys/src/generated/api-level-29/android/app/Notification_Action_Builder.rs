// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-app-Notification_Action_Builder"))]
__jni_bindgen! {
    /// public final class [Notification.Action.Builder](https://developer.android.com/reference/android/app/Notification.Action.Builder.html)
    ///
    /// Required feature: android-app-Notification_Action_Builder
    public final class Notification_Action_Builder ("android/app/Notification$Action$Builder") extends crate::java::lang::Object {

        /// [Builder](https://developer.android.com/reference/android/app/Notification.Action.Builder.html#Builder(int,%20java.lang.CharSequence,%20android.app.PendingIntent))
        ///
        /// Required features: "android-app-PendingIntent", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-app-PendingIntent", feature = "java-lang-CharSequence")))]
        #[deprecated] pub fn new_int_CharSequence_PendingIntent<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::PendingIntent>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::app::Notification_Action_Builder>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Action$Builder", java.flags == PUBLIC, .name == "<init>", .descriptor == "(ILjava/lang/CharSequence;Landroid/app/PendingIntent;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Action$Builder\0", "<init>\0", "(ILjava/lang/CharSequence;Landroid/app/PendingIntent;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [Builder](https://developer.android.com/reference/android/app/Notification.Action.Builder.html#Builder(android.graphics.drawable.Icon,%20java.lang.CharSequence,%20android.app.PendingIntent))
        ///
        /// Required features: "android-app-PendingIntent", "android-graphics-drawable-Icon", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-app-PendingIntent", feature = "android-graphics-drawable-Icon", feature = "java-lang-CharSequence")))]
        pub fn new_Icon_CharSequence_PendingIntent<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::drawable::Icon>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::PendingIntent>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::app::Notification_Action_Builder>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Action$Builder", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/graphics/drawable/Icon;Ljava/lang/CharSequence;Landroid/app/PendingIntent;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Action$Builder\0", "<init>\0", "(Landroid/graphics/drawable/Icon;Ljava/lang/CharSequence;Landroid/app/PendingIntent;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [Builder](https://developer.android.com/reference/android/app/Notification.Action.Builder.html#Builder(android.app.Notification.Action))
        ///
        /// Required features: "android-app-Notification_Action"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Action")))]
        pub fn new_Action<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Notification_Action>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::app::Notification_Action_Builder>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Action$Builder", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/app/Notification$Action;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Action$Builder\0", "<init>\0", "(Landroid/app/Notification$Action;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addExtras](https://developer.android.com/reference/android/app/Notification.Action.Builder.html#addExtras(android.os.Bundle))
        ///
        /// Required features: "android-app-Notification_Action_Builder", "android-os-Bundle"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Action_Builder", feature = "android-os-Bundle")))]
        pub fn addExtras<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Action_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Action$Builder", java.flags == PUBLIC, .name == "addExtras", .descriptor == "(Landroid/os/Bundle;)Landroid/app/Notification$Action$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Action$Builder\0", "addExtras\0", "(Landroid/os/Bundle;)Landroid/app/Notification$Action$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getExtras](https://developer.android.com/reference/android/app/Notification.Action.Builder.html#getExtras())
        ///
        /// Required features: "android-os-Bundle"
        #[cfg(any(feature = "all", all(feature = "android-os-Bundle")))]
        pub fn getExtras<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Bundle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Action$Builder", java.flags == PUBLIC, .name == "getExtras", .descriptor == "()Landroid/os/Bundle;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Action$Builder\0", "getExtras\0", "()Landroid/os/Bundle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addRemoteInput](https://developer.android.com/reference/android/app/Notification.Action.Builder.html#addRemoteInput(android.app.RemoteInput))
        ///
        /// Required features: "android-app-Notification_Action_Builder", "android-app-RemoteInput"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Action_Builder", feature = "android-app-RemoteInput")))]
        pub fn addRemoteInput<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::RemoteInput>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Action_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Action$Builder", java.flags == PUBLIC, .name == "addRemoteInput", .descriptor == "(Landroid/app/RemoteInput;)Landroid/app/Notification$Action$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Action$Builder\0", "addRemoteInput\0", "(Landroid/app/RemoteInput;)Landroid/app/Notification$Action$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAllowGeneratedReplies](https://developer.android.com/reference/android/app/Notification.Action.Builder.html#setAllowGeneratedReplies(boolean))
        ///
        /// Required features: "android-app-Notification_Action_Builder"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Action_Builder")))]
        pub fn setAllowGeneratedReplies<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Action_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Action$Builder", java.flags == PUBLIC, .name == "setAllowGeneratedReplies", .descriptor == "(Z)Landroid/app/Notification$Action$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Action$Builder\0", "setAllowGeneratedReplies\0", "(Z)Landroid/app/Notification$Action$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setSemanticAction](https://developer.android.com/reference/android/app/Notification.Action.Builder.html#setSemanticAction(int))
        ///
        /// Required features: "android-app-Notification_Action_Builder"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Action_Builder")))]
        pub fn setSemanticAction<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Action_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Action$Builder", java.flags == PUBLIC, .name == "setSemanticAction", .descriptor == "(I)Landroid/app/Notification$Action$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Action$Builder\0", "setSemanticAction\0", "(I)Landroid/app/Notification$Action$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setContextual](https://developer.android.com/reference/android/app/Notification.Action.Builder.html#setContextual(boolean))
        ///
        /// Required features: "android-app-Notification_Action_Builder"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Action_Builder")))]
        pub fn setContextual<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Action_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Action$Builder", java.flags == PUBLIC, .name == "setContextual", .descriptor == "(Z)Landroid/app/Notification$Action$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Action$Builder\0", "setContextual\0", "(Z)Landroid/app/Notification$Action$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [extend](https://developer.android.com/reference/android/app/Notification.Action.Builder.html#extend(android.app.Notification.Action.Extender))
        ///
        /// Required features: "android-app-Notification_Action_Builder", "android-app-Notification_Action_Extender"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Action_Builder", feature = "android-app-Notification_Action_Extender")))]
        pub fn extend<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Notification_Action_Extender>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Action_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Action$Builder", java.flags == PUBLIC, .name == "extend", .descriptor == "(Landroid/app/Notification$Action$Extender;)Landroid/app/Notification$Action$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Action$Builder\0", "extend\0", "(Landroid/app/Notification$Action$Extender;)Landroid/app/Notification$Action$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [build](https://developer.android.com/reference/android/app/Notification.Action.Builder.html#build())
        ///
        /// Required features: "android-app-Notification_Action"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Action")))]
        pub fn build<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Action>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Action$Builder", java.flags == PUBLIC, .name == "build", .descriptor == "()Landroid/app/Notification$Action;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Action$Builder\0", "build\0", "()Landroid/app/Notification$Action;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
