// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-app-TaskStackBuilder"))]
__jni_bindgen! {
    /// public class [TaskStackBuilder](https://developer.android.com/reference/android/app/TaskStackBuilder.html)
    ///
    /// Required feature: android-app-TaskStackBuilder
    public class TaskStackBuilder ("android/app/TaskStackBuilder") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [TaskStackBuilder](https://developer.android.com/reference/android/app/TaskStackBuilder.html#TaskStackBuilder(android.content.Context))
        // ///
        // /// Required features: "android-content-Context"
        // #[cfg(any(feature = "all", all(feature = "android-content-Context")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::app::TaskStackBuilder>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/app/TaskStackBuilder", java.flags == (empty), .name == "<init>", .descriptor == "(Landroid/content/Context;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/TaskStackBuilder\0", "<init>\0", "(Landroid/content/Context;)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [create](https://developer.android.com/reference/android/app/TaskStackBuilder.html#create(android.content.Context))
        ///
        /// Required features: "android-app-TaskStackBuilder", "android-content-Context"
        #[cfg(any(feature = "all", all(feature = "android-app-TaskStackBuilder", feature = "android-content-Context")))]
        pub fn create<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::TaskStackBuilder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/TaskStackBuilder", java.flags == PUBLIC | STATIC, .name == "create", .descriptor == "(Landroid/content/Context;)Landroid/app/TaskStackBuilder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/app/TaskStackBuilder\0", "create\0", "(Landroid/content/Context;)Landroid/app/TaskStackBuilder;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addNextIntent](https://developer.android.com/reference/android/app/TaskStackBuilder.html#addNextIntent(android.content.Intent))
        ///
        /// Required features: "android-app-TaskStackBuilder", "android-content-Intent"
        #[cfg(any(feature = "all", all(feature = "android-app-TaskStackBuilder", feature = "android-content-Intent")))]
        pub fn addNextIntent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::TaskStackBuilder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/TaskStackBuilder", java.flags == PUBLIC, .name == "addNextIntent", .descriptor == "(Landroid/content/Intent;)Landroid/app/TaskStackBuilder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/TaskStackBuilder\0", "addNextIntent\0", "(Landroid/content/Intent;)Landroid/app/TaskStackBuilder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addNextIntentWithParentStack](https://developer.android.com/reference/android/app/TaskStackBuilder.html#addNextIntentWithParentStack(android.content.Intent))
        ///
        /// Required features: "android-app-TaskStackBuilder", "android-content-Intent"
        #[cfg(any(feature = "all", all(feature = "android-app-TaskStackBuilder", feature = "android-content-Intent")))]
        pub fn addNextIntentWithParentStack<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::TaskStackBuilder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/TaskStackBuilder", java.flags == PUBLIC, .name == "addNextIntentWithParentStack", .descriptor == "(Landroid/content/Intent;)Landroid/app/TaskStackBuilder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/TaskStackBuilder\0", "addNextIntentWithParentStack\0", "(Landroid/content/Intent;)Landroid/app/TaskStackBuilder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addParentStack](https://developer.android.com/reference/android/app/TaskStackBuilder.html#addParentStack(android.app.Activity))
        ///
        /// Required features: "android-app-Activity", "android-app-TaskStackBuilder"
        #[cfg(any(feature = "all", all(feature = "android-app-Activity", feature = "android-app-TaskStackBuilder")))]
        pub fn addParentStack_Activity<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Activity>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::TaskStackBuilder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/TaskStackBuilder", java.flags == PUBLIC, .name == "addParentStack", .descriptor == "(Landroid/app/Activity;)Landroid/app/TaskStackBuilder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/TaskStackBuilder\0", "addParentStack\0", "(Landroid/app/Activity;)Landroid/app/TaskStackBuilder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addParentStack](https://developer.android.com/reference/android/app/TaskStackBuilder.html#addParentStack(java.lang.Class))
        ///
        /// Required features: "android-app-TaskStackBuilder", "java-lang-Class"
        #[cfg(any(feature = "all", all(feature = "android-app-TaskStackBuilder", feature = "java-lang-Class")))]
        pub fn addParentStack_Class<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::TaskStackBuilder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/TaskStackBuilder", java.flags == PUBLIC, .name == "addParentStack", .descriptor == "(Ljava/lang/Class;)Landroid/app/TaskStackBuilder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/TaskStackBuilder\0", "addParentStack\0", "(Ljava/lang/Class;)Landroid/app/TaskStackBuilder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addParentStack](https://developer.android.com/reference/android/app/TaskStackBuilder.html#addParentStack(android.content.ComponentName))
        ///
        /// Required features: "android-app-TaskStackBuilder", "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-app-TaskStackBuilder", feature = "android-content-ComponentName")))]
        pub fn addParentStack_ComponentName<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::TaskStackBuilder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/TaskStackBuilder", java.flags == PUBLIC, .name == "addParentStack", .descriptor == "(Landroid/content/ComponentName;)Landroid/app/TaskStackBuilder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/TaskStackBuilder\0", "addParentStack\0", "(Landroid/content/ComponentName;)Landroid/app/TaskStackBuilder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getIntentCount](https://developer.android.com/reference/android/app/TaskStackBuilder.html#getIntentCount())
        pub fn getIntentCount<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/TaskStackBuilder", java.flags == PUBLIC, .name == "getIntentCount", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/TaskStackBuilder\0", "getIntentCount\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [editIntentAt](https://developer.android.com/reference/android/app/TaskStackBuilder.html#editIntentAt(int))
        ///
        /// Required features: "android-content-Intent"
        #[cfg(any(feature = "all", all(feature = "android-content-Intent")))]
        pub fn editIntentAt<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::Intent>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/TaskStackBuilder", java.flags == PUBLIC, .name == "editIntentAt", .descriptor == "(I)Landroid/content/Intent;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/TaskStackBuilder\0", "editIntentAt\0", "(I)Landroid/content/Intent;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [startActivities](https://developer.android.com/reference/android/app/TaskStackBuilder.html#startActivities())
        pub fn startActivities<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/TaskStackBuilder", java.flags == PUBLIC, .name == "startActivities", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/TaskStackBuilder\0", "startActivities\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [startActivities](https://developer.android.com/reference/android/app/TaskStackBuilder.html#startActivities(android.os.Bundle))
        ///
        /// Required features: "android-os-Bundle"
        #[cfg(any(feature = "all", all(feature = "android-os-Bundle")))]
        pub fn startActivities_Bundle<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/TaskStackBuilder", java.flags == PUBLIC, .name == "startActivities", .descriptor == "(Landroid/os/Bundle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/TaskStackBuilder\0", "startActivities\0", "(Landroid/os/Bundle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPendingIntent](https://developer.android.com/reference/android/app/TaskStackBuilder.html#getPendingIntent(int,%20int))
        ///
        /// Required features: "android-app-PendingIntent"
        #[cfg(any(feature = "all", all(feature = "android-app-PendingIntent")))]
        pub fn getPendingIntent_int_int<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::PendingIntent>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/TaskStackBuilder", java.flags == PUBLIC, .name == "getPendingIntent", .descriptor == "(II)Landroid/app/PendingIntent;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/TaskStackBuilder\0", "getPendingIntent\0", "(II)Landroid/app/PendingIntent;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPendingIntent](https://developer.android.com/reference/android/app/TaskStackBuilder.html#getPendingIntent(int,%20int,%20android.os.Bundle))
        ///
        /// Required features: "android-app-PendingIntent", "android-os-Bundle"
        #[cfg(any(feature = "all", all(feature = "android-app-PendingIntent", feature = "android-os-Bundle")))]
        pub fn getPendingIntent_int_int_Bundle<'env>(&'env self, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::PendingIntent>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/TaskStackBuilder", java.flags == PUBLIC, .name == "getPendingIntent", .descriptor == "(IILandroid/os/Bundle;)Landroid/app/PendingIntent;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/TaskStackBuilder\0", "getPendingIntent\0", "(IILandroid/os/Bundle;)Landroid/app/PendingIntent;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getIntents](https://developer.android.com/reference/android/app/TaskStackBuilder.html#getIntents())
        ///
        /// Required features: "android-content-Intent"
        #[cfg(any(feature = "all", all(feature = "android-content-Intent")))]
        pub fn getIntents<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::android::content::Intent, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/TaskStackBuilder", java.flags == PUBLIC, .name == "getIntents", .descriptor == "()[Landroid/content/Intent;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/TaskStackBuilder\0", "getIntents\0", "()[Landroid/content/Intent;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
