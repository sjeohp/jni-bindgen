// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-app-UiAutomation"))]
__jni_bindgen! {
    /// public final class [UiAutomation](https://developer.android.com/reference/android/app/UiAutomation.html)
    ///
    /// Required feature: android-app-UiAutomation
    public final class UiAutomation ("android/app/UiAutomation") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [UiAutomation](https://developer.android.com/reference/android/app/UiAutomation.html#UiAutomation())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::app::UiAutomation>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/app/UiAutomation", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/UiAutomation\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [setOnAccessibilityEventListener](https://developer.android.com/reference/android/app/UiAutomation.html#setOnAccessibilityEventListener(android.app.UiAutomation.OnAccessibilityEventListener))
        ///
        /// Required features: "android-app-UiAutomation_OnAccessibilityEventListener"
        #[cfg(any(feature = "all", all(feature = "android-app-UiAutomation_OnAccessibilityEventListener")))]
        pub fn setOnAccessibilityEventListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::UiAutomation_OnAccessibilityEventListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/UiAutomation", java.flags == PUBLIC, .name == "setOnAccessibilityEventListener", .descriptor == "(Landroid/app/UiAutomation$OnAccessibilityEventListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/UiAutomation\0", "setOnAccessibilityEventListener\0", "(Landroid/app/UiAutomation$OnAccessibilityEventListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [adoptShellPermissionIdentity](https://developer.android.com/reference/android/app/UiAutomation.html#adoptShellPermissionIdentity())
        pub fn adoptShellPermissionIdentity<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/UiAutomation", java.flags == PUBLIC, .name == "adoptShellPermissionIdentity", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/UiAutomation\0", "adoptShellPermissionIdentity\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [adoptShellPermissionIdentity](https://developer.android.com/reference/android/app/UiAutomation.html#adoptShellPermissionIdentity(java.lang.String...))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn adoptShellPermissionIdentity_String_array<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/UiAutomation", java.flags == PUBLIC | VARARGS, .name == "adoptShellPermissionIdentity", .descriptor == "([Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/UiAutomation\0", "adoptShellPermissionIdentity\0", "([Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dropShellPermissionIdentity](https://developer.android.com/reference/android/app/UiAutomation.html#dropShellPermissionIdentity())
        pub fn dropShellPermissionIdentity<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/UiAutomation", java.flags == PUBLIC, .name == "dropShellPermissionIdentity", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/UiAutomation\0", "dropShellPermissionIdentity\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [performGlobalAction](https://developer.android.com/reference/android/app/UiAutomation.html#performGlobalAction(int))
        pub fn performGlobalAction<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/UiAutomation", java.flags == PUBLIC, .name == "performGlobalAction", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/UiAutomation\0", "performGlobalAction\0", "(I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [findFocus](https://developer.android.com/reference/android/app/UiAutomation.html#findFocus(int))
        ///
        /// Required features: "android-view-accessibility-AccessibilityNodeInfo"
        #[cfg(any(feature = "all", all(feature = "android-view-accessibility-AccessibilityNodeInfo")))]
        pub fn findFocus<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::accessibility::AccessibilityNodeInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/UiAutomation", java.flags == PUBLIC, .name == "findFocus", .descriptor == "(I)Landroid/view/accessibility/AccessibilityNodeInfo;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/UiAutomation\0", "findFocus\0", "(I)Landroid/view/accessibility/AccessibilityNodeInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getServiceInfo](https://developer.android.com/reference/android/app/UiAutomation.html#getServiceInfo())
        ///
        /// Required features: "android-accessibilityservice-AccessibilityServiceInfo"
        #[cfg(any(feature = "all", all(feature = "android-accessibilityservice-AccessibilityServiceInfo")))]
        pub fn getServiceInfo<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::accessibilityservice::AccessibilityServiceInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/UiAutomation", java.flags == PUBLIC, .name == "getServiceInfo", .descriptor == "()Landroid/accessibilityservice/AccessibilityServiceInfo;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/UiAutomation\0", "getServiceInfo\0", "()Landroid/accessibilityservice/AccessibilityServiceInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setServiceInfo](https://developer.android.com/reference/android/app/UiAutomation.html#setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo))
        ///
        /// Required features: "android-accessibilityservice-AccessibilityServiceInfo"
        #[cfg(any(feature = "all", all(feature = "android-accessibilityservice-AccessibilityServiceInfo")))]
        pub fn setServiceInfo<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accessibilityservice::AccessibilityServiceInfo>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/UiAutomation", java.flags == PUBLIC, .name == "setServiceInfo", .descriptor == "(Landroid/accessibilityservice/AccessibilityServiceInfo;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/UiAutomation\0", "setServiceInfo\0", "(Landroid/accessibilityservice/AccessibilityServiceInfo;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getWindows](https://developer.android.com/reference/android/app/UiAutomation.html#getWindows())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getWindows<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/UiAutomation", java.flags == PUBLIC, .name == "getWindows", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/UiAutomation\0", "getWindows\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRootInActiveWindow](https://developer.android.com/reference/android/app/UiAutomation.html#getRootInActiveWindow())
        ///
        /// Required features: "android-view-accessibility-AccessibilityNodeInfo"
        #[cfg(any(feature = "all", all(feature = "android-view-accessibility-AccessibilityNodeInfo")))]
        pub fn getRootInActiveWindow<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::accessibility::AccessibilityNodeInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/UiAutomation", java.flags == PUBLIC, .name == "getRootInActiveWindow", .descriptor == "()Landroid/view/accessibility/AccessibilityNodeInfo;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/UiAutomation\0", "getRootInActiveWindow\0", "()Landroid/view/accessibility/AccessibilityNodeInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [injectInputEvent](https://developer.android.com/reference/android/app/UiAutomation.html#injectInputEvent(android.view.InputEvent,%20boolean))
        ///
        /// Required features: "android-view-InputEvent"
        #[cfg(any(feature = "all", all(feature = "android-view-InputEvent")))]
        pub fn injectInputEvent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::InputEvent>>, arg1: bool) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/UiAutomation", java.flags == PUBLIC, .name == "injectInputEvent", .descriptor == "(Landroid/view/InputEvent;Z)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/UiAutomation\0", "injectInputEvent\0", "(Landroid/view/InputEvent;Z)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setRotation](https://developer.android.com/reference/android/app/UiAutomation.html#setRotation(int))
        pub fn setRotation<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/UiAutomation", java.flags == PUBLIC, .name == "setRotation", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/UiAutomation\0", "setRotation\0", "(I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [executeAndWaitForEvent](https://developer.android.com/reference/android/app/UiAutomation.html#executeAndWaitForEvent(java.lang.Runnable,%20android.app.UiAutomation.AccessibilityEventFilter,%20long))
        ///
        /// Required features: "android-app-UiAutomation_AccessibilityEventFilter", "android-view-accessibility-AccessibilityEvent", "java-lang-Runnable"
        #[cfg(any(feature = "all", all(feature = "android-app-UiAutomation_AccessibilityEventFilter", feature = "android-view-accessibility-AccessibilityEvent", feature = "java-lang-Runnable")))]
        pub fn executeAndWaitForEvent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Runnable>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::UiAutomation_AccessibilityEventFilter>>, arg2: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::accessibility::AccessibilityEvent>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/UiAutomation", java.flags == PUBLIC, .name == "executeAndWaitForEvent", .descriptor == "(Ljava/lang/Runnable;Landroid/app/UiAutomation$AccessibilityEventFilter;J)Landroid/view/accessibility/AccessibilityEvent;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/UiAutomation\0", "executeAndWaitForEvent\0", "(Ljava/lang/Runnable;Landroid/app/UiAutomation$AccessibilityEventFilter;J)Landroid/view/accessibility/AccessibilityEvent;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [waitForIdle](https://developer.android.com/reference/android/app/UiAutomation.html#waitForIdle(long,%20long))
        pub fn waitForIdle<'env>(&'env self, arg0: i64, arg1: i64) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/UiAutomation", java.flags == PUBLIC, .name == "waitForIdle", .descriptor == "(JJ)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/UiAutomation\0", "waitForIdle\0", "(JJ)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [takeScreenshot](https://developer.android.com/reference/android/app/UiAutomation.html#takeScreenshot())
        ///
        /// Required features: "android-graphics-Bitmap"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Bitmap")))]
        pub fn takeScreenshot<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Bitmap>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/UiAutomation", java.flags == PUBLIC, .name == "takeScreenshot", .descriptor == "()Landroid/graphics/Bitmap;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/UiAutomation\0", "takeScreenshot\0", "()Landroid/graphics/Bitmap;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setRunAsMonkey](https://developer.android.com/reference/android/app/UiAutomation.html#setRunAsMonkey(boolean))
        pub fn setRunAsMonkey<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/UiAutomation", java.flags == PUBLIC, .name == "setRunAsMonkey", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/UiAutomation\0", "setRunAsMonkey\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clearWindowContentFrameStats](https://developer.android.com/reference/android/app/UiAutomation.html#clearWindowContentFrameStats(int))
        pub fn clearWindowContentFrameStats<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/UiAutomation", java.flags == PUBLIC, .name == "clearWindowContentFrameStats", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/UiAutomation\0", "clearWindowContentFrameStats\0", "(I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getWindowContentFrameStats](https://developer.android.com/reference/android/app/UiAutomation.html#getWindowContentFrameStats(int))
        ///
        /// Required features: "android-view-WindowContentFrameStats"
        #[cfg(any(feature = "all", all(feature = "android-view-WindowContentFrameStats")))]
        pub fn getWindowContentFrameStats<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::WindowContentFrameStats>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/UiAutomation", java.flags == PUBLIC, .name == "getWindowContentFrameStats", .descriptor == "(I)Landroid/view/WindowContentFrameStats;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/UiAutomation\0", "getWindowContentFrameStats\0", "(I)Landroid/view/WindowContentFrameStats;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clearWindowAnimationFrameStats](https://developer.android.com/reference/android/app/UiAutomation.html#clearWindowAnimationFrameStats())
        pub fn clearWindowAnimationFrameStats<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/UiAutomation", java.flags == PUBLIC, .name == "clearWindowAnimationFrameStats", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/UiAutomation\0", "clearWindowAnimationFrameStats\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getWindowAnimationFrameStats](https://developer.android.com/reference/android/app/UiAutomation.html#getWindowAnimationFrameStats())
        ///
        /// Required features: "android-view-WindowAnimationFrameStats"
        #[cfg(any(feature = "all", all(feature = "android-view-WindowAnimationFrameStats")))]
        pub fn getWindowAnimationFrameStats<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::WindowAnimationFrameStats>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/UiAutomation", java.flags == PUBLIC, .name == "getWindowAnimationFrameStats", .descriptor == "()Landroid/view/WindowAnimationFrameStats;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/UiAutomation\0", "getWindowAnimationFrameStats\0", "()Landroid/view/WindowAnimationFrameStats;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [grantRuntimePermission](https://developer.android.com/reference/android/app/UiAutomation.html#grantRuntimePermission(java.lang.String,%20java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn grantRuntimePermission<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/UiAutomation", java.flags == PUBLIC, .name == "grantRuntimePermission", .descriptor == "(Ljava/lang/String;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/UiAutomation\0", "grantRuntimePermission\0", "(Ljava/lang/String;Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [grantRuntimePermissionAsUser](https://developer.android.com/reference/android/app/UiAutomation.html#grantRuntimePermissionAsUser(java.lang.String,%20java.lang.String,%20android.os.UserHandle))
        ///
        /// Required features: "android-os-UserHandle", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-os-UserHandle", feature = "java-lang-String")))]
        pub fn grantRuntimePermissionAsUser<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::UserHandle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/UiAutomation", java.flags == PUBLIC, .name == "grantRuntimePermissionAsUser", .descriptor == "(Ljava/lang/String;Ljava/lang/String;Landroid/os/UserHandle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/UiAutomation\0", "grantRuntimePermissionAsUser\0", "(Ljava/lang/String;Ljava/lang/String;Landroid/os/UserHandle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [revokeRuntimePermission](https://developer.android.com/reference/android/app/UiAutomation.html#revokeRuntimePermission(java.lang.String,%20java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn revokeRuntimePermission<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/UiAutomation", java.flags == PUBLIC, .name == "revokeRuntimePermission", .descriptor == "(Ljava/lang/String;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/UiAutomation\0", "revokeRuntimePermission\0", "(Ljava/lang/String;Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [revokeRuntimePermissionAsUser](https://developer.android.com/reference/android/app/UiAutomation.html#revokeRuntimePermissionAsUser(java.lang.String,%20java.lang.String,%20android.os.UserHandle))
        ///
        /// Required features: "android-os-UserHandle", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-os-UserHandle", feature = "java-lang-String")))]
        pub fn revokeRuntimePermissionAsUser<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::UserHandle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/UiAutomation", java.flags == PUBLIC, .name == "revokeRuntimePermissionAsUser", .descriptor == "(Ljava/lang/String;Ljava/lang/String;Landroid/os/UserHandle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/UiAutomation\0", "revokeRuntimePermissionAsUser\0", "(Ljava/lang/String;Ljava/lang/String;Landroid/os/UserHandle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [executeShellCommand](https://developer.android.com/reference/android/app/UiAutomation.html#executeShellCommand(java.lang.String))
        ///
        /// Required features: "android-os-ParcelFileDescriptor", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-os-ParcelFileDescriptor", feature = "java-lang-String")))]
        pub fn executeShellCommand<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::ParcelFileDescriptor>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/UiAutomation", java.flags == PUBLIC, .name == "executeShellCommand", .descriptor == "(Ljava/lang/String;)Landroid/os/ParcelFileDescriptor;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/UiAutomation\0", "executeShellCommand\0", "(Ljava/lang/String;)Landroid/os/ParcelFileDescriptor;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [FLAG_DONT_SUPPRESS_ACCESSIBILITY_SERVICES](https://developer.android.com/reference/android/app/UiAutomation.html#FLAG_DONT_SUPPRESS_ACCESSIBILITY_SERVICES)
        pub const FLAG_DONT_SUPPRESS_ACCESSIBILITY_SERVICES : i32 = 1;

        /// public static final [ROTATION_FREEZE_0](https://developer.android.com/reference/android/app/UiAutomation.html#ROTATION_FREEZE_0)
        pub const ROTATION_FREEZE_0 : i32 = 0;

        /// public static final [ROTATION_FREEZE_180](https://developer.android.com/reference/android/app/UiAutomation.html#ROTATION_FREEZE_180)
        pub const ROTATION_FREEZE_180 : i32 = 2;

        /// public static final [ROTATION_FREEZE_270](https://developer.android.com/reference/android/app/UiAutomation.html#ROTATION_FREEZE_270)
        pub const ROTATION_FREEZE_270 : i32 = 3;

        /// public static final [ROTATION_FREEZE_90](https://developer.android.com/reference/android/app/UiAutomation.html#ROTATION_FREEZE_90)
        pub const ROTATION_FREEZE_90 : i32 = 1;

        /// public static final [ROTATION_FREEZE_CURRENT](https://developer.android.com/reference/android/app/UiAutomation.html#ROTATION_FREEZE_CURRENT)
        pub const ROTATION_FREEZE_CURRENT : i32 = -1;

        /// public static final [ROTATION_UNFREEZE](https://developer.android.com/reference/android/app/UiAutomation.html#ROTATION_UNFREEZE)
        pub const ROTATION_UNFREEZE : i32 = -2;
    }
}
