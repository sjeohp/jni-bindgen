// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-app-job-JobInfo_Builder"))]
__jni_bindgen! {
    /// public final class [JobInfo.Builder](https://developer.android.com/reference/android/app/job/JobInfo.Builder.html)
    ///
    /// Required feature: android-app-job-JobInfo_Builder
    public final class JobInfo_Builder ("android/app/job/JobInfo$Builder") extends crate::java::lang::Object {

        /// [Builder](https://developer.android.com/reference/android/app/job/JobInfo.Builder.html#Builder(int,%20android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::app::job::JobInfo_Builder>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/job/JobInfo$Builder", java.flags == PUBLIC, .name == "<init>", .descriptor == "(ILandroid/content/ComponentName;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/job/JobInfo$Builder\0", "<init>\0", "(ILandroid/content/ComponentName;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setExtras](https://developer.android.com/reference/android/app/job/JobInfo.Builder.html#setExtras(android.os.PersistableBundle))
        ///
        /// Required features: "android-app-job-JobInfo_Builder", "android-os-PersistableBundle"
        #[cfg(any(feature = "all", all(feature = "android-app-job-JobInfo_Builder", feature = "android-os-PersistableBundle")))]
        pub fn setExtras<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::PersistableBundle>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::job::JobInfo_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/job/JobInfo$Builder", java.flags == PUBLIC, .name == "setExtras", .descriptor == "(Landroid/os/PersistableBundle;)Landroid/app/job/JobInfo$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/job/JobInfo$Builder\0", "setExtras\0", "(Landroid/os/PersistableBundle;)Landroid/app/job/JobInfo$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTransientExtras](https://developer.android.com/reference/android/app/job/JobInfo.Builder.html#setTransientExtras(android.os.Bundle))
        ///
        /// Required features: "android-app-job-JobInfo_Builder", "android-os-Bundle"
        #[cfg(any(feature = "all", all(feature = "android-app-job-JobInfo_Builder", feature = "android-os-Bundle")))]
        pub fn setTransientExtras<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::job::JobInfo_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/job/JobInfo$Builder", java.flags == PUBLIC, .name == "setTransientExtras", .descriptor == "(Landroid/os/Bundle;)Landroid/app/job/JobInfo$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/job/JobInfo$Builder\0", "setTransientExtras\0", "(Landroid/os/Bundle;)Landroid/app/job/JobInfo$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setClipData](https://developer.android.com/reference/android/app/job/JobInfo.Builder.html#setClipData(android.content.ClipData,%20int))
        ///
        /// Required features: "android-app-job-JobInfo_Builder", "android-content-ClipData"
        #[cfg(any(feature = "all", all(feature = "android-app-job-JobInfo_Builder", feature = "android-content-ClipData")))]
        pub fn setClipData<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ClipData>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::job::JobInfo_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/job/JobInfo$Builder", java.flags == PUBLIC, .name == "setClipData", .descriptor == "(Landroid/content/ClipData;I)Landroid/app/job/JobInfo$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/job/JobInfo$Builder\0", "setClipData\0", "(Landroid/content/ClipData;I)Landroid/app/job/JobInfo$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setRequiredNetworkType](https://developer.android.com/reference/android/app/job/JobInfo.Builder.html#setRequiredNetworkType(int))
        ///
        /// Required features: "android-app-job-JobInfo_Builder"
        #[cfg(any(feature = "all", all(feature = "android-app-job-JobInfo_Builder")))]
        pub fn setRequiredNetworkType<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::job::JobInfo_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/job/JobInfo$Builder", java.flags == PUBLIC, .name == "setRequiredNetworkType", .descriptor == "(I)Landroid/app/job/JobInfo$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/job/JobInfo$Builder\0", "setRequiredNetworkType\0", "(I)Landroid/app/job/JobInfo$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setRequiredNetwork](https://developer.android.com/reference/android/app/job/JobInfo.Builder.html#setRequiredNetwork(android.net.NetworkRequest))
        ///
        /// Required features: "android-app-job-JobInfo_Builder", "android-net-NetworkRequest"
        #[cfg(any(feature = "all", all(feature = "android-app-job-JobInfo_Builder", feature = "android-net-NetworkRequest")))]
        pub fn setRequiredNetwork<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::NetworkRequest>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::job::JobInfo_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/job/JobInfo$Builder", java.flags == PUBLIC, .name == "setRequiredNetwork", .descriptor == "(Landroid/net/NetworkRequest;)Landroid/app/job/JobInfo$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/job/JobInfo$Builder\0", "setRequiredNetwork\0", "(Landroid/net/NetworkRequest;)Landroid/app/job/JobInfo$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setEstimatedNetworkBytes](https://developer.android.com/reference/android/app/job/JobInfo.Builder.html#setEstimatedNetworkBytes(long,%20long))
        ///
        /// Required features: "android-app-job-JobInfo_Builder"
        #[cfg(any(feature = "all", all(feature = "android-app-job-JobInfo_Builder")))]
        pub fn setEstimatedNetworkBytes<'env>(&'env self, arg0: i64, arg1: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::job::JobInfo_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/job/JobInfo$Builder", java.flags == PUBLIC, .name == "setEstimatedNetworkBytes", .descriptor == "(JJ)Landroid/app/job/JobInfo$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/job/JobInfo$Builder\0", "setEstimatedNetworkBytes\0", "(JJ)Landroid/app/job/JobInfo$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setRequiresCharging](https://developer.android.com/reference/android/app/job/JobInfo.Builder.html#setRequiresCharging(boolean))
        ///
        /// Required features: "android-app-job-JobInfo_Builder"
        #[cfg(any(feature = "all", all(feature = "android-app-job-JobInfo_Builder")))]
        pub fn setRequiresCharging<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::job::JobInfo_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/job/JobInfo$Builder", java.flags == PUBLIC, .name == "setRequiresCharging", .descriptor == "(Z)Landroid/app/job/JobInfo$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/job/JobInfo$Builder\0", "setRequiresCharging\0", "(Z)Landroid/app/job/JobInfo$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setRequiresBatteryNotLow](https://developer.android.com/reference/android/app/job/JobInfo.Builder.html#setRequiresBatteryNotLow(boolean))
        ///
        /// Required features: "android-app-job-JobInfo_Builder"
        #[cfg(any(feature = "all", all(feature = "android-app-job-JobInfo_Builder")))]
        pub fn setRequiresBatteryNotLow<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::job::JobInfo_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/job/JobInfo$Builder", java.flags == PUBLIC, .name == "setRequiresBatteryNotLow", .descriptor == "(Z)Landroid/app/job/JobInfo$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/job/JobInfo$Builder\0", "setRequiresBatteryNotLow\0", "(Z)Landroid/app/job/JobInfo$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setRequiresDeviceIdle](https://developer.android.com/reference/android/app/job/JobInfo.Builder.html#setRequiresDeviceIdle(boolean))
        ///
        /// Required features: "android-app-job-JobInfo_Builder"
        #[cfg(any(feature = "all", all(feature = "android-app-job-JobInfo_Builder")))]
        pub fn setRequiresDeviceIdle<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::job::JobInfo_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/job/JobInfo$Builder", java.flags == PUBLIC, .name == "setRequiresDeviceIdle", .descriptor == "(Z)Landroid/app/job/JobInfo$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/job/JobInfo$Builder\0", "setRequiresDeviceIdle\0", "(Z)Landroid/app/job/JobInfo$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setRequiresStorageNotLow](https://developer.android.com/reference/android/app/job/JobInfo.Builder.html#setRequiresStorageNotLow(boolean))
        ///
        /// Required features: "android-app-job-JobInfo_Builder"
        #[cfg(any(feature = "all", all(feature = "android-app-job-JobInfo_Builder")))]
        pub fn setRequiresStorageNotLow<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::job::JobInfo_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/job/JobInfo$Builder", java.flags == PUBLIC, .name == "setRequiresStorageNotLow", .descriptor == "(Z)Landroid/app/job/JobInfo$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/job/JobInfo$Builder\0", "setRequiresStorageNotLow\0", "(Z)Landroid/app/job/JobInfo$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addTriggerContentUri](https://developer.android.com/reference/android/app/job/JobInfo.Builder.html#addTriggerContentUri(android.app.job.JobInfo.TriggerContentUri))
        ///
        /// Required features: "android-app-job-JobInfo_Builder", "android-app-job-JobInfo_TriggerContentUri"
        #[cfg(any(feature = "all", all(feature = "android-app-job-JobInfo_Builder", feature = "android-app-job-JobInfo_TriggerContentUri")))]
        pub fn addTriggerContentUri<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::job::JobInfo_TriggerContentUri>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::job::JobInfo_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/job/JobInfo$Builder", java.flags == PUBLIC, .name == "addTriggerContentUri", .descriptor == "(Landroid/app/job/JobInfo$TriggerContentUri;)Landroid/app/job/JobInfo$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/job/JobInfo$Builder\0", "addTriggerContentUri\0", "(Landroid/app/job/JobInfo$TriggerContentUri;)Landroid/app/job/JobInfo$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTriggerContentUpdateDelay](https://developer.android.com/reference/android/app/job/JobInfo.Builder.html#setTriggerContentUpdateDelay(long))
        ///
        /// Required features: "android-app-job-JobInfo_Builder"
        #[cfg(any(feature = "all", all(feature = "android-app-job-JobInfo_Builder")))]
        pub fn setTriggerContentUpdateDelay<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::job::JobInfo_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/job/JobInfo$Builder", java.flags == PUBLIC, .name == "setTriggerContentUpdateDelay", .descriptor == "(J)Landroid/app/job/JobInfo$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/job/JobInfo$Builder\0", "setTriggerContentUpdateDelay\0", "(J)Landroid/app/job/JobInfo$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTriggerContentMaxDelay](https://developer.android.com/reference/android/app/job/JobInfo.Builder.html#setTriggerContentMaxDelay(long))
        ///
        /// Required features: "android-app-job-JobInfo_Builder"
        #[cfg(any(feature = "all", all(feature = "android-app-job-JobInfo_Builder")))]
        pub fn setTriggerContentMaxDelay<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::job::JobInfo_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/job/JobInfo$Builder", java.flags == PUBLIC, .name == "setTriggerContentMaxDelay", .descriptor == "(J)Landroid/app/job/JobInfo$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/job/JobInfo$Builder\0", "setTriggerContentMaxDelay\0", "(J)Landroid/app/job/JobInfo$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPeriodic](https://developer.android.com/reference/android/app/job/JobInfo.Builder.html#setPeriodic(long))
        ///
        /// Required features: "android-app-job-JobInfo_Builder"
        #[cfg(any(feature = "all", all(feature = "android-app-job-JobInfo_Builder")))]
        pub fn setPeriodic_long<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::job::JobInfo_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/job/JobInfo$Builder", java.flags == PUBLIC, .name == "setPeriodic", .descriptor == "(J)Landroid/app/job/JobInfo$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/job/JobInfo$Builder\0", "setPeriodic\0", "(J)Landroid/app/job/JobInfo$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPeriodic](https://developer.android.com/reference/android/app/job/JobInfo.Builder.html#setPeriodic(long,%20long))
        ///
        /// Required features: "android-app-job-JobInfo_Builder"
        #[cfg(any(feature = "all", all(feature = "android-app-job-JobInfo_Builder")))]
        pub fn setPeriodic_long_long<'env>(&'env self, arg0: i64, arg1: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::job::JobInfo_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/job/JobInfo$Builder", java.flags == PUBLIC, .name == "setPeriodic", .descriptor == "(JJ)Landroid/app/job/JobInfo$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/job/JobInfo$Builder\0", "setPeriodic\0", "(JJ)Landroid/app/job/JobInfo$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setMinimumLatency](https://developer.android.com/reference/android/app/job/JobInfo.Builder.html#setMinimumLatency(long))
        ///
        /// Required features: "android-app-job-JobInfo_Builder"
        #[cfg(any(feature = "all", all(feature = "android-app-job-JobInfo_Builder")))]
        pub fn setMinimumLatency<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::job::JobInfo_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/job/JobInfo$Builder", java.flags == PUBLIC, .name == "setMinimumLatency", .descriptor == "(J)Landroid/app/job/JobInfo$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/job/JobInfo$Builder\0", "setMinimumLatency\0", "(J)Landroid/app/job/JobInfo$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOverrideDeadline](https://developer.android.com/reference/android/app/job/JobInfo.Builder.html#setOverrideDeadline(long))
        ///
        /// Required features: "android-app-job-JobInfo_Builder"
        #[cfg(any(feature = "all", all(feature = "android-app-job-JobInfo_Builder")))]
        pub fn setOverrideDeadline<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::job::JobInfo_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/job/JobInfo$Builder", java.flags == PUBLIC, .name == "setOverrideDeadline", .descriptor == "(J)Landroid/app/job/JobInfo$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/job/JobInfo$Builder\0", "setOverrideDeadline\0", "(J)Landroid/app/job/JobInfo$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setBackoffCriteria](https://developer.android.com/reference/android/app/job/JobInfo.Builder.html#setBackoffCriteria(long,%20int))
        ///
        /// Required features: "android-app-job-JobInfo_Builder"
        #[cfg(any(feature = "all", all(feature = "android-app-job-JobInfo_Builder")))]
        pub fn setBackoffCriteria<'env>(&'env self, arg0: i64, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::job::JobInfo_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/job/JobInfo$Builder", java.flags == PUBLIC, .name == "setBackoffCriteria", .descriptor == "(JI)Landroid/app/job/JobInfo$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/job/JobInfo$Builder\0", "setBackoffCriteria\0", "(JI)Landroid/app/job/JobInfo$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setImportantWhileForeground](https://developer.android.com/reference/android/app/job/JobInfo.Builder.html#setImportantWhileForeground(boolean))
        ///
        /// Required features: "android-app-job-JobInfo_Builder"
        #[cfg(any(feature = "all", all(feature = "android-app-job-JobInfo_Builder")))]
        pub fn setImportantWhileForeground<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::job::JobInfo_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/job/JobInfo$Builder", java.flags == PUBLIC, .name == "setImportantWhileForeground", .descriptor == "(Z)Landroid/app/job/JobInfo$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/job/JobInfo$Builder\0", "setImportantWhileForeground\0", "(Z)Landroid/app/job/JobInfo$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPrefetch](https://developer.android.com/reference/android/app/job/JobInfo.Builder.html#setPrefetch(boolean))
        ///
        /// Required features: "android-app-job-JobInfo_Builder"
        #[cfg(any(feature = "all", all(feature = "android-app-job-JobInfo_Builder")))]
        pub fn setPrefetch<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::job::JobInfo_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/job/JobInfo$Builder", java.flags == PUBLIC, .name == "setPrefetch", .descriptor == "(Z)Landroid/app/job/JobInfo$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/job/JobInfo$Builder\0", "setPrefetch\0", "(Z)Landroid/app/job/JobInfo$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPersisted](https://developer.android.com/reference/android/app/job/JobInfo.Builder.html#setPersisted(boolean))
        ///
        /// Required features: "android-app-job-JobInfo_Builder"
        #[cfg(any(feature = "all", all(feature = "android-app-job-JobInfo_Builder")))]
        pub fn setPersisted<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::job::JobInfo_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/job/JobInfo$Builder", java.flags == PUBLIC, .name == "setPersisted", .descriptor == "(Z)Landroid/app/job/JobInfo$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/job/JobInfo$Builder\0", "setPersisted\0", "(Z)Landroid/app/job/JobInfo$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [build](https://developer.android.com/reference/android/app/job/JobInfo.Builder.html#build())
        ///
        /// Required features: "android-app-job-JobInfo"
        #[cfg(any(feature = "all", all(feature = "android-app-job-JobInfo")))]
        pub fn build<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::job::JobInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/job/JobInfo$Builder", java.flags == PUBLIC, .name == "build", .descriptor == "()Landroid/app/job/JobInfo;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/job/JobInfo$Builder\0", "build\0", "()Landroid/app/job/JobInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
