// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-app-Notification_CarExtender_Builder"))]
__jni_bindgen! {
    /// public class [Notification.CarExtender.Builder](https://developer.android.com/reference/android/app/Notification.CarExtender.Builder.html)
    ///
    /// Required feature: android-app-Notification_CarExtender_Builder
    public class Notification_CarExtender_Builder ("android/app/Notification$CarExtender$Builder") extends crate::java::lang::Object {

        /// [Builder](https://developer.android.com/reference/android/app/Notification.CarExtender.Builder.html#Builder(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::app::Notification_CarExtender_Builder>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$CarExtender$Builder", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$CarExtender$Builder\0", "<init>\0", "(Ljava/lang/String;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addMessage](https://developer.android.com/reference/android/app/Notification.CarExtender.Builder.html#addMessage(java.lang.String))
        ///
        /// Required features: "android-app-Notification_CarExtender_Builder", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_CarExtender_Builder", feature = "java-lang-String")))]
        pub fn addMessage<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_CarExtender_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$CarExtender$Builder", java.flags == PUBLIC, .name == "addMessage", .descriptor == "(Ljava/lang/String;)Landroid/app/Notification$CarExtender$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$CarExtender$Builder\0", "addMessage\0", "(Ljava/lang/String;)Landroid/app/Notification$CarExtender$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setReplyAction](https://developer.android.com/reference/android/app/Notification.CarExtender.Builder.html#setReplyAction(android.app.PendingIntent,%20android.app.RemoteInput))
        ///
        /// Required features: "android-app-Notification_CarExtender_Builder", "android-app-PendingIntent", "android-app-RemoteInput"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_CarExtender_Builder", feature = "android-app-PendingIntent", feature = "android-app-RemoteInput")))]
        pub fn setReplyAction<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::PendingIntent>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::RemoteInput>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_CarExtender_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$CarExtender$Builder", java.flags == PUBLIC, .name == "setReplyAction", .descriptor == "(Landroid/app/PendingIntent;Landroid/app/RemoteInput;)Landroid/app/Notification$CarExtender$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$CarExtender$Builder\0", "setReplyAction\0", "(Landroid/app/PendingIntent;Landroid/app/RemoteInput;)Landroid/app/Notification$CarExtender$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setReadPendingIntent](https://developer.android.com/reference/android/app/Notification.CarExtender.Builder.html#setReadPendingIntent(android.app.PendingIntent))
        ///
        /// Required features: "android-app-Notification_CarExtender_Builder", "android-app-PendingIntent"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_CarExtender_Builder", feature = "android-app-PendingIntent")))]
        pub fn setReadPendingIntent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::PendingIntent>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_CarExtender_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$CarExtender$Builder", java.flags == PUBLIC, .name == "setReadPendingIntent", .descriptor == "(Landroid/app/PendingIntent;)Landroid/app/Notification$CarExtender$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$CarExtender$Builder\0", "setReadPendingIntent\0", "(Landroid/app/PendingIntent;)Landroid/app/Notification$CarExtender$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setLatestTimestamp](https://developer.android.com/reference/android/app/Notification.CarExtender.Builder.html#setLatestTimestamp(long))
        ///
        /// Required features: "android-app-Notification_CarExtender_Builder"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_CarExtender_Builder")))]
        pub fn setLatestTimestamp<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_CarExtender_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$CarExtender$Builder", java.flags == PUBLIC, .name == "setLatestTimestamp", .descriptor == "(J)Landroid/app/Notification$CarExtender$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$CarExtender$Builder\0", "setLatestTimestamp\0", "(J)Landroid/app/Notification$CarExtender$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [build](https://developer.android.com/reference/android/app/Notification.CarExtender.Builder.html#build())
        ///
        /// Required features: "android-app-Notification_CarExtender_UnreadConversation"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_CarExtender_UnreadConversation")))]
        pub fn build<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_CarExtender_UnreadConversation>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$CarExtender$Builder", java.flags == PUBLIC, .name == "build", .descriptor == "()Landroid/app/Notification$CarExtender$UnreadConversation;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$CarExtender$Builder\0", "build\0", "()Landroid/app/Notification$CarExtender$UnreadConversation;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
