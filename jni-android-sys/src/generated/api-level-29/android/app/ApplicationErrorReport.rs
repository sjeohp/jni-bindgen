// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-app-ApplicationErrorReport"))]
__jni_bindgen! {
    /// public class [ApplicationErrorReport](https://developer.android.com/reference/android/app/ApplicationErrorReport.html)
    ///
    /// Required feature: android-app-ApplicationErrorReport
    public class ApplicationErrorReport ("android/app/ApplicationErrorReport") extends crate::java::lang::Object, implements crate::android::os::Parcelable {

        /// [ApplicationErrorReport](https://developer.android.com/reference/android/app/ApplicationErrorReport.html#ApplicationErrorReport())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::app::ApplicationErrorReport>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/ApplicationErrorReport", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/ApplicationErrorReport\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getErrorReportReceiver](https://developer.android.com/reference/android/app/ApplicationErrorReport.html#getErrorReportReceiver(android.content.Context,%20java.lang.String,%20int))
        ///
        /// Required features: "android-content-ComponentName", "android-content-Context", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "android-content-Context", feature = "java-lang-String")))]
        pub fn getErrorReportReceiver<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::ComponentName>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/ApplicationErrorReport", java.flags == PUBLIC | STATIC, .name == "getErrorReportReceiver", .descriptor == "(Landroid/content/Context;Ljava/lang/String;I)Landroid/content/ComponentName;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/app/ApplicationErrorReport\0", "getErrorReportReceiver\0", "(Landroid/content/Context;Ljava/lang/String;I)Landroid/content/ComponentName;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [writeToParcel](https://developer.android.com/reference/android/app/ApplicationErrorReport.html#writeToParcel(android.os.Parcel,%20int))
        ///
        /// Required features: "android-os-Parcel"
        #[cfg(any(feature = "all", all(feature = "android-os-Parcel")))]
        pub fn writeToParcel<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Parcel>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/ApplicationErrorReport", java.flags == PUBLIC, .name == "writeToParcel", .descriptor == "(Landroid/os/Parcel;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/ApplicationErrorReport\0", "writeToParcel\0", "(Landroid/os/Parcel;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [readFromParcel](https://developer.android.com/reference/android/app/ApplicationErrorReport.html#readFromParcel(android.os.Parcel))
        ///
        /// Required features: "android-os-Parcel"
        #[cfg(any(feature = "all", all(feature = "android-os-Parcel")))]
        pub fn readFromParcel<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Parcel>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/ApplicationErrorReport", java.flags == PUBLIC, .name == "readFromParcel", .descriptor == "(Landroid/os/Parcel;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/ApplicationErrorReport\0", "readFromParcel\0", "(Landroid/os/Parcel;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [describeContents](https://developer.android.com/reference/android/app/ApplicationErrorReport.html#describeContents())
        pub fn describeContents<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/ApplicationErrorReport", java.flags == PUBLIC, .name == "describeContents", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/ApplicationErrorReport\0", "describeContents\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dump](https://developer.android.com/reference/android/app/ApplicationErrorReport.html#dump(android.util.Printer,%20java.lang.String))
        ///
        /// Required features: "android-util-Printer", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-util-Printer", feature = "java-lang-String")))]
        pub fn dump<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::util::Printer>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/ApplicationErrorReport", java.flags == PUBLIC, .name == "dump", .descriptor == "(Landroid/util/Printer;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/ApplicationErrorReport\0", "dump\0", "(Landroid/util/Printer;Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// **get** public static final [CREATOR](https://developer.android.com/reference/android/app/ApplicationErrorReport.html#CREATOR)
        ///
        /// Required feature: android-os-Parcelable_Creator
        #[cfg(any(feature = "all", feature = "android-os-Parcelable_Creator"))]
        pub fn CREATOR<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Parcelable_Creator>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/app/ApplicationErrorReport\0", "CREATOR\0", "Landroid/os/Parcelable$Creator;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// public static final [TYPE_ANR](https://developer.android.com/reference/android/app/ApplicationErrorReport.html#TYPE_ANR)
        pub const TYPE_ANR : i32 = 2;

        /// public static final [TYPE_BATTERY](https://developer.android.com/reference/android/app/ApplicationErrorReport.html#TYPE_BATTERY)
        pub const TYPE_BATTERY : i32 = 3;

        /// public static final [TYPE_CRASH](https://developer.android.com/reference/android/app/ApplicationErrorReport.html#TYPE_CRASH)
        pub const TYPE_CRASH : i32 = 1;

        /// public static final [TYPE_NONE](https://developer.android.com/reference/android/app/ApplicationErrorReport.html#TYPE_NONE)
        pub const TYPE_NONE : i32 = 0;

        /// public static final [TYPE_RUNNING_SERVICE](https://developer.android.com/reference/android/app/ApplicationErrorReport.html#TYPE_RUNNING_SERVICE)
        pub const TYPE_RUNNING_SERVICE : i32 = 5;

        /// **get** public [anrInfo](https://developer.android.com/reference/android/app/ApplicationErrorReport.html#anrInfo)
        ///
        /// Required feature: android-app-ApplicationErrorReport_AnrInfo
        #[cfg(any(feature = "all", feature = "android-app-ApplicationErrorReport_AnrInfo"))]
        pub fn anrInfo<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::ApplicationErrorReport_AnrInfo>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/ApplicationErrorReport\0", "anrInfo\0", "Landroid/app/ApplicationErrorReport$AnrInfo;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [anrInfo](https://developer.android.com/reference/android/app/ApplicationErrorReport.html#anrInfo)
        ///
        /// Required feature: android-app-ApplicationErrorReport_AnrInfo
        #[cfg(any(feature = "all", feature = "android-app-ApplicationErrorReport_AnrInfo"))]
        pub fn set_anrInfo<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::android::app::ApplicationErrorReport_AnrInfo>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/ApplicationErrorReport\0", "anrInfo\0", "Landroid/app/ApplicationErrorReport$AnrInfo;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [batteryInfo](https://developer.android.com/reference/android/app/ApplicationErrorReport.html#batteryInfo)
        ///
        /// Required feature: android-app-ApplicationErrorReport_BatteryInfo
        #[cfg(any(feature = "all", feature = "android-app-ApplicationErrorReport_BatteryInfo"))]
        pub fn batteryInfo<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::ApplicationErrorReport_BatteryInfo>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/ApplicationErrorReport\0", "batteryInfo\0", "Landroid/app/ApplicationErrorReport$BatteryInfo;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [batteryInfo](https://developer.android.com/reference/android/app/ApplicationErrorReport.html#batteryInfo)
        ///
        /// Required feature: android-app-ApplicationErrorReport_BatteryInfo
        #[cfg(any(feature = "all", feature = "android-app-ApplicationErrorReport_BatteryInfo"))]
        pub fn set_batteryInfo<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::android::app::ApplicationErrorReport_BatteryInfo>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/ApplicationErrorReport\0", "batteryInfo\0", "Landroid/app/ApplicationErrorReport$BatteryInfo;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [crashInfo](https://developer.android.com/reference/android/app/ApplicationErrorReport.html#crashInfo)
        ///
        /// Required feature: android-app-ApplicationErrorReport_CrashInfo
        #[cfg(any(feature = "all", feature = "android-app-ApplicationErrorReport_CrashInfo"))]
        pub fn crashInfo<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::ApplicationErrorReport_CrashInfo>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/ApplicationErrorReport\0", "crashInfo\0", "Landroid/app/ApplicationErrorReport$CrashInfo;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [crashInfo](https://developer.android.com/reference/android/app/ApplicationErrorReport.html#crashInfo)
        ///
        /// Required feature: android-app-ApplicationErrorReport_CrashInfo
        #[cfg(any(feature = "all", feature = "android-app-ApplicationErrorReport_CrashInfo"))]
        pub fn set_crashInfo<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::android::app::ApplicationErrorReport_CrashInfo>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/ApplicationErrorReport\0", "crashInfo\0", "Landroid/app/ApplicationErrorReport$CrashInfo;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [installerPackageName](https://developer.android.com/reference/android/app/ApplicationErrorReport.html#installerPackageName)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn installerPackageName<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/ApplicationErrorReport\0", "installerPackageName\0", "Ljava/lang/String;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [installerPackageName](https://developer.android.com/reference/android/app/ApplicationErrorReport.html#installerPackageName)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn set_installerPackageName<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::java::lang::String>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/ApplicationErrorReport\0", "installerPackageName\0", "Ljava/lang/String;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [packageName](https://developer.android.com/reference/android/app/ApplicationErrorReport.html#packageName)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn packageName<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/ApplicationErrorReport\0", "packageName\0", "Ljava/lang/String;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [packageName](https://developer.android.com/reference/android/app/ApplicationErrorReport.html#packageName)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn set_packageName<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::java::lang::String>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/ApplicationErrorReport\0", "packageName\0", "Ljava/lang/String;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [processName](https://developer.android.com/reference/android/app/ApplicationErrorReport.html#processName)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn processName<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/ApplicationErrorReport\0", "processName\0", "Ljava/lang/String;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [processName](https://developer.android.com/reference/android/app/ApplicationErrorReport.html#processName)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn set_processName<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::java::lang::String>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/ApplicationErrorReport\0", "processName\0", "Ljava/lang/String;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [runningServiceInfo](https://developer.android.com/reference/android/app/ApplicationErrorReport.html#runningServiceInfo)
        ///
        /// Required feature: android-app-ApplicationErrorReport_RunningServiceInfo
        #[cfg(any(feature = "all", feature = "android-app-ApplicationErrorReport_RunningServiceInfo"))]
        pub fn runningServiceInfo<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::ApplicationErrorReport_RunningServiceInfo>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/ApplicationErrorReport\0", "runningServiceInfo\0", "Landroid/app/ApplicationErrorReport$RunningServiceInfo;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [runningServiceInfo](https://developer.android.com/reference/android/app/ApplicationErrorReport.html#runningServiceInfo)
        ///
        /// Required feature: android-app-ApplicationErrorReport_RunningServiceInfo
        #[cfg(any(feature = "all", feature = "android-app-ApplicationErrorReport_RunningServiceInfo"))]
        pub fn set_runningServiceInfo<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::android::app::ApplicationErrorReport_RunningServiceInfo>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/ApplicationErrorReport\0", "runningServiceInfo\0", "Landroid/app/ApplicationErrorReport$RunningServiceInfo;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [systemApp](https://developer.android.com/reference/android/app/ApplicationErrorReport.html#systemApp)
        pub fn systemApp<'env>(&'env self) -> bool {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/ApplicationErrorReport\0", "systemApp\0", "Z\0");
                env.get_boolean_field(class, field)
            }
        }

        /// **set** public [systemApp](https://developer.android.com/reference/android/app/ApplicationErrorReport.html#systemApp)
        pub fn set_systemApp<'env>(&'env self, value: bool) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/ApplicationErrorReport\0", "systemApp\0", "Z\0");
                env.set_boolean_field(class, field, value)
            }
        }

        /// **get** public [time](https://developer.android.com/reference/android/app/ApplicationErrorReport.html#time)
        pub fn time<'env>(&'env self) -> i64 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/ApplicationErrorReport\0", "time\0", "J\0");
                env.get_long_field(class, field)
            }
        }

        /// **set** public [time](https://developer.android.com/reference/android/app/ApplicationErrorReport.html#time)
        pub fn set_time<'env>(&'env self, value: i64) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/ApplicationErrorReport\0", "time\0", "J\0");
                env.set_long_field(class, field, value)
            }
        }

        /// **get** public [type](https://developer.android.com/reference/android/app/ApplicationErrorReport.html#type)
        pub fn r#type<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/ApplicationErrorReport\0", "type\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [type](https://developer.android.com/reference/android/app/ApplicationErrorReport.html#type)
        pub fn set_type<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/ApplicationErrorReport\0", "type\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }
    }
}
