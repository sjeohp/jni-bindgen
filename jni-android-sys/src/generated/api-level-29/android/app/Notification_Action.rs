// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-app-Notification_Action"))]
__jni_bindgen! {
    /// public class [Notification.Action](https://developer.android.com/reference/android/app/Notification.Action.html)
    ///
    /// Required feature: android-app-Notification_Action
    public class Notification_Action ("android/app/Notification$Action") extends crate::java::lang::Object, implements crate::android::os::Parcelable {

        /// [Action](https://developer.android.com/reference/android/app/Notification.Action.html#Action(int,%20java.lang.CharSequence,%20android.app.PendingIntent))
        ///
        /// Required features: "android-app-PendingIntent", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-app-PendingIntent", feature = "java-lang-CharSequence")))]
        #[deprecated] pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::PendingIntent>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::app::Notification_Action>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Action", java.flags == PUBLIC, .name == "<init>", .descriptor == "(ILjava/lang/CharSequence;Landroid/app/PendingIntent;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Action\0", "<init>\0", "(ILjava/lang/CharSequence;Landroid/app/PendingIntent;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getIcon](https://developer.android.com/reference/android/app/Notification.Action.html#getIcon())
        ///
        /// Required features: "android-graphics-drawable-Icon"
        #[cfg(any(feature = "all", all(feature = "android-graphics-drawable-Icon")))]
        pub fn getIcon<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::drawable::Icon>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Action", java.flags == PUBLIC, .name == "getIcon", .descriptor == "()Landroid/graphics/drawable/Icon;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Action\0", "getIcon\0", "()Landroid/graphics/drawable/Icon;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getExtras](https://developer.android.com/reference/android/app/Notification.Action.html#getExtras())
        ///
        /// Required features: "android-os-Bundle"
        #[cfg(any(feature = "all", all(feature = "android-os-Bundle")))]
        pub fn getExtras<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Bundle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Action", java.flags == PUBLIC, .name == "getExtras", .descriptor == "()Landroid/os/Bundle;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Action\0", "getExtras\0", "()Landroid/os/Bundle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAllowGeneratedReplies](https://developer.android.com/reference/android/app/Notification.Action.html#getAllowGeneratedReplies())
        pub fn getAllowGeneratedReplies<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Action", java.flags == PUBLIC, .name == "getAllowGeneratedReplies", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Action\0", "getAllowGeneratedReplies\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRemoteInputs](https://developer.android.com/reference/android/app/Notification.Action.html#getRemoteInputs())
        ///
        /// Required features: "android-app-RemoteInput"
        #[cfg(any(feature = "all", all(feature = "android-app-RemoteInput")))]
        pub fn getRemoteInputs<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::android::app::RemoteInput, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Action", java.flags == PUBLIC, .name == "getRemoteInputs", .descriptor == "()[Landroid/app/RemoteInput;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Action\0", "getRemoteInputs\0", "()[Landroid/app/RemoteInput;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSemanticAction](https://developer.android.com/reference/android/app/Notification.Action.html#getSemanticAction())
        pub fn getSemanticAction<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Action", java.flags == PUBLIC, .name == "getSemanticAction", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Action\0", "getSemanticAction\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isContextual](https://developer.android.com/reference/android/app/Notification.Action.html#isContextual())
        pub fn isContextual<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Action", java.flags == PUBLIC, .name == "isContextual", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Action\0", "isContextual\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDataOnlyRemoteInputs](https://developer.android.com/reference/android/app/Notification.Action.html#getDataOnlyRemoteInputs())
        ///
        /// Required features: "android-app-RemoteInput"
        #[cfg(any(feature = "all", all(feature = "android-app-RemoteInput")))]
        pub fn getDataOnlyRemoteInputs<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::android::app::RemoteInput, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Action", java.flags == PUBLIC, .name == "getDataOnlyRemoteInputs", .descriptor == "()[Landroid/app/RemoteInput;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Action\0", "getDataOnlyRemoteInputs\0", "()[Landroid/app/RemoteInput;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clone](https://developer.android.com/reference/android/app/Notification.Action.html#clone())
        ///
        /// Required features: "android-app-Notification_Action"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Action")))]
        pub fn clone<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Action>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Action", java.flags == PUBLIC, .name == "clone", .descriptor == "()Landroid/app/Notification$Action;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Action\0", "clone\0", "()Landroid/app/Notification$Action;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [describeContents](https://developer.android.com/reference/android/app/Notification.Action.html#describeContents())
        pub fn describeContents<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Action", java.flags == PUBLIC, .name == "describeContents", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Action\0", "describeContents\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [writeToParcel](https://developer.android.com/reference/android/app/Notification.Action.html#writeToParcel(android.os.Parcel,%20int))
        ///
        /// Required features: "android-os-Parcel"
        #[cfg(any(feature = "all", all(feature = "android-os-Parcel")))]
        pub fn writeToParcel<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Parcel>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Action", java.flags == PUBLIC, .name == "writeToParcel", .descriptor == "(Landroid/os/Parcel;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Action\0", "writeToParcel\0", "(Landroid/os/Parcel;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Bridge method - type erasure
        // /// [clone](https://developer.android.com/reference/android/app/Notification.Action.html#clone())
        // ///
        // /// Required features: "java-lang-Object"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        // pub fn clone<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/app/Notification$Action", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "clone", .descriptor == "()Ljava/lang/Object;"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Action\0", "clone\0", "()Ljava/lang/Object;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// **get** public static final [CREATOR](https://developer.android.com/reference/android/app/Notification.Action.html#CREATOR)
        ///
        /// Required feature: android-os-Parcelable_Creator
        #[cfg(any(feature = "all", feature = "android-os-Parcelable_Creator"))]
        pub fn CREATOR<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Parcelable_Creator>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/app/Notification$Action\0", "CREATOR\0", "Landroid/os/Parcelable$Creator;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// public static final [SEMANTIC_ACTION_ARCHIVE](https://developer.android.com/reference/android/app/Notification.Action.html#SEMANTIC_ACTION_ARCHIVE)
        pub const SEMANTIC_ACTION_ARCHIVE : i32 = 5;

        /// public static final [SEMANTIC_ACTION_CALL](https://developer.android.com/reference/android/app/Notification.Action.html#SEMANTIC_ACTION_CALL)
        pub const SEMANTIC_ACTION_CALL : i32 = 10;

        /// public static final [SEMANTIC_ACTION_DELETE](https://developer.android.com/reference/android/app/Notification.Action.html#SEMANTIC_ACTION_DELETE)
        pub const SEMANTIC_ACTION_DELETE : i32 = 4;

        /// public static final [SEMANTIC_ACTION_MARK_AS_READ](https://developer.android.com/reference/android/app/Notification.Action.html#SEMANTIC_ACTION_MARK_AS_READ)
        pub const SEMANTIC_ACTION_MARK_AS_READ : i32 = 2;

        /// public static final [SEMANTIC_ACTION_MARK_AS_UNREAD](https://developer.android.com/reference/android/app/Notification.Action.html#SEMANTIC_ACTION_MARK_AS_UNREAD)
        pub const SEMANTIC_ACTION_MARK_AS_UNREAD : i32 = 3;

        /// public static final [SEMANTIC_ACTION_MUTE](https://developer.android.com/reference/android/app/Notification.Action.html#SEMANTIC_ACTION_MUTE)
        pub const SEMANTIC_ACTION_MUTE : i32 = 6;

        /// public static final [SEMANTIC_ACTION_NONE](https://developer.android.com/reference/android/app/Notification.Action.html#SEMANTIC_ACTION_NONE)
        pub const SEMANTIC_ACTION_NONE : i32 = 0;

        /// public static final [SEMANTIC_ACTION_REPLY](https://developer.android.com/reference/android/app/Notification.Action.html#SEMANTIC_ACTION_REPLY)
        pub const SEMANTIC_ACTION_REPLY : i32 = 1;

        /// public static final [SEMANTIC_ACTION_THUMBS_DOWN](https://developer.android.com/reference/android/app/Notification.Action.html#SEMANTIC_ACTION_THUMBS_DOWN)
        pub const SEMANTIC_ACTION_THUMBS_DOWN : i32 = 9;

        /// public static final [SEMANTIC_ACTION_THUMBS_UP](https://developer.android.com/reference/android/app/Notification.Action.html#SEMANTIC_ACTION_THUMBS_UP)
        pub const SEMANTIC_ACTION_THUMBS_UP : i32 = 8;

        /// public static final [SEMANTIC_ACTION_UNMUTE](https://developer.android.com/reference/android/app/Notification.Action.html#SEMANTIC_ACTION_UNMUTE)
        pub const SEMANTIC_ACTION_UNMUTE : i32 = 7;

        /// **get** public [actionIntent](https://developer.android.com/reference/android/app/Notification.Action.html#actionIntent)
        ///
        /// Required feature: android-app-PendingIntent
        #[cfg(any(feature = "all", feature = "android-app-PendingIntent"))]
        pub fn actionIntent<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::PendingIntent>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/Notification$Action\0", "actionIntent\0", "Landroid/app/PendingIntent;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [actionIntent](https://developer.android.com/reference/android/app/Notification.Action.html#actionIntent)
        ///
        /// Required feature: android-app-PendingIntent
        #[cfg(any(feature = "all", feature = "android-app-PendingIntent"))]
        pub fn set_actionIntent<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::android::app::PendingIntent>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/Notification$Action\0", "actionIntent\0", "Landroid/app/PendingIntent;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [icon](https://developer.android.com/reference/android/app/Notification.Action.html#icon)
        #[deprecated] pub fn icon<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/Notification$Action\0", "icon\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [icon](https://developer.android.com/reference/android/app/Notification.Action.html#icon)
        #[deprecated] pub fn set_icon<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/Notification$Action\0", "icon\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [title](https://developer.android.com/reference/android/app/Notification.Action.html#title)
        ///
        /// Required feature: java-lang-CharSequence
        #[cfg(any(feature = "all", feature = "java-lang-CharSequence"))]
        pub fn title<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::CharSequence>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/Notification$Action\0", "title\0", "Ljava/lang/CharSequence;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [title](https://developer.android.com/reference/android/app/Notification.Action.html#title)
        ///
        /// Required feature: java-lang-CharSequence
        #[cfg(any(feature = "all", feature = "java-lang-CharSequence"))]
        pub fn set_title<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::java::lang::CharSequence>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/Notification$Action\0", "title\0", "Ljava/lang/CharSequence;\0");
                env.set_object_field(class, field, value)
            }
        }
    }
}
