// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-app-FragmentController"))]
__jni_bindgen! {
    /// public class [FragmentController](https://developer.android.com/reference/android/app/FragmentController.html)
    ///
    /// Required feature: android-app-FragmentController
    #[deprecated] public class FragmentController ("android/app/FragmentController") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [FragmentController](https://developer.android.com/reference/android/app/FragmentController.html#FragmentController(android.app.FragmentHostCallback))
        // ///
        // /// Required features: "android-app-FragmentHostCallback"
        // #[cfg(any(feature = "all", all(feature = "android-app-FragmentHostCallback")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::FragmentHostCallback>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::app::FragmentController>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/app/FragmentController", java.flags == (empty), .name == "<init>", .descriptor == "(Landroid/app/FragmentHostCallback;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentController\0", "<init>\0", "(Landroid/app/FragmentHostCallback;)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [createController](https://developer.android.com/reference/android/app/FragmentController.html#createController(android.app.FragmentHostCallback))
        ///
        /// Required features: "android-app-FragmentController", "android-app-FragmentHostCallback"
        #[cfg(any(feature = "all", all(feature = "android-app-FragmentController", feature = "android-app-FragmentHostCallback")))]
        #[deprecated] pub fn createController<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::FragmentHostCallback>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::FragmentController>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentController", java.flags == PUBLIC | STATIC | FINAL, .name == "createController", .descriptor == "(Landroid/app/FragmentHostCallback;)Landroid/app/FragmentController;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/app/FragmentController\0", "createController\0", "(Landroid/app/FragmentHostCallback;)Landroid/app/FragmentController;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFragmentManager](https://developer.android.com/reference/android/app/FragmentController.html#getFragmentManager())
        ///
        /// Required features: "android-app-FragmentManager"
        #[cfg(any(feature = "all", all(feature = "android-app-FragmentManager")))]
        #[deprecated] pub fn getFragmentManager<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::FragmentManager>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentController", java.flags == PUBLIC, .name == "getFragmentManager", .descriptor == "()Landroid/app/FragmentManager;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentController\0", "getFragmentManager\0", "()Landroid/app/FragmentManager;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLoaderManager](https://developer.android.com/reference/android/app/FragmentController.html#getLoaderManager())
        ///
        /// Required features: "android-app-LoaderManager"
        #[cfg(any(feature = "all", all(feature = "android-app-LoaderManager")))]
        #[deprecated] pub fn getLoaderManager<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::LoaderManager>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentController", java.flags == PUBLIC, .name == "getLoaderManager", .descriptor == "()Landroid/app/LoaderManager;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentController\0", "getLoaderManager\0", "()Landroid/app/LoaderManager;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [findFragmentByWho](https://developer.android.com/reference/android/app/FragmentController.html#findFragmentByWho(java.lang.String))
        ///
        /// Required features: "android-app-Fragment", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-app-Fragment", feature = "java-lang-String")))]
        #[deprecated] pub fn findFragmentByWho<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Fragment>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentController", java.flags == PUBLIC, .name == "findFragmentByWho", .descriptor == "(Ljava/lang/String;)Landroid/app/Fragment;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentController\0", "findFragmentByWho\0", "(Ljava/lang/String;)Landroid/app/Fragment;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [attachHost](https://developer.android.com/reference/android/app/FragmentController.html#attachHost(android.app.Fragment))
        ///
        /// Required features: "android-app-Fragment"
        #[cfg(any(feature = "all", all(feature = "android-app-Fragment")))]
        #[deprecated] pub fn attachHost<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Fragment>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentController", java.flags == PUBLIC, .name == "attachHost", .descriptor == "(Landroid/app/Fragment;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentController\0", "attachHost\0", "(Landroid/app/Fragment;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onCreateView](https://developer.android.com/reference/android/app/FragmentController.html#onCreateView(android.view.View,%20java.lang.String,%20android.content.Context,%20android.util.AttributeSet))
        ///
        /// Required features: "android-content-Context", "android-util-AttributeSet", "android-view-View", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-util-AttributeSet", feature = "android-view-View", feature = "java-lang-String")))]
        #[deprecated] pub fn onCreateView<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::util::AttributeSet>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::View>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentController", java.flags == PUBLIC, .name == "onCreateView", .descriptor == "(Landroid/view/View;Ljava/lang/String;Landroid/content/Context;Landroid/util/AttributeSet;)Landroid/view/View;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentController\0", "onCreateView\0", "(Landroid/view/View;Ljava/lang/String;Landroid/content/Context;Landroid/util/AttributeSet;)Landroid/view/View;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [noteStateNotSaved](https://developer.android.com/reference/android/app/FragmentController.html#noteStateNotSaved())
        #[deprecated] pub fn noteStateNotSaved<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentController", java.flags == PUBLIC, .name == "noteStateNotSaved", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentController\0", "noteStateNotSaved\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [saveAllState](https://developer.android.com/reference/android/app/FragmentController.html#saveAllState())
        ///
        /// Required features: "android-os-Parcelable"
        #[cfg(any(feature = "all", all(feature = "android-os-Parcelable")))]
        #[deprecated] pub fn saveAllState<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Parcelable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentController", java.flags == PUBLIC, .name == "saveAllState", .descriptor == "()Landroid/os/Parcelable;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentController\0", "saveAllState\0", "()Landroid/os/Parcelable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [restoreAllState](https://developer.android.com/reference/android/app/FragmentController.html#restoreAllState(android.os.Parcelable,%20java.util.List))
        ///
        /// Required features: "android-os-Parcelable", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "android-os-Parcelable", feature = "java-util-List")))]
        #[deprecated] pub fn restoreAllState_Parcelable_List<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Parcelable>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentController", java.flags == PUBLIC, .name == "restoreAllState", .descriptor == "(Landroid/os/Parcelable;Ljava/util/List;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentController\0", "restoreAllState\0", "(Landroid/os/Parcelable;Ljava/util/List;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [restoreAllState](https://developer.android.com/reference/android/app/FragmentController.html#restoreAllState(android.os.Parcelable,%20android.app.FragmentManagerNonConfig))
        ///
        /// Required features: "android-app-FragmentManagerNonConfig", "android-os-Parcelable"
        #[cfg(any(feature = "all", all(feature = "android-app-FragmentManagerNonConfig", feature = "android-os-Parcelable")))]
        #[deprecated] pub fn restoreAllState_Parcelable_FragmentManagerNonConfig<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Parcelable>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::FragmentManagerNonConfig>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentController", java.flags == PUBLIC, .name == "restoreAllState", .descriptor == "(Landroid/os/Parcelable;Landroid/app/FragmentManagerNonConfig;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentController\0", "restoreAllState\0", "(Landroid/os/Parcelable;Landroid/app/FragmentManagerNonConfig;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [retainNonConfig](https://developer.android.com/reference/android/app/FragmentController.html#retainNonConfig())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        #[deprecated] pub fn retainNonConfig<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentController", java.flags == PUBLIC, .name == "retainNonConfig", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentController\0", "retainNonConfig\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [retainNestedNonConfig](https://developer.android.com/reference/android/app/FragmentController.html#retainNestedNonConfig())
        ///
        /// Required features: "android-app-FragmentManagerNonConfig"
        #[cfg(any(feature = "all", all(feature = "android-app-FragmentManagerNonConfig")))]
        #[deprecated] pub fn retainNestedNonConfig<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::FragmentManagerNonConfig>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentController", java.flags == PUBLIC, .name == "retainNestedNonConfig", .descriptor == "()Landroid/app/FragmentManagerNonConfig;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentController\0", "retainNestedNonConfig\0", "()Landroid/app/FragmentManagerNonConfig;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dispatchCreate](https://developer.android.com/reference/android/app/FragmentController.html#dispatchCreate())
        #[deprecated] pub fn dispatchCreate<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentController", java.flags == PUBLIC, .name == "dispatchCreate", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentController\0", "dispatchCreate\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dispatchActivityCreated](https://developer.android.com/reference/android/app/FragmentController.html#dispatchActivityCreated())
        #[deprecated] pub fn dispatchActivityCreated<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentController", java.flags == PUBLIC, .name == "dispatchActivityCreated", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentController\0", "dispatchActivityCreated\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dispatchStart](https://developer.android.com/reference/android/app/FragmentController.html#dispatchStart())
        #[deprecated] pub fn dispatchStart<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentController", java.flags == PUBLIC, .name == "dispatchStart", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentController\0", "dispatchStart\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dispatchResume](https://developer.android.com/reference/android/app/FragmentController.html#dispatchResume())
        #[deprecated] pub fn dispatchResume<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentController", java.flags == PUBLIC, .name == "dispatchResume", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentController\0", "dispatchResume\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dispatchPause](https://developer.android.com/reference/android/app/FragmentController.html#dispatchPause())
        #[deprecated] pub fn dispatchPause<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentController", java.flags == PUBLIC, .name == "dispatchPause", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentController\0", "dispatchPause\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dispatchStop](https://developer.android.com/reference/android/app/FragmentController.html#dispatchStop())
        #[deprecated] pub fn dispatchStop<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentController", java.flags == PUBLIC, .name == "dispatchStop", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentController\0", "dispatchStop\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dispatchDestroyView](https://developer.android.com/reference/android/app/FragmentController.html#dispatchDestroyView())
        #[deprecated] pub fn dispatchDestroyView<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentController", java.flags == PUBLIC, .name == "dispatchDestroyView", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentController\0", "dispatchDestroyView\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dispatchDestroy](https://developer.android.com/reference/android/app/FragmentController.html#dispatchDestroy())
        #[deprecated] pub fn dispatchDestroy<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentController", java.flags == PUBLIC, .name == "dispatchDestroy", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentController\0", "dispatchDestroy\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dispatchMultiWindowModeChanged](https://developer.android.com/reference/android/app/FragmentController.html#dispatchMultiWindowModeChanged(boolean))
        #[deprecated] pub fn dispatchMultiWindowModeChanged_boolean<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentController", java.flags == PUBLIC, .name == "dispatchMultiWindowModeChanged", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentController\0", "dispatchMultiWindowModeChanged\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dispatchMultiWindowModeChanged](https://developer.android.com/reference/android/app/FragmentController.html#dispatchMultiWindowModeChanged(boolean,%20android.content.res.Configuration))
        ///
        /// Required features: "android-content-res-Configuration"
        #[cfg(any(feature = "all", all(feature = "android-content-res-Configuration")))]
        #[deprecated] pub fn dispatchMultiWindowModeChanged_boolean_Configuration<'env>(&'env self, arg0: bool, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::res::Configuration>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentController", java.flags == PUBLIC, .name == "dispatchMultiWindowModeChanged", .descriptor == "(ZLandroid/content/res/Configuration;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentController\0", "dispatchMultiWindowModeChanged\0", "(ZLandroid/content/res/Configuration;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dispatchPictureInPictureModeChanged](https://developer.android.com/reference/android/app/FragmentController.html#dispatchPictureInPictureModeChanged(boolean))
        #[deprecated] pub fn dispatchPictureInPictureModeChanged_boolean<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentController", java.flags == PUBLIC, .name == "dispatchPictureInPictureModeChanged", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentController\0", "dispatchPictureInPictureModeChanged\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dispatchPictureInPictureModeChanged](https://developer.android.com/reference/android/app/FragmentController.html#dispatchPictureInPictureModeChanged(boolean,%20android.content.res.Configuration))
        ///
        /// Required features: "android-content-res-Configuration"
        #[cfg(any(feature = "all", all(feature = "android-content-res-Configuration")))]
        #[deprecated] pub fn dispatchPictureInPictureModeChanged_boolean_Configuration<'env>(&'env self, arg0: bool, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::res::Configuration>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentController", java.flags == PUBLIC, .name == "dispatchPictureInPictureModeChanged", .descriptor == "(ZLandroid/content/res/Configuration;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentController\0", "dispatchPictureInPictureModeChanged\0", "(ZLandroid/content/res/Configuration;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dispatchConfigurationChanged](https://developer.android.com/reference/android/app/FragmentController.html#dispatchConfigurationChanged(android.content.res.Configuration))
        ///
        /// Required features: "android-content-res-Configuration"
        #[cfg(any(feature = "all", all(feature = "android-content-res-Configuration")))]
        #[deprecated] pub fn dispatchConfigurationChanged<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::res::Configuration>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentController", java.flags == PUBLIC, .name == "dispatchConfigurationChanged", .descriptor == "(Landroid/content/res/Configuration;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentController\0", "dispatchConfigurationChanged\0", "(Landroid/content/res/Configuration;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dispatchLowMemory](https://developer.android.com/reference/android/app/FragmentController.html#dispatchLowMemory())
        #[deprecated] pub fn dispatchLowMemory<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentController", java.flags == PUBLIC, .name == "dispatchLowMemory", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentController\0", "dispatchLowMemory\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dispatchTrimMemory](https://developer.android.com/reference/android/app/FragmentController.html#dispatchTrimMemory(int))
        #[deprecated] pub fn dispatchTrimMemory<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentController", java.flags == PUBLIC, .name == "dispatchTrimMemory", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentController\0", "dispatchTrimMemory\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dispatchCreateOptionsMenu](https://developer.android.com/reference/android/app/FragmentController.html#dispatchCreateOptionsMenu(android.view.Menu,%20android.view.MenuInflater))
        ///
        /// Required features: "android-view-Menu", "android-view-MenuInflater"
        #[cfg(any(feature = "all", all(feature = "android-view-Menu", feature = "android-view-MenuInflater")))]
        #[deprecated] pub fn dispatchCreateOptionsMenu<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::Menu>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::MenuInflater>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentController", java.flags == PUBLIC, .name == "dispatchCreateOptionsMenu", .descriptor == "(Landroid/view/Menu;Landroid/view/MenuInflater;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentController\0", "dispatchCreateOptionsMenu\0", "(Landroid/view/Menu;Landroid/view/MenuInflater;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dispatchPrepareOptionsMenu](https://developer.android.com/reference/android/app/FragmentController.html#dispatchPrepareOptionsMenu(android.view.Menu))
        ///
        /// Required features: "android-view-Menu"
        #[cfg(any(feature = "all", all(feature = "android-view-Menu")))]
        #[deprecated] pub fn dispatchPrepareOptionsMenu<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::Menu>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentController", java.flags == PUBLIC, .name == "dispatchPrepareOptionsMenu", .descriptor == "(Landroid/view/Menu;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentController\0", "dispatchPrepareOptionsMenu\0", "(Landroid/view/Menu;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dispatchOptionsItemSelected](https://developer.android.com/reference/android/app/FragmentController.html#dispatchOptionsItemSelected(android.view.MenuItem))
        ///
        /// Required features: "android-view-MenuItem"
        #[cfg(any(feature = "all", all(feature = "android-view-MenuItem")))]
        #[deprecated] pub fn dispatchOptionsItemSelected<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::MenuItem>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentController", java.flags == PUBLIC, .name == "dispatchOptionsItemSelected", .descriptor == "(Landroid/view/MenuItem;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentController\0", "dispatchOptionsItemSelected\0", "(Landroid/view/MenuItem;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dispatchContextItemSelected](https://developer.android.com/reference/android/app/FragmentController.html#dispatchContextItemSelected(android.view.MenuItem))
        ///
        /// Required features: "android-view-MenuItem"
        #[cfg(any(feature = "all", all(feature = "android-view-MenuItem")))]
        #[deprecated] pub fn dispatchContextItemSelected<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::MenuItem>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentController", java.flags == PUBLIC, .name == "dispatchContextItemSelected", .descriptor == "(Landroid/view/MenuItem;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentController\0", "dispatchContextItemSelected\0", "(Landroid/view/MenuItem;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dispatchOptionsMenuClosed](https://developer.android.com/reference/android/app/FragmentController.html#dispatchOptionsMenuClosed(android.view.Menu))
        ///
        /// Required features: "android-view-Menu"
        #[cfg(any(feature = "all", all(feature = "android-view-Menu")))]
        #[deprecated] pub fn dispatchOptionsMenuClosed<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::Menu>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentController", java.flags == PUBLIC, .name == "dispatchOptionsMenuClosed", .descriptor == "(Landroid/view/Menu;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentController\0", "dispatchOptionsMenuClosed\0", "(Landroid/view/Menu;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [execPendingActions](https://developer.android.com/reference/android/app/FragmentController.html#execPendingActions())
        #[deprecated] pub fn execPendingActions<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentController", java.flags == PUBLIC, .name == "execPendingActions", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentController\0", "execPendingActions\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [doLoaderStart](https://developer.android.com/reference/android/app/FragmentController.html#doLoaderStart())
        #[deprecated] pub fn doLoaderStart<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentController", java.flags == PUBLIC, .name == "doLoaderStart", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentController\0", "doLoaderStart\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [doLoaderStop](https://developer.android.com/reference/android/app/FragmentController.html#doLoaderStop(boolean))
        #[deprecated] pub fn doLoaderStop<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentController", java.flags == PUBLIC, .name == "doLoaderStop", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentController\0", "doLoaderStop\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [doLoaderDestroy](https://developer.android.com/reference/android/app/FragmentController.html#doLoaderDestroy())
        #[deprecated] pub fn doLoaderDestroy<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentController", java.flags == PUBLIC, .name == "doLoaderDestroy", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentController\0", "doLoaderDestroy\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [reportLoaderStart](https://developer.android.com/reference/android/app/FragmentController.html#reportLoaderStart())
        #[deprecated] pub fn reportLoaderStart<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentController", java.flags == PUBLIC, .name == "reportLoaderStart", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentController\0", "reportLoaderStart\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [retainLoaderNonConfig](https://developer.android.com/reference/android/app/FragmentController.html#retainLoaderNonConfig())
        ///
        /// Required features: "android-util-ArrayMap"
        #[cfg(any(feature = "all", all(feature = "android-util-ArrayMap")))]
        #[deprecated] pub fn retainLoaderNonConfig<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::util::ArrayMap>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentController", java.flags == PUBLIC, .name == "retainLoaderNonConfig", .descriptor == "()Landroid/util/ArrayMap;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentController\0", "retainLoaderNonConfig\0", "()Landroid/util/ArrayMap;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [restoreLoaderNonConfig](https://developer.android.com/reference/android/app/FragmentController.html#restoreLoaderNonConfig(android.util.ArrayMap))
        ///
        /// Required features: "android-util-ArrayMap"
        #[cfg(any(feature = "all", all(feature = "android-util-ArrayMap")))]
        #[deprecated] pub fn restoreLoaderNonConfig<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::util::ArrayMap>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentController", java.flags == PUBLIC, .name == "restoreLoaderNonConfig", .descriptor == "(Landroid/util/ArrayMap;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentController\0", "restoreLoaderNonConfig\0", "(Landroid/util/ArrayMap;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dumpLoaders](https://developer.android.com/reference/android/app/FragmentController.html#dumpLoaders(java.lang.String,%20java.io.FileDescriptor,%20java.io.PrintWriter,%20java.lang.String%5B%5D))
        ///
        /// Required features: "java-io-FileDescriptor", "java-io-PrintWriter", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-io-FileDescriptor", feature = "java-io-PrintWriter", feature = "java-lang-String")))]
        #[deprecated] pub fn dumpLoaders<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::FileDescriptor>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::PrintWriter>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/FragmentController", java.flags == PUBLIC, .name == "dumpLoaders", .descriptor == "(Ljava/lang/String;Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/FragmentController\0", "dumpLoaders\0", "(Ljava/lang/String;Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
