// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-app-Notification_Action_WearableExtender"))]
__jni_bindgen! {
    /// public final class [Notification.Action.WearableExtender](https://developer.android.com/reference/android/app/Notification.Action.WearableExtender.html)
    ///
    /// Required feature: android-app-Notification_Action_WearableExtender
    public final class Notification_Action_WearableExtender ("android/app/Notification$Action$WearableExtender") extends crate::java::lang::Object, implements crate::android::app::Notification_Action_Extender {

        /// [WearableExtender](https://developer.android.com/reference/android/app/Notification.Action.WearableExtender.html#WearableExtender())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::app::Notification_Action_WearableExtender>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Action$WearableExtender", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Action$WearableExtender\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [WearableExtender](https://developer.android.com/reference/android/app/Notification.Action.WearableExtender.html#WearableExtender(android.app.Notification.Action))
        ///
        /// Required features: "android-app-Notification_Action"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Action")))]
        pub fn new_Action<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Notification_Action>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::app::Notification_Action_WearableExtender>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Action$WearableExtender", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/app/Notification$Action;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Action$WearableExtender\0", "<init>\0", "(Landroid/app/Notification$Action;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [extend](https://developer.android.com/reference/android/app/Notification.Action.WearableExtender.html#extend(android.app.Notification.Action.Builder))
        ///
        /// Required features: "android-app-Notification_Action_Builder"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Action_Builder")))]
        pub fn extend<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Notification_Action_Builder>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Action_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Action$WearableExtender", java.flags == PUBLIC, .name == "extend", .descriptor == "(Landroid/app/Notification$Action$Builder;)Landroid/app/Notification$Action$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Action$WearableExtender\0", "extend\0", "(Landroid/app/Notification$Action$Builder;)Landroid/app/Notification$Action$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clone](https://developer.android.com/reference/android/app/Notification.Action.WearableExtender.html#clone())
        ///
        /// Required features: "android-app-Notification_Action_WearableExtender"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Action_WearableExtender")))]
        pub fn clone<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Action_WearableExtender>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Action$WearableExtender", java.flags == PUBLIC, .name == "clone", .descriptor == "()Landroid/app/Notification$Action$WearableExtender;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Action$WearableExtender\0", "clone\0", "()Landroid/app/Notification$Action$WearableExtender;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAvailableOffline](https://developer.android.com/reference/android/app/Notification.Action.WearableExtender.html#setAvailableOffline(boolean))
        ///
        /// Required features: "android-app-Notification_Action_WearableExtender"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Action_WearableExtender")))]
        pub fn setAvailableOffline<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Action_WearableExtender>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Action$WearableExtender", java.flags == PUBLIC, .name == "setAvailableOffline", .descriptor == "(Z)Landroid/app/Notification$Action$WearableExtender;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Action$WearableExtender\0", "setAvailableOffline\0", "(Z)Landroid/app/Notification$Action$WearableExtender;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isAvailableOffline](https://developer.android.com/reference/android/app/Notification.Action.WearableExtender.html#isAvailableOffline())
        pub fn isAvailableOffline<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Action$WearableExtender", java.flags == PUBLIC, .name == "isAvailableOffline", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Action$WearableExtender\0", "isAvailableOffline\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setInProgressLabel](https://developer.android.com/reference/android/app/Notification.Action.WearableExtender.html#setInProgressLabel(java.lang.CharSequence))
        ///
        /// Required features: "android-app-Notification_Action_WearableExtender", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Action_WearableExtender", feature = "java-lang-CharSequence")))]
        #[deprecated] pub fn setInProgressLabel<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Action_WearableExtender>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Action$WearableExtender", java.flags == PUBLIC, .name == "setInProgressLabel", .descriptor == "(Ljava/lang/CharSequence;)Landroid/app/Notification$Action$WearableExtender;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Action$WearableExtender\0", "setInProgressLabel\0", "(Ljava/lang/CharSequence;)Landroid/app/Notification$Action$WearableExtender;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInProgressLabel](https://developer.android.com/reference/android/app/Notification.Action.WearableExtender.html#getInProgressLabel())
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        #[deprecated] pub fn getInProgressLabel<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::CharSequence>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Action$WearableExtender", java.flags == PUBLIC, .name == "getInProgressLabel", .descriptor == "()Ljava/lang/CharSequence;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Action$WearableExtender\0", "getInProgressLabel\0", "()Ljava/lang/CharSequence;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setConfirmLabel](https://developer.android.com/reference/android/app/Notification.Action.WearableExtender.html#setConfirmLabel(java.lang.CharSequence))
        ///
        /// Required features: "android-app-Notification_Action_WearableExtender", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Action_WearableExtender", feature = "java-lang-CharSequence")))]
        #[deprecated] pub fn setConfirmLabel<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Action_WearableExtender>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Action$WearableExtender", java.flags == PUBLIC, .name == "setConfirmLabel", .descriptor == "(Ljava/lang/CharSequence;)Landroid/app/Notification$Action$WearableExtender;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Action$WearableExtender\0", "setConfirmLabel\0", "(Ljava/lang/CharSequence;)Landroid/app/Notification$Action$WearableExtender;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getConfirmLabel](https://developer.android.com/reference/android/app/Notification.Action.WearableExtender.html#getConfirmLabel())
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        #[deprecated] pub fn getConfirmLabel<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::CharSequence>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Action$WearableExtender", java.flags == PUBLIC, .name == "getConfirmLabel", .descriptor == "()Ljava/lang/CharSequence;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Action$WearableExtender\0", "getConfirmLabel\0", "()Ljava/lang/CharSequence;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setCancelLabel](https://developer.android.com/reference/android/app/Notification.Action.WearableExtender.html#setCancelLabel(java.lang.CharSequence))
        ///
        /// Required features: "android-app-Notification_Action_WearableExtender", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Action_WearableExtender", feature = "java-lang-CharSequence")))]
        #[deprecated] pub fn setCancelLabel<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Action_WearableExtender>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Action$WearableExtender", java.flags == PUBLIC, .name == "setCancelLabel", .descriptor == "(Ljava/lang/CharSequence;)Landroid/app/Notification$Action$WearableExtender;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Action$WearableExtender\0", "setCancelLabel\0", "(Ljava/lang/CharSequence;)Landroid/app/Notification$Action$WearableExtender;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCancelLabel](https://developer.android.com/reference/android/app/Notification.Action.WearableExtender.html#getCancelLabel())
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        #[deprecated] pub fn getCancelLabel<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::CharSequence>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Action$WearableExtender", java.flags == PUBLIC, .name == "getCancelLabel", .descriptor == "()Ljava/lang/CharSequence;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Action$WearableExtender\0", "getCancelLabel\0", "()Ljava/lang/CharSequence;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setHintLaunchesActivity](https://developer.android.com/reference/android/app/Notification.Action.WearableExtender.html#setHintLaunchesActivity(boolean))
        ///
        /// Required features: "android-app-Notification_Action_WearableExtender"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Action_WearableExtender")))]
        pub fn setHintLaunchesActivity<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Action_WearableExtender>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Action$WearableExtender", java.flags == PUBLIC, .name == "setHintLaunchesActivity", .descriptor == "(Z)Landroid/app/Notification$Action$WearableExtender;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Action$WearableExtender\0", "setHintLaunchesActivity\0", "(Z)Landroid/app/Notification$Action$WearableExtender;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getHintLaunchesActivity](https://developer.android.com/reference/android/app/Notification.Action.WearableExtender.html#getHintLaunchesActivity())
        pub fn getHintLaunchesActivity<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Action$WearableExtender", java.flags == PUBLIC, .name == "getHintLaunchesActivity", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Action$WearableExtender\0", "getHintLaunchesActivity\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setHintDisplayActionInline](https://developer.android.com/reference/android/app/Notification.Action.WearableExtender.html#setHintDisplayActionInline(boolean))
        ///
        /// Required features: "android-app-Notification_Action_WearableExtender"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Action_WearableExtender")))]
        pub fn setHintDisplayActionInline<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Action_WearableExtender>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Action$WearableExtender", java.flags == PUBLIC, .name == "setHintDisplayActionInline", .descriptor == "(Z)Landroid/app/Notification$Action$WearableExtender;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Action$WearableExtender\0", "setHintDisplayActionInline\0", "(Z)Landroid/app/Notification$Action$WearableExtender;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getHintDisplayActionInline](https://developer.android.com/reference/android/app/Notification.Action.WearableExtender.html#getHintDisplayActionInline())
        pub fn getHintDisplayActionInline<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$Action$WearableExtender", java.flags == PUBLIC, .name == "getHintDisplayActionInline", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Action$WearableExtender\0", "getHintDisplayActionInline\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Bridge method - type erasure
        // /// [clone](https://developer.android.com/reference/android/app/Notification.Action.WearableExtender.html#clone())
        // ///
        // /// Required features: "java-lang-Object"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        // pub fn clone<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/app/Notification$Action$WearableExtender", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "clone", .descriptor == "()Ljava/lang/Object;"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$Action$WearableExtender\0", "clone\0", "()Ljava/lang/Object;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }
    }
}
