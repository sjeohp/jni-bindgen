// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-app-Notification"))]
__jni_bindgen! {
    /// public class [Notification](https://developer.android.com/reference/android/app/Notification.html)
    ///
    /// Required feature: android-app-Notification
    public class Notification ("android/app/Notification") extends crate::java::lang::Object, implements crate::android::os::Parcelable {

        /// [Notification](https://developer.android.com/reference/android/app/Notification.html#Notification())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::app::Notification>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [Notification](https://developer.android.com/reference/android/app/Notification.html#Notification(int,%20java.lang.CharSequence,%20long))
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        #[deprecated] pub fn new_int_CharSequence_long<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg2: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::app::Notification>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification", java.flags == PUBLIC, .name == "<init>", .descriptor == "(ILjava/lang/CharSequence;J)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification\0", "<init>\0", "(ILjava/lang/CharSequence;J)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [Notification](https://developer.android.com/reference/android/app/Notification.html#Notification(android.os.Parcel))
        ///
        /// Required features: "android-os-Parcel"
        #[cfg(any(feature = "all", all(feature = "android-os-Parcel")))]
        pub fn new_Parcel<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Parcel>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::app::Notification>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/os/Parcel;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification\0", "<init>\0", "(Landroid/os/Parcel;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getGroup](https://developer.android.com/reference/android/app/Notification.html#getGroup())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getGroup<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification", java.flags == PUBLIC, .name == "getGroup", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification\0", "getGroup\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSortKey](https://developer.android.com/reference/android/app/Notification.html#getSortKey())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getSortKey<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification", java.flags == PUBLIC, .name == "getSortKey", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification\0", "getSortKey\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clone](https://developer.android.com/reference/android/app/Notification.html#clone())
        ///
        /// Required features: "android-app-Notification"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification")))]
        pub fn clone<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification", java.flags == PUBLIC, .name == "clone", .descriptor == "()Landroid/app/Notification;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification\0", "clone\0", "()Landroid/app/Notification;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [describeContents](https://developer.android.com/reference/android/app/Notification.html#describeContents())
        pub fn describeContents<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification", java.flags == PUBLIC, .name == "describeContents", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification\0", "describeContents\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [writeToParcel](https://developer.android.com/reference/android/app/Notification.html#writeToParcel(android.os.Parcel,%20int))
        ///
        /// Required features: "android-os-Parcel"
        #[cfg(any(feature = "all", all(feature = "android-os-Parcel")))]
        pub fn writeToParcel<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Parcel>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification", java.flags == PUBLIC, .name == "writeToParcel", .descriptor == "(Landroid/os/Parcel;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification\0", "writeToParcel\0", "(Landroid/os/Parcel;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/android/app/Notification.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getChannelId](https://developer.android.com/reference/android/app/Notification.html#getChannelId())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getChannelId<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification", java.flags == PUBLIC, .name == "getChannelId", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification\0", "getChannelId\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTimeoutAfter](https://developer.android.com/reference/android/app/Notification.html#getTimeoutAfter())
        pub fn getTimeoutAfter<'env>(&'env self) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification", java.flags == PUBLIC, .name == "getTimeoutAfter", .descriptor == "()J"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification\0", "getTimeoutAfter\0", "()J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getBadgeIconType](https://developer.android.com/reference/android/app/Notification.html#getBadgeIconType())
        pub fn getBadgeIconType<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification", java.flags == PUBLIC, .name == "getBadgeIconType", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification\0", "getBadgeIconType\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getShortcutId](https://developer.android.com/reference/android/app/Notification.html#getShortcutId())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getShortcutId<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification", java.flags == PUBLIC, .name == "getShortcutId", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification\0", "getShortcutId\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLocusId](https://developer.android.com/reference/android/app/Notification.html#getLocusId())
        ///
        /// Required features: "android-content-LocusId"
        #[cfg(any(feature = "all", all(feature = "android-content-LocusId")))]
        pub fn getLocusId<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::LocusId>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification", java.flags == PUBLIC, .name == "getLocusId", .descriptor == "()Landroid/content/LocusId;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification\0", "getLocusId\0", "()Landroid/content/LocusId;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSettingsText](https://developer.android.com/reference/android/app/Notification.html#getSettingsText())
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn getSettingsText<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::CharSequence>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification", java.flags == PUBLIC, .name == "getSettingsText", .descriptor == "()Ljava/lang/CharSequence;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification\0", "getSettingsText\0", "()Ljava/lang/CharSequence;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getGroupAlertBehavior](https://developer.android.com/reference/android/app/Notification.html#getGroupAlertBehavior())
        pub fn getGroupAlertBehavior<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification", java.flags == PUBLIC, .name == "getGroupAlertBehavior", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification\0", "getGroupAlertBehavior\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getBubbleMetadata](https://developer.android.com/reference/android/app/Notification.html#getBubbleMetadata())
        ///
        /// Required features: "android-app-Notification_BubbleMetadata"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_BubbleMetadata")))]
        pub fn getBubbleMetadata<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_BubbleMetadata>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification", java.flags == PUBLIC, .name == "getBubbleMetadata", .descriptor == "()Landroid/app/Notification$BubbleMetadata;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification\0", "getBubbleMetadata\0", "()Landroid/app/Notification$BubbleMetadata;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAllowSystemGeneratedContextualActions](https://developer.android.com/reference/android/app/Notification.html#getAllowSystemGeneratedContextualActions())
        pub fn getAllowSystemGeneratedContextualActions<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification", java.flags == PUBLIC, .name == "getAllowSystemGeneratedContextualActions", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification\0", "getAllowSystemGeneratedContextualActions\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSmallIcon](https://developer.android.com/reference/android/app/Notification.html#getSmallIcon())
        ///
        /// Required features: "android-graphics-drawable-Icon"
        #[cfg(any(feature = "all", all(feature = "android-graphics-drawable-Icon")))]
        pub fn getSmallIcon<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::drawable::Icon>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification", java.flags == PUBLIC, .name == "getSmallIcon", .descriptor == "()Landroid/graphics/drawable/Icon;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification\0", "getSmallIcon\0", "()Landroid/graphics/drawable/Icon;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLargeIcon](https://developer.android.com/reference/android/app/Notification.html#getLargeIcon())
        ///
        /// Required features: "android-graphics-drawable-Icon"
        #[cfg(any(feature = "all", all(feature = "android-graphics-drawable-Icon")))]
        pub fn getLargeIcon<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::drawable::Icon>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification", java.flags == PUBLIC, .name == "getLargeIcon", .descriptor == "()Landroid/graphics/drawable/Icon;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification\0", "getLargeIcon\0", "()Landroid/graphics/drawable/Icon;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Bridge method - type erasure
        // /// [clone](https://developer.android.com/reference/android/app/Notification.html#clone())
        // ///
        // /// Required features: "java-lang-Object"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        // pub fn clone<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/app/Notification", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "clone", .descriptor == "()Ljava/lang/Object;"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification\0", "clone\0", "()Ljava/lang/Object;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// **get** public static final [AUDIO_ATTRIBUTES_DEFAULT](https://developer.android.com/reference/android/app/Notification.html#AUDIO_ATTRIBUTES_DEFAULT)
        ///
        /// Required feature: android-media-AudioAttributes
        #[cfg(any(feature = "all", feature = "android-media-AudioAttributes"))]
        pub fn AUDIO_ATTRIBUTES_DEFAULT<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::AudioAttributes>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/app/Notification\0", "AUDIO_ATTRIBUTES_DEFAULT\0", "Landroid/media/AudioAttributes;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// public static final [BADGE_ICON_LARGE](https://developer.android.com/reference/android/app/Notification.html#BADGE_ICON_LARGE)
        pub const BADGE_ICON_LARGE : i32 = 2;

        /// public static final [BADGE_ICON_NONE](https://developer.android.com/reference/android/app/Notification.html#BADGE_ICON_NONE)
        pub const BADGE_ICON_NONE : i32 = 0;

        /// public static final [BADGE_ICON_SMALL](https://developer.android.com/reference/android/app/Notification.html#BADGE_ICON_SMALL)
        pub const BADGE_ICON_SMALL : i32 = 1;

        /// public static final [CATEGORY_ALARM](https://developer.android.com/reference/android/app/Notification.html#CATEGORY_ALARM)
        pub const CATEGORY_ALARM : &'static str = "alarm";

        /// public static final [CATEGORY_CALL](https://developer.android.com/reference/android/app/Notification.html#CATEGORY_CALL)
        pub const CATEGORY_CALL : &'static str = "call";

        /// public static final [CATEGORY_EMAIL](https://developer.android.com/reference/android/app/Notification.html#CATEGORY_EMAIL)
        pub const CATEGORY_EMAIL : &'static str = "email";

        /// public static final [CATEGORY_ERROR](https://developer.android.com/reference/android/app/Notification.html#CATEGORY_ERROR)
        pub const CATEGORY_ERROR : &'static str = "err";

        /// public static final [CATEGORY_EVENT](https://developer.android.com/reference/android/app/Notification.html#CATEGORY_EVENT)
        pub const CATEGORY_EVENT : &'static str = "event";

        /// public static final [CATEGORY_MESSAGE](https://developer.android.com/reference/android/app/Notification.html#CATEGORY_MESSAGE)
        pub const CATEGORY_MESSAGE : &'static str = "msg";

        /// public static final [CATEGORY_NAVIGATION](https://developer.android.com/reference/android/app/Notification.html#CATEGORY_NAVIGATION)
        pub const CATEGORY_NAVIGATION : &'static str = "navigation";

        /// public static final [CATEGORY_PROGRESS](https://developer.android.com/reference/android/app/Notification.html#CATEGORY_PROGRESS)
        pub const CATEGORY_PROGRESS : &'static str = "progress";

        /// public static final [CATEGORY_PROMO](https://developer.android.com/reference/android/app/Notification.html#CATEGORY_PROMO)
        pub const CATEGORY_PROMO : &'static str = "promo";

        /// public static final [CATEGORY_RECOMMENDATION](https://developer.android.com/reference/android/app/Notification.html#CATEGORY_RECOMMENDATION)
        pub const CATEGORY_RECOMMENDATION : &'static str = "recommendation";

        /// public static final [CATEGORY_REMINDER](https://developer.android.com/reference/android/app/Notification.html#CATEGORY_REMINDER)
        pub const CATEGORY_REMINDER : &'static str = "reminder";

        /// public static final [CATEGORY_SERVICE](https://developer.android.com/reference/android/app/Notification.html#CATEGORY_SERVICE)
        pub const CATEGORY_SERVICE : &'static str = "service";

        /// public static final [CATEGORY_SOCIAL](https://developer.android.com/reference/android/app/Notification.html#CATEGORY_SOCIAL)
        pub const CATEGORY_SOCIAL : &'static str = "social";

        /// public static final [CATEGORY_STATUS](https://developer.android.com/reference/android/app/Notification.html#CATEGORY_STATUS)
        pub const CATEGORY_STATUS : &'static str = "status";

        /// public static final [CATEGORY_SYSTEM](https://developer.android.com/reference/android/app/Notification.html#CATEGORY_SYSTEM)
        pub const CATEGORY_SYSTEM : &'static str = "sys";

        /// public static final [CATEGORY_TRANSPORT](https://developer.android.com/reference/android/app/Notification.html#CATEGORY_TRANSPORT)
        pub const CATEGORY_TRANSPORT : &'static str = "transport";

        /// public static final [COLOR_DEFAULT](https://developer.android.com/reference/android/app/Notification.html#COLOR_DEFAULT)
        pub const COLOR_DEFAULT : i32 = 0;

        /// **get** public static final [CREATOR](https://developer.android.com/reference/android/app/Notification.html#CREATOR)
        ///
        /// Required feature: android-os-Parcelable_Creator
        #[cfg(any(feature = "all", feature = "android-os-Parcelable_Creator"))]
        pub fn CREATOR<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Parcelable_Creator>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/app/Notification\0", "CREATOR\0", "Landroid/os/Parcelable$Creator;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// public static final [DEFAULT_ALL](https://developer.android.com/reference/android/app/Notification.html#DEFAULT_ALL)
        pub const DEFAULT_ALL : i32 = -1;

        /// public static final [DEFAULT_LIGHTS](https://developer.android.com/reference/android/app/Notification.html#DEFAULT_LIGHTS)
        pub const DEFAULT_LIGHTS : i32 = 4;

        /// public static final [DEFAULT_SOUND](https://developer.android.com/reference/android/app/Notification.html#DEFAULT_SOUND)
        pub const DEFAULT_SOUND : i32 = 1;

        /// public static final [DEFAULT_VIBRATE](https://developer.android.com/reference/android/app/Notification.html#DEFAULT_VIBRATE)
        pub const DEFAULT_VIBRATE : i32 = 2;

        /// public static final [EXTRA_AUDIO_CONTENTS_URI](https://developer.android.com/reference/android/app/Notification.html#EXTRA_AUDIO_CONTENTS_URI)
        pub const EXTRA_AUDIO_CONTENTS_URI : &'static str = "android.audioContents";

        /// public static final [EXTRA_BACKGROUND_IMAGE_URI](https://developer.android.com/reference/android/app/Notification.html#EXTRA_BACKGROUND_IMAGE_URI)
        pub const EXTRA_BACKGROUND_IMAGE_URI : &'static str = "android.backgroundImageUri";

        /// public static final [EXTRA_BIG_TEXT](https://developer.android.com/reference/android/app/Notification.html#EXTRA_BIG_TEXT)
        pub const EXTRA_BIG_TEXT : &'static str = "android.bigText";

        /// public static final [EXTRA_CHANNEL_GROUP_ID](https://developer.android.com/reference/android/app/Notification.html#EXTRA_CHANNEL_GROUP_ID)
        pub const EXTRA_CHANNEL_GROUP_ID : &'static str = "android.intent.extra.CHANNEL_GROUP_ID";

        /// public static final [EXTRA_CHANNEL_ID](https://developer.android.com/reference/android/app/Notification.html#EXTRA_CHANNEL_ID)
        pub const EXTRA_CHANNEL_ID : &'static str = "android.intent.extra.CHANNEL_ID";

        /// public static final [EXTRA_CHRONOMETER_COUNT_DOWN](https://developer.android.com/reference/android/app/Notification.html#EXTRA_CHRONOMETER_COUNT_DOWN)
        pub const EXTRA_CHRONOMETER_COUNT_DOWN : &'static str = "android.chronometerCountDown";

        /// public static final [EXTRA_COLORIZED](https://developer.android.com/reference/android/app/Notification.html#EXTRA_COLORIZED)
        pub const EXTRA_COLORIZED : &'static str = "android.colorized";

        /// public static final [EXTRA_COMPACT_ACTIONS](https://developer.android.com/reference/android/app/Notification.html#EXTRA_COMPACT_ACTIONS)
        pub const EXTRA_COMPACT_ACTIONS : &'static str = "android.compactActions";

        /// public static final [EXTRA_CONVERSATION_TITLE](https://developer.android.com/reference/android/app/Notification.html#EXTRA_CONVERSATION_TITLE)
        pub const EXTRA_CONVERSATION_TITLE : &'static str = "android.conversationTitle";

        /// public static final [EXTRA_HISTORIC_MESSAGES](https://developer.android.com/reference/android/app/Notification.html#EXTRA_HISTORIC_MESSAGES)
        pub const EXTRA_HISTORIC_MESSAGES : &'static str = "android.messages.historic";

        /// public static final [EXTRA_INFO_TEXT](https://developer.android.com/reference/android/app/Notification.html#EXTRA_INFO_TEXT)
        pub const EXTRA_INFO_TEXT : &'static str = "android.infoText";

        /// public static final [EXTRA_IS_GROUP_CONVERSATION](https://developer.android.com/reference/android/app/Notification.html#EXTRA_IS_GROUP_CONVERSATION)
        pub const EXTRA_IS_GROUP_CONVERSATION : &'static str = "android.isGroupConversation";

        /// public static final [EXTRA_LARGE_ICON](https://developer.android.com/reference/android/app/Notification.html#EXTRA_LARGE_ICON)
        #[deprecated] pub const EXTRA_LARGE_ICON : &'static str = "android.largeIcon";

        /// public static final [EXTRA_LARGE_ICON_BIG](https://developer.android.com/reference/android/app/Notification.html#EXTRA_LARGE_ICON_BIG)
        pub const EXTRA_LARGE_ICON_BIG : &'static str = "android.largeIcon.big";

        /// public static final [EXTRA_MEDIA_SESSION](https://developer.android.com/reference/android/app/Notification.html#EXTRA_MEDIA_SESSION)
        pub const EXTRA_MEDIA_SESSION : &'static str = "android.mediaSession";

        /// public static final [EXTRA_MESSAGES](https://developer.android.com/reference/android/app/Notification.html#EXTRA_MESSAGES)
        pub const EXTRA_MESSAGES : &'static str = "android.messages";

        /// public static final [EXTRA_MESSAGING_PERSON](https://developer.android.com/reference/android/app/Notification.html#EXTRA_MESSAGING_PERSON)
        pub const EXTRA_MESSAGING_PERSON : &'static str = "android.messagingUser";

        /// public static final [EXTRA_NOTIFICATION_ID](https://developer.android.com/reference/android/app/Notification.html#EXTRA_NOTIFICATION_ID)
        pub const EXTRA_NOTIFICATION_ID : &'static str = "android.intent.extra.NOTIFICATION_ID";

        /// public static final [EXTRA_NOTIFICATION_TAG](https://developer.android.com/reference/android/app/Notification.html#EXTRA_NOTIFICATION_TAG)
        pub const EXTRA_NOTIFICATION_TAG : &'static str = "android.intent.extra.NOTIFICATION_TAG";

        /// public static final [EXTRA_PEOPLE](https://developer.android.com/reference/android/app/Notification.html#EXTRA_PEOPLE)
        #[deprecated] pub const EXTRA_PEOPLE : &'static str = "android.people";

        /// public static final [EXTRA_PEOPLE_LIST](https://developer.android.com/reference/android/app/Notification.html#EXTRA_PEOPLE_LIST)
        pub const EXTRA_PEOPLE_LIST : &'static str = "android.people.list";

        /// public static final [EXTRA_PICTURE](https://developer.android.com/reference/android/app/Notification.html#EXTRA_PICTURE)
        pub const EXTRA_PICTURE : &'static str = "android.picture";

        /// public static final [EXTRA_PROGRESS](https://developer.android.com/reference/android/app/Notification.html#EXTRA_PROGRESS)
        pub const EXTRA_PROGRESS : &'static str = "android.progress";

        /// public static final [EXTRA_PROGRESS_INDETERMINATE](https://developer.android.com/reference/android/app/Notification.html#EXTRA_PROGRESS_INDETERMINATE)
        pub const EXTRA_PROGRESS_INDETERMINATE : &'static str = "android.progressIndeterminate";

        /// public static final [EXTRA_PROGRESS_MAX](https://developer.android.com/reference/android/app/Notification.html#EXTRA_PROGRESS_MAX)
        pub const EXTRA_PROGRESS_MAX : &'static str = "android.progressMax";

        /// public static final [EXTRA_REMOTE_INPUT_DRAFT](https://developer.android.com/reference/android/app/Notification.html#EXTRA_REMOTE_INPUT_DRAFT)
        pub const EXTRA_REMOTE_INPUT_DRAFT : &'static str = "android.remoteInputDraft";

        /// public static final [EXTRA_REMOTE_INPUT_HISTORY](https://developer.android.com/reference/android/app/Notification.html#EXTRA_REMOTE_INPUT_HISTORY)
        pub const EXTRA_REMOTE_INPUT_HISTORY : &'static str = "android.remoteInputHistory";

        /// public static final [EXTRA_SELF_DISPLAY_NAME](https://developer.android.com/reference/android/app/Notification.html#EXTRA_SELF_DISPLAY_NAME)
        #[deprecated] pub const EXTRA_SELF_DISPLAY_NAME : &'static str = "android.selfDisplayName";

        /// public static final [EXTRA_SHOW_CHRONOMETER](https://developer.android.com/reference/android/app/Notification.html#EXTRA_SHOW_CHRONOMETER)
        pub const EXTRA_SHOW_CHRONOMETER : &'static str = "android.showChronometer";

        /// public static final [EXTRA_SHOW_WHEN](https://developer.android.com/reference/android/app/Notification.html#EXTRA_SHOW_WHEN)
        pub const EXTRA_SHOW_WHEN : &'static str = "android.showWhen";

        /// public static final [EXTRA_SMALL_ICON](https://developer.android.com/reference/android/app/Notification.html#EXTRA_SMALL_ICON)
        #[deprecated] pub const EXTRA_SMALL_ICON : &'static str = "android.icon";

        /// public static final [EXTRA_SUB_TEXT](https://developer.android.com/reference/android/app/Notification.html#EXTRA_SUB_TEXT)
        pub const EXTRA_SUB_TEXT : &'static str = "android.subText";

        /// public static final [EXTRA_SUMMARY_TEXT](https://developer.android.com/reference/android/app/Notification.html#EXTRA_SUMMARY_TEXT)
        pub const EXTRA_SUMMARY_TEXT : &'static str = "android.summaryText";

        /// public static final [EXTRA_TEMPLATE](https://developer.android.com/reference/android/app/Notification.html#EXTRA_TEMPLATE)
        pub const EXTRA_TEMPLATE : &'static str = "android.template";

        /// public static final [EXTRA_TEXT](https://developer.android.com/reference/android/app/Notification.html#EXTRA_TEXT)
        pub const EXTRA_TEXT : &'static str = "android.text";

        /// public static final [EXTRA_TEXT_LINES](https://developer.android.com/reference/android/app/Notification.html#EXTRA_TEXT_LINES)
        pub const EXTRA_TEXT_LINES : &'static str = "android.textLines";

        /// public static final [EXTRA_TITLE](https://developer.android.com/reference/android/app/Notification.html#EXTRA_TITLE)
        pub const EXTRA_TITLE : &'static str = "android.title";

        /// public static final [EXTRA_TITLE_BIG](https://developer.android.com/reference/android/app/Notification.html#EXTRA_TITLE_BIG)
        pub const EXTRA_TITLE_BIG : &'static str = "android.title.big";

        /// public static final [FLAG_AUTO_CANCEL](https://developer.android.com/reference/android/app/Notification.html#FLAG_AUTO_CANCEL)
        pub const FLAG_AUTO_CANCEL : i32 = 16;

        /// public static final [FLAG_BUBBLE](https://developer.android.com/reference/android/app/Notification.html#FLAG_BUBBLE)
        pub const FLAG_BUBBLE : i32 = 4096;

        /// public static final [FLAG_FOREGROUND_SERVICE](https://developer.android.com/reference/android/app/Notification.html#FLAG_FOREGROUND_SERVICE)
        pub const FLAG_FOREGROUND_SERVICE : i32 = 64;

        /// public static final [FLAG_GROUP_SUMMARY](https://developer.android.com/reference/android/app/Notification.html#FLAG_GROUP_SUMMARY)
        pub const FLAG_GROUP_SUMMARY : i32 = 512;

        /// public static final [FLAG_HIGH_PRIORITY](https://developer.android.com/reference/android/app/Notification.html#FLAG_HIGH_PRIORITY)
        #[deprecated] pub const FLAG_HIGH_PRIORITY : i32 = 128;

        /// public static final [FLAG_INSISTENT](https://developer.android.com/reference/android/app/Notification.html#FLAG_INSISTENT)
        pub const FLAG_INSISTENT : i32 = 4;

        /// public static final [FLAG_LOCAL_ONLY](https://developer.android.com/reference/android/app/Notification.html#FLAG_LOCAL_ONLY)
        pub const FLAG_LOCAL_ONLY : i32 = 256;

        /// public static final [FLAG_NO_CLEAR](https://developer.android.com/reference/android/app/Notification.html#FLAG_NO_CLEAR)
        pub const FLAG_NO_CLEAR : i32 = 32;

        /// public static final [FLAG_ONGOING_EVENT](https://developer.android.com/reference/android/app/Notification.html#FLAG_ONGOING_EVENT)
        pub const FLAG_ONGOING_EVENT : i32 = 2;

        /// public static final [FLAG_ONLY_ALERT_ONCE](https://developer.android.com/reference/android/app/Notification.html#FLAG_ONLY_ALERT_ONCE)
        pub const FLAG_ONLY_ALERT_ONCE : i32 = 8;

        /// public static final [FLAG_SHOW_LIGHTS](https://developer.android.com/reference/android/app/Notification.html#FLAG_SHOW_LIGHTS)
        #[deprecated] pub const FLAG_SHOW_LIGHTS : i32 = 1;

        /// public static final [GROUP_ALERT_ALL](https://developer.android.com/reference/android/app/Notification.html#GROUP_ALERT_ALL)
        pub const GROUP_ALERT_ALL : i32 = 0;

        /// public static final [GROUP_ALERT_CHILDREN](https://developer.android.com/reference/android/app/Notification.html#GROUP_ALERT_CHILDREN)
        pub const GROUP_ALERT_CHILDREN : i32 = 2;

        /// public static final [GROUP_ALERT_SUMMARY](https://developer.android.com/reference/android/app/Notification.html#GROUP_ALERT_SUMMARY)
        pub const GROUP_ALERT_SUMMARY : i32 = 1;

        /// public static final [INTENT_CATEGORY_NOTIFICATION_PREFERENCES](https://developer.android.com/reference/android/app/Notification.html#INTENT_CATEGORY_NOTIFICATION_PREFERENCES)
        pub const INTENT_CATEGORY_NOTIFICATION_PREFERENCES : &'static str = "android.intent.category.NOTIFICATION_PREFERENCES";

        /// public static final [PRIORITY_DEFAULT](https://developer.android.com/reference/android/app/Notification.html#PRIORITY_DEFAULT)
        #[deprecated] pub const PRIORITY_DEFAULT : i32 = 0;

        /// public static final [PRIORITY_HIGH](https://developer.android.com/reference/android/app/Notification.html#PRIORITY_HIGH)
        #[deprecated] pub const PRIORITY_HIGH : i32 = 1;

        /// public static final [PRIORITY_LOW](https://developer.android.com/reference/android/app/Notification.html#PRIORITY_LOW)
        #[deprecated] pub const PRIORITY_LOW : i32 = -1;

        /// public static final [PRIORITY_MAX](https://developer.android.com/reference/android/app/Notification.html#PRIORITY_MAX)
        #[deprecated] pub const PRIORITY_MAX : i32 = 2;

        /// public static final [PRIORITY_MIN](https://developer.android.com/reference/android/app/Notification.html#PRIORITY_MIN)
        #[deprecated] pub const PRIORITY_MIN : i32 = -2;

        /// public static final [STREAM_DEFAULT](https://developer.android.com/reference/android/app/Notification.html#STREAM_DEFAULT)
        #[deprecated] pub const STREAM_DEFAULT : i32 = -1;

        /// public static final [VISIBILITY_PRIVATE](https://developer.android.com/reference/android/app/Notification.html#VISIBILITY_PRIVATE)
        pub const VISIBILITY_PRIVATE : i32 = 0;

        /// public static final [VISIBILITY_PUBLIC](https://developer.android.com/reference/android/app/Notification.html#VISIBILITY_PUBLIC)
        pub const VISIBILITY_PUBLIC : i32 = 1;

        /// public static final [VISIBILITY_SECRET](https://developer.android.com/reference/android/app/Notification.html#VISIBILITY_SECRET)
        pub const VISIBILITY_SECRET : i32 = -1;

        /// **get** public [actions](https://developer.android.com/reference/android/app/Notification.html#actions)
        ///
        /// Required feature: android-app-Notification_Action
        #[cfg(any(feature = "all", feature = "android-app-Notification_Action"))]
        pub fn actions<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::android::app::Notification_Action, crate::java::lang::Throwable>>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/Notification\0", "actions\0", "[Landroid/app/Notification$Action;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [actions](https://developer.android.com/reference/android/app/Notification.html#actions)
        ///
        /// Required feature: android-app-Notification_Action
        #[cfg(any(feature = "all", feature = "android-app-Notification_Action"))]
        pub fn set_actions<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj __jni_bindgen::ObjectArray<crate::android::app::Notification_Action, crate::java::lang::Throwable>>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/Notification\0", "actions\0", "[Landroid/app/Notification$Action;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [audioAttributes](https://developer.android.com/reference/android/app/Notification.html#audioAttributes)
        ///
        /// Required feature: android-media-AudioAttributes
        #[cfg(any(feature = "all", feature = "android-media-AudioAttributes"))]
        #[deprecated] pub fn audioAttributes<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::AudioAttributes>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/Notification\0", "audioAttributes\0", "Landroid/media/AudioAttributes;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [audioAttributes](https://developer.android.com/reference/android/app/Notification.html#audioAttributes)
        ///
        /// Required feature: android-media-AudioAttributes
        #[cfg(any(feature = "all", feature = "android-media-AudioAttributes"))]
        #[deprecated] pub fn set_audioAttributes<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::android::media::AudioAttributes>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/Notification\0", "audioAttributes\0", "Landroid/media/AudioAttributes;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [audioStreamType](https://developer.android.com/reference/android/app/Notification.html#audioStreamType)
        #[deprecated] pub fn audioStreamType<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/Notification\0", "audioStreamType\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [audioStreamType](https://developer.android.com/reference/android/app/Notification.html#audioStreamType)
        #[deprecated] pub fn set_audioStreamType<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/Notification\0", "audioStreamType\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [bigContentView](https://developer.android.com/reference/android/app/Notification.html#bigContentView)
        ///
        /// Required feature: android-widget-RemoteViews
        #[cfg(any(feature = "all", feature = "android-widget-RemoteViews"))]
        #[deprecated] pub fn bigContentView<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::widget::RemoteViews>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/Notification\0", "bigContentView\0", "Landroid/widget/RemoteViews;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [bigContentView](https://developer.android.com/reference/android/app/Notification.html#bigContentView)
        ///
        /// Required feature: android-widget-RemoteViews
        #[cfg(any(feature = "all", feature = "android-widget-RemoteViews"))]
        #[deprecated] pub fn set_bigContentView<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::android::widget::RemoteViews>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/Notification\0", "bigContentView\0", "Landroid/widget/RemoteViews;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [category](https://developer.android.com/reference/android/app/Notification.html#category)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn category<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/Notification\0", "category\0", "Ljava/lang/String;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [category](https://developer.android.com/reference/android/app/Notification.html#category)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn set_category<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::java::lang::String>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/Notification\0", "category\0", "Ljava/lang/String;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [color](https://developer.android.com/reference/android/app/Notification.html#color)
        pub fn color<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/Notification\0", "color\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [color](https://developer.android.com/reference/android/app/Notification.html#color)
        pub fn set_color<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/Notification\0", "color\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [contentIntent](https://developer.android.com/reference/android/app/Notification.html#contentIntent)
        ///
        /// Required feature: android-app-PendingIntent
        #[cfg(any(feature = "all", feature = "android-app-PendingIntent"))]
        pub fn contentIntent<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::PendingIntent>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/Notification\0", "contentIntent\0", "Landroid/app/PendingIntent;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [contentIntent](https://developer.android.com/reference/android/app/Notification.html#contentIntent)
        ///
        /// Required feature: android-app-PendingIntent
        #[cfg(any(feature = "all", feature = "android-app-PendingIntent"))]
        pub fn set_contentIntent<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::android::app::PendingIntent>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/Notification\0", "contentIntent\0", "Landroid/app/PendingIntent;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [contentView](https://developer.android.com/reference/android/app/Notification.html#contentView)
        ///
        /// Required feature: android-widget-RemoteViews
        #[cfg(any(feature = "all", feature = "android-widget-RemoteViews"))]
        #[deprecated] pub fn contentView<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::widget::RemoteViews>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/Notification\0", "contentView\0", "Landroid/widget/RemoteViews;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [contentView](https://developer.android.com/reference/android/app/Notification.html#contentView)
        ///
        /// Required feature: android-widget-RemoteViews
        #[cfg(any(feature = "all", feature = "android-widget-RemoteViews"))]
        #[deprecated] pub fn set_contentView<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::android::widget::RemoteViews>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/Notification\0", "contentView\0", "Landroid/widget/RemoteViews;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [defaults](https://developer.android.com/reference/android/app/Notification.html#defaults)
        #[deprecated] pub fn defaults<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/Notification\0", "defaults\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [defaults](https://developer.android.com/reference/android/app/Notification.html#defaults)
        #[deprecated] pub fn set_defaults<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/Notification\0", "defaults\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [deleteIntent](https://developer.android.com/reference/android/app/Notification.html#deleteIntent)
        ///
        /// Required feature: android-app-PendingIntent
        #[cfg(any(feature = "all", feature = "android-app-PendingIntent"))]
        pub fn deleteIntent<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::PendingIntent>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/Notification\0", "deleteIntent\0", "Landroid/app/PendingIntent;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [deleteIntent](https://developer.android.com/reference/android/app/Notification.html#deleteIntent)
        ///
        /// Required feature: android-app-PendingIntent
        #[cfg(any(feature = "all", feature = "android-app-PendingIntent"))]
        pub fn set_deleteIntent<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::android::app::PendingIntent>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/Notification\0", "deleteIntent\0", "Landroid/app/PendingIntent;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [extras](https://developer.android.com/reference/android/app/Notification.html#extras)
        ///
        /// Required feature: android-os-Bundle
        #[cfg(any(feature = "all", feature = "android-os-Bundle"))]
        pub fn extras<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Bundle>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/Notification\0", "extras\0", "Landroid/os/Bundle;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [extras](https://developer.android.com/reference/android/app/Notification.html#extras)
        ///
        /// Required feature: android-os-Bundle
        #[cfg(any(feature = "all", feature = "android-os-Bundle"))]
        pub fn set_extras<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::android::os::Bundle>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/Notification\0", "extras\0", "Landroid/os/Bundle;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [flags](https://developer.android.com/reference/android/app/Notification.html#flags)
        pub fn flags<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/Notification\0", "flags\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [flags](https://developer.android.com/reference/android/app/Notification.html#flags)
        pub fn set_flags<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/Notification\0", "flags\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [fullScreenIntent](https://developer.android.com/reference/android/app/Notification.html#fullScreenIntent)
        ///
        /// Required feature: android-app-PendingIntent
        #[cfg(any(feature = "all", feature = "android-app-PendingIntent"))]
        pub fn fullScreenIntent<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::PendingIntent>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/Notification\0", "fullScreenIntent\0", "Landroid/app/PendingIntent;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [fullScreenIntent](https://developer.android.com/reference/android/app/Notification.html#fullScreenIntent)
        ///
        /// Required feature: android-app-PendingIntent
        #[cfg(any(feature = "all", feature = "android-app-PendingIntent"))]
        pub fn set_fullScreenIntent<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::android::app::PendingIntent>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/Notification\0", "fullScreenIntent\0", "Landroid/app/PendingIntent;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [headsUpContentView](https://developer.android.com/reference/android/app/Notification.html#headsUpContentView)
        ///
        /// Required feature: android-widget-RemoteViews
        #[cfg(any(feature = "all", feature = "android-widget-RemoteViews"))]
        #[deprecated] pub fn headsUpContentView<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::widget::RemoteViews>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/Notification\0", "headsUpContentView\0", "Landroid/widget/RemoteViews;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [headsUpContentView](https://developer.android.com/reference/android/app/Notification.html#headsUpContentView)
        ///
        /// Required feature: android-widget-RemoteViews
        #[cfg(any(feature = "all", feature = "android-widget-RemoteViews"))]
        #[deprecated] pub fn set_headsUpContentView<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::android::widget::RemoteViews>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/Notification\0", "headsUpContentView\0", "Landroid/widget/RemoteViews;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [icon](https://developer.android.com/reference/android/app/Notification.html#icon)
        #[deprecated] pub fn icon<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/Notification\0", "icon\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [icon](https://developer.android.com/reference/android/app/Notification.html#icon)
        #[deprecated] pub fn set_icon<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/Notification\0", "icon\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [iconLevel](https://developer.android.com/reference/android/app/Notification.html#iconLevel)
        pub fn iconLevel<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/Notification\0", "iconLevel\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [iconLevel](https://developer.android.com/reference/android/app/Notification.html#iconLevel)
        pub fn set_iconLevel<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/Notification\0", "iconLevel\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [largeIcon](https://developer.android.com/reference/android/app/Notification.html#largeIcon)
        ///
        /// Required feature: android-graphics-Bitmap
        #[cfg(any(feature = "all", feature = "android-graphics-Bitmap"))]
        #[deprecated] pub fn largeIcon<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Bitmap>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/Notification\0", "largeIcon\0", "Landroid/graphics/Bitmap;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [largeIcon](https://developer.android.com/reference/android/app/Notification.html#largeIcon)
        ///
        /// Required feature: android-graphics-Bitmap
        #[cfg(any(feature = "all", feature = "android-graphics-Bitmap"))]
        #[deprecated] pub fn set_largeIcon<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::android::graphics::Bitmap>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/Notification\0", "largeIcon\0", "Landroid/graphics/Bitmap;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [ledARGB](https://developer.android.com/reference/android/app/Notification.html#ledARGB)
        #[deprecated] pub fn ledARGB<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/Notification\0", "ledARGB\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [ledARGB](https://developer.android.com/reference/android/app/Notification.html#ledARGB)
        #[deprecated] pub fn set_ledARGB<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/Notification\0", "ledARGB\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [ledOffMS](https://developer.android.com/reference/android/app/Notification.html#ledOffMS)
        #[deprecated] pub fn ledOffMS<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/Notification\0", "ledOffMS\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [ledOffMS](https://developer.android.com/reference/android/app/Notification.html#ledOffMS)
        #[deprecated] pub fn set_ledOffMS<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/Notification\0", "ledOffMS\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [ledOnMS](https://developer.android.com/reference/android/app/Notification.html#ledOnMS)
        #[deprecated] pub fn ledOnMS<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/Notification\0", "ledOnMS\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [ledOnMS](https://developer.android.com/reference/android/app/Notification.html#ledOnMS)
        #[deprecated] pub fn set_ledOnMS<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/Notification\0", "ledOnMS\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [number](https://developer.android.com/reference/android/app/Notification.html#number)
        pub fn number<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/Notification\0", "number\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [number](https://developer.android.com/reference/android/app/Notification.html#number)
        pub fn set_number<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/Notification\0", "number\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [priority](https://developer.android.com/reference/android/app/Notification.html#priority)
        #[deprecated] pub fn priority<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/Notification\0", "priority\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [priority](https://developer.android.com/reference/android/app/Notification.html#priority)
        #[deprecated] pub fn set_priority<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/Notification\0", "priority\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [publicVersion](https://developer.android.com/reference/android/app/Notification.html#publicVersion)
        ///
        /// Required feature: android-app-Notification
        #[cfg(any(feature = "all", feature = "android-app-Notification"))]
        pub fn publicVersion<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/Notification\0", "publicVersion\0", "Landroid/app/Notification;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [publicVersion](https://developer.android.com/reference/android/app/Notification.html#publicVersion)
        ///
        /// Required feature: android-app-Notification
        #[cfg(any(feature = "all", feature = "android-app-Notification"))]
        pub fn set_publicVersion<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::android::app::Notification>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/Notification\0", "publicVersion\0", "Landroid/app/Notification;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [sound](https://developer.android.com/reference/android/app/Notification.html#sound)
        ///
        /// Required feature: android-net-Uri
        #[cfg(any(feature = "all", feature = "android-net-Uri"))]
        #[deprecated] pub fn sound<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/Notification\0", "sound\0", "Landroid/net/Uri;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [sound](https://developer.android.com/reference/android/app/Notification.html#sound)
        ///
        /// Required feature: android-net-Uri
        #[cfg(any(feature = "all", feature = "android-net-Uri"))]
        #[deprecated] pub fn set_sound<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::android::net::Uri>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/Notification\0", "sound\0", "Landroid/net/Uri;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [tickerText](https://developer.android.com/reference/android/app/Notification.html#tickerText)
        ///
        /// Required feature: java-lang-CharSequence
        #[cfg(any(feature = "all", feature = "java-lang-CharSequence"))]
        pub fn tickerText<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::CharSequence>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/Notification\0", "tickerText\0", "Ljava/lang/CharSequence;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [tickerText](https://developer.android.com/reference/android/app/Notification.html#tickerText)
        ///
        /// Required feature: java-lang-CharSequence
        #[cfg(any(feature = "all", feature = "java-lang-CharSequence"))]
        pub fn set_tickerText<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::java::lang::CharSequence>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/Notification\0", "tickerText\0", "Ljava/lang/CharSequence;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [tickerView](https://developer.android.com/reference/android/app/Notification.html#tickerView)
        ///
        /// Required feature: android-widget-RemoteViews
        #[cfg(any(feature = "all", feature = "android-widget-RemoteViews"))]
        #[deprecated] pub fn tickerView<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::widget::RemoteViews>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/Notification\0", "tickerView\0", "Landroid/widget/RemoteViews;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [tickerView](https://developer.android.com/reference/android/app/Notification.html#tickerView)
        ///
        /// Required feature: android-widget-RemoteViews
        #[cfg(any(feature = "all", feature = "android-widget-RemoteViews"))]
        #[deprecated] pub fn set_tickerView<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::android::widget::RemoteViews>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/Notification\0", "tickerView\0", "Landroid/widget/RemoteViews;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [vibrate](https://developer.android.com/reference/android/app/Notification.html#vibrate)
        #[deprecated] pub fn vibrate<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::LongArray>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/Notification\0", "vibrate\0", "[J\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [vibrate](https://developer.android.com/reference/android/app/Notification.html#vibrate)
        #[deprecated] pub fn set_vibrate<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj __jni_bindgen::LongArray>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/Notification\0", "vibrate\0", "[J\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [visibility](https://developer.android.com/reference/android/app/Notification.html#visibility)
        pub fn visibility<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/Notification\0", "visibility\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [visibility](https://developer.android.com/reference/android/app/Notification.html#visibility)
        pub fn set_visibility<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/Notification\0", "visibility\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [when](https://developer.android.com/reference/android/app/Notification.html#when)
        pub fn when<'env>(&'env self) -> i64 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/Notification\0", "when\0", "J\0");
                env.get_long_field(class, field)
            }
        }

        /// **set** public [when](https://developer.android.com/reference/android/app/Notification.html#when)
        pub fn set_when<'env>(&'env self, value: i64) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/Notification\0", "when\0", "J\0");
                env.set_long_field(class, field, value)
            }
        }
    }
}
