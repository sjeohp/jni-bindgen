// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-app-Notification_CarExtender_UnreadConversation"))]
__jni_bindgen! {
    /// public class [Notification.CarExtender.UnreadConversation](https://developer.android.com/reference/android/app/Notification.CarExtender.UnreadConversation.html)
    ///
    /// Required feature: android-app-Notification_CarExtender_UnreadConversation
    public class Notification_CarExtender_UnreadConversation ("android/app/Notification$CarExtender$UnreadConversation") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [UnreadConversation](https://developer.android.com/reference/android/app/Notification.CarExtender.UnreadConversation.html#UnreadConversation(java.lang.String%5B%5D,%20android.app.RemoteInput,%20android.app.PendingIntent,%20android.app.PendingIntent,%20java.lang.String%5B%5D,%20long))
        // ///
        // /// Required features: "android-app-PendingIntent", "android-app-RemoteInput", "java-lang-String"
        // #[cfg(any(feature = "all", all(feature = "android-app-PendingIntent", feature = "android-app-RemoteInput", feature = "java-lang-String")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::RemoteInput>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::PendingIntent>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::PendingIntent>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, arg5: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::app::Notification_CarExtender_UnreadConversation>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/app/Notification$CarExtender$UnreadConversation", java.flags == (empty), .name == "<init>", .descriptor == "([Ljava/lang/String;Landroid/app/RemoteInput;Landroid/app/PendingIntent;Landroid/app/PendingIntent;[Ljava/lang/String;J)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5)];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$CarExtender$UnreadConversation\0", "<init>\0", "([Ljava/lang/String;Landroid/app/RemoteInput;Landroid/app/PendingIntent;Landroid/app/PendingIntent;[Ljava/lang/String;J)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getMessages](https://developer.android.com/reference/android/app/Notification.CarExtender.UnreadConversation.html#getMessages())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getMessages<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$CarExtender$UnreadConversation", java.flags == PUBLIC, .name == "getMessages", .descriptor == "()[Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$CarExtender$UnreadConversation\0", "getMessages\0", "()[Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRemoteInput](https://developer.android.com/reference/android/app/Notification.CarExtender.UnreadConversation.html#getRemoteInput())
        ///
        /// Required features: "android-app-RemoteInput"
        #[cfg(any(feature = "all", all(feature = "android-app-RemoteInput")))]
        pub fn getRemoteInput<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::RemoteInput>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$CarExtender$UnreadConversation", java.flags == PUBLIC, .name == "getRemoteInput", .descriptor == "()Landroid/app/RemoteInput;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$CarExtender$UnreadConversation\0", "getRemoteInput\0", "()Landroid/app/RemoteInput;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getReplyPendingIntent](https://developer.android.com/reference/android/app/Notification.CarExtender.UnreadConversation.html#getReplyPendingIntent())
        ///
        /// Required features: "android-app-PendingIntent"
        #[cfg(any(feature = "all", all(feature = "android-app-PendingIntent")))]
        pub fn getReplyPendingIntent<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::PendingIntent>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$CarExtender$UnreadConversation", java.flags == PUBLIC, .name == "getReplyPendingIntent", .descriptor == "()Landroid/app/PendingIntent;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$CarExtender$UnreadConversation\0", "getReplyPendingIntent\0", "()Landroid/app/PendingIntent;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getReadPendingIntent](https://developer.android.com/reference/android/app/Notification.CarExtender.UnreadConversation.html#getReadPendingIntent())
        ///
        /// Required features: "android-app-PendingIntent"
        #[cfg(any(feature = "all", all(feature = "android-app-PendingIntent")))]
        pub fn getReadPendingIntent<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::PendingIntent>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$CarExtender$UnreadConversation", java.flags == PUBLIC, .name == "getReadPendingIntent", .descriptor == "()Landroid/app/PendingIntent;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$CarExtender$UnreadConversation\0", "getReadPendingIntent\0", "()Landroid/app/PendingIntent;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getParticipants](https://developer.android.com/reference/android/app/Notification.CarExtender.UnreadConversation.html#getParticipants())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getParticipants<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$CarExtender$UnreadConversation", java.flags == PUBLIC, .name == "getParticipants", .descriptor == "()[Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$CarExtender$UnreadConversation\0", "getParticipants\0", "()[Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getParticipant](https://developer.android.com/reference/android/app/Notification.CarExtender.UnreadConversation.html#getParticipant())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getParticipant<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$CarExtender$UnreadConversation", java.flags == PUBLIC, .name == "getParticipant", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$CarExtender$UnreadConversation\0", "getParticipant\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLatestTimestamp](https://developer.android.com/reference/android/app/Notification.CarExtender.UnreadConversation.html#getLatestTimestamp())
        pub fn getLatestTimestamp<'env>(&'env self) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$CarExtender$UnreadConversation", java.flags == PUBLIC, .name == "getLatestTimestamp", .descriptor == "()J"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$CarExtender$UnreadConversation\0", "getLatestTimestamp\0", "()J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
