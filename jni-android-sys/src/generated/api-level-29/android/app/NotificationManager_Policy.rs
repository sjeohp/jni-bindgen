// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-app-NotificationManager_Policy"))]
__jni_bindgen! {
    /// public class [NotificationManager.Policy](https://developer.android.com/reference/android/app/NotificationManager.Policy.html)
    ///
    /// Required feature: android-app-NotificationManager_Policy
    public class NotificationManager_Policy ("android/app/NotificationManager$Policy") extends crate::java::lang::Object, implements crate::android::os::Parcelable {

        /// [Policy](https://developer.android.com/reference/android/app/NotificationManager.Policy.html#Policy(int,%20int,%20int))
        pub fn new_int_int_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::app::NotificationManager_Policy>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/NotificationManager$Policy", java.flags == PUBLIC, .name == "<init>", .descriptor == "(III)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/NotificationManager$Policy\0", "<init>\0", "(III)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [Policy](https://developer.android.com/reference/android/app/NotificationManager.Policy.html#Policy(int,%20int,%20int,%20int))
        pub fn new_int_int_int_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::app::NotificationManager_Policy>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/NotificationManager$Policy", java.flags == PUBLIC, .name == "<init>", .descriptor == "(IIII)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/NotificationManager$Policy\0", "<init>\0", "(IIII)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [writeToParcel](https://developer.android.com/reference/android/app/NotificationManager.Policy.html#writeToParcel(android.os.Parcel,%20int))
        ///
        /// Required features: "android-os-Parcel"
        #[cfg(any(feature = "all", all(feature = "android-os-Parcel")))]
        pub fn writeToParcel<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Parcel>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/NotificationManager$Policy", java.flags == PUBLIC, .name == "writeToParcel", .descriptor == "(Landroid/os/Parcel;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/NotificationManager$Policy\0", "writeToParcel\0", "(Landroid/os/Parcel;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [describeContents](https://developer.android.com/reference/android/app/NotificationManager.Policy.html#describeContents())
        pub fn describeContents<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/NotificationManager$Policy", java.flags == PUBLIC, .name == "describeContents", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/NotificationManager$Policy\0", "describeContents\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hashCode](https://developer.android.com/reference/android/app/NotificationManager.Policy.html#hashCode())
        pub fn hashCode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/NotificationManager$Policy", java.flags == PUBLIC, .name == "hashCode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/NotificationManager$Policy\0", "hashCode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [equals](https://developer.android.com/reference/android/app/NotificationManager.Policy.html#equals(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn equals<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/NotificationManager$Policy", java.flags == PUBLIC, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/NotificationManager$Policy\0", "equals\0", "(Ljava/lang/Object;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/android/app/NotificationManager.Policy.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/NotificationManager$Policy", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/NotificationManager$Policy\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [suppressedEffectsToString](https://developer.android.com/reference/android/app/NotificationManager.Policy.html#suppressedEffectsToString(int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn suppressedEffectsToString<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/NotificationManager$Policy", java.flags == PUBLIC | STATIC, .name == "suppressedEffectsToString", .descriptor == "(I)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/app/NotificationManager$Policy\0", "suppressedEffectsToString\0", "(I)Ljava/lang/String;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [priorityCategoriesToString](https://developer.android.com/reference/android/app/NotificationManager.Policy.html#priorityCategoriesToString(int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn priorityCategoriesToString<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/NotificationManager$Policy", java.flags == PUBLIC | STATIC, .name == "priorityCategoriesToString", .descriptor == "(I)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/app/NotificationManager$Policy\0", "priorityCategoriesToString\0", "(I)Ljava/lang/String;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [prioritySendersToString](https://developer.android.com/reference/android/app/NotificationManager.Policy.html#prioritySendersToString(int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn prioritySendersToString<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/NotificationManager$Policy", java.flags == PUBLIC | STATIC, .name == "prioritySendersToString", .descriptor == "(I)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/app/NotificationManager$Policy\0", "prioritySendersToString\0", "(I)Ljava/lang/String;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// **get** public static final [CREATOR](https://developer.android.com/reference/android/app/NotificationManager.Policy.html#CREATOR)
        ///
        /// Required feature: android-os-Parcelable_Creator
        #[cfg(any(feature = "all", feature = "android-os-Parcelable_Creator"))]
        pub fn CREATOR<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Parcelable_Creator>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/app/NotificationManager$Policy\0", "CREATOR\0", "Landroid/os/Parcelable$Creator;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// public static final [PRIORITY_CATEGORY_ALARMS](https://developer.android.com/reference/android/app/NotificationManager.Policy.html#PRIORITY_CATEGORY_ALARMS)
        pub const PRIORITY_CATEGORY_ALARMS : i32 = 32;

        /// public static final [PRIORITY_CATEGORY_CALLS](https://developer.android.com/reference/android/app/NotificationManager.Policy.html#PRIORITY_CATEGORY_CALLS)
        pub const PRIORITY_CATEGORY_CALLS : i32 = 8;

        /// public static final [PRIORITY_CATEGORY_EVENTS](https://developer.android.com/reference/android/app/NotificationManager.Policy.html#PRIORITY_CATEGORY_EVENTS)
        pub const PRIORITY_CATEGORY_EVENTS : i32 = 2;

        /// public static final [PRIORITY_CATEGORY_MEDIA](https://developer.android.com/reference/android/app/NotificationManager.Policy.html#PRIORITY_CATEGORY_MEDIA)
        pub const PRIORITY_CATEGORY_MEDIA : i32 = 64;

        /// public static final [PRIORITY_CATEGORY_MESSAGES](https://developer.android.com/reference/android/app/NotificationManager.Policy.html#PRIORITY_CATEGORY_MESSAGES)
        pub const PRIORITY_CATEGORY_MESSAGES : i32 = 4;

        /// public static final [PRIORITY_CATEGORY_REMINDERS](https://developer.android.com/reference/android/app/NotificationManager.Policy.html#PRIORITY_CATEGORY_REMINDERS)
        pub const PRIORITY_CATEGORY_REMINDERS : i32 = 1;

        /// public static final [PRIORITY_CATEGORY_REPEAT_CALLERS](https://developer.android.com/reference/android/app/NotificationManager.Policy.html#PRIORITY_CATEGORY_REPEAT_CALLERS)
        pub const PRIORITY_CATEGORY_REPEAT_CALLERS : i32 = 16;

        /// public static final [PRIORITY_CATEGORY_SYSTEM](https://developer.android.com/reference/android/app/NotificationManager.Policy.html#PRIORITY_CATEGORY_SYSTEM)
        pub const PRIORITY_CATEGORY_SYSTEM : i32 = 128;

        /// public static final [PRIORITY_SENDERS_ANY](https://developer.android.com/reference/android/app/NotificationManager.Policy.html#PRIORITY_SENDERS_ANY)
        pub const PRIORITY_SENDERS_ANY : i32 = 0;

        /// public static final [PRIORITY_SENDERS_CONTACTS](https://developer.android.com/reference/android/app/NotificationManager.Policy.html#PRIORITY_SENDERS_CONTACTS)
        pub const PRIORITY_SENDERS_CONTACTS : i32 = 1;

        /// public static final [PRIORITY_SENDERS_STARRED](https://developer.android.com/reference/android/app/NotificationManager.Policy.html#PRIORITY_SENDERS_STARRED)
        pub const PRIORITY_SENDERS_STARRED : i32 = 2;

        /// public static final [SUPPRESSED_EFFECT_AMBIENT](https://developer.android.com/reference/android/app/NotificationManager.Policy.html#SUPPRESSED_EFFECT_AMBIENT)
        pub const SUPPRESSED_EFFECT_AMBIENT : i32 = 128;

        /// public static final [SUPPRESSED_EFFECT_BADGE](https://developer.android.com/reference/android/app/NotificationManager.Policy.html#SUPPRESSED_EFFECT_BADGE)
        pub const SUPPRESSED_EFFECT_BADGE : i32 = 64;

        /// public static final [SUPPRESSED_EFFECT_FULL_SCREEN_INTENT](https://developer.android.com/reference/android/app/NotificationManager.Policy.html#SUPPRESSED_EFFECT_FULL_SCREEN_INTENT)
        pub const SUPPRESSED_EFFECT_FULL_SCREEN_INTENT : i32 = 4;

        /// public static final [SUPPRESSED_EFFECT_LIGHTS](https://developer.android.com/reference/android/app/NotificationManager.Policy.html#SUPPRESSED_EFFECT_LIGHTS)
        pub const SUPPRESSED_EFFECT_LIGHTS : i32 = 8;

        /// public static final [SUPPRESSED_EFFECT_NOTIFICATION_LIST](https://developer.android.com/reference/android/app/NotificationManager.Policy.html#SUPPRESSED_EFFECT_NOTIFICATION_LIST)
        pub const SUPPRESSED_EFFECT_NOTIFICATION_LIST : i32 = 256;

        /// public static final [SUPPRESSED_EFFECT_PEEK](https://developer.android.com/reference/android/app/NotificationManager.Policy.html#SUPPRESSED_EFFECT_PEEK)
        pub const SUPPRESSED_EFFECT_PEEK : i32 = 16;

        /// public static final [SUPPRESSED_EFFECT_SCREEN_OFF](https://developer.android.com/reference/android/app/NotificationManager.Policy.html#SUPPRESSED_EFFECT_SCREEN_OFF)
        #[deprecated] pub const SUPPRESSED_EFFECT_SCREEN_OFF : i32 = 1;

        /// public static final [SUPPRESSED_EFFECT_SCREEN_ON](https://developer.android.com/reference/android/app/NotificationManager.Policy.html#SUPPRESSED_EFFECT_SCREEN_ON)
        #[deprecated] pub const SUPPRESSED_EFFECT_SCREEN_ON : i32 = 2;

        /// public static final [SUPPRESSED_EFFECT_STATUS_BAR](https://developer.android.com/reference/android/app/NotificationManager.Policy.html#SUPPRESSED_EFFECT_STATUS_BAR)
        pub const SUPPRESSED_EFFECT_STATUS_BAR : i32 = 32;

        /// **get** public final [priorityCallSenders](https://developer.android.com/reference/android/app/NotificationManager.Policy.html#priorityCallSenders)
        pub fn priorityCallSenders<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/NotificationManager$Policy\0", "priorityCallSenders\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **get** public final [priorityCategories](https://developer.android.com/reference/android/app/NotificationManager.Policy.html#priorityCategories)
        pub fn priorityCategories<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/NotificationManager$Policy\0", "priorityCategories\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **get** public final [priorityMessageSenders](https://developer.android.com/reference/android/app/NotificationManager.Policy.html#priorityMessageSenders)
        pub fn priorityMessageSenders<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/NotificationManager$Policy\0", "priorityMessageSenders\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **get** public final [suppressedVisualEffects](https://developer.android.com/reference/android/app/NotificationManager.Policy.html#suppressedVisualEffects)
        pub fn suppressedVisualEffects<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/app/NotificationManager$Policy\0", "suppressedVisualEffects\0", "I\0");
                env.get_int_field(class, field)
            }
        }
    }
}
