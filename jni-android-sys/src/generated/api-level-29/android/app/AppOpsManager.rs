// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-app-AppOpsManager"))]
__jni_bindgen! {
    /// public class [AppOpsManager](https://developer.android.com/reference/android/app/AppOpsManager.html)
    ///
    /// Required feature: android-app-AppOpsManager
    public class AppOpsManager ("android/app/AppOpsManager") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [AppOpsManager](https://developer.android.com/reference/android/app/AppOpsManager.html#AppOpsManager())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::app::AppOpsManager>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/app/AppOpsManager", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/AppOpsManager\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [permissionToOp](https://developer.android.com/reference/android/app/AppOpsManager.html#permissionToOp(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn permissionToOp<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/AppOpsManager", java.flags == PUBLIC | STATIC, .name == "permissionToOp", .descriptor == "(Ljava/lang/String;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/app/AppOpsManager\0", "permissionToOp\0", "(Ljava/lang/String;)Ljava/lang/String;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [startWatchingMode](https://developer.android.com/reference/android/app/AppOpsManager.html#startWatchingMode(java.lang.String,%20java.lang.String,%20android.app.AppOpsManager.OnOpChangedListener))
        ///
        /// Required features: "android-app-AppOpsManager_OnOpChangedListener", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-app-AppOpsManager_OnOpChangedListener", feature = "java-lang-String")))]
        pub fn startWatchingMode_String_String_OnOpChangedListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::AppOpsManager_OnOpChangedListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/AppOpsManager", java.flags == PUBLIC, .name == "startWatchingMode", .descriptor == "(Ljava/lang/String;Ljava/lang/String;Landroid/app/AppOpsManager$OnOpChangedListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/AppOpsManager\0", "startWatchingMode\0", "(Ljava/lang/String;Ljava/lang/String;Landroid/app/AppOpsManager$OnOpChangedListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [startWatchingMode](https://developer.android.com/reference/android/app/AppOpsManager.html#startWatchingMode(java.lang.String,%20java.lang.String,%20int,%20android.app.AppOpsManager.OnOpChangedListener))
        ///
        /// Required features: "android-app-AppOpsManager_OnOpChangedListener", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-app-AppOpsManager_OnOpChangedListener", feature = "java-lang-String")))]
        pub fn startWatchingMode_String_String_int_OnOpChangedListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::AppOpsManager_OnOpChangedListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/AppOpsManager", java.flags == PUBLIC, .name == "startWatchingMode", .descriptor == "(Ljava/lang/String;Ljava/lang/String;ILandroid/app/AppOpsManager$OnOpChangedListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/AppOpsManager\0", "startWatchingMode\0", "(Ljava/lang/String;Ljava/lang/String;ILandroid/app/AppOpsManager$OnOpChangedListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [stopWatchingMode](https://developer.android.com/reference/android/app/AppOpsManager.html#stopWatchingMode(android.app.AppOpsManager.OnOpChangedListener))
        ///
        /// Required features: "android-app-AppOpsManager_OnOpChangedListener"
        #[cfg(any(feature = "all", all(feature = "android-app-AppOpsManager_OnOpChangedListener")))]
        pub fn stopWatchingMode<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::AppOpsManager_OnOpChangedListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/AppOpsManager", java.flags == PUBLIC, .name == "stopWatchingMode", .descriptor == "(Landroid/app/AppOpsManager$OnOpChangedListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/AppOpsManager\0", "stopWatchingMode\0", "(Landroid/app/AppOpsManager$OnOpChangedListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unsafeCheckOp](https://developer.android.com/reference/android/app/AppOpsManager.html#unsafeCheckOp(java.lang.String,%20int,%20java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn unsafeCheckOp<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/AppOpsManager", java.flags == PUBLIC, .name == "unsafeCheckOp", .descriptor == "(Ljava/lang/String;ILjava/lang/String;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/AppOpsManager\0", "unsafeCheckOp\0", "(Ljava/lang/String;ILjava/lang/String;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [checkOp](https://developer.android.com/reference/android/app/AppOpsManager.html#checkOp(java.lang.String,%20int,%20java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        #[deprecated] pub fn checkOp<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/AppOpsManager", java.flags == PUBLIC, .name == "checkOp", .descriptor == "(Ljava/lang/String;ILjava/lang/String;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/AppOpsManager\0", "checkOp\0", "(Ljava/lang/String;ILjava/lang/String;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unsafeCheckOpNoThrow](https://developer.android.com/reference/android/app/AppOpsManager.html#unsafeCheckOpNoThrow(java.lang.String,%20int,%20java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn unsafeCheckOpNoThrow<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/AppOpsManager", java.flags == PUBLIC, .name == "unsafeCheckOpNoThrow", .descriptor == "(Ljava/lang/String;ILjava/lang/String;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/AppOpsManager\0", "unsafeCheckOpNoThrow\0", "(Ljava/lang/String;ILjava/lang/String;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [checkOpNoThrow](https://developer.android.com/reference/android/app/AppOpsManager.html#checkOpNoThrow(java.lang.String,%20int,%20java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        #[deprecated] pub fn checkOpNoThrow<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/AppOpsManager", java.flags == PUBLIC, .name == "checkOpNoThrow", .descriptor == "(Ljava/lang/String;ILjava/lang/String;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/AppOpsManager\0", "checkOpNoThrow\0", "(Ljava/lang/String;ILjava/lang/String;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unsafeCheckOpRaw](https://developer.android.com/reference/android/app/AppOpsManager.html#unsafeCheckOpRaw(java.lang.String,%20int,%20java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn unsafeCheckOpRaw<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/AppOpsManager", java.flags == PUBLIC, .name == "unsafeCheckOpRaw", .descriptor == "(Ljava/lang/String;ILjava/lang/String;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/AppOpsManager\0", "unsafeCheckOpRaw\0", "(Ljava/lang/String;ILjava/lang/String;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unsafeCheckOpRawNoThrow](https://developer.android.com/reference/android/app/AppOpsManager.html#unsafeCheckOpRawNoThrow(java.lang.String,%20int,%20java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn unsafeCheckOpRawNoThrow<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/AppOpsManager", java.flags == PUBLIC, .name == "unsafeCheckOpRawNoThrow", .descriptor == "(Ljava/lang/String;ILjava/lang/String;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/AppOpsManager\0", "unsafeCheckOpRawNoThrow\0", "(Ljava/lang/String;ILjava/lang/String;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [noteOp](https://developer.android.com/reference/android/app/AppOpsManager.html#noteOp(java.lang.String,%20int,%20java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn noteOp<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/AppOpsManager", java.flags == PUBLIC, .name == "noteOp", .descriptor == "(Ljava/lang/String;ILjava/lang/String;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/AppOpsManager\0", "noteOp\0", "(Ljava/lang/String;ILjava/lang/String;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [noteOpNoThrow](https://developer.android.com/reference/android/app/AppOpsManager.html#noteOpNoThrow(java.lang.String,%20int,%20java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn noteOpNoThrow<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/AppOpsManager", java.flags == PUBLIC, .name == "noteOpNoThrow", .descriptor == "(Ljava/lang/String;ILjava/lang/String;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/AppOpsManager\0", "noteOpNoThrow\0", "(Ljava/lang/String;ILjava/lang/String;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [noteProxyOp](https://developer.android.com/reference/android/app/AppOpsManager.html#noteProxyOp(java.lang.String,%20java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn noteProxyOp<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/AppOpsManager", java.flags == PUBLIC, .name == "noteProxyOp", .descriptor == "(Ljava/lang/String;Ljava/lang/String;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/AppOpsManager\0", "noteProxyOp\0", "(Ljava/lang/String;Ljava/lang/String;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [noteProxyOpNoThrow](https://developer.android.com/reference/android/app/AppOpsManager.html#noteProxyOpNoThrow(java.lang.String,%20java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn noteProxyOpNoThrow_String_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/AppOpsManager", java.flags == PUBLIC, .name == "noteProxyOpNoThrow", .descriptor == "(Ljava/lang/String;Ljava/lang/String;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/AppOpsManager\0", "noteProxyOpNoThrow\0", "(Ljava/lang/String;Ljava/lang/String;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [noteProxyOpNoThrow](https://developer.android.com/reference/android/app/AppOpsManager.html#noteProxyOpNoThrow(java.lang.String,%20java.lang.String,%20int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn noteProxyOpNoThrow_String_String_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/AppOpsManager", java.flags == PUBLIC, .name == "noteProxyOpNoThrow", .descriptor == "(Ljava/lang/String;Ljava/lang/String;I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/AppOpsManager\0", "noteProxyOpNoThrow\0", "(Ljava/lang/String;Ljava/lang/String;I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [startOp](https://developer.android.com/reference/android/app/AppOpsManager.html#startOp(java.lang.String,%20int,%20java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn startOp<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/AppOpsManager", java.flags == PUBLIC, .name == "startOp", .descriptor == "(Ljava/lang/String;ILjava/lang/String;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/AppOpsManager\0", "startOp\0", "(Ljava/lang/String;ILjava/lang/String;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [startOpNoThrow](https://developer.android.com/reference/android/app/AppOpsManager.html#startOpNoThrow(java.lang.String,%20int,%20java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn startOpNoThrow<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/AppOpsManager", java.flags == PUBLIC, .name == "startOpNoThrow", .descriptor == "(Ljava/lang/String;ILjava/lang/String;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/AppOpsManager\0", "startOpNoThrow\0", "(Ljava/lang/String;ILjava/lang/String;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [finishOp](https://developer.android.com/reference/android/app/AppOpsManager.html#finishOp(java.lang.String,%20int,%20java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn finishOp<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/AppOpsManager", java.flags == PUBLIC, .name == "finishOp", .descriptor == "(Ljava/lang/String;ILjava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/AppOpsManager\0", "finishOp\0", "(Ljava/lang/String;ILjava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [checkPackage](https://developer.android.com/reference/android/app/AppOpsManager.html#checkPackage(int,%20java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn checkPackage<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/AppOpsManager", java.flags == PUBLIC, .name == "checkPackage", .descriptor == "(ILjava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/AppOpsManager\0", "checkPackage\0", "(ILjava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [MODE_ALLOWED](https://developer.android.com/reference/android/app/AppOpsManager.html#MODE_ALLOWED)
        pub const MODE_ALLOWED : i32 = 0;

        /// public static final [MODE_DEFAULT](https://developer.android.com/reference/android/app/AppOpsManager.html#MODE_DEFAULT)
        pub const MODE_DEFAULT : i32 = 3;

        /// public static final [MODE_ERRORED](https://developer.android.com/reference/android/app/AppOpsManager.html#MODE_ERRORED)
        pub const MODE_ERRORED : i32 = 2;

        /// public static final [MODE_FOREGROUND](https://developer.android.com/reference/android/app/AppOpsManager.html#MODE_FOREGROUND)
        pub const MODE_FOREGROUND : i32 = 4;

        /// public static final [MODE_IGNORED](https://developer.android.com/reference/android/app/AppOpsManager.html#MODE_IGNORED)
        pub const MODE_IGNORED : i32 = 1;

        /// public static final [OPSTR_ADD_VOICEMAIL](https://developer.android.com/reference/android/app/AppOpsManager.html#OPSTR_ADD_VOICEMAIL)
        pub const OPSTR_ADD_VOICEMAIL : &'static str = "android:add_voicemail";

        /// public static final [OPSTR_ANSWER_PHONE_CALLS](https://developer.android.com/reference/android/app/AppOpsManager.html#OPSTR_ANSWER_PHONE_CALLS)
        pub const OPSTR_ANSWER_PHONE_CALLS : &'static str = "android:answer_phone_calls";

        /// public static final [OPSTR_BODY_SENSORS](https://developer.android.com/reference/android/app/AppOpsManager.html#OPSTR_BODY_SENSORS)
        pub const OPSTR_BODY_SENSORS : &'static str = "android:body_sensors";

        /// public static final [OPSTR_CALL_PHONE](https://developer.android.com/reference/android/app/AppOpsManager.html#OPSTR_CALL_PHONE)
        pub const OPSTR_CALL_PHONE : &'static str = "android:call_phone";

        /// public static final [OPSTR_CAMERA](https://developer.android.com/reference/android/app/AppOpsManager.html#OPSTR_CAMERA)
        pub const OPSTR_CAMERA : &'static str = "android:camera";

        /// public static final [OPSTR_COARSE_LOCATION](https://developer.android.com/reference/android/app/AppOpsManager.html#OPSTR_COARSE_LOCATION)
        pub const OPSTR_COARSE_LOCATION : &'static str = "android:coarse_location";

        /// public static final [OPSTR_FINE_LOCATION](https://developer.android.com/reference/android/app/AppOpsManager.html#OPSTR_FINE_LOCATION)
        pub const OPSTR_FINE_LOCATION : &'static str = "android:fine_location";

        /// public static final [OPSTR_GET_USAGE_STATS](https://developer.android.com/reference/android/app/AppOpsManager.html#OPSTR_GET_USAGE_STATS)
        pub const OPSTR_GET_USAGE_STATS : &'static str = "android:get_usage_stats";

        /// public static final [OPSTR_MOCK_LOCATION](https://developer.android.com/reference/android/app/AppOpsManager.html#OPSTR_MOCK_LOCATION)
        pub const OPSTR_MOCK_LOCATION : &'static str = "android:mock_location";

        /// public static final [OPSTR_MONITOR_HIGH_POWER_LOCATION](https://developer.android.com/reference/android/app/AppOpsManager.html#OPSTR_MONITOR_HIGH_POWER_LOCATION)
        pub const OPSTR_MONITOR_HIGH_POWER_LOCATION : &'static str = "android:monitor_location_high_power";

        /// public static final [OPSTR_MONITOR_LOCATION](https://developer.android.com/reference/android/app/AppOpsManager.html#OPSTR_MONITOR_LOCATION)
        pub const OPSTR_MONITOR_LOCATION : &'static str = "android:monitor_location";

        /// public static final [OPSTR_PICTURE_IN_PICTURE](https://developer.android.com/reference/android/app/AppOpsManager.html#OPSTR_PICTURE_IN_PICTURE)
        pub const OPSTR_PICTURE_IN_PICTURE : &'static str = "android:picture_in_picture";

        /// public static final [OPSTR_PROCESS_OUTGOING_CALLS](https://developer.android.com/reference/android/app/AppOpsManager.html#OPSTR_PROCESS_OUTGOING_CALLS)
        pub const OPSTR_PROCESS_OUTGOING_CALLS : &'static str = "android:process_outgoing_calls";

        /// public static final [OPSTR_READ_CALENDAR](https://developer.android.com/reference/android/app/AppOpsManager.html#OPSTR_READ_CALENDAR)
        pub const OPSTR_READ_CALENDAR : &'static str = "android:read_calendar";

        /// public static final [OPSTR_READ_CALL_LOG](https://developer.android.com/reference/android/app/AppOpsManager.html#OPSTR_READ_CALL_LOG)
        pub const OPSTR_READ_CALL_LOG : &'static str = "android:read_call_log";

        /// public static final [OPSTR_READ_CELL_BROADCASTS](https://developer.android.com/reference/android/app/AppOpsManager.html#OPSTR_READ_CELL_BROADCASTS)
        pub const OPSTR_READ_CELL_BROADCASTS : &'static str = "android:read_cell_broadcasts";

        /// public static final [OPSTR_READ_CONTACTS](https://developer.android.com/reference/android/app/AppOpsManager.html#OPSTR_READ_CONTACTS)
        pub const OPSTR_READ_CONTACTS : &'static str = "android:read_contacts";

        /// public static final [OPSTR_READ_EXTERNAL_STORAGE](https://developer.android.com/reference/android/app/AppOpsManager.html#OPSTR_READ_EXTERNAL_STORAGE)
        pub const OPSTR_READ_EXTERNAL_STORAGE : &'static str = "android:read_external_storage";

        /// public static final [OPSTR_READ_PHONE_NUMBERS](https://developer.android.com/reference/android/app/AppOpsManager.html#OPSTR_READ_PHONE_NUMBERS)
        pub const OPSTR_READ_PHONE_NUMBERS : &'static str = "android:read_phone_numbers";

        /// public static final [OPSTR_READ_PHONE_STATE](https://developer.android.com/reference/android/app/AppOpsManager.html#OPSTR_READ_PHONE_STATE)
        pub const OPSTR_READ_PHONE_STATE : &'static str = "android:read_phone_state";

        /// public static final [OPSTR_READ_SMS](https://developer.android.com/reference/android/app/AppOpsManager.html#OPSTR_READ_SMS)
        pub const OPSTR_READ_SMS : &'static str = "android:read_sms";

        /// public static final [OPSTR_RECEIVE_MMS](https://developer.android.com/reference/android/app/AppOpsManager.html#OPSTR_RECEIVE_MMS)
        pub const OPSTR_RECEIVE_MMS : &'static str = "android:receive_mms";

        /// public static final [OPSTR_RECEIVE_SMS](https://developer.android.com/reference/android/app/AppOpsManager.html#OPSTR_RECEIVE_SMS)
        pub const OPSTR_RECEIVE_SMS : &'static str = "android:receive_sms";

        /// public static final [OPSTR_RECEIVE_WAP_PUSH](https://developer.android.com/reference/android/app/AppOpsManager.html#OPSTR_RECEIVE_WAP_PUSH)
        pub const OPSTR_RECEIVE_WAP_PUSH : &'static str = "android:receive_wap_push";

        /// public static final [OPSTR_RECORD_AUDIO](https://developer.android.com/reference/android/app/AppOpsManager.html#OPSTR_RECORD_AUDIO)
        pub const OPSTR_RECORD_AUDIO : &'static str = "android:record_audio";

        /// public static final [OPSTR_SEND_SMS](https://developer.android.com/reference/android/app/AppOpsManager.html#OPSTR_SEND_SMS)
        pub const OPSTR_SEND_SMS : &'static str = "android:send_sms";

        /// public static final [OPSTR_SYSTEM_ALERT_WINDOW](https://developer.android.com/reference/android/app/AppOpsManager.html#OPSTR_SYSTEM_ALERT_WINDOW)
        pub const OPSTR_SYSTEM_ALERT_WINDOW : &'static str = "android:system_alert_window";

        /// public static final [OPSTR_USE_FINGERPRINT](https://developer.android.com/reference/android/app/AppOpsManager.html#OPSTR_USE_FINGERPRINT)
        pub const OPSTR_USE_FINGERPRINT : &'static str = "android:use_fingerprint";

        /// public static final [OPSTR_USE_SIP](https://developer.android.com/reference/android/app/AppOpsManager.html#OPSTR_USE_SIP)
        pub const OPSTR_USE_SIP : &'static str = "android:use_sip";

        /// public static final [OPSTR_WRITE_CALENDAR](https://developer.android.com/reference/android/app/AppOpsManager.html#OPSTR_WRITE_CALENDAR)
        pub const OPSTR_WRITE_CALENDAR : &'static str = "android:write_calendar";

        /// public static final [OPSTR_WRITE_CALL_LOG](https://developer.android.com/reference/android/app/AppOpsManager.html#OPSTR_WRITE_CALL_LOG)
        pub const OPSTR_WRITE_CALL_LOG : &'static str = "android:write_call_log";

        /// public static final [OPSTR_WRITE_CONTACTS](https://developer.android.com/reference/android/app/AppOpsManager.html#OPSTR_WRITE_CONTACTS)
        pub const OPSTR_WRITE_CONTACTS : &'static str = "android:write_contacts";

        /// public static final [OPSTR_WRITE_EXTERNAL_STORAGE](https://developer.android.com/reference/android/app/AppOpsManager.html#OPSTR_WRITE_EXTERNAL_STORAGE)
        pub const OPSTR_WRITE_EXTERNAL_STORAGE : &'static str = "android:write_external_storage";

        /// public static final [OPSTR_WRITE_SETTINGS](https://developer.android.com/reference/android/app/AppOpsManager.html#OPSTR_WRITE_SETTINGS)
        pub const OPSTR_WRITE_SETTINGS : &'static str = "android:write_settings";

        /// public static final [WATCH_FOREGROUND_CHANGES](https://developer.android.com/reference/android/app/AppOpsManager.html#WATCH_FOREGROUND_CHANGES)
        pub const WATCH_FOREGROUND_CHANGES : i32 = 1;
    }
}
