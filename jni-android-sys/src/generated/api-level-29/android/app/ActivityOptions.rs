// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-app-ActivityOptions"))]
__jni_bindgen! {
    /// public class [ActivityOptions](https://developer.android.com/reference/android/app/ActivityOptions.html)
    ///
    /// Required feature: android-app-ActivityOptions
    public class ActivityOptions ("android/app/ActivityOptions") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [ActivityOptions](https://developer.android.com/reference/android/app/ActivityOptions.html#ActivityOptions())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::app::ActivityOptions>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/app/ActivityOptions", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/ActivityOptions\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [makeCustomAnimation](https://developer.android.com/reference/android/app/ActivityOptions.html#makeCustomAnimation(android.content.Context,%20int,%20int))
        ///
        /// Required features: "android-app-ActivityOptions", "android-content-Context"
        #[cfg(any(feature = "all", all(feature = "android-app-ActivityOptions", feature = "android-content-Context")))]
        pub fn makeCustomAnimation<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::ActivityOptions>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/ActivityOptions", java.flags == PUBLIC | STATIC, .name == "makeCustomAnimation", .descriptor == "(Landroid/content/Context;II)Landroid/app/ActivityOptions;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/app/ActivityOptions\0", "makeCustomAnimation\0", "(Landroid/content/Context;II)Landroid/app/ActivityOptions;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [makeScaleUpAnimation](https://developer.android.com/reference/android/app/ActivityOptions.html#makeScaleUpAnimation(android.view.View,%20int,%20int,%20int,%20int))
        ///
        /// Required features: "android-app-ActivityOptions", "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-app-ActivityOptions", feature = "android-view-View")))]
        pub fn makeScaleUpAnimation<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>, arg1: i32, arg2: i32, arg3: i32, arg4: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::ActivityOptions>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/ActivityOptions", java.flags == PUBLIC | STATIC, .name == "makeScaleUpAnimation", .descriptor == "(Landroid/view/View;IIII)Landroid/app/ActivityOptions;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/app/ActivityOptions\0", "makeScaleUpAnimation\0", "(Landroid/view/View;IIII)Landroid/app/ActivityOptions;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [makeClipRevealAnimation](https://developer.android.com/reference/android/app/ActivityOptions.html#makeClipRevealAnimation(android.view.View,%20int,%20int,%20int,%20int))
        ///
        /// Required features: "android-app-ActivityOptions", "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-app-ActivityOptions", feature = "android-view-View")))]
        pub fn makeClipRevealAnimation<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>, arg1: i32, arg2: i32, arg3: i32, arg4: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::ActivityOptions>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/ActivityOptions", java.flags == PUBLIC | STATIC, .name == "makeClipRevealAnimation", .descriptor == "(Landroid/view/View;IIII)Landroid/app/ActivityOptions;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/app/ActivityOptions\0", "makeClipRevealAnimation\0", "(Landroid/view/View;IIII)Landroid/app/ActivityOptions;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [makeThumbnailScaleUpAnimation](https://developer.android.com/reference/android/app/ActivityOptions.html#makeThumbnailScaleUpAnimation(android.view.View,%20android.graphics.Bitmap,%20int,%20int))
        ///
        /// Required features: "android-app-ActivityOptions", "android-graphics-Bitmap", "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-app-ActivityOptions", feature = "android-graphics-Bitmap", feature = "android-view-View")))]
        pub fn makeThumbnailScaleUpAnimation<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Bitmap>>, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::ActivityOptions>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/ActivityOptions", java.flags == PUBLIC | STATIC, .name == "makeThumbnailScaleUpAnimation", .descriptor == "(Landroid/view/View;Landroid/graphics/Bitmap;II)Landroid/app/ActivityOptions;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/app/ActivityOptions\0", "makeThumbnailScaleUpAnimation\0", "(Landroid/view/View;Landroid/graphics/Bitmap;II)Landroid/app/ActivityOptions;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [makeSceneTransitionAnimation](https://developer.android.com/reference/android/app/ActivityOptions.html#makeSceneTransitionAnimation(android.app.Activity,%20android.view.View,%20java.lang.String))
        ///
        /// Required features: "android-app-Activity", "android-app-ActivityOptions", "android-view-View", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-app-Activity", feature = "android-app-ActivityOptions", feature = "android-view-View", feature = "java-lang-String")))]
        pub fn makeSceneTransitionAnimation_Activity_View_String<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Activity>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::ActivityOptions>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/ActivityOptions", java.flags == PUBLIC | STATIC, .name == "makeSceneTransitionAnimation", .descriptor == "(Landroid/app/Activity;Landroid/view/View;Ljava/lang/String;)Landroid/app/ActivityOptions;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/app/ActivityOptions\0", "makeSceneTransitionAnimation\0", "(Landroid/app/Activity;Landroid/view/View;Ljava/lang/String;)Landroid/app/ActivityOptions;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [makeSceneTransitionAnimation](https://developer.android.com/reference/android/app/ActivityOptions.html#makeSceneTransitionAnimation(android.app.Activity,%20android.util.Pair...))
        ///
        /// Required features: "android-app-Activity", "android-app-ActivityOptions", "android-util-Pair"
        #[cfg(any(feature = "all", all(feature = "android-app-Activity", feature = "android-app-ActivityOptions", feature = "android-util-Pair")))]
        pub fn makeSceneTransitionAnimation_Activity_Pair_array<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Activity>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::android::util::Pair, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::ActivityOptions>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/ActivityOptions", java.flags == PUBLIC | STATIC | VARARGS, .name == "makeSceneTransitionAnimation", .descriptor == "(Landroid/app/Activity;[Landroid/util/Pair;)Landroid/app/ActivityOptions;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/app/ActivityOptions\0", "makeSceneTransitionAnimation\0", "(Landroid/app/Activity;[Landroid/util/Pair;)Landroid/app/ActivityOptions;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [makeTaskLaunchBehind](https://developer.android.com/reference/android/app/ActivityOptions.html#makeTaskLaunchBehind())
        ///
        /// Required features: "android-app-ActivityOptions"
        #[cfg(any(feature = "all", all(feature = "android-app-ActivityOptions")))]
        pub fn makeTaskLaunchBehind<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::ActivityOptions>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/ActivityOptions", java.flags == PUBLIC | STATIC, .name == "makeTaskLaunchBehind", .descriptor == "()Landroid/app/ActivityOptions;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/app/ActivityOptions\0", "makeTaskLaunchBehind\0", "()Landroid/app/ActivityOptions;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [makeBasic](https://developer.android.com/reference/android/app/ActivityOptions.html#makeBasic())
        ///
        /// Required features: "android-app-ActivityOptions"
        #[cfg(any(feature = "all", all(feature = "android-app-ActivityOptions")))]
        pub fn makeBasic<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::ActivityOptions>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/ActivityOptions", java.flags == PUBLIC | STATIC, .name == "makeBasic", .descriptor == "()Landroid/app/ActivityOptions;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/app/ActivityOptions\0", "makeBasic\0", "()Landroid/app/ActivityOptions;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setLaunchBounds](https://developer.android.com/reference/android/app/ActivityOptions.html#setLaunchBounds(android.graphics.Rect))
        ///
        /// Required features: "android-app-ActivityOptions", "android-graphics-Rect"
        #[cfg(any(feature = "all", all(feature = "android-app-ActivityOptions", feature = "android-graphics-Rect")))]
        pub fn setLaunchBounds<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Rect>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::ActivityOptions>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/ActivityOptions", java.flags == PUBLIC, .name == "setLaunchBounds", .descriptor == "(Landroid/graphics/Rect;)Landroid/app/ActivityOptions;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/ActivityOptions\0", "setLaunchBounds\0", "(Landroid/graphics/Rect;)Landroid/app/ActivityOptions;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLaunchBounds](https://developer.android.com/reference/android/app/ActivityOptions.html#getLaunchBounds())
        ///
        /// Required features: "android-graphics-Rect"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Rect")))]
        pub fn getLaunchBounds<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Rect>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/ActivityOptions", java.flags == PUBLIC, .name == "getLaunchBounds", .descriptor == "()Landroid/graphics/Rect;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/ActivityOptions\0", "getLaunchBounds\0", "()Landroid/graphics/Rect;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLockTaskMode](https://developer.android.com/reference/android/app/ActivityOptions.html#getLockTaskMode())
        pub fn getLockTaskMode<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/ActivityOptions", java.flags == PUBLIC, .name == "getLockTaskMode", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/ActivityOptions\0", "getLockTaskMode\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setLockTaskEnabled](https://developer.android.com/reference/android/app/ActivityOptions.html#setLockTaskEnabled(boolean))
        ///
        /// Required features: "android-app-ActivityOptions"
        #[cfg(any(feature = "all", all(feature = "android-app-ActivityOptions")))]
        pub fn setLockTaskEnabled<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::ActivityOptions>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/ActivityOptions", java.flags == PUBLIC, .name == "setLockTaskEnabled", .descriptor == "(Z)Landroid/app/ActivityOptions;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/ActivityOptions\0", "setLockTaskEnabled\0", "(Z)Landroid/app/ActivityOptions;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLaunchDisplayId](https://developer.android.com/reference/android/app/ActivityOptions.html#getLaunchDisplayId())
        pub fn getLaunchDisplayId<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/ActivityOptions", java.flags == PUBLIC, .name == "getLaunchDisplayId", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/ActivityOptions\0", "getLaunchDisplayId\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setLaunchDisplayId](https://developer.android.com/reference/android/app/ActivityOptions.html#setLaunchDisplayId(int))
        ///
        /// Required features: "android-app-ActivityOptions"
        #[cfg(any(feature = "all", all(feature = "android-app-ActivityOptions")))]
        pub fn setLaunchDisplayId<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::ActivityOptions>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/ActivityOptions", java.flags == PUBLIC, .name == "setLaunchDisplayId", .descriptor == "(I)Landroid/app/ActivityOptions;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/ActivityOptions\0", "setLaunchDisplayId\0", "(I)Landroid/app/ActivityOptions;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [update](https://developer.android.com/reference/android/app/ActivityOptions.html#update(android.app.ActivityOptions))
        ///
        /// Required features: "android-app-ActivityOptions"
        #[cfg(any(feature = "all", all(feature = "android-app-ActivityOptions")))]
        pub fn update<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::ActivityOptions>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/ActivityOptions", java.flags == PUBLIC, .name == "update", .descriptor == "(Landroid/app/ActivityOptions;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/ActivityOptions\0", "update\0", "(Landroid/app/ActivityOptions;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toBundle](https://developer.android.com/reference/android/app/ActivityOptions.html#toBundle())
        ///
        /// Required features: "android-os-Bundle"
        #[cfg(any(feature = "all", all(feature = "android-os-Bundle")))]
        pub fn toBundle<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Bundle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/ActivityOptions", java.flags == PUBLIC, .name == "toBundle", .descriptor == "()Landroid/os/Bundle;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/ActivityOptions\0", "toBundle\0", "()Landroid/os/Bundle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [requestUsageTimeReport](https://developer.android.com/reference/android/app/ActivityOptions.html#requestUsageTimeReport(android.app.PendingIntent))
        ///
        /// Required features: "android-app-PendingIntent"
        #[cfg(any(feature = "all", all(feature = "android-app-PendingIntent")))]
        pub fn requestUsageTimeReport<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::PendingIntent>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/ActivityOptions", java.flags == PUBLIC, .name == "requestUsageTimeReport", .descriptor == "(Landroid/app/PendingIntent;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/ActivityOptions\0", "requestUsageTimeReport\0", "(Landroid/app/PendingIntent;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAppVerificationBundle](https://developer.android.com/reference/android/app/ActivityOptions.html#setAppVerificationBundle(android.os.Bundle))
        ///
        /// Required features: "android-app-ActivityOptions", "android-os-Bundle"
        #[cfg(any(feature = "all", all(feature = "android-app-ActivityOptions", feature = "android-os-Bundle")))]
        pub fn setAppVerificationBundle<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::ActivityOptions>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/ActivityOptions", java.flags == PUBLIC, .name == "setAppVerificationBundle", .descriptor == "(Landroid/os/Bundle;)Landroid/app/ActivityOptions;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/ActivityOptions\0", "setAppVerificationBundle\0", "(Landroid/os/Bundle;)Landroid/app/ActivityOptions;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/android/app/ActivityOptions.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/ActivityOptions", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/ActivityOptions\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [EXTRA_USAGE_TIME_REPORT](https://developer.android.com/reference/android/app/ActivityOptions.html#EXTRA_USAGE_TIME_REPORT)
        pub const EXTRA_USAGE_TIME_REPORT : &'static str = "android.activity.usage_time";

        /// public static final [EXTRA_USAGE_TIME_REPORT_PACKAGES](https://developer.android.com/reference/android/app/ActivityOptions.html#EXTRA_USAGE_TIME_REPORT_PACKAGES)
        pub const EXTRA_USAGE_TIME_REPORT_PACKAGES : &'static str = "android.usage_time_packages";
    }
}
