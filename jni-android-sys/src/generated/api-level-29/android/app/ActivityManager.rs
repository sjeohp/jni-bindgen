// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-app-ActivityManager"))]
__jni_bindgen! {
    /// public class [ActivityManager](https://developer.android.com/reference/android/app/ActivityManager.html)
    ///
    /// Required feature: android-app-ActivityManager
    public class ActivityManager ("android/app/ActivityManager") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [ActivityManager](https://developer.android.com/reference/android/app/ActivityManager.html#ActivityManager(android.content.Context,%20android.os.Handler))
        // ///
        // /// Required features: "android-content-Context", "android-os-Handler"
        // #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-os-Handler")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::app::ActivityManager>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/app/ActivityManager", java.flags == (empty), .name == "<init>", .descriptor == "(Landroid/content/Context;Landroid/os/Handler;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/ActivityManager\0", "<init>\0", "(Landroid/content/Context;Landroid/os/Handler;)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getMemoryClass](https://developer.android.com/reference/android/app/ActivityManager.html#getMemoryClass())
        pub fn getMemoryClass<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/ActivityManager", java.flags == PUBLIC, .name == "getMemoryClass", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/ActivityManager\0", "getMemoryClass\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLargeMemoryClass](https://developer.android.com/reference/android/app/ActivityManager.html#getLargeMemoryClass())
        pub fn getLargeMemoryClass<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/ActivityManager", java.flags == PUBLIC, .name == "getLargeMemoryClass", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/ActivityManager\0", "getLargeMemoryClass\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isLowRamDevice](https://developer.android.com/reference/android/app/ActivityManager.html#isLowRamDevice())
        pub fn isLowRamDevice<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/ActivityManager", java.flags == PUBLIC, .name == "isLowRamDevice", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/ActivityManager\0", "isLowRamDevice\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRecentTasks](https://developer.android.com/reference/android/app/ActivityManager.html#getRecentTasks(int,%20int))
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        #[deprecated] pub fn getRecentTasks<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/ActivityManager", java.flags == PUBLIC, .name == "getRecentTasks", .descriptor == "(II)Ljava/util/List;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/ActivityManager\0", "getRecentTasks\0", "(II)Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAppTasks](https://developer.android.com/reference/android/app/ActivityManager.html#getAppTasks())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getAppTasks<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/ActivityManager", java.flags == PUBLIC, .name == "getAppTasks", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/ActivityManager\0", "getAppTasks\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAppTaskThumbnailSize](https://developer.android.com/reference/android/app/ActivityManager.html#getAppTaskThumbnailSize())
        ///
        /// Required features: "android-util-Size"
        #[cfg(any(feature = "all", all(feature = "android-util-Size")))]
        pub fn getAppTaskThumbnailSize<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::util::Size>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/ActivityManager", java.flags == PUBLIC, .name == "getAppTaskThumbnailSize", .descriptor == "()Landroid/util/Size;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/ActivityManager\0", "getAppTaskThumbnailSize\0", "()Landroid/util/Size;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addAppTask](https://developer.android.com/reference/android/app/ActivityManager.html#addAppTask(android.app.Activity,%20android.content.Intent,%20android.app.ActivityManager.TaskDescription,%20android.graphics.Bitmap))
        ///
        /// Required features: "android-app-Activity", "android-app-ActivityManager_TaskDescription", "android-content-Intent", "android-graphics-Bitmap"
        #[cfg(any(feature = "all", all(feature = "android-app-Activity", feature = "android-app-ActivityManager_TaskDescription", feature = "android-content-Intent", feature = "android-graphics-Bitmap")))]
        pub fn addAppTask<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Activity>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::ActivityManager_TaskDescription>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Bitmap>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/ActivityManager", java.flags == PUBLIC, .name == "addAppTask", .descriptor == "(Landroid/app/Activity;Landroid/content/Intent;Landroid/app/ActivityManager$TaskDescription;Landroid/graphics/Bitmap;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/ActivityManager\0", "addAppTask\0", "(Landroid/app/Activity;Landroid/content/Intent;Landroid/app/ActivityManager$TaskDescription;Landroid/graphics/Bitmap;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRunningTasks](https://developer.android.com/reference/android/app/ActivityManager.html#getRunningTasks(int))
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        #[deprecated] pub fn getRunningTasks<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/ActivityManager", java.flags == PUBLIC, .name == "getRunningTasks", .descriptor == "(I)Ljava/util/List;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/ActivityManager\0", "getRunningTasks\0", "(I)Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [moveTaskToFront](https://developer.android.com/reference/android/app/ActivityManager.html#moveTaskToFront(int,%20int))
        pub fn moveTaskToFront_int_int<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/ActivityManager", java.flags == PUBLIC, .name == "moveTaskToFront", .descriptor == "(II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/ActivityManager\0", "moveTaskToFront\0", "(II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [moveTaskToFront](https://developer.android.com/reference/android/app/ActivityManager.html#moveTaskToFront(int,%20int,%20android.os.Bundle))
        ///
        /// Required features: "android-os-Bundle"
        #[cfg(any(feature = "all", all(feature = "android-os-Bundle")))]
        pub fn moveTaskToFront_int_int_Bundle<'env>(&'env self, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/ActivityManager", java.flags == PUBLIC, .name == "moveTaskToFront", .descriptor == "(IILandroid/os/Bundle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/ActivityManager\0", "moveTaskToFront\0", "(IILandroid/os/Bundle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isActivityStartAllowedOnDisplay](https://developer.android.com/reference/android/app/ActivityManager.html#isActivityStartAllowedOnDisplay(android.content.Context,%20int,%20android.content.Intent))
        ///
        /// Required features: "android-content-Context", "android-content-Intent"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-content-Intent")))]
        pub fn isActivityStartAllowedOnDisplay<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/ActivityManager", java.flags == PUBLIC, .name == "isActivityStartAllowedOnDisplay", .descriptor == "(Landroid/content/Context;ILandroid/content/Intent;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/ActivityManager\0", "isActivityStartAllowedOnDisplay\0", "(Landroid/content/Context;ILandroid/content/Intent;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRunningServices](https://developer.android.com/reference/android/app/ActivityManager.html#getRunningServices(int))
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        #[deprecated] pub fn getRunningServices<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/ActivityManager", java.flags == PUBLIC, .name == "getRunningServices", .descriptor == "(I)Ljava/util/List;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/ActivityManager\0", "getRunningServices\0", "(I)Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRunningServiceControlPanel](https://developer.android.com/reference/android/app/ActivityManager.html#getRunningServiceControlPanel(android.content.ComponentName))
        ///
        /// Required features: "android-app-PendingIntent", "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-app-PendingIntent", feature = "android-content-ComponentName")))]
        pub fn getRunningServiceControlPanel<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::PendingIntent>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/ActivityManager", java.flags == PUBLIC, .name == "getRunningServiceControlPanel", .descriptor == "(Landroid/content/ComponentName;)Landroid/app/PendingIntent;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/ActivityManager\0", "getRunningServiceControlPanel\0", "(Landroid/content/ComponentName;)Landroid/app/PendingIntent;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMemoryInfo](https://developer.android.com/reference/android/app/ActivityManager.html#getMemoryInfo(android.app.ActivityManager.MemoryInfo))
        ///
        /// Required features: "android-app-ActivityManager_MemoryInfo"
        #[cfg(any(feature = "all", all(feature = "android-app-ActivityManager_MemoryInfo")))]
        pub fn getMemoryInfo<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::ActivityManager_MemoryInfo>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/ActivityManager", java.flags == PUBLIC, .name == "getMemoryInfo", .descriptor == "(Landroid/app/ActivityManager$MemoryInfo;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/ActivityManager\0", "getMemoryInfo\0", "(Landroid/app/ActivityManager$MemoryInfo;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clearApplicationUserData](https://developer.android.com/reference/android/app/ActivityManager.html#clearApplicationUserData())
        pub fn clearApplicationUserData<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/ActivityManager", java.flags == PUBLIC, .name == "clearApplicationUserData", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/ActivityManager\0", "clearApplicationUserData\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getProcessesInErrorState](https://developer.android.com/reference/android/app/ActivityManager.html#getProcessesInErrorState())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getProcessesInErrorState<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/ActivityManager", java.flags == PUBLIC, .name == "getProcessesInErrorState", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/ActivityManager\0", "getProcessesInErrorState\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isBackgroundRestricted](https://developer.android.com/reference/android/app/ActivityManager.html#isBackgroundRestricted())
        pub fn isBackgroundRestricted<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/ActivityManager", java.flags == PUBLIC, .name == "isBackgroundRestricted", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/ActivityManager\0", "isBackgroundRestricted\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRunningAppProcesses](https://developer.android.com/reference/android/app/ActivityManager.html#getRunningAppProcesses())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getRunningAppProcesses<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/ActivityManager", java.flags == PUBLIC, .name == "getRunningAppProcesses", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/ActivityManager\0", "getRunningAppProcesses\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMyMemoryState](https://developer.android.com/reference/android/app/ActivityManager.html#getMyMemoryState(android.app.ActivityManager.RunningAppProcessInfo))
        ///
        /// Required features: "android-app-ActivityManager_RunningAppProcessInfo"
        #[cfg(any(feature = "all", all(feature = "android-app-ActivityManager_RunningAppProcessInfo")))]
        pub fn getMyMemoryState<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::ActivityManager_RunningAppProcessInfo>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/ActivityManager", java.flags == PUBLIC | STATIC, .name == "getMyMemoryState", .descriptor == "(Landroid/app/ActivityManager$RunningAppProcessInfo;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/app/ActivityManager\0", "getMyMemoryState\0", "(Landroid/app/ActivityManager$RunningAppProcessInfo;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getProcessMemoryInfo](https://developer.android.com/reference/android/app/ActivityManager.html#getProcessMemoryInfo(int%5B%5D))
        ///
        /// Required features: "android-os-Debug_MemoryInfo"
        #[cfg(any(feature = "all", all(feature = "android-os-Debug_MemoryInfo")))]
        pub fn getProcessMemoryInfo<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::android::os::Debug_MemoryInfo, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/ActivityManager", java.flags == PUBLIC, .name == "getProcessMemoryInfo", .descriptor == "([I)[Landroid/os/Debug$MemoryInfo;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/ActivityManager\0", "getProcessMemoryInfo\0", "([I)[Landroid/os/Debug$MemoryInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [restartPackage](https://developer.android.com/reference/android/app/ActivityManager.html#restartPackage(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        #[deprecated] pub fn restartPackage<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/ActivityManager", java.flags == PUBLIC, .name == "restartPackage", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/ActivityManager\0", "restartPackage\0", "(Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [killBackgroundProcesses](https://developer.android.com/reference/android/app/ActivityManager.html#killBackgroundProcesses(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn killBackgroundProcesses<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/ActivityManager", java.flags == PUBLIC, .name == "killBackgroundProcesses", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/ActivityManager\0", "killBackgroundProcesses\0", "(Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDeviceConfigurationInfo](https://developer.android.com/reference/android/app/ActivityManager.html#getDeviceConfigurationInfo())
        ///
        /// Required features: "android-content-pm-ConfigurationInfo"
        #[cfg(any(feature = "all", all(feature = "android-content-pm-ConfigurationInfo")))]
        pub fn getDeviceConfigurationInfo<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::pm::ConfigurationInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/ActivityManager", java.flags == PUBLIC, .name == "getDeviceConfigurationInfo", .descriptor == "()Landroid/content/pm/ConfigurationInfo;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/ActivityManager\0", "getDeviceConfigurationInfo\0", "()Landroid/content/pm/ConfigurationInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLauncherLargeIconDensity](https://developer.android.com/reference/android/app/ActivityManager.html#getLauncherLargeIconDensity())
        pub fn getLauncherLargeIconDensity<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/ActivityManager", java.flags == PUBLIC, .name == "getLauncherLargeIconDensity", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/ActivityManager\0", "getLauncherLargeIconDensity\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLauncherLargeIconSize](https://developer.android.com/reference/android/app/ActivityManager.html#getLauncherLargeIconSize())
        pub fn getLauncherLargeIconSize<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/ActivityManager", java.flags == PUBLIC, .name == "getLauncherLargeIconSize", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/ActivityManager\0", "getLauncherLargeIconSize\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isUserAMonkey](https://developer.android.com/reference/android/app/ActivityManager.html#isUserAMonkey())
        pub fn isUserAMonkey<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/ActivityManager", java.flags == PUBLIC | STATIC, .name == "isUserAMonkey", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/app/ActivityManager\0", "isUserAMonkey\0", "()Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isRunningInTestHarness](https://developer.android.com/reference/android/app/ActivityManager.html#isRunningInTestHarness())
        #[deprecated] pub fn isRunningInTestHarness<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/ActivityManager", java.flags == PUBLIC | STATIC, .name == "isRunningInTestHarness", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/app/ActivityManager\0", "isRunningInTestHarness\0", "()Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isRunningInUserTestHarness](https://developer.android.com/reference/android/app/ActivityManager.html#isRunningInUserTestHarness())
        pub fn isRunningInUserTestHarness<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/ActivityManager", java.flags == PUBLIC | STATIC, .name == "isRunningInUserTestHarness", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/app/ActivityManager\0", "isRunningInUserTestHarness\0", "()Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dumpPackageState](https://developer.android.com/reference/android/app/ActivityManager.html#dumpPackageState(java.io.FileDescriptor,%20java.lang.String))
        ///
        /// Required features: "java-io-FileDescriptor", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-io-FileDescriptor", feature = "java-lang-String")))]
        pub fn dumpPackageState<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::FileDescriptor>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/ActivityManager", java.flags == PUBLIC, .name == "dumpPackageState", .descriptor == "(Ljava/io/FileDescriptor;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/ActivityManager\0", "dumpPackageState\0", "(Ljava/io/FileDescriptor;Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setWatchHeapLimit](https://developer.android.com/reference/android/app/ActivityManager.html#setWatchHeapLimit(long))
        pub fn setWatchHeapLimit<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/ActivityManager", java.flags == PUBLIC, .name == "setWatchHeapLimit", .descriptor == "(J)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/ActivityManager\0", "setWatchHeapLimit\0", "(J)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clearWatchHeapLimit](https://developer.android.com/reference/android/app/ActivityManager.html#clearWatchHeapLimit())
        pub fn clearWatchHeapLimit<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/ActivityManager", java.flags == PUBLIC, .name == "clearWatchHeapLimit", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/ActivityManager\0", "clearWatchHeapLimit\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isInLockTaskMode](https://developer.android.com/reference/android/app/ActivityManager.html#isInLockTaskMode())
        #[deprecated] pub fn isInLockTaskMode<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/ActivityManager", java.flags == PUBLIC, .name == "isInLockTaskMode", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/ActivityManager\0", "isInLockTaskMode\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLockTaskModeState](https://developer.android.com/reference/android/app/ActivityManager.html#getLockTaskModeState())
        pub fn getLockTaskModeState<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/ActivityManager", java.flags == PUBLIC, .name == "getLockTaskModeState", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/ActivityManager\0", "getLockTaskModeState\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setVrThread](https://developer.android.com/reference/android/app/ActivityManager.html#setVrThread(int))
        pub fn setVrThread<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/ActivityManager", java.flags == PUBLIC | STATIC, .name == "setVrThread", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/app/ActivityManager\0", "setVrThread\0", "(I)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [ACTION_REPORT_HEAP_LIMIT](https://developer.android.com/reference/android/app/ActivityManager.html#ACTION_REPORT_HEAP_LIMIT)
        pub const ACTION_REPORT_HEAP_LIMIT : &'static str = "android.app.action.REPORT_HEAP_LIMIT";

        /// public static final [LOCK_TASK_MODE_LOCKED](https://developer.android.com/reference/android/app/ActivityManager.html#LOCK_TASK_MODE_LOCKED)
        pub const LOCK_TASK_MODE_LOCKED : i32 = 1;

        /// public static final [LOCK_TASK_MODE_NONE](https://developer.android.com/reference/android/app/ActivityManager.html#LOCK_TASK_MODE_NONE)
        pub const LOCK_TASK_MODE_NONE : i32 = 0;

        /// public static final [LOCK_TASK_MODE_PINNED](https://developer.android.com/reference/android/app/ActivityManager.html#LOCK_TASK_MODE_PINNED)
        pub const LOCK_TASK_MODE_PINNED : i32 = 2;

        /// public static final [META_HOME_ALTERNATE](https://developer.android.com/reference/android/app/ActivityManager.html#META_HOME_ALTERNATE)
        pub const META_HOME_ALTERNATE : &'static str = "android.app.home.alternate";

        /// public static final [MOVE_TASK_NO_USER_ACTION](https://developer.android.com/reference/android/app/ActivityManager.html#MOVE_TASK_NO_USER_ACTION)
        pub const MOVE_TASK_NO_USER_ACTION : i32 = 2;

        /// public static final [MOVE_TASK_WITH_HOME](https://developer.android.com/reference/android/app/ActivityManager.html#MOVE_TASK_WITH_HOME)
        pub const MOVE_TASK_WITH_HOME : i32 = 1;

        /// public static final [RECENT_IGNORE_UNAVAILABLE](https://developer.android.com/reference/android/app/ActivityManager.html#RECENT_IGNORE_UNAVAILABLE)
        pub const RECENT_IGNORE_UNAVAILABLE : i32 = 2;

        /// public static final [RECENT_WITH_EXCLUDED](https://developer.android.com/reference/android/app/ActivityManager.html#RECENT_WITH_EXCLUDED)
        pub const RECENT_WITH_EXCLUDED : i32 = 1;
    }
}
