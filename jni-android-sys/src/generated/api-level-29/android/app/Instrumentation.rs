// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-app-Instrumentation"))]
__jni_bindgen! {
    /// public class [Instrumentation](https://developer.android.com/reference/android/app/Instrumentation.html)
    ///
    /// Required feature: android-app-Instrumentation
    public class Instrumentation ("android/app/Instrumentation") extends crate::java::lang::Object {

        /// [Instrumentation](https://developer.android.com/reference/android/app/Instrumentation.html#Instrumentation())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::app::Instrumentation>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onCreate](https://developer.android.com/reference/android/app/Instrumentation.html#onCreate(android.os.Bundle))
        ///
        /// Required features: "android-os-Bundle"
        #[cfg(any(feature = "all", all(feature = "android-os-Bundle")))]
        pub fn onCreate<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation", java.flags == PUBLIC, .name == "onCreate", .descriptor == "(Landroid/os/Bundle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation\0", "onCreate\0", "(Landroid/os/Bundle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [start](https://developer.android.com/reference/android/app/Instrumentation.html#start())
        pub fn start<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation", java.flags == PUBLIC, .name == "start", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation\0", "start\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onStart](https://developer.android.com/reference/android/app/Instrumentation.html#onStart())
        pub fn onStart<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation", java.flags == PUBLIC, .name == "onStart", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation\0", "onStart\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onException](https://developer.android.com/reference/android/app/Instrumentation.html#onException(java.lang.Object,%20java.lang.Throwable))
        ///
        /// Required features: "java-lang-Object", "java-lang-Throwable"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-lang-Throwable")))]
        pub fn onException<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Throwable>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation", java.flags == PUBLIC, .name == "onException", .descriptor == "(Ljava/lang/Object;Ljava/lang/Throwable;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation\0", "onException\0", "(Ljava/lang/Object;Ljava/lang/Throwable;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [sendStatus](https://developer.android.com/reference/android/app/Instrumentation.html#sendStatus(int,%20android.os.Bundle))
        ///
        /// Required features: "android-os-Bundle"
        #[cfg(any(feature = "all", all(feature = "android-os-Bundle")))]
        pub fn sendStatus<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation", java.flags == PUBLIC, .name == "sendStatus", .descriptor == "(ILandroid/os/Bundle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation\0", "sendStatus\0", "(ILandroid/os/Bundle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addResults](https://developer.android.com/reference/android/app/Instrumentation.html#addResults(android.os.Bundle))
        ///
        /// Required features: "android-os-Bundle"
        #[cfg(any(feature = "all", all(feature = "android-os-Bundle")))]
        pub fn addResults<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation", java.flags == PUBLIC, .name == "addResults", .descriptor == "(Landroid/os/Bundle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation\0", "addResults\0", "(Landroid/os/Bundle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [finish](https://developer.android.com/reference/android/app/Instrumentation.html#finish(int,%20android.os.Bundle))
        ///
        /// Required features: "android-os-Bundle"
        #[cfg(any(feature = "all", all(feature = "android-os-Bundle")))]
        pub fn finish<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation", java.flags == PUBLIC, .name == "finish", .descriptor == "(ILandroid/os/Bundle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation\0", "finish\0", "(ILandroid/os/Bundle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAutomaticPerformanceSnapshots](https://developer.android.com/reference/android/app/Instrumentation.html#setAutomaticPerformanceSnapshots())
        pub fn setAutomaticPerformanceSnapshots<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation", java.flags == PUBLIC, .name == "setAutomaticPerformanceSnapshots", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation\0", "setAutomaticPerformanceSnapshots\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [startPerformanceSnapshot](https://developer.android.com/reference/android/app/Instrumentation.html#startPerformanceSnapshot())
        pub fn startPerformanceSnapshot<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation", java.flags == PUBLIC, .name == "startPerformanceSnapshot", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation\0", "startPerformanceSnapshot\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [endPerformanceSnapshot](https://developer.android.com/reference/android/app/Instrumentation.html#endPerformanceSnapshot())
        pub fn endPerformanceSnapshot<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation", java.flags == PUBLIC, .name == "endPerformanceSnapshot", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation\0", "endPerformanceSnapshot\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onDestroy](https://developer.android.com/reference/android/app/Instrumentation.html#onDestroy())
        pub fn onDestroy<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation", java.flags == PUBLIC, .name == "onDestroy", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation\0", "onDestroy\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getContext](https://developer.android.com/reference/android/app/Instrumentation.html#getContext())
        ///
        /// Required features: "android-content-Context"
        #[cfg(any(feature = "all", all(feature = "android-content-Context")))]
        pub fn getContext<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::Context>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation", java.flags == PUBLIC, .name == "getContext", .descriptor == "()Landroid/content/Context;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation\0", "getContext\0", "()Landroid/content/Context;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getComponentName](https://developer.android.com/reference/android/app/Instrumentation.html#getComponentName())
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn getComponentName<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::ComponentName>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation", java.flags == PUBLIC, .name == "getComponentName", .descriptor == "()Landroid/content/ComponentName;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation\0", "getComponentName\0", "()Landroid/content/ComponentName;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTargetContext](https://developer.android.com/reference/android/app/Instrumentation.html#getTargetContext())
        ///
        /// Required features: "android-content-Context"
        #[cfg(any(feature = "all", all(feature = "android-content-Context")))]
        pub fn getTargetContext<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::Context>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation", java.flags == PUBLIC, .name == "getTargetContext", .descriptor == "()Landroid/content/Context;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation\0", "getTargetContext\0", "()Landroid/content/Context;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getProcessName](https://developer.android.com/reference/android/app/Instrumentation.html#getProcessName())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getProcessName<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation", java.flags == PUBLIC, .name == "getProcessName", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation\0", "getProcessName\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isProfiling](https://developer.android.com/reference/android/app/Instrumentation.html#isProfiling())
        pub fn isProfiling<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation", java.flags == PUBLIC, .name == "isProfiling", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation\0", "isProfiling\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [startProfiling](https://developer.android.com/reference/android/app/Instrumentation.html#startProfiling())
        pub fn startProfiling<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation", java.flags == PUBLIC, .name == "startProfiling", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation\0", "startProfiling\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [stopProfiling](https://developer.android.com/reference/android/app/Instrumentation.html#stopProfiling())
        pub fn stopProfiling<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation", java.flags == PUBLIC, .name == "stopProfiling", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation\0", "stopProfiling\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setInTouchMode](https://developer.android.com/reference/android/app/Instrumentation.html#setInTouchMode(boolean))
        pub fn setInTouchMode<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation", java.flags == PUBLIC, .name == "setInTouchMode", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation\0", "setInTouchMode\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [waitForIdle](https://developer.android.com/reference/android/app/Instrumentation.html#waitForIdle(java.lang.Runnable))
        ///
        /// Required features: "java-lang-Runnable"
        #[cfg(any(feature = "all", all(feature = "java-lang-Runnable")))]
        pub fn waitForIdle<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Runnable>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation", java.flags == PUBLIC, .name == "waitForIdle", .descriptor == "(Ljava/lang/Runnable;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation\0", "waitForIdle\0", "(Ljava/lang/Runnable;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [waitForIdleSync](https://developer.android.com/reference/android/app/Instrumentation.html#waitForIdleSync())
        pub fn waitForIdleSync<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation", java.flags == PUBLIC, .name == "waitForIdleSync", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation\0", "waitForIdleSync\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [runOnMainSync](https://developer.android.com/reference/android/app/Instrumentation.html#runOnMainSync(java.lang.Runnable))
        ///
        /// Required features: "java-lang-Runnable"
        #[cfg(any(feature = "all", all(feature = "java-lang-Runnable")))]
        pub fn runOnMainSync<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Runnable>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation", java.flags == PUBLIC, .name == "runOnMainSync", .descriptor == "(Ljava/lang/Runnable;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation\0", "runOnMainSync\0", "(Ljava/lang/Runnable;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [startActivitySync](https://developer.android.com/reference/android/app/Instrumentation.html#startActivitySync(android.content.Intent))
        ///
        /// Required features: "android-app-Activity", "android-content-Intent"
        #[cfg(any(feature = "all", all(feature = "android-app-Activity", feature = "android-content-Intent")))]
        pub fn startActivitySync_Intent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Activity>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation", java.flags == PUBLIC, .name == "startActivitySync", .descriptor == "(Landroid/content/Intent;)Landroid/app/Activity;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation\0", "startActivitySync\0", "(Landroid/content/Intent;)Landroid/app/Activity;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [startActivitySync](https://developer.android.com/reference/android/app/Instrumentation.html#startActivitySync(android.content.Intent,%20android.os.Bundle))
        ///
        /// Required features: "android-app-Activity", "android-content-Intent", "android-os-Bundle"
        #[cfg(any(feature = "all", all(feature = "android-app-Activity", feature = "android-content-Intent", feature = "android-os-Bundle")))]
        pub fn startActivitySync_Intent_Bundle<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Activity>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation", java.flags == PUBLIC, .name == "startActivitySync", .descriptor == "(Landroid/content/Intent;Landroid/os/Bundle;)Landroid/app/Activity;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation\0", "startActivitySync\0", "(Landroid/content/Intent;Landroid/os/Bundle;)Landroid/app/Activity;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addMonitor](https://developer.android.com/reference/android/app/Instrumentation.html#addMonitor(android.app.Instrumentation.ActivityMonitor))
        ///
        /// Required features: "android-app-Instrumentation_ActivityMonitor"
        #[cfg(any(feature = "all", all(feature = "android-app-Instrumentation_ActivityMonitor")))]
        pub fn addMonitor_ActivityMonitor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Instrumentation_ActivityMonitor>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation", java.flags == PUBLIC, .name == "addMonitor", .descriptor == "(Landroid/app/Instrumentation$ActivityMonitor;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation\0", "addMonitor\0", "(Landroid/app/Instrumentation$ActivityMonitor;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addMonitor](https://developer.android.com/reference/android/app/Instrumentation.html#addMonitor(android.content.IntentFilter,%20android.app.Instrumentation.ActivityResult,%20boolean))
        ///
        /// Required features: "android-app-Instrumentation_ActivityMonitor", "android-app-Instrumentation_ActivityResult", "android-content-IntentFilter"
        #[cfg(any(feature = "all", all(feature = "android-app-Instrumentation_ActivityMonitor", feature = "android-app-Instrumentation_ActivityResult", feature = "android-content-IntentFilter")))]
        pub fn addMonitor_IntentFilter_ActivityResult_boolean<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::IntentFilter>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Instrumentation_ActivityResult>>, arg2: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Instrumentation_ActivityMonitor>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation", java.flags == PUBLIC, .name == "addMonitor", .descriptor == "(Landroid/content/IntentFilter;Landroid/app/Instrumentation$ActivityResult;Z)Landroid/app/Instrumentation$ActivityMonitor;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation\0", "addMonitor\0", "(Landroid/content/IntentFilter;Landroid/app/Instrumentation$ActivityResult;Z)Landroid/app/Instrumentation$ActivityMonitor;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addMonitor](https://developer.android.com/reference/android/app/Instrumentation.html#addMonitor(java.lang.String,%20android.app.Instrumentation.ActivityResult,%20boolean))
        ///
        /// Required features: "android-app-Instrumentation_ActivityMonitor", "android-app-Instrumentation_ActivityResult", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-app-Instrumentation_ActivityMonitor", feature = "android-app-Instrumentation_ActivityResult", feature = "java-lang-String")))]
        pub fn addMonitor_String_ActivityResult_boolean<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Instrumentation_ActivityResult>>, arg2: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Instrumentation_ActivityMonitor>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation", java.flags == PUBLIC, .name == "addMonitor", .descriptor == "(Ljava/lang/String;Landroid/app/Instrumentation$ActivityResult;Z)Landroid/app/Instrumentation$ActivityMonitor;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation\0", "addMonitor\0", "(Ljava/lang/String;Landroid/app/Instrumentation$ActivityResult;Z)Landroid/app/Instrumentation$ActivityMonitor;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [checkMonitorHit](https://developer.android.com/reference/android/app/Instrumentation.html#checkMonitorHit(android.app.Instrumentation.ActivityMonitor,%20int))
        ///
        /// Required features: "android-app-Instrumentation_ActivityMonitor"
        #[cfg(any(feature = "all", all(feature = "android-app-Instrumentation_ActivityMonitor")))]
        pub fn checkMonitorHit<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Instrumentation_ActivityMonitor>>, arg1: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation", java.flags == PUBLIC, .name == "checkMonitorHit", .descriptor == "(Landroid/app/Instrumentation$ActivityMonitor;I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation\0", "checkMonitorHit\0", "(Landroid/app/Instrumentation$ActivityMonitor;I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [waitForMonitor](https://developer.android.com/reference/android/app/Instrumentation.html#waitForMonitor(android.app.Instrumentation.ActivityMonitor))
        ///
        /// Required features: "android-app-Activity", "android-app-Instrumentation_ActivityMonitor"
        #[cfg(any(feature = "all", all(feature = "android-app-Activity", feature = "android-app-Instrumentation_ActivityMonitor")))]
        pub fn waitForMonitor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Instrumentation_ActivityMonitor>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Activity>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation", java.flags == PUBLIC, .name == "waitForMonitor", .descriptor == "(Landroid/app/Instrumentation$ActivityMonitor;)Landroid/app/Activity;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation\0", "waitForMonitor\0", "(Landroid/app/Instrumentation$ActivityMonitor;)Landroid/app/Activity;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [waitForMonitorWithTimeout](https://developer.android.com/reference/android/app/Instrumentation.html#waitForMonitorWithTimeout(android.app.Instrumentation.ActivityMonitor,%20long))
        ///
        /// Required features: "android-app-Activity", "android-app-Instrumentation_ActivityMonitor"
        #[cfg(any(feature = "all", all(feature = "android-app-Activity", feature = "android-app-Instrumentation_ActivityMonitor")))]
        pub fn waitForMonitorWithTimeout<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Instrumentation_ActivityMonitor>>, arg1: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Activity>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation", java.flags == PUBLIC, .name == "waitForMonitorWithTimeout", .descriptor == "(Landroid/app/Instrumentation$ActivityMonitor;J)Landroid/app/Activity;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation\0", "waitForMonitorWithTimeout\0", "(Landroid/app/Instrumentation$ActivityMonitor;J)Landroid/app/Activity;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeMonitor](https://developer.android.com/reference/android/app/Instrumentation.html#removeMonitor(android.app.Instrumentation.ActivityMonitor))
        ///
        /// Required features: "android-app-Instrumentation_ActivityMonitor"
        #[cfg(any(feature = "all", all(feature = "android-app-Instrumentation_ActivityMonitor")))]
        pub fn removeMonitor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Instrumentation_ActivityMonitor>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation", java.flags == PUBLIC, .name == "removeMonitor", .descriptor == "(Landroid/app/Instrumentation$ActivityMonitor;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation\0", "removeMonitor\0", "(Landroid/app/Instrumentation$ActivityMonitor;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [invokeMenuActionSync](https://developer.android.com/reference/android/app/Instrumentation.html#invokeMenuActionSync(android.app.Activity,%20int,%20int))
        ///
        /// Required features: "android-app-Activity"
        #[cfg(any(feature = "all", all(feature = "android-app-Activity")))]
        pub fn invokeMenuActionSync<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Activity>>, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation", java.flags == PUBLIC, .name == "invokeMenuActionSync", .descriptor == "(Landroid/app/Activity;II)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation\0", "invokeMenuActionSync\0", "(Landroid/app/Activity;II)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [invokeContextMenuAction](https://developer.android.com/reference/android/app/Instrumentation.html#invokeContextMenuAction(android.app.Activity,%20int,%20int))
        ///
        /// Required features: "android-app-Activity"
        #[cfg(any(feature = "all", all(feature = "android-app-Activity")))]
        pub fn invokeContextMenuAction<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Activity>>, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation", java.flags == PUBLIC, .name == "invokeContextMenuAction", .descriptor == "(Landroid/app/Activity;II)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation\0", "invokeContextMenuAction\0", "(Landroid/app/Activity;II)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [sendStringSync](https://developer.android.com/reference/android/app/Instrumentation.html#sendStringSync(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn sendStringSync<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation", java.flags == PUBLIC, .name == "sendStringSync", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation\0", "sendStringSync\0", "(Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [sendKeySync](https://developer.android.com/reference/android/app/Instrumentation.html#sendKeySync(android.view.KeyEvent))
        ///
        /// Required features: "android-view-KeyEvent"
        #[cfg(any(feature = "all", all(feature = "android-view-KeyEvent")))]
        pub fn sendKeySync<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::KeyEvent>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation", java.flags == PUBLIC, .name == "sendKeySync", .descriptor == "(Landroid/view/KeyEvent;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation\0", "sendKeySync\0", "(Landroid/view/KeyEvent;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [sendKeyDownUpSync](https://developer.android.com/reference/android/app/Instrumentation.html#sendKeyDownUpSync(int))
        pub fn sendKeyDownUpSync<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation", java.flags == PUBLIC, .name == "sendKeyDownUpSync", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation\0", "sendKeyDownUpSync\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [sendCharacterSync](https://developer.android.com/reference/android/app/Instrumentation.html#sendCharacterSync(int))
        pub fn sendCharacterSync<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation", java.flags == PUBLIC, .name == "sendCharacterSync", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation\0", "sendCharacterSync\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [sendPointerSync](https://developer.android.com/reference/android/app/Instrumentation.html#sendPointerSync(android.view.MotionEvent))
        ///
        /// Required features: "android-view-MotionEvent"
        #[cfg(any(feature = "all", all(feature = "android-view-MotionEvent")))]
        pub fn sendPointerSync<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::MotionEvent>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation", java.flags == PUBLIC, .name == "sendPointerSync", .descriptor == "(Landroid/view/MotionEvent;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation\0", "sendPointerSync\0", "(Landroid/view/MotionEvent;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [sendTrackballEventSync](https://developer.android.com/reference/android/app/Instrumentation.html#sendTrackballEventSync(android.view.MotionEvent))
        ///
        /// Required features: "android-view-MotionEvent"
        #[cfg(any(feature = "all", all(feature = "android-view-MotionEvent")))]
        pub fn sendTrackballEventSync<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::MotionEvent>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation", java.flags == PUBLIC, .name == "sendTrackballEventSync", .descriptor == "(Landroid/view/MotionEvent;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation\0", "sendTrackballEventSync\0", "(Landroid/view/MotionEvent;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newApplication](https://developer.android.com/reference/android/app/Instrumentation.html#newApplication(java.lang.ClassLoader,%20java.lang.String,%20android.content.Context))
        ///
        /// Required features: "android-app-Application", "android-content-Context", "java-lang-ClassLoader", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-app-Application", feature = "android-content-Context", feature = "java-lang-ClassLoader", feature = "java-lang-String")))]
        pub fn newApplication_ClassLoader_String_Context<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::ClassLoader>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Application>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation", java.flags == PUBLIC, .name == "newApplication", .descriptor == "(Ljava/lang/ClassLoader;Ljava/lang/String;Landroid/content/Context;)Landroid/app/Application;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation\0", "newApplication\0", "(Ljava/lang/ClassLoader;Ljava/lang/String;Landroid/content/Context;)Landroid/app/Application;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newApplication](https://developer.android.com/reference/android/app/Instrumentation.html#newApplication(java.lang.Class,%20android.content.Context))
        ///
        /// Required features: "android-app-Application", "android-content-Context", "java-lang-Class"
        #[cfg(any(feature = "all", all(feature = "android-app-Application", feature = "android-content-Context", feature = "java-lang-Class")))]
        pub fn newApplication_Class_Context<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Application>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation", java.flags == PUBLIC | STATIC, .name == "newApplication", .descriptor == "(Ljava/lang/Class;Landroid/content/Context;)Landroid/app/Application;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/app/Instrumentation\0", "newApplication\0", "(Ljava/lang/Class;Landroid/content/Context;)Landroid/app/Application;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [callApplicationOnCreate](https://developer.android.com/reference/android/app/Instrumentation.html#callApplicationOnCreate(android.app.Application))
        ///
        /// Required features: "android-app-Application"
        #[cfg(any(feature = "all", all(feature = "android-app-Application")))]
        pub fn callApplicationOnCreate<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Application>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation", java.flags == PUBLIC, .name == "callApplicationOnCreate", .descriptor == "(Landroid/app/Application;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation\0", "callApplicationOnCreate\0", "(Landroid/app/Application;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newActivity](https://developer.android.com/reference/android/app/Instrumentation.html#newActivity(java.lang.Class,%20android.content.Context,%20android.os.IBinder,%20android.app.Application,%20android.content.Intent,%20android.content.pm.ActivityInfo,%20java.lang.CharSequence,%20android.app.Activity,%20java.lang.String,%20java.lang.Object))
        ///
        /// Required features: "android-app-Activity", "android-app-Application", "android-content-Context", "android-content-Intent", "android-content-pm-ActivityInfo", "android-os-IBinder", "java-lang-CharSequence", "java-lang-Class", "java-lang-Object", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-app-Activity", feature = "android-app-Application", feature = "android-content-Context", feature = "android-content-Intent", feature = "android-content-pm-ActivityInfo", feature = "android-os-IBinder", feature = "java-lang-CharSequence", feature = "java-lang-Class", feature = "java-lang-Object", feature = "java-lang-String")))]
        pub fn newActivity_Class_Context_IBinder_Application_Intent_ActivityInfo_CharSequence_Activity_String_Object<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::IBinder>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Application>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::pm::ActivityInfo>>, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg7: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Activity>>, arg8: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg9: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Activity>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation", java.flags == PUBLIC, .name == "newActivity", .descriptor == "(Ljava/lang/Class;Landroid/content/Context;Landroid/os/IBinder;Landroid/app/Application;Landroid/content/Intent;Landroid/content/pm/ActivityInfo;Ljava/lang/CharSequence;Landroid/app/Activity;Ljava/lang/String;Ljava/lang/Object;)Landroid/app/Activity;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5.into()), __jni_bindgen::AsJValue::as_jvalue(&arg6.into()), __jni_bindgen::AsJValue::as_jvalue(&arg7.into()), __jni_bindgen::AsJValue::as_jvalue(&arg8.into()), __jni_bindgen::AsJValue::as_jvalue(&arg9.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation\0", "newActivity\0", "(Ljava/lang/Class;Landroid/content/Context;Landroid/os/IBinder;Landroid/app/Application;Landroid/content/Intent;Landroid/content/pm/ActivityInfo;Ljava/lang/CharSequence;Landroid/app/Activity;Ljava/lang/String;Ljava/lang/Object;)Landroid/app/Activity;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newActivity](https://developer.android.com/reference/android/app/Instrumentation.html#newActivity(java.lang.ClassLoader,%20java.lang.String,%20android.content.Intent))
        ///
        /// Required features: "android-app-Activity", "android-content-Intent", "java-lang-ClassLoader", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-app-Activity", feature = "android-content-Intent", feature = "java-lang-ClassLoader", feature = "java-lang-String")))]
        pub fn newActivity_ClassLoader_String_Intent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::ClassLoader>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Activity>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation", java.flags == PUBLIC, .name == "newActivity", .descriptor == "(Ljava/lang/ClassLoader;Ljava/lang/String;Landroid/content/Intent;)Landroid/app/Activity;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation\0", "newActivity\0", "(Ljava/lang/ClassLoader;Ljava/lang/String;Landroid/content/Intent;)Landroid/app/Activity;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [callActivityOnCreate](https://developer.android.com/reference/android/app/Instrumentation.html#callActivityOnCreate(android.app.Activity,%20android.os.Bundle))
        ///
        /// Required features: "android-app-Activity", "android-os-Bundle"
        #[cfg(any(feature = "all", all(feature = "android-app-Activity", feature = "android-os-Bundle")))]
        pub fn callActivityOnCreate_Activity_Bundle<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Activity>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation", java.flags == PUBLIC, .name == "callActivityOnCreate", .descriptor == "(Landroid/app/Activity;Landroid/os/Bundle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation\0", "callActivityOnCreate\0", "(Landroid/app/Activity;Landroid/os/Bundle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [callActivityOnCreate](https://developer.android.com/reference/android/app/Instrumentation.html#callActivityOnCreate(android.app.Activity,%20android.os.Bundle,%20android.os.PersistableBundle))
        ///
        /// Required features: "android-app-Activity", "android-os-Bundle", "android-os-PersistableBundle"
        #[cfg(any(feature = "all", all(feature = "android-app-Activity", feature = "android-os-Bundle", feature = "android-os-PersistableBundle")))]
        pub fn callActivityOnCreate_Activity_Bundle_PersistableBundle<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Activity>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::PersistableBundle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation", java.flags == PUBLIC, .name == "callActivityOnCreate", .descriptor == "(Landroid/app/Activity;Landroid/os/Bundle;Landroid/os/PersistableBundle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation\0", "callActivityOnCreate\0", "(Landroid/app/Activity;Landroid/os/Bundle;Landroid/os/PersistableBundle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [callActivityOnDestroy](https://developer.android.com/reference/android/app/Instrumentation.html#callActivityOnDestroy(android.app.Activity))
        ///
        /// Required features: "android-app-Activity"
        #[cfg(any(feature = "all", all(feature = "android-app-Activity")))]
        pub fn callActivityOnDestroy<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Activity>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation", java.flags == PUBLIC, .name == "callActivityOnDestroy", .descriptor == "(Landroid/app/Activity;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation\0", "callActivityOnDestroy\0", "(Landroid/app/Activity;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [callActivityOnRestoreInstanceState](https://developer.android.com/reference/android/app/Instrumentation.html#callActivityOnRestoreInstanceState(android.app.Activity,%20android.os.Bundle))
        ///
        /// Required features: "android-app-Activity", "android-os-Bundle"
        #[cfg(any(feature = "all", all(feature = "android-app-Activity", feature = "android-os-Bundle")))]
        pub fn callActivityOnRestoreInstanceState_Activity_Bundle<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Activity>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation", java.flags == PUBLIC, .name == "callActivityOnRestoreInstanceState", .descriptor == "(Landroid/app/Activity;Landroid/os/Bundle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation\0", "callActivityOnRestoreInstanceState\0", "(Landroid/app/Activity;Landroid/os/Bundle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [callActivityOnRestoreInstanceState](https://developer.android.com/reference/android/app/Instrumentation.html#callActivityOnRestoreInstanceState(android.app.Activity,%20android.os.Bundle,%20android.os.PersistableBundle))
        ///
        /// Required features: "android-app-Activity", "android-os-Bundle", "android-os-PersistableBundle"
        #[cfg(any(feature = "all", all(feature = "android-app-Activity", feature = "android-os-Bundle", feature = "android-os-PersistableBundle")))]
        pub fn callActivityOnRestoreInstanceState_Activity_Bundle_PersistableBundle<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Activity>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::PersistableBundle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation", java.flags == PUBLIC, .name == "callActivityOnRestoreInstanceState", .descriptor == "(Landroid/app/Activity;Landroid/os/Bundle;Landroid/os/PersistableBundle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation\0", "callActivityOnRestoreInstanceState\0", "(Landroid/app/Activity;Landroid/os/Bundle;Landroid/os/PersistableBundle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [callActivityOnPostCreate](https://developer.android.com/reference/android/app/Instrumentation.html#callActivityOnPostCreate(android.app.Activity,%20android.os.Bundle))
        ///
        /// Required features: "android-app-Activity", "android-os-Bundle"
        #[cfg(any(feature = "all", all(feature = "android-app-Activity", feature = "android-os-Bundle")))]
        pub fn callActivityOnPostCreate_Activity_Bundle<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Activity>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation", java.flags == PUBLIC, .name == "callActivityOnPostCreate", .descriptor == "(Landroid/app/Activity;Landroid/os/Bundle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation\0", "callActivityOnPostCreate\0", "(Landroid/app/Activity;Landroid/os/Bundle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [callActivityOnPostCreate](https://developer.android.com/reference/android/app/Instrumentation.html#callActivityOnPostCreate(android.app.Activity,%20android.os.Bundle,%20android.os.PersistableBundle))
        ///
        /// Required features: "android-app-Activity", "android-os-Bundle", "android-os-PersistableBundle"
        #[cfg(any(feature = "all", all(feature = "android-app-Activity", feature = "android-os-Bundle", feature = "android-os-PersistableBundle")))]
        pub fn callActivityOnPostCreate_Activity_Bundle_PersistableBundle<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Activity>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::PersistableBundle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation", java.flags == PUBLIC, .name == "callActivityOnPostCreate", .descriptor == "(Landroid/app/Activity;Landroid/os/Bundle;Landroid/os/PersistableBundle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation\0", "callActivityOnPostCreate\0", "(Landroid/app/Activity;Landroid/os/Bundle;Landroid/os/PersistableBundle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [callActivityOnNewIntent](https://developer.android.com/reference/android/app/Instrumentation.html#callActivityOnNewIntent(android.app.Activity,%20android.content.Intent))
        ///
        /// Required features: "android-app-Activity", "android-content-Intent"
        #[cfg(any(feature = "all", all(feature = "android-app-Activity", feature = "android-content-Intent")))]
        pub fn callActivityOnNewIntent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Activity>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation", java.flags == PUBLIC, .name == "callActivityOnNewIntent", .descriptor == "(Landroid/app/Activity;Landroid/content/Intent;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation\0", "callActivityOnNewIntent\0", "(Landroid/app/Activity;Landroid/content/Intent;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [callActivityOnStart](https://developer.android.com/reference/android/app/Instrumentation.html#callActivityOnStart(android.app.Activity))
        ///
        /// Required features: "android-app-Activity"
        #[cfg(any(feature = "all", all(feature = "android-app-Activity")))]
        pub fn callActivityOnStart<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Activity>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation", java.flags == PUBLIC, .name == "callActivityOnStart", .descriptor == "(Landroid/app/Activity;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation\0", "callActivityOnStart\0", "(Landroid/app/Activity;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [callActivityOnRestart](https://developer.android.com/reference/android/app/Instrumentation.html#callActivityOnRestart(android.app.Activity))
        ///
        /// Required features: "android-app-Activity"
        #[cfg(any(feature = "all", all(feature = "android-app-Activity")))]
        pub fn callActivityOnRestart<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Activity>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation", java.flags == PUBLIC, .name == "callActivityOnRestart", .descriptor == "(Landroid/app/Activity;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation\0", "callActivityOnRestart\0", "(Landroid/app/Activity;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [callActivityOnResume](https://developer.android.com/reference/android/app/Instrumentation.html#callActivityOnResume(android.app.Activity))
        ///
        /// Required features: "android-app-Activity"
        #[cfg(any(feature = "all", all(feature = "android-app-Activity")))]
        pub fn callActivityOnResume<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Activity>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation", java.flags == PUBLIC, .name == "callActivityOnResume", .descriptor == "(Landroid/app/Activity;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation\0", "callActivityOnResume\0", "(Landroid/app/Activity;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [callActivityOnStop](https://developer.android.com/reference/android/app/Instrumentation.html#callActivityOnStop(android.app.Activity))
        ///
        /// Required features: "android-app-Activity"
        #[cfg(any(feature = "all", all(feature = "android-app-Activity")))]
        pub fn callActivityOnStop<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Activity>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation", java.flags == PUBLIC, .name == "callActivityOnStop", .descriptor == "(Landroid/app/Activity;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation\0", "callActivityOnStop\0", "(Landroid/app/Activity;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [callActivityOnSaveInstanceState](https://developer.android.com/reference/android/app/Instrumentation.html#callActivityOnSaveInstanceState(android.app.Activity,%20android.os.Bundle))
        ///
        /// Required features: "android-app-Activity", "android-os-Bundle"
        #[cfg(any(feature = "all", all(feature = "android-app-Activity", feature = "android-os-Bundle")))]
        pub fn callActivityOnSaveInstanceState_Activity_Bundle<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Activity>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation", java.flags == PUBLIC, .name == "callActivityOnSaveInstanceState", .descriptor == "(Landroid/app/Activity;Landroid/os/Bundle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation\0", "callActivityOnSaveInstanceState\0", "(Landroid/app/Activity;Landroid/os/Bundle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [callActivityOnSaveInstanceState](https://developer.android.com/reference/android/app/Instrumentation.html#callActivityOnSaveInstanceState(android.app.Activity,%20android.os.Bundle,%20android.os.PersistableBundle))
        ///
        /// Required features: "android-app-Activity", "android-os-Bundle", "android-os-PersistableBundle"
        #[cfg(any(feature = "all", all(feature = "android-app-Activity", feature = "android-os-Bundle", feature = "android-os-PersistableBundle")))]
        pub fn callActivityOnSaveInstanceState_Activity_Bundle_PersistableBundle<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Activity>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::PersistableBundle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation", java.flags == PUBLIC, .name == "callActivityOnSaveInstanceState", .descriptor == "(Landroid/app/Activity;Landroid/os/Bundle;Landroid/os/PersistableBundle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation\0", "callActivityOnSaveInstanceState\0", "(Landroid/app/Activity;Landroid/os/Bundle;Landroid/os/PersistableBundle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [callActivityOnPause](https://developer.android.com/reference/android/app/Instrumentation.html#callActivityOnPause(android.app.Activity))
        ///
        /// Required features: "android-app-Activity"
        #[cfg(any(feature = "all", all(feature = "android-app-Activity")))]
        pub fn callActivityOnPause<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Activity>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation", java.flags == PUBLIC, .name == "callActivityOnPause", .descriptor == "(Landroid/app/Activity;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation\0", "callActivityOnPause\0", "(Landroid/app/Activity;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [callActivityOnUserLeaving](https://developer.android.com/reference/android/app/Instrumentation.html#callActivityOnUserLeaving(android.app.Activity))
        ///
        /// Required features: "android-app-Activity"
        #[cfg(any(feature = "all", all(feature = "android-app-Activity")))]
        pub fn callActivityOnUserLeaving<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Activity>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation", java.flags == PUBLIC, .name == "callActivityOnUserLeaving", .descriptor == "(Landroid/app/Activity;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation\0", "callActivityOnUserLeaving\0", "(Landroid/app/Activity;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [startAllocCounting](https://developer.android.com/reference/android/app/Instrumentation.html#startAllocCounting())
        #[deprecated] pub fn startAllocCounting<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation", java.flags == PUBLIC, .name == "startAllocCounting", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation\0", "startAllocCounting\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [stopAllocCounting](https://developer.android.com/reference/android/app/Instrumentation.html#stopAllocCounting())
        #[deprecated] pub fn stopAllocCounting<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation", java.flags == PUBLIC, .name == "stopAllocCounting", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation\0", "stopAllocCounting\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAllocCounts](https://developer.android.com/reference/android/app/Instrumentation.html#getAllocCounts())
        ///
        /// Required features: "android-os-Bundle"
        #[cfg(any(feature = "all", all(feature = "android-os-Bundle")))]
        pub fn getAllocCounts<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Bundle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation", java.flags == PUBLIC, .name == "getAllocCounts", .descriptor == "()Landroid/os/Bundle;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation\0", "getAllocCounts\0", "()Landroid/os/Bundle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getBinderCounts](https://developer.android.com/reference/android/app/Instrumentation.html#getBinderCounts())
        ///
        /// Required features: "android-os-Bundle"
        #[cfg(any(feature = "all", all(feature = "android-os-Bundle")))]
        pub fn getBinderCounts<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Bundle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation", java.flags == PUBLIC, .name == "getBinderCounts", .descriptor == "()Landroid/os/Bundle;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation\0", "getBinderCounts\0", "()Landroid/os/Bundle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getUiAutomation](https://developer.android.com/reference/android/app/Instrumentation.html#getUiAutomation())
        ///
        /// Required features: "android-app-UiAutomation"
        #[cfg(any(feature = "all", all(feature = "android-app-UiAutomation")))]
        pub fn getUiAutomation<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::UiAutomation>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation", java.flags == PUBLIC, .name == "getUiAutomation", .descriptor == "()Landroid/app/UiAutomation;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation\0", "getUiAutomation\0", "()Landroid/app/UiAutomation;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getUiAutomation](https://developer.android.com/reference/android/app/Instrumentation.html#getUiAutomation(int))
        ///
        /// Required features: "android-app-UiAutomation"
        #[cfg(any(feature = "all", all(feature = "android-app-UiAutomation")))]
        pub fn getUiAutomation_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::UiAutomation>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation", java.flags == PUBLIC, .name == "getUiAutomation", .descriptor == "(I)Landroid/app/UiAutomation;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation\0", "getUiAutomation\0", "(I)Landroid/app/UiAutomation;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [acquireLooperManager](https://developer.android.com/reference/android/app/Instrumentation.html#acquireLooperManager(android.os.Looper))
        ///
        /// Required features: "android-os-Looper", "android-os-TestLooperManager"
        #[cfg(any(feature = "all", all(feature = "android-os-Looper", feature = "android-os-TestLooperManager")))]
        pub fn acquireLooperManager<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Looper>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::TestLooperManager>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Instrumentation", java.flags == PUBLIC, .name == "acquireLooperManager", .descriptor == "(Landroid/os/Looper;)Landroid/os/TestLooperManager;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Instrumentation\0", "acquireLooperManager\0", "(Landroid/os/Looper;)Landroid/os/TestLooperManager;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [REPORT_KEY_IDENTIFIER](https://developer.android.com/reference/android/app/Instrumentation.html#REPORT_KEY_IDENTIFIER)
        pub const REPORT_KEY_IDENTIFIER : &'static str = "id";

        /// public static final [REPORT_KEY_STREAMRESULT](https://developer.android.com/reference/android/app/Instrumentation.html#REPORT_KEY_STREAMRESULT)
        pub const REPORT_KEY_STREAMRESULT : &'static str = "stream";
    }
}
