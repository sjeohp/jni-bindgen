// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-app-Notification_MessagingStyle"))]
__jni_bindgen! {
    /// public class [Notification.MessagingStyle](https://developer.android.com/reference/android/app/Notification.MessagingStyle.html)
    ///
    /// Required feature: android-app-Notification_MessagingStyle
    public class Notification_MessagingStyle ("android/app/Notification$MessagingStyle") extends crate::android::app::Notification_Style {

        /// [MessagingStyle](https://developer.android.com/reference/android/app/Notification.MessagingStyle.html#MessagingStyle(java.lang.CharSequence))
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        #[deprecated] pub fn new_CharSequence<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::app::Notification_MessagingStyle>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$MessagingStyle", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/lang/CharSequence;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$MessagingStyle\0", "<init>\0", "(Ljava/lang/CharSequence;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [MessagingStyle](https://developer.android.com/reference/android/app/Notification.MessagingStyle.html#MessagingStyle(android.app.Person))
        ///
        /// Required features: "android-app-Person"
        #[cfg(any(feature = "all", all(feature = "android-app-Person")))]
        pub fn new_Person<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Person>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::app::Notification_MessagingStyle>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$MessagingStyle", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/app/Person;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$MessagingStyle\0", "<init>\0", "(Landroid/app/Person;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getUser](https://developer.android.com/reference/android/app/Notification.MessagingStyle.html#getUser())
        ///
        /// Required features: "android-app-Person"
        #[cfg(any(feature = "all", all(feature = "android-app-Person")))]
        pub fn getUser<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Person>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$MessagingStyle", java.flags == PUBLIC, .name == "getUser", .descriptor == "()Landroid/app/Person;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$MessagingStyle\0", "getUser\0", "()Landroid/app/Person;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getUserDisplayName](https://developer.android.com/reference/android/app/Notification.MessagingStyle.html#getUserDisplayName())
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        #[deprecated] pub fn getUserDisplayName<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::CharSequence>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$MessagingStyle", java.flags == PUBLIC, .name == "getUserDisplayName", .descriptor == "()Ljava/lang/CharSequence;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$MessagingStyle\0", "getUserDisplayName\0", "()Ljava/lang/CharSequence;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setConversationTitle](https://developer.android.com/reference/android/app/Notification.MessagingStyle.html#setConversationTitle(java.lang.CharSequence))
        ///
        /// Required features: "android-app-Notification_MessagingStyle", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_MessagingStyle", feature = "java-lang-CharSequence")))]
        pub fn setConversationTitle<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_MessagingStyle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$MessagingStyle", java.flags == PUBLIC, .name == "setConversationTitle", .descriptor == "(Ljava/lang/CharSequence;)Landroid/app/Notification$MessagingStyle;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$MessagingStyle\0", "setConversationTitle\0", "(Ljava/lang/CharSequence;)Landroid/app/Notification$MessagingStyle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getConversationTitle](https://developer.android.com/reference/android/app/Notification.MessagingStyle.html#getConversationTitle())
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn getConversationTitle<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::CharSequence>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$MessagingStyle", java.flags == PUBLIC, .name == "getConversationTitle", .descriptor == "()Ljava/lang/CharSequence;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$MessagingStyle\0", "getConversationTitle\0", "()Ljava/lang/CharSequence;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addMessage](https://developer.android.com/reference/android/app/Notification.MessagingStyle.html#addMessage(java.lang.CharSequence,%20long,%20java.lang.CharSequence))
        ///
        /// Required features: "android-app-Notification_MessagingStyle", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_MessagingStyle", feature = "java-lang-CharSequence")))]
        #[deprecated] pub fn addMessage_CharSequence_long_CharSequence<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg1: i64, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_MessagingStyle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$MessagingStyle", java.flags == PUBLIC, .name == "addMessage", .descriptor == "(Ljava/lang/CharSequence;JLjava/lang/CharSequence;)Landroid/app/Notification$MessagingStyle;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$MessagingStyle\0", "addMessage\0", "(Ljava/lang/CharSequence;JLjava/lang/CharSequence;)Landroid/app/Notification$MessagingStyle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addMessage](https://developer.android.com/reference/android/app/Notification.MessagingStyle.html#addMessage(java.lang.CharSequence,%20long,%20android.app.Person))
        ///
        /// Required features: "android-app-Notification_MessagingStyle", "android-app-Person", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_MessagingStyle", feature = "android-app-Person", feature = "java-lang-CharSequence")))]
        pub fn addMessage_CharSequence_long_Person<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg1: i64, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Person>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_MessagingStyle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$MessagingStyle", java.flags == PUBLIC, .name == "addMessage", .descriptor == "(Ljava/lang/CharSequence;JLandroid/app/Person;)Landroid/app/Notification$MessagingStyle;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$MessagingStyle\0", "addMessage\0", "(Ljava/lang/CharSequence;JLandroid/app/Person;)Landroid/app/Notification$MessagingStyle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addMessage](https://developer.android.com/reference/android/app/Notification.MessagingStyle.html#addMessage(android.app.Notification.MessagingStyle.Message))
        ///
        /// Required features: "android-app-Notification_MessagingStyle", "android-app-Notification_MessagingStyle_Message"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_MessagingStyle", feature = "android-app-Notification_MessagingStyle_Message")))]
        pub fn addMessage_Message<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Notification_MessagingStyle_Message>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_MessagingStyle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$MessagingStyle", java.flags == PUBLIC, .name == "addMessage", .descriptor == "(Landroid/app/Notification$MessagingStyle$Message;)Landroid/app/Notification$MessagingStyle;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$MessagingStyle\0", "addMessage\0", "(Landroid/app/Notification$MessagingStyle$Message;)Landroid/app/Notification$MessagingStyle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addHistoricMessage](https://developer.android.com/reference/android/app/Notification.MessagingStyle.html#addHistoricMessage(android.app.Notification.MessagingStyle.Message))
        ///
        /// Required features: "android-app-Notification_MessagingStyle", "android-app-Notification_MessagingStyle_Message"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_MessagingStyle", feature = "android-app-Notification_MessagingStyle_Message")))]
        pub fn addHistoricMessage<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Notification_MessagingStyle_Message>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_MessagingStyle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$MessagingStyle", java.flags == PUBLIC, .name == "addHistoricMessage", .descriptor == "(Landroid/app/Notification$MessagingStyle$Message;)Landroid/app/Notification$MessagingStyle;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$MessagingStyle\0", "addHistoricMessage\0", "(Landroid/app/Notification$MessagingStyle$Message;)Landroid/app/Notification$MessagingStyle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMessages](https://developer.android.com/reference/android/app/Notification.MessagingStyle.html#getMessages())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getMessages<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$MessagingStyle", java.flags == PUBLIC, .name == "getMessages", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$MessagingStyle\0", "getMessages\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getHistoricMessages](https://developer.android.com/reference/android/app/Notification.MessagingStyle.html#getHistoricMessages())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getHistoricMessages<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$MessagingStyle", java.flags == PUBLIC, .name == "getHistoricMessages", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$MessagingStyle\0", "getHistoricMessages\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setGroupConversation](https://developer.android.com/reference/android/app/Notification.MessagingStyle.html#setGroupConversation(boolean))
        ///
        /// Required features: "android-app-Notification_MessagingStyle"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_MessagingStyle")))]
        pub fn setGroupConversation<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_MessagingStyle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$MessagingStyle", java.flags == PUBLIC, .name == "setGroupConversation", .descriptor == "(Z)Landroid/app/Notification$MessagingStyle;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$MessagingStyle\0", "setGroupConversation\0", "(Z)Landroid/app/Notification$MessagingStyle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isGroupConversation](https://developer.android.com/reference/android/app/Notification.MessagingStyle.html#isGroupConversation())
        pub fn isGroupConversation<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$MessagingStyle", java.flags == PUBLIC, .name == "isGroupConversation", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$MessagingStyle\0", "isGroupConversation\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [MAXIMUM_RETAINED_MESSAGES](https://developer.android.com/reference/android/app/Notification.MessagingStyle.html#MAXIMUM_RETAINED_MESSAGES)
        pub const MAXIMUM_RETAINED_MESSAGES : i32 = 25;
    }
}
