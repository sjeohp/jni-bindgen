// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-app-WallpaperManager"))]
__jni_bindgen! {
    /// public class [WallpaperManager](https://developer.android.com/reference/android/app/WallpaperManager.html)
    ///
    /// Required feature: android-app-WallpaperManager
    public class WallpaperManager ("android/app/WallpaperManager") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [WallpaperManager](https://developer.android.com/reference/android/app/WallpaperManager.html#WallpaperManager())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::app::WallpaperManager>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/app/WallpaperManager", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/WallpaperManager\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getInstance](https://developer.android.com/reference/android/app/WallpaperManager.html#getInstance(android.content.Context))
        ///
        /// Required features: "android-app-WallpaperManager", "android-content-Context"
        #[cfg(any(feature = "all", all(feature = "android-app-WallpaperManager", feature = "android-content-Context")))]
        pub fn getInstance<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::WallpaperManager>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/WallpaperManager", java.flags == PUBLIC | STATIC, .name == "getInstance", .descriptor == "(Landroid/content/Context;)Landroid/app/WallpaperManager;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/app/WallpaperManager\0", "getInstance\0", "(Landroid/content/Context;)Landroid/app/WallpaperManager;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDrawable](https://developer.android.com/reference/android/app/WallpaperManager.html#getDrawable())
        ///
        /// Required features: "android-graphics-drawable-Drawable"
        #[cfg(any(feature = "all", all(feature = "android-graphics-drawable-Drawable")))]
        pub fn getDrawable<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::drawable::Drawable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/WallpaperManager", java.flags == PUBLIC, .name == "getDrawable", .descriptor == "()Landroid/graphics/drawable/Drawable;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/WallpaperManager\0", "getDrawable\0", "()Landroid/graphics/drawable/Drawable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getBuiltInDrawable](https://developer.android.com/reference/android/app/WallpaperManager.html#getBuiltInDrawable())
        ///
        /// Required features: "android-graphics-drawable-Drawable"
        #[cfg(any(feature = "all", all(feature = "android-graphics-drawable-Drawable")))]
        pub fn getBuiltInDrawable<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::drawable::Drawable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/WallpaperManager", java.flags == PUBLIC, .name == "getBuiltInDrawable", .descriptor == "()Landroid/graphics/drawable/Drawable;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/WallpaperManager\0", "getBuiltInDrawable\0", "()Landroid/graphics/drawable/Drawable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getBuiltInDrawable](https://developer.android.com/reference/android/app/WallpaperManager.html#getBuiltInDrawable(int))
        ///
        /// Required features: "android-graphics-drawable-Drawable"
        #[cfg(any(feature = "all", all(feature = "android-graphics-drawable-Drawable")))]
        pub fn getBuiltInDrawable_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::drawable::Drawable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/WallpaperManager", java.flags == PUBLIC, .name == "getBuiltInDrawable", .descriptor == "(I)Landroid/graphics/drawable/Drawable;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/WallpaperManager\0", "getBuiltInDrawable\0", "(I)Landroid/graphics/drawable/Drawable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getBuiltInDrawable](https://developer.android.com/reference/android/app/WallpaperManager.html#getBuiltInDrawable(int,%20int,%20boolean,%20float,%20float))
        ///
        /// Required features: "android-graphics-drawable-Drawable"
        #[cfg(any(feature = "all", all(feature = "android-graphics-drawable-Drawable")))]
        pub fn getBuiltInDrawable_int_int_boolean_float_float<'env>(&'env self, arg0: i32, arg1: i32, arg2: bool, arg3: f32, arg4: f32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::drawable::Drawable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/WallpaperManager", java.flags == PUBLIC, .name == "getBuiltInDrawable", .descriptor == "(IIZFF)Landroid/graphics/drawable/Drawable;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/WallpaperManager\0", "getBuiltInDrawable\0", "(IIZFF)Landroid/graphics/drawable/Drawable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getBuiltInDrawable](https://developer.android.com/reference/android/app/WallpaperManager.html#getBuiltInDrawable(int,%20int,%20boolean,%20float,%20float,%20int))
        ///
        /// Required features: "android-graphics-drawable-Drawable"
        #[cfg(any(feature = "all", all(feature = "android-graphics-drawable-Drawable")))]
        pub fn getBuiltInDrawable_int_int_boolean_float_float_int<'env>(&'env self, arg0: i32, arg1: i32, arg2: bool, arg3: f32, arg4: f32, arg5: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::drawable::Drawable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/WallpaperManager", java.flags == PUBLIC, .name == "getBuiltInDrawable", .descriptor == "(IIZFFI)Landroid/graphics/drawable/Drawable;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/WallpaperManager\0", "getBuiltInDrawable\0", "(IIZFFI)Landroid/graphics/drawable/Drawable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [peekDrawable](https://developer.android.com/reference/android/app/WallpaperManager.html#peekDrawable())
        ///
        /// Required features: "android-graphics-drawable-Drawable"
        #[cfg(any(feature = "all", all(feature = "android-graphics-drawable-Drawable")))]
        pub fn peekDrawable<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::drawable::Drawable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/WallpaperManager", java.flags == PUBLIC, .name == "peekDrawable", .descriptor == "()Landroid/graphics/drawable/Drawable;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/WallpaperManager\0", "peekDrawable\0", "()Landroid/graphics/drawable/Drawable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFastDrawable](https://developer.android.com/reference/android/app/WallpaperManager.html#getFastDrawable())
        ///
        /// Required features: "android-graphics-drawable-Drawable"
        #[cfg(any(feature = "all", all(feature = "android-graphics-drawable-Drawable")))]
        pub fn getFastDrawable<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::drawable::Drawable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/WallpaperManager", java.flags == PUBLIC, .name == "getFastDrawable", .descriptor == "()Landroid/graphics/drawable/Drawable;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/WallpaperManager\0", "getFastDrawable\0", "()Landroid/graphics/drawable/Drawable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [peekFastDrawable](https://developer.android.com/reference/android/app/WallpaperManager.html#peekFastDrawable())
        ///
        /// Required features: "android-graphics-drawable-Drawable"
        #[cfg(any(feature = "all", all(feature = "android-graphics-drawable-Drawable")))]
        pub fn peekFastDrawable<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::drawable::Drawable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/WallpaperManager", java.flags == PUBLIC, .name == "peekFastDrawable", .descriptor == "()Landroid/graphics/drawable/Drawable;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/WallpaperManager\0", "peekFastDrawable\0", "()Landroid/graphics/drawable/Drawable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getWallpaperFile](https://developer.android.com/reference/android/app/WallpaperManager.html#getWallpaperFile(int))
        ///
        /// Required features: "android-os-ParcelFileDescriptor"
        #[cfg(any(feature = "all", all(feature = "android-os-ParcelFileDescriptor")))]
        pub fn getWallpaperFile<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::ParcelFileDescriptor>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/WallpaperManager", java.flags == PUBLIC, .name == "getWallpaperFile", .descriptor == "(I)Landroid/os/ParcelFileDescriptor;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/WallpaperManager\0", "getWallpaperFile\0", "(I)Landroid/os/ParcelFileDescriptor;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addOnColorsChangedListener](https://developer.android.com/reference/android/app/WallpaperManager.html#addOnColorsChangedListener(android.app.WallpaperManager.OnColorsChangedListener,%20android.os.Handler))
        ///
        /// Required features: "android-app-WallpaperManager_OnColorsChangedListener", "android-os-Handler"
        #[cfg(any(feature = "all", all(feature = "android-app-WallpaperManager_OnColorsChangedListener", feature = "android-os-Handler")))]
        pub fn addOnColorsChangedListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::WallpaperManager_OnColorsChangedListener>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/WallpaperManager", java.flags == PUBLIC, .name == "addOnColorsChangedListener", .descriptor == "(Landroid/app/WallpaperManager$OnColorsChangedListener;Landroid/os/Handler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/WallpaperManager\0", "addOnColorsChangedListener\0", "(Landroid/app/WallpaperManager$OnColorsChangedListener;Landroid/os/Handler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeOnColorsChangedListener](https://developer.android.com/reference/android/app/WallpaperManager.html#removeOnColorsChangedListener(android.app.WallpaperManager.OnColorsChangedListener))
        ///
        /// Required features: "android-app-WallpaperManager_OnColorsChangedListener"
        #[cfg(any(feature = "all", all(feature = "android-app-WallpaperManager_OnColorsChangedListener")))]
        pub fn removeOnColorsChangedListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::WallpaperManager_OnColorsChangedListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/WallpaperManager", java.flags == PUBLIC, .name == "removeOnColorsChangedListener", .descriptor == "(Landroid/app/WallpaperManager$OnColorsChangedListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/WallpaperManager\0", "removeOnColorsChangedListener\0", "(Landroid/app/WallpaperManager$OnColorsChangedListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getWallpaperColors](https://developer.android.com/reference/android/app/WallpaperManager.html#getWallpaperColors(int))
        ///
        /// Required features: "android-app-WallpaperColors"
        #[cfg(any(feature = "all", all(feature = "android-app-WallpaperColors")))]
        pub fn getWallpaperColors<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::WallpaperColors>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/WallpaperManager", java.flags == PUBLIC, .name == "getWallpaperColors", .descriptor == "(I)Landroid/app/WallpaperColors;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/WallpaperManager\0", "getWallpaperColors\0", "(I)Landroid/app/WallpaperColors;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [forgetLoadedWallpaper](https://developer.android.com/reference/android/app/WallpaperManager.html#forgetLoadedWallpaper())
        pub fn forgetLoadedWallpaper<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/WallpaperManager", java.flags == PUBLIC, .name == "forgetLoadedWallpaper", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/WallpaperManager\0", "forgetLoadedWallpaper\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getWallpaperInfo](https://developer.android.com/reference/android/app/WallpaperManager.html#getWallpaperInfo())
        ///
        /// Required features: "android-app-WallpaperInfo"
        #[cfg(any(feature = "all", all(feature = "android-app-WallpaperInfo")))]
        pub fn getWallpaperInfo<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::WallpaperInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/WallpaperManager", java.flags == PUBLIC, .name == "getWallpaperInfo", .descriptor == "()Landroid/app/WallpaperInfo;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/WallpaperManager\0", "getWallpaperInfo\0", "()Landroid/app/WallpaperInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getWallpaperId](https://developer.android.com/reference/android/app/WallpaperManager.html#getWallpaperId(int))
        pub fn getWallpaperId<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/WallpaperManager", java.flags == PUBLIC, .name == "getWallpaperId", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/WallpaperManager\0", "getWallpaperId\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCropAndSetWallpaperIntent](https://developer.android.com/reference/android/app/WallpaperManager.html#getCropAndSetWallpaperIntent(android.net.Uri))
        ///
        /// Required features: "android-content-Intent", "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-content-Intent", feature = "android-net-Uri")))]
        pub fn getCropAndSetWallpaperIntent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::Intent>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/WallpaperManager", java.flags == PUBLIC, .name == "getCropAndSetWallpaperIntent", .descriptor == "(Landroid/net/Uri;)Landroid/content/Intent;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/WallpaperManager\0", "getCropAndSetWallpaperIntent\0", "(Landroid/net/Uri;)Landroid/content/Intent;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setResource](https://developer.android.com/reference/android/app/WallpaperManager.html#setResource(int))
        pub fn setResource_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/WallpaperManager", java.flags == PUBLIC, .name == "setResource", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/WallpaperManager\0", "setResource\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setResource](https://developer.android.com/reference/android/app/WallpaperManager.html#setResource(int,%20int))
        pub fn setResource_int_int<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/WallpaperManager", java.flags == PUBLIC, .name == "setResource", .descriptor == "(II)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/WallpaperManager\0", "setResource\0", "(II)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setBitmap](https://developer.android.com/reference/android/app/WallpaperManager.html#setBitmap(android.graphics.Bitmap))
        ///
        /// Required features: "android-graphics-Bitmap"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Bitmap")))]
        pub fn setBitmap_Bitmap<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Bitmap>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/WallpaperManager", java.flags == PUBLIC, .name == "setBitmap", .descriptor == "(Landroid/graphics/Bitmap;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/WallpaperManager\0", "setBitmap\0", "(Landroid/graphics/Bitmap;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setBitmap](https://developer.android.com/reference/android/app/WallpaperManager.html#setBitmap(android.graphics.Bitmap,%20android.graphics.Rect,%20boolean))
        ///
        /// Required features: "android-graphics-Bitmap", "android-graphics-Rect"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Bitmap", feature = "android-graphics-Rect")))]
        pub fn setBitmap_Bitmap_Rect_boolean<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Bitmap>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Rect>>, arg2: bool) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/WallpaperManager", java.flags == PUBLIC, .name == "setBitmap", .descriptor == "(Landroid/graphics/Bitmap;Landroid/graphics/Rect;Z)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/WallpaperManager\0", "setBitmap\0", "(Landroid/graphics/Bitmap;Landroid/graphics/Rect;Z)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setBitmap](https://developer.android.com/reference/android/app/WallpaperManager.html#setBitmap(android.graphics.Bitmap,%20android.graphics.Rect,%20boolean,%20int))
        ///
        /// Required features: "android-graphics-Bitmap", "android-graphics-Rect"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Bitmap", feature = "android-graphics-Rect")))]
        pub fn setBitmap_Bitmap_Rect_boolean_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Bitmap>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Rect>>, arg2: bool, arg3: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/WallpaperManager", java.flags == PUBLIC, .name == "setBitmap", .descriptor == "(Landroid/graphics/Bitmap;Landroid/graphics/Rect;ZI)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/WallpaperManager\0", "setBitmap\0", "(Landroid/graphics/Bitmap;Landroid/graphics/Rect;ZI)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setStream](https://developer.android.com/reference/android/app/WallpaperManager.html#setStream(java.io.InputStream))
        ///
        /// Required features: "java-io-InputStream"
        #[cfg(any(feature = "all", all(feature = "java-io-InputStream")))]
        pub fn setStream_InputStream<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::InputStream>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/WallpaperManager", java.flags == PUBLIC, .name == "setStream", .descriptor == "(Ljava/io/InputStream;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/WallpaperManager\0", "setStream\0", "(Ljava/io/InputStream;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setStream](https://developer.android.com/reference/android/app/WallpaperManager.html#setStream(java.io.InputStream,%20android.graphics.Rect,%20boolean))
        ///
        /// Required features: "android-graphics-Rect", "java-io-InputStream"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Rect", feature = "java-io-InputStream")))]
        pub fn setStream_InputStream_Rect_boolean<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::InputStream>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Rect>>, arg2: bool) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/WallpaperManager", java.flags == PUBLIC, .name == "setStream", .descriptor == "(Ljava/io/InputStream;Landroid/graphics/Rect;Z)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/WallpaperManager\0", "setStream\0", "(Ljava/io/InputStream;Landroid/graphics/Rect;Z)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setStream](https://developer.android.com/reference/android/app/WallpaperManager.html#setStream(java.io.InputStream,%20android.graphics.Rect,%20boolean,%20int))
        ///
        /// Required features: "android-graphics-Rect", "java-io-InputStream"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Rect", feature = "java-io-InputStream")))]
        pub fn setStream_InputStream_Rect_boolean_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::InputStream>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Rect>>, arg2: bool, arg3: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/WallpaperManager", java.flags == PUBLIC, .name == "setStream", .descriptor == "(Ljava/io/InputStream;Landroid/graphics/Rect;ZI)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/WallpaperManager\0", "setStream\0", "(Ljava/io/InputStream;Landroid/graphics/Rect;ZI)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasResourceWallpaper](https://developer.android.com/reference/android/app/WallpaperManager.html#hasResourceWallpaper(int))
        pub fn hasResourceWallpaper<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/WallpaperManager", java.flags == PUBLIC, .name == "hasResourceWallpaper", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/WallpaperManager\0", "hasResourceWallpaper\0", "(I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDesiredMinimumWidth](https://developer.android.com/reference/android/app/WallpaperManager.html#getDesiredMinimumWidth())
        pub fn getDesiredMinimumWidth<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/WallpaperManager", java.flags == PUBLIC, .name == "getDesiredMinimumWidth", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/WallpaperManager\0", "getDesiredMinimumWidth\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDesiredMinimumHeight](https://developer.android.com/reference/android/app/WallpaperManager.html#getDesiredMinimumHeight())
        pub fn getDesiredMinimumHeight<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/WallpaperManager", java.flags == PUBLIC, .name == "getDesiredMinimumHeight", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/WallpaperManager\0", "getDesiredMinimumHeight\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [suggestDesiredDimensions](https://developer.android.com/reference/android/app/WallpaperManager.html#suggestDesiredDimensions(int,%20int))
        pub fn suggestDesiredDimensions<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/WallpaperManager", java.flags == PUBLIC, .name == "suggestDesiredDimensions", .descriptor == "(II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/WallpaperManager\0", "suggestDesiredDimensions\0", "(II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDisplayPadding](https://developer.android.com/reference/android/app/WallpaperManager.html#setDisplayPadding(android.graphics.Rect))
        ///
        /// Required features: "android-graphics-Rect"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Rect")))]
        pub fn setDisplayPadding<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Rect>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/WallpaperManager", java.flags == PUBLIC, .name == "setDisplayPadding", .descriptor == "(Landroid/graphics/Rect;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/WallpaperManager\0", "setDisplayPadding\0", "(Landroid/graphics/Rect;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clearWallpaper](https://developer.android.com/reference/android/app/WallpaperManager.html#clearWallpaper())
        pub fn clearWallpaper<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/WallpaperManager", java.flags == PUBLIC, .name == "clearWallpaper", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/WallpaperManager\0", "clearWallpaper\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setWallpaperOffsets](https://developer.android.com/reference/android/app/WallpaperManager.html#setWallpaperOffsets(android.os.IBinder,%20float,%20float))
        ///
        /// Required features: "android-os-IBinder"
        #[cfg(any(feature = "all", all(feature = "android-os-IBinder")))]
        pub fn setWallpaperOffsets<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::IBinder>>, arg1: f32, arg2: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/WallpaperManager", java.flags == PUBLIC, .name == "setWallpaperOffsets", .descriptor == "(Landroid/os/IBinder;FF)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/WallpaperManager\0", "setWallpaperOffsets\0", "(Landroid/os/IBinder;FF)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setWallpaperOffsetSteps](https://developer.android.com/reference/android/app/WallpaperManager.html#setWallpaperOffsetSteps(float,%20float))
        pub fn setWallpaperOffsetSteps<'env>(&'env self, arg0: f32, arg1: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/WallpaperManager", java.flags == PUBLIC, .name == "setWallpaperOffsetSteps", .descriptor == "(FF)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/WallpaperManager\0", "setWallpaperOffsetSteps\0", "(FF)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [sendWallpaperCommand](https://developer.android.com/reference/android/app/WallpaperManager.html#sendWallpaperCommand(android.os.IBinder,%20java.lang.String,%20int,%20int,%20int,%20android.os.Bundle))
        ///
        /// Required features: "android-os-Bundle", "android-os-IBinder", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-os-Bundle", feature = "android-os-IBinder", feature = "java-lang-String")))]
        pub fn sendWallpaperCommand<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::IBinder>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: i32, arg3: i32, arg4: i32, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/WallpaperManager", java.flags == PUBLIC, .name == "sendWallpaperCommand", .descriptor == "(Landroid/os/IBinder;Ljava/lang/String;IIILandroid/os/Bundle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/WallpaperManager\0", "sendWallpaperCommand\0", "(Landroid/os/IBinder;Ljava/lang/String;IIILandroid/os/Bundle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isWallpaperSupported](https://developer.android.com/reference/android/app/WallpaperManager.html#isWallpaperSupported())
        pub fn isWallpaperSupported<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/WallpaperManager", java.flags == PUBLIC, .name == "isWallpaperSupported", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/WallpaperManager\0", "isWallpaperSupported\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isSetWallpaperAllowed](https://developer.android.com/reference/android/app/WallpaperManager.html#isSetWallpaperAllowed())
        pub fn isSetWallpaperAllowed<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/WallpaperManager", java.flags == PUBLIC, .name == "isSetWallpaperAllowed", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/WallpaperManager\0", "isSetWallpaperAllowed\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clearWallpaperOffsets](https://developer.android.com/reference/android/app/WallpaperManager.html#clearWallpaperOffsets(android.os.IBinder))
        ///
        /// Required features: "android-os-IBinder"
        #[cfg(any(feature = "all", all(feature = "android-os-IBinder")))]
        pub fn clearWallpaperOffsets<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::IBinder>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/WallpaperManager", java.flags == PUBLIC, .name == "clearWallpaperOffsets", .descriptor == "(Landroid/os/IBinder;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/WallpaperManager\0", "clearWallpaperOffsets\0", "(Landroid/os/IBinder;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clear](https://developer.android.com/reference/android/app/WallpaperManager.html#clear())
        pub fn clear<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/WallpaperManager", java.flags == PUBLIC, .name == "clear", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/WallpaperManager\0", "clear\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clear](https://developer.android.com/reference/android/app/WallpaperManager.html#clear(int))
        pub fn clear_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/WallpaperManager", java.flags == PUBLIC, .name == "clear", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/WallpaperManager\0", "clear\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [ACTION_CHANGE_LIVE_WALLPAPER](https://developer.android.com/reference/android/app/WallpaperManager.html#ACTION_CHANGE_LIVE_WALLPAPER)
        pub const ACTION_CHANGE_LIVE_WALLPAPER : &'static str = "android.service.wallpaper.CHANGE_LIVE_WALLPAPER";

        /// public static final [ACTION_CROP_AND_SET_WALLPAPER](https://developer.android.com/reference/android/app/WallpaperManager.html#ACTION_CROP_AND_SET_WALLPAPER)
        pub const ACTION_CROP_AND_SET_WALLPAPER : &'static str = "android.service.wallpaper.CROP_AND_SET_WALLPAPER";

        /// public static final [ACTION_LIVE_WALLPAPER_CHOOSER](https://developer.android.com/reference/android/app/WallpaperManager.html#ACTION_LIVE_WALLPAPER_CHOOSER)
        pub const ACTION_LIVE_WALLPAPER_CHOOSER : &'static str = "android.service.wallpaper.LIVE_WALLPAPER_CHOOSER";

        /// public static final [COMMAND_DROP](https://developer.android.com/reference/android/app/WallpaperManager.html#COMMAND_DROP)
        pub const COMMAND_DROP : &'static str = "android.home.drop";

        /// public static final [COMMAND_SECONDARY_TAP](https://developer.android.com/reference/android/app/WallpaperManager.html#COMMAND_SECONDARY_TAP)
        pub const COMMAND_SECONDARY_TAP : &'static str = "android.wallpaper.secondaryTap";

        /// public static final [COMMAND_TAP](https://developer.android.com/reference/android/app/WallpaperManager.html#COMMAND_TAP)
        pub const COMMAND_TAP : &'static str = "android.wallpaper.tap";

        /// public static final [EXTRA_LIVE_WALLPAPER_COMPONENT](https://developer.android.com/reference/android/app/WallpaperManager.html#EXTRA_LIVE_WALLPAPER_COMPONENT)
        pub const EXTRA_LIVE_WALLPAPER_COMPONENT : &'static str = "android.service.wallpaper.extra.LIVE_WALLPAPER_COMPONENT";

        /// public static final [FLAG_LOCK](https://developer.android.com/reference/android/app/WallpaperManager.html#FLAG_LOCK)
        pub const FLAG_LOCK : i32 = 2;

        /// public static final [FLAG_SYSTEM](https://developer.android.com/reference/android/app/WallpaperManager.html#FLAG_SYSTEM)
        pub const FLAG_SYSTEM : i32 = 1;

        /// public static final [WALLPAPER_PREVIEW_META_DATA](https://developer.android.com/reference/android/app/WallpaperManager.html#WALLPAPER_PREVIEW_META_DATA)
        pub const WALLPAPER_PREVIEW_META_DATA : &'static str = "android.wallpaper.preview";
    }
}
