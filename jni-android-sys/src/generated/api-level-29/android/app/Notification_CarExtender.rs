// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-app-Notification_CarExtender"))]
__jni_bindgen! {
    /// public final class [Notification.CarExtender](https://developer.android.com/reference/android/app/Notification.CarExtender.html)
    ///
    /// Required feature: android-app-Notification_CarExtender
    public final class Notification_CarExtender ("android/app/Notification$CarExtender") extends crate::java::lang::Object, implements crate::android::app::Notification_Extender {

        /// [CarExtender](https://developer.android.com/reference/android/app/Notification.CarExtender.html#CarExtender())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::app::Notification_CarExtender>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$CarExtender", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$CarExtender\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [CarExtender](https://developer.android.com/reference/android/app/Notification.CarExtender.html#CarExtender(android.app.Notification))
        ///
        /// Required features: "android-app-Notification"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification")))]
        pub fn new_Notification<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Notification>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::app::Notification_CarExtender>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$CarExtender", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/app/Notification;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$CarExtender\0", "<init>\0", "(Landroid/app/Notification;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [extend](https://developer.android.com/reference/android/app/Notification.CarExtender.html#extend(android.app.Notification.Builder))
        ///
        /// Required features: "android-app-Notification_Builder"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Builder")))]
        pub fn extend<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Notification_Builder>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$CarExtender", java.flags == PUBLIC, .name == "extend", .descriptor == "(Landroid/app/Notification$Builder;)Landroid/app/Notification$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$CarExtender\0", "extend\0", "(Landroid/app/Notification$Builder;)Landroid/app/Notification$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setColor](https://developer.android.com/reference/android/app/Notification.CarExtender.html#setColor(int))
        ///
        /// Required features: "android-app-Notification_CarExtender"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_CarExtender")))]
        pub fn setColor<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_CarExtender>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$CarExtender", java.flags == PUBLIC, .name == "setColor", .descriptor == "(I)Landroid/app/Notification$CarExtender;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$CarExtender\0", "setColor\0", "(I)Landroid/app/Notification$CarExtender;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getColor](https://developer.android.com/reference/android/app/Notification.CarExtender.html#getColor())
        pub fn getColor<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$CarExtender", java.flags == PUBLIC, .name == "getColor", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$CarExtender\0", "getColor\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setLargeIcon](https://developer.android.com/reference/android/app/Notification.CarExtender.html#setLargeIcon(android.graphics.Bitmap))
        ///
        /// Required features: "android-app-Notification_CarExtender", "android-graphics-Bitmap"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_CarExtender", feature = "android-graphics-Bitmap")))]
        pub fn setLargeIcon<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Bitmap>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_CarExtender>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$CarExtender", java.flags == PUBLIC, .name == "setLargeIcon", .descriptor == "(Landroid/graphics/Bitmap;)Landroid/app/Notification$CarExtender;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$CarExtender\0", "setLargeIcon\0", "(Landroid/graphics/Bitmap;)Landroid/app/Notification$CarExtender;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLargeIcon](https://developer.android.com/reference/android/app/Notification.CarExtender.html#getLargeIcon())
        ///
        /// Required features: "android-graphics-Bitmap"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Bitmap")))]
        pub fn getLargeIcon<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Bitmap>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$CarExtender", java.flags == PUBLIC, .name == "getLargeIcon", .descriptor == "()Landroid/graphics/Bitmap;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$CarExtender\0", "getLargeIcon\0", "()Landroid/graphics/Bitmap;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setUnreadConversation](https://developer.android.com/reference/android/app/Notification.CarExtender.html#setUnreadConversation(android.app.Notification.CarExtender.UnreadConversation))
        ///
        /// Required features: "android-app-Notification_CarExtender", "android-app-Notification_CarExtender_UnreadConversation"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_CarExtender", feature = "android-app-Notification_CarExtender_UnreadConversation")))]
        pub fn setUnreadConversation<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Notification_CarExtender_UnreadConversation>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_CarExtender>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$CarExtender", java.flags == PUBLIC, .name == "setUnreadConversation", .descriptor == "(Landroid/app/Notification$CarExtender$UnreadConversation;)Landroid/app/Notification$CarExtender;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$CarExtender\0", "setUnreadConversation\0", "(Landroid/app/Notification$CarExtender$UnreadConversation;)Landroid/app/Notification$CarExtender;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getUnreadConversation](https://developer.android.com/reference/android/app/Notification.CarExtender.html#getUnreadConversation())
        ///
        /// Required features: "android-app-Notification_CarExtender_UnreadConversation"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_CarExtender_UnreadConversation")))]
        pub fn getUnreadConversation<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_CarExtender_UnreadConversation>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$CarExtender", java.flags == PUBLIC, .name == "getUnreadConversation", .descriptor == "()Landroid/app/Notification$CarExtender$UnreadConversation;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$CarExtender\0", "getUnreadConversation\0", "()Landroid/app/Notification$CarExtender$UnreadConversation;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
