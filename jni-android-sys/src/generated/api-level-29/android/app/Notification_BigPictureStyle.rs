// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-app-Notification_BigPictureStyle"))]
__jni_bindgen! {
    /// public class [Notification.BigPictureStyle](https://developer.android.com/reference/android/app/Notification.BigPictureStyle.html)
    ///
    /// Required feature: android-app-Notification_BigPictureStyle
    public class Notification_BigPictureStyle ("android/app/Notification$BigPictureStyle") extends crate::android::app::Notification_Style {

        /// [BigPictureStyle](https://developer.android.com/reference/android/app/Notification.BigPictureStyle.html#BigPictureStyle())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::app::Notification_BigPictureStyle>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$BigPictureStyle", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$BigPictureStyle\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [BigPictureStyle](https://developer.android.com/reference/android/app/Notification.BigPictureStyle.html#BigPictureStyle(android.app.Notification.Builder))
        ///
        /// Required features: "android-app-Notification_Builder"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_Builder")))]
        #[deprecated] pub fn new_Builder<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Notification_Builder>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::app::Notification_BigPictureStyle>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$BigPictureStyle", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/app/Notification$Builder;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$BigPictureStyle\0", "<init>\0", "(Landroid/app/Notification$Builder;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setBigContentTitle](https://developer.android.com/reference/android/app/Notification.BigPictureStyle.html#setBigContentTitle(java.lang.CharSequence))
        ///
        /// Required features: "android-app-Notification_BigPictureStyle", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_BigPictureStyle", feature = "java-lang-CharSequence")))]
        pub fn setBigContentTitle<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_BigPictureStyle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$BigPictureStyle", java.flags == PUBLIC, .name == "setBigContentTitle", .descriptor == "(Ljava/lang/CharSequence;)Landroid/app/Notification$BigPictureStyle;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$BigPictureStyle\0", "setBigContentTitle\0", "(Ljava/lang/CharSequence;)Landroid/app/Notification$BigPictureStyle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setSummaryText](https://developer.android.com/reference/android/app/Notification.BigPictureStyle.html#setSummaryText(java.lang.CharSequence))
        ///
        /// Required features: "android-app-Notification_BigPictureStyle", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_BigPictureStyle", feature = "java-lang-CharSequence")))]
        pub fn setSummaryText<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_BigPictureStyle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$BigPictureStyle", java.flags == PUBLIC, .name == "setSummaryText", .descriptor == "(Ljava/lang/CharSequence;)Landroid/app/Notification$BigPictureStyle;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$BigPictureStyle\0", "setSummaryText\0", "(Ljava/lang/CharSequence;)Landroid/app/Notification$BigPictureStyle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [bigPicture](https://developer.android.com/reference/android/app/Notification.BigPictureStyle.html#bigPicture(android.graphics.Bitmap))
        ///
        /// Required features: "android-app-Notification_BigPictureStyle", "android-graphics-Bitmap"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_BigPictureStyle", feature = "android-graphics-Bitmap")))]
        pub fn bigPicture<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Bitmap>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_BigPictureStyle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$BigPictureStyle", java.flags == PUBLIC, .name == "bigPicture", .descriptor == "(Landroid/graphics/Bitmap;)Landroid/app/Notification$BigPictureStyle;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$BigPictureStyle\0", "bigPicture\0", "(Landroid/graphics/Bitmap;)Landroid/app/Notification$BigPictureStyle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [bigLargeIcon](https://developer.android.com/reference/android/app/Notification.BigPictureStyle.html#bigLargeIcon(android.graphics.Bitmap))
        ///
        /// Required features: "android-app-Notification_BigPictureStyle", "android-graphics-Bitmap"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_BigPictureStyle", feature = "android-graphics-Bitmap")))]
        pub fn bigLargeIcon_Bitmap<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Bitmap>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_BigPictureStyle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$BigPictureStyle", java.flags == PUBLIC, .name == "bigLargeIcon", .descriptor == "(Landroid/graphics/Bitmap;)Landroid/app/Notification$BigPictureStyle;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$BigPictureStyle\0", "bigLargeIcon\0", "(Landroid/graphics/Bitmap;)Landroid/app/Notification$BigPictureStyle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [bigLargeIcon](https://developer.android.com/reference/android/app/Notification.BigPictureStyle.html#bigLargeIcon(android.graphics.drawable.Icon))
        ///
        /// Required features: "android-app-Notification_BigPictureStyle", "android-graphics-drawable-Icon"
        #[cfg(any(feature = "all", all(feature = "android-app-Notification_BigPictureStyle", feature = "android-graphics-drawable-Icon")))]
        pub fn bigLargeIcon_Icon<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::drawable::Icon>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Notification_BigPictureStyle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/app/Notification$BigPictureStyle", java.flags == PUBLIC, .name == "bigLargeIcon", .descriptor == "(Landroid/graphics/drawable/Icon;)Landroid/app/Notification$BigPictureStyle;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/app/Notification$BigPictureStyle\0", "bigLargeIcon\0", "(Landroid/graphics/drawable/Icon;)Landroid/app/Notification$BigPictureStyle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
