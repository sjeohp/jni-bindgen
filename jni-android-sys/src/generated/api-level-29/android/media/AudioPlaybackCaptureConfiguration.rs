// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-media-AudioPlaybackCaptureConfiguration"))]
__jni_bindgen! {
    /// public final class [AudioPlaybackCaptureConfiguration](https://developer.android.com/reference/android/media/AudioPlaybackCaptureConfiguration.html)
    ///
    /// Required feature: android-media-AudioPlaybackCaptureConfiguration
    public final class AudioPlaybackCaptureConfiguration ("android/media/AudioPlaybackCaptureConfiguration") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [AudioPlaybackCaptureConfiguration](https://developer.android.com/reference/android/media/AudioPlaybackCaptureConfiguration.html#AudioPlaybackCaptureConfiguration())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::media::AudioPlaybackCaptureConfiguration>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/media/AudioPlaybackCaptureConfiguration", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioPlaybackCaptureConfiguration\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getMediaProjection](https://developer.android.com/reference/android/media/AudioPlaybackCaptureConfiguration.html#getMediaProjection())
        ///
        /// Required features: "android-media-projection-MediaProjection"
        #[cfg(any(feature = "all", all(feature = "android-media-projection-MediaProjection")))]
        pub fn getMediaProjection<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::projection::MediaProjection>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioPlaybackCaptureConfiguration", java.flags == PUBLIC, .name == "getMediaProjection", .descriptor == "()Landroid/media/projection/MediaProjection;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioPlaybackCaptureConfiguration\0", "getMediaProjection\0", "()Landroid/media/projection/MediaProjection;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMatchingUsages](https://developer.android.com/reference/android/media/AudioPlaybackCaptureConfiguration.html#getMatchingUsages())
        pub fn getMatchingUsages<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::IntArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioPlaybackCaptureConfiguration", java.flags == PUBLIC, .name == "getMatchingUsages", .descriptor == "()[I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioPlaybackCaptureConfiguration\0", "getMatchingUsages\0", "()[I\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMatchingUids](https://developer.android.com/reference/android/media/AudioPlaybackCaptureConfiguration.html#getMatchingUids())
        pub fn getMatchingUids<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::IntArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioPlaybackCaptureConfiguration", java.flags == PUBLIC, .name == "getMatchingUids", .descriptor == "()[I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioPlaybackCaptureConfiguration\0", "getMatchingUids\0", "()[I\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getExcludeUsages](https://developer.android.com/reference/android/media/AudioPlaybackCaptureConfiguration.html#getExcludeUsages())
        pub fn getExcludeUsages<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::IntArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioPlaybackCaptureConfiguration", java.flags == PUBLIC, .name == "getExcludeUsages", .descriptor == "()[I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioPlaybackCaptureConfiguration\0", "getExcludeUsages\0", "()[I\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getExcludeUids](https://developer.android.com/reference/android/media/AudioPlaybackCaptureConfiguration.html#getExcludeUids())
        pub fn getExcludeUids<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::IntArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioPlaybackCaptureConfiguration", java.flags == PUBLIC, .name == "getExcludeUids", .descriptor == "()[I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioPlaybackCaptureConfiguration\0", "getExcludeUids\0", "()[I\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
