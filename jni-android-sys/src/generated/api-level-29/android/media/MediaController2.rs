// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-media-MediaController2"))]
__jni_bindgen! {
    /// public class [MediaController2](https://developer.android.com/reference/android/media/MediaController2.html)
    ///
    /// Required feature: android-media-MediaController2
    public class MediaController2 ("android/media/MediaController2") extends crate::java::lang::Object, implements crate::java::lang::AutoCloseable {

        // // Not emitting: Non-public method
        // /// [MediaController2](https://developer.android.com/reference/android/media/MediaController2.html#MediaController2(android.content.Context,%20android.media.Session2Token,%20android.os.Bundle,%20java.util.concurrent.Executor,%20android.media.MediaController2.ControllerCallback))
        // ///
        // /// Required features: "android-content-Context", "android-media-MediaController2_ControllerCallback", "android-media-Session2Token", "android-os-Bundle", "java-util-concurrent-Executor"
        // #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-media-MediaController2_ControllerCallback", feature = "android-media-Session2Token", feature = "android-os-Bundle", feature = "java-util-concurrent-Executor")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::Session2Token>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaController2_ControllerCallback>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::media::MediaController2>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/media/MediaController2", java.flags == (empty), .name == "<init>", .descriptor == "(Landroid/content/Context;Landroid/media/Session2Token;Landroid/os/Bundle;Ljava/util/concurrent/Executor;Landroid/media/MediaController2$ControllerCallback;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into())];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaController2\0", "<init>\0", "(Landroid/content/Context;Landroid/media/Session2Token;Landroid/os/Bundle;Ljava/util/concurrent/Executor;Landroid/media/MediaController2$ControllerCallback;)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [close](https://developer.android.com/reference/android/media/MediaController2.html#close())
        pub fn close<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaController2", java.flags == PUBLIC, .name == "close", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaController2\0", "close\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getConnectedToken](https://developer.android.com/reference/android/media/MediaController2.html#getConnectedToken())
        ///
        /// Required features: "android-media-Session2Token"
        #[cfg(any(feature = "all", all(feature = "android-media-Session2Token")))]
        pub fn getConnectedToken<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::Session2Token>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaController2", java.flags == PUBLIC, .name == "getConnectedToken", .descriptor == "()Landroid/media/Session2Token;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaController2\0", "getConnectedToken\0", "()Landroid/media/Session2Token;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isPlaybackActive](https://developer.android.com/reference/android/media/MediaController2.html#isPlaybackActive())
        pub fn isPlaybackActive<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaController2", java.flags == PUBLIC, .name == "isPlaybackActive", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaController2\0", "isPlaybackActive\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [sendSessionCommand](https://developer.android.com/reference/android/media/MediaController2.html#sendSessionCommand(android.media.Session2Command,%20android.os.Bundle))
        ///
        /// Required features: "android-media-Session2Command", "android-os-Bundle", "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "android-media-Session2Command", feature = "android-os-Bundle", feature = "java-lang-Object")))]
        pub fn sendSessionCommand<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::Session2Command>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaController2", java.flags == PUBLIC, .name == "sendSessionCommand", .descriptor == "(Landroid/media/Session2Command;Landroid/os/Bundle;)Ljava/lang/Object;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaController2\0", "sendSessionCommand\0", "(Landroid/media/Session2Command;Landroid/os/Bundle;)Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [cancelSessionCommand](https://developer.android.com/reference/android/media/MediaController2.html#cancelSessionCommand(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn cancelSessionCommand<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaController2", java.flags == PUBLIC, .name == "cancelSessionCommand", .descriptor == "(Ljava/lang/Object;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaController2\0", "cancelSessionCommand\0", "(Ljava/lang/Object;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
