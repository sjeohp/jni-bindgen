// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-media-MediaPlayer_TrackInfo"))]
__jni_bindgen! {
    /// public class [MediaPlayer.TrackInfo](https://developer.android.com/reference/android/media/MediaPlayer.TrackInfo.html)
    ///
    /// Required feature: android-media-MediaPlayer_TrackInfo
    public class MediaPlayer_TrackInfo ("android/media/MediaPlayer$TrackInfo") extends crate::java::lang::Object, implements crate::android::os::Parcelable {

        // // Not emitting: Non-public method
        // /// [TrackInfo](https://developer.android.com/reference/android/media/MediaPlayer.TrackInfo.html#TrackInfo(android.os.Parcel))
        // ///
        // /// Required features: "android-os-Parcel"
        // #[cfg(any(feature = "all", all(feature = "android-os-Parcel")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Parcel>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::media::MediaPlayer_TrackInfo>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/media/MediaPlayer$TrackInfo", java.flags == (empty), .name == "<init>", .descriptor == "(Landroid/os/Parcel;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer$TrackInfo\0", "<init>\0", "(Landroid/os/Parcel;)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getTrackType](https://developer.android.com/reference/android/media/MediaPlayer.TrackInfo.html#getTrackType())
        pub fn getTrackType<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer$TrackInfo", java.flags == PUBLIC, .name == "getTrackType", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer$TrackInfo\0", "getTrackType\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLanguage](https://developer.android.com/reference/android/media/MediaPlayer.TrackInfo.html#getLanguage())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getLanguage<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer$TrackInfo", java.flags == PUBLIC, .name == "getLanguage", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer$TrackInfo\0", "getLanguage\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFormat](https://developer.android.com/reference/android/media/MediaPlayer.TrackInfo.html#getFormat())
        ///
        /// Required features: "android-media-MediaFormat"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaFormat")))]
        pub fn getFormat<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::MediaFormat>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer$TrackInfo", java.flags == PUBLIC, .name == "getFormat", .descriptor == "()Landroid/media/MediaFormat;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer$TrackInfo\0", "getFormat\0", "()Landroid/media/MediaFormat;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [describeContents](https://developer.android.com/reference/android/media/MediaPlayer.TrackInfo.html#describeContents())
        pub fn describeContents<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer$TrackInfo", java.flags == PUBLIC, .name == "describeContents", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer$TrackInfo\0", "describeContents\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [writeToParcel](https://developer.android.com/reference/android/media/MediaPlayer.TrackInfo.html#writeToParcel(android.os.Parcel,%20int))
        ///
        /// Required features: "android-os-Parcel"
        #[cfg(any(feature = "all", all(feature = "android-os-Parcel")))]
        pub fn writeToParcel<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Parcel>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer$TrackInfo", java.flags == PUBLIC, .name == "writeToParcel", .descriptor == "(Landroid/os/Parcel;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer$TrackInfo\0", "writeToParcel\0", "(Landroid/os/Parcel;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/android/media/MediaPlayer.TrackInfo.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer$TrackInfo", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer$TrackInfo\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [MEDIA_TRACK_TYPE_AUDIO](https://developer.android.com/reference/android/media/MediaPlayer.TrackInfo.html#MEDIA_TRACK_TYPE_AUDIO)
        pub const MEDIA_TRACK_TYPE_AUDIO : i32 = 2;

        /// public static final [MEDIA_TRACK_TYPE_METADATA](https://developer.android.com/reference/android/media/MediaPlayer.TrackInfo.html#MEDIA_TRACK_TYPE_METADATA)
        pub const MEDIA_TRACK_TYPE_METADATA : i32 = 5;

        /// public static final [MEDIA_TRACK_TYPE_SUBTITLE](https://developer.android.com/reference/android/media/MediaPlayer.TrackInfo.html#MEDIA_TRACK_TYPE_SUBTITLE)
        pub const MEDIA_TRACK_TYPE_SUBTITLE : i32 = 4;

        /// public static final [MEDIA_TRACK_TYPE_TIMEDTEXT](https://developer.android.com/reference/android/media/MediaPlayer.TrackInfo.html#MEDIA_TRACK_TYPE_TIMEDTEXT)
        pub const MEDIA_TRACK_TYPE_TIMEDTEXT : i32 = 3;

        /// public static final [MEDIA_TRACK_TYPE_UNKNOWN](https://developer.android.com/reference/android/media/MediaPlayer.TrackInfo.html#MEDIA_TRACK_TYPE_UNKNOWN)
        pub const MEDIA_TRACK_TYPE_UNKNOWN : i32 = 0;

        /// public static final [MEDIA_TRACK_TYPE_VIDEO](https://developer.android.com/reference/android/media/MediaPlayer.TrackInfo.html#MEDIA_TRACK_TYPE_VIDEO)
        pub const MEDIA_TRACK_TYPE_VIDEO : i32 = 1;
    }
}
