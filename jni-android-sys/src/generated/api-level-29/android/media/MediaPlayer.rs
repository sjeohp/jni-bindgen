// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-media-MediaPlayer"))]
__jni_bindgen! {
    /// public class [MediaPlayer](https://developer.android.com/reference/android/media/MediaPlayer.html)
    ///
    /// Required feature: android-media-MediaPlayer
    public class MediaPlayer ("android/media/MediaPlayer") extends crate::java::lang::Object, implements crate::android::media::VolumeAutomation, crate::android::media::AudioRouting {

        /// [MediaPlayer](https://developer.android.com/reference/android/media/MediaPlayer.html#MediaPlayer())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::media::MediaPlayer>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDisplay](https://developer.android.com/reference/android/media/MediaPlayer.html#setDisplay(android.view.SurfaceHolder))
        ///
        /// Required features: "android-view-SurfaceHolder"
        #[cfg(any(feature = "all", all(feature = "android-view-SurfaceHolder")))]
        pub fn setDisplay<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::SurfaceHolder>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC, .name == "setDisplay", .descriptor == "(Landroid/view/SurfaceHolder;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "setDisplay\0", "(Landroid/view/SurfaceHolder;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setSurface](https://developer.android.com/reference/android/media/MediaPlayer.html#setSurface(android.view.Surface))
        ///
        /// Required features: "android-view-Surface"
        #[cfg(any(feature = "all", all(feature = "android-view-Surface")))]
        pub fn setSurface<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::Surface>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC, .name == "setSurface", .descriptor == "(Landroid/view/Surface;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "setSurface\0", "(Landroid/view/Surface;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setVideoScalingMode](https://developer.android.com/reference/android/media/MediaPlayer.html#setVideoScalingMode(int))
        pub fn setVideoScalingMode<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC, .name == "setVideoScalingMode", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "setVideoScalingMode\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [create](https://developer.android.com/reference/android/media/MediaPlayer.html#create(android.content.Context,%20android.net.Uri))
        ///
        /// Required features: "android-content-Context", "android-media-MediaPlayer", "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-media-MediaPlayer", feature = "android-net-Uri")))]
        pub fn create_Context_Uri<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::MediaPlayer>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC | STATIC, .name == "create", .descriptor == "(Landroid/content/Context;Landroid/net/Uri;)Landroid/media/MediaPlayer;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/media/MediaPlayer\0", "create\0", "(Landroid/content/Context;Landroid/net/Uri;)Landroid/media/MediaPlayer;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [create](https://developer.android.com/reference/android/media/MediaPlayer.html#create(android.content.Context,%20android.net.Uri,%20android.view.SurfaceHolder))
        ///
        /// Required features: "android-content-Context", "android-media-MediaPlayer", "android-net-Uri", "android-view-SurfaceHolder"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-media-MediaPlayer", feature = "android-net-Uri", feature = "android-view-SurfaceHolder")))]
        pub fn create_Context_Uri_SurfaceHolder<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::SurfaceHolder>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::MediaPlayer>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC | STATIC, .name == "create", .descriptor == "(Landroid/content/Context;Landroid/net/Uri;Landroid/view/SurfaceHolder;)Landroid/media/MediaPlayer;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/media/MediaPlayer\0", "create\0", "(Landroid/content/Context;Landroid/net/Uri;Landroid/view/SurfaceHolder;)Landroid/media/MediaPlayer;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [create](https://developer.android.com/reference/android/media/MediaPlayer.html#create(android.content.Context,%20android.net.Uri,%20android.view.SurfaceHolder,%20android.media.AudioAttributes,%20int))
        ///
        /// Required features: "android-content-Context", "android-media-AudioAttributes", "android-media-MediaPlayer", "android-net-Uri", "android-view-SurfaceHolder"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-media-AudioAttributes", feature = "android-media-MediaPlayer", feature = "android-net-Uri", feature = "android-view-SurfaceHolder")))]
        pub fn create_Context_Uri_SurfaceHolder_AudioAttributes_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::SurfaceHolder>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::AudioAttributes>>, arg4: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::MediaPlayer>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC | STATIC, .name == "create", .descriptor == "(Landroid/content/Context;Landroid/net/Uri;Landroid/view/SurfaceHolder;Landroid/media/AudioAttributes;I)Landroid/media/MediaPlayer;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/media/MediaPlayer\0", "create\0", "(Landroid/content/Context;Landroid/net/Uri;Landroid/view/SurfaceHolder;Landroid/media/AudioAttributes;I)Landroid/media/MediaPlayer;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [create](https://developer.android.com/reference/android/media/MediaPlayer.html#create(android.content.Context,%20int))
        ///
        /// Required features: "android-content-Context", "android-media-MediaPlayer"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-media-MediaPlayer")))]
        pub fn create_Context_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::MediaPlayer>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC | STATIC, .name == "create", .descriptor == "(Landroid/content/Context;I)Landroid/media/MediaPlayer;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/media/MediaPlayer\0", "create\0", "(Landroid/content/Context;I)Landroid/media/MediaPlayer;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [create](https://developer.android.com/reference/android/media/MediaPlayer.html#create(android.content.Context,%20int,%20android.media.AudioAttributes,%20int))
        ///
        /// Required features: "android-content-Context", "android-media-AudioAttributes", "android-media-MediaPlayer"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-media-AudioAttributes", feature = "android-media-MediaPlayer")))]
        pub fn create_Context_int_AudioAttributes_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::AudioAttributes>>, arg3: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::MediaPlayer>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC | STATIC, .name == "create", .descriptor == "(Landroid/content/Context;ILandroid/media/AudioAttributes;I)Landroid/media/MediaPlayer;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/media/MediaPlayer\0", "create\0", "(Landroid/content/Context;ILandroid/media/AudioAttributes;I)Landroid/media/MediaPlayer;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDataSource](https://developer.android.com/reference/android/media/MediaPlayer.html#setDataSource(android.content.Context,%20android.net.Uri))
        ///
        /// Required features: "android-content-Context", "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-net-Uri")))]
        pub fn setDataSource_Context_Uri<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC, .name == "setDataSource", .descriptor == "(Landroid/content/Context;Landroid/net/Uri;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "setDataSource\0", "(Landroid/content/Context;Landroid/net/Uri;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDataSource](https://developer.android.com/reference/android/media/MediaPlayer.html#setDataSource(android.content.Context,%20android.net.Uri,%20java.util.Map,%20java.util.List))
        ///
        /// Required features: "android-content-Context", "android-net-Uri", "java-util-List", "java-util-Map"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-net-Uri", feature = "java-util-List", feature = "java-util-Map")))]
        pub fn setDataSource_Context_Uri_Map_List<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Map>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC, .name == "setDataSource", .descriptor == "(Landroid/content/Context;Landroid/net/Uri;Ljava/util/Map;Ljava/util/List;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "setDataSource\0", "(Landroid/content/Context;Landroid/net/Uri;Ljava/util/Map;Ljava/util/List;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDataSource](https://developer.android.com/reference/android/media/MediaPlayer.html#setDataSource(android.content.Context,%20android.net.Uri,%20java.util.Map))
        ///
        /// Required features: "android-content-Context", "android-net-Uri", "java-util-Map"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-net-Uri", feature = "java-util-Map")))]
        pub fn setDataSource_Context_Uri_Map<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Map>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC, .name == "setDataSource", .descriptor == "(Landroid/content/Context;Landroid/net/Uri;Ljava/util/Map;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "setDataSource\0", "(Landroid/content/Context;Landroid/net/Uri;Ljava/util/Map;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDataSource](https://developer.android.com/reference/android/media/MediaPlayer.html#setDataSource(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn setDataSource_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC, .name == "setDataSource", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "setDataSource\0", "(Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDataSource](https://developer.android.com/reference/android/media/MediaPlayer.html#setDataSource(android.content.res.AssetFileDescriptor))
        ///
        /// Required features: "android-content-res-AssetFileDescriptor"
        #[cfg(any(feature = "all", all(feature = "android-content-res-AssetFileDescriptor")))]
        pub fn setDataSource_AssetFileDescriptor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::res::AssetFileDescriptor>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC, .name == "setDataSource", .descriptor == "(Landroid/content/res/AssetFileDescriptor;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "setDataSource\0", "(Landroid/content/res/AssetFileDescriptor;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDataSource](https://developer.android.com/reference/android/media/MediaPlayer.html#setDataSource(java.io.FileDescriptor))
        ///
        /// Required features: "java-io-FileDescriptor"
        #[cfg(any(feature = "all", all(feature = "java-io-FileDescriptor")))]
        pub fn setDataSource_FileDescriptor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::FileDescriptor>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC, .name == "setDataSource", .descriptor == "(Ljava/io/FileDescriptor;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "setDataSource\0", "(Ljava/io/FileDescriptor;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDataSource](https://developer.android.com/reference/android/media/MediaPlayer.html#setDataSource(java.io.FileDescriptor,%20long,%20long))
        ///
        /// Required features: "java-io-FileDescriptor"
        #[cfg(any(feature = "all", all(feature = "java-io-FileDescriptor")))]
        pub fn setDataSource_FileDescriptor_long_long<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::FileDescriptor>>, arg1: i64, arg2: i64) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC, .name == "setDataSource", .descriptor == "(Ljava/io/FileDescriptor;JJ)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "setDataSource\0", "(Ljava/io/FileDescriptor;JJ)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDataSource](https://developer.android.com/reference/android/media/MediaPlayer.html#setDataSource(android.media.MediaDataSource))
        ///
        /// Required features: "android-media-MediaDataSource"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaDataSource")))]
        pub fn setDataSource_MediaDataSource<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaDataSource>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC, .name == "setDataSource", .descriptor == "(Landroid/media/MediaDataSource;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "setDataSource\0", "(Landroid/media/MediaDataSource;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [prepare](https://developer.android.com/reference/android/media/MediaPlayer.html#prepare())
        pub fn prepare<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC, .name == "prepare", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "prepare\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [prepareAsync](https://developer.android.com/reference/android/media/MediaPlayer.html#prepareAsync())
        pub fn prepareAsync<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC | NATIVE, .name == "prepareAsync", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "prepareAsync\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [start](https://developer.android.com/reference/android/media/MediaPlayer.html#start())
        pub fn start<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC, .name == "start", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "start\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [stop](https://developer.android.com/reference/android/media/MediaPlayer.html#stop())
        pub fn stop<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC, .name == "stop", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "stop\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [pause](https://developer.android.com/reference/android/media/MediaPlayer.html#pause())
        pub fn pause<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC, .name == "pause", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "pause\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createVolumeShaper](https://developer.android.com/reference/android/media/MediaPlayer.html#createVolumeShaper(android.media.VolumeShaper.Configuration))
        ///
        /// Required features: "android-media-VolumeShaper", "android-media-VolumeShaper_Configuration"
        #[cfg(any(feature = "all", all(feature = "android-media-VolumeShaper", feature = "android-media-VolumeShaper_Configuration")))]
        pub fn createVolumeShaper<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::VolumeShaper_Configuration>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::VolumeShaper>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC, .name == "createVolumeShaper", .descriptor == "(Landroid/media/VolumeShaper$Configuration;)Landroid/media/VolumeShaper;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "createVolumeShaper\0", "(Landroid/media/VolumeShaper$Configuration;)Landroid/media/VolumeShaper;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPreferredDevice](https://developer.android.com/reference/android/media/MediaPlayer.html#setPreferredDevice(android.media.AudioDeviceInfo))
        ///
        /// Required features: "android-media-AudioDeviceInfo"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioDeviceInfo")))]
        pub fn setPreferredDevice<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::AudioDeviceInfo>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC, .name == "setPreferredDevice", .descriptor == "(Landroid/media/AudioDeviceInfo;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "setPreferredDevice\0", "(Landroid/media/AudioDeviceInfo;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPreferredDevice](https://developer.android.com/reference/android/media/MediaPlayer.html#getPreferredDevice())
        ///
        /// Required features: "android-media-AudioDeviceInfo"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioDeviceInfo")))]
        pub fn getPreferredDevice<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::AudioDeviceInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC, .name == "getPreferredDevice", .descriptor == "()Landroid/media/AudioDeviceInfo;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "getPreferredDevice\0", "()Landroid/media/AudioDeviceInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRoutedDevice](https://developer.android.com/reference/android/media/MediaPlayer.html#getRoutedDevice())
        ///
        /// Required features: "android-media-AudioDeviceInfo"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioDeviceInfo")))]
        pub fn getRoutedDevice<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::AudioDeviceInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC, .name == "getRoutedDevice", .descriptor == "()Landroid/media/AudioDeviceInfo;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "getRoutedDevice\0", "()Landroid/media/AudioDeviceInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addOnRoutingChangedListener](https://developer.android.com/reference/android/media/MediaPlayer.html#addOnRoutingChangedListener(android.media.AudioRouting.OnRoutingChangedListener,%20android.os.Handler))
        ///
        /// Required features: "android-media-AudioRouting_OnRoutingChangedListener", "android-os-Handler"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioRouting_OnRoutingChangedListener", feature = "android-os-Handler")))]
        pub fn addOnRoutingChangedListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::AudioRouting_OnRoutingChangedListener>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC, .name == "addOnRoutingChangedListener", .descriptor == "(Landroid/media/AudioRouting$OnRoutingChangedListener;Landroid/os/Handler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "addOnRoutingChangedListener\0", "(Landroid/media/AudioRouting$OnRoutingChangedListener;Landroid/os/Handler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeOnRoutingChangedListener](https://developer.android.com/reference/android/media/MediaPlayer.html#removeOnRoutingChangedListener(android.media.AudioRouting.OnRoutingChangedListener))
        ///
        /// Required features: "android-media-AudioRouting_OnRoutingChangedListener"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioRouting_OnRoutingChangedListener")))]
        pub fn removeOnRoutingChangedListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::AudioRouting_OnRoutingChangedListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC, .name == "removeOnRoutingChangedListener", .descriptor == "(Landroid/media/AudioRouting$OnRoutingChangedListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "removeOnRoutingChangedListener\0", "(Landroid/media/AudioRouting$OnRoutingChangedListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setWakeMode](https://developer.android.com/reference/android/media/MediaPlayer.html#setWakeMode(android.content.Context,%20int))
        ///
        /// Required features: "android-content-Context"
        #[cfg(any(feature = "all", all(feature = "android-content-Context")))]
        pub fn setWakeMode<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC, .name == "setWakeMode", .descriptor == "(Landroid/content/Context;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "setWakeMode\0", "(Landroid/content/Context;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setScreenOnWhilePlaying](https://developer.android.com/reference/android/media/MediaPlayer.html#setScreenOnWhilePlaying(boolean))
        pub fn setScreenOnWhilePlaying<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC, .name == "setScreenOnWhilePlaying", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "setScreenOnWhilePlaying\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getVideoWidth](https://developer.android.com/reference/android/media/MediaPlayer.html#getVideoWidth())
        pub fn getVideoWidth<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC | NATIVE, .name == "getVideoWidth", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "getVideoWidth\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getVideoHeight](https://developer.android.com/reference/android/media/MediaPlayer.html#getVideoHeight())
        pub fn getVideoHeight<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC | NATIVE, .name == "getVideoHeight", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "getVideoHeight\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMetrics](https://developer.android.com/reference/android/media/MediaPlayer.html#getMetrics())
        ///
        /// Required features: "android-os-PersistableBundle"
        #[cfg(any(feature = "all", all(feature = "android-os-PersistableBundle")))]
        pub fn getMetrics<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::PersistableBundle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC, .name == "getMetrics", .descriptor == "()Landroid/os/PersistableBundle;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "getMetrics\0", "()Landroid/os/PersistableBundle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isPlaying](https://developer.android.com/reference/android/media/MediaPlayer.html#isPlaying())
        pub fn isPlaying<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC | NATIVE, .name == "isPlaying", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "isPlaying\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPlaybackParams](https://developer.android.com/reference/android/media/MediaPlayer.html#setPlaybackParams(android.media.PlaybackParams))
        ///
        /// Required features: "android-media-PlaybackParams"
        #[cfg(any(feature = "all", all(feature = "android-media-PlaybackParams")))]
        pub fn setPlaybackParams<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::PlaybackParams>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC | NATIVE, .name == "setPlaybackParams", .descriptor == "(Landroid/media/PlaybackParams;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "setPlaybackParams\0", "(Landroid/media/PlaybackParams;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPlaybackParams](https://developer.android.com/reference/android/media/MediaPlayer.html#getPlaybackParams())
        ///
        /// Required features: "android-media-PlaybackParams"
        #[cfg(any(feature = "all", all(feature = "android-media-PlaybackParams")))]
        pub fn getPlaybackParams<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::PlaybackParams>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC | NATIVE, .name == "getPlaybackParams", .descriptor == "()Landroid/media/PlaybackParams;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "getPlaybackParams\0", "()Landroid/media/PlaybackParams;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setSyncParams](https://developer.android.com/reference/android/media/MediaPlayer.html#setSyncParams(android.media.SyncParams))
        ///
        /// Required features: "android-media-SyncParams"
        #[cfg(any(feature = "all", all(feature = "android-media-SyncParams")))]
        pub fn setSyncParams<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::SyncParams>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC | NATIVE, .name == "setSyncParams", .descriptor == "(Landroid/media/SyncParams;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "setSyncParams\0", "(Landroid/media/SyncParams;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSyncParams](https://developer.android.com/reference/android/media/MediaPlayer.html#getSyncParams())
        ///
        /// Required features: "android-media-SyncParams"
        #[cfg(any(feature = "all", all(feature = "android-media-SyncParams")))]
        pub fn getSyncParams<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::SyncParams>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC | NATIVE, .name == "getSyncParams", .descriptor == "()Landroid/media/SyncParams;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "getSyncParams\0", "()Landroid/media/SyncParams;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [seekTo](https://developer.android.com/reference/android/media/MediaPlayer.html#seekTo(long,%20int))
        pub fn seekTo_long_int<'env>(&'env self, arg0: i64, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC, .name == "seekTo", .descriptor == "(JI)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "seekTo\0", "(JI)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [seekTo](https://developer.android.com/reference/android/media/MediaPlayer.html#seekTo(int))
        pub fn seekTo_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC, .name == "seekTo", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "seekTo\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTimestamp](https://developer.android.com/reference/android/media/MediaPlayer.html#getTimestamp())
        ///
        /// Required features: "android-media-MediaTimestamp"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaTimestamp")))]
        pub fn getTimestamp<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::MediaTimestamp>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC, .name == "getTimestamp", .descriptor == "()Landroid/media/MediaTimestamp;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "getTimestamp\0", "()Landroid/media/MediaTimestamp;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCurrentPosition](https://developer.android.com/reference/android/media/MediaPlayer.html#getCurrentPosition())
        pub fn getCurrentPosition<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC | NATIVE, .name == "getCurrentPosition", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "getCurrentPosition\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDuration](https://developer.android.com/reference/android/media/MediaPlayer.html#getDuration())
        pub fn getDuration<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC | NATIVE, .name == "getDuration", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "getDuration\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setNextMediaPlayer](https://developer.android.com/reference/android/media/MediaPlayer.html#setNextMediaPlayer(android.media.MediaPlayer))
        ///
        /// Required features: "android-media-MediaPlayer"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaPlayer")))]
        pub fn setNextMediaPlayer<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaPlayer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC | NATIVE, .name == "setNextMediaPlayer", .descriptor == "(Landroid/media/MediaPlayer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "setNextMediaPlayer\0", "(Landroid/media/MediaPlayer;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [release](https://developer.android.com/reference/android/media/MediaPlayer.html#release())
        pub fn release<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC, .name == "release", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "release\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [reset](https://developer.android.com/reference/android/media/MediaPlayer.html#reset())
        pub fn reset<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC, .name == "reset", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "reset\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAudioStreamType](https://developer.android.com/reference/android/media/MediaPlayer.html#setAudioStreamType(int))
        #[deprecated] pub fn setAudioStreamType<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC, .name == "setAudioStreamType", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "setAudioStreamType\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAudioAttributes](https://developer.android.com/reference/android/media/MediaPlayer.html#setAudioAttributes(android.media.AudioAttributes))
        ///
        /// Required features: "android-media-AudioAttributes"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioAttributes")))]
        pub fn setAudioAttributes<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::AudioAttributes>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC, .name == "setAudioAttributes", .descriptor == "(Landroid/media/AudioAttributes;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "setAudioAttributes\0", "(Landroid/media/AudioAttributes;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setLooping](https://developer.android.com/reference/android/media/MediaPlayer.html#setLooping(boolean))
        pub fn setLooping<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC | NATIVE, .name == "setLooping", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "setLooping\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isLooping](https://developer.android.com/reference/android/media/MediaPlayer.html#isLooping())
        pub fn isLooping<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC | NATIVE, .name == "isLooping", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "isLooping\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setVolume](https://developer.android.com/reference/android/media/MediaPlayer.html#setVolume(float,%20float))
        pub fn setVolume<'env>(&'env self, arg0: f32, arg1: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC, .name == "setVolume", .descriptor == "(FF)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "setVolume\0", "(FF)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAudioSessionId](https://developer.android.com/reference/android/media/MediaPlayer.html#setAudioSessionId(int))
        pub fn setAudioSessionId<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC | NATIVE, .name == "setAudioSessionId", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "setAudioSessionId\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAudioSessionId](https://developer.android.com/reference/android/media/MediaPlayer.html#getAudioSessionId())
        pub fn getAudioSessionId<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC | NATIVE, .name == "getAudioSessionId", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "getAudioSessionId\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [attachAuxEffect](https://developer.android.com/reference/android/media/MediaPlayer.html#attachAuxEffect(int))
        pub fn attachAuxEffect<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC | NATIVE, .name == "attachAuxEffect", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "attachAuxEffect\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAuxEffectSendLevel](https://developer.android.com/reference/android/media/MediaPlayer.html#setAuxEffectSendLevel(float))
        pub fn setAuxEffectSendLevel<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC, .name == "setAuxEffectSendLevel", .descriptor == "(F)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "setAuxEffectSendLevel\0", "(F)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTrackInfo](https://developer.android.com/reference/android/media/MediaPlayer.html#getTrackInfo())
        ///
        /// Required features: "android-media-MediaPlayer_TrackInfo"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaPlayer_TrackInfo")))]
        pub fn getTrackInfo<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::android::media::MediaPlayer_TrackInfo, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC, .name == "getTrackInfo", .descriptor == "()[Landroid/media/MediaPlayer$TrackInfo;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "getTrackInfo\0", "()[Landroid/media/MediaPlayer$TrackInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addTimedTextSource](https://developer.android.com/reference/android/media/MediaPlayer.html#addTimedTextSource(java.lang.String,%20java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn addTimedTextSource_String_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC, .name == "addTimedTextSource", .descriptor == "(Ljava/lang/String;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "addTimedTextSource\0", "(Ljava/lang/String;Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addTimedTextSource](https://developer.android.com/reference/android/media/MediaPlayer.html#addTimedTextSource(android.content.Context,%20android.net.Uri,%20java.lang.String))
        ///
        /// Required features: "android-content-Context", "android-net-Uri", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-net-Uri", feature = "java-lang-String")))]
        pub fn addTimedTextSource_Context_Uri_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC, .name == "addTimedTextSource", .descriptor == "(Landroid/content/Context;Landroid/net/Uri;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "addTimedTextSource\0", "(Landroid/content/Context;Landroid/net/Uri;Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addTimedTextSource](https://developer.android.com/reference/android/media/MediaPlayer.html#addTimedTextSource(java.io.FileDescriptor,%20java.lang.String))
        ///
        /// Required features: "java-io-FileDescriptor", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-io-FileDescriptor", feature = "java-lang-String")))]
        pub fn addTimedTextSource_FileDescriptor_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::FileDescriptor>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC, .name == "addTimedTextSource", .descriptor == "(Ljava/io/FileDescriptor;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "addTimedTextSource\0", "(Ljava/io/FileDescriptor;Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addTimedTextSource](https://developer.android.com/reference/android/media/MediaPlayer.html#addTimedTextSource(java.io.FileDescriptor,%20long,%20long,%20java.lang.String))
        ///
        /// Required features: "java-io-FileDescriptor", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-io-FileDescriptor", feature = "java-lang-String")))]
        pub fn addTimedTextSource_FileDescriptor_long_long_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::FileDescriptor>>, arg1: i64, arg2: i64, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC, .name == "addTimedTextSource", .descriptor == "(Ljava/io/FileDescriptor;JJLjava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "addTimedTextSource\0", "(Ljava/io/FileDescriptor;JJLjava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSelectedTrack](https://developer.android.com/reference/android/media/MediaPlayer.html#getSelectedTrack(int))
        pub fn getSelectedTrack<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC, .name == "getSelectedTrack", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "getSelectedTrack\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [selectTrack](https://developer.android.com/reference/android/media/MediaPlayer.html#selectTrack(int))
        pub fn selectTrack<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC, .name == "selectTrack", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "selectTrack\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [deselectTrack](https://developer.android.com/reference/android/media/MediaPlayer.html#deselectTrack(int))
        pub fn deselectTrack<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC, .name == "deselectTrack", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "deselectTrack\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [finalize](https://developer.android.com/reference/android/media/MediaPlayer.html#finalize())
        // fn finalize<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/media/MediaPlayer", java.flags == PROTECTED, .name == "finalize", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "finalize\0", "()V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [setOnPreparedListener](https://developer.android.com/reference/android/media/MediaPlayer.html#setOnPreparedListener(android.media.MediaPlayer.OnPreparedListener))
        ///
        /// Required features: "android-media-MediaPlayer_OnPreparedListener"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaPlayer_OnPreparedListener")))]
        pub fn setOnPreparedListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaPlayer_OnPreparedListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC, .name == "setOnPreparedListener", .descriptor == "(Landroid/media/MediaPlayer$OnPreparedListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "setOnPreparedListener\0", "(Landroid/media/MediaPlayer$OnPreparedListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOnCompletionListener](https://developer.android.com/reference/android/media/MediaPlayer.html#setOnCompletionListener(android.media.MediaPlayer.OnCompletionListener))
        ///
        /// Required features: "android-media-MediaPlayer_OnCompletionListener"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaPlayer_OnCompletionListener")))]
        pub fn setOnCompletionListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaPlayer_OnCompletionListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC, .name == "setOnCompletionListener", .descriptor == "(Landroid/media/MediaPlayer$OnCompletionListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "setOnCompletionListener\0", "(Landroid/media/MediaPlayer$OnCompletionListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOnBufferingUpdateListener](https://developer.android.com/reference/android/media/MediaPlayer.html#setOnBufferingUpdateListener(android.media.MediaPlayer.OnBufferingUpdateListener))
        ///
        /// Required features: "android-media-MediaPlayer_OnBufferingUpdateListener"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaPlayer_OnBufferingUpdateListener")))]
        pub fn setOnBufferingUpdateListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaPlayer_OnBufferingUpdateListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC, .name == "setOnBufferingUpdateListener", .descriptor == "(Landroid/media/MediaPlayer$OnBufferingUpdateListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "setOnBufferingUpdateListener\0", "(Landroid/media/MediaPlayer$OnBufferingUpdateListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOnSeekCompleteListener](https://developer.android.com/reference/android/media/MediaPlayer.html#setOnSeekCompleteListener(android.media.MediaPlayer.OnSeekCompleteListener))
        ///
        /// Required features: "android-media-MediaPlayer_OnSeekCompleteListener"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaPlayer_OnSeekCompleteListener")))]
        pub fn setOnSeekCompleteListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaPlayer_OnSeekCompleteListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC, .name == "setOnSeekCompleteListener", .descriptor == "(Landroid/media/MediaPlayer$OnSeekCompleteListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "setOnSeekCompleteListener\0", "(Landroid/media/MediaPlayer$OnSeekCompleteListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOnVideoSizeChangedListener](https://developer.android.com/reference/android/media/MediaPlayer.html#setOnVideoSizeChangedListener(android.media.MediaPlayer.OnVideoSizeChangedListener))
        ///
        /// Required features: "android-media-MediaPlayer_OnVideoSizeChangedListener"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaPlayer_OnVideoSizeChangedListener")))]
        pub fn setOnVideoSizeChangedListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaPlayer_OnVideoSizeChangedListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC, .name == "setOnVideoSizeChangedListener", .descriptor == "(Landroid/media/MediaPlayer$OnVideoSizeChangedListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "setOnVideoSizeChangedListener\0", "(Landroid/media/MediaPlayer$OnVideoSizeChangedListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOnTimedTextListener](https://developer.android.com/reference/android/media/MediaPlayer.html#setOnTimedTextListener(android.media.MediaPlayer.OnTimedTextListener))
        ///
        /// Required features: "android-media-MediaPlayer_OnTimedTextListener"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaPlayer_OnTimedTextListener")))]
        pub fn setOnTimedTextListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaPlayer_OnTimedTextListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC, .name == "setOnTimedTextListener", .descriptor == "(Landroid/media/MediaPlayer$OnTimedTextListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "setOnTimedTextListener\0", "(Landroid/media/MediaPlayer$OnTimedTextListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOnSubtitleDataListener](https://developer.android.com/reference/android/media/MediaPlayer.html#setOnSubtitleDataListener(android.media.MediaPlayer.OnSubtitleDataListener,%20android.os.Handler))
        ///
        /// Required features: "android-media-MediaPlayer_OnSubtitleDataListener", "android-os-Handler"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaPlayer_OnSubtitleDataListener", feature = "android-os-Handler")))]
        pub fn setOnSubtitleDataListener_OnSubtitleDataListener_Handler<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaPlayer_OnSubtitleDataListener>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC, .name == "setOnSubtitleDataListener", .descriptor == "(Landroid/media/MediaPlayer$OnSubtitleDataListener;Landroid/os/Handler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "setOnSubtitleDataListener\0", "(Landroid/media/MediaPlayer$OnSubtitleDataListener;Landroid/os/Handler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOnSubtitleDataListener](https://developer.android.com/reference/android/media/MediaPlayer.html#setOnSubtitleDataListener(android.media.MediaPlayer.OnSubtitleDataListener))
        ///
        /// Required features: "android-media-MediaPlayer_OnSubtitleDataListener"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaPlayer_OnSubtitleDataListener")))]
        pub fn setOnSubtitleDataListener_OnSubtitleDataListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaPlayer_OnSubtitleDataListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC, .name == "setOnSubtitleDataListener", .descriptor == "(Landroid/media/MediaPlayer$OnSubtitleDataListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "setOnSubtitleDataListener\0", "(Landroid/media/MediaPlayer$OnSubtitleDataListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clearOnSubtitleDataListener](https://developer.android.com/reference/android/media/MediaPlayer.html#clearOnSubtitleDataListener())
        pub fn clearOnSubtitleDataListener<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC, .name == "clearOnSubtitleDataListener", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "clearOnSubtitleDataListener\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOnMediaTimeDiscontinuityListener](https://developer.android.com/reference/android/media/MediaPlayer.html#setOnMediaTimeDiscontinuityListener(android.media.MediaPlayer.OnMediaTimeDiscontinuityListener,%20android.os.Handler))
        ///
        /// Required features: "android-media-MediaPlayer_OnMediaTimeDiscontinuityListener", "android-os-Handler"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaPlayer_OnMediaTimeDiscontinuityListener", feature = "android-os-Handler")))]
        pub fn setOnMediaTimeDiscontinuityListener_OnMediaTimeDiscontinuityListener_Handler<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaPlayer_OnMediaTimeDiscontinuityListener>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC, .name == "setOnMediaTimeDiscontinuityListener", .descriptor == "(Landroid/media/MediaPlayer$OnMediaTimeDiscontinuityListener;Landroid/os/Handler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "setOnMediaTimeDiscontinuityListener\0", "(Landroid/media/MediaPlayer$OnMediaTimeDiscontinuityListener;Landroid/os/Handler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOnMediaTimeDiscontinuityListener](https://developer.android.com/reference/android/media/MediaPlayer.html#setOnMediaTimeDiscontinuityListener(android.media.MediaPlayer.OnMediaTimeDiscontinuityListener))
        ///
        /// Required features: "android-media-MediaPlayer_OnMediaTimeDiscontinuityListener"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaPlayer_OnMediaTimeDiscontinuityListener")))]
        pub fn setOnMediaTimeDiscontinuityListener_OnMediaTimeDiscontinuityListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaPlayer_OnMediaTimeDiscontinuityListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC, .name == "setOnMediaTimeDiscontinuityListener", .descriptor == "(Landroid/media/MediaPlayer$OnMediaTimeDiscontinuityListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "setOnMediaTimeDiscontinuityListener\0", "(Landroid/media/MediaPlayer$OnMediaTimeDiscontinuityListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clearOnMediaTimeDiscontinuityListener](https://developer.android.com/reference/android/media/MediaPlayer.html#clearOnMediaTimeDiscontinuityListener())
        pub fn clearOnMediaTimeDiscontinuityListener<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC, .name == "clearOnMediaTimeDiscontinuityListener", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "clearOnMediaTimeDiscontinuityListener\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOnTimedMetaDataAvailableListener](https://developer.android.com/reference/android/media/MediaPlayer.html#setOnTimedMetaDataAvailableListener(android.media.MediaPlayer.OnTimedMetaDataAvailableListener))
        ///
        /// Required features: "android-media-MediaPlayer_OnTimedMetaDataAvailableListener"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaPlayer_OnTimedMetaDataAvailableListener")))]
        pub fn setOnTimedMetaDataAvailableListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaPlayer_OnTimedMetaDataAvailableListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC, .name == "setOnTimedMetaDataAvailableListener", .descriptor == "(Landroid/media/MediaPlayer$OnTimedMetaDataAvailableListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "setOnTimedMetaDataAvailableListener\0", "(Landroid/media/MediaPlayer$OnTimedMetaDataAvailableListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOnErrorListener](https://developer.android.com/reference/android/media/MediaPlayer.html#setOnErrorListener(android.media.MediaPlayer.OnErrorListener))
        ///
        /// Required features: "android-media-MediaPlayer_OnErrorListener"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaPlayer_OnErrorListener")))]
        pub fn setOnErrorListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaPlayer_OnErrorListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC, .name == "setOnErrorListener", .descriptor == "(Landroid/media/MediaPlayer$OnErrorListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "setOnErrorListener\0", "(Landroid/media/MediaPlayer$OnErrorListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOnInfoListener](https://developer.android.com/reference/android/media/MediaPlayer.html#setOnInfoListener(android.media.MediaPlayer.OnInfoListener))
        ///
        /// Required features: "android-media-MediaPlayer_OnInfoListener"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaPlayer_OnInfoListener")))]
        pub fn setOnInfoListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaPlayer_OnInfoListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC, .name == "setOnInfoListener", .descriptor == "(Landroid/media/MediaPlayer$OnInfoListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "setOnInfoListener\0", "(Landroid/media/MediaPlayer$OnInfoListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOnDrmConfigHelper](https://developer.android.com/reference/android/media/MediaPlayer.html#setOnDrmConfigHelper(android.media.MediaPlayer.OnDrmConfigHelper))
        ///
        /// Required features: "android-media-MediaPlayer_OnDrmConfigHelper"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaPlayer_OnDrmConfigHelper")))]
        pub fn setOnDrmConfigHelper<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaPlayer_OnDrmConfigHelper>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC, .name == "setOnDrmConfigHelper", .descriptor == "(Landroid/media/MediaPlayer$OnDrmConfigHelper;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "setOnDrmConfigHelper\0", "(Landroid/media/MediaPlayer$OnDrmConfigHelper;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOnDrmInfoListener](https://developer.android.com/reference/android/media/MediaPlayer.html#setOnDrmInfoListener(android.media.MediaPlayer.OnDrmInfoListener))
        ///
        /// Required features: "android-media-MediaPlayer_OnDrmInfoListener"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaPlayer_OnDrmInfoListener")))]
        pub fn setOnDrmInfoListener_OnDrmInfoListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaPlayer_OnDrmInfoListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC, .name == "setOnDrmInfoListener", .descriptor == "(Landroid/media/MediaPlayer$OnDrmInfoListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "setOnDrmInfoListener\0", "(Landroid/media/MediaPlayer$OnDrmInfoListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOnDrmInfoListener](https://developer.android.com/reference/android/media/MediaPlayer.html#setOnDrmInfoListener(android.media.MediaPlayer.OnDrmInfoListener,%20android.os.Handler))
        ///
        /// Required features: "android-media-MediaPlayer_OnDrmInfoListener", "android-os-Handler"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaPlayer_OnDrmInfoListener", feature = "android-os-Handler")))]
        pub fn setOnDrmInfoListener_OnDrmInfoListener_Handler<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaPlayer_OnDrmInfoListener>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC, .name == "setOnDrmInfoListener", .descriptor == "(Landroid/media/MediaPlayer$OnDrmInfoListener;Landroid/os/Handler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "setOnDrmInfoListener\0", "(Landroid/media/MediaPlayer$OnDrmInfoListener;Landroid/os/Handler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOnDrmPreparedListener](https://developer.android.com/reference/android/media/MediaPlayer.html#setOnDrmPreparedListener(android.media.MediaPlayer.OnDrmPreparedListener))
        ///
        /// Required features: "android-media-MediaPlayer_OnDrmPreparedListener"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaPlayer_OnDrmPreparedListener")))]
        pub fn setOnDrmPreparedListener_OnDrmPreparedListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaPlayer_OnDrmPreparedListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC, .name == "setOnDrmPreparedListener", .descriptor == "(Landroid/media/MediaPlayer$OnDrmPreparedListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "setOnDrmPreparedListener\0", "(Landroid/media/MediaPlayer$OnDrmPreparedListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOnDrmPreparedListener](https://developer.android.com/reference/android/media/MediaPlayer.html#setOnDrmPreparedListener(android.media.MediaPlayer.OnDrmPreparedListener,%20android.os.Handler))
        ///
        /// Required features: "android-media-MediaPlayer_OnDrmPreparedListener", "android-os-Handler"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaPlayer_OnDrmPreparedListener", feature = "android-os-Handler")))]
        pub fn setOnDrmPreparedListener_OnDrmPreparedListener_Handler<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaPlayer_OnDrmPreparedListener>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC, .name == "setOnDrmPreparedListener", .descriptor == "(Landroid/media/MediaPlayer$OnDrmPreparedListener;Landroid/os/Handler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "setOnDrmPreparedListener\0", "(Landroid/media/MediaPlayer$OnDrmPreparedListener;Landroid/os/Handler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDrmInfo](https://developer.android.com/reference/android/media/MediaPlayer.html#getDrmInfo())
        ///
        /// Required features: "android-media-MediaPlayer_DrmInfo"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaPlayer_DrmInfo")))]
        pub fn getDrmInfo<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::MediaPlayer_DrmInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC, .name == "getDrmInfo", .descriptor == "()Landroid/media/MediaPlayer$DrmInfo;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "getDrmInfo\0", "()Landroid/media/MediaPlayer$DrmInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [prepareDrm](https://developer.android.com/reference/android/media/MediaPlayer.html#prepareDrm(java.util.UUID))
        ///
        /// Required features: "java-util-UUID"
        #[cfg(any(feature = "all", all(feature = "java-util-UUID")))]
        pub fn prepareDrm<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::UUID>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC, .name == "prepareDrm", .descriptor == "(Ljava/util/UUID;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "prepareDrm\0", "(Ljava/util/UUID;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [releaseDrm](https://developer.android.com/reference/android/media/MediaPlayer.html#releaseDrm())
        pub fn releaseDrm<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC, .name == "releaseDrm", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "releaseDrm\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getKeyRequest](https://developer.android.com/reference/android/media/MediaPlayer.html#getKeyRequest(byte%5B%5D,%20byte%5B%5D,%20java.lang.String,%20int,%20java.util.Map))
        ///
        /// Required features: "android-media-MediaDrm_KeyRequest", "java-lang-String", "java-util-Map"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaDrm_KeyRequest", feature = "java-lang-String", feature = "java-util-Map")))]
        pub fn getKeyRequest<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg3: i32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Map>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::MediaDrm_KeyRequest>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC, .name == "getKeyRequest", .descriptor == "([B[BLjava/lang/String;ILjava/util/Map;)Landroid/media/MediaDrm$KeyRequest;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "getKeyRequest\0", "([B[BLjava/lang/String;ILjava/util/Map;)Landroid/media/MediaDrm$KeyRequest;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [provideKeyResponse](https://developer.android.com/reference/android/media/MediaPlayer.html#provideKeyResponse(byte%5B%5D,%20byte%5B%5D))
        pub fn provideKeyResponse<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ByteArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC, .name == "provideKeyResponse", .descriptor == "([B[B)[B"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "provideKeyResponse\0", "([B[B)[B\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [restoreKeys](https://developer.android.com/reference/android/media/MediaPlayer.html#restoreKeys(byte%5B%5D))
        pub fn restoreKeys<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC, .name == "restoreKeys", .descriptor == "([B)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "restoreKeys\0", "([B)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDrmPropertyString](https://developer.android.com/reference/android/media/MediaPlayer.html#getDrmPropertyString(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getDrmPropertyString<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC, .name == "getDrmPropertyString", .descriptor == "(Ljava/lang/String;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "getDrmPropertyString\0", "(Ljava/lang/String;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDrmPropertyString](https://developer.android.com/reference/android/media/MediaPlayer.html#setDrmPropertyString(java.lang.String,%20java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn setDrmPropertyString<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaPlayer", java.flags == PUBLIC, .name == "setDrmPropertyString", .descriptor == "(Ljava/lang/String;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaPlayer\0", "setDrmPropertyString\0", "(Ljava/lang/String;Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [MEDIA_ERROR_IO](https://developer.android.com/reference/android/media/MediaPlayer.html#MEDIA_ERROR_IO)
        pub const MEDIA_ERROR_IO : i32 = -1004;

        /// public static final [MEDIA_ERROR_MALFORMED](https://developer.android.com/reference/android/media/MediaPlayer.html#MEDIA_ERROR_MALFORMED)
        pub const MEDIA_ERROR_MALFORMED : i32 = -1007;

        /// public static final [MEDIA_ERROR_NOT_VALID_FOR_PROGRESSIVE_PLAYBACK](https://developer.android.com/reference/android/media/MediaPlayer.html#MEDIA_ERROR_NOT_VALID_FOR_PROGRESSIVE_PLAYBACK)
        pub const MEDIA_ERROR_NOT_VALID_FOR_PROGRESSIVE_PLAYBACK : i32 = 200;

        /// public static final [MEDIA_ERROR_SERVER_DIED](https://developer.android.com/reference/android/media/MediaPlayer.html#MEDIA_ERROR_SERVER_DIED)
        pub const MEDIA_ERROR_SERVER_DIED : i32 = 100;

        /// public static final [MEDIA_ERROR_TIMED_OUT](https://developer.android.com/reference/android/media/MediaPlayer.html#MEDIA_ERROR_TIMED_OUT)
        pub const MEDIA_ERROR_TIMED_OUT : i32 = -110;

        /// public static final [MEDIA_ERROR_UNKNOWN](https://developer.android.com/reference/android/media/MediaPlayer.html#MEDIA_ERROR_UNKNOWN)
        pub const MEDIA_ERROR_UNKNOWN : i32 = 1;

        /// public static final [MEDIA_ERROR_UNSUPPORTED](https://developer.android.com/reference/android/media/MediaPlayer.html#MEDIA_ERROR_UNSUPPORTED)
        pub const MEDIA_ERROR_UNSUPPORTED : i32 = -1010;

        /// public static final [MEDIA_INFO_AUDIO_NOT_PLAYING](https://developer.android.com/reference/android/media/MediaPlayer.html#MEDIA_INFO_AUDIO_NOT_PLAYING)
        pub const MEDIA_INFO_AUDIO_NOT_PLAYING : i32 = 804;

        /// public static final [MEDIA_INFO_BAD_INTERLEAVING](https://developer.android.com/reference/android/media/MediaPlayer.html#MEDIA_INFO_BAD_INTERLEAVING)
        pub const MEDIA_INFO_BAD_INTERLEAVING : i32 = 800;

        /// public static final [MEDIA_INFO_BUFFERING_END](https://developer.android.com/reference/android/media/MediaPlayer.html#MEDIA_INFO_BUFFERING_END)
        pub const MEDIA_INFO_BUFFERING_END : i32 = 702;

        /// public static final [MEDIA_INFO_BUFFERING_START](https://developer.android.com/reference/android/media/MediaPlayer.html#MEDIA_INFO_BUFFERING_START)
        pub const MEDIA_INFO_BUFFERING_START : i32 = 701;

        /// public static final [MEDIA_INFO_METADATA_UPDATE](https://developer.android.com/reference/android/media/MediaPlayer.html#MEDIA_INFO_METADATA_UPDATE)
        pub const MEDIA_INFO_METADATA_UPDATE : i32 = 802;

        /// public static final [MEDIA_INFO_NOT_SEEKABLE](https://developer.android.com/reference/android/media/MediaPlayer.html#MEDIA_INFO_NOT_SEEKABLE)
        pub const MEDIA_INFO_NOT_SEEKABLE : i32 = 801;

        /// public static final [MEDIA_INFO_STARTED_AS_NEXT](https://developer.android.com/reference/android/media/MediaPlayer.html#MEDIA_INFO_STARTED_AS_NEXT)
        pub const MEDIA_INFO_STARTED_AS_NEXT : i32 = 2;

        /// public static final [MEDIA_INFO_SUBTITLE_TIMED_OUT](https://developer.android.com/reference/android/media/MediaPlayer.html#MEDIA_INFO_SUBTITLE_TIMED_OUT)
        pub const MEDIA_INFO_SUBTITLE_TIMED_OUT : i32 = 902;

        /// public static final [MEDIA_INFO_UNKNOWN](https://developer.android.com/reference/android/media/MediaPlayer.html#MEDIA_INFO_UNKNOWN)
        pub const MEDIA_INFO_UNKNOWN : i32 = 1;

        /// public static final [MEDIA_INFO_UNSUPPORTED_SUBTITLE](https://developer.android.com/reference/android/media/MediaPlayer.html#MEDIA_INFO_UNSUPPORTED_SUBTITLE)
        pub const MEDIA_INFO_UNSUPPORTED_SUBTITLE : i32 = 901;

        /// public static final [MEDIA_INFO_VIDEO_NOT_PLAYING](https://developer.android.com/reference/android/media/MediaPlayer.html#MEDIA_INFO_VIDEO_NOT_PLAYING)
        pub const MEDIA_INFO_VIDEO_NOT_PLAYING : i32 = 805;

        /// public static final [MEDIA_INFO_VIDEO_RENDERING_START](https://developer.android.com/reference/android/media/MediaPlayer.html#MEDIA_INFO_VIDEO_RENDERING_START)
        pub const MEDIA_INFO_VIDEO_RENDERING_START : i32 = 3;

        /// public static final [MEDIA_INFO_VIDEO_TRACK_LAGGING](https://developer.android.com/reference/android/media/MediaPlayer.html#MEDIA_INFO_VIDEO_TRACK_LAGGING)
        pub const MEDIA_INFO_VIDEO_TRACK_LAGGING : i32 = 700;

        /// public static final [MEDIA_MIMETYPE_TEXT_SUBRIP](https://developer.android.com/reference/android/media/MediaPlayer.html#MEDIA_MIMETYPE_TEXT_SUBRIP)
        #[deprecated] pub const MEDIA_MIMETYPE_TEXT_SUBRIP : &'static str = "application/x-subrip";

        /// public static final [PREPARE_DRM_STATUS_PREPARATION_ERROR](https://developer.android.com/reference/android/media/MediaPlayer.html#PREPARE_DRM_STATUS_PREPARATION_ERROR)
        pub const PREPARE_DRM_STATUS_PREPARATION_ERROR : i32 = 3;

        /// public static final [PREPARE_DRM_STATUS_PROVISIONING_NETWORK_ERROR](https://developer.android.com/reference/android/media/MediaPlayer.html#PREPARE_DRM_STATUS_PROVISIONING_NETWORK_ERROR)
        pub const PREPARE_DRM_STATUS_PROVISIONING_NETWORK_ERROR : i32 = 1;

        /// public static final [PREPARE_DRM_STATUS_PROVISIONING_SERVER_ERROR](https://developer.android.com/reference/android/media/MediaPlayer.html#PREPARE_DRM_STATUS_PROVISIONING_SERVER_ERROR)
        pub const PREPARE_DRM_STATUS_PROVISIONING_SERVER_ERROR : i32 = 2;

        /// public static final [PREPARE_DRM_STATUS_SUCCESS](https://developer.android.com/reference/android/media/MediaPlayer.html#PREPARE_DRM_STATUS_SUCCESS)
        pub const PREPARE_DRM_STATUS_SUCCESS : i32 = 0;

        /// public static final [SEEK_CLOSEST](https://developer.android.com/reference/android/media/MediaPlayer.html#SEEK_CLOSEST)
        pub const SEEK_CLOSEST : i32 = 3;

        /// public static final [SEEK_CLOSEST_SYNC](https://developer.android.com/reference/android/media/MediaPlayer.html#SEEK_CLOSEST_SYNC)
        pub const SEEK_CLOSEST_SYNC : i32 = 2;

        /// public static final [SEEK_NEXT_SYNC](https://developer.android.com/reference/android/media/MediaPlayer.html#SEEK_NEXT_SYNC)
        pub const SEEK_NEXT_SYNC : i32 = 1;

        /// public static final [SEEK_PREVIOUS_SYNC](https://developer.android.com/reference/android/media/MediaPlayer.html#SEEK_PREVIOUS_SYNC)
        pub const SEEK_PREVIOUS_SYNC : i32 = 0;

        /// public static final [VIDEO_SCALING_MODE_SCALE_TO_FIT](https://developer.android.com/reference/android/media/MediaPlayer.html#VIDEO_SCALING_MODE_SCALE_TO_FIT)
        pub const VIDEO_SCALING_MODE_SCALE_TO_FIT : i32 = 1;

        /// public static final [VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING](https://developer.android.com/reference/android/media/MediaPlayer.html#VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING)
        pub const VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING : i32 = 2;
    }
}
