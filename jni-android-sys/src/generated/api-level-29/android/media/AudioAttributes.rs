// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-media-AudioAttributes"))]
__jni_bindgen! {
    /// public final class [AudioAttributes](https://developer.android.com/reference/android/media/AudioAttributes.html)
    ///
    /// Required feature: android-media-AudioAttributes
    public final class AudioAttributes ("android/media/AudioAttributes") extends crate::java::lang::Object, implements crate::android::os::Parcelable {

        // // Not emitting: Non-public method
        // /// [AudioAttributes](https://developer.android.com/reference/android/media/AudioAttributes.html#AudioAttributes())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::media::AudioAttributes>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/media/AudioAttributes", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioAttributes\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getContentType](https://developer.android.com/reference/android/media/AudioAttributes.html#getContentType())
        pub fn getContentType<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioAttributes", java.flags == PUBLIC, .name == "getContentType", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioAttributes\0", "getContentType\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getUsage](https://developer.android.com/reference/android/media/AudioAttributes.html#getUsage())
        pub fn getUsage<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioAttributes", java.flags == PUBLIC, .name == "getUsage", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioAttributes\0", "getUsage\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFlags](https://developer.android.com/reference/android/media/AudioAttributes.html#getFlags())
        pub fn getFlags<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioAttributes", java.flags == PUBLIC, .name == "getFlags", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioAttributes\0", "getFlags\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [areHapticChannelsMuted](https://developer.android.com/reference/android/media/AudioAttributes.html#areHapticChannelsMuted())
        pub fn areHapticChannelsMuted<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioAttributes", java.flags == PUBLIC, .name == "areHapticChannelsMuted", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioAttributes\0", "areHapticChannelsMuted\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAllowedCapturePolicy](https://developer.android.com/reference/android/media/AudioAttributes.html#getAllowedCapturePolicy())
        pub fn getAllowedCapturePolicy<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioAttributes", java.flags == PUBLIC, .name == "getAllowedCapturePolicy", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioAttributes\0", "getAllowedCapturePolicy\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [describeContents](https://developer.android.com/reference/android/media/AudioAttributes.html#describeContents())
        pub fn describeContents<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioAttributes", java.flags == PUBLIC, .name == "describeContents", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioAttributes\0", "describeContents\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [writeToParcel](https://developer.android.com/reference/android/media/AudioAttributes.html#writeToParcel(android.os.Parcel,%20int))
        ///
        /// Required features: "android-os-Parcel"
        #[cfg(any(feature = "all", all(feature = "android-os-Parcel")))]
        pub fn writeToParcel<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Parcel>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioAttributes", java.flags == PUBLIC, .name == "writeToParcel", .descriptor == "(Landroid/os/Parcel;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioAttributes\0", "writeToParcel\0", "(Landroid/os/Parcel;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [equals](https://developer.android.com/reference/android/media/AudioAttributes.html#equals(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn equals<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioAttributes", java.flags == PUBLIC, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioAttributes\0", "equals\0", "(Ljava/lang/Object;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hashCode](https://developer.android.com/reference/android/media/AudioAttributes.html#hashCode())
        pub fn hashCode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioAttributes", java.flags == PUBLIC, .name == "hashCode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioAttributes\0", "hashCode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/android/media/AudioAttributes.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioAttributes", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioAttributes\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getVolumeControlStream](https://developer.android.com/reference/android/media/AudioAttributes.html#getVolumeControlStream())
        pub fn getVolumeControlStream<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioAttributes", java.flags == PUBLIC, .name == "getVolumeControlStream", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioAttributes\0", "getVolumeControlStream\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [ALLOW_CAPTURE_BY_ALL](https://developer.android.com/reference/android/media/AudioAttributes.html#ALLOW_CAPTURE_BY_ALL)
        pub const ALLOW_CAPTURE_BY_ALL : i32 = 1;

        /// public static final [ALLOW_CAPTURE_BY_NONE](https://developer.android.com/reference/android/media/AudioAttributes.html#ALLOW_CAPTURE_BY_NONE)
        pub const ALLOW_CAPTURE_BY_NONE : i32 = 3;

        /// public static final [ALLOW_CAPTURE_BY_SYSTEM](https://developer.android.com/reference/android/media/AudioAttributes.html#ALLOW_CAPTURE_BY_SYSTEM)
        pub const ALLOW_CAPTURE_BY_SYSTEM : i32 = 2;

        /// public static final [CONTENT_TYPE_MOVIE](https://developer.android.com/reference/android/media/AudioAttributes.html#CONTENT_TYPE_MOVIE)
        pub const CONTENT_TYPE_MOVIE : i32 = 3;

        /// public static final [CONTENT_TYPE_MUSIC](https://developer.android.com/reference/android/media/AudioAttributes.html#CONTENT_TYPE_MUSIC)
        pub const CONTENT_TYPE_MUSIC : i32 = 2;

        /// public static final [CONTENT_TYPE_SONIFICATION](https://developer.android.com/reference/android/media/AudioAttributes.html#CONTENT_TYPE_SONIFICATION)
        pub const CONTENT_TYPE_SONIFICATION : i32 = 4;

        /// public static final [CONTENT_TYPE_SPEECH](https://developer.android.com/reference/android/media/AudioAttributes.html#CONTENT_TYPE_SPEECH)
        pub const CONTENT_TYPE_SPEECH : i32 = 1;

        /// public static final [CONTENT_TYPE_UNKNOWN](https://developer.android.com/reference/android/media/AudioAttributes.html#CONTENT_TYPE_UNKNOWN)
        pub const CONTENT_TYPE_UNKNOWN : i32 = 0;

        /// **get** public static final [CREATOR](https://developer.android.com/reference/android/media/AudioAttributes.html#CREATOR)
        ///
        /// Required feature: android-os-Parcelable_Creator
        #[cfg(any(feature = "all", feature = "android-os-Parcelable_Creator"))]
        pub fn CREATOR<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Parcelable_Creator>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/media/AudioAttributes\0", "CREATOR\0", "Landroid/os/Parcelable$Creator;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// public static final [FLAG_AUDIBILITY_ENFORCED](https://developer.android.com/reference/android/media/AudioAttributes.html#FLAG_AUDIBILITY_ENFORCED)
        pub const FLAG_AUDIBILITY_ENFORCED : i32 = 1;

        /// public static final [FLAG_HW_AV_SYNC](https://developer.android.com/reference/android/media/AudioAttributes.html#FLAG_HW_AV_SYNC)
        pub const FLAG_HW_AV_SYNC : i32 = 16;

        /// public static final [FLAG_LOW_LATENCY](https://developer.android.com/reference/android/media/AudioAttributes.html#FLAG_LOW_LATENCY)
        #[deprecated] pub const FLAG_LOW_LATENCY : i32 = 256;

        /// public static final [USAGE_ALARM](https://developer.android.com/reference/android/media/AudioAttributes.html#USAGE_ALARM)
        pub const USAGE_ALARM : i32 = 4;

        /// public static final [USAGE_ASSISTANCE_ACCESSIBILITY](https://developer.android.com/reference/android/media/AudioAttributes.html#USAGE_ASSISTANCE_ACCESSIBILITY)
        pub const USAGE_ASSISTANCE_ACCESSIBILITY : i32 = 11;

        /// public static final [USAGE_ASSISTANCE_NAVIGATION_GUIDANCE](https://developer.android.com/reference/android/media/AudioAttributes.html#USAGE_ASSISTANCE_NAVIGATION_GUIDANCE)
        pub const USAGE_ASSISTANCE_NAVIGATION_GUIDANCE : i32 = 12;

        /// public static final [USAGE_ASSISTANCE_SONIFICATION](https://developer.android.com/reference/android/media/AudioAttributes.html#USAGE_ASSISTANCE_SONIFICATION)
        pub const USAGE_ASSISTANCE_SONIFICATION : i32 = 13;

        /// public static final [USAGE_ASSISTANT](https://developer.android.com/reference/android/media/AudioAttributes.html#USAGE_ASSISTANT)
        pub const USAGE_ASSISTANT : i32 = 16;

        /// public static final [USAGE_GAME](https://developer.android.com/reference/android/media/AudioAttributes.html#USAGE_GAME)
        pub const USAGE_GAME : i32 = 14;

        /// public static final [USAGE_MEDIA](https://developer.android.com/reference/android/media/AudioAttributes.html#USAGE_MEDIA)
        pub const USAGE_MEDIA : i32 = 1;

        /// public static final [USAGE_NOTIFICATION](https://developer.android.com/reference/android/media/AudioAttributes.html#USAGE_NOTIFICATION)
        pub const USAGE_NOTIFICATION : i32 = 5;

        /// public static final [USAGE_NOTIFICATION_COMMUNICATION_DELAYED](https://developer.android.com/reference/android/media/AudioAttributes.html#USAGE_NOTIFICATION_COMMUNICATION_DELAYED)
        pub const USAGE_NOTIFICATION_COMMUNICATION_DELAYED : i32 = 9;

        /// public static final [USAGE_NOTIFICATION_COMMUNICATION_INSTANT](https://developer.android.com/reference/android/media/AudioAttributes.html#USAGE_NOTIFICATION_COMMUNICATION_INSTANT)
        pub const USAGE_NOTIFICATION_COMMUNICATION_INSTANT : i32 = 8;

        /// public static final [USAGE_NOTIFICATION_COMMUNICATION_REQUEST](https://developer.android.com/reference/android/media/AudioAttributes.html#USAGE_NOTIFICATION_COMMUNICATION_REQUEST)
        pub const USAGE_NOTIFICATION_COMMUNICATION_REQUEST : i32 = 7;

        /// public static final [USAGE_NOTIFICATION_EVENT](https://developer.android.com/reference/android/media/AudioAttributes.html#USAGE_NOTIFICATION_EVENT)
        pub const USAGE_NOTIFICATION_EVENT : i32 = 10;

        /// public static final [USAGE_NOTIFICATION_RINGTONE](https://developer.android.com/reference/android/media/AudioAttributes.html#USAGE_NOTIFICATION_RINGTONE)
        pub const USAGE_NOTIFICATION_RINGTONE : i32 = 6;

        /// public static final [USAGE_UNKNOWN](https://developer.android.com/reference/android/media/AudioAttributes.html#USAGE_UNKNOWN)
        pub const USAGE_UNKNOWN : i32 = 0;

        /// public static final [USAGE_VOICE_COMMUNICATION](https://developer.android.com/reference/android/media/AudioAttributes.html#USAGE_VOICE_COMMUNICATION)
        pub const USAGE_VOICE_COMMUNICATION : i32 = 2;

        /// public static final [USAGE_VOICE_COMMUNICATION_SIGNALLING](https://developer.android.com/reference/android/media/AudioAttributes.html#USAGE_VOICE_COMMUNICATION_SIGNALLING)
        pub const USAGE_VOICE_COMMUNICATION_SIGNALLING : i32 = 3;
    }
}
