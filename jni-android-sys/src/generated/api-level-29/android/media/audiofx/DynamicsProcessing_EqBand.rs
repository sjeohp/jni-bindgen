// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-media-audiofx-DynamicsProcessing_EqBand"))]
__jni_bindgen! {
    /// public final class [DynamicsProcessing.EqBand](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.EqBand.html)
    ///
    /// Required feature: android-media-audiofx-DynamicsProcessing_EqBand
    public final class DynamicsProcessing_EqBand ("android/media/audiofx/DynamicsProcessing$EqBand") extends crate::android::media::audiofx::DynamicsProcessing_BandBase {

        /// [EqBand](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.EqBand.html#EqBand(boolean,%20float,%20float))
        pub fn new_boolean_float_float<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: bool, arg1: f32, arg2: f32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::media::audiofx::DynamicsProcessing_EqBand>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$EqBand", java.flags == PUBLIC, .name == "<init>", .descriptor == "(ZFF)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$EqBand\0", "<init>\0", "(ZFF)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [EqBand](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.EqBand.html#EqBand(android.media.audiofx.DynamicsProcessing.EqBand))
        ///
        /// Required features: "android-media-audiofx-DynamicsProcessing_EqBand"
        #[cfg(any(feature = "all", all(feature = "android-media-audiofx-DynamicsProcessing_EqBand")))]
        pub fn new_EqBand<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::audiofx::DynamicsProcessing_EqBand>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::media::audiofx::DynamicsProcessing_EqBand>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$EqBand", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/media/audiofx/DynamicsProcessing$EqBand;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$EqBand\0", "<init>\0", "(Landroid/media/audiofx/DynamicsProcessing$EqBand;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.EqBand.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$EqBand", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$EqBand\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getGain](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.EqBand.html#getGain())
        pub fn getGain<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$EqBand", java.flags == PUBLIC, .name == "getGain", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$EqBand\0", "getGain\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setGain](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.EqBand.html#setGain(float))
        pub fn setGain<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$EqBand", java.flags == PUBLIC, .name == "setGain", .descriptor == "(F)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$EqBand\0", "setGain\0", "(F)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
