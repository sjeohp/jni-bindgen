// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-media-audiofx-DynamicsProcessing_Config"))]
__jni_bindgen! {
    /// public final class [DynamicsProcessing.Config](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html)
    ///
    /// Required feature: android-media-audiofx-DynamicsProcessing_Config
    public final class DynamicsProcessing_Config ("android/media/audiofx/DynamicsProcessing$Config") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [Config](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#Config(android.media.audiofx.DynamicsProcessing.Config))
        // ///
        // /// Required features: "android-media-audiofx-DynamicsProcessing_Config"
        // #[cfg(any(feature = "all", all(feature = "android-media-audiofx-DynamicsProcessing_Config")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::audiofx::DynamicsProcessing_Config>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::media::audiofx::DynamicsProcessing_Config>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/media/audiofx/DynamicsProcessing$Config", java.flags == (empty), .name == "<init>", .descriptor == "(Landroid/media/audiofx/DynamicsProcessing$Config;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Config\0", "<init>\0", "(Landroid/media/audiofx/DynamicsProcessing$Config;)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [toString](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Config", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Config\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getVariant](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#getVariant())
        pub fn getVariant<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Config", java.flags == PUBLIC, .name == "getVariant", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Config\0", "getVariant\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPreferredFrameDuration](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#getPreferredFrameDuration())
        pub fn getPreferredFrameDuration<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Config", java.flags == PUBLIC, .name == "getPreferredFrameDuration", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Config\0", "getPreferredFrameDuration\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isPreEqInUse](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#isPreEqInUse())
        pub fn isPreEqInUse<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Config", java.flags == PUBLIC, .name == "isPreEqInUse", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Config\0", "isPreEqInUse\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPreEqBandCount](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#getPreEqBandCount())
        pub fn getPreEqBandCount<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Config", java.flags == PUBLIC, .name == "getPreEqBandCount", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Config\0", "getPreEqBandCount\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isMbcInUse](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#isMbcInUse())
        pub fn isMbcInUse<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Config", java.flags == PUBLIC, .name == "isMbcInUse", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Config\0", "isMbcInUse\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMbcBandCount](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#getMbcBandCount())
        pub fn getMbcBandCount<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Config", java.flags == PUBLIC, .name == "getMbcBandCount", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Config\0", "getMbcBandCount\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isPostEqInUse](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#isPostEqInUse())
        pub fn isPostEqInUse<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Config", java.flags == PUBLIC, .name == "isPostEqInUse", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Config\0", "isPostEqInUse\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPostEqBandCount](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#getPostEqBandCount())
        pub fn getPostEqBandCount<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Config", java.flags == PUBLIC, .name == "getPostEqBandCount", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Config\0", "getPostEqBandCount\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isLimiterInUse](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#isLimiterInUse())
        pub fn isLimiterInUse<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Config", java.flags == PUBLIC, .name == "isLimiterInUse", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Config\0", "isLimiterInUse\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getChannelByChannelIndex](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#getChannelByChannelIndex(int))
        ///
        /// Required features: "android-media-audiofx-DynamicsProcessing_Channel"
        #[cfg(any(feature = "all", all(feature = "android-media-audiofx-DynamicsProcessing_Channel")))]
        pub fn getChannelByChannelIndex<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::audiofx::DynamicsProcessing_Channel>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Config", java.flags == PUBLIC, .name == "getChannelByChannelIndex", .descriptor == "(I)Landroid/media/audiofx/DynamicsProcessing$Channel;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Config\0", "getChannelByChannelIndex\0", "(I)Landroid/media/audiofx/DynamicsProcessing$Channel;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setChannelTo](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#setChannelTo(int,%20android.media.audiofx.DynamicsProcessing.Channel))
        ///
        /// Required features: "android-media-audiofx-DynamicsProcessing_Channel"
        #[cfg(any(feature = "all", all(feature = "android-media-audiofx-DynamicsProcessing_Channel")))]
        pub fn setChannelTo<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::audiofx::DynamicsProcessing_Channel>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Config", java.flags == PUBLIC, .name == "setChannelTo", .descriptor == "(ILandroid/media/audiofx/DynamicsProcessing$Channel;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Config\0", "setChannelTo\0", "(ILandroid/media/audiofx/DynamicsProcessing$Channel;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAllChannelsTo](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#setAllChannelsTo(android.media.audiofx.DynamicsProcessing.Channel))
        ///
        /// Required features: "android-media-audiofx-DynamicsProcessing_Channel"
        #[cfg(any(feature = "all", all(feature = "android-media-audiofx-DynamicsProcessing_Channel")))]
        pub fn setAllChannelsTo<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::audiofx::DynamicsProcessing_Channel>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Config", java.flags == PUBLIC, .name == "setAllChannelsTo", .descriptor == "(Landroid/media/audiofx/DynamicsProcessing$Channel;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Config\0", "setAllChannelsTo\0", "(Landroid/media/audiofx/DynamicsProcessing$Channel;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInputGainByChannelIndex](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#getInputGainByChannelIndex(int))
        pub fn getInputGainByChannelIndex<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Config", java.flags == PUBLIC, .name == "getInputGainByChannelIndex", .descriptor == "(I)F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Config\0", "getInputGainByChannelIndex\0", "(I)F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setInputGainByChannelIndex](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#setInputGainByChannelIndex(int,%20float))
        pub fn setInputGainByChannelIndex<'env>(&'env self, arg0: i32, arg1: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Config", java.flags == PUBLIC, .name == "setInputGainByChannelIndex", .descriptor == "(IF)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Config\0", "setInputGainByChannelIndex\0", "(IF)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setInputGainAllChannelsTo](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#setInputGainAllChannelsTo(float))
        pub fn setInputGainAllChannelsTo<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Config", java.flags == PUBLIC, .name == "setInputGainAllChannelsTo", .descriptor == "(F)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Config\0", "setInputGainAllChannelsTo\0", "(F)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPreEqByChannelIndex](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#getPreEqByChannelIndex(int))
        ///
        /// Required features: "android-media-audiofx-DynamicsProcessing_Eq"
        #[cfg(any(feature = "all", all(feature = "android-media-audiofx-DynamicsProcessing_Eq")))]
        pub fn getPreEqByChannelIndex<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::audiofx::DynamicsProcessing_Eq>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Config", java.flags == PUBLIC, .name == "getPreEqByChannelIndex", .descriptor == "(I)Landroid/media/audiofx/DynamicsProcessing$Eq;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Config\0", "getPreEqByChannelIndex\0", "(I)Landroid/media/audiofx/DynamicsProcessing$Eq;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPreEqByChannelIndex](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#setPreEqByChannelIndex(int,%20android.media.audiofx.DynamicsProcessing.Eq))
        ///
        /// Required features: "android-media-audiofx-DynamicsProcessing_Eq"
        #[cfg(any(feature = "all", all(feature = "android-media-audiofx-DynamicsProcessing_Eq")))]
        pub fn setPreEqByChannelIndex<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::audiofx::DynamicsProcessing_Eq>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Config", java.flags == PUBLIC, .name == "setPreEqByChannelIndex", .descriptor == "(ILandroid/media/audiofx/DynamicsProcessing$Eq;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Config\0", "setPreEqByChannelIndex\0", "(ILandroid/media/audiofx/DynamicsProcessing$Eq;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPreEqAllChannelsTo](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#setPreEqAllChannelsTo(android.media.audiofx.DynamicsProcessing.Eq))
        ///
        /// Required features: "android-media-audiofx-DynamicsProcessing_Eq"
        #[cfg(any(feature = "all", all(feature = "android-media-audiofx-DynamicsProcessing_Eq")))]
        pub fn setPreEqAllChannelsTo<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::audiofx::DynamicsProcessing_Eq>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Config", java.flags == PUBLIC, .name == "setPreEqAllChannelsTo", .descriptor == "(Landroid/media/audiofx/DynamicsProcessing$Eq;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Config\0", "setPreEqAllChannelsTo\0", "(Landroid/media/audiofx/DynamicsProcessing$Eq;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPreEqBandByChannelIndex](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#getPreEqBandByChannelIndex(int,%20int))
        ///
        /// Required features: "android-media-audiofx-DynamicsProcessing_EqBand"
        #[cfg(any(feature = "all", all(feature = "android-media-audiofx-DynamicsProcessing_EqBand")))]
        pub fn getPreEqBandByChannelIndex<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::audiofx::DynamicsProcessing_EqBand>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Config", java.flags == PUBLIC, .name == "getPreEqBandByChannelIndex", .descriptor == "(II)Landroid/media/audiofx/DynamicsProcessing$EqBand;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Config\0", "getPreEqBandByChannelIndex\0", "(II)Landroid/media/audiofx/DynamicsProcessing$EqBand;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPreEqBandByChannelIndex](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#setPreEqBandByChannelIndex(int,%20int,%20android.media.audiofx.DynamicsProcessing.EqBand))
        ///
        /// Required features: "android-media-audiofx-DynamicsProcessing_EqBand"
        #[cfg(any(feature = "all", all(feature = "android-media-audiofx-DynamicsProcessing_EqBand")))]
        pub fn setPreEqBandByChannelIndex<'env>(&'env self, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::audiofx::DynamicsProcessing_EqBand>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Config", java.flags == PUBLIC, .name == "setPreEqBandByChannelIndex", .descriptor == "(IILandroid/media/audiofx/DynamicsProcessing$EqBand;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Config\0", "setPreEqBandByChannelIndex\0", "(IILandroid/media/audiofx/DynamicsProcessing$EqBand;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPreEqBandAllChannelsTo](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#setPreEqBandAllChannelsTo(int,%20android.media.audiofx.DynamicsProcessing.EqBand))
        ///
        /// Required features: "android-media-audiofx-DynamicsProcessing_EqBand"
        #[cfg(any(feature = "all", all(feature = "android-media-audiofx-DynamicsProcessing_EqBand")))]
        pub fn setPreEqBandAllChannelsTo<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::audiofx::DynamicsProcessing_EqBand>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Config", java.flags == PUBLIC, .name == "setPreEqBandAllChannelsTo", .descriptor == "(ILandroid/media/audiofx/DynamicsProcessing$EqBand;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Config\0", "setPreEqBandAllChannelsTo\0", "(ILandroid/media/audiofx/DynamicsProcessing$EqBand;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMbcByChannelIndex](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#getMbcByChannelIndex(int))
        ///
        /// Required features: "android-media-audiofx-DynamicsProcessing_Mbc"
        #[cfg(any(feature = "all", all(feature = "android-media-audiofx-DynamicsProcessing_Mbc")))]
        pub fn getMbcByChannelIndex<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::audiofx::DynamicsProcessing_Mbc>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Config", java.flags == PUBLIC, .name == "getMbcByChannelIndex", .descriptor == "(I)Landroid/media/audiofx/DynamicsProcessing$Mbc;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Config\0", "getMbcByChannelIndex\0", "(I)Landroid/media/audiofx/DynamicsProcessing$Mbc;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setMbcByChannelIndex](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#setMbcByChannelIndex(int,%20android.media.audiofx.DynamicsProcessing.Mbc))
        ///
        /// Required features: "android-media-audiofx-DynamicsProcessing_Mbc"
        #[cfg(any(feature = "all", all(feature = "android-media-audiofx-DynamicsProcessing_Mbc")))]
        pub fn setMbcByChannelIndex<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::audiofx::DynamicsProcessing_Mbc>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Config", java.flags == PUBLIC, .name == "setMbcByChannelIndex", .descriptor == "(ILandroid/media/audiofx/DynamicsProcessing$Mbc;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Config\0", "setMbcByChannelIndex\0", "(ILandroid/media/audiofx/DynamicsProcessing$Mbc;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setMbcAllChannelsTo](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#setMbcAllChannelsTo(android.media.audiofx.DynamicsProcessing.Mbc))
        ///
        /// Required features: "android-media-audiofx-DynamicsProcessing_Mbc"
        #[cfg(any(feature = "all", all(feature = "android-media-audiofx-DynamicsProcessing_Mbc")))]
        pub fn setMbcAllChannelsTo<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::audiofx::DynamicsProcessing_Mbc>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Config", java.flags == PUBLIC, .name == "setMbcAllChannelsTo", .descriptor == "(Landroid/media/audiofx/DynamicsProcessing$Mbc;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Config\0", "setMbcAllChannelsTo\0", "(Landroid/media/audiofx/DynamicsProcessing$Mbc;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMbcBandByChannelIndex](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#getMbcBandByChannelIndex(int,%20int))
        ///
        /// Required features: "android-media-audiofx-DynamicsProcessing_MbcBand"
        #[cfg(any(feature = "all", all(feature = "android-media-audiofx-DynamicsProcessing_MbcBand")))]
        pub fn getMbcBandByChannelIndex<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::audiofx::DynamicsProcessing_MbcBand>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Config", java.flags == PUBLIC, .name == "getMbcBandByChannelIndex", .descriptor == "(II)Landroid/media/audiofx/DynamicsProcessing$MbcBand;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Config\0", "getMbcBandByChannelIndex\0", "(II)Landroid/media/audiofx/DynamicsProcessing$MbcBand;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setMbcBandByChannelIndex](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#setMbcBandByChannelIndex(int,%20int,%20android.media.audiofx.DynamicsProcessing.MbcBand))
        ///
        /// Required features: "android-media-audiofx-DynamicsProcessing_MbcBand"
        #[cfg(any(feature = "all", all(feature = "android-media-audiofx-DynamicsProcessing_MbcBand")))]
        pub fn setMbcBandByChannelIndex<'env>(&'env self, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::audiofx::DynamicsProcessing_MbcBand>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Config", java.flags == PUBLIC, .name == "setMbcBandByChannelIndex", .descriptor == "(IILandroid/media/audiofx/DynamicsProcessing$MbcBand;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Config\0", "setMbcBandByChannelIndex\0", "(IILandroid/media/audiofx/DynamicsProcessing$MbcBand;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setMbcBandAllChannelsTo](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#setMbcBandAllChannelsTo(int,%20android.media.audiofx.DynamicsProcessing.MbcBand))
        ///
        /// Required features: "android-media-audiofx-DynamicsProcessing_MbcBand"
        #[cfg(any(feature = "all", all(feature = "android-media-audiofx-DynamicsProcessing_MbcBand")))]
        pub fn setMbcBandAllChannelsTo<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::audiofx::DynamicsProcessing_MbcBand>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Config", java.flags == PUBLIC, .name == "setMbcBandAllChannelsTo", .descriptor == "(ILandroid/media/audiofx/DynamicsProcessing$MbcBand;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Config\0", "setMbcBandAllChannelsTo\0", "(ILandroid/media/audiofx/DynamicsProcessing$MbcBand;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPostEqByChannelIndex](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#getPostEqByChannelIndex(int))
        ///
        /// Required features: "android-media-audiofx-DynamicsProcessing_Eq"
        #[cfg(any(feature = "all", all(feature = "android-media-audiofx-DynamicsProcessing_Eq")))]
        pub fn getPostEqByChannelIndex<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::audiofx::DynamicsProcessing_Eq>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Config", java.flags == PUBLIC, .name == "getPostEqByChannelIndex", .descriptor == "(I)Landroid/media/audiofx/DynamicsProcessing$Eq;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Config\0", "getPostEqByChannelIndex\0", "(I)Landroid/media/audiofx/DynamicsProcessing$Eq;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPostEqByChannelIndex](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#setPostEqByChannelIndex(int,%20android.media.audiofx.DynamicsProcessing.Eq))
        ///
        /// Required features: "android-media-audiofx-DynamicsProcessing_Eq"
        #[cfg(any(feature = "all", all(feature = "android-media-audiofx-DynamicsProcessing_Eq")))]
        pub fn setPostEqByChannelIndex<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::audiofx::DynamicsProcessing_Eq>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Config", java.flags == PUBLIC, .name == "setPostEqByChannelIndex", .descriptor == "(ILandroid/media/audiofx/DynamicsProcessing$Eq;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Config\0", "setPostEqByChannelIndex\0", "(ILandroid/media/audiofx/DynamicsProcessing$Eq;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPostEqAllChannelsTo](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#setPostEqAllChannelsTo(android.media.audiofx.DynamicsProcessing.Eq))
        ///
        /// Required features: "android-media-audiofx-DynamicsProcessing_Eq"
        #[cfg(any(feature = "all", all(feature = "android-media-audiofx-DynamicsProcessing_Eq")))]
        pub fn setPostEqAllChannelsTo<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::audiofx::DynamicsProcessing_Eq>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Config", java.flags == PUBLIC, .name == "setPostEqAllChannelsTo", .descriptor == "(Landroid/media/audiofx/DynamicsProcessing$Eq;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Config\0", "setPostEqAllChannelsTo\0", "(Landroid/media/audiofx/DynamicsProcessing$Eq;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPostEqBandByChannelIndex](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#getPostEqBandByChannelIndex(int,%20int))
        ///
        /// Required features: "android-media-audiofx-DynamicsProcessing_EqBand"
        #[cfg(any(feature = "all", all(feature = "android-media-audiofx-DynamicsProcessing_EqBand")))]
        pub fn getPostEqBandByChannelIndex<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::audiofx::DynamicsProcessing_EqBand>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Config", java.flags == PUBLIC, .name == "getPostEqBandByChannelIndex", .descriptor == "(II)Landroid/media/audiofx/DynamicsProcessing$EqBand;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Config\0", "getPostEqBandByChannelIndex\0", "(II)Landroid/media/audiofx/DynamicsProcessing$EqBand;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPostEqBandByChannelIndex](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#setPostEqBandByChannelIndex(int,%20int,%20android.media.audiofx.DynamicsProcessing.EqBand))
        ///
        /// Required features: "android-media-audiofx-DynamicsProcessing_EqBand"
        #[cfg(any(feature = "all", all(feature = "android-media-audiofx-DynamicsProcessing_EqBand")))]
        pub fn setPostEqBandByChannelIndex<'env>(&'env self, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::audiofx::DynamicsProcessing_EqBand>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Config", java.flags == PUBLIC, .name == "setPostEqBandByChannelIndex", .descriptor == "(IILandroid/media/audiofx/DynamicsProcessing$EqBand;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Config\0", "setPostEqBandByChannelIndex\0", "(IILandroid/media/audiofx/DynamicsProcessing$EqBand;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPostEqBandAllChannelsTo](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#setPostEqBandAllChannelsTo(int,%20android.media.audiofx.DynamicsProcessing.EqBand))
        ///
        /// Required features: "android-media-audiofx-DynamicsProcessing_EqBand"
        #[cfg(any(feature = "all", all(feature = "android-media-audiofx-DynamicsProcessing_EqBand")))]
        pub fn setPostEqBandAllChannelsTo<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::audiofx::DynamicsProcessing_EqBand>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Config", java.flags == PUBLIC, .name == "setPostEqBandAllChannelsTo", .descriptor == "(ILandroid/media/audiofx/DynamicsProcessing$EqBand;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Config\0", "setPostEqBandAllChannelsTo\0", "(ILandroid/media/audiofx/DynamicsProcessing$EqBand;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLimiterByChannelIndex](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#getLimiterByChannelIndex(int))
        ///
        /// Required features: "android-media-audiofx-DynamicsProcessing_Limiter"
        #[cfg(any(feature = "all", all(feature = "android-media-audiofx-DynamicsProcessing_Limiter")))]
        pub fn getLimiterByChannelIndex<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::audiofx::DynamicsProcessing_Limiter>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Config", java.flags == PUBLIC, .name == "getLimiterByChannelIndex", .descriptor == "(I)Landroid/media/audiofx/DynamicsProcessing$Limiter;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Config\0", "getLimiterByChannelIndex\0", "(I)Landroid/media/audiofx/DynamicsProcessing$Limiter;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setLimiterByChannelIndex](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#setLimiterByChannelIndex(int,%20android.media.audiofx.DynamicsProcessing.Limiter))
        ///
        /// Required features: "android-media-audiofx-DynamicsProcessing_Limiter"
        #[cfg(any(feature = "all", all(feature = "android-media-audiofx-DynamicsProcessing_Limiter")))]
        pub fn setLimiterByChannelIndex<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::audiofx::DynamicsProcessing_Limiter>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Config", java.flags == PUBLIC, .name == "setLimiterByChannelIndex", .descriptor == "(ILandroid/media/audiofx/DynamicsProcessing$Limiter;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Config\0", "setLimiterByChannelIndex\0", "(ILandroid/media/audiofx/DynamicsProcessing$Limiter;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setLimiterAllChannelsTo](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.html#setLimiterAllChannelsTo(android.media.audiofx.DynamicsProcessing.Limiter))
        ///
        /// Required features: "android-media-audiofx-DynamicsProcessing_Limiter"
        #[cfg(any(feature = "all", all(feature = "android-media-audiofx-DynamicsProcessing_Limiter")))]
        pub fn setLimiterAllChannelsTo<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::audiofx::DynamicsProcessing_Limiter>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Config", java.flags == PUBLIC, .name == "setLimiterAllChannelsTo", .descriptor == "(Landroid/media/audiofx/DynamicsProcessing$Limiter;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Config\0", "setLimiterAllChannelsTo\0", "(Landroid/media/audiofx/DynamicsProcessing$Limiter;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
