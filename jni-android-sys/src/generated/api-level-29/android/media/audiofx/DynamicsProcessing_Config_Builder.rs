// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-media-audiofx-DynamicsProcessing_Config_Builder"))]
__jni_bindgen! {
    /// public final class [DynamicsProcessing.Config.Builder](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.Builder.html)
    ///
    /// Required feature: android-media-audiofx-DynamicsProcessing_Config_Builder
    public final class DynamicsProcessing_Config_Builder ("android/media/audiofx/DynamicsProcessing$Config$Builder") extends crate::java::lang::Object {

        /// [Builder](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.Builder.html#Builder(int,%20int,%20boolean,%20int,%20boolean,%20int,%20boolean,%20int,%20boolean))
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: bool, arg3: i32, arg4: bool, arg5: i32, arg6: bool, arg7: i32, arg8: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::media::audiofx::DynamicsProcessing_Config_Builder>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Config$Builder", java.flags == PUBLIC, .name == "<init>", .descriptor == "(IIZIZIZIZ)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6), __jni_bindgen::AsJValue::as_jvalue(&arg7), __jni_bindgen::AsJValue::as_jvalue(&arg8)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Config$Builder\0", "<init>\0", "(IIZIZIZIZ)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPreferredFrameDuration](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.Builder.html#setPreferredFrameDuration(float))
        ///
        /// Required features: "android-media-audiofx-DynamicsProcessing_Config_Builder"
        #[cfg(any(feature = "all", all(feature = "android-media-audiofx-DynamicsProcessing_Config_Builder")))]
        pub fn setPreferredFrameDuration<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::audiofx::DynamicsProcessing_Config_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Config$Builder", java.flags == PUBLIC, .name == "setPreferredFrameDuration", .descriptor == "(F)Landroid/media/audiofx/DynamicsProcessing$Config$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Config$Builder\0", "setPreferredFrameDuration\0", "(F)Landroid/media/audiofx/DynamicsProcessing$Config$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setInputGainByChannelIndex](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.Builder.html#setInputGainByChannelIndex(int,%20float))
        ///
        /// Required features: "android-media-audiofx-DynamicsProcessing_Config_Builder"
        #[cfg(any(feature = "all", all(feature = "android-media-audiofx-DynamicsProcessing_Config_Builder")))]
        pub fn setInputGainByChannelIndex<'env>(&'env self, arg0: i32, arg1: f32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::audiofx::DynamicsProcessing_Config_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Config$Builder", java.flags == PUBLIC, .name == "setInputGainByChannelIndex", .descriptor == "(IF)Landroid/media/audiofx/DynamicsProcessing$Config$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Config$Builder\0", "setInputGainByChannelIndex\0", "(IF)Landroid/media/audiofx/DynamicsProcessing$Config$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setInputGainAllChannelsTo](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.Builder.html#setInputGainAllChannelsTo(float))
        ///
        /// Required features: "android-media-audiofx-DynamicsProcessing_Config_Builder"
        #[cfg(any(feature = "all", all(feature = "android-media-audiofx-DynamicsProcessing_Config_Builder")))]
        pub fn setInputGainAllChannelsTo<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::audiofx::DynamicsProcessing_Config_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Config$Builder", java.flags == PUBLIC, .name == "setInputGainAllChannelsTo", .descriptor == "(F)Landroid/media/audiofx/DynamicsProcessing$Config$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Config$Builder\0", "setInputGainAllChannelsTo\0", "(F)Landroid/media/audiofx/DynamicsProcessing$Config$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setChannelTo](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.Builder.html#setChannelTo(int,%20android.media.audiofx.DynamicsProcessing.Channel))
        ///
        /// Required features: "android-media-audiofx-DynamicsProcessing_Channel", "android-media-audiofx-DynamicsProcessing_Config_Builder"
        #[cfg(any(feature = "all", all(feature = "android-media-audiofx-DynamicsProcessing_Channel", feature = "android-media-audiofx-DynamicsProcessing_Config_Builder")))]
        pub fn setChannelTo<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::audiofx::DynamicsProcessing_Channel>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::audiofx::DynamicsProcessing_Config_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Config$Builder", java.flags == PUBLIC, .name == "setChannelTo", .descriptor == "(ILandroid/media/audiofx/DynamicsProcessing$Channel;)Landroid/media/audiofx/DynamicsProcessing$Config$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Config$Builder\0", "setChannelTo\0", "(ILandroid/media/audiofx/DynamicsProcessing$Channel;)Landroid/media/audiofx/DynamicsProcessing$Config$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAllChannelsTo](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.Builder.html#setAllChannelsTo(android.media.audiofx.DynamicsProcessing.Channel))
        ///
        /// Required features: "android-media-audiofx-DynamicsProcessing_Channel", "android-media-audiofx-DynamicsProcessing_Config_Builder"
        #[cfg(any(feature = "all", all(feature = "android-media-audiofx-DynamicsProcessing_Channel", feature = "android-media-audiofx-DynamicsProcessing_Config_Builder")))]
        pub fn setAllChannelsTo<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::audiofx::DynamicsProcessing_Channel>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::audiofx::DynamicsProcessing_Config_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Config$Builder", java.flags == PUBLIC, .name == "setAllChannelsTo", .descriptor == "(Landroid/media/audiofx/DynamicsProcessing$Channel;)Landroid/media/audiofx/DynamicsProcessing$Config$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Config$Builder\0", "setAllChannelsTo\0", "(Landroid/media/audiofx/DynamicsProcessing$Channel;)Landroid/media/audiofx/DynamicsProcessing$Config$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPreEqByChannelIndex](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.Builder.html#setPreEqByChannelIndex(int,%20android.media.audiofx.DynamicsProcessing.Eq))
        ///
        /// Required features: "android-media-audiofx-DynamicsProcessing_Config_Builder", "android-media-audiofx-DynamicsProcessing_Eq"
        #[cfg(any(feature = "all", all(feature = "android-media-audiofx-DynamicsProcessing_Config_Builder", feature = "android-media-audiofx-DynamicsProcessing_Eq")))]
        pub fn setPreEqByChannelIndex<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::audiofx::DynamicsProcessing_Eq>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::audiofx::DynamicsProcessing_Config_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Config$Builder", java.flags == PUBLIC, .name == "setPreEqByChannelIndex", .descriptor == "(ILandroid/media/audiofx/DynamicsProcessing$Eq;)Landroid/media/audiofx/DynamicsProcessing$Config$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Config$Builder\0", "setPreEqByChannelIndex\0", "(ILandroid/media/audiofx/DynamicsProcessing$Eq;)Landroid/media/audiofx/DynamicsProcessing$Config$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPreEqAllChannelsTo](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.Builder.html#setPreEqAllChannelsTo(android.media.audiofx.DynamicsProcessing.Eq))
        ///
        /// Required features: "android-media-audiofx-DynamicsProcessing_Config_Builder", "android-media-audiofx-DynamicsProcessing_Eq"
        #[cfg(any(feature = "all", all(feature = "android-media-audiofx-DynamicsProcessing_Config_Builder", feature = "android-media-audiofx-DynamicsProcessing_Eq")))]
        pub fn setPreEqAllChannelsTo<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::audiofx::DynamicsProcessing_Eq>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::audiofx::DynamicsProcessing_Config_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Config$Builder", java.flags == PUBLIC, .name == "setPreEqAllChannelsTo", .descriptor == "(Landroid/media/audiofx/DynamicsProcessing$Eq;)Landroid/media/audiofx/DynamicsProcessing$Config$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Config$Builder\0", "setPreEqAllChannelsTo\0", "(Landroid/media/audiofx/DynamicsProcessing$Eq;)Landroid/media/audiofx/DynamicsProcessing$Config$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setMbcByChannelIndex](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.Builder.html#setMbcByChannelIndex(int,%20android.media.audiofx.DynamicsProcessing.Mbc))
        ///
        /// Required features: "android-media-audiofx-DynamicsProcessing_Config_Builder", "android-media-audiofx-DynamicsProcessing_Mbc"
        #[cfg(any(feature = "all", all(feature = "android-media-audiofx-DynamicsProcessing_Config_Builder", feature = "android-media-audiofx-DynamicsProcessing_Mbc")))]
        pub fn setMbcByChannelIndex<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::audiofx::DynamicsProcessing_Mbc>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::audiofx::DynamicsProcessing_Config_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Config$Builder", java.flags == PUBLIC, .name == "setMbcByChannelIndex", .descriptor == "(ILandroid/media/audiofx/DynamicsProcessing$Mbc;)Landroid/media/audiofx/DynamicsProcessing$Config$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Config$Builder\0", "setMbcByChannelIndex\0", "(ILandroid/media/audiofx/DynamicsProcessing$Mbc;)Landroid/media/audiofx/DynamicsProcessing$Config$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setMbcAllChannelsTo](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.Builder.html#setMbcAllChannelsTo(android.media.audiofx.DynamicsProcessing.Mbc))
        ///
        /// Required features: "android-media-audiofx-DynamicsProcessing_Config_Builder", "android-media-audiofx-DynamicsProcessing_Mbc"
        #[cfg(any(feature = "all", all(feature = "android-media-audiofx-DynamicsProcessing_Config_Builder", feature = "android-media-audiofx-DynamicsProcessing_Mbc")))]
        pub fn setMbcAllChannelsTo<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::audiofx::DynamicsProcessing_Mbc>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::audiofx::DynamicsProcessing_Config_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Config$Builder", java.flags == PUBLIC, .name == "setMbcAllChannelsTo", .descriptor == "(Landroid/media/audiofx/DynamicsProcessing$Mbc;)Landroid/media/audiofx/DynamicsProcessing$Config$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Config$Builder\0", "setMbcAllChannelsTo\0", "(Landroid/media/audiofx/DynamicsProcessing$Mbc;)Landroid/media/audiofx/DynamicsProcessing$Config$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPostEqByChannelIndex](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.Builder.html#setPostEqByChannelIndex(int,%20android.media.audiofx.DynamicsProcessing.Eq))
        ///
        /// Required features: "android-media-audiofx-DynamicsProcessing_Config_Builder", "android-media-audiofx-DynamicsProcessing_Eq"
        #[cfg(any(feature = "all", all(feature = "android-media-audiofx-DynamicsProcessing_Config_Builder", feature = "android-media-audiofx-DynamicsProcessing_Eq")))]
        pub fn setPostEqByChannelIndex<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::audiofx::DynamicsProcessing_Eq>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::audiofx::DynamicsProcessing_Config_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Config$Builder", java.flags == PUBLIC, .name == "setPostEqByChannelIndex", .descriptor == "(ILandroid/media/audiofx/DynamicsProcessing$Eq;)Landroid/media/audiofx/DynamicsProcessing$Config$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Config$Builder\0", "setPostEqByChannelIndex\0", "(ILandroid/media/audiofx/DynamicsProcessing$Eq;)Landroid/media/audiofx/DynamicsProcessing$Config$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPostEqAllChannelsTo](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.Builder.html#setPostEqAllChannelsTo(android.media.audiofx.DynamicsProcessing.Eq))
        ///
        /// Required features: "android-media-audiofx-DynamicsProcessing_Config_Builder", "android-media-audiofx-DynamicsProcessing_Eq"
        #[cfg(any(feature = "all", all(feature = "android-media-audiofx-DynamicsProcessing_Config_Builder", feature = "android-media-audiofx-DynamicsProcessing_Eq")))]
        pub fn setPostEqAllChannelsTo<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::audiofx::DynamicsProcessing_Eq>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::audiofx::DynamicsProcessing_Config_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Config$Builder", java.flags == PUBLIC, .name == "setPostEqAllChannelsTo", .descriptor == "(Landroid/media/audiofx/DynamicsProcessing$Eq;)Landroid/media/audiofx/DynamicsProcessing$Config$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Config$Builder\0", "setPostEqAllChannelsTo\0", "(Landroid/media/audiofx/DynamicsProcessing$Eq;)Landroid/media/audiofx/DynamicsProcessing$Config$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setLimiterByChannelIndex](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.Builder.html#setLimiterByChannelIndex(int,%20android.media.audiofx.DynamicsProcessing.Limiter))
        ///
        /// Required features: "android-media-audiofx-DynamicsProcessing_Config_Builder", "android-media-audiofx-DynamicsProcessing_Limiter"
        #[cfg(any(feature = "all", all(feature = "android-media-audiofx-DynamicsProcessing_Config_Builder", feature = "android-media-audiofx-DynamicsProcessing_Limiter")))]
        pub fn setLimiterByChannelIndex<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::audiofx::DynamicsProcessing_Limiter>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::audiofx::DynamicsProcessing_Config_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Config$Builder", java.flags == PUBLIC, .name == "setLimiterByChannelIndex", .descriptor == "(ILandroid/media/audiofx/DynamicsProcessing$Limiter;)Landroid/media/audiofx/DynamicsProcessing$Config$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Config$Builder\0", "setLimiterByChannelIndex\0", "(ILandroid/media/audiofx/DynamicsProcessing$Limiter;)Landroid/media/audiofx/DynamicsProcessing$Config$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setLimiterAllChannelsTo](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.Builder.html#setLimiterAllChannelsTo(android.media.audiofx.DynamicsProcessing.Limiter))
        ///
        /// Required features: "android-media-audiofx-DynamicsProcessing_Config_Builder", "android-media-audiofx-DynamicsProcessing_Limiter"
        #[cfg(any(feature = "all", all(feature = "android-media-audiofx-DynamicsProcessing_Config_Builder", feature = "android-media-audiofx-DynamicsProcessing_Limiter")))]
        pub fn setLimiterAllChannelsTo<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::audiofx::DynamicsProcessing_Limiter>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::audiofx::DynamicsProcessing_Config_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Config$Builder", java.flags == PUBLIC, .name == "setLimiterAllChannelsTo", .descriptor == "(Landroid/media/audiofx/DynamicsProcessing$Limiter;)Landroid/media/audiofx/DynamicsProcessing$Config$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Config$Builder\0", "setLimiterAllChannelsTo\0", "(Landroid/media/audiofx/DynamicsProcessing$Limiter;)Landroid/media/audiofx/DynamicsProcessing$Config$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [build](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Config.Builder.html#build())
        ///
        /// Required features: "android-media-audiofx-DynamicsProcessing_Config"
        #[cfg(any(feature = "all", all(feature = "android-media-audiofx-DynamicsProcessing_Config")))]
        pub fn build<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::audiofx::DynamicsProcessing_Config>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Config$Builder", java.flags == PUBLIC, .name == "build", .descriptor == "()Landroid/media/audiofx/DynamicsProcessing$Config;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Config$Builder\0", "build\0", "()Landroid/media/audiofx/DynamicsProcessing$Config;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
