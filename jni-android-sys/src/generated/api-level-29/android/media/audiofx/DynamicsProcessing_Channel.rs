// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-media-audiofx-DynamicsProcessing_Channel"))]
__jni_bindgen! {
    /// public final class [DynamicsProcessing.Channel](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Channel.html)
    ///
    /// Required feature: android-media-audiofx-DynamicsProcessing_Channel
    public final class DynamicsProcessing_Channel ("android/media/audiofx/DynamicsProcessing$Channel") extends crate::java::lang::Object {

        /// [Channel](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Channel.html#Channel(float,%20boolean,%20int,%20boolean,%20int,%20boolean,%20int,%20boolean))
        pub fn new_float_boolean_int_boolean_int_boolean_int_boolean<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f32, arg1: bool, arg2: i32, arg3: bool, arg4: i32, arg5: bool, arg6: i32, arg7: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::media::audiofx::DynamicsProcessing_Channel>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Channel", java.flags == PUBLIC, .name == "<init>", .descriptor == "(FZIZIZIZ)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6), __jni_bindgen::AsJValue::as_jvalue(&arg7)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Channel\0", "<init>\0", "(FZIZIZIZ)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [Channel](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Channel.html#Channel(android.media.audiofx.DynamicsProcessing.Channel))
        ///
        /// Required features: "android-media-audiofx-DynamicsProcessing_Channel"
        #[cfg(any(feature = "all", all(feature = "android-media-audiofx-DynamicsProcessing_Channel")))]
        pub fn new_Channel<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::audiofx::DynamicsProcessing_Channel>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::media::audiofx::DynamicsProcessing_Channel>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Channel", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/media/audiofx/DynamicsProcessing$Channel;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Channel\0", "<init>\0", "(Landroid/media/audiofx/DynamicsProcessing$Channel;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Channel.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Channel", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Channel\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInputGain](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Channel.html#getInputGain())
        pub fn getInputGain<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Channel", java.flags == PUBLIC, .name == "getInputGain", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Channel\0", "getInputGain\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setInputGain](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Channel.html#setInputGain(float))
        pub fn setInputGain<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Channel", java.flags == PUBLIC, .name == "setInputGain", .descriptor == "(F)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Channel\0", "setInputGain\0", "(F)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPreEq](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Channel.html#getPreEq())
        ///
        /// Required features: "android-media-audiofx-DynamicsProcessing_Eq"
        #[cfg(any(feature = "all", all(feature = "android-media-audiofx-DynamicsProcessing_Eq")))]
        pub fn getPreEq<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::audiofx::DynamicsProcessing_Eq>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Channel", java.flags == PUBLIC, .name == "getPreEq", .descriptor == "()Landroid/media/audiofx/DynamicsProcessing$Eq;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Channel\0", "getPreEq\0", "()Landroid/media/audiofx/DynamicsProcessing$Eq;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPreEq](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Channel.html#setPreEq(android.media.audiofx.DynamicsProcessing.Eq))
        ///
        /// Required features: "android-media-audiofx-DynamicsProcessing_Eq"
        #[cfg(any(feature = "all", all(feature = "android-media-audiofx-DynamicsProcessing_Eq")))]
        pub fn setPreEq<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::audiofx::DynamicsProcessing_Eq>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Channel", java.flags == PUBLIC, .name == "setPreEq", .descriptor == "(Landroid/media/audiofx/DynamicsProcessing$Eq;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Channel\0", "setPreEq\0", "(Landroid/media/audiofx/DynamicsProcessing$Eq;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPreEqBand](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Channel.html#getPreEqBand(int))
        ///
        /// Required features: "android-media-audiofx-DynamicsProcessing_EqBand"
        #[cfg(any(feature = "all", all(feature = "android-media-audiofx-DynamicsProcessing_EqBand")))]
        pub fn getPreEqBand<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::audiofx::DynamicsProcessing_EqBand>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Channel", java.flags == PUBLIC, .name == "getPreEqBand", .descriptor == "(I)Landroid/media/audiofx/DynamicsProcessing$EqBand;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Channel\0", "getPreEqBand\0", "(I)Landroid/media/audiofx/DynamicsProcessing$EqBand;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPreEqBand](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Channel.html#setPreEqBand(int,%20android.media.audiofx.DynamicsProcessing.EqBand))
        ///
        /// Required features: "android-media-audiofx-DynamicsProcessing_EqBand"
        #[cfg(any(feature = "all", all(feature = "android-media-audiofx-DynamicsProcessing_EqBand")))]
        pub fn setPreEqBand<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::audiofx::DynamicsProcessing_EqBand>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Channel", java.flags == PUBLIC, .name == "setPreEqBand", .descriptor == "(ILandroid/media/audiofx/DynamicsProcessing$EqBand;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Channel\0", "setPreEqBand\0", "(ILandroid/media/audiofx/DynamicsProcessing$EqBand;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMbc](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Channel.html#getMbc())
        ///
        /// Required features: "android-media-audiofx-DynamicsProcessing_Mbc"
        #[cfg(any(feature = "all", all(feature = "android-media-audiofx-DynamicsProcessing_Mbc")))]
        pub fn getMbc<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::audiofx::DynamicsProcessing_Mbc>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Channel", java.flags == PUBLIC, .name == "getMbc", .descriptor == "()Landroid/media/audiofx/DynamicsProcessing$Mbc;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Channel\0", "getMbc\0", "()Landroid/media/audiofx/DynamicsProcessing$Mbc;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setMbc](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Channel.html#setMbc(android.media.audiofx.DynamicsProcessing.Mbc))
        ///
        /// Required features: "android-media-audiofx-DynamicsProcessing_Mbc"
        #[cfg(any(feature = "all", all(feature = "android-media-audiofx-DynamicsProcessing_Mbc")))]
        pub fn setMbc<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::audiofx::DynamicsProcessing_Mbc>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Channel", java.flags == PUBLIC, .name == "setMbc", .descriptor == "(Landroid/media/audiofx/DynamicsProcessing$Mbc;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Channel\0", "setMbc\0", "(Landroid/media/audiofx/DynamicsProcessing$Mbc;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMbcBand](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Channel.html#getMbcBand(int))
        ///
        /// Required features: "android-media-audiofx-DynamicsProcessing_MbcBand"
        #[cfg(any(feature = "all", all(feature = "android-media-audiofx-DynamicsProcessing_MbcBand")))]
        pub fn getMbcBand<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::audiofx::DynamicsProcessing_MbcBand>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Channel", java.flags == PUBLIC, .name == "getMbcBand", .descriptor == "(I)Landroid/media/audiofx/DynamicsProcessing$MbcBand;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Channel\0", "getMbcBand\0", "(I)Landroid/media/audiofx/DynamicsProcessing$MbcBand;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setMbcBand](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Channel.html#setMbcBand(int,%20android.media.audiofx.DynamicsProcessing.MbcBand))
        ///
        /// Required features: "android-media-audiofx-DynamicsProcessing_MbcBand"
        #[cfg(any(feature = "all", all(feature = "android-media-audiofx-DynamicsProcessing_MbcBand")))]
        pub fn setMbcBand<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::audiofx::DynamicsProcessing_MbcBand>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Channel", java.flags == PUBLIC, .name == "setMbcBand", .descriptor == "(ILandroid/media/audiofx/DynamicsProcessing$MbcBand;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Channel\0", "setMbcBand\0", "(ILandroid/media/audiofx/DynamicsProcessing$MbcBand;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPostEq](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Channel.html#getPostEq())
        ///
        /// Required features: "android-media-audiofx-DynamicsProcessing_Eq"
        #[cfg(any(feature = "all", all(feature = "android-media-audiofx-DynamicsProcessing_Eq")))]
        pub fn getPostEq<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::audiofx::DynamicsProcessing_Eq>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Channel", java.flags == PUBLIC, .name == "getPostEq", .descriptor == "()Landroid/media/audiofx/DynamicsProcessing$Eq;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Channel\0", "getPostEq\0", "()Landroid/media/audiofx/DynamicsProcessing$Eq;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPostEq](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Channel.html#setPostEq(android.media.audiofx.DynamicsProcessing.Eq))
        ///
        /// Required features: "android-media-audiofx-DynamicsProcessing_Eq"
        #[cfg(any(feature = "all", all(feature = "android-media-audiofx-DynamicsProcessing_Eq")))]
        pub fn setPostEq<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::audiofx::DynamicsProcessing_Eq>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Channel", java.flags == PUBLIC, .name == "setPostEq", .descriptor == "(Landroid/media/audiofx/DynamicsProcessing$Eq;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Channel\0", "setPostEq\0", "(Landroid/media/audiofx/DynamicsProcessing$Eq;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPostEqBand](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Channel.html#getPostEqBand(int))
        ///
        /// Required features: "android-media-audiofx-DynamicsProcessing_EqBand"
        #[cfg(any(feature = "all", all(feature = "android-media-audiofx-DynamicsProcessing_EqBand")))]
        pub fn getPostEqBand<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::audiofx::DynamicsProcessing_EqBand>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Channel", java.flags == PUBLIC, .name == "getPostEqBand", .descriptor == "(I)Landroid/media/audiofx/DynamicsProcessing$EqBand;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Channel\0", "getPostEqBand\0", "(I)Landroid/media/audiofx/DynamicsProcessing$EqBand;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPostEqBand](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Channel.html#setPostEqBand(int,%20android.media.audiofx.DynamicsProcessing.EqBand))
        ///
        /// Required features: "android-media-audiofx-DynamicsProcessing_EqBand"
        #[cfg(any(feature = "all", all(feature = "android-media-audiofx-DynamicsProcessing_EqBand")))]
        pub fn setPostEqBand<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::audiofx::DynamicsProcessing_EqBand>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Channel", java.flags == PUBLIC, .name == "setPostEqBand", .descriptor == "(ILandroid/media/audiofx/DynamicsProcessing$EqBand;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Channel\0", "setPostEqBand\0", "(ILandroid/media/audiofx/DynamicsProcessing$EqBand;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLimiter](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Channel.html#getLimiter())
        ///
        /// Required features: "android-media-audiofx-DynamicsProcessing_Limiter"
        #[cfg(any(feature = "all", all(feature = "android-media-audiofx-DynamicsProcessing_Limiter")))]
        pub fn getLimiter<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::audiofx::DynamicsProcessing_Limiter>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Channel", java.flags == PUBLIC, .name == "getLimiter", .descriptor == "()Landroid/media/audiofx/DynamicsProcessing$Limiter;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Channel\0", "getLimiter\0", "()Landroid/media/audiofx/DynamicsProcessing$Limiter;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setLimiter](https://developer.android.com/reference/android/media/audiofx/DynamicsProcessing.Channel.html#setLimiter(android.media.audiofx.DynamicsProcessing.Limiter))
        ///
        /// Required features: "android-media-audiofx-DynamicsProcessing_Limiter"
        #[cfg(any(feature = "all", all(feature = "android-media-audiofx-DynamicsProcessing_Limiter")))]
        pub fn setLimiter<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::audiofx::DynamicsProcessing_Limiter>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/audiofx/DynamicsProcessing$Channel", java.flags == PUBLIC, .name == "setLimiter", .descriptor == "(Landroid/media/audiofx/DynamicsProcessing$Limiter;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/audiofx/DynamicsProcessing$Channel\0", "setLimiter\0", "(Landroid/media/audiofx/DynamicsProcessing$Limiter;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
