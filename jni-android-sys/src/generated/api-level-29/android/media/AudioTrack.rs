// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-media-AudioTrack"))]
__jni_bindgen! {
    /// public class [AudioTrack](https://developer.android.com/reference/android/media/AudioTrack.html)
    ///
    /// Required feature: android-media-AudioTrack
    public class AudioTrack ("android/media/AudioTrack") extends crate::java::lang::Object, implements crate::android::media::AudioRouting, crate::android::media::VolumeAutomation {

        /// [AudioTrack](https://developer.android.com/reference/android/media/AudioTrack.html#AudioTrack(int,%20int,%20int,%20int,%20int,%20int))
        #[deprecated] pub fn new_int_int_int_int_int_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32, arg3: i32, arg4: i32, arg5: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::media::AudioTrack>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC, .name == "<init>", .descriptor == "(IIIIII)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioTrack\0", "<init>\0", "(IIIIII)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [AudioTrack](https://developer.android.com/reference/android/media/AudioTrack.html#AudioTrack(int,%20int,%20int,%20int,%20int,%20int,%20int))
        #[deprecated] pub fn new_int_int_int_int_int_int_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32, arg3: i32, arg4: i32, arg5: i32, arg6: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::media::AudioTrack>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC, .name == "<init>", .descriptor == "(IIIIIII)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioTrack\0", "<init>\0", "(IIIIIII)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [AudioTrack](https://developer.android.com/reference/android/media/AudioTrack.html#AudioTrack(android.media.AudioAttributes,%20android.media.AudioFormat,%20int,%20int,%20int))
        ///
        /// Required features: "android-media-AudioAttributes", "android-media-AudioFormat"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioAttributes", feature = "android-media-AudioFormat")))]
        pub fn new_AudioAttributes_AudioFormat_int_int_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::AudioAttributes>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::AudioFormat>>, arg2: i32, arg3: i32, arg4: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::media::AudioTrack>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/media/AudioAttributes;Landroid/media/AudioFormat;III)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioTrack\0", "<init>\0", "(Landroid/media/AudioAttributes;Landroid/media/AudioFormat;III)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOffloadDelayPadding](https://developer.android.com/reference/android/media/AudioTrack.html#setOffloadDelayPadding(int,%20int))
        pub fn setOffloadDelayPadding<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC, .name == "setOffloadDelayPadding", .descriptor == "(II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioTrack\0", "setOffloadDelayPadding\0", "(II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getOffloadDelay](https://developer.android.com/reference/android/media/AudioTrack.html#getOffloadDelay())
        pub fn getOffloadDelay<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC, .name == "getOffloadDelay", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioTrack\0", "getOffloadDelay\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getOffloadPadding](https://developer.android.com/reference/android/media/AudioTrack.html#getOffloadPadding())
        pub fn getOffloadPadding<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC, .name == "getOffloadPadding", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioTrack\0", "getOffloadPadding\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOffloadEndOfStream](https://developer.android.com/reference/android/media/AudioTrack.html#setOffloadEndOfStream())
        pub fn setOffloadEndOfStream<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC, .name == "setOffloadEndOfStream", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioTrack\0", "setOffloadEndOfStream\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isOffloadedPlayback](https://developer.android.com/reference/android/media/AudioTrack.html#isOffloadedPlayback())
        pub fn isOffloadedPlayback<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC, .name == "isOffloadedPlayback", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioTrack\0", "isOffloadedPlayback\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isDirectPlaybackSupported](https://developer.android.com/reference/android/media/AudioTrack.html#isDirectPlaybackSupported(android.media.AudioFormat,%20android.media.AudioAttributes))
        ///
        /// Required features: "android-media-AudioAttributes", "android-media-AudioFormat"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioAttributes", feature = "android-media-AudioFormat")))]
        pub fn isDirectPlaybackSupported<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::AudioFormat>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::AudioAttributes>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC | STATIC, .name == "isDirectPlaybackSupported", .descriptor == "(Landroid/media/AudioFormat;Landroid/media/AudioAttributes;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/media/AudioTrack\0", "isDirectPlaybackSupported\0", "(Landroid/media/AudioFormat;Landroid/media/AudioAttributes;)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [release](https://developer.android.com/reference/android/media/AudioTrack.html#release())
        pub fn release<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC, .name == "release", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioTrack\0", "release\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [finalize](https://developer.android.com/reference/android/media/AudioTrack.html#finalize())
        // fn finalize<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/media/AudioTrack", java.flags == PROTECTED, .name == "finalize", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioTrack\0", "finalize\0", "()V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getMinVolume](https://developer.android.com/reference/android/media/AudioTrack.html#getMinVolume())
        pub fn getMinVolume<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC | STATIC, .name == "getMinVolume", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/media/AudioTrack\0", "getMinVolume\0", "()F\0");
                __jni_env.call_static_float_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMaxVolume](https://developer.android.com/reference/android/media/AudioTrack.html#getMaxVolume())
        pub fn getMaxVolume<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC | STATIC, .name == "getMaxVolume", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/media/AudioTrack\0", "getMaxVolume\0", "()F\0");
                __jni_env.call_static_float_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSampleRate](https://developer.android.com/reference/android/media/AudioTrack.html#getSampleRate())
        pub fn getSampleRate<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC, .name == "getSampleRate", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioTrack\0", "getSampleRate\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPlaybackRate](https://developer.android.com/reference/android/media/AudioTrack.html#getPlaybackRate())
        pub fn getPlaybackRate<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC, .name == "getPlaybackRate", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioTrack\0", "getPlaybackRate\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPlaybackParams](https://developer.android.com/reference/android/media/AudioTrack.html#getPlaybackParams())
        ///
        /// Required features: "android-media-PlaybackParams"
        #[cfg(any(feature = "all", all(feature = "android-media-PlaybackParams")))]
        pub fn getPlaybackParams<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::PlaybackParams>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC, .name == "getPlaybackParams", .descriptor == "()Landroid/media/PlaybackParams;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioTrack\0", "getPlaybackParams\0", "()Landroid/media/PlaybackParams;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAudioAttributes](https://developer.android.com/reference/android/media/AudioTrack.html#getAudioAttributes())
        ///
        /// Required features: "android-media-AudioAttributes"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioAttributes")))]
        pub fn getAudioAttributes<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::AudioAttributes>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC, .name == "getAudioAttributes", .descriptor == "()Landroid/media/AudioAttributes;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioTrack\0", "getAudioAttributes\0", "()Landroid/media/AudioAttributes;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAudioFormat](https://developer.android.com/reference/android/media/AudioTrack.html#getAudioFormat())
        pub fn getAudioFormat<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC, .name == "getAudioFormat", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioTrack\0", "getAudioFormat\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getStreamType](https://developer.android.com/reference/android/media/AudioTrack.html#getStreamType())
        pub fn getStreamType<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC, .name == "getStreamType", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioTrack\0", "getStreamType\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getChannelConfiguration](https://developer.android.com/reference/android/media/AudioTrack.html#getChannelConfiguration())
        pub fn getChannelConfiguration<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC, .name == "getChannelConfiguration", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioTrack\0", "getChannelConfiguration\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFormat](https://developer.android.com/reference/android/media/AudioTrack.html#getFormat())
        ///
        /// Required features: "android-media-AudioFormat"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioFormat")))]
        pub fn getFormat<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::AudioFormat>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC, .name == "getFormat", .descriptor == "()Landroid/media/AudioFormat;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioTrack\0", "getFormat\0", "()Landroid/media/AudioFormat;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getChannelCount](https://developer.android.com/reference/android/media/AudioTrack.html#getChannelCount())
        pub fn getChannelCount<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC, .name == "getChannelCount", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioTrack\0", "getChannelCount\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getState](https://developer.android.com/reference/android/media/AudioTrack.html#getState())
        pub fn getState<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC, .name == "getState", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioTrack\0", "getState\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPlayState](https://developer.android.com/reference/android/media/AudioTrack.html#getPlayState())
        pub fn getPlayState<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC, .name == "getPlayState", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioTrack\0", "getPlayState\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getBufferSizeInFrames](https://developer.android.com/reference/android/media/AudioTrack.html#getBufferSizeInFrames())
        pub fn getBufferSizeInFrames<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC, .name == "getBufferSizeInFrames", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioTrack\0", "getBufferSizeInFrames\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setBufferSizeInFrames](https://developer.android.com/reference/android/media/AudioTrack.html#setBufferSizeInFrames(int))
        pub fn setBufferSizeInFrames<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC, .name == "setBufferSizeInFrames", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioTrack\0", "setBufferSizeInFrames\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getBufferCapacityInFrames](https://developer.android.com/reference/android/media/AudioTrack.html#getBufferCapacityInFrames())
        pub fn getBufferCapacityInFrames<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC, .name == "getBufferCapacityInFrames", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioTrack\0", "getBufferCapacityInFrames\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [getNativeFrameCount](https://developer.android.com/reference/android/media/AudioTrack.html#getNativeFrameCount())
        // #[deprecated] fn getNativeFrameCount<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/media/AudioTrack", java.flags == PROTECTED, .name == "getNativeFrameCount", .descriptor == "()I"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioTrack\0", "getNativeFrameCount\0", "()I\0");
        //         __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getNotificationMarkerPosition](https://developer.android.com/reference/android/media/AudioTrack.html#getNotificationMarkerPosition())
        pub fn getNotificationMarkerPosition<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC, .name == "getNotificationMarkerPosition", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioTrack\0", "getNotificationMarkerPosition\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPositionNotificationPeriod](https://developer.android.com/reference/android/media/AudioTrack.html#getPositionNotificationPeriod())
        pub fn getPositionNotificationPeriod<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC, .name == "getPositionNotificationPeriod", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioTrack\0", "getPositionNotificationPeriod\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPlaybackHeadPosition](https://developer.android.com/reference/android/media/AudioTrack.html#getPlaybackHeadPosition())
        pub fn getPlaybackHeadPosition<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC, .name == "getPlaybackHeadPosition", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioTrack\0", "getPlaybackHeadPosition\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getUnderrunCount](https://developer.android.com/reference/android/media/AudioTrack.html#getUnderrunCount())
        pub fn getUnderrunCount<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC, .name == "getUnderrunCount", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioTrack\0", "getUnderrunCount\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPerformanceMode](https://developer.android.com/reference/android/media/AudioTrack.html#getPerformanceMode())
        pub fn getPerformanceMode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC, .name == "getPerformanceMode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioTrack\0", "getPerformanceMode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNativeOutputSampleRate](https://developer.android.com/reference/android/media/AudioTrack.html#getNativeOutputSampleRate(int))
        pub fn getNativeOutputSampleRate<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC | STATIC, .name == "getNativeOutputSampleRate", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/media/AudioTrack\0", "getNativeOutputSampleRate\0", "(I)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMinBufferSize](https://developer.android.com/reference/android/media/AudioTrack.html#getMinBufferSize(int,%20int,%20int))
        pub fn getMinBufferSize<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC | STATIC, .name == "getMinBufferSize", .descriptor == "(III)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/media/AudioTrack\0", "getMinBufferSize\0", "(III)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAudioSessionId](https://developer.android.com/reference/android/media/AudioTrack.html#getAudioSessionId())
        pub fn getAudioSessionId<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC, .name == "getAudioSessionId", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioTrack\0", "getAudioSessionId\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTimestamp](https://developer.android.com/reference/android/media/AudioTrack.html#getTimestamp(android.media.AudioTimestamp))
        ///
        /// Required features: "android-media-AudioTimestamp"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioTimestamp")))]
        pub fn getTimestamp<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::AudioTimestamp>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC, .name == "getTimestamp", .descriptor == "(Landroid/media/AudioTimestamp;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioTrack\0", "getTimestamp\0", "(Landroid/media/AudioTimestamp;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMetrics](https://developer.android.com/reference/android/media/AudioTrack.html#getMetrics())
        ///
        /// Required features: "android-os-PersistableBundle"
        #[cfg(any(feature = "all", all(feature = "android-os-PersistableBundle")))]
        pub fn getMetrics<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::PersistableBundle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC, .name == "getMetrics", .descriptor == "()Landroid/os/PersistableBundle;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioTrack\0", "getMetrics\0", "()Landroid/os/PersistableBundle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPlaybackPositionUpdateListener](https://developer.android.com/reference/android/media/AudioTrack.html#setPlaybackPositionUpdateListener(android.media.AudioTrack.OnPlaybackPositionUpdateListener))
        ///
        /// Required features: "android-media-AudioTrack_OnPlaybackPositionUpdateListener"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioTrack_OnPlaybackPositionUpdateListener")))]
        pub fn setPlaybackPositionUpdateListener_OnPlaybackPositionUpdateListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::AudioTrack_OnPlaybackPositionUpdateListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC, .name == "setPlaybackPositionUpdateListener", .descriptor == "(Landroid/media/AudioTrack$OnPlaybackPositionUpdateListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioTrack\0", "setPlaybackPositionUpdateListener\0", "(Landroid/media/AudioTrack$OnPlaybackPositionUpdateListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPlaybackPositionUpdateListener](https://developer.android.com/reference/android/media/AudioTrack.html#setPlaybackPositionUpdateListener(android.media.AudioTrack.OnPlaybackPositionUpdateListener,%20android.os.Handler))
        ///
        /// Required features: "android-media-AudioTrack_OnPlaybackPositionUpdateListener", "android-os-Handler"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioTrack_OnPlaybackPositionUpdateListener", feature = "android-os-Handler")))]
        pub fn setPlaybackPositionUpdateListener_OnPlaybackPositionUpdateListener_Handler<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::AudioTrack_OnPlaybackPositionUpdateListener>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC, .name == "setPlaybackPositionUpdateListener", .descriptor == "(Landroid/media/AudioTrack$OnPlaybackPositionUpdateListener;Landroid/os/Handler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioTrack\0", "setPlaybackPositionUpdateListener\0", "(Landroid/media/AudioTrack$OnPlaybackPositionUpdateListener;Landroid/os/Handler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setStereoVolume](https://developer.android.com/reference/android/media/AudioTrack.html#setStereoVolume(float,%20float))
        #[deprecated] pub fn setStereoVolume<'env>(&'env self, arg0: f32, arg1: f32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC, .name == "setStereoVolume", .descriptor == "(FF)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioTrack\0", "setStereoVolume\0", "(FF)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setVolume](https://developer.android.com/reference/android/media/AudioTrack.html#setVolume(float))
        pub fn setVolume<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC, .name == "setVolume", .descriptor == "(F)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioTrack\0", "setVolume\0", "(F)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createVolumeShaper](https://developer.android.com/reference/android/media/AudioTrack.html#createVolumeShaper(android.media.VolumeShaper.Configuration))
        ///
        /// Required features: "android-media-VolumeShaper", "android-media-VolumeShaper_Configuration"
        #[cfg(any(feature = "all", all(feature = "android-media-VolumeShaper", feature = "android-media-VolumeShaper_Configuration")))]
        pub fn createVolumeShaper<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::VolumeShaper_Configuration>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::VolumeShaper>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC, .name == "createVolumeShaper", .descriptor == "(Landroid/media/VolumeShaper$Configuration;)Landroid/media/VolumeShaper;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioTrack\0", "createVolumeShaper\0", "(Landroid/media/VolumeShaper$Configuration;)Landroid/media/VolumeShaper;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPlaybackRate](https://developer.android.com/reference/android/media/AudioTrack.html#setPlaybackRate(int))
        pub fn setPlaybackRate<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC, .name == "setPlaybackRate", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioTrack\0", "setPlaybackRate\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPlaybackParams](https://developer.android.com/reference/android/media/AudioTrack.html#setPlaybackParams(android.media.PlaybackParams))
        ///
        /// Required features: "android-media-PlaybackParams"
        #[cfg(any(feature = "all", all(feature = "android-media-PlaybackParams")))]
        pub fn setPlaybackParams<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::PlaybackParams>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC, .name == "setPlaybackParams", .descriptor == "(Landroid/media/PlaybackParams;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioTrack\0", "setPlaybackParams\0", "(Landroid/media/PlaybackParams;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setNotificationMarkerPosition](https://developer.android.com/reference/android/media/AudioTrack.html#setNotificationMarkerPosition(int))
        pub fn setNotificationMarkerPosition<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC, .name == "setNotificationMarkerPosition", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioTrack\0", "setNotificationMarkerPosition\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPositionNotificationPeriod](https://developer.android.com/reference/android/media/AudioTrack.html#setPositionNotificationPeriod(int))
        pub fn setPositionNotificationPeriod<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC, .name == "setPositionNotificationPeriod", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioTrack\0", "setPositionNotificationPeriod\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPlaybackHeadPosition](https://developer.android.com/reference/android/media/AudioTrack.html#setPlaybackHeadPosition(int))
        pub fn setPlaybackHeadPosition<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC, .name == "setPlaybackHeadPosition", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioTrack\0", "setPlaybackHeadPosition\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setLoopPoints](https://developer.android.com/reference/android/media/AudioTrack.html#setLoopPoints(int,%20int,%20int))
        pub fn setLoopPoints<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC, .name == "setLoopPoints", .descriptor == "(III)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioTrack\0", "setLoopPoints\0", "(III)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPresentation](https://developer.android.com/reference/android/media/AudioTrack.html#setPresentation(android.media.AudioPresentation))
        ///
        /// Required features: "android-media-AudioPresentation"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioPresentation")))]
        pub fn setPresentation<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::AudioPresentation>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC, .name == "setPresentation", .descriptor == "(Landroid/media/AudioPresentation;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioTrack\0", "setPresentation\0", "(Landroid/media/AudioPresentation;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [setState](https://developer.android.com/reference/android/media/AudioTrack.html#setState(int))
        // #[deprecated] fn setState<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/media/AudioTrack", java.flags == PROTECTED, .name == "setState", .descriptor == "(I)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioTrack\0", "setState\0", "(I)V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [play](https://developer.android.com/reference/android/media/AudioTrack.html#play())
        pub fn play<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC, .name == "play", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioTrack\0", "play\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [stop](https://developer.android.com/reference/android/media/AudioTrack.html#stop())
        pub fn stop<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC, .name == "stop", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioTrack\0", "stop\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [pause](https://developer.android.com/reference/android/media/AudioTrack.html#pause())
        pub fn pause<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC, .name == "pause", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioTrack\0", "pause\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [flush](https://developer.android.com/reference/android/media/AudioTrack.html#flush())
        pub fn flush<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC, .name == "flush", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioTrack\0", "flush\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [write](https://developer.android.com/reference/android/media/AudioTrack.html#write(byte%5B%5D,%20int,%20int))
        pub fn write_byte_array_int_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC, .name == "write", .descriptor == "([BII)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioTrack\0", "write\0", "([BII)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [write](https://developer.android.com/reference/android/media/AudioTrack.html#write(byte%5B%5D,%20int,%20int,%20int))
        pub fn write_byte_array_int_int_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>, arg1: i32, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC, .name == "write", .descriptor == "([BIII)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioTrack\0", "write\0", "([BIII)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [write](https://developer.android.com/reference/android/media/AudioTrack.html#write(short%5B%5D,%20int,%20int))
        pub fn write_short_array_int_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ShortArray>>, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC, .name == "write", .descriptor == "([SII)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioTrack\0", "write\0", "([SII)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [write](https://developer.android.com/reference/android/media/AudioTrack.html#write(short%5B%5D,%20int,%20int,%20int))
        pub fn write_short_array_int_int_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ShortArray>>, arg1: i32, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC, .name == "write", .descriptor == "([SIII)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioTrack\0", "write\0", "([SIII)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [write](https://developer.android.com/reference/android/media/AudioTrack.html#write(float%5B%5D,%20int,%20int,%20int))
        pub fn write_float_array_int_int_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>, arg1: i32, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC, .name == "write", .descriptor == "([FIII)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioTrack\0", "write\0", "([FIII)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [write](https://developer.android.com/reference/android/media/AudioTrack.html#write(java.nio.ByteBuffer,%20int,%20int))
        ///
        /// Required features: "java-nio-ByteBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-ByteBuffer")))]
        pub fn write_ByteBuffer_int_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::ByteBuffer>>, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC, .name == "write", .descriptor == "(Ljava/nio/ByteBuffer;II)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioTrack\0", "write\0", "(Ljava/nio/ByteBuffer;II)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [write](https://developer.android.com/reference/android/media/AudioTrack.html#write(java.nio.ByteBuffer,%20int,%20int,%20long))
        ///
        /// Required features: "java-nio-ByteBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-ByteBuffer")))]
        pub fn write_ByteBuffer_int_int_long<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::ByteBuffer>>, arg1: i32, arg2: i32, arg3: i64) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC, .name == "write", .descriptor == "(Ljava/nio/ByteBuffer;IIJ)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioTrack\0", "write\0", "(Ljava/nio/ByteBuffer;IIJ)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [reloadStaticData](https://developer.android.com/reference/android/media/AudioTrack.html#reloadStaticData())
        pub fn reloadStaticData<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC, .name == "reloadStaticData", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioTrack\0", "reloadStaticData\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [attachAuxEffect](https://developer.android.com/reference/android/media/AudioTrack.html#attachAuxEffect(int))
        pub fn attachAuxEffect<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC, .name == "attachAuxEffect", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioTrack\0", "attachAuxEffect\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAuxEffectSendLevel](https://developer.android.com/reference/android/media/AudioTrack.html#setAuxEffectSendLevel(float))
        pub fn setAuxEffectSendLevel<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC, .name == "setAuxEffectSendLevel", .descriptor == "(F)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioTrack\0", "setAuxEffectSendLevel\0", "(F)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPreferredDevice](https://developer.android.com/reference/android/media/AudioTrack.html#setPreferredDevice(android.media.AudioDeviceInfo))
        ///
        /// Required features: "android-media-AudioDeviceInfo"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioDeviceInfo")))]
        pub fn setPreferredDevice<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::AudioDeviceInfo>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC, .name == "setPreferredDevice", .descriptor == "(Landroid/media/AudioDeviceInfo;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioTrack\0", "setPreferredDevice\0", "(Landroid/media/AudioDeviceInfo;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPreferredDevice](https://developer.android.com/reference/android/media/AudioTrack.html#getPreferredDevice())
        ///
        /// Required features: "android-media-AudioDeviceInfo"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioDeviceInfo")))]
        pub fn getPreferredDevice<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::AudioDeviceInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC, .name == "getPreferredDevice", .descriptor == "()Landroid/media/AudioDeviceInfo;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioTrack\0", "getPreferredDevice\0", "()Landroid/media/AudioDeviceInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRoutedDevice](https://developer.android.com/reference/android/media/AudioTrack.html#getRoutedDevice())
        ///
        /// Required features: "android-media-AudioDeviceInfo"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioDeviceInfo")))]
        pub fn getRoutedDevice<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::AudioDeviceInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC, .name == "getRoutedDevice", .descriptor == "()Landroid/media/AudioDeviceInfo;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioTrack\0", "getRoutedDevice\0", "()Landroid/media/AudioDeviceInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addOnRoutingChangedListener](https://developer.android.com/reference/android/media/AudioTrack.html#addOnRoutingChangedListener(android.media.AudioRouting.OnRoutingChangedListener,%20android.os.Handler))
        ///
        /// Required features: "android-media-AudioRouting_OnRoutingChangedListener", "android-os-Handler"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioRouting_OnRoutingChangedListener", feature = "android-os-Handler")))]
        pub fn addOnRoutingChangedListener_AudioRouting_Handler<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::AudioRouting_OnRoutingChangedListener>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC, .name == "addOnRoutingChangedListener", .descriptor == "(Landroid/media/AudioRouting$OnRoutingChangedListener;Landroid/os/Handler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioTrack\0", "addOnRoutingChangedListener\0", "(Landroid/media/AudioRouting$OnRoutingChangedListener;Landroid/os/Handler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeOnRoutingChangedListener](https://developer.android.com/reference/android/media/AudioTrack.html#removeOnRoutingChangedListener(android.media.AudioRouting.OnRoutingChangedListener))
        ///
        /// Required features: "android-media-AudioRouting_OnRoutingChangedListener"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioRouting_OnRoutingChangedListener")))]
        pub fn removeOnRoutingChangedListener_AudioRouting<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::AudioRouting_OnRoutingChangedListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC, .name == "removeOnRoutingChangedListener", .descriptor == "(Landroid/media/AudioRouting$OnRoutingChangedListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioTrack\0", "removeOnRoutingChangedListener\0", "(Landroid/media/AudioRouting$OnRoutingChangedListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addOnRoutingChangedListener](https://developer.android.com/reference/android/media/AudioTrack.html#addOnRoutingChangedListener(android.media.AudioTrack.OnRoutingChangedListener,%20android.os.Handler))
        ///
        /// Required features: "android-media-AudioTrack_OnRoutingChangedListener", "android-os-Handler"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioTrack_OnRoutingChangedListener", feature = "android-os-Handler")))]
        #[deprecated] pub fn addOnRoutingChangedListener_AudioTrack_Handler<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::AudioTrack_OnRoutingChangedListener>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC, .name == "addOnRoutingChangedListener", .descriptor == "(Landroid/media/AudioTrack$OnRoutingChangedListener;Landroid/os/Handler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioTrack\0", "addOnRoutingChangedListener\0", "(Landroid/media/AudioTrack$OnRoutingChangedListener;Landroid/os/Handler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeOnRoutingChangedListener](https://developer.android.com/reference/android/media/AudioTrack.html#removeOnRoutingChangedListener(android.media.AudioTrack.OnRoutingChangedListener))
        ///
        /// Required features: "android-media-AudioTrack_OnRoutingChangedListener"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioTrack_OnRoutingChangedListener")))]
        #[deprecated] pub fn removeOnRoutingChangedListener_AudioTrack<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::AudioTrack_OnRoutingChangedListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC, .name == "removeOnRoutingChangedListener", .descriptor == "(Landroid/media/AudioTrack$OnRoutingChangedListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioTrack\0", "removeOnRoutingChangedListener\0", "(Landroid/media/AudioTrack$OnRoutingChangedListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [registerStreamEventCallback](https://developer.android.com/reference/android/media/AudioTrack.html#registerStreamEventCallback(java.util.concurrent.Executor,%20android.media.AudioTrack.StreamEventCallback))
        ///
        /// Required features: "android-media-AudioTrack_StreamEventCallback", "java-util-concurrent-Executor"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioTrack_StreamEventCallback", feature = "java-util-concurrent-Executor")))]
        pub fn registerStreamEventCallback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::AudioTrack_StreamEventCallback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC, .name == "registerStreamEventCallback", .descriptor == "(Ljava/util/concurrent/Executor;Landroid/media/AudioTrack$StreamEventCallback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioTrack\0", "registerStreamEventCallback\0", "(Ljava/util/concurrent/Executor;Landroid/media/AudioTrack$StreamEventCallback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unregisterStreamEventCallback](https://developer.android.com/reference/android/media/AudioTrack.html#unregisterStreamEventCallback(android.media.AudioTrack.StreamEventCallback))
        ///
        /// Required features: "android-media-AudioTrack_StreamEventCallback"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioTrack_StreamEventCallback")))]
        pub fn unregisterStreamEventCallback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::AudioTrack_StreamEventCallback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioTrack", java.flags == PUBLIC, .name == "unregisterStreamEventCallback", .descriptor == "(Landroid/media/AudioTrack$StreamEventCallback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioTrack\0", "unregisterStreamEventCallback\0", "(Landroid/media/AudioTrack$StreamEventCallback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [ERROR](https://developer.android.com/reference/android/media/AudioTrack.html#ERROR)
        pub const ERROR : i32 = -1;

        /// public static final [ERROR_BAD_VALUE](https://developer.android.com/reference/android/media/AudioTrack.html#ERROR_BAD_VALUE)
        pub const ERROR_BAD_VALUE : i32 = -2;

        /// public static final [ERROR_DEAD_OBJECT](https://developer.android.com/reference/android/media/AudioTrack.html#ERROR_DEAD_OBJECT)
        pub const ERROR_DEAD_OBJECT : i32 = -6;

        /// public static final [ERROR_INVALID_OPERATION](https://developer.android.com/reference/android/media/AudioTrack.html#ERROR_INVALID_OPERATION)
        pub const ERROR_INVALID_OPERATION : i32 = -3;

        /// public static final [MODE_STATIC](https://developer.android.com/reference/android/media/AudioTrack.html#MODE_STATIC)
        pub const MODE_STATIC : i32 = 0;

        /// public static final [MODE_STREAM](https://developer.android.com/reference/android/media/AudioTrack.html#MODE_STREAM)
        pub const MODE_STREAM : i32 = 1;

        /// public static final [PERFORMANCE_MODE_LOW_LATENCY](https://developer.android.com/reference/android/media/AudioTrack.html#PERFORMANCE_MODE_LOW_LATENCY)
        pub const PERFORMANCE_MODE_LOW_LATENCY : i32 = 1;

        /// public static final [PERFORMANCE_MODE_NONE](https://developer.android.com/reference/android/media/AudioTrack.html#PERFORMANCE_MODE_NONE)
        pub const PERFORMANCE_MODE_NONE : i32 = 0;

        /// public static final [PERFORMANCE_MODE_POWER_SAVING](https://developer.android.com/reference/android/media/AudioTrack.html#PERFORMANCE_MODE_POWER_SAVING)
        pub const PERFORMANCE_MODE_POWER_SAVING : i32 = 2;

        /// public static final [PLAYSTATE_PAUSED](https://developer.android.com/reference/android/media/AudioTrack.html#PLAYSTATE_PAUSED)
        pub const PLAYSTATE_PAUSED : i32 = 2;

        /// public static final [PLAYSTATE_PLAYING](https://developer.android.com/reference/android/media/AudioTrack.html#PLAYSTATE_PLAYING)
        pub const PLAYSTATE_PLAYING : i32 = 3;

        /// public static final [PLAYSTATE_STOPPED](https://developer.android.com/reference/android/media/AudioTrack.html#PLAYSTATE_STOPPED)
        pub const PLAYSTATE_STOPPED : i32 = 1;

        /// public static final [STATE_INITIALIZED](https://developer.android.com/reference/android/media/AudioTrack.html#STATE_INITIALIZED)
        pub const STATE_INITIALIZED : i32 = 1;

        /// public static final [STATE_NO_STATIC_DATA](https://developer.android.com/reference/android/media/AudioTrack.html#STATE_NO_STATIC_DATA)
        pub const STATE_NO_STATIC_DATA : i32 = 2;

        /// public static final [STATE_UNINITIALIZED](https://developer.android.com/reference/android/media/AudioTrack.html#STATE_UNINITIALIZED)
        pub const STATE_UNINITIALIZED : i32 = 0;

        /// public static final [SUCCESS](https://developer.android.com/reference/android/media/AudioTrack.html#SUCCESS)
        pub const SUCCESS : i32 = 0;

        /// public static final [WRITE_BLOCKING](https://developer.android.com/reference/android/media/AudioTrack.html#WRITE_BLOCKING)
        pub const WRITE_BLOCKING : i32 = 0;

        /// public static final [WRITE_NON_BLOCKING](https://developer.android.com/reference/android/media/AudioTrack.html#WRITE_NON_BLOCKING)
        pub const WRITE_NON_BLOCKING : i32 = 1;
    }
}
