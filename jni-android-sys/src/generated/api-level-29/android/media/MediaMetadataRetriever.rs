// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-media-MediaMetadataRetriever"))]
__jni_bindgen! {
    /// public class [MediaMetadataRetriever](https://developer.android.com/reference/android/media/MediaMetadataRetriever.html)
    ///
    /// Required feature: android-media-MediaMetadataRetriever
    public class MediaMetadataRetriever ("android/media/MediaMetadataRetriever") extends crate::java::lang::Object, implements crate::java::lang::AutoCloseable {

        /// [MediaMetadataRetriever](https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#MediaMetadataRetriever())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::media::MediaMetadataRetriever>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaMetadataRetriever", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaMetadataRetriever\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDataSource](https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#setDataSource(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn setDataSource_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaMetadataRetriever", java.flags == PUBLIC, .name == "setDataSource", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaMetadataRetriever\0", "setDataSource\0", "(Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDataSource](https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#setDataSource(java.lang.String,%20java.util.Map))
        ///
        /// Required features: "java-lang-String", "java-util-Map"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-util-Map")))]
        pub fn setDataSource_String_Map<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Map>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaMetadataRetriever", java.flags == PUBLIC, .name == "setDataSource", .descriptor == "(Ljava/lang/String;Ljava/util/Map;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaMetadataRetriever\0", "setDataSource\0", "(Ljava/lang/String;Ljava/util/Map;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDataSource](https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#setDataSource(java.io.FileDescriptor,%20long,%20long))
        ///
        /// Required features: "java-io-FileDescriptor"
        #[cfg(any(feature = "all", all(feature = "java-io-FileDescriptor")))]
        pub fn setDataSource_FileDescriptor_long_long<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::FileDescriptor>>, arg1: i64, arg2: i64) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaMetadataRetriever", java.flags == PUBLIC | NATIVE, .name == "setDataSource", .descriptor == "(Ljava/io/FileDescriptor;JJ)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaMetadataRetriever\0", "setDataSource\0", "(Ljava/io/FileDescriptor;JJ)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDataSource](https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#setDataSource(java.io.FileDescriptor))
        ///
        /// Required features: "java-io-FileDescriptor"
        #[cfg(any(feature = "all", all(feature = "java-io-FileDescriptor")))]
        pub fn setDataSource_FileDescriptor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::FileDescriptor>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaMetadataRetriever", java.flags == PUBLIC, .name == "setDataSource", .descriptor == "(Ljava/io/FileDescriptor;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaMetadataRetriever\0", "setDataSource\0", "(Ljava/io/FileDescriptor;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDataSource](https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#setDataSource(android.content.Context,%20android.net.Uri))
        ///
        /// Required features: "android-content-Context", "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-net-Uri")))]
        pub fn setDataSource_Context_Uri<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaMetadataRetriever", java.flags == PUBLIC, .name == "setDataSource", .descriptor == "(Landroid/content/Context;Landroid/net/Uri;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaMetadataRetriever\0", "setDataSource\0", "(Landroid/content/Context;Landroid/net/Uri;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDataSource](https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#setDataSource(android.media.MediaDataSource))
        ///
        /// Required features: "android-media-MediaDataSource"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaDataSource")))]
        pub fn setDataSource_MediaDataSource<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaDataSource>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaMetadataRetriever", java.flags == PUBLIC, .name == "setDataSource", .descriptor == "(Landroid/media/MediaDataSource;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaMetadataRetriever\0", "setDataSource\0", "(Landroid/media/MediaDataSource;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [extractMetadata](https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#extractMetadata(int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn extractMetadata<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaMetadataRetriever", java.flags == PUBLIC | NATIVE, .name == "extractMetadata", .descriptor == "(I)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaMetadataRetriever\0", "extractMetadata\0", "(I)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFrameAtTime](https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#getFrameAtTime(long,%20int))
        ///
        /// Required features: "android-graphics-Bitmap"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Bitmap")))]
        pub fn getFrameAtTime_long_int<'env>(&'env self, arg0: i64, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Bitmap>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaMetadataRetriever", java.flags == PUBLIC, .name == "getFrameAtTime", .descriptor == "(JI)Landroid/graphics/Bitmap;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaMetadataRetriever\0", "getFrameAtTime\0", "(JI)Landroid/graphics/Bitmap;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getScaledFrameAtTime](https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#getScaledFrameAtTime(long,%20int,%20int,%20int))
        ///
        /// Required features: "android-graphics-Bitmap"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Bitmap")))]
        pub fn getScaledFrameAtTime<'env>(&'env self, arg0: i64, arg1: i32, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Bitmap>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaMetadataRetriever", java.flags == PUBLIC, .name == "getScaledFrameAtTime", .descriptor == "(JIII)Landroid/graphics/Bitmap;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaMetadataRetriever\0", "getScaledFrameAtTime\0", "(JIII)Landroid/graphics/Bitmap;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFrameAtTime](https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#getFrameAtTime(long))
        ///
        /// Required features: "android-graphics-Bitmap"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Bitmap")))]
        pub fn getFrameAtTime_long<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Bitmap>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaMetadataRetriever", java.flags == PUBLIC, .name == "getFrameAtTime", .descriptor == "(J)Landroid/graphics/Bitmap;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaMetadataRetriever\0", "getFrameAtTime\0", "(J)Landroid/graphics/Bitmap;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFrameAtTime](https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#getFrameAtTime())
        ///
        /// Required features: "android-graphics-Bitmap"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Bitmap")))]
        pub fn getFrameAtTime<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Bitmap>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaMetadataRetriever", java.flags == PUBLIC, .name == "getFrameAtTime", .descriptor == "()Landroid/graphics/Bitmap;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaMetadataRetriever\0", "getFrameAtTime\0", "()Landroid/graphics/Bitmap;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFrameAtIndex](https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#getFrameAtIndex(int,%20android.media.MediaMetadataRetriever.BitmapParams))
        ///
        /// Required features: "android-graphics-Bitmap", "android-media-MediaMetadataRetriever_BitmapParams"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Bitmap", feature = "android-media-MediaMetadataRetriever_BitmapParams")))]
        pub fn getFrameAtIndex_int_BitmapParams<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaMetadataRetriever_BitmapParams>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Bitmap>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaMetadataRetriever", java.flags == PUBLIC, .name == "getFrameAtIndex", .descriptor == "(ILandroid/media/MediaMetadataRetriever$BitmapParams;)Landroid/graphics/Bitmap;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaMetadataRetriever\0", "getFrameAtIndex\0", "(ILandroid/media/MediaMetadataRetriever$BitmapParams;)Landroid/graphics/Bitmap;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFrameAtIndex](https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#getFrameAtIndex(int))
        ///
        /// Required features: "android-graphics-Bitmap"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Bitmap")))]
        pub fn getFrameAtIndex_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Bitmap>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaMetadataRetriever", java.flags == PUBLIC, .name == "getFrameAtIndex", .descriptor == "(I)Landroid/graphics/Bitmap;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaMetadataRetriever\0", "getFrameAtIndex\0", "(I)Landroid/graphics/Bitmap;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFramesAtIndex](https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#getFramesAtIndex(int,%20int,%20android.media.MediaMetadataRetriever.BitmapParams))
        ///
        /// Required features: "android-media-MediaMetadataRetriever_BitmapParams", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaMetadataRetriever_BitmapParams", feature = "java-util-List")))]
        pub fn getFramesAtIndex_int_int_BitmapParams<'env>(&'env self, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaMetadataRetriever_BitmapParams>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaMetadataRetriever", java.flags == PUBLIC, .name == "getFramesAtIndex", .descriptor == "(IILandroid/media/MediaMetadataRetriever$BitmapParams;)Ljava/util/List;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaMetadataRetriever\0", "getFramesAtIndex\0", "(IILandroid/media/MediaMetadataRetriever$BitmapParams;)Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFramesAtIndex](https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#getFramesAtIndex(int,%20int))
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getFramesAtIndex_int_int<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaMetadataRetriever", java.flags == PUBLIC, .name == "getFramesAtIndex", .descriptor == "(II)Ljava/util/List;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaMetadataRetriever\0", "getFramesAtIndex\0", "(II)Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getImageAtIndex](https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#getImageAtIndex(int,%20android.media.MediaMetadataRetriever.BitmapParams))
        ///
        /// Required features: "android-graphics-Bitmap", "android-media-MediaMetadataRetriever_BitmapParams"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Bitmap", feature = "android-media-MediaMetadataRetriever_BitmapParams")))]
        pub fn getImageAtIndex_int_BitmapParams<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaMetadataRetriever_BitmapParams>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Bitmap>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaMetadataRetriever", java.flags == PUBLIC, .name == "getImageAtIndex", .descriptor == "(ILandroid/media/MediaMetadataRetriever$BitmapParams;)Landroid/graphics/Bitmap;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaMetadataRetriever\0", "getImageAtIndex\0", "(ILandroid/media/MediaMetadataRetriever$BitmapParams;)Landroid/graphics/Bitmap;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getImageAtIndex](https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#getImageAtIndex(int))
        ///
        /// Required features: "android-graphics-Bitmap"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Bitmap")))]
        pub fn getImageAtIndex_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Bitmap>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaMetadataRetriever", java.flags == PUBLIC, .name == "getImageAtIndex", .descriptor == "(I)Landroid/graphics/Bitmap;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaMetadataRetriever\0", "getImageAtIndex\0", "(I)Landroid/graphics/Bitmap;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPrimaryImage](https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#getPrimaryImage(android.media.MediaMetadataRetriever.BitmapParams))
        ///
        /// Required features: "android-graphics-Bitmap", "android-media-MediaMetadataRetriever_BitmapParams"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Bitmap", feature = "android-media-MediaMetadataRetriever_BitmapParams")))]
        pub fn getPrimaryImage_BitmapParams<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaMetadataRetriever_BitmapParams>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Bitmap>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaMetadataRetriever", java.flags == PUBLIC, .name == "getPrimaryImage", .descriptor == "(Landroid/media/MediaMetadataRetriever$BitmapParams;)Landroid/graphics/Bitmap;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaMetadataRetriever\0", "getPrimaryImage\0", "(Landroid/media/MediaMetadataRetriever$BitmapParams;)Landroid/graphics/Bitmap;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPrimaryImage](https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#getPrimaryImage())
        ///
        /// Required features: "android-graphics-Bitmap"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Bitmap")))]
        pub fn getPrimaryImage<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Bitmap>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaMetadataRetriever", java.flags == PUBLIC, .name == "getPrimaryImage", .descriptor == "()Landroid/graphics/Bitmap;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaMetadataRetriever\0", "getPrimaryImage\0", "()Landroid/graphics/Bitmap;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getEmbeddedPicture](https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#getEmbeddedPicture())
        pub fn getEmbeddedPicture<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ByteArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaMetadataRetriever", java.flags == PUBLIC, .name == "getEmbeddedPicture", .descriptor == "()[B"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaMetadataRetriever\0", "getEmbeddedPicture\0", "()[B\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [close](https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#close())
        pub fn close<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaMetadataRetriever", java.flags == PUBLIC, .name == "close", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaMetadataRetriever\0", "close\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [release](https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#release())
        pub fn release<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaMetadataRetriever", java.flags == PUBLIC | NATIVE, .name == "release", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaMetadataRetriever\0", "release\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [finalize](https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#finalize())
        // fn finalize<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/media/MediaMetadataRetriever", java.flags == PROTECTED, .name == "finalize", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaMetadataRetriever\0", "finalize\0", "()V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// public static final [METADATA_KEY_ALBUM](https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_ALBUM)
        pub const METADATA_KEY_ALBUM : i32 = 1;

        /// public static final [METADATA_KEY_ALBUMARTIST](https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_ALBUMARTIST)
        pub const METADATA_KEY_ALBUMARTIST : i32 = 13;

        /// public static final [METADATA_KEY_ARTIST](https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_ARTIST)
        pub const METADATA_KEY_ARTIST : i32 = 2;

        /// public static final [METADATA_KEY_AUTHOR](https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_AUTHOR)
        pub const METADATA_KEY_AUTHOR : i32 = 3;

        /// public static final [METADATA_KEY_BITRATE](https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_BITRATE)
        pub const METADATA_KEY_BITRATE : i32 = 20;

        /// public static final [METADATA_KEY_CAPTURE_FRAMERATE](https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_CAPTURE_FRAMERATE)
        pub const METADATA_KEY_CAPTURE_FRAMERATE : i32 = 25;

        /// public static final [METADATA_KEY_CD_TRACK_NUMBER](https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_CD_TRACK_NUMBER)
        pub const METADATA_KEY_CD_TRACK_NUMBER : i32 = 0;

        /// public static final [METADATA_KEY_COMPILATION](https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_COMPILATION)
        pub const METADATA_KEY_COMPILATION : i32 = 15;

        /// public static final [METADATA_KEY_COMPOSER](https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_COMPOSER)
        pub const METADATA_KEY_COMPOSER : i32 = 4;

        /// public static final [METADATA_KEY_DATE](https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_DATE)
        pub const METADATA_KEY_DATE : i32 = 5;

        /// public static final [METADATA_KEY_DISC_NUMBER](https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_DISC_NUMBER)
        pub const METADATA_KEY_DISC_NUMBER : i32 = 14;

        /// public static final [METADATA_KEY_DURATION](https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_DURATION)
        pub const METADATA_KEY_DURATION : i32 = 9;

        /// public static final [METADATA_KEY_EXIF_LENGTH](https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_EXIF_LENGTH)
        pub const METADATA_KEY_EXIF_LENGTH : i32 = 34;

        /// public static final [METADATA_KEY_EXIF_OFFSET](https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_EXIF_OFFSET)
        pub const METADATA_KEY_EXIF_OFFSET : i32 = 33;

        /// public static final [METADATA_KEY_GENRE](https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_GENRE)
        pub const METADATA_KEY_GENRE : i32 = 6;

        /// public static final [METADATA_KEY_HAS_AUDIO](https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_HAS_AUDIO)
        pub const METADATA_KEY_HAS_AUDIO : i32 = 16;

        /// public static final [METADATA_KEY_HAS_IMAGE](https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_HAS_IMAGE)
        pub const METADATA_KEY_HAS_IMAGE : i32 = 26;

        /// public static final [METADATA_KEY_HAS_VIDEO](https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_HAS_VIDEO)
        pub const METADATA_KEY_HAS_VIDEO : i32 = 17;

        /// public static final [METADATA_KEY_IMAGE_COUNT](https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_IMAGE_COUNT)
        pub const METADATA_KEY_IMAGE_COUNT : i32 = 27;

        /// public static final [METADATA_KEY_IMAGE_HEIGHT](https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_IMAGE_HEIGHT)
        pub const METADATA_KEY_IMAGE_HEIGHT : i32 = 30;

        /// public static final [METADATA_KEY_IMAGE_PRIMARY](https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_IMAGE_PRIMARY)
        pub const METADATA_KEY_IMAGE_PRIMARY : i32 = 28;

        /// public static final [METADATA_KEY_IMAGE_ROTATION](https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_IMAGE_ROTATION)
        pub const METADATA_KEY_IMAGE_ROTATION : i32 = 31;

        /// public static final [METADATA_KEY_IMAGE_WIDTH](https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_IMAGE_WIDTH)
        pub const METADATA_KEY_IMAGE_WIDTH : i32 = 29;

        /// public static final [METADATA_KEY_LOCATION](https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_LOCATION)
        pub const METADATA_KEY_LOCATION : i32 = 23;

        /// public static final [METADATA_KEY_MIMETYPE](https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_MIMETYPE)
        pub const METADATA_KEY_MIMETYPE : i32 = 12;

        /// public static final [METADATA_KEY_NUM_TRACKS](https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_NUM_TRACKS)
        pub const METADATA_KEY_NUM_TRACKS : i32 = 10;

        /// public static final [METADATA_KEY_TITLE](https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_TITLE)
        pub const METADATA_KEY_TITLE : i32 = 7;

        /// public static final [METADATA_KEY_VIDEO_FRAME_COUNT](https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_VIDEO_FRAME_COUNT)
        pub const METADATA_KEY_VIDEO_FRAME_COUNT : i32 = 32;

        /// public static final [METADATA_KEY_VIDEO_HEIGHT](https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_VIDEO_HEIGHT)
        pub const METADATA_KEY_VIDEO_HEIGHT : i32 = 19;

        /// public static final [METADATA_KEY_VIDEO_ROTATION](https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_VIDEO_ROTATION)
        pub const METADATA_KEY_VIDEO_ROTATION : i32 = 24;

        /// public static final [METADATA_KEY_VIDEO_WIDTH](https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_VIDEO_WIDTH)
        pub const METADATA_KEY_VIDEO_WIDTH : i32 = 18;

        /// public static final [METADATA_KEY_WRITER](https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_WRITER)
        pub const METADATA_KEY_WRITER : i32 = 11;

        /// public static final [METADATA_KEY_YEAR](https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#METADATA_KEY_YEAR)
        pub const METADATA_KEY_YEAR : i32 = 8;

        /// public static final [OPTION_CLOSEST](https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#OPTION_CLOSEST)
        pub const OPTION_CLOSEST : i32 = 3;

        /// public static final [OPTION_CLOSEST_SYNC](https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#OPTION_CLOSEST_SYNC)
        pub const OPTION_CLOSEST_SYNC : i32 = 2;

        /// public static final [OPTION_NEXT_SYNC](https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#OPTION_NEXT_SYNC)
        pub const OPTION_NEXT_SYNC : i32 = 1;

        /// public static final [OPTION_PREVIOUS_SYNC](https://developer.android.com/reference/android/media/MediaMetadataRetriever.html#OPTION_PREVIOUS_SYNC)
        pub const OPTION_PREVIOUS_SYNC : i32 = 0;
    }
}
