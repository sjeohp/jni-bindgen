// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-media-ImageWriter"))]
__jni_bindgen! {
    /// public class [ImageWriter](https://developer.android.com/reference/android/media/ImageWriter.html)
    ///
    /// Required feature: android-media-ImageWriter
    public class ImageWriter ("android/media/ImageWriter") extends crate::java::lang::Object, implements crate::java::lang::AutoCloseable {

        // // Not emitting: Non-public method
        // /// [ImageWriter](https://developer.android.com/reference/android/media/ImageWriter.html#ImageWriter(android.view.Surface,%20int,%20int))
        // ///
        // /// Required features: "android-view-Surface"
        // #[cfg(any(feature = "all", all(feature = "android-view-Surface")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::Surface>>, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::media::ImageWriter>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/media/ImageWriter", java.flags == (empty), .name == "<init>", .descriptor == "(Landroid/view/Surface;II)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/ImageWriter\0", "<init>\0", "(Landroid/view/Surface;II)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [newInstance](https://developer.android.com/reference/android/media/ImageWriter.html#newInstance(android.view.Surface,%20int))
        ///
        /// Required features: "android-media-ImageWriter", "android-view-Surface"
        #[cfg(any(feature = "all", all(feature = "android-media-ImageWriter", feature = "android-view-Surface")))]
        pub fn newInstance_Surface_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::Surface>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::ImageWriter>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/ImageWriter", java.flags == PUBLIC | STATIC, .name == "newInstance", .descriptor == "(Landroid/view/Surface;I)Landroid/media/ImageWriter;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/media/ImageWriter\0", "newInstance\0", "(Landroid/view/Surface;I)Landroid/media/ImageWriter;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newInstance](https://developer.android.com/reference/android/media/ImageWriter.html#newInstance(android.view.Surface,%20int,%20int))
        ///
        /// Required features: "android-media-ImageWriter", "android-view-Surface"
        #[cfg(any(feature = "all", all(feature = "android-media-ImageWriter", feature = "android-view-Surface")))]
        pub fn newInstance_Surface_int_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::Surface>>, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::ImageWriter>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/ImageWriter", java.flags == PUBLIC | STATIC, .name == "newInstance", .descriptor == "(Landroid/view/Surface;II)Landroid/media/ImageWriter;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/media/ImageWriter\0", "newInstance\0", "(Landroid/view/Surface;II)Landroid/media/ImageWriter;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMaxImages](https://developer.android.com/reference/android/media/ImageWriter.html#getMaxImages())
        pub fn getMaxImages<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/ImageWriter", java.flags == PUBLIC, .name == "getMaxImages", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/ImageWriter\0", "getMaxImages\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dequeueInputImage](https://developer.android.com/reference/android/media/ImageWriter.html#dequeueInputImage())
        ///
        /// Required features: "android-media-Image"
        #[cfg(any(feature = "all", all(feature = "android-media-Image")))]
        pub fn dequeueInputImage<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::Image>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/ImageWriter", java.flags == PUBLIC, .name == "dequeueInputImage", .descriptor == "()Landroid/media/Image;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/ImageWriter\0", "dequeueInputImage\0", "()Landroid/media/Image;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [queueInputImage](https://developer.android.com/reference/android/media/ImageWriter.html#queueInputImage(android.media.Image))
        ///
        /// Required features: "android-media-Image"
        #[cfg(any(feature = "all", all(feature = "android-media-Image")))]
        pub fn queueInputImage<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::Image>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/ImageWriter", java.flags == PUBLIC, .name == "queueInputImage", .descriptor == "(Landroid/media/Image;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/ImageWriter\0", "queueInputImage\0", "(Landroid/media/Image;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFormat](https://developer.android.com/reference/android/media/ImageWriter.html#getFormat())
        pub fn getFormat<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/ImageWriter", java.flags == PUBLIC, .name == "getFormat", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/ImageWriter\0", "getFormat\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOnImageReleasedListener](https://developer.android.com/reference/android/media/ImageWriter.html#setOnImageReleasedListener(android.media.ImageWriter.OnImageReleasedListener,%20android.os.Handler))
        ///
        /// Required features: "android-media-ImageWriter_OnImageReleasedListener", "android-os-Handler"
        #[cfg(any(feature = "all", all(feature = "android-media-ImageWriter_OnImageReleasedListener", feature = "android-os-Handler")))]
        pub fn setOnImageReleasedListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::ImageWriter_OnImageReleasedListener>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/ImageWriter", java.flags == PUBLIC, .name == "setOnImageReleasedListener", .descriptor == "(Landroid/media/ImageWriter$OnImageReleasedListener;Landroid/os/Handler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/ImageWriter\0", "setOnImageReleasedListener\0", "(Landroid/media/ImageWriter$OnImageReleasedListener;Landroid/os/Handler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [close](https://developer.android.com/reference/android/media/ImageWriter.html#close())
        pub fn close<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/ImageWriter", java.flags == PUBLIC, .name == "close", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/ImageWriter\0", "close\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [finalize](https://developer.android.com/reference/android/media/ImageWriter.html#finalize())
        // fn finalize<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/media/ImageWriter", java.flags == PROTECTED, .name == "finalize", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/ImageWriter\0", "finalize\0", "()V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }
    }
}
