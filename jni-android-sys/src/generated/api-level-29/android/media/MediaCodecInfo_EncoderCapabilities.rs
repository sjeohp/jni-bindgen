// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-media-MediaCodecInfo_EncoderCapabilities"))]
__jni_bindgen! {
    /// public final class [MediaCodecInfo.EncoderCapabilities](https://developer.android.com/reference/android/media/MediaCodecInfo.EncoderCapabilities.html)
    ///
    /// Required feature: android-media-MediaCodecInfo_EncoderCapabilities
    public final class MediaCodecInfo_EncoderCapabilities ("android/media/MediaCodecInfo$EncoderCapabilities") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [EncoderCapabilities](https://developer.android.com/reference/android/media/MediaCodecInfo.EncoderCapabilities.html#EncoderCapabilities())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::media::MediaCodecInfo_EncoderCapabilities>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/media/MediaCodecInfo$EncoderCapabilities", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodecInfo$EncoderCapabilities\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getQualityRange](https://developer.android.com/reference/android/media/MediaCodecInfo.EncoderCapabilities.html#getQualityRange())
        ///
        /// Required features: "android-util-Range"
        #[cfg(any(feature = "all", all(feature = "android-util-Range")))]
        pub fn getQualityRange<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::util::Range>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodecInfo$EncoderCapabilities", java.flags == PUBLIC, .name == "getQualityRange", .descriptor == "()Landroid/util/Range;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodecInfo$EncoderCapabilities\0", "getQualityRange\0", "()Landroid/util/Range;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getComplexityRange](https://developer.android.com/reference/android/media/MediaCodecInfo.EncoderCapabilities.html#getComplexityRange())
        ///
        /// Required features: "android-util-Range"
        #[cfg(any(feature = "all", all(feature = "android-util-Range")))]
        pub fn getComplexityRange<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::util::Range>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodecInfo$EncoderCapabilities", java.flags == PUBLIC, .name == "getComplexityRange", .descriptor == "()Landroid/util/Range;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodecInfo$EncoderCapabilities\0", "getComplexityRange\0", "()Landroid/util/Range;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isBitrateModeSupported](https://developer.android.com/reference/android/media/MediaCodecInfo.EncoderCapabilities.html#isBitrateModeSupported(int))
        pub fn isBitrateModeSupported<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodecInfo$EncoderCapabilities", java.flags == PUBLIC, .name == "isBitrateModeSupported", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodecInfo$EncoderCapabilities\0", "isBitrateModeSupported\0", "(I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [BITRATE_MODE_CBR](https://developer.android.com/reference/android/media/MediaCodecInfo.EncoderCapabilities.html#BITRATE_MODE_CBR)
        pub const BITRATE_MODE_CBR : i32 = 2;

        /// public static final [BITRATE_MODE_CQ](https://developer.android.com/reference/android/media/MediaCodecInfo.EncoderCapabilities.html#BITRATE_MODE_CQ)
        pub const BITRATE_MODE_CQ : i32 = 0;

        /// public static final [BITRATE_MODE_VBR](https://developer.android.com/reference/android/media/MediaCodecInfo.EncoderCapabilities.html#BITRATE_MODE_VBR)
        pub const BITRATE_MODE_VBR : i32 = 1;
    }
}
