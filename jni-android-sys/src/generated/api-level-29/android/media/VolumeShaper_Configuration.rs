// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-media-VolumeShaper_Configuration"))]
__jni_bindgen! {
    /// public final class [VolumeShaper.Configuration](https://developer.android.com/reference/android/media/VolumeShaper.Configuration.html)
    ///
    /// Required feature: android-media-VolumeShaper_Configuration
    public final class VolumeShaper_Configuration ("android/media/VolumeShaper$Configuration") extends crate::java::lang::Object, implements crate::android::os::Parcelable {

        // // Not emitting: Non-public method
        // /// [Configuration](https://developer.android.com/reference/android/media/VolumeShaper.Configuration.html#Configuration(int))
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::media::VolumeShaper_Configuration>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/media/VolumeShaper$Configuration", java.flags == (empty), .name == "<init>", .descriptor == "(I)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/VolumeShaper$Configuration\0", "<init>\0", "(I)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getMaximumCurvePoints](https://developer.android.com/reference/android/media/VolumeShaper.Configuration.html#getMaximumCurvePoints())
        pub fn getMaximumCurvePoints<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/VolumeShaper$Configuration", java.flags == PUBLIC | STATIC, .name == "getMaximumCurvePoints", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/media/VolumeShaper$Configuration\0", "getMaximumCurvePoints\0", "()I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/android/media/VolumeShaper.Configuration.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/VolumeShaper$Configuration", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/VolumeShaper$Configuration\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hashCode](https://developer.android.com/reference/android/media/VolumeShaper.Configuration.html#hashCode())
        pub fn hashCode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/VolumeShaper$Configuration", java.flags == PUBLIC, .name == "hashCode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/VolumeShaper$Configuration\0", "hashCode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [equals](https://developer.android.com/reference/android/media/VolumeShaper.Configuration.html#equals(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn equals<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/VolumeShaper$Configuration", java.flags == PUBLIC, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/VolumeShaper$Configuration\0", "equals\0", "(Ljava/lang/Object;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [describeContents](https://developer.android.com/reference/android/media/VolumeShaper.Configuration.html#describeContents())
        pub fn describeContents<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/VolumeShaper$Configuration", java.flags == PUBLIC, .name == "describeContents", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/VolumeShaper$Configuration\0", "describeContents\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [writeToParcel](https://developer.android.com/reference/android/media/VolumeShaper.Configuration.html#writeToParcel(android.os.Parcel,%20int))
        ///
        /// Required features: "android-os-Parcel"
        #[cfg(any(feature = "all", all(feature = "android-os-Parcel")))]
        pub fn writeToParcel<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Parcel>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/VolumeShaper$Configuration", java.flags == PUBLIC, .name == "writeToParcel", .descriptor == "(Landroid/os/Parcel;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/VolumeShaper$Configuration\0", "writeToParcel\0", "(Landroid/os/Parcel;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInterpolatorType](https://developer.android.com/reference/android/media/VolumeShaper.Configuration.html#getInterpolatorType())
        pub fn getInterpolatorType<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/VolumeShaper$Configuration", java.flags == PUBLIC, .name == "getInterpolatorType", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/VolumeShaper$Configuration\0", "getInterpolatorType\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDuration](https://developer.android.com/reference/android/media/VolumeShaper.Configuration.html#getDuration())
        pub fn getDuration<'env>(&'env self) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/VolumeShaper$Configuration", java.flags == PUBLIC, .name == "getDuration", .descriptor == "()J"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/VolumeShaper$Configuration\0", "getDuration\0", "()J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTimes](https://developer.android.com/reference/android/media/VolumeShaper.Configuration.html#getTimes())
        pub fn getTimes<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::FloatArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/VolumeShaper$Configuration", java.flags == PUBLIC, .name == "getTimes", .descriptor == "()[F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/VolumeShaper$Configuration\0", "getTimes\0", "()[F\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getVolumes](https://developer.android.com/reference/android/media/VolumeShaper.Configuration.html#getVolumes())
        pub fn getVolumes<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::FloatArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/VolumeShaper$Configuration", java.flags == PUBLIC, .name == "getVolumes", .descriptor == "()[F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/VolumeShaper$Configuration\0", "getVolumes\0", "()[F\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// **get** public static final [CREATOR](https://developer.android.com/reference/android/media/VolumeShaper.Configuration.html#CREATOR)
        ///
        /// Required feature: android-os-Parcelable_Creator
        #[cfg(any(feature = "all", feature = "android-os-Parcelable_Creator"))]
        pub fn CREATOR<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Parcelable_Creator>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/media/VolumeShaper$Configuration\0", "CREATOR\0", "Landroid/os/Parcelable$Creator;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [CUBIC_RAMP](https://developer.android.com/reference/android/media/VolumeShaper.Configuration.html#CUBIC_RAMP)
        ///
        /// Required feature: android-media-VolumeShaper_Configuration
        #[cfg(any(feature = "all", feature = "android-media-VolumeShaper_Configuration"))]
        pub fn CUBIC_RAMP<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::VolumeShaper_Configuration>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/media/VolumeShaper$Configuration\0", "CUBIC_RAMP\0", "Landroid/media/VolumeShaper$Configuration;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// public static final [INTERPOLATOR_TYPE_CUBIC](https://developer.android.com/reference/android/media/VolumeShaper.Configuration.html#INTERPOLATOR_TYPE_CUBIC)
        pub const INTERPOLATOR_TYPE_CUBIC : i32 = 2;

        /// public static final [INTERPOLATOR_TYPE_CUBIC_MONOTONIC](https://developer.android.com/reference/android/media/VolumeShaper.Configuration.html#INTERPOLATOR_TYPE_CUBIC_MONOTONIC)
        pub const INTERPOLATOR_TYPE_CUBIC_MONOTONIC : i32 = 3;

        /// public static final [INTERPOLATOR_TYPE_LINEAR](https://developer.android.com/reference/android/media/VolumeShaper.Configuration.html#INTERPOLATOR_TYPE_LINEAR)
        pub const INTERPOLATOR_TYPE_LINEAR : i32 = 1;

        /// public static final [INTERPOLATOR_TYPE_STEP](https://developer.android.com/reference/android/media/VolumeShaper.Configuration.html#INTERPOLATOR_TYPE_STEP)
        pub const INTERPOLATOR_TYPE_STEP : i32 = 0;

        /// **get** public static final [LINEAR_RAMP](https://developer.android.com/reference/android/media/VolumeShaper.Configuration.html#LINEAR_RAMP)
        ///
        /// Required feature: android-media-VolumeShaper_Configuration
        #[cfg(any(feature = "all", feature = "android-media-VolumeShaper_Configuration"))]
        pub fn LINEAR_RAMP<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::VolumeShaper_Configuration>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/media/VolumeShaper$Configuration\0", "LINEAR_RAMP\0", "Landroid/media/VolumeShaper$Configuration;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [SCURVE_RAMP](https://developer.android.com/reference/android/media/VolumeShaper.Configuration.html#SCURVE_RAMP)
        ///
        /// Required feature: android-media-VolumeShaper_Configuration
        #[cfg(any(feature = "all", feature = "android-media-VolumeShaper_Configuration"))]
        pub fn SCURVE_RAMP<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::VolumeShaper_Configuration>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/media/VolumeShaper$Configuration\0", "SCURVE_RAMP\0", "Landroid/media/VolumeShaper$Configuration;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [SINE_RAMP](https://developer.android.com/reference/android/media/VolumeShaper.Configuration.html#SINE_RAMP)
        ///
        /// Required feature: android-media-VolumeShaper_Configuration
        #[cfg(any(feature = "all", feature = "android-media-VolumeShaper_Configuration"))]
        pub fn SINE_RAMP<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::VolumeShaper_Configuration>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/media/VolumeShaper$Configuration\0", "SINE_RAMP\0", "Landroid/media/VolumeShaper$Configuration;\0");
                env.get_static_object_field(class, field)
            }
        }
    }
}
