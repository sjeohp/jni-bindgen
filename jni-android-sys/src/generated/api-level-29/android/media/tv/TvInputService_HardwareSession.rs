// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-media-tv-TvInputService_HardwareSession"))]
__jni_bindgen! {
    /// public class [TvInputService.HardwareSession](https://developer.android.com/reference/android/media/tv/TvInputService.HardwareSession.html)
    ///
    /// Required feature: android-media-tv-TvInputService_HardwareSession
    public class TvInputService_HardwareSession ("android/media/tv/TvInputService$HardwareSession") extends crate::android::media::tv::TvInputService_Session {

        /// [HardwareSession](https://developer.android.com/reference/android/media/tv/TvInputService.HardwareSession.html#HardwareSession(android.content.Context))
        ///
        /// Required features: "android-content-Context"
        #[cfg(any(feature = "all", all(feature = "android-content-Context")))]
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::media::tv::TvInputService_HardwareSession>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/tv/TvInputService$HardwareSession", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/content/Context;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/tv/TvInputService$HardwareSession\0", "<init>\0", "(Landroid/content/Context;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getHardwareInputId](https://developer.android.com/reference/android/media/tv/TvInputService.HardwareSession.html#getHardwareInputId())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getHardwareInputId<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/tv/TvInputService$HardwareSession", java.flags == PUBLIC | ABSTRACT, .name == "getHardwareInputId", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/tv/TvInputService$HardwareSession\0", "getHardwareInputId\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onSetSurface](https://developer.android.com/reference/android/media/tv/TvInputService.HardwareSession.html#onSetSurface(android.view.Surface))
        ///
        /// Required features: "android-view-Surface"
        #[cfg(any(feature = "all", all(feature = "android-view-Surface")))]
        pub fn onSetSurface<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::Surface>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/tv/TvInputService$HardwareSession", java.flags == PUBLIC | FINAL, .name == "onSetSurface", .descriptor == "(Landroid/view/Surface;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/tv/TvInputService$HardwareSession\0", "onSetSurface\0", "(Landroid/view/Surface;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onHardwareVideoAvailable](https://developer.android.com/reference/android/media/tv/TvInputService.HardwareSession.html#onHardwareVideoAvailable())
        pub fn onHardwareVideoAvailable<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/tv/TvInputService$HardwareSession", java.flags == PUBLIC, .name == "onHardwareVideoAvailable", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/tv/TvInputService$HardwareSession\0", "onHardwareVideoAvailable\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onHardwareVideoUnavailable](https://developer.android.com/reference/android/media/tv/TvInputService.HardwareSession.html#onHardwareVideoUnavailable(int))
        pub fn onHardwareVideoUnavailable<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/tv/TvInputService$HardwareSession", java.flags == PUBLIC, .name == "onHardwareVideoUnavailable", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/tv/TvInputService$HardwareSession\0", "onHardwareVideoUnavailable\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
