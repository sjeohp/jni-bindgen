// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-media-tv-TvContract"))]
__jni_bindgen! {
    /// public final class [TvContract](https://developer.android.com/reference/android/media/tv/TvContract.html)
    ///
    /// Required feature: android-media-tv-TvContract
    public final class TvContract ("android/media/tv/TvContract") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [TvContract](https://developer.android.com/reference/android/media/tv/TvContract.html#TvContract())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::media::tv::TvContract>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/media/tv/TvContract", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/tv/TvContract\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [buildInputId](https://developer.android.com/reference/android/media/tv/TvContract.html#buildInputId(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-lang-String")))]
        pub fn buildInputId<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/tv/TvContract", java.flags == PUBLIC | STATIC, .name == "buildInputId", .descriptor == "(Landroid/content/ComponentName;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/media/tv/TvContract\0", "buildInputId\0", "(Landroid/content/ComponentName;)Ljava/lang/String;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [buildChannelUri](https://developer.android.com/reference/android/media/tv/TvContract.html#buildChannelUri(long))
        ///
        /// Required features: "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri")))]
        pub fn buildChannelUri<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/tv/TvContract", java.flags == PUBLIC | STATIC, .name == "buildChannelUri", .descriptor == "(J)Landroid/net/Uri;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/media/tv/TvContract\0", "buildChannelUri\0", "(J)Landroid/net/Uri;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [buildChannelUriForPassthroughInput](https://developer.android.com/reference/android/media/tv/TvContract.html#buildChannelUriForPassthroughInput(java.lang.String))
        ///
        /// Required features: "android-net-Uri", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri", feature = "java-lang-String")))]
        pub fn buildChannelUriForPassthroughInput<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/tv/TvContract", java.flags == PUBLIC | STATIC, .name == "buildChannelUriForPassthroughInput", .descriptor == "(Ljava/lang/String;)Landroid/net/Uri;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/media/tv/TvContract\0", "buildChannelUriForPassthroughInput\0", "(Ljava/lang/String;)Landroid/net/Uri;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [buildChannelLogoUri](https://developer.android.com/reference/android/media/tv/TvContract.html#buildChannelLogoUri(long))
        ///
        /// Required features: "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri")))]
        pub fn buildChannelLogoUri_long<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/tv/TvContract", java.flags == PUBLIC | STATIC, .name == "buildChannelLogoUri", .descriptor == "(J)Landroid/net/Uri;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/media/tv/TvContract\0", "buildChannelLogoUri\0", "(J)Landroid/net/Uri;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [buildChannelLogoUri](https://developer.android.com/reference/android/media/tv/TvContract.html#buildChannelLogoUri(android.net.Uri))
        ///
        /// Required features: "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri")))]
        pub fn buildChannelLogoUri_Uri<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/tv/TvContract", java.flags == PUBLIC | STATIC, .name == "buildChannelLogoUri", .descriptor == "(Landroid/net/Uri;)Landroid/net/Uri;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/media/tv/TvContract\0", "buildChannelLogoUri\0", "(Landroid/net/Uri;)Landroid/net/Uri;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [buildChannelsUriForInput](https://developer.android.com/reference/android/media/tv/TvContract.html#buildChannelsUriForInput(java.lang.String))
        ///
        /// Required features: "android-net-Uri", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri", feature = "java-lang-String")))]
        pub fn buildChannelsUriForInput<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/tv/TvContract", java.flags == PUBLIC | STATIC, .name == "buildChannelsUriForInput", .descriptor == "(Ljava/lang/String;)Landroid/net/Uri;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/media/tv/TvContract\0", "buildChannelsUriForInput\0", "(Ljava/lang/String;)Landroid/net/Uri;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [buildProgramUri](https://developer.android.com/reference/android/media/tv/TvContract.html#buildProgramUri(long))
        ///
        /// Required features: "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri")))]
        pub fn buildProgramUri<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/tv/TvContract", java.flags == PUBLIC | STATIC, .name == "buildProgramUri", .descriptor == "(J)Landroid/net/Uri;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/media/tv/TvContract\0", "buildProgramUri\0", "(J)Landroid/net/Uri;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [buildProgramsUriForChannel](https://developer.android.com/reference/android/media/tv/TvContract.html#buildProgramsUriForChannel(long))
        ///
        /// Required features: "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri")))]
        pub fn buildProgramsUriForChannel_long<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/tv/TvContract", java.flags == PUBLIC | STATIC, .name == "buildProgramsUriForChannel", .descriptor == "(J)Landroid/net/Uri;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/media/tv/TvContract\0", "buildProgramsUriForChannel\0", "(J)Landroid/net/Uri;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [buildProgramsUriForChannel](https://developer.android.com/reference/android/media/tv/TvContract.html#buildProgramsUriForChannel(android.net.Uri))
        ///
        /// Required features: "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri")))]
        pub fn buildProgramsUriForChannel_Uri<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/tv/TvContract", java.flags == PUBLIC | STATIC, .name == "buildProgramsUriForChannel", .descriptor == "(Landroid/net/Uri;)Landroid/net/Uri;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/media/tv/TvContract\0", "buildProgramsUriForChannel\0", "(Landroid/net/Uri;)Landroid/net/Uri;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [buildProgramsUriForChannel](https://developer.android.com/reference/android/media/tv/TvContract.html#buildProgramsUriForChannel(long,%20long,%20long))
        ///
        /// Required features: "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri")))]
        pub fn buildProgramsUriForChannel_long_long_long<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i64, arg1: i64, arg2: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/tv/TvContract", java.flags == PUBLIC | STATIC, .name == "buildProgramsUriForChannel", .descriptor == "(JJJ)Landroid/net/Uri;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/media/tv/TvContract\0", "buildProgramsUriForChannel\0", "(JJJ)Landroid/net/Uri;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [buildProgramsUriForChannel](https://developer.android.com/reference/android/media/tv/TvContract.html#buildProgramsUriForChannel(android.net.Uri,%20long,%20long))
        ///
        /// Required features: "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri")))]
        pub fn buildProgramsUriForChannel_Uri_long_long<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg1: i64, arg2: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/tv/TvContract", java.flags == PUBLIC | STATIC, .name == "buildProgramsUriForChannel", .descriptor == "(Landroid/net/Uri;JJ)Landroid/net/Uri;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/media/tv/TvContract\0", "buildProgramsUriForChannel\0", "(Landroid/net/Uri;JJ)Landroid/net/Uri;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [buildRecordedProgramUri](https://developer.android.com/reference/android/media/tv/TvContract.html#buildRecordedProgramUri(long))
        ///
        /// Required features: "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri")))]
        pub fn buildRecordedProgramUri<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/tv/TvContract", java.flags == PUBLIC | STATIC, .name == "buildRecordedProgramUri", .descriptor == "(J)Landroid/net/Uri;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/media/tv/TvContract\0", "buildRecordedProgramUri\0", "(J)Landroid/net/Uri;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [buildPreviewProgramUri](https://developer.android.com/reference/android/media/tv/TvContract.html#buildPreviewProgramUri(long))
        ///
        /// Required features: "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri")))]
        pub fn buildPreviewProgramUri<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/tv/TvContract", java.flags == PUBLIC | STATIC, .name == "buildPreviewProgramUri", .descriptor == "(J)Landroid/net/Uri;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/media/tv/TvContract\0", "buildPreviewProgramUri\0", "(J)Landroid/net/Uri;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [buildPreviewProgramsUriForChannel](https://developer.android.com/reference/android/media/tv/TvContract.html#buildPreviewProgramsUriForChannel(long))
        ///
        /// Required features: "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri")))]
        pub fn buildPreviewProgramsUriForChannel_long<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/tv/TvContract", java.flags == PUBLIC | STATIC, .name == "buildPreviewProgramsUriForChannel", .descriptor == "(J)Landroid/net/Uri;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/media/tv/TvContract\0", "buildPreviewProgramsUriForChannel\0", "(J)Landroid/net/Uri;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [buildPreviewProgramsUriForChannel](https://developer.android.com/reference/android/media/tv/TvContract.html#buildPreviewProgramsUriForChannel(android.net.Uri))
        ///
        /// Required features: "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri")))]
        pub fn buildPreviewProgramsUriForChannel_Uri<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/tv/TvContract", java.flags == PUBLIC | STATIC, .name == "buildPreviewProgramsUriForChannel", .descriptor == "(Landroid/net/Uri;)Landroid/net/Uri;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/media/tv/TvContract\0", "buildPreviewProgramsUriForChannel\0", "(Landroid/net/Uri;)Landroid/net/Uri;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [buildWatchNextProgramUri](https://developer.android.com/reference/android/media/tv/TvContract.html#buildWatchNextProgramUri(long))
        ///
        /// Required features: "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri")))]
        pub fn buildWatchNextProgramUri<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/tv/TvContract", java.flags == PUBLIC | STATIC, .name == "buildWatchNextProgramUri", .descriptor == "(J)Landroid/net/Uri;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/media/tv/TvContract\0", "buildWatchNextProgramUri\0", "(J)Landroid/net/Uri;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isChannelUri](https://developer.android.com/reference/android/media/tv/TvContract.html#isChannelUri(android.net.Uri))
        ///
        /// Required features: "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri")))]
        pub fn isChannelUri<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/tv/TvContract", java.flags == PUBLIC | STATIC, .name == "isChannelUri", .descriptor == "(Landroid/net/Uri;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/media/tv/TvContract\0", "isChannelUri\0", "(Landroid/net/Uri;)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isChannelUriForTunerInput](https://developer.android.com/reference/android/media/tv/TvContract.html#isChannelUriForTunerInput(android.net.Uri))
        ///
        /// Required features: "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri")))]
        pub fn isChannelUriForTunerInput<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/tv/TvContract", java.flags == PUBLIC | STATIC, .name == "isChannelUriForTunerInput", .descriptor == "(Landroid/net/Uri;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/media/tv/TvContract\0", "isChannelUriForTunerInput\0", "(Landroid/net/Uri;)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isChannelUriForPassthroughInput](https://developer.android.com/reference/android/media/tv/TvContract.html#isChannelUriForPassthroughInput(android.net.Uri))
        ///
        /// Required features: "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri")))]
        pub fn isChannelUriForPassthroughInput<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/tv/TvContract", java.flags == PUBLIC | STATIC, .name == "isChannelUriForPassthroughInput", .descriptor == "(Landroid/net/Uri;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/media/tv/TvContract\0", "isChannelUriForPassthroughInput\0", "(Landroid/net/Uri;)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isProgramUri](https://developer.android.com/reference/android/media/tv/TvContract.html#isProgramUri(android.net.Uri))
        ///
        /// Required features: "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri")))]
        pub fn isProgramUri<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/tv/TvContract", java.flags == PUBLIC | STATIC, .name == "isProgramUri", .descriptor == "(Landroid/net/Uri;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/media/tv/TvContract\0", "isProgramUri\0", "(Landroid/net/Uri;)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isRecordedProgramUri](https://developer.android.com/reference/android/media/tv/TvContract.html#isRecordedProgramUri(android.net.Uri))
        ///
        /// Required features: "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri")))]
        pub fn isRecordedProgramUri<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/tv/TvContract", java.flags == PUBLIC | STATIC, .name == "isRecordedProgramUri", .descriptor == "(Landroid/net/Uri;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/media/tv/TvContract\0", "isRecordedProgramUri\0", "(Landroid/net/Uri;)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [requestChannelBrowsable](https://developer.android.com/reference/android/media/tv/TvContract.html#requestChannelBrowsable(android.content.Context,%20long))
        ///
        /// Required features: "android-content-Context"
        #[cfg(any(feature = "all", all(feature = "android-content-Context")))]
        pub fn requestChannelBrowsable<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: i64) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/tv/TvContract", java.flags == PUBLIC | STATIC, .name == "requestChannelBrowsable", .descriptor == "(Landroid/content/Context;J)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/media/tv/TvContract\0", "requestChannelBrowsable\0", "(Landroid/content/Context;J)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [ACTION_INITIALIZE_PROGRAMS](https://developer.android.com/reference/android/media/tv/TvContract.html#ACTION_INITIALIZE_PROGRAMS)
        pub const ACTION_INITIALIZE_PROGRAMS : &'static str = "android.media.tv.action.INITIALIZE_PROGRAMS";

        /// public static final [ACTION_PREVIEW_PROGRAM_ADDED_TO_WATCH_NEXT](https://developer.android.com/reference/android/media/tv/TvContract.html#ACTION_PREVIEW_PROGRAM_ADDED_TO_WATCH_NEXT)
        pub const ACTION_PREVIEW_PROGRAM_ADDED_TO_WATCH_NEXT : &'static str = "android.media.tv.action.PREVIEW_PROGRAM_ADDED_TO_WATCH_NEXT";

        /// public static final [ACTION_PREVIEW_PROGRAM_BROWSABLE_DISABLED](https://developer.android.com/reference/android/media/tv/TvContract.html#ACTION_PREVIEW_PROGRAM_BROWSABLE_DISABLED)
        pub const ACTION_PREVIEW_PROGRAM_BROWSABLE_DISABLED : &'static str = "android.media.tv.action.PREVIEW_PROGRAM_BROWSABLE_DISABLED";

        /// public static final [ACTION_REQUEST_CHANNEL_BROWSABLE](https://developer.android.com/reference/android/media/tv/TvContract.html#ACTION_REQUEST_CHANNEL_BROWSABLE)
        pub const ACTION_REQUEST_CHANNEL_BROWSABLE : &'static str = "android.media.tv.action.REQUEST_CHANNEL_BROWSABLE";

        /// public static final [ACTION_WATCH_NEXT_PROGRAM_BROWSABLE_DISABLED](https://developer.android.com/reference/android/media/tv/TvContract.html#ACTION_WATCH_NEXT_PROGRAM_BROWSABLE_DISABLED)
        pub const ACTION_WATCH_NEXT_PROGRAM_BROWSABLE_DISABLED : &'static str = "android.media.tv.action.WATCH_NEXT_PROGRAM_BROWSABLE_DISABLED";

        /// public static final [AUTHORITY](https://developer.android.com/reference/android/media/tv/TvContract.html#AUTHORITY)
        pub const AUTHORITY : &'static str = "android.media.tv";

        /// public static final [EXTRA_CHANNEL_ID](https://developer.android.com/reference/android/media/tv/TvContract.html#EXTRA_CHANNEL_ID)
        pub const EXTRA_CHANNEL_ID : &'static str = "android.media.tv.extra.CHANNEL_ID";

        /// public static final [EXTRA_PREVIEW_PROGRAM_ID](https://developer.android.com/reference/android/media/tv/TvContract.html#EXTRA_PREVIEW_PROGRAM_ID)
        pub const EXTRA_PREVIEW_PROGRAM_ID : &'static str = "android.media.tv.extra.PREVIEW_PROGRAM_ID";

        /// public static final [EXTRA_WATCH_NEXT_PROGRAM_ID](https://developer.android.com/reference/android/media/tv/TvContract.html#EXTRA_WATCH_NEXT_PROGRAM_ID)
        pub const EXTRA_WATCH_NEXT_PROGRAM_ID : &'static str = "android.media.tv.extra.WATCH_NEXT_PROGRAM_ID";
    }
}
