// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-media-MediaRouter"))]
__jni_bindgen! {
    /// public class [MediaRouter](https://developer.android.com/reference/android/media/MediaRouter.html)
    ///
    /// Required feature: android-media-MediaRouter
    public class MediaRouter ("android/media/MediaRouter") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [MediaRouter](https://developer.android.com/reference/android/media/MediaRouter.html#MediaRouter(android.content.Context))
        // ///
        // /// Required features: "android-content-Context"
        // #[cfg(any(feature = "all", all(feature = "android-content-Context")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::media::MediaRouter>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/media/MediaRouter", java.flags == (empty), .name == "<init>", .descriptor == "(Landroid/content/Context;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRouter\0", "<init>\0", "(Landroid/content/Context;)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getDefaultRoute](https://developer.android.com/reference/android/media/MediaRouter.html#getDefaultRoute())
        ///
        /// Required features: "android-media-MediaRouter_RouteInfo"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaRouter_RouteInfo")))]
        pub fn getDefaultRoute<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::MediaRouter_RouteInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRouter", java.flags == PUBLIC, .name == "getDefaultRoute", .descriptor == "()Landroid/media/MediaRouter$RouteInfo;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRouter\0", "getDefaultRoute\0", "()Landroid/media/MediaRouter$RouteInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSelectedRoute](https://developer.android.com/reference/android/media/MediaRouter.html#getSelectedRoute(int))
        ///
        /// Required features: "android-media-MediaRouter_RouteInfo"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaRouter_RouteInfo")))]
        pub fn getSelectedRoute<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::MediaRouter_RouteInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRouter", java.flags == PUBLIC, .name == "getSelectedRoute", .descriptor == "(I)Landroid/media/MediaRouter$RouteInfo;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRouter\0", "getSelectedRoute\0", "(I)Landroid/media/MediaRouter$RouteInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addCallback](https://developer.android.com/reference/android/media/MediaRouter.html#addCallback(int,%20android.media.MediaRouter.Callback))
        ///
        /// Required features: "android-media-MediaRouter_Callback"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaRouter_Callback")))]
        pub fn addCallback_int_Callback<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaRouter_Callback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRouter", java.flags == PUBLIC, .name == "addCallback", .descriptor == "(ILandroid/media/MediaRouter$Callback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRouter\0", "addCallback\0", "(ILandroid/media/MediaRouter$Callback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addCallback](https://developer.android.com/reference/android/media/MediaRouter.html#addCallback(int,%20android.media.MediaRouter.Callback,%20int))
        ///
        /// Required features: "android-media-MediaRouter_Callback"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaRouter_Callback")))]
        pub fn addCallback_int_Callback_int<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaRouter_Callback>>, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRouter", java.flags == PUBLIC, .name == "addCallback", .descriptor == "(ILandroid/media/MediaRouter$Callback;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRouter\0", "addCallback\0", "(ILandroid/media/MediaRouter$Callback;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeCallback](https://developer.android.com/reference/android/media/MediaRouter.html#removeCallback(android.media.MediaRouter.Callback))
        ///
        /// Required features: "android-media-MediaRouter_Callback"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaRouter_Callback")))]
        pub fn removeCallback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaRouter_Callback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRouter", java.flags == PUBLIC, .name == "removeCallback", .descriptor == "(Landroid/media/MediaRouter$Callback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRouter\0", "removeCallback\0", "(Landroid/media/MediaRouter$Callback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [selectRoute](https://developer.android.com/reference/android/media/MediaRouter.html#selectRoute(int,%20android.media.MediaRouter.RouteInfo))
        ///
        /// Required features: "android-media-MediaRouter_RouteInfo"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaRouter_RouteInfo")))]
        pub fn selectRoute<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaRouter_RouteInfo>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRouter", java.flags == PUBLIC, .name == "selectRoute", .descriptor == "(ILandroid/media/MediaRouter$RouteInfo;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRouter\0", "selectRoute\0", "(ILandroid/media/MediaRouter$RouteInfo;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addUserRoute](https://developer.android.com/reference/android/media/MediaRouter.html#addUserRoute(android.media.MediaRouter.UserRouteInfo))
        ///
        /// Required features: "android-media-MediaRouter_UserRouteInfo"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaRouter_UserRouteInfo")))]
        pub fn addUserRoute<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaRouter_UserRouteInfo>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRouter", java.flags == PUBLIC, .name == "addUserRoute", .descriptor == "(Landroid/media/MediaRouter$UserRouteInfo;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRouter\0", "addUserRoute\0", "(Landroid/media/MediaRouter$UserRouteInfo;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeUserRoute](https://developer.android.com/reference/android/media/MediaRouter.html#removeUserRoute(android.media.MediaRouter.UserRouteInfo))
        ///
        /// Required features: "android-media-MediaRouter_UserRouteInfo"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaRouter_UserRouteInfo")))]
        pub fn removeUserRoute<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaRouter_UserRouteInfo>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRouter", java.flags == PUBLIC, .name == "removeUserRoute", .descriptor == "(Landroid/media/MediaRouter$UserRouteInfo;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRouter\0", "removeUserRoute\0", "(Landroid/media/MediaRouter$UserRouteInfo;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clearUserRoutes](https://developer.android.com/reference/android/media/MediaRouter.html#clearUserRoutes())
        pub fn clearUserRoutes<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRouter", java.flags == PUBLIC, .name == "clearUserRoutes", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRouter\0", "clearUserRoutes\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCategoryCount](https://developer.android.com/reference/android/media/MediaRouter.html#getCategoryCount())
        pub fn getCategoryCount<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRouter", java.flags == PUBLIC, .name == "getCategoryCount", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRouter\0", "getCategoryCount\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCategoryAt](https://developer.android.com/reference/android/media/MediaRouter.html#getCategoryAt(int))
        ///
        /// Required features: "android-media-MediaRouter_RouteCategory"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaRouter_RouteCategory")))]
        pub fn getCategoryAt<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::MediaRouter_RouteCategory>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRouter", java.flags == PUBLIC, .name == "getCategoryAt", .descriptor == "(I)Landroid/media/MediaRouter$RouteCategory;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRouter\0", "getCategoryAt\0", "(I)Landroid/media/MediaRouter$RouteCategory;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRouteCount](https://developer.android.com/reference/android/media/MediaRouter.html#getRouteCount())
        pub fn getRouteCount<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRouter", java.flags == PUBLIC, .name == "getRouteCount", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRouter\0", "getRouteCount\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRouteAt](https://developer.android.com/reference/android/media/MediaRouter.html#getRouteAt(int))
        ///
        /// Required features: "android-media-MediaRouter_RouteInfo"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaRouter_RouteInfo")))]
        pub fn getRouteAt<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::MediaRouter_RouteInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRouter", java.flags == PUBLIC, .name == "getRouteAt", .descriptor == "(I)Landroid/media/MediaRouter$RouteInfo;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRouter\0", "getRouteAt\0", "(I)Landroid/media/MediaRouter$RouteInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createUserRoute](https://developer.android.com/reference/android/media/MediaRouter.html#createUserRoute(android.media.MediaRouter.RouteCategory))
        ///
        /// Required features: "android-media-MediaRouter_RouteCategory", "android-media-MediaRouter_UserRouteInfo"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaRouter_RouteCategory", feature = "android-media-MediaRouter_UserRouteInfo")))]
        pub fn createUserRoute<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaRouter_RouteCategory>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::MediaRouter_UserRouteInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRouter", java.flags == PUBLIC, .name == "createUserRoute", .descriptor == "(Landroid/media/MediaRouter$RouteCategory;)Landroid/media/MediaRouter$UserRouteInfo;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRouter\0", "createUserRoute\0", "(Landroid/media/MediaRouter$RouteCategory;)Landroid/media/MediaRouter$UserRouteInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createRouteCategory](https://developer.android.com/reference/android/media/MediaRouter.html#createRouteCategory(java.lang.CharSequence,%20boolean))
        ///
        /// Required features: "android-media-MediaRouter_RouteCategory", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaRouter_RouteCategory", feature = "java-lang-CharSequence")))]
        pub fn createRouteCategory_CharSequence_boolean<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg1: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::MediaRouter_RouteCategory>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRouter", java.flags == PUBLIC, .name == "createRouteCategory", .descriptor == "(Ljava/lang/CharSequence;Z)Landroid/media/MediaRouter$RouteCategory;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRouter\0", "createRouteCategory\0", "(Ljava/lang/CharSequence;Z)Landroid/media/MediaRouter$RouteCategory;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createRouteCategory](https://developer.android.com/reference/android/media/MediaRouter.html#createRouteCategory(int,%20boolean))
        ///
        /// Required features: "android-media-MediaRouter_RouteCategory"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaRouter_RouteCategory")))]
        pub fn createRouteCategory_int_boolean<'env>(&'env self, arg0: i32, arg1: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::MediaRouter_RouteCategory>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRouter", java.flags == PUBLIC, .name == "createRouteCategory", .descriptor == "(IZ)Landroid/media/MediaRouter$RouteCategory;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRouter\0", "createRouteCategory\0", "(IZ)Landroid/media/MediaRouter$RouteCategory;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [CALLBACK_FLAG_PERFORM_ACTIVE_SCAN](https://developer.android.com/reference/android/media/MediaRouter.html#CALLBACK_FLAG_PERFORM_ACTIVE_SCAN)
        pub const CALLBACK_FLAG_PERFORM_ACTIVE_SCAN : i32 = 1;

        /// public static final [CALLBACK_FLAG_UNFILTERED_EVENTS](https://developer.android.com/reference/android/media/MediaRouter.html#CALLBACK_FLAG_UNFILTERED_EVENTS)
        pub const CALLBACK_FLAG_UNFILTERED_EVENTS : i32 = 2;

        /// public static final [ROUTE_TYPE_LIVE_AUDIO](https://developer.android.com/reference/android/media/MediaRouter.html#ROUTE_TYPE_LIVE_AUDIO)
        pub const ROUTE_TYPE_LIVE_AUDIO : i32 = 1;

        /// public static final [ROUTE_TYPE_LIVE_VIDEO](https://developer.android.com/reference/android/media/MediaRouter.html#ROUTE_TYPE_LIVE_VIDEO)
        pub const ROUTE_TYPE_LIVE_VIDEO : i32 = 2;

        /// public static final [ROUTE_TYPE_USER](https://developer.android.com/reference/android/media/MediaRouter.html#ROUTE_TYPE_USER)
        pub const ROUTE_TYPE_USER : i32 = 8388608;
    }
}
