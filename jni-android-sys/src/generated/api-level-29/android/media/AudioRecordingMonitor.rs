// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-media-AudioRecordingMonitor"))]
__jni_bindgen! {
    /// public interface [AudioRecordingMonitor](https://developer.android.com/reference/android/media/AudioRecordingMonitor.html)
    ///
    /// Required feature: android-media-AudioRecordingMonitor
    public interface AudioRecordingMonitor ("android/media/AudioRecordingMonitor") extends crate::java::lang::Object {

        /// [registerAudioRecordingCallback](https://developer.android.com/reference/android/media/AudioRecordingMonitor.html#registerAudioRecordingCallback(java.util.concurrent.Executor,%20android.media.AudioManager.AudioRecordingCallback))
        ///
        /// Required features: "android-media-AudioManager_AudioRecordingCallback", "java-util-concurrent-Executor"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioManager_AudioRecordingCallback", feature = "java-util-concurrent-Executor")))]
        pub fn registerAudioRecordingCallback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::AudioManager_AudioRecordingCallback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioRecordingMonitor", java.flags == PUBLIC | ABSTRACT, .name == "registerAudioRecordingCallback", .descriptor == "(Ljava/util/concurrent/Executor;Landroid/media/AudioManager$AudioRecordingCallback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioRecordingMonitor\0", "registerAudioRecordingCallback\0", "(Ljava/util/concurrent/Executor;Landroid/media/AudioManager$AudioRecordingCallback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unregisterAudioRecordingCallback](https://developer.android.com/reference/android/media/AudioRecordingMonitor.html#unregisterAudioRecordingCallback(android.media.AudioManager.AudioRecordingCallback))
        ///
        /// Required features: "android-media-AudioManager_AudioRecordingCallback"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioManager_AudioRecordingCallback")))]
        pub fn unregisterAudioRecordingCallback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::AudioManager_AudioRecordingCallback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioRecordingMonitor", java.flags == PUBLIC | ABSTRACT, .name == "unregisterAudioRecordingCallback", .descriptor == "(Landroid/media/AudioManager$AudioRecordingCallback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioRecordingMonitor\0", "unregisterAudioRecordingCallback\0", "(Landroid/media/AudioManager$AudioRecordingCallback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getActiveRecordingConfiguration](https://developer.android.com/reference/android/media/AudioRecordingMonitor.html#getActiveRecordingConfiguration())
        ///
        /// Required features: "android-media-AudioRecordingConfiguration"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioRecordingConfiguration")))]
        pub fn getActiveRecordingConfiguration<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::AudioRecordingConfiguration>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioRecordingMonitor", java.flags == PUBLIC | ABSTRACT, .name == "getActiveRecordingConfiguration", .descriptor == "()Landroid/media/AudioRecordingConfiguration;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioRecordingMonitor\0", "getActiveRecordingConfiguration\0", "()Landroid/media/AudioRecordingConfiguration;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
