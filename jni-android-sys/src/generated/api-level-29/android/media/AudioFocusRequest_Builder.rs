// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-media-AudioFocusRequest_Builder"))]
__jni_bindgen! {
    /// public final class [AudioFocusRequest.Builder](https://developer.android.com/reference/android/media/AudioFocusRequest.Builder.html)
    ///
    /// Required feature: android-media-AudioFocusRequest_Builder
    public final class AudioFocusRequest_Builder ("android/media/AudioFocusRequest$Builder") extends crate::java::lang::Object {

        /// [Builder](https://developer.android.com/reference/android/media/AudioFocusRequest.Builder.html#Builder(int))
        pub fn new_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::media::AudioFocusRequest_Builder>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioFocusRequest$Builder", java.flags == PUBLIC, .name == "<init>", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioFocusRequest$Builder\0", "<init>\0", "(I)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [Builder](https://developer.android.com/reference/android/media/AudioFocusRequest.Builder.html#Builder(android.media.AudioFocusRequest))
        ///
        /// Required features: "android-media-AudioFocusRequest"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioFocusRequest")))]
        pub fn new_AudioFocusRequest<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::AudioFocusRequest>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::media::AudioFocusRequest_Builder>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioFocusRequest$Builder", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/media/AudioFocusRequest;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioFocusRequest$Builder\0", "<init>\0", "(Landroid/media/AudioFocusRequest;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setFocusGain](https://developer.android.com/reference/android/media/AudioFocusRequest.Builder.html#setFocusGain(int))
        ///
        /// Required features: "android-media-AudioFocusRequest_Builder"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioFocusRequest_Builder")))]
        pub fn setFocusGain<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::AudioFocusRequest_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioFocusRequest$Builder", java.flags == PUBLIC, .name == "setFocusGain", .descriptor == "(I)Landroid/media/AudioFocusRequest$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioFocusRequest$Builder\0", "setFocusGain\0", "(I)Landroid/media/AudioFocusRequest$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOnAudioFocusChangeListener](https://developer.android.com/reference/android/media/AudioFocusRequest.Builder.html#setOnAudioFocusChangeListener(android.media.AudioManager.OnAudioFocusChangeListener))
        ///
        /// Required features: "android-media-AudioFocusRequest_Builder", "android-media-AudioManager_OnAudioFocusChangeListener"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioFocusRequest_Builder", feature = "android-media-AudioManager_OnAudioFocusChangeListener")))]
        pub fn setOnAudioFocusChangeListener_OnAudioFocusChangeListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::AudioManager_OnAudioFocusChangeListener>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::AudioFocusRequest_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioFocusRequest$Builder", java.flags == PUBLIC, .name == "setOnAudioFocusChangeListener", .descriptor == "(Landroid/media/AudioManager$OnAudioFocusChangeListener;)Landroid/media/AudioFocusRequest$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioFocusRequest$Builder\0", "setOnAudioFocusChangeListener\0", "(Landroid/media/AudioManager$OnAudioFocusChangeListener;)Landroid/media/AudioFocusRequest$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOnAudioFocusChangeListener](https://developer.android.com/reference/android/media/AudioFocusRequest.Builder.html#setOnAudioFocusChangeListener(android.media.AudioManager.OnAudioFocusChangeListener,%20android.os.Handler))
        ///
        /// Required features: "android-media-AudioFocusRequest_Builder", "android-media-AudioManager_OnAudioFocusChangeListener", "android-os-Handler"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioFocusRequest_Builder", feature = "android-media-AudioManager_OnAudioFocusChangeListener", feature = "android-os-Handler")))]
        pub fn setOnAudioFocusChangeListener_OnAudioFocusChangeListener_Handler<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::AudioManager_OnAudioFocusChangeListener>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::AudioFocusRequest_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioFocusRequest$Builder", java.flags == PUBLIC, .name == "setOnAudioFocusChangeListener", .descriptor == "(Landroid/media/AudioManager$OnAudioFocusChangeListener;Landroid/os/Handler;)Landroid/media/AudioFocusRequest$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioFocusRequest$Builder\0", "setOnAudioFocusChangeListener\0", "(Landroid/media/AudioManager$OnAudioFocusChangeListener;Landroid/os/Handler;)Landroid/media/AudioFocusRequest$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAudioAttributes](https://developer.android.com/reference/android/media/AudioFocusRequest.Builder.html#setAudioAttributes(android.media.AudioAttributes))
        ///
        /// Required features: "android-media-AudioAttributes", "android-media-AudioFocusRequest_Builder"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioAttributes", feature = "android-media-AudioFocusRequest_Builder")))]
        pub fn setAudioAttributes<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::AudioAttributes>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::AudioFocusRequest_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioFocusRequest$Builder", java.flags == PUBLIC, .name == "setAudioAttributes", .descriptor == "(Landroid/media/AudioAttributes;)Landroid/media/AudioFocusRequest$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioFocusRequest$Builder\0", "setAudioAttributes\0", "(Landroid/media/AudioAttributes;)Landroid/media/AudioFocusRequest$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setWillPauseWhenDucked](https://developer.android.com/reference/android/media/AudioFocusRequest.Builder.html#setWillPauseWhenDucked(boolean))
        ///
        /// Required features: "android-media-AudioFocusRequest_Builder"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioFocusRequest_Builder")))]
        pub fn setWillPauseWhenDucked<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::AudioFocusRequest_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioFocusRequest$Builder", java.flags == PUBLIC, .name == "setWillPauseWhenDucked", .descriptor == "(Z)Landroid/media/AudioFocusRequest$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioFocusRequest$Builder\0", "setWillPauseWhenDucked\0", "(Z)Landroid/media/AudioFocusRequest$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAcceptsDelayedFocusGain](https://developer.android.com/reference/android/media/AudioFocusRequest.Builder.html#setAcceptsDelayedFocusGain(boolean))
        ///
        /// Required features: "android-media-AudioFocusRequest_Builder"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioFocusRequest_Builder")))]
        pub fn setAcceptsDelayedFocusGain<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::AudioFocusRequest_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioFocusRequest$Builder", java.flags == PUBLIC, .name == "setAcceptsDelayedFocusGain", .descriptor == "(Z)Landroid/media/AudioFocusRequest$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioFocusRequest$Builder\0", "setAcceptsDelayedFocusGain\0", "(Z)Landroid/media/AudioFocusRequest$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setForceDucking](https://developer.android.com/reference/android/media/AudioFocusRequest.Builder.html#setForceDucking(boolean))
        ///
        /// Required features: "android-media-AudioFocusRequest_Builder"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioFocusRequest_Builder")))]
        pub fn setForceDucking<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::AudioFocusRequest_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioFocusRequest$Builder", java.flags == PUBLIC, .name == "setForceDucking", .descriptor == "(Z)Landroid/media/AudioFocusRequest$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioFocusRequest$Builder\0", "setForceDucking\0", "(Z)Landroid/media/AudioFocusRequest$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [build](https://developer.android.com/reference/android/media/AudioFocusRequest.Builder.html#build())
        ///
        /// Required features: "android-media-AudioFocusRequest"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioFocusRequest")))]
        pub fn build<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::AudioFocusRequest>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioFocusRequest$Builder", java.flags == PUBLIC, .name == "build", .descriptor == "()Landroid/media/AudioFocusRequest;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioFocusRequest$Builder\0", "build\0", "()Landroid/media/AudioFocusRequest;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
