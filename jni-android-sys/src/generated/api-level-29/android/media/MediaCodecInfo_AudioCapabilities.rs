// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-media-MediaCodecInfo_AudioCapabilities"))]
__jni_bindgen! {
    /// public final class [MediaCodecInfo.AudioCapabilities](https://developer.android.com/reference/android/media/MediaCodecInfo.AudioCapabilities.html)
    ///
    /// Required feature: android-media-MediaCodecInfo_AudioCapabilities
    public final class MediaCodecInfo_AudioCapabilities ("android/media/MediaCodecInfo$AudioCapabilities") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [AudioCapabilities](https://developer.android.com/reference/android/media/MediaCodecInfo.AudioCapabilities.html#AudioCapabilities())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::media::MediaCodecInfo_AudioCapabilities>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/media/MediaCodecInfo$AudioCapabilities", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodecInfo$AudioCapabilities\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getBitrateRange](https://developer.android.com/reference/android/media/MediaCodecInfo.AudioCapabilities.html#getBitrateRange())
        ///
        /// Required features: "android-util-Range"
        #[cfg(any(feature = "all", all(feature = "android-util-Range")))]
        pub fn getBitrateRange<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::util::Range>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodecInfo$AudioCapabilities", java.flags == PUBLIC, .name == "getBitrateRange", .descriptor == "()Landroid/util/Range;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodecInfo$AudioCapabilities\0", "getBitrateRange\0", "()Landroid/util/Range;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSupportedSampleRates](https://developer.android.com/reference/android/media/MediaCodecInfo.AudioCapabilities.html#getSupportedSampleRates())
        pub fn getSupportedSampleRates<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::IntArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodecInfo$AudioCapabilities", java.flags == PUBLIC, .name == "getSupportedSampleRates", .descriptor == "()[I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodecInfo$AudioCapabilities\0", "getSupportedSampleRates\0", "()[I\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSupportedSampleRateRanges](https://developer.android.com/reference/android/media/MediaCodecInfo.AudioCapabilities.html#getSupportedSampleRateRanges())
        ///
        /// Required features: "android-util-Range"
        #[cfg(any(feature = "all", all(feature = "android-util-Range")))]
        pub fn getSupportedSampleRateRanges<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::android::util::Range, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodecInfo$AudioCapabilities", java.flags == PUBLIC, .name == "getSupportedSampleRateRanges", .descriptor == "()[Landroid/util/Range;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodecInfo$AudioCapabilities\0", "getSupportedSampleRateRanges\0", "()[Landroid/util/Range;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMaxInputChannelCount](https://developer.android.com/reference/android/media/MediaCodecInfo.AudioCapabilities.html#getMaxInputChannelCount())
        pub fn getMaxInputChannelCount<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodecInfo$AudioCapabilities", java.flags == PUBLIC, .name == "getMaxInputChannelCount", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodecInfo$AudioCapabilities\0", "getMaxInputChannelCount\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isSampleRateSupported](https://developer.android.com/reference/android/media/MediaCodecInfo.AudioCapabilities.html#isSampleRateSupported(int))
        pub fn isSampleRateSupported<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodecInfo$AudioCapabilities", java.flags == PUBLIC, .name == "isSampleRateSupported", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodecInfo$AudioCapabilities\0", "isSampleRateSupported\0", "(I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
