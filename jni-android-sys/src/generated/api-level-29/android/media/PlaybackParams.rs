// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-media-PlaybackParams"))]
__jni_bindgen! {
    /// public final class [PlaybackParams](https://developer.android.com/reference/android/media/PlaybackParams.html)
    ///
    /// Required feature: android-media-PlaybackParams
    public final class PlaybackParams ("android/media/PlaybackParams") extends crate::java::lang::Object, implements crate::android::os::Parcelable {

        /// [PlaybackParams](https://developer.android.com/reference/android/media/PlaybackParams.html#PlaybackParams())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::media::PlaybackParams>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/PlaybackParams", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/PlaybackParams\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [allowDefaults](https://developer.android.com/reference/android/media/PlaybackParams.html#allowDefaults())
        ///
        /// Required features: "android-media-PlaybackParams"
        #[cfg(any(feature = "all", all(feature = "android-media-PlaybackParams")))]
        pub fn allowDefaults<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::PlaybackParams>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/PlaybackParams", java.flags == PUBLIC, .name == "allowDefaults", .descriptor == "()Landroid/media/PlaybackParams;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/PlaybackParams\0", "allowDefaults\0", "()Landroid/media/PlaybackParams;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAudioFallbackMode](https://developer.android.com/reference/android/media/PlaybackParams.html#setAudioFallbackMode(int))
        ///
        /// Required features: "android-media-PlaybackParams"
        #[cfg(any(feature = "all", all(feature = "android-media-PlaybackParams")))]
        pub fn setAudioFallbackMode<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::PlaybackParams>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/PlaybackParams", java.flags == PUBLIC, .name == "setAudioFallbackMode", .descriptor == "(I)Landroid/media/PlaybackParams;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/PlaybackParams\0", "setAudioFallbackMode\0", "(I)Landroid/media/PlaybackParams;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAudioFallbackMode](https://developer.android.com/reference/android/media/PlaybackParams.html#getAudioFallbackMode())
        pub fn getAudioFallbackMode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/PlaybackParams", java.flags == PUBLIC, .name == "getAudioFallbackMode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/PlaybackParams\0", "getAudioFallbackMode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPitch](https://developer.android.com/reference/android/media/PlaybackParams.html#setPitch(float))
        ///
        /// Required features: "android-media-PlaybackParams"
        #[cfg(any(feature = "all", all(feature = "android-media-PlaybackParams")))]
        pub fn setPitch<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::PlaybackParams>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/PlaybackParams", java.flags == PUBLIC, .name == "setPitch", .descriptor == "(F)Landroid/media/PlaybackParams;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/PlaybackParams\0", "setPitch\0", "(F)Landroid/media/PlaybackParams;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPitch](https://developer.android.com/reference/android/media/PlaybackParams.html#getPitch())
        pub fn getPitch<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/PlaybackParams", java.flags == PUBLIC, .name == "getPitch", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/PlaybackParams\0", "getPitch\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setSpeed](https://developer.android.com/reference/android/media/PlaybackParams.html#setSpeed(float))
        ///
        /// Required features: "android-media-PlaybackParams"
        #[cfg(any(feature = "all", all(feature = "android-media-PlaybackParams")))]
        pub fn setSpeed<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::PlaybackParams>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/PlaybackParams", java.flags == PUBLIC, .name == "setSpeed", .descriptor == "(F)Landroid/media/PlaybackParams;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/PlaybackParams\0", "setSpeed\0", "(F)Landroid/media/PlaybackParams;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSpeed](https://developer.android.com/reference/android/media/PlaybackParams.html#getSpeed())
        pub fn getSpeed<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/PlaybackParams", java.flags == PUBLIC, .name == "getSpeed", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/PlaybackParams\0", "getSpeed\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [describeContents](https://developer.android.com/reference/android/media/PlaybackParams.html#describeContents())
        pub fn describeContents<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/PlaybackParams", java.flags == PUBLIC, .name == "describeContents", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/PlaybackParams\0", "describeContents\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [writeToParcel](https://developer.android.com/reference/android/media/PlaybackParams.html#writeToParcel(android.os.Parcel,%20int))
        ///
        /// Required features: "android-os-Parcel"
        #[cfg(any(feature = "all", all(feature = "android-os-Parcel")))]
        pub fn writeToParcel<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Parcel>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/PlaybackParams", java.flags == PUBLIC, .name == "writeToParcel", .descriptor == "(Landroid/os/Parcel;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/PlaybackParams\0", "writeToParcel\0", "(Landroid/os/Parcel;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [AUDIO_FALLBACK_MODE_DEFAULT](https://developer.android.com/reference/android/media/PlaybackParams.html#AUDIO_FALLBACK_MODE_DEFAULT)
        pub const AUDIO_FALLBACK_MODE_DEFAULT : i32 = 0;

        /// public static final [AUDIO_FALLBACK_MODE_FAIL](https://developer.android.com/reference/android/media/PlaybackParams.html#AUDIO_FALLBACK_MODE_FAIL)
        pub const AUDIO_FALLBACK_MODE_FAIL : i32 = 2;

        /// public static final [AUDIO_FALLBACK_MODE_MUTE](https://developer.android.com/reference/android/media/PlaybackParams.html#AUDIO_FALLBACK_MODE_MUTE)
        pub const AUDIO_FALLBACK_MODE_MUTE : i32 = 1;

        /// **get** public static final [CREATOR](https://developer.android.com/reference/android/media/PlaybackParams.html#CREATOR)
        ///
        /// Required feature: android-os-Parcelable_Creator
        #[cfg(any(feature = "all", feature = "android-os-Parcelable_Creator"))]
        pub fn CREATOR<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Parcelable_Creator>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/media/PlaybackParams\0", "CREATOR\0", "Landroid/os/Parcelable$Creator;\0");
                env.get_static_object_field(class, field)
            }
        }
    }
}
