// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-media-AudioAttributes_Builder"))]
__jni_bindgen! {
    /// public class [AudioAttributes.Builder](https://developer.android.com/reference/android/media/AudioAttributes.Builder.html)
    ///
    /// Required feature: android-media-AudioAttributes_Builder
    public class AudioAttributes_Builder ("android/media/AudioAttributes$Builder") extends crate::java::lang::Object {

        /// [Builder](https://developer.android.com/reference/android/media/AudioAttributes.Builder.html#Builder())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::media::AudioAttributes_Builder>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioAttributes$Builder", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioAttributes$Builder\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [Builder](https://developer.android.com/reference/android/media/AudioAttributes.Builder.html#Builder(android.media.AudioAttributes))
        ///
        /// Required features: "android-media-AudioAttributes"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioAttributes")))]
        pub fn new_AudioAttributes<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::AudioAttributes>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::media::AudioAttributes_Builder>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioAttributes$Builder", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/media/AudioAttributes;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioAttributes$Builder\0", "<init>\0", "(Landroid/media/AudioAttributes;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [build](https://developer.android.com/reference/android/media/AudioAttributes.Builder.html#build())
        ///
        /// Required features: "android-media-AudioAttributes"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioAttributes")))]
        pub fn build<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::AudioAttributes>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioAttributes$Builder", java.flags == PUBLIC, .name == "build", .descriptor == "()Landroid/media/AudioAttributes;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioAttributes$Builder\0", "build\0", "()Landroid/media/AudioAttributes;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setUsage](https://developer.android.com/reference/android/media/AudioAttributes.Builder.html#setUsage(int))
        ///
        /// Required features: "android-media-AudioAttributes_Builder"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioAttributes_Builder")))]
        pub fn setUsage<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::AudioAttributes_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioAttributes$Builder", java.flags == PUBLIC, .name == "setUsage", .descriptor == "(I)Landroid/media/AudioAttributes$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioAttributes$Builder\0", "setUsage\0", "(I)Landroid/media/AudioAttributes$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setContentType](https://developer.android.com/reference/android/media/AudioAttributes.Builder.html#setContentType(int))
        ///
        /// Required features: "android-media-AudioAttributes_Builder"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioAttributes_Builder")))]
        pub fn setContentType<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::AudioAttributes_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioAttributes$Builder", java.flags == PUBLIC, .name == "setContentType", .descriptor == "(I)Landroid/media/AudioAttributes$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioAttributes$Builder\0", "setContentType\0", "(I)Landroid/media/AudioAttributes$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setFlags](https://developer.android.com/reference/android/media/AudioAttributes.Builder.html#setFlags(int))
        ///
        /// Required features: "android-media-AudioAttributes_Builder"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioAttributes_Builder")))]
        pub fn setFlags<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::AudioAttributes_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioAttributes$Builder", java.flags == PUBLIC, .name == "setFlags", .descriptor == "(I)Landroid/media/AudioAttributes$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioAttributes$Builder\0", "setFlags\0", "(I)Landroid/media/AudioAttributes$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAllowedCapturePolicy](https://developer.android.com/reference/android/media/AudioAttributes.Builder.html#setAllowedCapturePolicy(int))
        ///
        /// Required features: "android-media-AudioAttributes_Builder"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioAttributes_Builder")))]
        pub fn setAllowedCapturePolicy<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::AudioAttributes_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioAttributes$Builder", java.flags == PUBLIC, .name == "setAllowedCapturePolicy", .descriptor == "(I)Landroid/media/AudioAttributes$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioAttributes$Builder\0", "setAllowedCapturePolicy\0", "(I)Landroid/media/AudioAttributes$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setLegacyStreamType](https://developer.android.com/reference/android/media/AudioAttributes.Builder.html#setLegacyStreamType(int))
        ///
        /// Required features: "android-media-AudioAttributes_Builder"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioAttributes_Builder")))]
        pub fn setLegacyStreamType<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::AudioAttributes_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioAttributes$Builder", java.flags == PUBLIC, .name == "setLegacyStreamType", .descriptor == "(I)Landroid/media/AudioAttributes$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioAttributes$Builder\0", "setLegacyStreamType\0", "(I)Landroid/media/AudioAttributes$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setHapticChannelsMuted](https://developer.android.com/reference/android/media/AudioAttributes.Builder.html#setHapticChannelsMuted(boolean))
        ///
        /// Required features: "android-media-AudioAttributes_Builder"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioAttributes_Builder")))]
        pub fn setHapticChannelsMuted<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::AudioAttributes_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioAttributes$Builder", java.flags == PUBLIC, .name == "setHapticChannelsMuted", .descriptor == "(Z)Landroid/media/AudioAttributes$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioAttributes$Builder\0", "setHapticChannelsMuted\0", "(Z)Landroid/media/AudioAttributes$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
