// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-media-MediaDrm"))]
__jni_bindgen! {
    /// public final class [MediaDrm](https://developer.android.com/reference/android/media/MediaDrm.html)
    ///
    /// Required feature: android-media-MediaDrm
    public final class MediaDrm ("android/media/MediaDrm") extends crate::java::lang::Object, implements crate::java::lang::AutoCloseable {

        /// [MediaDrm](https://developer.android.com/reference/android/media/MediaDrm.html#MediaDrm(java.util.UUID))
        ///
        /// Required features: "java-util-UUID"
        #[cfg(any(feature = "all", all(feature = "java-util-UUID")))]
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::UUID>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::media::MediaDrm>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaDrm", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/util/UUID;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaDrm\0", "<init>\0", "(Ljava/util/UUID;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isCryptoSchemeSupported](https://developer.android.com/reference/android/media/MediaDrm.html#isCryptoSchemeSupported(java.util.UUID))
        ///
        /// Required features: "java-util-UUID"
        #[cfg(any(feature = "all", all(feature = "java-util-UUID")))]
        pub fn isCryptoSchemeSupported_UUID<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::UUID>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaDrm", java.flags == PUBLIC | STATIC, .name == "isCryptoSchemeSupported", .descriptor == "(Ljava/util/UUID;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/media/MediaDrm\0", "isCryptoSchemeSupported\0", "(Ljava/util/UUID;)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isCryptoSchemeSupported](https://developer.android.com/reference/android/media/MediaDrm.html#isCryptoSchemeSupported(java.util.UUID,%20java.lang.String))
        ///
        /// Required features: "java-lang-String", "java-util-UUID"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-util-UUID")))]
        pub fn isCryptoSchemeSupported_UUID_String<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::UUID>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaDrm", java.flags == PUBLIC | STATIC, .name == "isCryptoSchemeSupported", .descriptor == "(Ljava/util/UUID;Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/media/MediaDrm\0", "isCryptoSchemeSupported\0", "(Ljava/util/UUID;Ljava/lang/String;)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isCryptoSchemeSupported](https://developer.android.com/reference/android/media/MediaDrm.html#isCryptoSchemeSupported(java.util.UUID,%20java.lang.String,%20int))
        ///
        /// Required features: "java-lang-String", "java-util-UUID"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-util-UUID")))]
        pub fn isCryptoSchemeSupported_UUID_String_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::UUID>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaDrm", java.flags == PUBLIC | STATIC, .name == "isCryptoSchemeSupported", .descriptor == "(Ljava/util/UUID;Ljava/lang/String;I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/media/MediaDrm\0", "isCryptoSchemeSupported\0", "(Ljava/util/UUID;Ljava/lang/String;I)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOnExpirationUpdateListener](https://developer.android.com/reference/android/media/MediaDrm.html#setOnExpirationUpdateListener(android.media.MediaDrm.OnExpirationUpdateListener,%20android.os.Handler))
        ///
        /// Required features: "android-media-MediaDrm_OnExpirationUpdateListener", "android-os-Handler"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaDrm_OnExpirationUpdateListener", feature = "android-os-Handler")))]
        pub fn setOnExpirationUpdateListener_OnExpirationUpdateListener_Handler<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaDrm_OnExpirationUpdateListener>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaDrm", java.flags == PUBLIC, .name == "setOnExpirationUpdateListener", .descriptor == "(Landroid/media/MediaDrm$OnExpirationUpdateListener;Landroid/os/Handler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaDrm\0", "setOnExpirationUpdateListener\0", "(Landroid/media/MediaDrm$OnExpirationUpdateListener;Landroid/os/Handler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOnExpirationUpdateListener](https://developer.android.com/reference/android/media/MediaDrm.html#setOnExpirationUpdateListener(java.util.concurrent.Executor,%20android.media.MediaDrm.OnExpirationUpdateListener))
        ///
        /// Required features: "android-media-MediaDrm_OnExpirationUpdateListener", "java-util-concurrent-Executor"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaDrm_OnExpirationUpdateListener", feature = "java-util-concurrent-Executor")))]
        pub fn setOnExpirationUpdateListener_Executor_OnExpirationUpdateListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaDrm_OnExpirationUpdateListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaDrm", java.flags == PUBLIC, .name == "setOnExpirationUpdateListener", .descriptor == "(Ljava/util/concurrent/Executor;Landroid/media/MediaDrm$OnExpirationUpdateListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaDrm\0", "setOnExpirationUpdateListener\0", "(Ljava/util/concurrent/Executor;Landroid/media/MediaDrm$OnExpirationUpdateListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clearOnExpirationUpdateListener](https://developer.android.com/reference/android/media/MediaDrm.html#clearOnExpirationUpdateListener())
        pub fn clearOnExpirationUpdateListener<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaDrm", java.flags == PUBLIC, .name == "clearOnExpirationUpdateListener", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaDrm\0", "clearOnExpirationUpdateListener\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOnKeyStatusChangeListener](https://developer.android.com/reference/android/media/MediaDrm.html#setOnKeyStatusChangeListener(android.media.MediaDrm.OnKeyStatusChangeListener,%20android.os.Handler))
        ///
        /// Required features: "android-media-MediaDrm_OnKeyStatusChangeListener", "android-os-Handler"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaDrm_OnKeyStatusChangeListener", feature = "android-os-Handler")))]
        pub fn setOnKeyStatusChangeListener_OnKeyStatusChangeListener_Handler<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaDrm_OnKeyStatusChangeListener>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaDrm", java.flags == PUBLIC, .name == "setOnKeyStatusChangeListener", .descriptor == "(Landroid/media/MediaDrm$OnKeyStatusChangeListener;Landroid/os/Handler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaDrm\0", "setOnKeyStatusChangeListener\0", "(Landroid/media/MediaDrm$OnKeyStatusChangeListener;Landroid/os/Handler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOnKeyStatusChangeListener](https://developer.android.com/reference/android/media/MediaDrm.html#setOnKeyStatusChangeListener(java.util.concurrent.Executor,%20android.media.MediaDrm.OnKeyStatusChangeListener))
        ///
        /// Required features: "android-media-MediaDrm_OnKeyStatusChangeListener", "java-util-concurrent-Executor"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaDrm_OnKeyStatusChangeListener", feature = "java-util-concurrent-Executor")))]
        pub fn setOnKeyStatusChangeListener_Executor_OnKeyStatusChangeListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaDrm_OnKeyStatusChangeListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaDrm", java.flags == PUBLIC, .name == "setOnKeyStatusChangeListener", .descriptor == "(Ljava/util/concurrent/Executor;Landroid/media/MediaDrm$OnKeyStatusChangeListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaDrm\0", "setOnKeyStatusChangeListener\0", "(Ljava/util/concurrent/Executor;Landroid/media/MediaDrm$OnKeyStatusChangeListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clearOnKeyStatusChangeListener](https://developer.android.com/reference/android/media/MediaDrm.html#clearOnKeyStatusChangeListener())
        pub fn clearOnKeyStatusChangeListener<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaDrm", java.flags == PUBLIC, .name == "clearOnKeyStatusChangeListener", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaDrm\0", "clearOnKeyStatusChangeListener\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOnSessionLostStateListener](https://developer.android.com/reference/android/media/MediaDrm.html#setOnSessionLostStateListener(android.media.MediaDrm.OnSessionLostStateListener,%20android.os.Handler))
        ///
        /// Required features: "android-media-MediaDrm_OnSessionLostStateListener", "android-os-Handler"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaDrm_OnSessionLostStateListener", feature = "android-os-Handler")))]
        pub fn setOnSessionLostStateListener_OnSessionLostStateListener_Handler<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaDrm_OnSessionLostStateListener>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaDrm", java.flags == PUBLIC, .name == "setOnSessionLostStateListener", .descriptor == "(Landroid/media/MediaDrm$OnSessionLostStateListener;Landroid/os/Handler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaDrm\0", "setOnSessionLostStateListener\0", "(Landroid/media/MediaDrm$OnSessionLostStateListener;Landroid/os/Handler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOnSessionLostStateListener](https://developer.android.com/reference/android/media/MediaDrm.html#setOnSessionLostStateListener(java.util.concurrent.Executor,%20android.media.MediaDrm.OnSessionLostStateListener))
        ///
        /// Required features: "android-media-MediaDrm_OnSessionLostStateListener", "java-util-concurrent-Executor"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaDrm_OnSessionLostStateListener", feature = "java-util-concurrent-Executor")))]
        pub fn setOnSessionLostStateListener_Executor_OnSessionLostStateListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaDrm_OnSessionLostStateListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaDrm", java.flags == PUBLIC, .name == "setOnSessionLostStateListener", .descriptor == "(Ljava/util/concurrent/Executor;Landroid/media/MediaDrm$OnSessionLostStateListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaDrm\0", "setOnSessionLostStateListener\0", "(Ljava/util/concurrent/Executor;Landroid/media/MediaDrm$OnSessionLostStateListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clearOnSessionLostStateListener](https://developer.android.com/reference/android/media/MediaDrm.html#clearOnSessionLostStateListener())
        pub fn clearOnSessionLostStateListener<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaDrm", java.flags == PUBLIC, .name == "clearOnSessionLostStateListener", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaDrm\0", "clearOnSessionLostStateListener\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOnEventListener](https://developer.android.com/reference/android/media/MediaDrm.html#setOnEventListener(android.media.MediaDrm.OnEventListener))
        ///
        /// Required features: "android-media-MediaDrm_OnEventListener"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaDrm_OnEventListener")))]
        pub fn setOnEventListener_OnEventListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaDrm_OnEventListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaDrm", java.flags == PUBLIC, .name == "setOnEventListener", .descriptor == "(Landroid/media/MediaDrm$OnEventListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaDrm\0", "setOnEventListener\0", "(Landroid/media/MediaDrm$OnEventListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOnEventListener](https://developer.android.com/reference/android/media/MediaDrm.html#setOnEventListener(android.media.MediaDrm.OnEventListener,%20android.os.Handler))
        ///
        /// Required features: "android-media-MediaDrm_OnEventListener", "android-os-Handler"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaDrm_OnEventListener", feature = "android-os-Handler")))]
        pub fn setOnEventListener_OnEventListener_Handler<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaDrm_OnEventListener>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaDrm", java.flags == PUBLIC, .name == "setOnEventListener", .descriptor == "(Landroid/media/MediaDrm$OnEventListener;Landroid/os/Handler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaDrm\0", "setOnEventListener\0", "(Landroid/media/MediaDrm$OnEventListener;Landroid/os/Handler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOnEventListener](https://developer.android.com/reference/android/media/MediaDrm.html#setOnEventListener(java.util.concurrent.Executor,%20android.media.MediaDrm.OnEventListener))
        ///
        /// Required features: "android-media-MediaDrm_OnEventListener", "java-util-concurrent-Executor"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaDrm_OnEventListener", feature = "java-util-concurrent-Executor")))]
        pub fn setOnEventListener_Executor_OnEventListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaDrm_OnEventListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaDrm", java.flags == PUBLIC, .name == "setOnEventListener", .descriptor == "(Ljava/util/concurrent/Executor;Landroid/media/MediaDrm$OnEventListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaDrm\0", "setOnEventListener\0", "(Ljava/util/concurrent/Executor;Landroid/media/MediaDrm$OnEventListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clearOnEventListener](https://developer.android.com/reference/android/media/MediaDrm.html#clearOnEventListener())
        pub fn clearOnEventListener<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaDrm", java.flags == PUBLIC, .name == "clearOnEventListener", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaDrm\0", "clearOnEventListener\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [openSession](https://developer.android.com/reference/android/media/MediaDrm.html#openSession())
        pub fn openSession<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ByteArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaDrm", java.flags == PUBLIC, .name == "openSession", .descriptor == "()[B"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaDrm\0", "openSession\0", "()[B\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [openSession](https://developer.android.com/reference/android/media/MediaDrm.html#openSession(int))
        pub fn openSession_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ByteArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaDrm", java.flags == PUBLIC | NATIVE, .name == "openSession", .descriptor == "(I)[B"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaDrm\0", "openSession\0", "(I)[B\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [closeSession](https://developer.android.com/reference/android/media/MediaDrm.html#closeSession(byte%5B%5D))
        pub fn closeSession<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaDrm", java.flags == PUBLIC | NATIVE, .name == "closeSession", .descriptor == "([B)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaDrm\0", "closeSession\0", "([B)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getKeyRequest](https://developer.android.com/reference/android/media/MediaDrm.html#getKeyRequest(byte%5B%5D,%20byte%5B%5D,%20java.lang.String,%20int,%20java.util.HashMap))
        ///
        /// Required features: "android-media-MediaDrm_KeyRequest", "java-lang-String", "java-util-HashMap"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaDrm_KeyRequest", feature = "java-lang-String", feature = "java-util-HashMap")))]
        pub fn getKeyRequest<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg3: i32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::HashMap>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::MediaDrm_KeyRequest>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaDrm", java.flags == PUBLIC | NATIVE, .name == "getKeyRequest", .descriptor == "([B[BLjava/lang/String;ILjava/util/HashMap;)Landroid/media/MediaDrm$KeyRequest;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaDrm\0", "getKeyRequest\0", "([B[BLjava/lang/String;ILjava/util/HashMap;)Landroid/media/MediaDrm$KeyRequest;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [provideKeyResponse](https://developer.android.com/reference/android/media/MediaDrm.html#provideKeyResponse(byte%5B%5D,%20byte%5B%5D))
        pub fn provideKeyResponse<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ByteArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaDrm", java.flags == PUBLIC | NATIVE, .name == "provideKeyResponse", .descriptor == "([B[B)[B"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaDrm\0", "provideKeyResponse\0", "([B[B)[B\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [restoreKeys](https://developer.android.com/reference/android/media/MediaDrm.html#restoreKeys(byte%5B%5D,%20byte%5B%5D))
        pub fn restoreKeys<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaDrm", java.flags == PUBLIC | NATIVE, .name == "restoreKeys", .descriptor == "([B[B)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaDrm\0", "restoreKeys\0", "([B[B)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeKeys](https://developer.android.com/reference/android/media/MediaDrm.html#removeKeys(byte%5B%5D))
        pub fn removeKeys<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaDrm", java.flags == PUBLIC | NATIVE, .name == "removeKeys", .descriptor == "([B)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaDrm\0", "removeKeys\0", "([B)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [queryKeyStatus](https://developer.android.com/reference/android/media/MediaDrm.html#queryKeyStatus(byte%5B%5D))
        ///
        /// Required features: "java-util-HashMap"
        #[cfg(any(feature = "all", all(feature = "java-util-HashMap")))]
        pub fn queryKeyStatus<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::HashMap>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaDrm", java.flags == PUBLIC | NATIVE, .name == "queryKeyStatus", .descriptor == "([B)Ljava/util/HashMap;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaDrm\0", "queryKeyStatus\0", "([B)Ljava/util/HashMap;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getProvisionRequest](https://developer.android.com/reference/android/media/MediaDrm.html#getProvisionRequest())
        ///
        /// Required features: "android-media-MediaDrm_ProvisionRequest"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaDrm_ProvisionRequest")))]
        pub fn getProvisionRequest<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::MediaDrm_ProvisionRequest>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaDrm", java.flags == PUBLIC, .name == "getProvisionRequest", .descriptor == "()Landroid/media/MediaDrm$ProvisionRequest;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaDrm\0", "getProvisionRequest\0", "()Landroid/media/MediaDrm$ProvisionRequest;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [provideProvisionResponse](https://developer.android.com/reference/android/media/MediaDrm.html#provideProvisionResponse(byte%5B%5D))
        pub fn provideProvisionResponse<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaDrm", java.flags == PUBLIC, .name == "provideProvisionResponse", .descriptor == "([B)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaDrm\0", "provideProvisionResponse\0", "([B)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getOfflineLicenseKeySetIds](https://developer.android.com/reference/android/media/MediaDrm.html#getOfflineLicenseKeySetIds())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getOfflineLicenseKeySetIds<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaDrm", java.flags == PUBLIC | NATIVE, .name == "getOfflineLicenseKeySetIds", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaDrm\0", "getOfflineLicenseKeySetIds\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeOfflineLicense](https://developer.android.com/reference/android/media/MediaDrm.html#removeOfflineLicense(byte%5B%5D))
        pub fn removeOfflineLicense<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaDrm", java.flags == PUBLIC | NATIVE, .name == "removeOfflineLicense", .descriptor == "([B)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaDrm\0", "removeOfflineLicense\0", "([B)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getOfflineLicenseState](https://developer.android.com/reference/android/media/MediaDrm.html#getOfflineLicenseState(byte%5B%5D))
        pub fn getOfflineLicenseState<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaDrm", java.flags == PUBLIC | NATIVE, .name == "getOfflineLicenseState", .descriptor == "([B)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaDrm\0", "getOfflineLicenseState\0", "([B)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSecureStops](https://developer.android.com/reference/android/media/MediaDrm.html#getSecureStops())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getSecureStops<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaDrm", java.flags == PUBLIC | NATIVE, .name == "getSecureStops", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaDrm\0", "getSecureStops\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSecureStopIds](https://developer.android.com/reference/android/media/MediaDrm.html#getSecureStopIds())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getSecureStopIds<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaDrm", java.flags == PUBLIC | NATIVE, .name == "getSecureStopIds", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaDrm\0", "getSecureStopIds\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSecureStop](https://developer.android.com/reference/android/media/MediaDrm.html#getSecureStop(byte%5B%5D))
        pub fn getSecureStop<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ByteArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaDrm", java.flags == PUBLIC | NATIVE, .name == "getSecureStop", .descriptor == "([B)[B"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaDrm\0", "getSecureStop\0", "([B)[B\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [releaseSecureStops](https://developer.android.com/reference/android/media/MediaDrm.html#releaseSecureStops(byte%5B%5D))
        pub fn releaseSecureStops<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaDrm", java.flags == PUBLIC | NATIVE, .name == "releaseSecureStops", .descriptor == "([B)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaDrm\0", "releaseSecureStops\0", "([B)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeSecureStop](https://developer.android.com/reference/android/media/MediaDrm.html#removeSecureStop(byte%5B%5D))
        pub fn removeSecureStop<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaDrm", java.flags == PUBLIC | NATIVE, .name == "removeSecureStop", .descriptor == "([B)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaDrm\0", "removeSecureStop\0", "([B)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeAllSecureStops](https://developer.android.com/reference/android/media/MediaDrm.html#removeAllSecureStops())
        pub fn removeAllSecureStops<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaDrm", java.flags == PUBLIC | NATIVE, .name == "removeAllSecureStops", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaDrm\0", "removeAllSecureStops\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [releaseAllSecureStops](https://developer.android.com/reference/android/media/MediaDrm.html#releaseAllSecureStops())
        #[deprecated] pub fn releaseAllSecureStops<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaDrm", java.flags == PUBLIC, .name == "releaseAllSecureStops", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaDrm\0", "releaseAllSecureStops\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getConnectedHdcpLevel](https://developer.android.com/reference/android/media/MediaDrm.html#getConnectedHdcpLevel())
        pub fn getConnectedHdcpLevel<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaDrm", java.flags == PUBLIC | NATIVE, .name == "getConnectedHdcpLevel", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaDrm\0", "getConnectedHdcpLevel\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMaxHdcpLevel](https://developer.android.com/reference/android/media/MediaDrm.html#getMaxHdcpLevel())
        pub fn getMaxHdcpLevel<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaDrm", java.flags == PUBLIC | NATIVE, .name == "getMaxHdcpLevel", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaDrm\0", "getMaxHdcpLevel\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getOpenSessionCount](https://developer.android.com/reference/android/media/MediaDrm.html#getOpenSessionCount())
        pub fn getOpenSessionCount<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaDrm", java.flags == PUBLIC | NATIVE, .name == "getOpenSessionCount", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaDrm\0", "getOpenSessionCount\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMaxSessionCount](https://developer.android.com/reference/android/media/MediaDrm.html#getMaxSessionCount())
        pub fn getMaxSessionCount<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaDrm", java.flags == PUBLIC | NATIVE, .name == "getMaxSessionCount", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaDrm\0", "getMaxSessionCount\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMaxSecurityLevel](https://developer.android.com/reference/android/media/MediaDrm.html#getMaxSecurityLevel())
        pub fn getMaxSecurityLevel<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaDrm", java.flags == PUBLIC | STATIC, .name == "getMaxSecurityLevel", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/media/MediaDrm\0", "getMaxSecurityLevel\0", "()I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSecurityLevel](https://developer.android.com/reference/android/media/MediaDrm.html#getSecurityLevel(byte%5B%5D))
        pub fn getSecurityLevel<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaDrm", java.flags == PUBLIC | NATIVE, .name == "getSecurityLevel", .descriptor == "([B)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaDrm\0", "getSecurityLevel\0", "([B)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPropertyString](https://developer.android.com/reference/android/media/MediaDrm.html#getPropertyString(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getPropertyString<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaDrm", java.flags == PUBLIC | NATIVE, .name == "getPropertyString", .descriptor == "(Ljava/lang/String;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaDrm\0", "getPropertyString\0", "(Ljava/lang/String;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPropertyString](https://developer.android.com/reference/android/media/MediaDrm.html#setPropertyString(java.lang.String,%20java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn setPropertyString<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaDrm", java.flags == PUBLIC | NATIVE, .name == "setPropertyString", .descriptor == "(Ljava/lang/String;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaDrm\0", "setPropertyString\0", "(Ljava/lang/String;Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPropertyByteArray](https://developer.android.com/reference/android/media/MediaDrm.html#getPropertyByteArray(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getPropertyByteArray<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ByteArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaDrm", java.flags == PUBLIC | NATIVE, .name == "getPropertyByteArray", .descriptor == "(Ljava/lang/String;)[B"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaDrm\0", "getPropertyByteArray\0", "(Ljava/lang/String;)[B\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPropertyByteArray](https://developer.android.com/reference/android/media/MediaDrm.html#setPropertyByteArray(java.lang.String,%20byte%5B%5D))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn setPropertyByteArray<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaDrm", java.flags == PUBLIC | NATIVE, .name == "setPropertyByteArray", .descriptor == "(Ljava/lang/String;[B)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaDrm\0", "setPropertyByteArray\0", "(Ljava/lang/String;[B)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMetrics](https://developer.android.com/reference/android/media/MediaDrm.html#getMetrics())
        ///
        /// Required features: "android-os-PersistableBundle"
        #[cfg(any(feature = "all", all(feature = "android-os-PersistableBundle")))]
        pub fn getMetrics<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::PersistableBundle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaDrm", java.flags == PUBLIC, .name == "getMetrics", .descriptor == "()Landroid/os/PersistableBundle;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaDrm\0", "getMetrics\0", "()Landroid/os/PersistableBundle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCryptoSession](https://developer.android.com/reference/android/media/MediaDrm.html#getCryptoSession(byte%5B%5D,%20java.lang.String,%20java.lang.String))
        ///
        /// Required features: "android-media-MediaDrm_CryptoSession", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaDrm_CryptoSession", feature = "java-lang-String")))]
        pub fn getCryptoSession<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::MediaDrm_CryptoSession>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaDrm", java.flags == PUBLIC, .name == "getCryptoSession", .descriptor == "([BLjava/lang/String;Ljava/lang/String;)Landroid/media/MediaDrm$CryptoSession;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaDrm\0", "getCryptoSession\0", "([BLjava/lang/String;Ljava/lang/String;)Landroid/media/MediaDrm$CryptoSession;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [finalize](https://developer.android.com/reference/android/media/MediaDrm.html#finalize())
        // fn finalize<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/media/MediaDrm", java.flags == PROTECTED, .name == "finalize", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaDrm\0", "finalize\0", "()V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [close](https://developer.android.com/reference/android/media/MediaDrm.html#close())
        pub fn close<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaDrm", java.flags == PUBLIC, .name == "close", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaDrm\0", "close\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [release](https://developer.android.com/reference/android/media/MediaDrm.html#release())
        #[deprecated] pub fn release<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaDrm", java.flags == PUBLIC, .name == "release", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaDrm\0", "release\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [EVENT_KEY_EXPIRED](https://developer.android.com/reference/android/media/MediaDrm.html#EVENT_KEY_EXPIRED)
        #[deprecated] pub const EVENT_KEY_EXPIRED : i32 = 3;

        /// public static final [EVENT_KEY_REQUIRED](https://developer.android.com/reference/android/media/MediaDrm.html#EVENT_KEY_REQUIRED)
        pub const EVENT_KEY_REQUIRED : i32 = 2;

        /// public static final [EVENT_PROVISION_REQUIRED](https://developer.android.com/reference/android/media/MediaDrm.html#EVENT_PROVISION_REQUIRED)
        #[deprecated] pub const EVENT_PROVISION_REQUIRED : i32 = 1;

        /// public static final [EVENT_SESSION_RECLAIMED](https://developer.android.com/reference/android/media/MediaDrm.html#EVENT_SESSION_RECLAIMED)
        pub const EVENT_SESSION_RECLAIMED : i32 = 5;

        /// public static final [EVENT_VENDOR_DEFINED](https://developer.android.com/reference/android/media/MediaDrm.html#EVENT_VENDOR_DEFINED)
        pub const EVENT_VENDOR_DEFINED : i32 = 4;

        /// public static final [HDCP_LEVEL_UNKNOWN](https://developer.android.com/reference/android/media/MediaDrm.html#HDCP_LEVEL_UNKNOWN)
        pub const HDCP_LEVEL_UNKNOWN : i32 = 0;

        /// public static final [HDCP_NONE](https://developer.android.com/reference/android/media/MediaDrm.html#HDCP_NONE)
        pub const HDCP_NONE : i32 = 1;

        /// public static final [HDCP_NO_DIGITAL_OUTPUT](https://developer.android.com/reference/android/media/MediaDrm.html#HDCP_NO_DIGITAL_OUTPUT)
        pub const HDCP_NO_DIGITAL_OUTPUT : i32 = 2147483647;

        /// public static final [HDCP_V1](https://developer.android.com/reference/android/media/MediaDrm.html#HDCP_V1)
        pub const HDCP_V1 : i32 = 2;

        /// public static final [HDCP_V2](https://developer.android.com/reference/android/media/MediaDrm.html#HDCP_V2)
        pub const HDCP_V2 : i32 = 3;

        /// public static final [HDCP_V2_1](https://developer.android.com/reference/android/media/MediaDrm.html#HDCP_V2_1)
        pub const HDCP_V2_1 : i32 = 4;

        /// public static final [HDCP_V2_2](https://developer.android.com/reference/android/media/MediaDrm.html#HDCP_V2_2)
        pub const HDCP_V2_2 : i32 = 5;

        /// public static final [HDCP_V2_3](https://developer.android.com/reference/android/media/MediaDrm.html#HDCP_V2_3)
        pub const HDCP_V2_3 : i32 = 6;

        /// public static final [KEY_TYPE_OFFLINE](https://developer.android.com/reference/android/media/MediaDrm.html#KEY_TYPE_OFFLINE)
        pub const KEY_TYPE_OFFLINE : i32 = 2;

        /// public static final [KEY_TYPE_RELEASE](https://developer.android.com/reference/android/media/MediaDrm.html#KEY_TYPE_RELEASE)
        pub const KEY_TYPE_RELEASE : i32 = 3;

        /// public static final [KEY_TYPE_STREAMING](https://developer.android.com/reference/android/media/MediaDrm.html#KEY_TYPE_STREAMING)
        pub const KEY_TYPE_STREAMING : i32 = 1;

        /// public static final [OFFLINE_LICENSE_STATE_RELEASED](https://developer.android.com/reference/android/media/MediaDrm.html#OFFLINE_LICENSE_STATE_RELEASED)
        pub const OFFLINE_LICENSE_STATE_RELEASED : i32 = 2;

        /// public static final [OFFLINE_LICENSE_STATE_UNKNOWN](https://developer.android.com/reference/android/media/MediaDrm.html#OFFLINE_LICENSE_STATE_UNKNOWN)
        pub const OFFLINE_LICENSE_STATE_UNKNOWN : i32 = 0;

        /// public static final [OFFLINE_LICENSE_STATE_USABLE](https://developer.android.com/reference/android/media/MediaDrm.html#OFFLINE_LICENSE_STATE_USABLE)
        pub const OFFLINE_LICENSE_STATE_USABLE : i32 = 1;

        /// public static final [PROPERTY_ALGORITHMS](https://developer.android.com/reference/android/media/MediaDrm.html#PROPERTY_ALGORITHMS)
        pub const PROPERTY_ALGORITHMS : &'static str = "algorithms";

        /// public static final [PROPERTY_DESCRIPTION](https://developer.android.com/reference/android/media/MediaDrm.html#PROPERTY_DESCRIPTION)
        pub const PROPERTY_DESCRIPTION : &'static str = "description";

        /// public static final [PROPERTY_DEVICE_UNIQUE_ID](https://developer.android.com/reference/android/media/MediaDrm.html#PROPERTY_DEVICE_UNIQUE_ID)
        pub const PROPERTY_DEVICE_UNIQUE_ID : &'static str = "deviceUniqueId";

        /// public static final [PROPERTY_VENDOR](https://developer.android.com/reference/android/media/MediaDrm.html#PROPERTY_VENDOR)
        pub const PROPERTY_VENDOR : &'static str = "vendor";

        /// public static final [PROPERTY_VERSION](https://developer.android.com/reference/android/media/MediaDrm.html#PROPERTY_VERSION)
        pub const PROPERTY_VERSION : &'static str = "version";

        /// public static final [SECURITY_LEVEL_HW_SECURE_ALL](https://developer.android.com/reference/android/media/MediaDrm.html#SECURITY_LEVEL_HW_SECURE_ALL)
        pub const SECURITY_LEVEL_HW_SECURE_ALL : i32 = 5;

        /// public static final [SECURITY_LEVEL_HW_SECURE_CRYPTO](https://developer.android.com/reference/android/media/MediaDrm.html#SECURITY_LEVEL_HW_SECURE_CRYPTO)
        pub const SECURITY_LEVEL_HW_SECURE_CRYPTO : i32 = 3;

        /// public static final [SECURITY_LEVEL_HW_SECURE_DECODE](https://developer.android.com/reference/android/media/MediaDrm.html#SECURITY_LEVEL_HW_SECURE_DECODE)
        pub const SECURITY_LEVEL_HW_SECURE_DECODE : i32 = 4;

        /// public static final [SECURITY_LEVEL_SW_SECURE_CRYPTO](https://developer.android.com/reference/android/media/MediaDrm.html#SECURITY_LEVEL_SW_SECURE_CRYPTO)
        pub const SECURITY_LEVEL_SW_SECURE_CRYPTO : i32 = 1;

        /// public static final [SECURITY_LEVEL_SW_SECURE_DECODE](https://developer.android.com/reference/android/media/MediaDrm.html#SECURITY_LEVEL_SW_SECURE_DECODE)
        pub const SECURITY_LEVEL_SW_SECURE_DECODE : i32 = 2;

        /// public static final [SECURITY_LEVEL_UNKNOWN](https://developer.android.com/reference/android/media/MediaDrm.html#SECURITY_LEVEL_UNKNOWN)
        pub const SECURITY_LEVEL_UNKNOWN : i32 = 0;
    }
}
