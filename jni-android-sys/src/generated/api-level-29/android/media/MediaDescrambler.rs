// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-media-MediaDescrambler"))]
__jni_bindgen! {
    /// public final class [MediaDescrambler](https://developer.android.com/reference/android/media/MediaDescrambler.html)
    ///
    /// Required feature: android-media-MediaDescrambler
    public final class MediaDescrambler ("android/media/MediaDescrambler") extends crate::java::lang::Object, implements crate::java::lang::AutoCloseable {

        /// [MediaDescrambler](https://developer.android.com/reference/android/media/MediaDescrambler.html#MediaDescrambler(int))
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::media::MediaDescrambler>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaDescrambler", java.flags == PUBLIC, .name == "<init>", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaDescrambler\0", "<init>\0", "(I)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [requiresSecureDecoderComponent](https://developer.android.com/reference/android/media/MediaDescrambler.html#requiresSecureDecoderComponent(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn requiresSecureDecoderComponent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaDescrambler", java.flags == PUBLIC, .name == "requiresSecureDecoderComponent", .descriptor == "(Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaDescrambler\0", "requiresSecureDecoderComponent\0", "(Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setMediaCasSession](https://developer.android.com/reference/android/media/MediaDescrambler.html#setMediaCasSession(android.media.MediaCas.Session))
        ///
        /// Required features: "android-media-MediaCas_Session"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaCas_Session")))]
        pub fn setMediaCasSession<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaCas_Session>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaDescrambler", java.flags == PUBLIC, .name == "setMediaCasSession", .descriptor == "(Landroid/media/MediaCas$Session;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaDescrambler\0", "setMediaCasSession\0", "(Landroid/media/MediaCas$Session;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [descramble](https://developer.android.com/reference/android/media/MediaDescrambler.html#descramble(java.nio.ByteBuffer,%20java.nio.ByteBuffer,%20android.media.MediaCodec.CryptoInfo))
        ///
        /// Required features: "android-media-MediaCodec_CryptoInfo", "java-nio-ByteBuffer"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaCodec_CryptoInfo", feature = "java-nio-ByteBuffer")))]
        pub fn descramble<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::ByteBuffer>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::ByteBuffer>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaCodec_CryptoInfo>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaDescrambler", java.flags == PUBLIC, .name == "descramble", .descriptor == "(Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;Landroid/media/MediaCodec$CryptoInfo;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaDescrambler\0", "descramble\0", "(Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;Landroid/media/MediaCodec$CryptoInfo;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [close](https://developer.android.com/reference/android/media/MediaDescrambler.html#close())
        pub fn close<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaDescrambler", java.flags == PUBLIC, .name == "close", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaDescrambler\0", "close\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [finalize](https://developer.android.com/reference/android/media/MediaDescrambler.html#finalize())
        // fn finalize<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/media/MediaDescrambler", java.flags == PROTECTED, .name == "finalize", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaDescrambler\0", "finalize\0", "()V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// public static final [SCRAMBLE_CONTROL_EVEN_KEY](https://developer.android.com/reference/android/media/MediaDescrambler.html#SCRAMBLE_CONTROL_EVEN_KEY)
        pub const SCRAMBLE_CONTROL_EVEN_KEY : i8 = 2;

        /// public static final [SCRAMBLE_CONTROL_ODD_KEY](https://developer.android.com/reference/android/media/MediaDescrambler.html#SCRAMBLE_CONTROL_ODD_KEY)
        pub const SCRAMBLE_CONTROL_ODD_KEY : i8 = 3;

        /// public static final [SCRAMBLE_CONTROL_RESERVED](https://developer.android.com/reference/android/media/MediaDescrambler.html#SCRAMBLE_CONTROL_RESERVED)
        pub const SCRAMBLE_CONTROL_RESERVED : i8 = 1;

        /// public static final [SCRAMBLE_CONTROL_UNSCRAMBLED](https://developer.android.com/reference/android/media/MediaDescrambler.html#SCRAMBLE_CONTROL_UNSCRAMBLED)
        pub const SCRAMBLE_CONTROL_UNSCRAMBLED : i8 = 0;

        /// public static final [SCRAMBLE_FLAG_PES_HEADER](https://developer.android.com/reference/android/media/MediaDescrambler.html#SCRAMBLE_FLAG_PES_HEADER)
        pub const SCRAMBLE_FLAG_PES_HEADER : i8 = 1;
    }
}
