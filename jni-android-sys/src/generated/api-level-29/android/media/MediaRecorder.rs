// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-media-MediaRecorder"))]
__jni_bindgen! {
    /// public class [MediaRecorder](https://developer.android.com/reference/android/media/MediaRecorder.html)
    ///
    /// Required feature: android-media-MediaRecorder
    public class MediaRecorder ("android/media/MediaRecorder") extends crate::java::lang::Object, implements crate::android::media::AudioRouting, crate::android::media::AudioRecordingMonitor, crate::android::media::MicrophoneDirection {

        /// [MediaRecorder](https://developer.android.com/reference/android/media/MediaRecorder.html#MediaRecorder())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::media::MediaRecorder>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRecorder", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRecorder\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setCamera](https://developer.android.com/reference/android/media/MediaRecorder.html#setCamera(android.hardware.Camera))
        ///
        /// Required features: "android-hardware-Camera"
        #[cfg(any(feature = "all", all(feature = "android-hardware-Camera")))]
        #[deprecated] pub fn setCamera<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::hardware::Camera>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRecorder", java.flags == PUBLIC | NATIVE, .name == "setCamera", .descriptor == "(Landroid/hardware/Camera;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRecorder\0", "setCamera\0", "(Landroid/hardware/Camera;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSurface](https://developer.android.com/reference/android/media/MediaRecorder.html#getSurface())
        ///
        /// Required features: "android-view-Surface"
        #[cfg(any(feature = "all", all(feature = "android-view-Surface")))]
        pub fn getSurface<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::Surface>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRecorder", java.flags == PUBLIC | NATIVE, .name == "getSurface", .descriptor == "()Landroid/view/Surface;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRecorder\0", "getSurface\0", "()Landroid/view/Surface;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setInputSurface](https://developer.android.com/reference/android/media/MediaRecorder.html#setInputSurface(android.view.Surface))
        ///
        /// Required features: "android-view-Surface"
        #[cfg(any(feature = "all", all(feature = "android-view-Surface")))]
        pub fn setInputSurface<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::Surface>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRecorder", java.flags == PUBLIC, .name == "setInputSurface", .descriptor == "(Landroid/view/Surface;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRecorder\0", "setInputSurface\0", "(Landroid/view/Surface;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPreviewDisplay](https://developer.android.com/reference/android/media/MediaRecorder.html#setPreviewDisplay(android.view.Surface))
        ///
        /// Required features: "android-view-Surface"
        #[cfg(any(feature = "all", all(feature = "android-view-Surface")))]
        pub fn setPreviewDisplay<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::Surface>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRecorder", java.flags == PUBLIC, .name == "setPreviewDisplay", .descriptor == "(Landroid/view/Surface;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRecorder\0", "setPreviewDisplay\0", "(Landroid/view/Surface;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAudioSource](https://developer.android.com/reference/android/media/MediaRecorder.html#setAudioSource(int))
        pub fn setAudioSource<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRecorder", java.flags == PUBLIC | NATIVE, .name == "setAudioSource", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRecorder\0", "setAudioSource\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAudioSourceMax](https://developer.android.com/reference/android/media/MediaRecorder.html#getAudioSourceMax())
        pub fn getAudioSourceMax<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRecorder", java.flags == PUBLIC | STATIC | FINAL, .name == "getAudioSourceMax", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/media/MediaRecorder\0", "getAudioSourceMax\0", "()I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setVideoSource](https://developer.android.com/reference/android/media/MediaRecorder.html#setVideoSource(int))
        pub fn setVideoSource<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRecorder", java.flags == PUBLIC | NATIVE, .name == "setVideoSource", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRecorder\0", "setVideoSource\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setProfile](https://developer.android.com/reference/android/media/MediaRecorder.html#setProfile(android.media.CamcorderProfile))
        ///
        /// Required features: "android-media-CamcorderProfile"
        #[cfg(any(feature = "all", all(feature = "android-media-CamcorderProfile")))]
        pub fn setProfile<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::CamcorderProfile>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRecorder", java.flags == PUBLIC, .name == "setProfile", .descriptor == "(Landroid/media/CamcorderProfile;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRecorder\0", "setProfile\0", "(Landroid/media/CamcorderProfile;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setCaptureRate](https://developer.android.com/reference/android/media/MediaRecorder.html#setCaptureRate(double))
        pub fn setCaptureRate<'env>(&'env self, arg0: f64) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRecorder", java.flags == PUBLIC, .name == "setCaptureRate", .descriptor == "(D)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRecorder\0", "setCaptureRate\0", "(D)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOrientationHint](https://developer.android.com/reference/android/media/MediaRecorder.html#setOrientationHint(int))
        pub fn setOrientationHint<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRecorder", java.flags == PUBLIC, .name == "setOrientationHint", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRecorder\0", "setOrientationHint\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setLocation](https://developer.android.com/reference/android/media/MediaRecorder.html#setLocation(float,%20float))
        pub fn setLocation<'env>(&'env self, arg0: f32, arg1: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRecorder", java.flags == PUBLIC, .name == "setLocation", .descriptor == "(FF)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRecorder\0", "setLocation\0", "(FF)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOutputFormat](https://developer.android.com/reference/android/media/MediaRecorder.html#setOutputFormat(int))
        pub fn setOutputFormat<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRecorder", java.flags == PUBLIC | NATIVE, .name == "setOutputFormat", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRecorder\0", "setOutputFormat\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setVideoSize](https://developer.android.com/reference/android/media/MediaRecorder.html#setVideoSize(int,%20int))
        pub fn setVideoSize<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRecorder", java.flags == PUBLIC | NATIVE, .name == "setVideoSize", .descriptor == "(II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRecorder\0", "setVideoSize\0", "(II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setVideoFrameRate](https://developer.android.com/reference/android/media/MediaRecorder.html#setVideoFrameRate(int))
        pub fn setVideoFrameRate<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRecorder", java.flags == PUBLIC | NATIVE, .name == "setVideoFrameRate", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRecorder\0", "setVideoFrameRate\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setMaxDuration](https://developer.android.com/reference/android/media/MediaRecorder.html#setMaxDuration(int))
        pub fn setMaxDuration<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRecorder", java.flags == PUBLIC | NATIVE, .name == "setMaxDuration", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRecorder\0", "setMaxDuration\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setMaxFileSize](https://developer.android.com/reference/android/media/MediaRecorder.html#setMaxFileSize(long))
        pub fn setMaxFileSize<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRecorder", java.flags == PUBLIC | NATIVE, .name == "setMaxFileSize", .descriptor == "(J)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRecorder\0", "setMaxFileSize\0", "(J)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAudioEncoder](https://developer.android.com/reference/android/media/MediaRecorder.html#setAudioEncoder(int))
        pub fn setAudioEncoder<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRecorder", java.flags == PUBLIC | NATIVE, .name == "setAudioEncoder", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRecorder\0", "setAudioEncoder\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setVideoEncoder](https://developer.android.com/reference/android/media/MediaRecorder.html#setVideoEncoder(int))
        pub fn setVideoEncoder<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRecorder", java.flags == PUBLIC | NATIVE, .name == "setVideoEncoder", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRecorder\0", "setVideoEncoder\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAudioSamplingRate](https://developer.android.com/reference/android/media/MediaRecorder.html#setAudioSamplingRate(int))
        pub fn setAudioSamplingRate<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRecorder", java.flags == PUBLIC, .name == "setAudioSamplingRate", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRecorder\0", "setAudioSamplingRate\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAudioChannels](https://developer.android.com/reference/android/media/MediaRecorder.html#setAudioChannels(int))
        pub fn setAudioChannels<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRecorder", java.flags == PUBLIC, .name == "setAudioChannels", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRecorder\0", "setAudioChannels\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAudioEncodingBitRate](https://developer.android.com/reference/android/media/MediaRecorder.html#setAudioEncodingBitRate(int))
        pub fn setAudioEncodingBitRate<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRecorder", java.flags == PUBLIC, .name == "setAudioEncodingBitRate", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRecorder\0", "setAudioEncodingBitRate\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setVideoEncodingBitRate](https://developer.android.com/reference/android/media/MediaRecorder.html#setVideoEncodingBitRate(int))
        pub fn setVideoEncodingBitRate<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRecorder", java.flags == PUBLIC, .name == "setVideoEncodingBitRate", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRecorder\0", "setVideoEncodingBitRate\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setVideoEncodingProfileLevel](https://developer.android.com/reference/android/media/MediaRecorder.html#setVideoEncodingProfileLevel(int,%20int))
        pub fn setVideoEncodingProfileLevel<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRecorder", java.flags == PUBLIC, .name == "setVideoEncodingProfileLevel", .descriptor == "(II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRecorder\0", "setVideoEncodingProfileLevel\0", "(II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOutputFile](https://developer.android.com/reference/android/media/MediaRecorder.html#setOutputFile(java.io.FileDescriptor))
        ///
        /// Required features: "java-io-FileDescriptor"
        #[cfg(any(feature = "all", all(feature = "java-io-FileDescriptor")))]
        pub fn setOutputFile_FileDescriptor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::FileDescriptor>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRecorder", java.flags == PUBLIC, .name == "setOutputFile", .descriptor == "(Ljava/io/FileDescriptor;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRecorder\0", "setOutputFile\0", "(Ljava/io/FileDescriptor;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOutputFile](https://developer.android.com/reference/android/media/MediaRecorder.html#setOutputFile(java.io.File))
        ///
        /// Required features: "java-io-File"
        #[cfg(any(feature = "all", all(feature = "java-io-File")))]
        pub fn setOutputFile_File<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::File>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRecorder", java.flags == PUBLIC, .name == "setOutputFile", .descriptor == "(Ljava/io/File;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRecorder\0", "setOutputFile\0", "(Ljava/io/File;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setNextOutputFile](https://developer.android.com/reference/android/media/MediaRecorder.html#setNextOutputFile(java.io.FileDescriptor))
        ///
        /// Required features: "java-io-FileDescriptor"
        #[cfg(any(feature = "all", all(feature = "java-io-FileDescriptor")))]
        pub fn setNextOutputFile_FileDescriptor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::FileDescriptor>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRecorder", java.flags == PUBLIC, .name == "setNextOutputFile", .descriptor == "(Ljava/io/FileDescriptor;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRecorder\0", "setNextOutputFile\0", "(Ljava/io/FileDescriptor;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOutputFile](https://developer.android.com/reference/android/media/MediaRecorder.html#setOutputFile(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn setOutputFile_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRecorder", java.flags == PUBLIC, .name == "setOutputFile", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRecorder\0", "setOutputFile\0", "(Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setNextOutputFile](https://developer.android.com/reference/android/media/MediaRecorder.html#setNextOutputFile(java.io.File))
        ///
        /// Required features: "java-io-File"
        #[cfg(any(feature = "all", all(feature = "java-io-File")))]
        pub fn setNextOutputFile_File<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::File>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRecorder", java.flags == PUBLIC, .name == "setNextOutputFile", .descriptor == "(Ljava/io/File;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRecorder\0", "setNextOutputFile\0", "(Ljava/io/File;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [prepare](https://developer.android.com/reference/android/media/MediaRecorder.html#prepare())
        pub fn prepare<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRecorder", java.flags == PUBLIC, .name == "prepare", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRecorder\0", "prepare\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [start](https://developer.android.com/reference/android/media/MediaRecorder.html#start())
        pub fn start<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRecorder", java.flags == PUBLIC | NATIVE, .name == "start", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRecorder\0", "start\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [stop](https://developer.android.com/reference/android/media/MediaRecorder.html#stop())
        pub fn stop<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRecorder", java.flags == PUBLIC | NATIVE, .name == "stop", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRecorder\0", "stop\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [pause](https://developer.android.com/reference/android/media/MediaRecorder.html#pause())
        pub fn pause<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRecorder", java.flags == PUBLIC | NATIVE, .name == "pause", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRecorder\0", "pause\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [resume](https://developer.android.com/reference/android/media/MediaRecorder.html#resume())
        pub fn resume<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRecorder", java.flags == PUBLIC | NATIVE, .name == "resume", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRecorder\0", "resume\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [reset](https://developer.android.com/reference/android/media/MediaRecorder.html#reset())
        pub fn reset<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRecorder", java.flags == PUBLIC, .name == "reset", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRecorder\0", "reset\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMaxAmplitude](https://developer.android.com/reference/android/media/MediaRecorder.html#getMaxAmplitude())
        pub fn getMaxAmplitude<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRecorder", java.flags == PUBLIC | NATIVE, .name == "getMaxAmplitude", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRecorder\0", "getMaxAmplitude\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOnErrorListener](https://developer.android.com/reference/android/media/MediaRecorder.html#setOnErrorListener(android.media.MediaRecorder.OnErrorListener))
        ///
        /// Required features: "android-media-MediaRecorder_OnErrorListener"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaRecorder_OnErrorListener")))]
        pub fn setOnErrorListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaRecorder_OnErrorListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRecorder", java.flags == PUBLIC, .name == "setOnErrorListener", .descriptor == "(Landroid/media/MediaRecorder$OnErrorListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRecorder\0", "setOnErrorListener\0", "(Landroid/media/MediaRecorder$OnErrorListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOnInfoListener](https://developer.android.com/reference/android/media/MediaRecorder.html#setOnInfoListener(android.media.MediaRecorder.OnInfoListener))
        ///
        /// Required features: "android-media-MediaRecorder_OnInfoListener"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaRecorder_OnInfoListener")))]
        pub fn setOnInfoListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaRecorder_OnInfoListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRecorder", java.flags == PUBLIC, .name == "setOnInfoListener", .descriptor == "(Landroid/media/MediaRecorder$OnInfoListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRecorder\0", "setOnInfoListener\0", "(Landroid/media/MediaRecorder$OnInfoListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPreferredDevice](https://developer.android.com/reference/android/media/MediaRecorder.html#setPreferredDevice(android.media.AudioDeviceInfo))
        ///
        /// Required features: "android-media-AudioDeviceInfo"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioDeviceInfo")))]
        pub fn setPreferredDevice<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::AudioDeviceInfo>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRecorder", java.flags == PUBLIC, .name == "setPreferredDevice", .descriptor == "(Landroid/media/AudioDeviceInfo;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRecorder\0", "setPreferredDevice\0", "(Landroid/media/AudioDeviceInfo;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPreferredDevice](https://developer.android.com/reference/android/media/MediaRecorder.html#getPreferredDevice())
        ///
        /// Required features: "android-media-AudioDeviceInfo"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioDeviceInfo")))]
        pub fn getPreferredDevice<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::AudioDeviceInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRecorder", java.flags == PUBLIC, .name == "getPreferredDevice", .descriptor == "()Landroid/media/AudioDeviceInfo;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRecorder\0", "getPreferredDevice\0", "()Landroid/media/AudioDeviceInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRoutedDevice](https://developer.android.com/reference/android/media/MediaRecorder.html#getRoutedDevice())
        ///
        /// Required features: "android-media-AudioDeviceInfo"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioDeviceInfo")))]
        pub fn getRoutedDevice<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::AudioDeviceInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRecorder", java.flags == PUBLIC, .name == "getRoutedDevice", .descriptor == "()Landroid/media/AudioDeviceInfo;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRecorder\0", "getRoutedDevice\0", "()Landroid/media/AudioDeviceInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addOnRoutingChangedListener](https://developer.android.com/reference/android/media/MediaRecorder.html#addOnRoutingChangedListener(android.media.AudioRouting.OnRoutingChangedListener,%20android.os.Handler))
        ///
        /// Required features: "android-media-AudioRouting_OnRoutingChangedListener", "android-os-Handler"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioRouting_OnRoutingChangedListener", feature = "android-os-Handler")))]
        pub fn addOnRoutingChangedListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::AudioRouting_OnRoutingChangedListener>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRecorder", java.flags == PUBLIC, .name == "addOnRoutingChangedListener", .descriptor == "(Landroid/media/AudioRouting$OnRoutingChangedListener;Landroid/os/Handler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRecorder\0", "addOnRoutingChangedListener\0", "(Landroid/media/AudioRouting$OnRoutingChangedListener;Landroid/os/Handler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeOnRoutingChangedListener](https://developer.android.com/reference/android/media/MediaRecorder.html#removeOnRoutingChangedListener(android.media.AudioRouting.OnRoutingChangedListener))
        ///
        /// Required features: "android-media-AudioRouting_OnRoutingChangedListener"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioRouting_OnRoutingChangedListener")))]
        pub fn removeOnRoutingChangedListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::AudioRouting_OnRoutingChangedListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRecorder", java.flags == PUBLIC, .name == "removeOnRoutingChangedListener", .descriptor == "(Landroid/media/AudioRouting$OnRoutingChangedListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRecorder\0", "removeOnRoutingChangedListener\0", "(Landroid/media/AudioRouting$OnRoutingChangedListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getActiveMicrophones](https://developer.android.com/reference/android/media/MediaRecorder.html#getActiveMicrophones())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getActiveMicrophones<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRecorder", java.flags == PUBLIC, .name == "getActiveMicrophones", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRecorder\0", "getActiveMicrophones\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPreferredMicrophoneDirection](https://developer.android.com/reference/android/media/MediaRecorder.html#setPreferredMicrophoneDirection(int))
        pub fn setPreferredMicrophoneDirection<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRecorder", java.flags == PUBLIC, .name == "setPreferredMicrophoneDirection", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRecorder\0", "setPreferredMicrophoneDirection\0", "(I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPreferredMicrophoneFieldDimension](https://developer.android.com/reference/android/media/MediaRecorder.html#setPreferredMicrophoneFieldDimension(float))
        pub fn setPreferredMicrophoneFieldDimension<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRecorder", java.flags == PUBLIC, .name == "setPreferredMicrophoneFieldDimension", .descriptor == "(F)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRecorder\0", "setPreferredMicrophoneFieldDimension\0", "(F)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [registerAudioRecordingCallback](https://developer.android.com/reference/android/media/MediaRecorder.html#registerAudioRecordingCallback(java.util.concurrent.Executor,%20android.media.AudioManager.AudioRecordingCallback))
        ///
        /// Required features: "android-media-AudioManager_AudioRecordingCallback", "java-util-concurrent-Executor"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioManager_AudioRecordingCallback", feature = "java-util-concurrent-Executor")))]
        pub fn registerAudioRecordingCallback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::AudioManager_AudioRecordingCallback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRecorder", java.flags == PUBLIC, .name == "registerAudioRecordingCallback", .descriptor == "(Ljava/util/concurrent/Executor;Landroid/media/AudioManager$AudioRecordingCallback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRecorder\0", "registerAudioRecordingCallback\0", "(Ljava/util/concurrent/Executor;Landroid/media/AudioManager$AudioRecordingCallback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unregisterAudioRecordingCallback](https://developer.android.com/reference/android/media/MediaRecorder.html#unregisterAudioRecordingCallback(android.media.AudioManager.AudioRecordingCallback))
        ///
        /// Required features: "android-media-AudioManager_AudioRecordingCallback"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioManager_AudioRecordingCallback")))]
        pub fn unregisterAudioRecordingCallback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::AudioManager_AudioRecordingCallback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRecorder", java.flags == PUBLIC, .name == "unregisterAudioRecordingCallback", .descriptor == "(Landroid/media/AudioManager$AudioRecordingCallback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRecorder\0", "unregisterAudioRecordingCallback\0", "(Landroid/media/AudioManager$AudioRecordingCallback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getActiveRecordingConfiguration](https://developer.android.com/reference/android/media/MediaRecorder.html#getActiveRecordingConfiguration())
        ///
        /// Required features: "android-media-AudioRecordingConfiguration"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioRecordingConfiguration")))]
        pub fn getActiveRecordingConfiguration<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::AudioRecordingConfiguration>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRecorder", java.flags == PUBLIC, .name == "getActiveRecordingConfiguration", .descriptor == "()Landroid/media/AudioRecordingConfiguration;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRecorder\0", "getActiveRecordingConfiguration\0", "()Landroid/media/AudioRecordingConfiguration;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [release](https://developer.android.com/reference/android/media/MediaRecorder.html#release())
        pub fn release<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRecorder", java.flags == PUBLIC | NATIVE, .name == "release", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRecorder\0", "release\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMetrics](https://developer.android.com/reference/android/media/MediaRecorder.html#getMetrics())
        ///
        /// Required features: "android-os-PersistableBundle"
        #[cfg(any(feature = "all", all(feature = "android-os-PersistableBundle")))]
        pub fn getMetrics<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::PersistableBundle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRecorder", java.flags == PUBLIC, .name == "getMetrics", .descriptor == "()Landroid/os/PersistableBundle;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRecorder\0", "getMetrics\0", "()Landroid/os/PersistableBundle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [finalize](https://developer.android.com/reference/android/media/MediaRecorder.html#finalize())
        // fn finalize<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/media/MediaRecorder", java.flags == PROTECTED, .name == "finalize", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRecorder\0", "finalize\0", "()V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// public static final [MEDIA_ERROR_SERVER_DIED](https://developer.android.com/reference/android/media/MediaRecorder.html#MEDIA_ERROR_SERVER_DIED)
        pub const MEDIA_ERROR_SERVER_DIED : i32 = 100;

        /// public static final [MEDIA_RECORDER_ERROR_UNKNOWN](https://developer.android.com/reference/android/media/MediaRecorder.html#MEDIA_RECORDER_ERROR_UNKNOWN)
        pub const MEDIA_RECORDER_ERROR_UNKNOWN : i32 = 1;

        /// public static final [MEDIA_RECORDER_INFO_MAX_DURATION_REACHED](https://developer.android.com/reference/android/media/MediaRecorder.html#MEDIA_RECORDER_INFO_MAX_DURATION_REACHED)
        pub const MEDIA_RECORDER_INFO_MAX_DURATION_REACHED : i32 = 800;

        /// public static final [MEDIA_RECORDER_INFO_MAX_FILESIZE_APPROACHING](https://developer.android.com/reference/android/media/MediaRecorder.html#MEDIA_RECORDER_INFO_MAX_FILESIZE_APPROACHING)
        pub const MEDIA_RECORDER_INFO_MAX_FILESIZE_APPROACHING : i32 = 802;

        /// public static final [MEDIA_RECORDER_INFO_MAX_FILESIZE_REACHED](https://developer.android.com/reference/android/media/MediaRecorder.html#MEDIA_RECORDER_INFO_MAX_FILESIZE_REACHED)
        pub const MEDIA_RECORDER_INFO_MAX_FILESIZE_REACHED : i32 = 801;

        /// public static final [MEDIA_RECORDER_INFO_NEXT_OUTPUT_FILE_STARTED](https://developer.android.com/reference/android/media/MediaRecorder.html#MEDIA_RECORDER_INFO_NEXT_OUTPUT_FILE_STARTED)
        pub const MEDIA_RECORDER_INFO_NEXT_OUTPUT_FILE_STARTED : i32 = 803;

        /// public static final [MEDIA_RECORDER_INFO_UNKNOWN](https://developer.android.com/reference/android/media/MediaRecorder.html#MEDIA_RECORDER_INFO_UNKNOWN)
        pub const MEDIA_RECORDER_INFO_UNKNOWN : i32 = 1;
    }
}
