// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-media-MediaCodecInfo_CodecCapabilities"))]
__jni_bindgen! {
    /// public final class [MediaCodecInfo.CodecCapabilities](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html)
    ///
    /// Required feature: android-media-MediaCodecInfo_CodecCapabilities
    public final class MediaCodecInfo_CodecCapabilities ("android/media/MediaCodecInfo$CodecCapabilities") extends crate::java::lang::Object {

        /// [CodecCapabilities](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#CodecCapabilities())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::media::MediaCodecInfo_CodecCapabilities>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodecInfo$CodecCapabilities", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodecInfo$CodecCapabilities\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isFeatureSupported](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#isFeatureSupported(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn isFeatureSupported<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodecInfo$CodecCapabilities", java.flags == PUBLIC, .name == "isFeatureSupported", .descriptor == "(Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodecInfo$CodecCapabilities\0", "isFeatureSupported\0", "(Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isFeatureRequired](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#isFeatureRequired(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn isFeatureRequired<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodecInfo$CodecCapabilities", java.flags == PUBLIC, .name == "isFeatureRequired", .descriptor == "(Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodecInfo$CodecCapabilities\0", "isFeatureRequired\0", "(Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isFormatSupported](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#isFormatSupported(android.media.MediaFormat))
        ///
        /// Required features: "android-media-MediaFormat"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaFormat")))]
        pub fn isFormatSupported<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaFormat>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodecInfo$CodecCapabilities", java.flags == PUBLIC, .name == "isFormatSupported", .descriptor == "(Landroid/media/MediaFormat;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodecInfo$CodecCapabilities\0", "isFormatSupported\0", "(Landroid/media/MediaFormat;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDefaultFormat](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#getDefaultFormat())
        ///
        /// Required features: "android-media-MediaFormat"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaFormat")))]
        pub fn getDefaultFormat<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::MediaFormat>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodecInfo$CodecCapabilities", java.flags == PUBLIC, .name == "getDefaultFormat", .descriptor == "()Landroid/media/MediaFormat;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodecInfo$CodecCapabilities\0", "getDefaultFormat\0", "()Landroid/media/MediaFormat;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMimeType](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#getMimeType())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getMimeType<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodecInfo$CodecCapabilities", java.flags == PUBLIC, .name == "getMimeType", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodecInfo$CodecCapabilities\0", "getMimeType\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMaxSupportedInstances](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#getMaxSupportedInstances())
        pub fn getMaxSupportedInstances<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodecInfo$CodecCapabilities", java.flags == PUBLIC, .name == "getMaxSupportedInstances", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodecInfo$CodecCapabilities\0", "getMaxSupportedInstances\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAudioCapabilities](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#getAudioCapabilities())
        ///
        /// Required features: "android-media-MediaCodecInfo_AudioCapabilities"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaCodecInfo_AudioCapabilities")))]
        pub fn getAudioCapabilities<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::MediaCodecInfo_AudioCapabilities>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodecInfo$CodecCapabilities", java.flags == PUBLIC, .name == "getAudioCapabilities", .descriptor == "()Landroid/media/MediaCodecInfo$AudioCapabilities;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodecInfo$CodecCapabilities\0", "getAudioCapabilities\0", "()Landroid/media/MediaCodecInfo$AudioCapabilities;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getEncoderCapabilities](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#getEncoderCapabilities())
        ///
        /// Required features: "android-media-MediaCodecInfo_EncoderCapabilities"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaCodecInfo_EncoderCapabilities")))]
        pub fn getEncoderCapabilities<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::MediaCodecInfo_EncoderCapabilities>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodecInfo$CodecCapabilities", java.flags == PUBLIC, .name == "getEncoderCapabilities", .descriptor == "()Landroid/media/MediaCodecInfo$EncoderCapabilities;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodecInfo$CodecCapabilities\0", "getEncoderCapabilities\0", "()Landroid/media/MediaCodecInfo$EncoderCapabilities;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getVideoCapabilities](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#getVideoCapabilities())
        ///
        /// Required features: "android-media-MediaCodecInfo_VideoCapabilities"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaCodecInfo_VideoCapabilities")))]
        pub fn getVideoCapabilities<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::MediaCodecInfo_VideoCapabilities>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodecInfo$CodecCapabilities", java.flags == PUBLIC, .name == "getVideoCapabilities", .descriptor == "()Landroid/media/MediaCodecInfo$VideoCapabilities;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodecInfo$CodecCapabilities\0", "getVideoCapabilities\0", "()Landroid/media/MediaCodecInfo$VideoCapabilities;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createFromProfileLevel](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#createFromProfileLevel(java.lang.String,%20int,%20int))
        ///
        /// Required features: "android-media-MediaCodecInfo_CodecCapabilities", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaCodecInfo_CodecCapabilities", feature = "java-lang-String")))]
        pub fn createFromProfileLevel<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::MediaCodecInfo_CodecCapabilities>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodecInfo$CodecCapabilities", java.flags == PUBLIC | STATIC, .name == "createFromProfileLevel", .descriptor == "(Ljava/lang/String;II)Landroid/media/MediaCodecInfo$CodecCapabilities;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/media/MediaCodecInfo$CodecCapabilities\0", "createFromProfileLevel\0", "(Ljava/lang/String;II)Landroid/media/MediaCodecInfo$CodecCapabilities;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [COLOR_Format12bitRGB444](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_Format12bitRGB444)
        #[deprecated] pub const COLOR_Format12bitRGB444 : i32 = 3;

        /// public static final [COLOR_Format16bitARGB1555](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_Format16bitARGB1555)
        #[deprecated] pub const COLOR_Format16bitARGB1555 : i32 = 5;

        /// public static final [COLOR_Format16bitARGB4444](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_Format16bitARGB4444)
        #[deprecated] pub const COLOR_Format16bitARGB4444 : i32 = 4;

        /// public static final [COLOR_Format16bitBGR565](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_Format16bitBGR565)
        #[deprecated] pub const COLOR_Format16bitBGR565 : i32 = 7;

        /// public static final [COLOR_Format16bitRGB565](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_Format16bitRGB565)
        pub const COLOR_Format16bitRGB565 : i32 = 6;

        /// public static final [COLOR_Format18BitBGR666](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_Format18BitBGR666)
        #[deprecated] pub const COLOR_Format18BitBGR666 : i32 = 41;

        /// public static final [COLOR_Format18bitARGB1665](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_Format18bitARGB1665)
        #[deprecated] pub const COLOR_Format18bitARGB1665 : i32 = 9;

        /// public static final [COLOR_Format18bitRGB666](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_Format18bitRGB666)
        #[deprecated] pub const COLOR_Format18bitRGB666 : i32 = 8;

        /// public static final [COLOR_Format19bitARGB1666](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_Format19bitARGB1666)
        #[deprecated] pub const COLOR_Format19bitARGB1666 : i32 = 10;

        /// public static final [COLOR_Format24BitABGR6666](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_Format24BitABGR6666)
        #[deprecated] pub const COLOR_Format24BitABGR6666 : i32 = 43;

        /// public static final [COLOR_Format24BitARGB6666](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_Format24BitARGB6666)
        #[deprecated] pub const COLOR_Format24BitARGB6666 : i32 = 42;

        /// public static final [COLOR_Format24bitARGB1887](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_Format24bitARGB1887)
        #[deprecated] pub const COLOR_Format24bitARGB1887 : i32 = 13;

        /// public static final [COLOR_Format24bitBGR888](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_Format24bitBGR888)
        pub const COLOR_Format24bitBGR888 : i32 = 12;

        /// public static final [COLOR_Format24bitRGB888](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_Format24bitRGB888)
        #[deprecated] pub const COLOR_Format24bitRGB888 : i32 = 11;

        /// public static final [COLOR_Format25bitARGB1888](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_Format25bitARGB1888)
        #[deprecated] pub const COLOR_Format25bitARGB1888 : i32 = 14;

        /// public static final [COLOR_Format32bitABGR8888](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_Format32bitABGR8888)
        pub const COLOR_Format32bitABGR8888 : i32 = 2130747392;

        /// public static final [COLOR_Format32bitARGB8888](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_Format32bitARGB8888)
        #[deprecated] pub const COLOR_Format32bitARGB8888 : i32 = 16;

        /// public static final [COLOR_Format32bitBGRA8888](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_Format32bitBGRA8888)
        #[deprecated] pub const COLOR_Format32bitBGRA8888 : i32 = 15;

        /// public static final [COLOR_Format8bitRGB332](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_Format8bitRGB332)
        #[deprecated] pub const COLOR_Format8bitRGB332 : i32 = 2;

        /// public static final [COLOR_FormatCbYCrY](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_FormatCbYCrY)
        #[deprecated] pub const COLOR_FormatCbYCrY : i32 = 27;

        /// public static final [COLOR_FormatCrYCbY](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_FormatCrYCbY)
        #[deprecated] pub const COLOR_FormatCrYCbY : i32 = 28;

        /// public static final [COLOR_FormatL16](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_FormatL16)
        pub const COLOR_FormatL16 : i32 = 36;

        /// public static final [COLOR_FormatL2](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_FormatL2)
        #[deprecated] pub const COLOR_FormatL2 : i32 = 33;

        /// public static final [COLOR_FormatL24](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_FormatL24)
        #[deprecated] pub const COLOR_FormatL24 : i32 = 37;

        /// public static final [COLOR_FormatL32](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_FormatL32)
        #[deprecated] pub const COLOR_FormatL32 : i32 = 38;

        /// public static final [COLOR_FormatL4](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_FormatL4)
        #[deprecated] pub const COLOR_FormatL4 : i32 = 34;

        /// public static final [COLOR_FormatL8](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_FormatL8)
        pub const COLOR_FormatL8 : i32 = 35;

        /// public static final [COLOR_FormatMonochrome](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_FormatMonochrome)
        #[deprecated] pub const COLOR_FormatMonochrome : i32 = 1;

        /// public static final [COLOR_FormatRGBAFlexible](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_FormatRGBAFlexible)
        pub const COLOR_FormatRGBAFlexible : i32 = 2134288520;

        /// public static final [COLOR_FormatRGBFlexible](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_FormatRGBFlexible)
        pub const COLOR_FormatRGBFlexible : i32 = 2134292616;

        /// public static final [COLOR_FormatRawBayer10bit](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_FormatRawBayer10bit)
        pub const COLOR_FormatRawBayer10bit : i32 = 31;

        /// public static final [COLOR_FormatRawBayer8bit](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_FormatRawBayer8bit)
        pub const COLOR_FormatRawBayer8bit : i32 = 30;

        /// public static final [COLOR_FormatRawBayer8bitcompressed](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_FormatRawBayer8bitcompressed)
        pub const COLOR_FormatRawBayer8bitcompressed : i32 = 32;

        /// public static final [COLOR_FormatSurface](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_FormatSurface)
        pub const COLOR_FormatSurface : i32 = 2130708361;

        /// public static final [COLOR_FormatYCbYCr](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_FormatYCbYCr)
        #[deprecated] pub const COLOR_FormatYCbYCr : i32 = 25;

        /// public static final [COLOR_FormatYCrYCb](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_FormatYCrYCb)
        #[deprecated] pub const COLOR_FormatYCrYCb : i32 = 26;

        /// public static final [COLOR_FormatYUV411PackedPlanar](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_FormatYUV411PackedPlanar)
        #[deprecated] pub const COLOR_FormatYUV411PackedPlanar : i32 = 18;

        /// public static final [COLOR_FormatYUV411Planar](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_FormatYUV411Planar)
        #[deprecated] pub const COLOR_FormatYUV411Planar : i32 = 17;

        /// public static final [COLOR_FormatYUV420Flexible](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_FormatYUV420Flexible)
        pub const COLOR_FormatYUV420Flexible : i32 = 2135033992;

        /// public static final [COLOR_FormatYUV420PackedPlanar](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_FormatYUV420PackedPlanar)
        #[deprecated] pub const COLOR_FormatYUV420PackedPlanar : i32 = 20;

        /// public static final [COLOR_FormatYUV420PackedSemiPlanar](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_FormatYUV420PackedSemiPlanar)
        #[deprecated] pub const COLOR_FormatYUV420PackedSemiPlanar : i32 = 39;

        /// public static final [COLOR_FormatYUV420Planar](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_FormatYUV420Planar)
        #[deprecated] pub const COLOR_FormatYUV420Planar : i32 = 19;

        /// public static final [COLOR_FormatYUV420SemiPlanar](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_FormatYUV420SemiPlanar)
        #[deprecated] pub const COLOR_FormatYUV420SemiPlanar : i32 = 21;

        /// public static final [COLOR_FormatYUV422Flexible](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_FormatYUV422Flexible)
        pub const COLOR_FormatYUV422Flexible : i32 = 2135042184;

        /// public static final [COLOR_FormatYUV422PackedPlanar](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_FormatYUV422PackedPlanar)
        #[deprecated] pub const COLOR_FormatYUV422PackedPlanar : i32 = 23;

        /// public static final [COLOR_FormatYUV422PackedSemiPlanar](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_FormatYUV422PackedSemiPlanar)
        #[deprecated] pub const COLOR_FormatYUV422PackedSemiPlanar : i32 = 40;

        /// public static final [COLOR_FormatYUV422Planar](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_FormatYUV422Planar)
        #[deprecated] pub const COLOR_FormatYUV422Planar : i32 = 22;

        /// public static final [COLOR_FormatYUV422SemiPlanar](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_FormatYUV422SemiPlanar)
        #[deprecated] pub const COLOR_FormatYUV422SemiPlanar : i32 = 24;

        /// public static final [COLOR_FormatYUV444Flexible](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_FormatYUV444Flexible)
        pub const COLOR_FormatYUV444Flexible : i32 = 2135181448;

        /// public static final [COLOR_FormatYUV444Interleaved](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_FormatYUV444Interleaved)
        #[deprecated] pub const COLOR_FormatYUV444Interleaved : i32 = 29;

        /// public static final [COLOR_QCOM_FormatYUV420SemiPlanar](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_QCOM_FormatYUV420SemiPlanar)
        #[deprecated] pub const COLOR_QCOM_FormatYUV420SemiPlanar : i32 = 2141391872;

        /// public static final [COLOR_TI_FormatYUV420PackedSemiPlanar](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#COLOR_TI_FormatYUV420PackedSemiPlanar)
        #[deprecated] pub const COLOR_TI_FormatYUV420PackedSemiPlanar : i32 = 2130706688;

        /// public static final [FEATURE_AdaptivePlayback](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#FEATURE_AdaptivePlayback)
        pub const FEATURE_AdaptivePlayback : &'static str = "adaptive-playback";

        /// public static final [FEATURE_DynamicTimestamp](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#FEATURE_DynamicTimestamp)
        pub const FEATURE_DynamicTimestamp : &'static str = "dynamic-timestamp";

        /// public static final [FEATURE_FrameParsing](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#FEATURE_FrameParsing)
        pub const FEATURE_FrameParsing : &'static str = "frame-parsing";

        /// public static final [FEATURE_IntraRefresh](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#FEATURE_IntraRefresh)
        pub const FEATURE_IntraRefresh : &'static str = "intra-refresh";

        /// public static final [FEATURE_MultipleFrames](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#FEATURE_MultipleFrames)
        pub const FEATURE_MultipleFrames : &'static str = "multiple-frames";

        /// public static final [FEATURE_PartialFrame](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#FEATURE_PartialFrame)
        pub const FEATURE_PartialFrame : &'static str = "partial-frame";

        /// public static final [FEATURE_SecurePlayback](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#FEATURE_SecurePlayback)
        pub const FEATURE_SecurePlayback : &'static str = "secure-playback";

        /// public static final [FEATURE_TunneledPlayback](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#FEATURE_TunneledPlayback)
        pub const FEATURE_TunneledPlayback : &'static str = "tunneled-playback";

        /// **get** public [colorFormats](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#colorFormats)
        pub fn colorFormats<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::IntArray>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/media/MediaCodecInfo$CodecCapabilities\0", "colorFormats\0", "[I\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [colorFormats](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#colorFormats)
        pub fn set_colorFormats<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj __jni_bindgen::IntArray>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/media/MediaCodecInfo$CodecCapabilities\0", "colorFormats\0", "[I\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [profileLevels](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#profileLevels)
        ///
        /// Required feature: android-media-MediaCodecInfo_CodecProfileLevel
        #[cfg(any(feature = "all", feature = "android-media-MediaCodecInfo_CodecProfileLevel"))]
        pub fn profileLevels<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::android::media::MediaCodecInfo_CodecProfileLevel, crate::java::lang::Throwable>>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/media/MediaCodecInfo$CodecCapabilities\0", "profileLevels\0", "[Landroid/media/MediaCodecInfo$CodecProfileLevel;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [profileLevels](https://developer.android.com/reference/android/media/MediaCodecInfo.CodecCapabilities.html#profileLevels)
        ///
        /// Required feature: android-media-MediaCodecInfo_CodecProfileLevel
        #[cfg(any(feature = "all", feature = "android-media-MediaCodecInfo_CodecProfileLevel"))]
        pub fn set_profileLevels<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj __jni_bindgen::ObjectArray<crate::android::media::MediaCodecInfo_CodecProfileLevel, crate::java::lang::Throwable>>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/media/MediaCodecInfo$CodecCapabilities\0", "profileLevels\0", "[Landroid/media/MediaCodecInfo$CodecProfileLevel;\0");
                env.set_object_field(class, field, value)
            }
        }
    }
}
