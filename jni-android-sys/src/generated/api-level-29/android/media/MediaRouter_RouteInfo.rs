// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-media-MediaRouter_RouteInfo"))]
__jni_bindgen! {
    /// public class [MediaRouter.RouteInfo](https://developer.android.com/reference/android/media/MediaRouter.RouteInfo.html)
    ///
    /// Required feature: android-media-MediaRouter_RouteInfo
    public class MediaRouter_RouteInfo ("android/media/MediaRouter$RouteInfo") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [RouteInfo](https://developer.android.com/reference/android/media/MediaRouter.RouteInfo.html#RouteInfo(android.media.MediaRouter.RouteCategory))
        // ///
        // /// Required features: "android-media-MediaRouter_RouteCategory"
        // #[cfg(any(feature = "all", all(feature = "android-media-MediaRouter_RouteCategory")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaRouter_RouteCategory>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::media::MediaRouter_RouteInfo>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/media/MediaRouter$RouteInfo", java.flags == (empty), .name == "<init>", .descriptor == "(Landroid/media/MediaRouter$RouteCategory;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRouter$RouteInfo\0", "<init>\0", "(Landroid/media/MediaRouter$RouteCategory;)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getName](https://developer.android.com/reference/android/media/MediaRouter.RouteInfo.html#getName())
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn getName<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::CharSequence>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRouter$RouteInfo", java.flags == PUBLIC, .name == "getName", .descriptor == "()Ljava/lang/CharSequence;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRouter$RouteInfo\0", "getName\0", "()Ljava/lang/CharSequence;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getName](https://developer.android.com/reference/android/media/MediaRouter.RouteInfo.html#getName(android.content.Context))
        ///
        /// Required features: "android-content-Context", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "java-lang-CharSequence")))]
        pub fn getName_Context<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::CharSequence>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRouter$RouteInfo", java.flags == PUBLIC, .name == "getName", .descriptor == "(Landroid/content/Context;)Ljava/lang/CharSequence;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRouter$RouteInfo\0", "getName\0", "(Landroid/content/Context;)Ljava/lang/CharSequence;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDescription](https://developer.android.com/reference/android/media/MediaRouter.RouteInfo.html#getDescription())
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn getDescription<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::CharSequence>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRouter$RouteInfo", java.flags == PUBLIC, .name == "getDescription", .descriptor == "()Ljava/lang/CharSequence;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRouter$RouteInfo\0", "getDescription\0", "()Ljava/lang/CharSequence;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getStatus](https://developer.android.com/reference/android/media/MediaRouter.RouteInfo.html#getStatus())
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn getStatus<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::CharSequence>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRouter$RouteInfo", java.flags == PUBLIC, .name == "getStatus", .descriptor == "()Ljava/lang/CharSequence;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRouter$RouteInfo\0", "getStatus\0", "()Ljava/lang/CharSequence;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSupportedTypes](https://developer.android.com/reference/android/media/MediaRouter.RouteInfo.html#getSupportedTypes())
        pub fn getSupportedTypes<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRouter$RouteInfo", java.flags == PUBLIC, .name == "getSupportedTypes", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRouter$RouteInfo\0", "getSupportedTypes\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDeviceType](https://developer.android.com/reference/android/media/MediaRouter.RouteInfo.html#getDeviceType())
        pub fn getDeviceType<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRouter$RouteInfo", java.flags == PUBLIC, .name == "getDeviceType", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRouter$RouteInfo\0", "getDeviceType\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getGroup](https://developer.android.com/reference/android/media/MediaRouter.RouteInfo.html#getGroup())
        ///
        /// Required features: "android-media-MediaRouter_RouteGroup"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaRouter_RouteGroup")))]
        pub fn getGroup<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::MediaRouter_RouteGroup>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRouter$RouteInfo", java.flags == PUBLIC, .name == "getGroup", .descriptor == "()Landroid/media/MediaRouter$RouteGroup;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRouter$RouteInfo\0", "getGroup\0", "()Landroid/media/MediaRouter$RouteGroup;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCategory](https://developer.android.com/reference/android/media/MediaRouter.RouteInfo.html#getCategory())
        ///
        /// Required features: "android-media-MediaRouter_RouteCategory"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaRouter_RouteCategory")))]
        pub fn getCategory<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::MediaRouter_RouteCategory>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRouter$RouteInfo", java.flags == PUBLIC, .name == "getCategory", .descriptor == "()Landroid/media/MediaRouter$RouteCategory;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRouter$RouteInfo\0", "getCategory\0", "()Landroid/media/MediaRouter$RouteCategory;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getIconDrawable](https://developer.android.com/reference/android/media/MediaRouter.RouteInfo.html#getIconDrawable())
        ///
        /// Required features: "android-graphics-drawable-Drawable"
        #[cfg(any(feature = "all", all(feature = "android-graphics-drawable-Drawable")))]
        pub fn getIconDrawable<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::drawable::Drawable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRouter$RouteInfo", java.flags == PUBLIC, .name == "getIconDrawable", .descriptor == "()Landroid/graphics/drawable/Drawable;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRouter$RouteInfo\0", "getIconDrawable\0", "()Landroid/graphics/drawable/Drawable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTag](https://developer.android.com/reference/android/media/MediaRouter.RouteInfo.html#setTag(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn setTag<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRouter$RouteInfo", java.flags == PUBLIC, .name == "setTag", .descriptor == "(Ljava/lang/Object;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRouter$RouteInfo\0", "setTag\0", "(Ljava/lang/Object;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTag](https://developer.android.com/reference/android/media/MediaRouter.RouteInfo.html#getTag())
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn getTag<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRouter$RouteInfo", java.flags == PUBLIC, .name == "getTag", .descriptor == "()Ljava/lang/Object;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRouter$RouteInfo\0", "getTag\0", "()Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPlaybackType](https://developer.android.com/reference/android/media/MediaRouter.RouteInfo.html#getPlaybackType())
        pub fn getPlaybackType<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRouter$RouteInfo", java.flags == PUBLIC, .name == "getPlaybackType", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRouter$RouteInfo\0", "getPlaybackType\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPlaybackStream](https://developer.android.com/reference/android/media/MediaRouter.RouteInfo.html#getPlaybackStream())
        pub fn getPlaybackStream<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRouter$RouteInfo", java.flags == PUBLIC, .name == "getPlaybackStream", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRouter$RouteInfo\0", "getPlaybackStream\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getVolume](https://developer.android.com/reference/android/media/MediaRouter.RouteInfo.html#getVolume())
        pub fn getVolume<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRouter$RouteInfo", java.flags == PUBLIC, .name == "getVolume", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRouter$RouteInfo\0", "getVolume\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [requestSetVolume](https://developer.android.com/reference/android/media/MediaRouter.RouteInfo.html#requestSetVolume(int))
        pub fn requestSetVolume<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRouter$RouteInfo", java.flags == PUBLIC, .name == "requestSetVolume", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRouter$RouteInfo\0", "requestSetVolume\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [requestUpdateVolume](https://developer.android.com/reference/android/media/MediaRouter.RouteInfo.html#requestUpdateVolume(int))
        pub fn requestUpdateVolume<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRouter$RouteInfo", java.flags == PUBLIC, .name == "requestUpdateVolume", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRouter$RouteInfo\0", "requestUpdateVolume\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getVolumeMax](https://developer.android.com/reference/android/media/MediaRouter.RouteInfo.html#getVolumeMax())
        pub fn getVolumeMax<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRouter$RouteInfo", java.flags == PUBLIC, .name == "getVolumeMax", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRouter$RouteInfo\0", "getVolumeMax\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getVolumeHandling](https://developer.android.com/reference/android/media/MediaRouter.RouteInfo.html#getVolumeHandling())
        pub fn getVolumeHandling<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRouter$RouteInfo", java.flags == PUBLIC, .name == "getVolumeHandling", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRouter$RouteInfo\0", "getVolumeHandling\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPresentationDisplay](https://developer.android.com/reference/android/media/MediaRouter.RouteInfo.html#getPresentationDisplay())
        ///
        /// Required features: "android-view-Display"
        #[cfg(any(feature = "all", all(feature = "android-view-Display")))]
        pub fn getPresentationDisplay<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::Display>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRouter$RouteInfo", java.flags == PUBLIC, .name == "getPresentationDisplay", .descriptor == "()Landroid/view/Display;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRouter$RouteInfo\0", "getPresentationDisplay\0", "()Landroid/view/Display;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isEnabled](https://developer.android.com/reference/android/media/MediaRouter.RouteInfo.html#isEnabled())
        pub fn isEnabled<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRouter$RouteInfo", java.flags == PUBLIC, .name == "isEnabled", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRouter$RouteInfo\0", "isEnabled\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isConnecting](https://developer.android.com/reference/android/media/MediaRouter.RouteInfo.html#isConnecting())
        pub fn isConnecting<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRouter$RouteInfo", java.flags == PUBLIC, .name == "isConnecting", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRouter$RouteInfo\0", "isConnecting\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/android/media/MediaRouter.RouteInfo.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRouter$RouteInfo", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRouter$RouteInfo\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [DEVICE_TYPE_BLUETOOTH](https://developer.android.com/reference/android/media/MediaRouter.RouteInfo.html#DEVICE_TYPE_BLUETOOTH)
        pub const DEVICE_TYPE_BLUETOOTH : i32 = 3;

        /// public static final [DEVICE_TYPE_SPEAKER](https://developer.android.com/reference/android/media/MediaRouter.RouteInfo.html#DEVICE_TYPE_SPEAKER)
        pub const DEVICE_TYPE_SPEAKER : i32 = 2;

        /// public static final [DEVICE_TYPE_TV](https://developer.android.com/reference/android/media/MediaRouter.RouteInfo.html#DEVICE_TYPE_TV)
        pub const DEVICE_TYPE_TV : i32 = 1;

        /// public static final [DEVICE_TYPE_UNKNOWN](https://developer.android.com/reference/android/media/MediaRouter.RouteInfo.html#DEVICE_TYPE_UNKNOWN)
        pub const DEVICE_TYPE_UNKNOWN : i32 = 0;

        /// public static final [PLAYBACK_TYPE_LOCAL](https://developer.android.com/reference/android/media/MediaRouter.RouteInfo.html#PLAYBACK_TYPE_LOCAL)
        pub const PLAYBACK_TYPE_LOCAL : i32 = 0;

        /// public static final [PLAYBACK_TYPE_REMOTE](https://developer.android.com/reference/android/media/MediaRouter.RouteInfo.html#PLAYBACK_TYPE_REMOTE)
        pub const PLAYBACK_TYPE_REMOTE : i32 = 1;

        /// public static final [PLAYBACK_VOLUME_FIXED](https://developer.android.com/reference/android/media/MediaRouter.RouteInfo.html#PLAYBACK_VOLUME_FIXED)
        pub const PLAYBACK_VOLUME_FIXED : i32 = 0;

        /// public static final [PLAYBACK_VOLUME_VARIABLE](https://developer.android.com/reference/android/media/MediaRouter.RouteInfo.html#PLAYBACK_VOLUME_VARIABLE)
        pub const PLAYBACK_VOLUME_VARIABLE : i32 = 1;
    }
}
