// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-media-MediaRouter_UserRouteInfo"))]
__jni_bindgen! {
    /// public class [MediaRouter.UserRouteInfo](https://developer.android.com/reference/android/media/MediaRouter.UserRouteInfo.html)
    ///
    /// Required feature: android-media-MediaRouter_UserRouteInfo
    public class MediaRouter_UserRouteInfo ("android/media/MediaRouter$UserRouteInfo") extends crate::android::media::MediaRouter_RouteInfo {

        // // Not emitting: Non-public method
        // /// [UserRouteInfo](https://developer.android.com/reference/android/media/MediaRouter.UserRouteInfo.html#UserRouteInfo(android.media.MediaRouter.RouteCategory))
        // ///
        // /// Required features: "android-media-MediaRouter_RouteCategory"
        // #[cfg(any(feature = "all", all(feature = "android-media-MediaRouter_RouteCategory")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaRouter_RouteCategory>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::media::MediaRouter_UserRouteInfo>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/media/MediaRouter$UserRouteInfo", java.flags == (empty), .name == "<init>", .descriptor == "(Landroid/media/MediaRouter$RouteCategory;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRouter$UserRouteInfo\0", "<init>\0", "(Landroid/media/MediaRouter$RouteCategory;)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [setName](https://developer.android.com/reference/android/media/MediaRouter.UserRouteInfo.html#setName(java.lang.CharSequence))
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn setName_CharSequence<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRouter$UserRouteInfo", java.flags == PUBLIC, .name == "setName", .descriptor == "(Ljava/lang/CharSequence;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRouter$UserRouteInfo\0", "setName\0", "(Ljava/lang/CharSequence;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setName](https://developer.android.com/reference/android/media/MediaRouter.UserRouteInfo.html#setName(int))
        pub fn setName_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRouter$UserRouteInfo", java.flags == PUBLIC, .name == "setName", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRouter$UserRouteInfo\0", "setName\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDescription](https://developer.android.com/reference/android/media/MediaRouter.UserRouteInfo.html#setDescription(java.lang.CharSequence))
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn setDescription<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRouter$UserRouteInfo", java.flags == PUBLIC, .name == "setDescription", .descriptor == "(Ljava/lang/CharSequence;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRouter$UserRouteInfo\0", "setDescription\0", "(Ljava/lang/CharSequence;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setStatus](https://developer.android.com/reference/android/media/MediaRouter.UserRouteInfo.html#setStatus(java.lang.CharSequence))
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn setStatus<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRouter$UserRouteInfo", java.flags == PUBLIC, .name == "setStatus", .descriptor == "(Ljava/lang/CharSequence;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRouter$UserRouteInfo\0", "setStatus\0", "(Ljava/lang/CharSequence;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setRemoteControlClient](https://developer.android.com/reference/android/media/MediaRouter.UserRouteInfo.html#setRemoteControlClient(android.media.RemoteControlClient))
        ///
        /// Required features: "android-media-RemoteControlClient"
        #[cfg(any(feature = "all", all(feature = "android-media-RemoteControlClient")))]
        pub fn setRemoteControlClient<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::RemoteControlClient>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRouter$UserRouteInfo", java.flags == PUBLIC, .name == "setRemoteControlClient", .descriptor == "(Landroid/media/RemoteControlClient;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRouter$UserRouteInfo\0", "setRemoteControlClient\0", "(Landroid/media/RemoteControlClient;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRemoteControlClient](https://developer.android.com/reference/android/media/MediaRouter.UserRouteInfo.html#getRemoteControlClient())
        ///
        /// Required features: "android-media-RemoteControlClient"
        #[cfg(any(feature = "all", all(feature = "android-media-RemoteControlClient")))]
        pub fn getRemoteControlClient<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::RemoteControlClient>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRouter$UserRouteInfo", java.flags == PUBLIC, .name == "getRemoteControlClient", .descriptor == "()Landroid/media/RemoteControlClient;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRouter$UserRouteInfo\0", "getRemoteControlClient\0", "()Landroid/media/RemoteControlClient;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setIconDrawable](https://developer.android.com/reference/android/media/MediaRouter.UserRouteInfo.html#setIconDrawable(android.graphics.drawable.Drawable))
        ///
        /// Required features: "android-graphics-drawable-Drawable"
        #[cfg(any(feature = "all", all(feature = "android-graphics-drawable-Drawable")))]
        pub fn setIconDrawable<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::drawable::Drawable>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRouter$UserRouteInfo", java.flags == PUBLIC, .name == "setIconDrawable", .descriptor == "(Landroid/graphics/drawable/Drawable;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRouter$UserRouteInfo\0", "setIconDrawable\0", "(Landroid/graphics/drawable/Drawable;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setIconResource](https://developer.android.com/reference/android/media/MediaRouter.UserRouteInfo.html#setIconResource(int))
        pub fn setIconResource<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRouter$UserRouteInfo", java.flags == PUBLIC, .name == "setIconResource", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRouter$UserRouteInfo\0", "setIconResource\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setVolumeCallback](https://developer.android.com/reference/android/media/MediaRouter.UserRouteInfo.html#setVolumeCallback(android.media.MediaRouter.VolumeCallback))
        ///
        /// Required features: "android-media-MediaRouter_VolumeCallback"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaRouter_VolumeCallback")))]
        pub fn setVolumeCallback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaRouter_VolumeCallback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRouter$UserRouteInfo", java.flags == PUBLIC, .name == "setVolumeCallback", .descriptor == "(Landroid/media/MediaRouter$VolumeCallback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRouter$UserRouteInfo\0", "setVolumeCallback\0", "(Landroid/media/MediaRouter$VolumeCallback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPlaybackType](https://developer.android.com/reference/android/media/MediaRouter.UserRouteInfo.html#setPlaybackType(int))
        pub fn setPlaybackType<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRouter$UserRouteInfo", java.flags == PUBLIC, .name == "setPlaybackType", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRouter$UserRouteInfo\0", "setPlaybackType\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setVolumeHandling](https://developer.android.com/reference/android/media/MediaRouter.UserRouteInfo.html#setVolumeHandling(int))
        pub fn setVolumeHandling<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRouter$UserRouteInfo", java.flags == PUBLIC, .name == "setVolumeHandling", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRouter$UserRouteInfo\0", "setVolumeHandling\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setVolume](https://developer.android.com/reference/android/media/MediaRouter.UserRouteInfo.html#setVolume(int))
        pub fn setVolume<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRouter$UserRouteInfo", java.flags == PUBLIC, .name == "setVolume", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRouter$UserRouteInfo\0", "setVolume\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [requestSetVolume](https://developer.android.com/reference/android/media/MediaRouter.UserRouteInfo.html#requestSetVolume(int))
        pub fn requestSetVolume<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRouter$UserRouteInfo", java.flags == PUBLIC, .name == "requestSetVolume", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRouter$UserRouteInfo\0", "requestSetVolume\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [requestUpdateVolume](https://developer.android.com/reference/android/media/MediaRouter.UserRouteInfo.html#requestUpdateVolume(int))
        pub fn requestUpdateVolume<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRouter$UserRouteInfo", java.flags == PUBLIC, .name == "requestUpdateVolume", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRouter$UserRouteInfo\0", "requestUpdateVolume\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setVolumeMax](https://developer.android.com/reference/android/media/MediaRouter.UserRouteInfo.html#setVolumeMax(int))
        pub fn setVolumeMax<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRouter$UserRouteInfo", java.flags == PUBLIC, .name == "setVolumeMax", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRouter$UserRouteInfo\0", "setVolumeMax\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPlaybackStream](https://developer.android.com/reference/android/media/MediaRouter.UserRouteInfo.html#setPlaybackStream(int))
        pub fn setPlaybackStream<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRouter$UserRouteInfo", java.flags == PUBLIC, .name == "setPlaybackStream", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRouter$UserRouteInfo\0", "setPlaybackStream\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
