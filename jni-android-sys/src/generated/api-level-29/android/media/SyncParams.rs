// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-media-SyncParams"))]
__jni_bindgen! {
    /// public final class [SyncParams](https://developer.android.com/reference/android/media/SyncParams.html)
    ///
    /// Required feature: android-media-SyncParams
    public final class SyncParams ("android/media/SyncParams") extends crate::java::lang::Object {

        /// [SyncParams](https://developer.android.com/reference/android/media/SyncParams.html#SyncParams())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::media::SyncParams>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/SyncParams", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/SyncParams\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [allowDefaults](https://developer.android.com/reference/android/media/SyncParams.html#allowDefaults())
        ///
        /// Required features: "android-media-SyncParams"
        #[cfg(any(feature = "all", all(feature = "android-media-SyncParams")))]
        pub fn allowDefaults<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::SyncParams>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/SyncParams", java.flags == PUBLIC, .name == "allowDefaults", .descriptor == "()Landroid/media/SyncParams;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/SyncParams\0", "allowDefaults\0", "()Landroid/media/SyncParams;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAudioAdjustMode](https://developer.android.com/reference/android/media/SyncParams.html#setAudioAdjustMode(int))
        ///
        /// Required features: "android-media-SyncParams"
        #[cfg(any(feature = "all", all(feature = "android-media-SyncParams")))]
        pub fn setAudioAdjustMode<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::SyncParams>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/SyncParams", java.flags == PUBLIC, .name == "setAudioAdjustMode", .descriptor == "(I)Landroid/media/SyncParams;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/SyncParams\0", "setAudioAdjustMode\0", "(I)Landroid/media/SyncParams;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAudioAdjustMode](https://developer.android.com/reference/android/media/SyncParams.html#getAudioAdjustMode())
        pub fn getAudioAdjustMode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/SyncParams", java.flags == PUBLIC, .name == "getAudioAdjustMode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/SyncParams\0", "getAudioAdjustMode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setSyncSource](https://developer.android.com/reference/android/media/SyncParams.html#setSyncSource(int))
        ///
        /// Required features: "android-media-SyncParams"
        #[cfg(any(feature = "all", all(feature = "android-media-SyncParams")))]
        pub fn setSyncSource<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::SyncParams>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/SyncParams", java.flags == PUBLIC, .name == "setSyncSource", .descriptor == "(I)Landroid/media/SyncParams;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/SyncParams\0", "setSyncSource\0", "(I)Landroid/media/SyncParams;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSyncSource](https://developer.android.com/reference/android/media/SyncParams.html#getSyncSource())
        pub fn getSyncSource<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/SyncParams", java.flags == PUBLIC, .name == "getSyncSource", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/SyncParams\0", "getSyncSource\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTolerance](https://developer.android.com/reference/android/media/SyncParams.html#setTolerance(float))
        ///
        /// Required features: "android-media-SyncParams"
        #[cfg(any(feature = "all", all(feature = "android-media-SyncParams")))]
        pub fn setTolerance<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::SyncParams>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/SyncParams", java.flags == PUBLIC, .name == "setTolerance", .descriptor == "(F)Landroid/media/SyncParams;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/SyncParams\0", "setTolerance\0", "(F)Landroid/media/SyncParams;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTolerance](https://developer.android.com/reference/android/media/SyncParams.html#getTolerance())
        pub fn getTolerance<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/SyncParams", java.flags == PUBLIC, .name == "getTolerance", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/SyncParams\0", "getTolerance\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setFrameRate](https://developer.android.com/reference/android/media/SyncParams.html#setFrameRate(float))
        ///
        /// Required features: "android-media-SyncParams"
        #[cfg(any(feature = "all", all(feature = "android-media-SyncParams")))]
        pub fn setFrameRate<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::SyncParams>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/SyncParams", java.flags == PUBLIC, .name == "setFrameRate", .descriptor == "(F)Landroid/media/SyncParams;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/SyncParams\0", "setFrameRate\0", "(F)Landroid/media/SyncParams;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFrameRate](https://developer.android.com/reference/android/media/SyncParams.html#getFrameRate())
        pub fn getFrameRate<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/SyncParams", java.flags == PUBLIC, .name == "getFrameRate", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/SyncParams\0", "getFrameRate\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [AUDIO_ADJUST_MODE_DEFAULT](https://developer.android.com/reference/android/media/SyncParams.html#AUDIO_ADJUST_MODE_DEFAULT)
        pub const AUDIO_ADJUST_MODE_DEFAULT : i32 = 0;

        /// public static final [AUDIO_ADJUST_MODE_RESAMPLE](https://developer.android.com/reference/android/media/SyncParams.html#AUDIO_ADJUST_MODE_RESAMPLE)
        pub const AUDIO_ADJUST_MODE_RESAMPLE : i32 = 2;

        /// public static final [AUDIO_ADJUST_MODE_STRETCH](https://developer.android.com/reference/android/media/SyncParams.html#AUDIO_ADJUST_MODE_STRETCH)
        pub const AUDIO_ADJUST_MODE_STRETCH : i32 = 1;

        /// public static final [SYNC_SOURCE_AUDIO](https://developer.android.com/reference/android/media/SyncParams.html#SYNC_SOURCE_AUDIO)
        pub const SYNC_SOURCE_AUDIO : i32 = 2;

        /// public static final [SYNC_SOURCE_DEFAULT](https://developer.android.com/reference/android/media/SyncParams.html#SYNC_SOURCE_DEFAULT)
        pub const SYNC_SOURCE_DEFAULT : i32 = 0;

        /// public static final [SYNC_SOURCE_SYSTEM_CLOCK](https://developer.android.com/reference/android/media/SyncParams.html#SYNC_SOURCE_SYSTEM_CLOCK)
        pub const SYNC_SOURCE_SYSTEM_CLOCK : i32 = 1;

        /// public static final [SYNC_SOURCE_VSYNC](https://developer.android.com/reference/android/media/SyncParams.html#SYNC_SOURCE_VSYNC)
        pub const SYNC_SOURCE_VSYNC : i32 = 3;
    }
}
