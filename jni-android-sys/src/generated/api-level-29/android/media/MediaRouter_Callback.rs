// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-media-MediaRouter_Callback"))]
__jni_bindgen! {
    /// public class [MediaRouter.Callback](https://developer.android.com/reference/android/media/MediaRouter.Callback.html)
    ///
    /// Required feature: android-media-MediaRouter_Callback
    public class MediaRouter_Callback ("android/media/MediaRouter$Callback") extends crate::java::lang::Object {

        /// [Callback](https://developer.android.com/reference/android/media/MediaRouter.Callback.html#Callback())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::media::MediaRouter_Callback>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRouter$Callback", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRouter$Callback\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onRouteSelected](https://developer.android.com/reference/android/media/MediaRouter.Callback.html#onRouteSelected(android.media.MediaRouter,%20int,%20android.media.MediaRouter.RouteInfo))
        ///
        /// Required features: "android-media-MediaRouter", "android-media-MediaRouter_RouteInfo"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaRouter", feature = "android-media-MediaRouter_RouteInfo")))]
        pub fn onRouteSelected<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaRouter>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaRouter_RouteInfo>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRouter$Callback", java.flags == PUBLIC | ABSTRACT, .name == "onRouteSelected", .descriptor == "(Landroid/media/MediaRouter;ILandroid/media/MediaRouter$RouteInfo;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRouter$Callback\0", "onRouteSelected\0", "(Landroid/media/MediaRouter;ILandroid/media/MediaRouter$RouteInfo;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onRouteUnselected](https://developer.android.com/reference/android/media/MediaRouter.Callback.html#onRouteUnselected(android.media.MediaRouter,%20int,%20android.media.MediaRouter.RouteInfo))
        ///
        /// Required features: "android-media-MediaRouter", "android-media-MediaRouter_RouteInfo"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaRouter", feature = "android-media-MediaRouter_RouteInfo")))]
        pub fn onRouteUnselected<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaRouter>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaRouter_RouteInfo>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRouter$Callback", java.flags == PUBLIC | ABSTRACT, .name == "onRouteUnselected", .descriptor == "(Landroid/media/MediaRouter;ILandroid/media/MediaRouter$RouteInfo;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRouter$Callback\0", "onRouteUnselected\0", "(Landroid/media/MediaRouter;ILandroid/media/MediaRouter$RouteInfo;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onRouteAdded](https://developer.android.com/reference/android/media/MediaRouter.Callback.html#onRouteAdded(android.media.MediaRouter,%20android.media.MediaRouter.RouteInfo))
        ///
        /// Required features: "android-media-MediaRouter", "android-media-MediaRouter_RouteInfo"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaRouter", feature = "android-media-MediaRouter_RouteInfo")))]
        pub fn onRouteAdded<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaRouter>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaRouter_RouteInfo>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRouter$Callback", java.flags == PUBLIC | ABSTRACT, .name == "onRouteAdded", .descriptor == "(Landroid/media/MediaRouter;Landroid/media/MediaRouter$RouteInfo;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRouter$Callback\0", "onRouteAdded\0", "(Landroid/media/MediaRouter;Landroid/media/MediaRouter$RouteInfo;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onRouteRemoved](https://developer.android.com/reference/android/media/MediaRouter.Callback.html#onRouteRemoved(android.media.MediaRouter,%20android.media.MediaRouter.RouteInfo))
        ///
        /// Required features: "android-media-MediaRouter", "android-media-MediaRouter_RouteInfo"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaRouter", feature = "android-media-MediaRouter_RouteInfo")))]
        pub fn onRouteRemoved<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaRouter>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaRouter_RouteInfo>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRouter$Callback", java.flags == PUBLIC | ABSTRACT, .name == "onRouteRemoved", .descriptor == "(Landroid/media/MediaRouter;Landroid/media/MediaRouter$RouteInfo;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRouter$Callback\0", "onRouteRemoved\0", "(Landroid/media/MediaRouter;Landroid/media/MediaRouter$RouteInfo;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onRouteChanged](https://developer.android.com/reference/android/media/MediaRouter.Callback.html#onRouteChanged(android.media.MediaRouter,%20android.media.MediaRouter.RouteInfo))
        ///
        /// Required features: "android-media-MediaRouter", "android-media-MediaRouter_RouteInfo"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaRouter", feature = "android-media-MediaRouter_RouteInfo")))]
        pub fn onRouteChanged<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaRouter>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaRouter_RouteInfo>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRouter$Callback", java.flags == PUBLIC | ABSTRACT, .name == "onRouteChanged", .descriptor == "(Landroid/media/MediaRouter;Landroid/media/MediaRouter$RouteInfo;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRouter$Callback\0", "onRouteChanged\0", "(Landroid/media/MediaRouter;Landroid/media/MediaRouter$RouteInfo;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onRouteGrouped](https://developer.android.com/reference/android/media/MediaRouter.Callback.html#onRouteGrouped(android.media.MediaRouter,%20android.media.MediaRouter.RouteInfo,%20android.media.MediaRouter.RouteGroup,%20int))
        ///
        /// Required features: "android-media-MediaRouter", "android-media-MediaRouter_RouteGroup", "android-media-MediaRouter_RouteInfo"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaRouter", feature = "android-media-MediaRouter_RouteGroup", feature = "android-media-MediaRouter_RouteInfo")))]
        pub fn onRouteGrouped<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaRouter>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaRouter_RouteInfo>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaRouter_RouteGroup>>, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRouter$Callback", java.flags == PUBLIC | ABSTRACT, .name == "onRouteGrouped", .descriptor == "(Landroid/media/MediaRouter;Landroid/media/MediaRouter$RouteInfo;Landroid/media/MediaRouter$RouteGroup;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRouter$Callback\0", "onRouteGrouped\0", "(Landroid/media/MediaRouter;Landroid/media/MediaRouter$RouteInfo;Landroid/media/MediaRouter$RouteGroup;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onRouteUngrouped](https://developer.android.com/reference/android/media/MediaRouter.Callback.html#onRouteUngrouped(android.media.MediaRouter,%20android.media.MediaRouter.RouteInfo,%20android.media.MediaRouter.RouteGroup))
        ///
        /// Required features: "android-media-MediaRouter", "android-media-MediaRouter_RouteGroup", "android-media-MediaRouter_RouteInfo"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaRouter", feature = "android-media-MediaRouter_RouteGroup", feature = "android-media-MediaRouter_RouteInfo")))]
        pub fn onRouteUngrouped<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaRouter>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaRouter_RouteInfo>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaRouter_RouteGroup>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRouter$Callback", java.flags == PUBLIC | ABSTRACT, .name == "onRouteUngrouped", .descriptor == "(Landroid/media/MediaRouter;Landroid/media/MediaRouter$RouteInfo;Landroid/media/MediaRouter$RouteGroup;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRouter$Callback\0", "onRouteUngrouped\0", "(Landroid/media/MediaRouter;Landroid/media/MediaRouter$RouteInfo;Landroid/media/MediaRouter$RouteGroup;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onRouteVolumeChanged](https://developer.android.com/reference/android/media/MediaRouter.Callback.html#onRouteVolumeChanged(android.media.MediaRouter,%20android.media.MediaRouter.RouteInfo))
        ///
        /// Required features: "android-media-MediaRouter", "android-media-MediaRouter_RouteInfo"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaRouter", feature = "android-media-MediaRouter_RouteInfo")))]
        pub fn onRouteVolumeChanged<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaRouter>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaRouter_RouteInfo>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRouter$Callback", java.flags == PUBLIC | ABSTRACT, .name == "onRouteVolumeChanged", .descriptor == "(Landroid/media/MediaRouter;Landroid/media/MediaRouter$RouteInfo;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRouter$Callback\0", "onRouteVolumeChanged\0", "(Landroid/media/MediaRouter;Landroid/media/MediaRouter$RouteInfo;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onRoutePresentationDisplayChanged](https://developer.android.com/reference/android/media/MediaRouter.Callback.html#onRoutePresentationDisplayChanged(android.media.MediaRouter,%20android.media.MediaRouter.RouteInfo))
        ///
        /// Required features: "android-media-MediaRouter", "android-media-MediaRouter_RouteInfo"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaRouter", feature = "android-media-MediaRouter_RouteInfo")))]
        pub fn onRoutePresentationDisplayChanged<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaRouter>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaRouter_RouteInfo>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaRouter$Callback", java.flags == PUBLIC, .name == "onRoutePresentationDisplayChanged", .descriptor == "(Landroid/media/MediaRouter;Landroid/media/MediaRouter$RouteInfo;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaRouter$Callback\0", "onRoutePresentationDisplayChanged\0", "(Landroid/media/MediaRouter;Landroid/media/MediaRouter$RouteInfo;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
