// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-media-AudioFormat"))]
__jni_bindgen! {
    /// public final class [AudioFormat](https://developer.android.com/reference/android/media/AudioFormat.html)
    ///
    /// Required feature: android-media-AudioFormat
    public final class AudioFormat ("android/media/AudioFormat") extends crate::java::lang::Object, implements crate::android::os::Parcelable {

        // // Not emitting: Non-public method
        // /// [AudioFormat](https://developer.android.com/reference/android/media/AudioFormat.html#AudioFormat())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::media::AudioFormat>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/media/AudioFormat", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioFormat\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getEncoding](https://developer.android.com/reference/android/media/AudioFormat.html#getEncoding())
        pub fn getEncoding<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioFormat", java.flags == PUBLIC, .name == "getEncoding", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioFormat\0", "getEncoding\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSampleRate](https://developer.android.com/reference/android/media/AudioFormat.html#getSampleRate())
        pub fn getSampleRate<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioFormat", java.flags == PUBLIC, .name == "getSampleRate", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioFormat\0", "getSampleRate\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getChannelMask](https://developer.android.com/reference/android/media/AudioFormat.html#getChannelMask())
        pub fn getChannelMask<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioFormat", java.flags == PUBLIC, .name == "getChannelMask", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioFormat\0", "getChannelMask\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getChannelIndexMask](https://developer.android.com/reference/android/media/AudioFormat.html#getChannelIndexMask())
        pub fn getChannelIndexMask<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioFormat", java.flags == PUBLIC, .name == "getChannelIndexMask", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioFormat\0", "getChannelIndexMask\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getChannelCount](https://developer.android.com/reference/android/media/AudioFormat.html#getChannelCount())
        pub fn getChannelCount<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioFormat", java.flags == PUBLIC, .name == "getChannelCount", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioFormat\0", "getChannelCount\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFrameSizeInBytes](https://developer.android.com/reference/android/media/AudioFormat.html#getFrameSizeInBytes())
        pub fn getFrameSizeInBytes<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioFormat", java.flags == PUBLIC, .name == "getFrameSizeInBytes", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioFormat\0", "getFrameSizeInBytes\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [equals](https://developer.android.com/reference/android/media/AudioFormat.html#equals(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn equals<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioFormat", java.flags == PUBLIC, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioFormat\0", "equals\0", "(Ljava/lang/Object;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hashCode](https://developer.android.com/reference/android/media/AudioFormat.html#hashCode())
        pub fn hashCode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioFormat", java.flags == PUBLIC, .name == "hashCode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioFormat\0", "hashCode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [describeContents](https://developer.android.com/reference/android/media/AudioFormat.html#describeContents())
        pub fn describeContents<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioFormat", java.flags == PUBLIC, .name == "describeContents", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioFormat\0", "describeContents\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [writeToParcel](https://developer.android.com/reference/android/media/AudioFormat.html#writeToParcel(android.os.Parcel,%20int))
        ///
        /// Required features: "android-os-Parcel"
        #[cfg(any(feature = "all", all(feature = "android-os-Parcel")))]
        pub fn writeToParcel<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Parcel>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioFormat", java.flags == PUBLIC, .name == "writeToParcel", .descriptor == "(Landroid/os/Parcel;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioFormat\0", "writeToParcel\0", "(Landroid/os/Parcel;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/android/media/AudioFormat.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioFormat", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioFormat\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [CHANNEL_CONFIGURATION_DEFAULT](https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_CONFIGURATION_DEFAULT)
        #[deprecated] pub const CHANNEL_CONFIGURATION_DEFAULT : i32 = 1;

        /// public static final [CHANNEL_CONFIGURATION_INVALID](https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_CONFIGURATION_INVALID)
        #[deprecated] pub const CHANNEL_CONFIGURATION_INVALID : i32 = 0;

        /// public static final [CHANNEL_CONFIGURATION_MONO](https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_CONFIGURATION_MONO)
        #[deprecated] pub const CHANNEL_CONFIGURATION_MONO : i32 = 2;

        /// public static final [CHANNEL_CONFIGURATION_STEREO](https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_CONFIGURATION_STEREO)
        #[deprecated] pub const CHANNEL_CONFIGURATION_STEREO : i32 = 3;

        /// public static final [CHANNEL_INVALID](https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_INVALID)
        pub const CHANNEL_INVALID : i32 = 0;

        /// public static final [CHANNEL_IN_BACK](https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_IN_BACK)
        pub const CHANNEL_IN_BACK : i32 = 32;

        /// public static final [CHANNEL_IN_BACK_PROCESSED](https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_IN_BACK_PROCESSED)
        pub const CHANNEL_IN_BACK_PROCESSED : i32 = 512;

        /// public static final [CHANNEL_IN_DEFAULT](https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_IN_DEFAULT)
        pub const CHANNEL_IN_DEFAULT : i32 = 1;

        /// public static final [CHANNEL_IN_FRONT](https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_IN_FRONT)
        pub const CHANNEL_IN_FRONT : i32 = 16;

        /// public static final [CHANNEL_IN_FRONT_PROCESSED](https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_IN_FRONT_PROCESSED)
        pub const CHANNEL_IN_FRONT_PROCESSED : i32 = 256;

        /// public static final [CHANNEL_IN_LEFT](https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_IN_LEFT)
        pub const CHANNEL_IN_LEFT : i32 = 4;

        /// public static final [CHANNEL_IN_LEFT_PROCESSED](https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_IN_LEFT_PROCESSED)
        pub const CHANNEL_IN_LEFT_PROCESSED : i32 = 64;

        /// public static final [CHANNEL_IN_MONO](https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_IN_MONO)
        pub const CHANNEL_IN_MONO : i32 = 16;

        /// public static final [CHANNEL_IN_PRESSURE](https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_IN_PRESSURE)
        pub const CHANNEL_IN_PRESSURE : i32 = 1024;

        /// public static final [CHANNEL_IN_RIGHT](https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_IN_RIGHT)
        pub const CHANNEL_IN_RIGHT : i32 = 8;

        /// public static final [CHANNEL_IN_RIGHT_PROCESSED](https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_IN_RIGHT_PROCESSED)
        pub const CHANNEL_IN_RIGHT_PROCESSED : i32 = 128;

        /// public static final [CHANNEL_IN_STEREO](https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_IN_STEREO)
        pub const CHANNEL_IN_STEREO : i32 = 12;

        /// public static final [CHANNEL_IN_VOICE_DNLINK](https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_IN_VOICE_DNLINK)
        pub const CHANNEL_IN_VOICE_DNLINK : i32 = 32768;

        /// public static final [CHANNEL_IN_VOICE_UPLINK](https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_IN_VOICE_UPLINK)
        pub const CHANNEL_IN_VOICE_UPLINK : i32 = 16384;

        /// public static final [CHANNEL_IN_X_AXIS](https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_IN_X_AXIS)
        pub const CHANNEL_IN_X_AXIS : i32 = 2048;

        /// public static final [CHANNEL_IN_Y_AXIS](https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_IN_Y_AXIS)
        pub const CHANNEL_IN_Y_AXIS : i32 = 4096;

        /// public static final [CHANNEL_IN_Z_AXIS](https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_IN_Z_AXIS)
        pub const CHANNEL_IN_Z_AXIS : i32 = 8192;

        /// public static final [CHANNEL_OUT_5POINT1](https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_5POINT1)
        pub const CHANNEL_OUT_5POINT1 : i32 = 252;

        /// public static final [CHANNEL_OUT_7POINT1](https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_7POINT1)
        #[deprecated] pub const CHANNEL_OUT_7POINT1 : i32 = 1020;

        /// public static final [CHANNEL_OUT_7POINT1_SURROUND](https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_7POINT1_SURROUND)
        pub const CHANNEL_OUT_7POINT1_SURROUND : i32 = 6396;

        /// public static final [CHANNEL_OUT_BACK_CENTER](https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_BACK_CENTER)
        pub const CHANNEL_OUT_BACK_CENTER : i32 = 1024;

        /// public static final [CHANNEL_OUT_BACK_LEFT](https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_BACK_LEFT)
        pub const CHANNEL_OUT_BACK_LEFT : i32 = 64;

        /// public static final [CHANNEL_OUT_BACK_RIGHT](https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_BACK_RIGHT)
        pub const CHANNEL_OUT_BACK_RIGHT : i32 = 128;

        /// public static final [CHANNEL_OUT_DEFAULT](https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_DEFAULT)
        pub const CHANNEL_OUT_DEFAULT : i32 = 1;

        /// public static final [CHANNEL_OUT_FRONT_CENTER](https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_FRONT_CENTER)
        pub const CHANNEL_OUT_FRONT_CENTER : i32 = 16;

        /// public static final [CHANNEL_OUT_FRONT_LEFT](https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_FRONT_LEFT)
        pub const CHANNEL_OUT_FRONT_LEFT : i32 = 4;

        /// public static final [CHANNEL_OUT_FRONT_LEFT_OF_CENTER](https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_FRONT_LEFT_OF_CENTER)
        pub const CHANNEL_OUT_FRONT_LEFT_OF_CENTER : i32 = 256;

        /// public static final [CHANNEL_OUT_FRONT_RIGHT](https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_FRONT_RIGHT)
        pub const CHANNEL_OUT_FRONT_RIGHT : i32 = 8;

        /// public static final [CHANNEL_OUT_FRONT_RIGHT_OF_CENTER](https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_FRONT_RIGHT_OF_CENTER)
        pub const CHANNEL_OUT_FRONT_RIGHT_OF_CENTER : i32 = 512;

        /// public static final [CHANNEL_OUT_LOW_FREQUENCY](https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_LOW_FREQUENCY)
        pub const CHANNEL_OUT_LOW_FREQUENCY : i32 = 32;

        /// public static final [CHANNEL_OUT_MONO](https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_MONO)
        pub const CHANNEL_OUT_MONO : i32 = 4;

        /// public static final [CHANNEL_OUT_QUAD](https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_QUAD)
        pub const CHANNEL_OUT_QUAD : i32 = 204;

        /// public static final [CHANNEL_OUT_SIDE_LEFT](https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_SIDE_LEFT)
        pub const CHANNEL_OUT_SIDE_LEFT : i32 = 2048;

        /// public static final [CHANNEL_OUT_SIDE_RIGHT](https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_SIDE_RIGHT)
        pub const CHANNEL_OUT_SIDE_RIGHT : i32 = 4096;

        /// public static final [CHANNEL_OUT_STEREO](https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_STEREO)
        pub const CHANNEL_OUT_STEREO : i32 = 12;

        /// public static final [CHANNEL_OUT_SURROUND](https://developer.android.com/reference/android/media/AudioFormat.html#CHANNEL_OUT_SURROUND)
        pub const CHANNEL_OUT_SURROUND : i32 = 1052;

        /// **get** public static final [CREATOR](https://developer.android.com/reference/android/media/AudioFormat.html#CREATOR)
        ///
        /// Required feature: android-os-Parcelable_Creator
        #[cfg(any(feature = "all", feature = "android-os-Parcelable_Creator"))]
        pub fn CREATOR<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Parcelable_Creator>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/media/AudioFormat\0", "CREATOR\0", "Landroid/os/Parcelable$Creator;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// public static final [ENCODING_AAC_ELD](https://developer.android.com/reference/android/media/AudioFormat.html#ENCODING_AAC_ELD)
        pub const ENCODING_AAC_ELD : i32 = 15;

        /// public static final [ENCODING_AAC_HE_V1](https://developer.android.com/reference/android/media/AudioFormat.html#ENCODING_AAC_HE_V1)
        pub const ENCODING_AAC_HE_V1 : i32 = 11;

        /// public static final [ENCODING_AAC_HE_V2](https://developer.android.com/reference/android/media/AudioFormat.html#ENCODING_AAC_HE_V2)
        pub const ENCODING_AAC_HE_V2 : i32 = 12;

        /// public static final [ENCODING_AAC_LC](https://developer.android.com/reference/android/media/AudioFormat.html#ENCODING_AAC_LC)
        pub const ENCODING_AAC_LC : i32 = 10;

        /// public static final [ENCODING_AAC_XHE](https://developer.android.com/reference/android/media/AudioFormat.html#ENCODING_AAC_XHE)
        pub const ENCODING_AAC_XHE : i32 = 16;

        /// public static final [ENCODING_AC3](https://developer.android.com/reference/android/media/AudioFormat.html#ENCODING_AC3)
        pub const ENCODING_AC3 : i32 = 5;

        /// public static final [ENCODING_AC4](https://developer.android.com/reference/android/media/AudioFormat.html#ENCODING_AC4)
        pub const ENCODING_AC4 : i32 = 17;

        /// public static final [ENCODING_DEFAULT](https://developer.android.com/reference/android/media/AudioFormat.html#ENCODING_DEFAULT)
        pub const ENCODING_DEFAULT : i32 = 1;

        /// public static final [ENCODING_DOLBY_MAT](https://developer.android.com/reference/android/media/AudioFormat.html#ENCODING_DOLBY_MAT)
        pub const ENCODING_DOLBY_MAT : i32 = 19;

        /// public static final [ENCODING_DOLBY_TRUEHD](https://developer.android.com/reference/android/media/AudioFormat.html#ENCODING_DOLBY_TRUEHD)
        pub const ENCODING_DOLBY_TRUEHD : i32 = 14;

        /// public static final [ENCODING_DTS](https://developer.android.com/reference/android/media/AudioFormat.html#ENCODING_DTS)
        pub const ENCODING_DTS : i32 = 7;

        /// public static final [ENCODING_DTS_HD](https://developer.android.com/reference/android/media/AudioFormat.html#ENCODING_DTS_HD)
        pub const ENCODING_DTS_HD : i32 = 8;

        /// public static final [ENCODING_E_AC3](https://developer.android.com/reference/android/media/AudioFormat.html#ENCODING_E_AC3)
        pub const ENCODING_E_AC3 : i32 = 6;

        /// public static final [ENCODING_E_AC3_JOC](https://developer.android.com/reference/android/media/AudioFormat.html#ENCODING_E_AC3_JOC)
        pub const ENCODING_E_AC3_JOC : i32 = 18;

        /// public static final [ENCODING_IEC61937](https://developer.android.com/reference/android/media/AudioFormat.html#ENCODING_IEC61937)
        pub const ENCODING_IEC61937 : i32 = 13;

        /// public static final [ENCODING_INVALID](https://developer.android.com/reference/android/media/AudioFormat.html#ENCODING_INVALID)
        pub const ENCODING_INVALID : i32 = 0;

        /// public static final [ENCODING_MP3](https://developer.android.com/reference/android/media/AudioFormat.html#ENCODING_MP3)
        pub const ENCODING_MP3 : i32 = 9;

        /// public static final [ENCODING_PCM_16BIT](https://developer.android.com/reference/android/media/AudioFormat.html#ENCODING_PCM_16BIT)
        pub const ENCODING_PCM_16BIT : i32 = 2;

        /// public static final [ENCODING_PCM_8BIT](https://developer.android.com/reference/android/media/AudioFormat.html#ENCODING_PCM_8BIT)
        pub const ENCODING_PCM_8BIT : i32 = 3;

        /// public static final [ENCODING_PCM_FLOAT](https://developer.android.com/reference/android/media/AudioFormat.html#ENCODING_PCM_FLOAT)
        pub const ENCODING_PCM_FLOAT : i32 = 4;

        /// public static final [SAMPLE_RATE_UNSPECIFIED](https://developer.android.com/reference/android/media/AudioFormat.html#SAMPLE_RATE_UNSPECIFIED)
        pub const SAMPLE_RATE_UNSPECIFIED : i32 = 0;
    }
}
