// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-media-MediaFormat"))]
__jni_bindgen! {
    /// public final class [MediaFormat](https://developer.android.com/reference/android/media/MediaFormat.html)
    ///
    /// Required feature: android-media-MediaFormat
    public final class MediaFormat ("android/media/MediaFormat") extends crate::java::lang::Object {

        /// [MediaFormat](https://developer.android.com/reference/android/media/MediaFormat.html#MediaFormat())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::media::MediaFormat>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaFormat", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaFormat\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [MediaFormat](https://developer.android.com/reference/android/media/MediaFormat.html#MediaFormat(android.media.MediaFormat))
        ///
        /// Required features: "android-media-MediaFormat"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaFormat")))]
        pub fn new_MediaFormat<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaFormat>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::media::MediaFormat>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaFormat", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/media/MediaFormat;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaFormat\0", "<init>\0", "(Landroid/media/MediaFormat;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [containsKey](https://developer.android.com/reference/android/media/MediaFormat.html#containsKey(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn containsKey<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaFormat", java.flags == PUBLIC, .name == "containsKey", .descriptor == "(Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaFormat\0", "containsKey\0", "(Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [containsFeature](https://developer.android.com/reference/android/media/MediaFormat.html#containsFeature(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn containsFeature<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaFormat", java.flags == PUBLIC, .name == "containsFeature", .descriptor == "(Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaFormat\0", "containsFeature\0", "(Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getValueTypeForKey](https://developer.android.com/reference/android/media/MediaFormat.html#getValueTypeForKey(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getValueTypeForKey<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaFormat", java.flags == PUBLIC, .name == "getValueTypeForKey", .descriptor == "(Ljava/lang/String;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaFormat\0", "getValueTypeForKey\0", "(Ljava/lang/String;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNumber](https://developer.android.com/reference/android/media/MediaFormat.html#getNumber(java.lang.String))
        ///
        /// Required features: "java-lang-Number", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-Number", feature = "java-lang-String")))]
        pub fn getNumber_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Number>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaFormat", java.flags == PUBLIC, .name == "getNumber", .descriptor == "(Ljava/lang/String;)Ljava/lang/Number;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaFormat\0", "getNumber\0", "(Ljava/lang/String;)Ljava/lang/Number;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNumber](https://developer.android.com/reference/android/media/MediaFormat.html#getNumber(java.lang.String,%20java.lang.Number))
        ///
        /// Required features: "java-lang-Number", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-Number", feature = "java-lang-String")))]
        pub fn getNumber_String_Number<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Number>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Number>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaFormat", java.flags == PUBLIC, .name == "getNumber", .descriptor == "(Ljava/lang/String;Ljava/lang/Number;)Ljava/lang/Number;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaFormat\0", "getNumber\0", "(Ljava/lang/String;Ljava/lang/Number;)Ljava/lang/Number;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInteger](https://developer.android.com/reference/android/media/MediaFormat.html#getInteger(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getInteger_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaFormat", java.flags == PUBLIC, .name == "getInteger", .descriptor == "(Ljava/lang/String;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaFormat\0", "getInteger\0", "(Ljava/lang/String;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInteger](https://developer.android.com/reference/android/media/MediaFormat.html#getInteger(java.lang.String,%20int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getInteger_String_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaFormat", java.flags == PUBLIC, .name == "getInteger", .descriptor == "(Ljava/lang/String;I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaFormat\0", "getInteger\0", "(Ljava/lang/String;I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLong](https://developer.android.com/reference/android/media/MediaFormat.html#getLong(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getLong_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaFormat", java.flags == PUBLIC, .name == "getLong", .descriptor == "(Ljava/lang/String;)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaFormat\0", "getLong\0", "(Ljava/lang/String;)J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLong](https://developer.android.com/reference/android/media/MediaFormat.html#getLong(java.lang.String,%20long))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getLong_String_long<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i64) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaFormat", java.flags == PUBLIC, .name == "getLong", .descriptor == "(Ljava/lang/String;J)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaFormat\0", "getLong\0", "(Ljava/lang/String;J)J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFloat](https://developer.android.com/reference/android/media/MediaFormat.html#getFloat(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getFloat_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaFormat", java.flags == PUBLIC, .name == "getFloat", .descriptor == "(Ljava/lang/String;)F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaFormat\0", "getFloat\0", "(Ljava/lang/String;)F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFloat](https://developer.android.com/reference/android/media/MediaFormat.html#getFloat(java.lang.String,%20float))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getFloat_String_float<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: f32) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaFormat", java.flags == PUBLIC, .name == "getFloat", .descriptor == "(Ljava/lang/String;F)F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaFormat\0", "getFloat\0", "(Ljava/lang/String;F)F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getString](https://developer.android.com/reference/android/media/MediaFormat.html#getString(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getString_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaFormat", java.flags == PUBLIC, .name == "getString", .descriptor == "(Ljava/lang/String;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaFormat\0", "getString\0", "(Ljava/lang/String;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getString](https://developer.android.com/reference/android/media/MediaFormat.html#getString(java.lang.String,%20java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getString_String_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaFormat", java.flags == PUBLIC, .name == "getString", .descriptor == "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaFormat\0", "getString\0", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getByteBuffer](https://developer.android.com/reference/android/media/MediaFormat.html#getByteBuffer(java.lang.String))
        ///
        /// Required features: "java-lang-String", "java-nio-ByteBuffer"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-nio-ByteBuffer")))]
        pub fn getByteBuffer_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::ByteBuffer>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaFormat", java.flags == PUBLIC, .name == "getByteBuffer", .descriptor == "(Ljava/lang/String;)Ljava/nio/ByteBuffer;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaFormat\0", "getByteBuffer\0", "(Ljava/lang/String;)Ljava/nio/ByteBuffer;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getByteBuffer](https://developer.android.com/reference/android/media/MediaFormat.html#getByteBuffer(java.lang.String,%20java.nio.ByteBuffer))
        ///
        /// Required features: "java-lang-String", "java-nio-ByteBuffer"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-nio-ByteBuffer")))]
        pub fn getByteBuffer_String_ByteBuffer<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::ByteBuffer>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::ByteBuffer>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaFormat", java.flags == PUBLIC, .name == "getByteBuffer", .descriptor == "(Ljava/lang/String;Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaFormat\0", "getByteBuffer\0", "(Ljava/lang/String;Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFeatureEnabled](https://developer.android.com/reference/android/media/MediaFormat.html#getFeatureEnabled(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getFeatureEnabled<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaFormat", java.flags == PUBLIC, .name == "getFeatureEnabled", .descriptor == "(Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaFormat\0", "getFeatureEnabled\0", "(Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setInteger](https://developer.android.com/reference/android/media/MediaFormat.html#setInteger(java.lang.String,%20int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn setInteger<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaFormat", java.flags == PUBLIC, .name == "setInteger", .descriptor == "(Ljava/lang/String;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaFormat\0", "setInteger\0", "(Ljava/lang/String;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setLong](https://developer.android.com/reference/android/media/MediaFormat.html#setLong(java.lang.String,%20long))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn setLong<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i64) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaFormat", java.flags == PUBLIC, .name == "setLong", .descriptor == "(Ljava/lang/String;J)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaFormat\0", "setLong\0", "(Ljava/lang/String;J)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setFloat](https://developer.android.com/reference/android/media/MediaFormat.html#setFloat(java.lang.String,%20float))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn setFloat<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaFormat", java.flags == PUBLIC, .name == "setFloat", .descriptor == "(Ljava/lang/String;F)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaFormat\0", "setFloat\0", "(Ljava/lang/String;F)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setString](https://developer.android.com/reference/android/media/MediaFormat.html#setString(java.lang.String,%20java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn setString<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaFormat", java.flags == PUBLIC, .name == "setString", .descriptor == "(Ljava/lang/String;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaFormat\0", "setString\0", "(Ljava/lang/String;Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setByteBuffer](https://developer.android.com/reference/android/media/MediaFormat.html#setByteBuffer(java.lang.String,%20java.nio.ByteBuffer))
        ///
        /// Required features: "java-lang-String", "java-nio-ByteBuffer"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-nio-ByteBuffer")))]
        pub fn setByteBuffer<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::ByteBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaFormat", java.flags == PUBLIC, .name == "setByteBuffer", .descriptor == "(Ljava/lang/String;Ljava/nio/ByteBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaFormat\0", "setByteBuffer\0", "(Ljava/lang/String;Ljava/nio/ByteBuffer;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeKey](https://developer.android.com/reference/android/media/MediaFormat.html#removeKey(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn removeKey<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaFormat", java.flags == PUBLIC, .name == "removeKey", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaFormat\0", "removeKey\0", "(Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeFeature](https://developer.android.com/reference/android/media/MediaFormat.html#removeFeature(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn removeFeature<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaFormat", java.flags == PUBLIC, .name == "removeFeature", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaFormat\0", "removeFeature\0", "(Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getKeys](https://developer.android.com/reference/android/media/MediaFormat.html#getKeys())
        ///
        /// Required features: "java-util-Set"
        #[cfg(any(feature = "all", all(feature = "java-util-Set")))]
        pub fn getKeys<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Set>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaFormat", java.flags == PUBLIC, .name == "getKeys", .descriptor == "()Ljava/util/Set;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaFormat\0", "getKeys\0", "()Ljava/util/Set;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFeatures](https://developer.android.com/reference/android/media/MediaFormat.html#getFeatures())
        ///
        /// Required features: "java-util-Set"
        #[cfg(any(feature = "all", all(feature = "java-util-Set")))]
        pub fn getFeatures<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Set>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaFormat", java.flags == PUBLIC, .name == "getFeatures", .descriptor == "()Ljava/util/Set;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaFormat\0", "getFeatures\0", "()Ljava/util/Set;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setFeatureEnabled](https://developer.android.com/reference/android/media/MediaFormat.html#setFeatureEnabled(java.lang.String,%20boolean))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn setFeatureEnabled<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaFormat", java.flags == PUBLIC, .name == "setFeatureEnabled", .descriptor == "(Ljava/lang/String;Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaFormat\0", "setFeatureEnabled\0", "(Ljava/lang/String;Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createAudioFormat](https://developer.android.com/reference/android/media/MediaFormat.html#createAudioFormat(java.lang.String,%20int,%20int))
        ///
        /// Required features: "android-media-MediaFormat", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaFormat", feature = "java-lang-String")))]
        pub fn createAudioFormat<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::MediaFormat>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaFormat", java.flags == PUBLIC | STATIC, .name == "createAudioFormat", .descriptor == "(Ljava/lang/String;II)Landroid/media/MediaFormat;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/media/MediaFormat\0", "createAudioFormat\0", "(Ljava/lang/String;II)Landroid/media/MediaFormat;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createSubtitleFormat](https://developer.android.com/reference/android/media/MediaFormat.html#createSubtitleFormat(java.lang.String,%20java.lang.String))
        ///
        /// Required features: "android-media-MediaFormat", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaFormat", feature = "java-lang-String")))]
        pub fn createSubtitleFormat<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::MediaFormat>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaFormat", java.flags == PUBLIC | STATIC, .name == "createSubtitleFormat", .descriptor == "(Ljava/lang/String;Ljava/lang/String;)Landroid/media/MediaFormat;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/media/MediaFormat\0", "createSubtitleFormat\0", "(Ljava/lang/String;Ljava/lang/String;)Landroid/media/MediaFormat;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createVideoFormat](https://developer.android.com/reference/android/media/MediaFormat.html#createVideoFormat(java.lang.String,%20int,%20int))
        ///
        /// Required features: "android-media-MediaFormat", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaFormat", feature = "java-lang-String")))]
        pub fn createVideoFormat<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::MediaFormat>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaFormat", java.flags == PUBLIC | STATIC, .name == "createVideoFormat", .descriptor == "(Ljava/lang/String;II)Landroid/media/MediaFormat;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/media/MediaFormat\0", "createVideoFormat\0", "(Ljava/lang/String;II)Landroid/media/MediaFormat;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/android/media/MediaFormat.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaFormat", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaFormat\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [COLOR_RANGE_FULL](https://developer.android.com/reference/android/media/MediaFormat.html#COLOR_RANGE_FULL)
        pub const COLOR_RANGE_FULL : i32 = 1;

        /// public static final [COLOR_RANGE_LIMITED](https://developer.android.com/reference/android/media/MediaFormat.html#COLOR_RANGE_LIMITED)
        pub const COLOR_RANGE_LIMITED : i32 = 2;

        /// public static final [COLOR_STANDARD_BT2020](https://developer.android.com/reference/android/media/MediaFormat.html#COLOR_STANDARD_BT2020)
        pub const COLOR_STANDARD_BT2020 : i32 = 6;

        /// public static final [COLOR_STANDARD_BT601_NTSC](https://developer.android.com/reference/android/media/MediaFormat.html#COLOR_STANDARD_BT601_NTSC)
        pub const COLOR_STANDARD_BT601_NTSC : i32 = 4;

        /// public static final [COLOR_STANDARD_BT601_PAL](https://developer.android.com/reference/android/media/MediaFormat.html#COLOR_STANDARD_BT601_PAL)
        pub const COLOR_STANDARD_BT601_PAL : i32 = 2;

        /// public static final [COLOR_STANDARD_BT709](https://developer.android.com/reference/android/media/MediaFormat.html#COLOR_STANDARD_BT709)
        pub const COLOR_STANDARD_BT709 : i32 = 1;

        /// public static final [COLOR_TRANSFER_HLG](https://developer.android.com/reference/android/media/MediaFormat.html#COLOR_TRANSFER_HLG)
        pub const COLOR_TRANSFER_HLG : i32 = 7;

        /// public static final [COLOR_TRANSFER_LINEAR](https://developer.android.com/reference/android/media/MediaFormat.html#COLOR_TRANSFER_LINEAR)
        pub const COLOR_TRANSFER_LINEAR : i32 = 1;

        /// public static final [COLOR_TRANSFER_SDR_VIDEO](https://developer.android.com/reference/android/media/MediaFormat.html#COLOR_TRANSFER_SDR_VIDEO)
        pub const COLOR_TRANSFER_SDR_VIDEO : i32 = 3;

        /// public static final [COLOR_TRANSFER_ST2084](https://developer.android.com/reference/android/media/MediaFormat.html#COLOR_TRANSFER_ST2084)
        pub const COLOR_TRANSFER_ST2084 : i32 = 6;

        /// public static final [KEY_AAC_DRC_ATTENUATION_FACTOR](https://developer.android.com/reference/android/media/MediaFormat.html#KEY_AAC_DRC_ATTENUATION_FACTOR)
        pub const KEY_AAC_DRC_ATTENUATION_FACTOR : &'static str = "aac-drc-cut-level";

        /// public static final [KEY_AAC_DRC_BOOST_FACTOR](https://developer.android.com/reference/android/media/MediaFormat.html#KEY_AAC_DRC_BOOST_FACTOR)
        pub const KEY_AAC_DRC_BOOST_FACTOR : &'static str = "aac-drc-boost-level";

        /// public static final [KEY_AAC_DRC_EFFECT_TYPE](https://developer.android.com/reference/android/media/MediaFormat.html#KEY_AAC_DRC_EFFECT_TYPE)
        pub const KEY_AAC_DRC_EFFECT_TYPE : &'static str = "aac-drc-effect-type";

        /// public static final [KEY_AAC_DRC_HEAVY_COMPRESSION](https://developer.android.com/reference/android/media/MediaFormat.html#KEY_AAC_DRC_HEAVY_COMPRESSION)
        pub const KEY_AAC_DRC_HEAVY_COMPRESSION : &'static str = "aac-drc-heavy-compression";

        /// public static final [KEY_AAC_DRC_TARGET_REFERENCE_LEVEL](https://developer.android.com/reference/android/media/MediaFormat.html#KEY_AAC_DRC_TARGET_REFERENCE_LEVEL)
        pub const KEY_AAC_DRC_TARGET_REFERENCE_LEVEL : &'static str = "aac-target-ref-level";

        /// public static final [KEY_AAC_ENCODED_TARGET_LEVEL](https://developer.android.com/reference/android/media/MediaFormat.html#KEY_AAC_ENCODED_TARGET_LEVEL)
        pub const KEY_AAC_ENCODED_TARGET_LEVEL : &'static str = "aac-encoded-target-level";

        /// public static final [KEY_AAC_MAX_OUTPUT_CHANNEL_COUNT](https://developer.android.com/reference/android/media/MediaFormat.html#KEY_AAC_MAX_OUTPUT_CHANNEL_COUNT)
        pub const KEY_AAC_MAX_OUTPUT_CHANNEL_COUNT : &'static str = "aac-max-output-channel_count";

        /// public static final [KEY_AAC_PROFILE](https://developer.android.com/reference/android/media/MediaFormat.html#KEY_AAC_PROFILE)
        pub const KEY_AAC_PROFILE : &'static str = "aac-profile";

        /// public static final [KEY_AAC_SBR_MODE](https://developer.android.com/reference/android/media/MediaFormat.html#KEY_AAC_SBR_MODE)
        pub const KEY_AAC_SBR_MODE : &'static str = "aac-sbr-mode";

        /// public static final [KEY_AUDIO_SESSION_ID](https://developer.android.com/reference/android/media/MediaFormat.html#KEY_AUDIO_SESSION_ID)
        pub const KEY_AUDIO_SESSION_ID : &'static str = "audio-session-id";

        /// public static final [KEY_BITRATE_MODE](https://developer.android.com/reference/android/media/MediaFormat.html#KEY_BITRATE_MODE)
        pub const KEY_BITRATE_MODE : &'static str = "bitrate-mode";

        /// public static final [KEY_BIT_RATE](https://developer.android.com/reference/android/media/MediaFormat.html#KEY_BIT_RATE)
        pub const KEY_BIT_RATE : &'static str = "bitrate";

        /// public static final [KEY_CAPTURE_RATE](https://developer.android.com/reference/android/media/MediaFormat.html#KEY_CAPTURE_RATE)
        pub const KEY_CAPTURE_RATE : &'static str = "capture-rate";

        /// public static final [KEY_CHANNEL_COUNT](https://developer.android.com/reference/android/media/MediaFormat.html#KEY_CHANNEL_COUNT)
        pub const KEY_CHANNEL_COUNT : &'static str = "channel-count";

        /// public static final [KEY_CHANNEL_MASK](https://developer.android.com/reference/android/media/MediaFormat.html#KEY_CHANNEL_MASK)
        pub const KEY_CHANNEL_MASK : &'static str = "channel-mask";

        /// public static final [KEY_COLOR_FORMAT](https://developer.android.com/reference/android/media/MediaFormat.html#KEY_COLOR_FORMAT)
        pub const KEY_COLOR_FORMAT : &'static str = "color-format";

        /// public static final [KEY_COLOR_RANGE](https://developer.android.com/reference/android/media/MediaFormat.html#KEY_COLOR_RANGE)
        pub const KEY_COLOR_RANGE : &'static str = "color-range";

        /// public static final [KEY_COLOR_STANDARD](https://developer.android.com/reference/android/media/MediaFormat.html#KEY_COLOR_STANDARD)
        pub const KEY_COLOR_STANDARD : &'static str = "color-standard";

        /// public static final [KEY_COLOR_TRANSFER](https://developer.android.com/reference/android/media/MediaFormat.html#KEY_COLOR_TRANSFER)
        pub const KEY_COLOR_TRANSFER : &'static str = "color-transfer";

        /// public static final [KEY_COMPLEXITY](https://developer.android.com/reference/android/media/MediaFormat.html#KEY_COMPLEXITY)
        pub const KEY_COMPLEXITY : &'static str = "complexity";

        /// public static final [KEY_CREATE_INPUT_SURFACE_SUSPENDED](https://developer.android.com/reference/android/media/MediaFormat.html#KEY_CREATE_INPUT_SURFACE_SUSPENDED)
        pub const KEY_CREATE_INPUT_SURFACE_SUSPENDED : &'static str = "create-input-buffers-suspended";

        /// public static final [KEY_DURATION](https://developer.android.com/reference/android/media/MediaFormat.html#KEY_DURATION)
        pub const KEY_DURATION : &'static str = "durationUs";

        /// public static final [KEY_FLAC_COMPRESSION_LEVEL](https://developer.android.com/reference/android/media/MediaFormat.html#KEY_FLAC_COMPRESSION_LEVEL)
        pub const KEY_FLAC_COMPRESSION_LEVEL : &'static str = "flac-compression-level";

        /// public static final [KEY_FRAME_RATE](https://developer.android.com/reference/android/media/MediaFormat.html#KEY_FRAME_RATE)
        pub const KEY_FRAME_RATE : &'static str = "frame-rate";

        /// public static final [KEY_GRID_COLUMNS](https://developer.android.com/reference/android/media/MediaFormat.html#KEY_GRID_COLUMNS)
        pub const KEY_GRID_COLUMNS : &'static str = "grid-cols";

        /// public static final [KEY_GRID_ROWS](https://developer.android.com/reference/android/media/MediaFormat.html#KEY_GRID_ROWS)
        pub const KEY_GRID_ROWS : &'static str = "grid-rows";

        /// public static final [KEY_HAPTIC_CHANNEL_COUNT](https://developer.android.com/reference/android/media/MediaFormat.html#KEY_HAPTIC_CHANNEL_COUNT)
        pub const KEY_HAPTIC_CHANNEL_COUNT : &'static str = "haptic-channel-count";

        /// public static final [KEY_HDR10_PLUS_INFO](https://developer.android.com/reference/android/media/MediaFormat.html#KEY_HDR10_PLUS_INFO)
        pub const KEY_HDR10_PLUS_INFO : &'static str = "hdr10-plus-info";

        /// public static final [KEY_HDR_STATIC_INFO](https://developer.android.com/reference/android/media/MediaFormat.html#KEY_HDR_STATIC_INFO)
        pub const KEY_HDR_STATIC_INFO : &'static str = "hdr-static-info";

        /// public static final [KEY_HEIGHT](https://developer.android.com/reference/android/media/MediaFormat.html#KEY_HEIGHT)
        pub const KEY_HEIGHT : &'static str = "height";

        /// public static final [KEY_INTRA_REFRESH_PERIOD](https://developer.android.com/reference/android/media/MediaFormat.html#KEY_INTRA_REFRESH_PERIOD)
        pub const KEY_INTRA_REFRESH_PERIOD : &'static str = "intra-refresh-period";

        /// public static final [KEY_IS_ADTS](https://developer.android.com/reference/android/media/MediaFormat.html#KEY_IS_ADTS)
        pub const KEY_IS_ADTS : &'static str = "is-adts";

        /// public static final [KEY_IS_AUTOSELECT](https://developer.android.com/reference/android/media/MediaFormat.html#KEY_IS_AUTOSELECT)
        pub const KEY_IS_AUTOSELECT : &'static str = "is-autoselect";

        /// public static final [KEY_IS_DEFAULT](https://developer.android.com/reference/android/media/MediaFormat.html#KEY_IS_DEFAULT)
        pub const KEY_IS_DEFAULT : &'static str = "is-default";

        /// public static final [KEY_IS_FORCED_SUBTITLE](https://developer.android.com/reference/android/media/MediaFormat.html#KEY_IS_FORCED_SUBTITLE)
        pub const KEY_IS_FORCED_SUBTITLE : &'static str = "is-forced-subtitle";

        /// public static final [KEY_I_FRAME_INTERVAL](https://developer.android.com/reference/android/media/MediaFormat.html#KEY_I_FRAME_INTERVAL)
        pub const KEY_I_FRAME_INTERVAL : &'static str = "i-frame-interval";

        /// public static final [KEY_LANGUAGE](https://developer.android.com/reference/android/media/MediaFormat.html#KEY_LANGUAGE)
        pub const KEY_LANGUAGE : &'static str = "language";

        /// public static final [KEY_LATENCY](https://developer.android.com/reference/android/media/MediaFormat.html#KEY_LATENCY)
        pub const KEY_LATENCY : &'static str = "latency";

        /// public static final [KEY_LEVEL](https://developer.android.com/reference/android/media/MediaFormat.html#KEY_LEVEL)
        pub const KEY_LEVEL : &'static str = "level";

        /// public static final [KEY_MAX_B_FRAMES](https://developer.android.com/reference/android/media/MediaFormat.html#KEY_MAX_B_FRAMES)
        pub const KEY_MAX_B_FRAMES : &'static str = "max-bframes";

        /// public static final [KEY_MAX_FPS_TO_ENCODER](https://developer.android.com/reference/android/media/MediaFormat.html#KEY_MAX_FPS_TO_ENCODER)
        pub const KEY_MAX_FPS_TO_ENCODER : &'static str = "max-fps-to-encoder";

        /// public static final [KEY_MAX_HEIGHT](https://developer.android.com/reference/android/media/MediaFormat.html#KEY_MAX_HEIGHT)
        pub const KEY_MAX_HEIGHT : &'static str = "max-height";

        /// public static final [KEY_MAX_INPUT_SIZE](https://developer.android.com/reference/android/media/MediaFormat.html#KEY_MAX_INPUT_SIZE)
        pub const KEY_MAX_INPUT_SIZE : &'static str = "max-input-size";

        /// public static final [KEY_MAX_PTS_GAP_TO_ENCODER](https://developer.android.com/reference/android/media/MediaFormat.html#KEY_MAX_PTS_GAP_TO_ENCODER)
        pub const KEY_MAX_PTS_GAP_TO_ENCODER : &'static str = "max-pts-gap-to-encoder";

        /// public static final [KEY_MAX_WIDTH](https://developer.android.com/reference/android/media/MediaFormat.html#KEY_MAX_WIDTH)
        pub const KEY_MAX_WIDTH : &'static str = "max-width";

        /// public static final [KEY_MIME](https://developer.android.com/reference/android/media/MediaFormat.html#KEY_MIME)
        pub const KEY_MIME : &'static str = "mime";

        /// public static final [KEY_OPERATING_RATE](https://developer.android.com/reference/android/media/MediaFormat.html#KEY_OPERATING_RATE)
        pub const KEY_OPERATING_RATE : &'static str = "operating-rate";

        /// public static final [KEY_OUTPUT_REORDER_DEPTH](https://developer.android.com/reference/android/media/MediaFormat.html#KEY_OUTPUT_REORDER_DEPTH)
        pub const KEY_OUTPUT_REORDER_DEPTH : &'static str = "output-reorder-depth";

        /// public static final [KEY_PCM_ENCODING](https://developer.android.com/reference/android/media/MediaFormat.html#KEY_PCM_ENCODING)
        pub const KEY_PCM_ENCODING : &'static str = "pcm-encoding";

        /// public static final [KEY_PREPEND_HEADER_TO_SYNC_FRAMES](https://developer.android.com/reference/android/media/MediaFormat.html#KEY_PREPEND_HEADER_TO_SYNC_FRAMES)
        pub const KEY_PREPEND_HEADER_TO_SYNC_FRAMES : &'static str = "prepend-sps-pps-to-idr-frames";

        /// public static final [KEY_PRIORITY](https://developer.android.com/reference/android/media/MediaFormat.html#KEY_PRIORITY)
        pub const KEY_PRIORITY : &'static str = "priority";

        /// public static final [KEY_PROFILE](https://developer.android.com/reference/android/media/MediaFormat.html#KEY_PROFILE)
        pub const KEY_PROFILE : &'static str = "profile";

        /// public static final [KEY_PUSH_BLANK_BUFFERS_ON_STOP](https://developer.android.com/reference/android/media/MediaFormat.html#KEY_PUSH_BLANK_BUFFERS_ON_STOP)
        pub const KEY_PUSH_BLANK_BUFFERS_ON_STOP : &'static str = "push-blank-buffers-on-shutdown";

        /// public static final [KEY_QUALITY](https://developer.android.com/reference/android/media/MediaFormat.html#KEY_QUALITY)
        pub const KEY_QUALITY : &'static str = "quality";

        /// public static final [KEY_REPEAT_PREVIOUS_FRAME_AFTER](https://developer.android.com/reference/android/media/MediaFormat.html#KEY_REPEAT_PREVIOUS_FRAME_AFTER)
        pub const KEY_REPEAT_PREVIOUS_FRAME_AFTER : &'static str = "repeat-previous-frame-after";

        /// public static final [KEY_ROTATION](https://developer.android.com/reference/android/media/MediaFormat.html#KEY_ROTATION)
        pub const KEY_ROTATION : &'static str = "rotation-degrees";

        /// public static final [KEY_SAMPLE_RATE](https://developer.android.com/reference/android/media/MediaFormat.html#KEY_SAMPLE_RATE)
        pub const KEY_SAMPLE_RATE : &'static str = "sample-rate";

        /// public static final [KEY_SLICE_HEIGHT](https://developer.android.com/reference/android/media/MediaFormat.html#KEY_SLICE_HEIGHT)
        pub const KEY_SLICE_HEIGHT : &'static str = "slice-height";

        /// public static final [KEY_STRIDE](https://developer.android.com/reference/android/media/MediaFormat.html#KEY_STRIDE)
        pub const KEY_STRIDE : &'static str = "stride";

        /// public static final [KEY_TEMPORAL_LAYERING](https://developer.android.com/reference/android/media/MediaFormat.html#KEY_TEMPORAL_LAYERING)
        pub const KEY_TEMPORAL_LAYERING : &'static str = "ts-schema";

        /// public static final [KEY_TILE_HEIGHT](https://developer.android.com/reference/android/media/MediaFormat.html#KEY_TILE_HEIGHT)
        pub const KEY_TILE_HEIGHT : &'static str = "tile-height";

        /// public static final [KEY_TILE_WIDTH](https://developer.android.com/reference/android/media/MediaFormat.html#KEY_TILE_WIDTH)
        pub const KEY_TILE_WIDTH : &'static str = "tile-width";

        /// public static final [KEY_TRACK_ID](https://developer.android.com/reference/android/media/MediaFormat.html#KEY_TRACK_ID)
        pub const KEY_TRACK_ID : &'static str = "track-id";

        /// public static final [KEY_WIDTH](https://developer.android.com/reference/android/media/MediaFormat.html#KEY_WIDTH)
        pub const KEY_WIDTH : &'static str = "width";

        /// public static final [MIMETYPE_AUDIO_AAC](https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_AUDIO_AAC)
        pub const MIMETYPE_AUDIO_AAC : &'static str = "audio/mp4a-latm";

        /// public static final [MIMETYPE_AUDIO_AC3](https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_AUDIO_AC3)
        pub const MIMETYPE_AUDIO_AC3 : &'static str = "audio/ac3";

        /// public static final [MIMETYPE_AUDIO_AC4](https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_AUDIO_AC4)
        pub const MIMETYPE_AUDIO_AC4 : &'static str = "audio/ac4";

        /// public static final [MIMETYPE_AUDIO_AMR_NB](https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_AUDIO_AMR_NB)
        pub const MIMETYPE_AUDIO_AMR_NB : &'static str = "audio/3gpp";

        /// public static final [MIMETYPE_AUDIO_AMR_WB](https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_AUDIO_AMR_WB)
        pub const MIMETYPE_AUDIO_AMR_WB : &'static str = "audio/amr-wb";

        /// public static final [MIMETYPE_AUDIO_EAC3](https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_AUDIO_EAC3)
        pub const MIMETYPE_AUDIO_EAC3 : &'static str = "audio/eac3";

        /// public static final [MIMETYPE_AUDIO_EAC3_JOC](https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_AUDIO_EAC3_JOC)
        pub const MIMETYPE_AUDIO_EAC3_JOC : &'static str = "audio/eac3-joc";

        /// public static final [MIMETYPE_AUDIO_FLAC](https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_AUDIO_FLAC)
        pub const MIMETYPE_AUDIO_FLAC : &'static str = "audio/flac";

        /// public static final [MIMETYPE_AUDIO_G711_ALAW](https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_AUDIO_G711_ALAW)
        pub const MIMETYPE_AUDIO_G711_ALAW : &'static str = "audio/g711-alaw";

        /// public static final [MIMETYPE_AUDIO_G711_MLAW](https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_AUDIO_G711_MLAW)
        pub const MIMETYPE_AUDIO_G711_MLAW : &'static str = "audio/g711-mlaw";

        /// public static final [MIMETYPE_AUDIO_MPEG](https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_AUDIO_MPEG)
        pub const MIMETYPE_AUDIO_MPEG : &'static str = "audio/mpeg";

        /// public static final [MIMETYPE_AUDIO_MSGSM](https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_AUDIO_MSGSM)
        pub const MIMETYPE_AUDIO_MSGSM : &'static str = "audio/gsm";

        /// public static final [MIMETYPE_AUDIO_OPUS](https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_AUDIO_OPUS)
        pub const MIMETYPE_AUDIO_OPUS : &'static str = "audio/opus";

        /// public static final [MIMETYPE_AUDIO_QCELP](https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_AUDIO_QCELP)
        pub const MIMETYPE_AUDIO_QCELP : &'static str = "audio/qcelp";

        /// public static final [MIMETYPE_AUDIO_RAW](https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_AUDIO_RAW)
        pub const MIMETYPE_AUDIO_RAW : &'static str = "audio/raw";

        /// public static final [MIMETYPE_AUDIO_SCRAMBLED](https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_AUDIO_SCRAMBLED)
        pub const MIMETYPE_AUDIO_SCRAMBLED : &'static str = "audio/scrambled";

        /// public static final [MIMETYPE_AUDIO_VORBIS](https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_AUDIO_VORBIS)
        pub const MIMETYPE_AUDIO_VORBIS : &'static str = "audio/vorbis";

        /// public static final [MIMETYPE_IMAGE_ANDROID_HEIC](https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_IMAGE_ANDROID_HEIC)
        pub const MIMETYPE_IMAGE_ANDROID_HEIC : &'static str = "image/vnd.android.heic";

        /// public static final [MIMETYPE_TEXT_CEA_608](https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_TEXT_CEA_608)
        pub const MIMETYPE_TEXT_CEA_608 : &'static str = "text/cea-608";

        /// public static final [MIMETYPE_TEXT_CEA_708](https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_TEXT_CEA_708)
        pub const MIMETYPE_TEXT_CEA_708 : &'static str = "text/cea-708";

        /// public static final [MIMETYPE_TEXT_SUBRIP](https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_TEXT_SUBRIP)
        pub const MIMETYPE_TEXT_SUBRIP : &'static str = "application/x-subrip";

        /// public static final [MIMETYPE_TEXT_VTT](https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_TEXT_VTT)
        pub const MIMETYPE_TEXT_VTT : &'static str = "text/vtt";

        /// public static final [MIMETYPE_VIDEO_AV1](https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_VIDEO_AV1)
        pub const MIMETYPE_VIDEO_AV1 : &'static str = "video/av01";

        /// public static final [MIMETYPE_VIDEO_AVC](https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_VIDEO_AVC)
        pub const MIMETYPE_VIDEO_AVC : &'static str = "video/avc";

        /// public static final [MIMETYPE_VIDEO_DOLBY_VISION](https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_VIDEO_DOLBY_VISION)
        pub const MIMETYPE_VIDEO_DOLBY_VISION : &'static str = "video/dolby-vision";

        /// public static final [MIMETYPE_VIDEO_H263](https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_VIDEO_H263)
        pub const MIMETYPE_VIDEO_H263 : &'static str = "video/3gpp";

        /// public static final [MIMETYPE_VIDEO_HEVC](https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_VIDEO_HEVC)
        pub const MIMETYPE_VIDEO_HEVC : &'static str = "video/hevc";

        /// public static final [MIMETYPE_VIDEO_MPEG2](https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_VIDEO_MPEG2)
        pub const MIMETYPE_VIDEO_MPEG2 : &'static str = "video/mpeg2";

        /// public static final [MIMETYPE_VIDEO_MPEG4](https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_VIDEO_MPEG4)
        pub const MIMETYPE_VIDEO_MPEG4 : &'static str = "video/mp4v-es";

        /// public static final [MIMETYPE_VIDEO_RAW](https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_VIDEO_RAW)
        pub const MIMETYPE_VIDEO_RAW : &'static str = "video/raw";

        /// public static final [MIMETYPE_VIDEO_SCRAMBLED](https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_VIDEO_SCRAMBLED)
        pub const MIMETYPE_VIDEO_SCRAMBLED : &'static str = "video/scrambled";

        /// public static final [MIMETYPE_VIDEO_VP8](https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_VIDEO_VP8)
        pub const MIMETYPE_VIDEO_VP8 : &'static str = "video/x-vnd.on2.vp8";

        /// public static final [MIMETYPE_VIDEO_VP9](https://developer.android.com/reference/android/media/MediaFormat.html#MIMETYPE_VIDEO_VP9)
        pub const MIMETYPE_VIDEO_VP9 : &'static str = "video/x-vnd.on2.vp9";

        /// public static final [TYPE_BYTE_BUFFER](https://developer.android.com/reference/android/media/MediaFormat.html#TYPE_BYTE_BUFFER)
        pub const TYPE_BYTE_BUFFER : i32 = 5;

        /// public static final [TYPE_FLOAT](https://developer.android.com/reference/android/media/MediaFormat.html#TYPE_FLOAT)
        pub const TYPE_FLOAT : i32 = 3;

        /// public static final [TYPE_INTEGER](https://developer.android.com/reference/android/media/MediaFormat.html#TYPE_INTEGER)
        pub const TYPE_INTEGER : i32 = 1;

        /// public static final [TYPE_LONG](https://developer.android.com/reference/android/media/MediaFormat.html#TYPE_LONG)
        pub const TYPE_LONG : i32 = 2;

        /// public static final [TYPE_NULL](https://developer.android.com/reference/android/media/MediaFormat.html#TYPE_NULL)
        pub const TYPE_NULL : i32 = 0;

        /// public static final [TYPE_STRING](https://developer.android.com/reference/android/media/MediaFormat.html#TYPE_STRING)
        pub const TYPE_STRING : i32 = 4;
    }
}
