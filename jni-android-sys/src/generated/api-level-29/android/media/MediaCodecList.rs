// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-media-MediaCodecList"))]
__jni_bindgen! {
    /// public final class [MediaCodecList](https://developer.android.com/reference/android/media/MediaCodecList.html)
    ///
    /// Required feature: android-media-MediaCodecList
    public final class MediaCodecList ("android/media/MediaCodecList") extends crate::java::lang::Object {

        /// [MediaCodecList](https://developer.android.com/reference/android/media/MediaCodecList.html#MediaCodecList(int))
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::media::MediaCodecList>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodecList", java.flags == PUBLIC, .name == "<init>", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodecList\0", "<init>\0", "(I)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCodecCount](https://developer.android.com/reference/android/media/MediaCodecList.html#getCodecCount())
        #[deprecated] pub fn getCodecCount<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodecList", java.flags == PUBLIC | STATIC, .name == "getCodecCount", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/media/MediaCodecList\0", "getCodecCount\0", "()I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCodecInfoAt](https://developer.android.com/reference/android/media/MediaCodecList.html#getCodecInfoAt(int))
        ///
        /// Required features: "android-media-MediaCodecInfo"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaCodecInfo")))]
        #[deprecated] pub fn getCodecInfoAt<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::MediaCodecInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodecList", java.flags == PUBLIC | STATIC, .name == "getCodecInfoAt", .descriptor == "(I)Landroid/media/MediaCodecInfo;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/media/MediaCodecList\0", "getCodecInfoAt\0", "(I)Landroid/media/MediaCodecInfo;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCodecInfos](https://developer.android.com/reference/android/media/MediaCodecList.html#getCodecInfos())
        ///
        /// Required features: "android-media-MediaCodecInfo"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaCodecInfo")))]
        pub fn getCodecInfos<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::android::media::MediaCodecInfo, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodecList", java.flags == PUBLIC, .name == "getCodecInfos", .descriptor == "()[Landroid/media/MediaCodecInfo;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodecList\0", "getCodecInfos\0", "()[Landroid/media/MediaCodecInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [findDecoderForFormat](https://developer.android.com/reference/android/media/MediaCodecList.html#findDecoderForFormat(android.media.MediaFormat))
        ///
        /// Required features: "android-media-MediaFormat", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaFormat", feature = "java-lang-String")))]
        pub fn findDecoderForFormat<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaFormat>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodecList", java.flags == PUBLIC, .name == "findDecoderForFormat", .descriptor == "(Landroid/media/MediaFormat;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodecList\0", "findDecoderForFormat\0", "(Landroid/media/MediaFormat;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [findEncoderForFormat](https://developer.android.com/reference/android/media/MediaCodecList.html#findEncoderForFormat(android.media.MediaFormat))
        ///
        /// Required features: "android-media-MediaFormat", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaFormat", feature = "java-lang-String")))]
        pub fn findEncoderForFormat<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaFormat>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodecList", java.flags == PUBLIC, .name == "findEncoderForFormat", .descriptor == "(Landroid/media/MediaFormat;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodecList\0", "findEncoderForFormat\0", "(Landroid/media/MediaFormat;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [ALL_CODECS](https://developer.android.com/reference/android/media/MediaCodecList.html#ALL_CODECS)
        pub const ALL_CODECS : i32 = 1;

        /// public static final [REGULAR_CODECS](https://developer.android.com/reference/android/media/MediaCodecList.html#REGULAR_CODECS)
        pub const REGULAR_CODECS : i32 = 0;
    }
}
