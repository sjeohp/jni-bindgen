// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-media-midi-MidiDeviceService"))]
__jni_bindgen! {
    /// public class [MidiDeviceService](https://developer.android.com/reference/android/media/midi/MidiDeviceService.html)
    ///
    /// Required feature: android-media-midi-MidiDeviceService
    public class MidiDeviceService ("android/media/midi/MidiDeviceService") extends crate::android::app::Service {

        /// [MidiDeviceService](https://developer.android.com/reference/android/media/midi/MidiDeviceService.html#MidiDeviceService())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::media::midi::MidiDeviceService>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/midi/MidiDeviceService", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/midi/MidiDeviceService\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onCreate](https://developer.android.com/reference/android/media/midi/MidiDeviceService.html#onCreate())
        pub fn onCreate<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/midi/MidiDeviceService", java.flags == PUBLIC, .name == "onCreate", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/midi/MidiDeviceService\0", "onCreate\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onGetInputPortReceivers](https://developer.android.com/reference/android/media/midi/MidiDeviceService.html#onGetInputPortReceivers())
        ///
        /// Required features: "android-media-midi-MidiReceiver"
        #[cfg(any(feature = "all", all(feature = "android-media-midi-MidiReceiver")))]
        pub fn onGetInputPortReceivers<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::android::media::midi::MidiReceiver, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/midi/MidiDeviceService", java.flags == PUBLIC | ABSTRACT, .name == "onGetInputPortReceivers", .descriptor == "()[Landroid/media/midi/MidiReceiver;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/midi/MidiDeviceService\0", "onGetInputPortReceivers\0", "()[Landroid/media/midi/MidiReceiver;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getOutputPortReceivers](https://developer.android.com/reference/android/media/midi/MidiDeviceService.html#getOutputPortReceivers())
        ///
        /// Required features: "android-media-midi-MidiReceiver"
        #[cfg(any(feature = "all", all(feature = "android-media-midi-MidiReceiver")))]
        pub fn getOutputPortReceivers<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::android::media::midi::MidiReceiver, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/midi/MidiDeviceService", java.flags == PUBLIC | FINAL, .name == "getOutputPortReceivers", .descriptor == "()[Landroid/media/midi/MidiReceiver;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/midi/MidiDeviceService\0", "getOutputPortReceivers\0", "()[Landroid/media/midi/MidiReceiver;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDeviceInfo](https://developer.android.com/reference/android/media/midi/MidiDeviceService.html#getDeviceInfo())
        ///
        /// Required features: "android-media-midi-MidiDeviceInfo"
        #[cfg(any(feature = "all", all(feature = "android-media-midi-MidiDeviceInfo")))]
        pub fn getDeviceInfo<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::midi::MidiDeviceInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/midi/MidiDeviceService", java.flags == PUBLIC | FINAL, .name == "getDeviceInfo", .descriptor == "()Landroid/media/midi/MidiDeviceInfo;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/midi/MidiDeviceService\0", "getDeviceInfo\0", "()Landroid/media/midi/MidiDeviceInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onDeviceStatusChanged](https://developer.android.com/reference/android/media/midi/MidiDeviceService.html#onDeviceStatusChanged(android.media.midi.MidiDeviceStatus))
        ///
        /// Required features: "android-media-midi-MidiDeviceStatus"
        #[cfg(any(feature = "all", all(feature = "android-media-midi-MidiDeviceStatus")))]
        pub fn onDeviceStatusChanged<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::midi::MidiDeviceStatus>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/midi/MidiDeviceService", java.flags == PUBLIC, .name == "onDeviceStatusChanged", .descriptor == "(Landroid/media/midi/MidiDeviceStatus;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/midi/MidiDeviceService\0", "onDeviceStatusChanged\0", "(Landroid/media/midi/MidiDeviceStatus;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onClose](https://developer.android.com/reference/android/media/midi/MidiDeviceService.html#onClose())
        pub fn onClose<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/midi/MidiDeviceService", java.flags == PUBLIC, .name == "onClose", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/midi/MidiDeviceService\0", "onClose\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onBind](https://developer.android.com/reference/android/media/midi/MidiDeviceService.html#onBind(android.content.Intent))
        ///
        /// Required features: "android-content-Intent", "android-os-IBinder"
        #[cfg(any(feature = "all", all(feature = "android-content-Intent", feature = "android-os-IBinder")))]
        pub fn onBind<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::IBinder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/midi/MidiDeviceService", java.flags == PUBLIC, .name == "onBind", .descriptor == "(Landroid/content/Intent;)Landroid/os/IBinder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/midi/MidiDeviceService\0", "onBind\0", "(Landroid/content/Intent;)Landroid/os/IBinder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [SERVICE_INTERFACE](https://developer.android.com/reference/android/media/midi/MidiDeviceService.html#SERVICE_INTERFACE)
        pub const SERVICE_INTERFACE : &'static str = "android.media.midi.MidiDeviceService";
    }
}
