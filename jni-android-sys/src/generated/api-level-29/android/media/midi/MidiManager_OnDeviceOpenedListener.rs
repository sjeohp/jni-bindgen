// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-media-midi-MidiManager_OnDeviceOpenedListener"))]
__jni_bindgen! {
    /// public interface [MidiManager.OnDeviceOpenedListener](https://developer.android.com/reference/android/media/midi/MidiManager.OnDeviceOpenedListener.html)
    ///
    /// Required feature: android-media-midi-MidiManager_OnDeviceOpenedListener
    public interface MidiManager_OnDeviceOpenedListener ("android/media/midi/MidiManager$OnDeviceOpenedListener") extends crate::java::lang::Object {

        /// [onDeviceOpened](https://developer.android.com/reference/android/media/midi/MidiManager.OnDeviceOpenedListener.html#onDeviceOpened(android.media.midi.MidiDevice))
        ///
        /// Required features: "android-media-midi-MidiDevice"
        #[cfg(any(feature = "all", all(feature = "android-media-midi-MidiDevice")))]
        pub fn onDeviceOpened<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::midi::MidiDevice>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/midi/MidiManager$OnDeviceOpenedListener", java.flags == PUBLIC | ABSTRACT, .name == "onDeviceOpened", .descriptor == "(Landroid/media/midi/MidiDevice;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/midi/MidiManager$OnDeviceOpenedListener\0", "onDeviceOpened\0", "(Landroid/media/midi/MidiDevice;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
