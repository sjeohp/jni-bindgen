// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-media-midi-MidiManager_DeviceCallback"))]
__jni_bindgen! {
    /// public class [MidiManager.DeviceCallback](https://developer.android.com/reference/android/media/midi/MidiManager.DeviceCallback.html)
    ///
    /// Required feature: android-media-midi-MidiManager_DeviceCallback
    public class MidiManager_DeviceCallback ("android/media/midi/MidiManager$DeviceCallback") extends crate::java::lang::Object {

        /// [DeviceCallback](https://developer.android.com/reference/android/media/midi/MidiManager.DeviceCallback.html#DeviceCallback())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::media::midi::MidiManager_DeviceCallback>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/midi/MidiManager$DeviceCallback", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/midi/MidiManager$DeviceCallback\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onDeviceAdded](https://developer.android.com/reference/android/media/midi/MidiManager.DeviceCallback.html#onDeviceAdded(android.media.midi.MidiDeviceInfo))
        ///
        /// Required features: "android-media-midi-MidiDeviceInfo"
        #[cfg(any(feature = "all", all(feature = "android-media-midi-MidiDeviceInfo")))]
        pub fn onDeviceAdded<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::midi::MidiDeviceInfo>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/midi/MidiManager$DeviceCallback", java.flags == PUBLIC, .name == "onDeviceAdded", .descriptor == "(Landroid/media/midi/MidiDeviceInfo;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/midi/MidiManager$DeviceCallback\0", "onDeviceAdded\0", "(Landroid/media/midi/MidiDeviceInfo;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onDeviceRemoved](https://developer.android.com/reference/android/media/midi/MidiManager.DeviceCallback.html#onDeviceRemoved(android.media.midi.MidiDeviceInfo))
        ///
        /// Required features: "android-media-midi-MidiDeviceInfo"
        #[cfg(any(feature = "all", all(feature = "android-media-midi-MidiDeviceInfo")))]
        pub fn onDeviceRemoved<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::midi::MidiDeviceInfo>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/midi/MidiManager$DeviceCallback", java.flags == PUBLIC, .name == "onDeviceRemoved", .descriptor == "(Landroid/media/midi/MidiDeviceInfo;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/midi/MidiManager$DeviceCallback\0", "onDeviceRemoved\0", "(Landroid/media/midi/MidiDeviceInfo;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onDeviceStatusChanged](https://developer.android.com/reference/android/media/midi/MidiManager.DeviceCallback.html#onDeviceStatusChanged(android.media.midi.MidiDeviceStatus))
        ///
        /// Required features: "android-media-midi-MidiDeviceStatus"
        #[cfg(any(feature = "all", all(feature = "android-media-midi-MidiDeviceStatus")))]
        pub fn onDeviceStatusChanged<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::midi::MidiDeviceStatus>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/midi/MidiManager$DeviceCallback", java.flags == PUBLIC, .name == "onDeviceStatusChanged", .descriptor == "(Landroid/media/midi/MidiDeviceStatus;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/midi/MidiManager$DeviceCallback\0", "onDeviceStatusChanged\0", "(Landroid/media/midi/MidiDeviceStatus;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
