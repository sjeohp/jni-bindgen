// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-media-midi-MidiManager"))]
__jni_bindgen! {
    /// public final class [MidiManager](https://developer.android.com/reference/android/media/midi/MidiManager.html)
    ///
    /// Required feature: android-media-midi-MidiManager
    public final class MidiManager ("android/media/midi/MidiManager") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [MidiManager](https://developer.android.com/reference/android/media/midi/MidiManager.html#MidiManager())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::media::midi::MidiManager>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/media/midi/MidiManager", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/midi/MidiManager\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [registerDeviceCallback](https://developer.android.com/reference/android/media/midi/MidiManager.html#registerDeviceCallback(android.media.midi.MidiManager.DeviceCallback,%20android.os.Handler))
        ///
        /// Required features: "android-media-midi-MidiManager_DeviceCallback", "android-os-Handler"
        #[cfg(any(feature = "all", all(feature = "android-media-midi-MidiManager_DeviceCallback", feature = "android-os-Handler")))]
        pub fn registerDeviceCallback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::midi::MidiManager_DeviceCallback>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/midi/MidiManager", java.flags == PUBLIC, .name == "registerDeviceCallback", .descriptor == "(Landroid/media/midi/MidiManager$DeviceCallback;Landroid/os/Handler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/midi/MidiManager\0", "registerDeviceCallback\0", "(Landroid/media/midi/MidiManager$DeviceCallback;Landroid/os/Handler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unregisterDeviceCallback](https://developer.android.com/reference/android/media/midi/MidiManager.html#unregisterDeviceCallback(android.media.midi.MidiManager.DeviceCallback))
        ///
        /// Required features: "android-media-midi-MidiManager_DeviceCallback"
        #[cfg(any(feature = "all", all(feature = "android-media-midi-MidiManager_DeviceCallback")))]
        pub fn unregisterDeviceCallback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::midi::MidiManager_DeviceCallback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/midi/MidiManager", java.flags == PUBLIC, .name == "unregisterDeviceCallback", .descriptor == "(Landroid/media/midi/MidiManager$DeviceCallback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/midi/MidiManager\0", "unregisterDeviceCallback\0", "(Landroid/media/midi/MidiManager$DeviceCallback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDevices](https://developer.android.com/reference/android/media/midi/MidiManager.html#getDevices())
        ///
        /// Required features: "android-media-midi-MidiDeviceInfo"
        #[cfg(any(feature = "all", all(feature = "android-media-midi-MidiDeviceInfo")))]
        pub fn getDevices<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::android::media::midi::MidiDeviceInfo, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/midi/MidiManager", java.flags == PUBLIC, .name == "getDevices", .descriptor == "()[Landroid/media/midi/MidiDeviceInfo;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/midi/MidiManager\0", "getDevices\0", "()[Landroid/media/midi/MidiDeviceInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [openDevice](https://developer.android.com/reference/android/media/midi/MidiManager.html#openDevice(android.media.midi.MidiDeviceInfo,%20android.media.midi.MidiManager.OnDeviceOpenedListener,%20android.os.Handler))
        ///
        /// Required features: "android-media-midi-MidiDeviceInfo", "android-media-midi-MidiManager_OnDeviceOpenedListener", "android-os-Handler"
        #[cfg(any(feature = "all", all(feature = "android-media-midi-MidiDeviceInfo", feature = "android-media-midi-MidiManager_OnDeviceOpenedListener", feature = "android-os-Handler")))]
        pub fn openDevice<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::midi::MidiDeviceInfo>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::midi::MidiManager_OnDeviceOpenedListener>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/midi/MidiManager", java.flags == PUBLIC, .name == "openDevice", .descriptor == "(Landroid/media/midi/MidiDeviceInfo;Landroid/media/midi/MidiManager$OnDeviceOpenedListener;Landroid/os/Handler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/midi/MidiManager\0", "openDevice\0", "(Landroid/media/midi/MidiDeviceInfo;Landroid/media/midi/MidiManager$OnDeviceOpenedListener;Landroid/os/Handler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [openBluetoothDevice](https://developer.android.com/reference/android/media/midi/MidiManager.html#openBluetoothDevice(android.bluetooth.BluetoothDevice,%20android.media.midi.MidiManager.OnDeviceOpenedListener,%20android.os.Handler))
        ///
        /// Required features: "android-bluetooth-BluetoothDevice", "android-media-midi-MidiManager_OnDeviceOpenedListener", "android-os-Handler"
        #[cfg(any(feature = "all", all(feature = "android-bluetooth-BluetoothDevice", feature = "android-media-midi-MidiManager_OnDeviceOpenedListener", feature = "android-os-Handler")))]
        pub fn openBluetoothDevice<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::bluetooth::BluetoothDevice>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::midi::MidiManager_OnDeviceOpenedListener>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/midi/MidiManager", java.flags == PUBLIC, .name == "openBluetoothDevice", .descriptor == "(Landroid/bluetooth/BluetoothDevice;Landroid/media/midi/MidiManager$OnDeviceOpenedListener;Landroid/os/Handler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/midi/MidiManager\0", "openBluetoothDevice\0", "(Landroid/bluetooth/BluetoothDevice;Landroid/media/midi/MidiManager$OnDeviceOpenedListener;Landroid/os/Handler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
