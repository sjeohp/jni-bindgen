// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-media-midi-MidiOutputPort"))]
__jni_bindgen! {
    /// public final class [MidiOutputPort](https://developer.android.com/reference/android/media/midi/MidiOutputPort.html)
    ///
    /// Required feature: android-media-midi-MidiOutputPort
    public final class MidiOutputPort ("android/media/midi/MidiOutputPort") extends crate::android::media::midi::MidiSender, implements crate::java::io::Closeable {

        // // Not emitting: Non-public method
        // /// [MidiOutputPort](https://developer.android.com/reference/android/media/midi/MidiOutputPort.html#MidiOutputPort(java.io.FileDescriptor,%20int))
        // ///
        // /// Required features: "java-io-FileDescriptor"
        // #[cfg(any(feature = "all", all(feature = "java-io-FileDescriptor")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::FileDescriptor>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::media::midi::MidiOutputPort>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/media/midi/MidiOutputPort", java.flags == (empty), .name == "<init>", .descriptor == "(Ljava/io/FileDescriptor;I)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/midi/MidiOutputPort\0", "<init>\0", "(Ljava/io/FileDescriptor;I)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getPortNumber](https://developer.android.com/reference/android/media/midi/MidiOutputPort.html#getPortNumber())
        pub fn getPortNumber<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/midi/MidiOutputPort", java.flags == PUBLIC, .name == "getPortNumber", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/midi/MidiOutputPort\0", "getPortNumber\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onConnect](https://developer.android.com/reference/android/media/midi/MidiOutputPort.html#onConnect(android.media.midi.MidiReceiver))
        ///
        /// Required features: "android-media-midi-MidiReceiver"
        #[cfg(any(feature = "all", all(feature = "android-media-midi-MidiReceiver")))]
        pub fn onConnect<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::midi::MidiReceiver>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/midi/MidiOutputPort", java.flags == PUBLIC, .name == "onConnect", .descriptor == "(Landroid/media/midi/MidiReceiver;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/midi/MidiOutputPort\0", "onConnect\0", "(Landroid/media/midi/MidiReceiver;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onDisconnect](https://developer.android.com/reference/android/media/midi/MidiOutputPort.html#onDisconnect(android.media.midi.MidiReceiver))
        ///
        /// Required features: "android-media-midi-MidiReceiver"
        #[cfg(any(feature = "all", all(feature = "android-media-midi-MidiReceiver")))]
        pub fn onDisconnect<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::midi::MidiReceiver>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/midi/MidiOutputPort", java.flags == PUBLIC, .name == "onDisconnect", .descriptor == "(Landroid/media/midi/MidiReceiver;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/midi/MidiOutputPort\0", "onDisconnect\0", "(Landroid/media/midi/MidiReceiver;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [close](https://developer.android.com/reference/android/media/midi/MidiOutputPort.html#close())
        pub fn close<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/midi/MidiOutputPort", java.flags == PUBLIC, .name == "close", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/midi/MidiOutputPort\0", "close\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [finalize](https://developer.android.com/reference/android/media/midi/MidiOutputPort.html#finalize())
        // fn finalize<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/media/midi/MidiOutputPort", java.flags == PROTECTED, .name == "finalize", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/midi/MidiOutputPort\0", "finalize\0", "()V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }
    }
}
