// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-media-MediaCas_EventListener"))]
__jni_bindgen! {
    /// public interface [MediaCas.EventListener](https://developer.android.com/reference/android/media/MediaCas.EventListener.html)
    ///
    /// Required feature: android-media-MediaCas_EventListener
    public interface MediaCas_EventListener ("android/media/MediaCas$EventListener") extends crate::java::lang::Object {

        /// [onEvent](https://developer.android.com/reference/android/media/MediaCas.EventListener.html#onEvent(android.media.MediaCas,%20int,%20int,%20byte%5B%5D))
        ///
        /// Required features: "android-media-MediaCas"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaCas")))]
        pub fn onEvent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaCas>>, arg1: i32, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCas$EventListener", java.flags == PUBLIC | ABSTRACT, .name == "onEvent", .descriptor == "(Landroid/media/MediaCas;II[B)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCas$EventListener\0", "onEvent\0", "(Landroid/media/MediaCas;II[B)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onSessionEvent](https://developer.android.com/reference/android/media/MediaCas.EventListener.html#onSessionEvent(android.media.MediaCas,%20android.media.MediaCas.Session,%20int,%20int,%20byte%5B%5D))
        ///
        /// Required features: "android-media-MediaCas", "android-media-MediaCas_Session"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaCas", feature = "android-media-MediaCas_Session")))]
        pub fn onSessionEvent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaCas>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaCas_Session>>, arg2: i32, arg3: i32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCas$EventListener", java.flags == PUBLIC, .name == "onSessionEvent", .descriptor == "(Landroid/media/MediaCas;Landroid/media/MediaCas$Session;II[B)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCas$EventListener\0", "onSessionEvent\0", "(Landroid/media/MediaCas;Landroid/media/MediaCas$Session;II[B)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
