// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-media-AudioRecord"))]
__jni_bindgen! {
    /// public class [AudioRecord](https://developer.android.com/reference/android/media/AudioRecord.html)
    ///
    /// Required feature: android-media-AudioRecord
    public class AudioRecord ("android/media/AudioRecord") extends crate::java::lang::Object, implements crate::android::media::AudioRouting, crate::android::media::MicrophoneDirection, crate::android::media::AudioRecordingMonitor {

        /// [AudioRecord](https://developer.android.com/reference/android/media/AudioRecord.html#AudioRecord(int,%20int,%20int,%20int,%20int))
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32, arg3: i32, arg4: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::media::AudioRecord>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioRecord", java.flags == PUBLIC, .name == "<init>", .descriptor == "(IIIII)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioRecord\0", "<init>\0", "(IIIII)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [release](https://developer.android.com/reference/android/media/AudioRecord.html#release())
        pub fn release<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioRecord", java.flags == PUBLIC, .name == "release", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioRecord\0", "release\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [finalize](https://developer.android.com/reference/android/media/AudioRecord.html#finalize())
        // fn finalize<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/media/AudioRecord", java.flags == PROTECTED, .name == "finalize", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioRecord\0", "finalize\0", "()V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getSampleRate](https://developer.android.com/reference/android/media/AudioRecord.html#getSampleRate())
        pub fn getSampleRate<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioRecord", java.flags == PUBLIC, .name == "getSampleRate", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioRecord\0", "getSampleRate\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAudioSource](https://developer.android.com/reference/android/media/AudioRecord.html#getAudioSource())
        pub fn getAudioSource<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioRecord", java.flags == PUBLIC, .name == "getAudioSource", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioRecord\0", "getAudioSource\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAudioFormat](https://developer.android.com/reference/android/media/AudioRecord.html#getAudioFormat())
        pub fn getAudioFormat<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioRecord", java.flags == PUBLIC, .name == "getAudioFormat", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioRecord\0", "getAudioFormat\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getChannelConfiguration](https://developer.android.com/reference/android/media/AudioRecord.html#getChannelConfiguration())
        pub fn getChannelConfiguration<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioRecord", java.flags == PUBLIC, .name == "getChannelConfiguration", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioRecord\0", "getChannelConfiguration\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFormat](https://developer.android.com/reference/android/media/AudioRecord.html#getFormat())
        ///
        /// Required features: "android-media-AudioFormat"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioFormat")))]
        pub fn getFormat<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::AudioFormat>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioRecord", java.flags == PUBLIC, .name == "getFormat", .descriptor == "()Landroid/media/AudioFormat;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioRecord\0", "getFormat\0", "()Landroid/media/AudioFormat;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getChannelCount](https://developer.android.com/reference/android/media/AudioRecord.html#getChannelCount())
        pub fn getChannelCount<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioRecord", java.flags == PUBLIC, .name == "getChannelCount", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioRecord\0", "getChannelCount\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getState](https://developer.android.com/reference/android/media/AudioRecord.html#getState())
        pub fn getState<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioRecord", java.flags == PUBLIC, .name == "getState", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioRecord\0", "getState\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRecordingState](https://developer.android.com/reference/android/media/AudioRecord.html#getRecordingState())
        pub fn getRecordingState<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioRecord", java.flags == PUBLIC, .name == "getRecordingState", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioRecord\0", "getRecordingState\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getBufferSizeInFrames](https://developer.android.com/reference/android/media/AudioRecord.html#getBufferSizeInFrames())
        pub fn getBufferSizeInFrames<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioRecord", java.flags == PUBLIC, .name == "getBufferSizeInFrames", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioRecord\0", "getBufferSizeInFrames\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNotificationMarkerPosition](https://developer.android.com/reference/android/media/AudioRecord.html#getNotificationMarkerPosition())
        pub fn getNotificationMarkerPosition<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioRecord", java.flags == PUBLIC, .name == "getNotificationMarkerPosition", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioRecord\0", "getNotificationMarkerPosition\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPositionNotificationPeriod](https://developer.android.com/reference/android/media/AudioRecord.html#getPositionNotificationPeriod())
        pub fn getPositionNotificationPeriod<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioRecord", java.flags == PUBLIC, .name == "getPositionNotificationPeriod", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioRecord\0", "getPositionNotificationPeriod\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTimestamp](https://developer.android.com/reference/android/media/AudioRecord.html#getTimestamp(android.media.AudioTimestamp,%20int))
        ///
        /// Required features: "android-media-AudioTimestamp"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioTimestamp")))]
        pub fn getTimestamp<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::AudioTimestamp>>, arg1: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioRecord", java.flags == PUBLIC, .name == "getTimestamp", .descriptor == "(Landroid/media/AudioTimestamp;I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioRecord\0", "getTimestamp\0", "(Landroid/media/AudioTimestamp;I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMinBufferSize](https://developer.android.com/reference/android/media/AudioRecord.html#getMinBufferSize(int,%20int,%20int))
        pub fn getMinBufferSize<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioRecord", java.flags == PUBLIC | STATIC, .name == "getMinBufferSize", .descriptor == "(III)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/media/AudioRecord\0", "getMinBufferSize\0", "(III)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAudioSessionId](https://developer.android.com/reference/android/media/AudioRecord.html#getAudioSessionId())
        pub fn getAudioSessionId<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioRecord", java.flags == PUBLIC, .name == "getAudioSessionId", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioRecord\0", "getAudioSessionId\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [startRecording](https://developer.android.com/reference/android/media/AudioRecord.html#startRecording())
        pub fn startRecording<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioRecord", java.flags == PUBLIC, .name == "startRecording", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioRecord\0", "startRecording\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [startRecording](https://developer.android.com/reference/android/media/AudioRecord.html#startRecording(android.media.MediaSyncEvent))
        ///
        /// Required features: "android-media-MediaSyncEvent"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaSyncEvent")))]
        pub fn startRecording_MediaSyncEvent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaSyncEvent>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioRecord", java.flags == PUBLIC, .name == "startRecording", .descriptor == "(Landroid/media/MediaSyncEvent;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioRecord\0", "startRecording\0", "(Landroid/media/MediaSyncEvent;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [stop](https://developer.android.com/reference/android/media/AudioRecord.html#stop())
        pub fn stop<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioRecord", java.flags == PUBLIC, .name == "stop", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioRecord\0", "stop\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [read](https://developer.android.com/reference/android/media/AudioRecord.html#read(byte%5B%5D,%20int,%20int))
        pub fn read_byte_array_int_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioRecord", java.flags == PUBLIC, .name == "read", .descriptor == "([BII)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioRecord\0", "read\0", "([BII)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [read](https://developer.android.com/reference/android/media/AudioRecord.html#read(byte%5B%5D,%20int,%20int,%20int))
        pub fn read_byte_array_int_int_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>, arg1: i32, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioRecord", java.flags == PUBLIC, .name == "read", .descriptor == "([BIII)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioRecord\0", "read\0", "([BIII)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [read](https://developer.android.com/reference/android/media/AudioRecord.html#read(short%5B%5D,%20int,%20int))
        pub fn read_short_array_int_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ShortArray>>, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioRecord", java.flags == PUBLIC, .name == "read", .descriptor == "([SII)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioRecord\0", "read\0", "([SII)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [read](https://developer.android.com/reference/android/media/AudioRecord.html#read(short%5B%5D,%20int,%20int,%20int))
        pub fn read_short_array_int_int_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ShortArray>>, arg1: i32, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioRecord", java.flags == PUBLIC, .name == "read", .descriptor == "([SIII)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioRecord\0", "read\0", "([SIII)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [read](https://developer.android.com/reference/android/media/AudioRecord.html#read(float%5B%5D,%20int,%20int,%20int))
        pub fn read_float_array_int_int_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>, arg1: i32, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioRecord", java.flags == PUBLIC, .name == "read", .descriptor == "([FIII)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioRecord\0", "read\0", "([FIII)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [read](https://developer.android.com/reference/android/media/AudioRecord.html#read(java.nio.ByteBuffer,%20int))
        ///
        /// Required features: "java-nio-ByteBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-ByteBuffer")))]
        pub fn read_ByteBuffer_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::ByteBuffer>>, arg1: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioRecord", java.flags == PUBLIC, .name == "read", .descriptor == "(Ljava/nio/ByteBuffer;I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioRecord\0", "read\0", "(Ljava/nio/ByteBuffer;I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [read](https://developer.android.com/reference/android/media/AudioRecord.html#read(java.nio.ByteBuffer,%20int,%20int))
        ///
        /// Required features: "java-nio-ByteBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-ByteBuffer")))]
        pub fn read_ByteBuffer_int_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::ByteBuffer>>, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioRecord", java.flags == PUBLIC, .name == "read", .descriptor == "(Ljava/nio/ByteBuffer;II)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioRecord\0", "read\0", "(Ljava/nio/ByteBuffer;II)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMetrics](https://developer.android.com/reference/android/media/AudioRecord.html#getMetrics())
        ///
        /// Required features: "android-os-PersistableBundle"
        #[cfg(any(feature = "all", all(feature = "android-os-PersistableBundle")))]
        pub fn getMetrics<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::PersistableBundle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioRecord", java.flags == PUBLIC, .name == "getMetrics", .descriptor == "()Landroid/os/PersistableBundle;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioRecord\0", "getMetrics\0", "()Landroid/os/PersistableBundle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setRecordPositionUpdateListener](https://developer.android.com/reference/android/media/AudioRecord.html#setRecordPositionUpdateListener(android.media.AudioRecord.OnRecordPositionUpdateListener))
        ///
        /// Required features: "android-media-AudioRecord_OnRecordPositionUpdateListener"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioRecord_OnRecordPositionUpdateListener")))]
        pub fn setRecordPositionUpdateListener_OnRecordPositionUpdateListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::AudioRecord_OnRecordPositionUpdateListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioRecord", java.flags == PUBLIC, .name == "setRecordPositionUpdateListener", .descriptor == "(Landroid/media/AudioRecord$OnRecordPositionUpdateListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioRecord\0", "setRecordPositionUpdateListener\0", "(Landroid/media/AudioRecord$OnRecordPositionUpdateListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setRecordPositionUpdateListener](https://developer.android.com/reference/android/media/AudioRecord.html#setRecordPositionUpdateListener(android.media.AudioRecord.OnRecordPositionUpdateListener,%20android.os.Handler))
        ///
        /// Required features: "android-media-AudioRecord_OnRecordPositionUpdateListener", "android-os-Handler"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioRecord_OnRecordPositionUpdateListener", feature = "android-os-Handler")))]
        pub fn setRecordPositionUpdateListener_OnRecordPositionUpdateListener_Handler<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::AudioRecord_OnRecordPositionUpdateListener>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioRecord", java.flags == PUBLIC, .name == "setRecordPositionUpdateListener", .descriptor == "(Landroid/media/AudioRecord$OnRecordPositionUpdateListener;Landroid/os/Handler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioRecord\0", "setRecordPositionUpdateListener\0", "(Landroid/media/AudioRecord$OnRecordPositionUpdateListener;Landroid/os/Handler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setNotificationMarkerPosition](https://developer.android.com/reference/android/media/AudioRecord.html#setNotificationMarkerPosition(int))
        pub fn setNotificationMarkerPosition<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioRecord", java.flags == PUBLIC, .name == "setNotificationMarkerPosition", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioRecord\0", "setNotificationMarkerPosition\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRoutedDevice](https://developer.android.com/reference/android/media/AudioRecord.html#getRoutedDevice())
        ///
        /// Required features: "android-media-AudioDeviceInfo"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioDeviceInfo")))]
        pub fn getRoutedDevice<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::AudioDeviceInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioRecord", java.flags == PUBLIC, .name == "getRoutedDevice", .descriptor == "()Landroid/media/AudioDeviceInfo;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioRecord\0", "getRoutedDevice\0", "()Landroid/media/AudioDeviceInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addOnRoutingChangedListener](https://developer.android.com/reference/android/media/AudioRecord.html#addOnRoutingChangedListener(android.media.AudioRouting.OnRoutingChangedListener,%20android.os.Handler))
        ///
        /// Required features: "android-media-AudioRouting_OnRoutingChangedListener", "android-os-Handler"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioRouting_OnRoutingChangedListener", feature = "android-os-Handler")))]
        pub fn addOnRoutingChangedListener_AudioRouting_Handler<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::AudioRouting_OnRoutingChangedListener>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioRecord", java.flags == PUBLIC, .name == "addOnRoutingChangedListener", .descriptor == "(Landroid/media/AudioRouting$OnRoutingChangedListener;Landroid/os/Handler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioRecord\0", "addOnRoutingChangedListener\0", "(Landroid/media/AudioRouting$OnRoutingChangedListener;Landroid/os/Handler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeOnRoutingChangedListener](https://developer.android.com/reference/android/media/AudioRecord.html#removeOnRoutingChangedListener(android.media.AudioRouting.OnRoutingChangedListener))
        ///
        /// Required features: "android-media-AudioRouting_OnRoutingChangedListener"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioRouting_OnRoutingChangedListener")))]
        pub fn removeOnRoutingChangedListener_AudioRouting<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::AudioRouting_OnRoutingChangedListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioRecord", java.flags == PUBLIC, .name == "removeOnRoutingChangedListener", .descriptor == "(Landroid/media/AudioRouting$OnRoutingChangedListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioRecord\0", "removeOnRoutingChangedListener\0", "(Landroid/media/AudioRouting$OnRoutingChangedListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addOnRoutingChangedListener](https://developer.android.com/reference/android/media/AudioRecord.html#addOnRoutingChangedListener(android.media.AudioRecord.OnRoutingChangedListener,%20android.os.Handler))
        ///
        /// Required features: "android-media-AudioRecord_OnRoutingChangedListener", "android-os-Handler"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioRecord_OnRoutingChangedListener", feature = "android-os-Handler")))]
        #[deprecated] pub fn addOnRoutingChangedListener_OnRoutingChangedListener_Handler<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::AudioRecord_OnRoutingChangedListener>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioRecord", java.flags == PUBLIC, .name == "addOnRoutingChangedListener", .descriptor == "(Landroid/media/AudioRecord$OnRoutingChangedListener;Landroid/os/Handler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioRecord\0", "addOnRoutingChangedListener\0", "(Landroid/media/AudioRecord$OnRoutingChangedListener;Landroid/os/Handler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeOnRoutingChangedListener](https://developer.android.com/reference/android/media/AudioRecord.html#removeOnRoutingChangedListener(android.media.AudioRecord.OnRoutingChangedListener))
        ///
        /// Required features: "android-media-AudioRecord_OnRoutingChangedListener"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioRecord_OnRoutingChangedListener")))]
        #[deprecated] pub fn removeOnRoutingChangedListener_OnRoutingChangedListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::AudioRecord_OnRoutingChangedListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioRecord", java.flags == PUBLIC, .name == "removeOnRoutingChangedListener", .descriptor == "(Landroid/media/AudioRecord$OnRoutingChangedListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioRecord\0", "removeOnRoutingChangedListener\0", "(Landroid/media/AudioRecord$OnRoutingChangedListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPositionNotificationPeriod](https://developer.android.com/reference/android/media/AudioRecord.html#setPositionNotificationPeriod(int))
        pub fn setPositionNotificationPeriod<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioRecord", java.flags == PUBLIC, .name == "setPositionNotificationPeriod", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioRecord\0", "setPositionNotificationPeriod\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPreferredDevice](https://developer.android.com/reference/android/media/AudioRecord.html#setPreferredDevice(android.media.AudioDeviceInfo))
        ///
        /// Required features: "android-media-AudioDeviceInfo"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioDeviceInfo")))]
        pub fn setPreferredDevice<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::AudioDeviceInfo>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioRecord", java.flags == PUBLIC, .name == "setPreferredDevice", .descriptor == "(Landroid/media/AudioDeviceInfo;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioRecord\0", "setPreferredDevice\0", "(Landroid/media/AudioDeviceInfo;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPreferredDevice](https://developer.android.com/reference/android/media/AudioRecord.html#getPreferredDevice())
        ///
        /// Required features: "android-media-AudioDeviceInfo"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioDeviceInfo")))]
        pub fn getPreferredDevice<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::AudioDeviceInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioRecord", java.flags == PUBLIC, .name == "getPreferredDevice", .descriptor == "()Landroid/media/AudioDeviceInfo;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioRecord\0", "getPreferredDevice\0", "()Landroid/media/AudioDeviceInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getActiveMicrophones](https://developer.android.com/reference/android/media/AudioRecord.html#getActiveMicrophones())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getActiveMicrophones<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioRecord", java.flags == PUBLIC, .name == "getActiveMicrophones", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioRecord\0", "getActiveMicrophones\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [registerAudioRecordingCallback](https://developer.android.com/reference/android/media/AudioRecord.html#registerAudioRecordingCallback(java.util.concurrent.Executor,%20android.media.AudioManager.AudioRecordingCallback))
        ///
        /// Required features: "android-media-AudioManager_AudioRecordingCallback", "java-util-concurrent-Executor"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioManager_AudioRecordingCallback", feature = "java-util-concurrent-Executor")))]
        pub fn registerAudioRecordingCallback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::AudioManager_AudioRecordingCallback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioRecord", java.flags == PUBLIC, .name == "registerAudioRecordingCallback", .descriptor == "(Ljava/util/concurrent/Executor;Landroid/media/AudioManager$AudioRecordingCallback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioRecord\0", "registerAudioRecordingCallback\0", "(Ljava/util/concurrent/Executor;Landroid/media/AudioManager$AudioRecordingCallback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unregisterAudioRecordingCallback](https://developer.android.com/reference/android/media/AudioRecord.html#unregisterAudioRecordingCallback(android.media.AudioManager.AudioRecordingCallback))
        ///
        /// Required features: "android-media-AudioManager_AudioRecordingCallback"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioManager_AudioRecordingCallback")))]
        pub fn unregisterAudioRecordingCallback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::AudioManager_AudioRecordingCallback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioRecord", java.flags == PUBLIC, .name == "unregisterAudioRecordingCallback", .descriptor == "(Landroid/media/AudioManager$AudioRecordingCallback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioRecord\0", "unregisterAudioRecordingCallback\0", "(Landroid/media/AudioManager$AudioRecordingCallback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getActiveRecordingConfiguration](https://developer.android.com/reference/android/media/AudioRecord.html#getActiveRecordingConfiguration())
        ///
        /// Required features: "android-media-AudioRecordingConfiguration"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioRecordingConfiguration")))]
        pub fn getActiveRecordingConfiguration<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::AudioRecordingConfiguration>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioRecord", java.flags == PUBLIC, .name == "getActiveRecordingConfiguration", .descriptor == "()Landroid/media/AudioRecordingConfiguration;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioRecord\0", "getActiveRecordingConfiguration\0", "()Landroid/media/AudioRecordingConfiguration;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPreferredMicrophoneDirection](https://developer.android.com/reference/android/media/AudioRecord.html#setPreferredMicrophoneDirection(int))
        pub fn setPreferredMicrophoneDirection<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioRecord", java.flags == PUBLIC, .name == "setPreferredMicrophoneDirection", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioRecord\0", "setPreferredMicrophoneDirection\0", "(I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPreferredMicrophoneFieldDimension](https://developer.android.com/reference/android/media/AudioRecord.html#setPreferredMicrophoneFieldDimension(float))
        pub fn setPreferredMicrophoneFieldDimension<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioRecord", java.flags == PUBLIC, .name == "setPreferredMicrophoneFieldDimension", .descriptor == "(F)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioRecord\0", "setPreferredMicrophoneFieldDimension\0", "(F)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [ERROR](https://developer.android.com/reference/android/media/AudioRecord.html#ERROR)
        pub const ERROR : i32 = -1;

        /// public static final [ERROR_BAD_VALUE](https://developer.android.com/reference/android/media/AudioRecord.html#ERROR_BAD_VALUE)
        pub const ERROR_BAD_VALUE : i32 = -2;

        /// public static final [ERROR_DEAD_OBJECT](https://developer.android.com/reference/android/media/AudioRecord.html#ERROR_DEAD_OBJECT)
        pub const ERROR_DEAD_OBJECT : i32 = -6;

        /// public static final [ERROR_INVALID_OPERATION](https://developer.android.com/reference/android/media/AudioRecord.html#ERROR_INVALID_OPERATION)
        pub const ERROR_INVALID_OPERATION : i32 = -3;

        /// public static final [READ_BLOCKING](https://developer.android.com/reference/android/media/AudioRecord.html#READ_BLOCKING)
        pub const READ_BLOCKING : i32 = 0;

        /// public static final [READ_NON_BLOCKING](https://developer.android.com/reference/android/media/AudioRecord.html#READ_NON_BLOCKING)
        pub const READ_NON_BLOCKING : i32 = 1;

        /// public static final [RECORDSTATE_RECORDING](https://developer.android.com/reference/android/media/AudioRecord.html#RECORDSTATE_RECORDING)
        pub const RECORDSTATE_RECORDING : i32 = 3;

        /// public static final [RECORDSTATE_STOPPED](https://developer.android.com/reference/android/media/AudioRecord.html#RECORDSTATE_STOPPED)
        pub const RECORDSTATE_STOPPED : i32 = 1;

        /// public static final [STATE_INITIALIZED](https://developer.android.com/reference/android/media/AudioRecord.html#STATE_INITIALIZED)
        pub const STATE_INITIALIZED : i32 = 1;

        /// public static final [STATE_UNINITIALIZED](https://developer.android.com/reference/android/media/AudioRecord.html#STATE_UNINITIALIZED)
        pub const STATE_UNINITIALIZED : i32 = 0;

        /// public static final [SUCCESS](https://developer.android.com/reference/android/media/AudioRecord.html#SUCCESS)
        pub const SUCCESS : i32 = 0;
    }
}
