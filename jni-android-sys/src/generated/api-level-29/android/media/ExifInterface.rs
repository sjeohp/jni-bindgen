// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-media-ExifInterface"))]
__jni_bindgen! {
    /// public class [ExifInterface](https://developer.android.com/reference/android/media/ExifInterface.html)
    ///
    /// Required feature: android-media-ExifInterface
    public class ExifInterface ("android/media/ExifInterface") extends crate::java::lang::Object {

        /// [ExifInterface](https://developer.android.com/reference/android/media/ExifInterface.html#ExifInterface(java.io.File))
        ///
        /// Required features: "java-io-File"
        #[cfg(any(feature = "all", all(feature = "java-io-File")))]
        pub fn new_File<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::File>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::media::ExifInterface>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/ExifInterface", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/io/File;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/ExifInterface\0", "<init>\0", "(Ljava/io/File;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ExifInterface](https://developer.android.com/reference/android/media/ExifInterface.html#ExifInterface(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn new_String<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::media::ExifInterface>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/ExifInterface", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/ExifInterface\0", "<init>\0", "(Ljava/lang/String;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ExifInterface](https://developer.android.com/reference/android/media/ExifInterface.html#ExifInterface(java.io.FileDescriptor))
        ///
        /// Required features: "java-io-FileDescriptor"
        #[cfg(any(feature = "all", all(feature = "java-io-FileDescriptor")))]
        pub fn new_FileDescriptor<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::FileDescriptor>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::media::ExifInterface>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/ExifInterface", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/io/FileDescriptor;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/ExifInterface\0", "<init>\0", "(Ljava/io/FileDescriptor;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ExifInterface](https://developer.android.com/reference/android/media/ExifInterface.html#ExifInterface(java.io.InputStream))
        ///
        /// Required features: "java-io-InputStream"
        #[cfg(any(feature = "all", all(feature = "java-io-InputStream")))]
        pub fn new_InputStream<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::InputStream>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::media::ExifInterface>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/ExifInterface", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/io/InputStream;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/ExifInterface\0", "<init>\0", "(Ljava/io/InputStream;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAttribute](https://developer.android.com/reference/android/media/ExifInterface.html#getAttribute(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getAttribute<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/ExifInterface", java.flags == PUBLIC, .name == "getAttribute", .descriptor == "(Ljava/lang/String;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/ExifInterface\0", "getAttribute\0", "(Ljava/lang/String;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAttributeInt](https://developer.android.com/reference/android/media/ExifInterface.html#getAttributeInt(java.lang.String,%20int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getAttributeInt<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/ExifInterface", java.flags == PUBLIC, .name == "getAttributeInt", .descriptor == "(Ljava/lang/String;I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/ExifInterface\0", "getAttributeInt\0", "(Ljava/lang/String;I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAttributeDouble](https://developer.android.com/reference/android/media/ExifInterface.html#getAttributeDouble(java.lang.String,%20double))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getAttributeDouble<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: f64) -> __jni_bindgen::std::result::Result<f64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/ExifInterface", java.flags == PUBLIC, .name == "getAttributeDouble", .descriptor == "(Ljava/lang/String;D)D"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/ExifInterface\0", "getAttributeDouble\0", "(Ljava/lang/String;D)D\0");
                __jni_env.call_double_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAttribute](https://developer.android.com/reference/android/media/ExifInterface.html#setAttribute(java.lang.String,%20java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn setAttribute<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/ExifInterface", java.flags == PUBLIC, .name == "setAttribute", .descriptor == "(Ljava/lang/String;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/ExifInterface\0", "setAttribute\0", "(Ljava/lang/String;Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [saveAttributes](https://developer.android.com/reference/android/media/ExifInterface.html#saveAttributes())
        pub fn saveAttributes<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/ExifInterface", java.flags == PUBLIC, .name == "saveAttributes", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/ExifInterface\0", "saveAttributes\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasThumbnail](https://developer.android.com/reference/android/media/ExifInterface.html#hasThumbnail())
        pub fn hasThumbnail<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/ExifInterface", java.flags == PUBLIC, .name == "hasThumbnail", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/ExifInterface\0", "hasThumbnail\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasAttribute](https://developer.android.com/reference/android/media/ExifInterface.html#hasAttribute(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn hasAttribute<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/ExifInterface", java.flags == PUBLIC, .name == "hasAttribute", .descriptor == "(Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/ExifInterface\0", "hasAttribute\0", "(Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getThumbnail](https://developer.android.com/reference/android/media/ExifInterface.html#getThumbnail())
        pub fn getThumbnail<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ByteArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/ExifInterface", java.flags == PUBLIC, .name == "getThumbnail", .descriptor == "()[B"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/ExifInterface\0", "getThumbnail\0", "()[B\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getThumbnailBytes](https://developer.android.com/reference/android/media/ExifInterface.html#getThumbnailBytes())
        pub fn getThumbnailBytes<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ByteArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/ExifInterface", java.flags == PUBLIC, .name == "getThumbnailBytes", .descriptor == "()[B"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/ExifInterface\0", "getThumbnailBytes\0", "()[B\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getThumbnailBitmap](https://developer.android.com/reference/android/media/ExifInterface.html#getThumbnailBitmap())
        ///
        /// Required features: "android-graphics-Bitmap"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Bitmap")))]
        pub fn getThumbnailBitmap<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Bitmap>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/ExifInterface", java.flags == PUBLIC, .name == "getThumbnailBitmap", .descriptor == "()Landroid/graphics/Bitmap;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/ExifInterface\0", "getThumbnailBitmap\0", "()Landroid/graphics/Bitmap;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isThumbnailCompressed](https://developer.android.com/reference/android/media/ExifInterface.html#isThumbnailCompressed())
        pub fn isThumbnailCompressed<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/ExifInterface", java.flags == PUBLIC, .name == "isThumbnailCompressed", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/ExifInterface\0", "isThumbnailCompressed\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getThumbnailRange](https://developer.android.com/reference/android/media/ExifInterface.html#getThumbnailRange())
        pub fn getThumbnailRange<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::LongArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/ExifInterface", java.flags == PUBLIC, .name == "getThumbnailRange", .descriptor == "()[J"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/ExifInterface\0", "getThumbnailRange\0", "()[J\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAttributeRange](https://developer.android.com/reference/android/media/ExifInterface.html#getAttributeRange(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getAttributeRange<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::LongArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/ExifInterface", java.flags == PUBLIC, .name == "getAttributeRange", .descriptor == "(Ljava/lang/String;)[J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/ExifInterface\0", "getAttributeRange\0", "(Ljava/lang/String;)[J\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAttributeBytes](https://developer.android.com/reference/android/media/ExifInterface.html#getAttributeBytes(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getAttributeBytes<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ByteArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/ExifInterface", java.flags == PUBLIC, .name == "getAttributeBytes", .descriptor == "(Ljava/lang/String;)[B"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/ExifInterface\0", "getAttributeBytes\0", "(Ljava/lang/String;)[B\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLatLong](https://developer.android.com/reference/android/media/ExifInterface.html#getLatLong(float%5B%5D))
        pub fn getLatLong<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/ExifInterface", java.flags == PUBLIC, .name == "getLatLong", .descriptor == "([F)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/ExifInterface\0", "getLatLong\0", "([F)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAltitude](https://developer.android.com/reference/android/media/ExifInterface.html#getAltitude(double))
        pub fn getAltitude<'env>(&'env self, arg0: f64) -> __jni_bindgen::std::result::Result<f64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/ExifInterface", java.flags == PUBLIC, .name == "getAltitude", .descriptor == "(D)D"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/ExifInterface\0", "getAltitude\0", "(D)D\0");
                __jni_env.call_double_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [ORIENTATION_FLIP_HORIZONTAL](https://developer.android.com/reference/android/media/ExifInterface.html#ORIENTATION_FLIP_HORIZONTAL)
        pub const ORIENTATION_FLIP_HORIZONTAL : i32 = 2;

        /// public static final [ORIENTATION_FLIP_VERTICAL](https://developer.android.com/reference/android/media/ExifInterface.html#ORIENTATION_FLIP_VERTICAL)
        pub const ORIENTATION_FLIP_VERTICAL : i32 = 4;

        /// public static final [ORIENTATION_NORMAL](https://developer.android.com/reference/android/media/ExifInterface.html#ORIENTATION_NORMAL)
        pub const ORIENTATION_NORMAL : i32 = 1;

        /// public static final [ORIENTATION_ROTATE_180](https://developer.android.com/reference/android/media/ExifInterface.html#ORIENTATION_ROTATE_180)
        pub const ORIENTATION_ROTATE_180 : i32 = 3;

        /// public static final [ORIENTATION_ROTATE_270](https://developer.android.com/reference/android/media/ExifInterface.html#ORIENTATION_ROTATE_270)
        pub const ORIENTATION_ROTATE_270 : i32 = 8;

        /// public static final [ORIENTATION_ROTATE_90](https://developer.android.com/reference/android/media/ExifInterface.html#ORIENTATION_ROTATE_90)
        pub const ORIENTATION_ROTATE_90 : i32 = 6;

        /// public static final [ORIENTATION_TRANSPOSE](https://developer.android.com/reference/android/media/ExifInterface.html#ORIENTATION_TRANSPOSE)
        pub const ORIENTATION_TRANSPOSE : i32 = 5;

        /// public static final [ORIENTATION_TRANSVERSE](https://developer.android.com/reference/android/media/ExifInterface.html#ORIENTATION_TRANSVERSE)
        pub const ORIENTATION_TRANSVERSE : i32 = 7;

        /// public static final [ORIENTATION_UNDEFINED](https://developer.android.com/reference/android/media/ExifInterface.html#ORIENTATION_UNDEFINED)
        pub const ORIENTATION_UNDEFINED : i32 = 0;

        /// public static final [TAG_APERTURE](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_APERTURE)
        #[deprecated] pub const TAG_APERTURE : &'static str = "FNumber";

        /// public static final [TAG_APERTURE_VALUE](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_APERTURE_VALUE)
        pub const TAG_APERTURE_VALUE : &'static str = "ApertureValue";

        /// public static final [TAG_ARTIST](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_ARTIST)
        pub const TAG_ARTIST : &'static str = "Artist";

        /// public static final [TAG_BITS_PER_SAMPLE](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_BITS_PER_SAMPLE)
        pub const TAG_BITS_PER_SAMPLE : &'static str = "BitsPerSample";

        /// public static final [TAG_BRIGHTNESS_VALUE](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_BRIGHTNESS_VALUE)
        pub const TAG_BRIGHTNESS_VALUE : &'static str = "BrightnessValue";

        /// public static final [TAG_CFA_PATTERN](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_CFA_PATTERN)
        pub const TAG_CFA_PATTERN : &'static str = "CFAPattern";

        /// public static final [TAG_COLOR_SPACE](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_COLOR_SPACE)
        pub const TAG_COLOR_SPACE : &'static str = "ColorSpace";

        /// public static final [TAG_COMPONENTS_CONFIGURATION](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_COMPONENTS_CONFIGURATION)
        pub const TAG_COMPONENTS_CONFIGURATION : &'static str = "ComponentsConfiguration";

        /// public static final [TAG_COMPRESSED_BITS_PER_PIXEL](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_COMPRESSED_BITS_PER_PIXEL)
        pub const TAG_COMPRESSED_BITS_PER_PIXEL : &'static str = "CompressedBitsPerPixel";

        /// public static final [TAG_COMPRESSION](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_COMPRESSION)
        pub const TAG_COMPRESSION : &'static str = "Compression";

        /// public static final [TAG_CONTRAST](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_CONTRAST)
        pub const TAG_CONTRAST : &'static str = "Contrast";

        /// public static final [TAG_COPYRIGHT](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_COPYRIGHT)
        pub const TAG_COPYRIGHT : &'static str = "Copyright";

        /// public static final [TAG_CUSTOM_RENDERED](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_CUSTOM_RENDERED)
        pub const TAG_CUSTOM_RENDERED : &'static str = "CustomRendered";

        /// public static final [TAG_DATETIME](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_DATETIME)
        pub const TAG_DATETIME : &'static str = "DateTime";

        /// public static final [TAG_DATETIME_DIGITIZED](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_DATETIME_DIGITIZED)
        pub const TAG_DATETIME_DIGITIZED : &'static str = "DateTimeDigitized";

        /// public static final [TAG_DATETIME_ORIGINAL](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_DATETIME_ORIGINAL)
        pub const TAG_DATETIME_ORIGINAL : &'static str = "DateTimeOriginal";

        /// public static final [TAG_DEFAULT_CROP_SIZE](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_DEFAULT_CROP_SIZE)
        pub const TAG_DEFAULT_CROP_SIZE : &'static str = "DefaultCropSize";

        /// public static final [TAG_DEVICE_SETTING_DESCRIPTION](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_DEVICE_SETTING_DESCRIPTION)
        pub const TAG_DEVICE_SETTING_DESCRIPTION : &'static str = "DeviceSettingDescription";

        /// public static final [TAG_DIGITAL_ZOOM_RATIO](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_DIGITAL_ZOOM_RATIO)
        pub const TAG_DIGITAL_ZOOM_RATIO : &'static str = "DigitalZoomRatio";

        /// public static final [TAG_DNG_VERSION](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_DNG_VERSION)
        pub const TAG_DNG_VERSION : &'static str = "DNGVersion";

        /// public static final [TAG_EXIF_VERSION](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_EXIF_VERSION)
        pub const TAG_EXIF_VERSION : &'static str = "ExifVersion";

        /// public static final [TAG_EXPOSURE_BIAS_VALUE](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_EXPOSURE_BIAS_VALUE)
        pub const TAG_EXPOSURE_BIAS_VALUE : &'static str = "ExposureBiasValue";

        /// public static final [TAG_EXPOSURE_INDEX](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_EXPOSURE_INDEX)
        pub const TAG_EXPOSURE_INDEX : &'static str = "ExposureIndex";

        /// public static final [TAG_EXPOSURE_MODE](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_EXPOSURE_MODE)
        pub const TAG_EXPOSURE_MODE : &'static str = "ExposureMode";

        /// public static final [TAG_EXPOSURE_PROGRAM](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_EXPOSURE_PROGRAM)
        pub const TAG_EXPOSURE_PROGRAM : &'static str = "ExposureProgram";

        /// public static final [TAG_EXPOSURE_TIME](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_EXPOSURE_TIME)
        pub const TAG_EXPOSURE_TIME : &'static str = "ExposureTime";

        /// public static final [TAG_FILE_SOURCE](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_FILE_SOURCE)
        pub const TAG_FILE_SOURCE : &'static str = "FileSource";

        /// public static final [TAG_FLASH](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_FLASH)
        pub const TAG_FLASH : &'static str = "Flash";

        /// public static final [TAG_FLASHPIX_VERSION](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_FLASHPIX_VERSION)
        pub const TAG_FLASHPIX_VERSION : &'static str = "FlashpixVersion";

        /// public static final [TAG_FLASH_ENERGY](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_FLASH_ENERGY)
        pub const TAG_FLASH_ENERGY : &'static str = "FlashEnergy";

        /// public static final [TAG_FOCAL_LENGTH](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_FOCAL_LENGTH)
        pub const TAG_FOCAL_LENGTH : &'static str = "FocalLength";

        /// public static final [TAG_FOCAL_LENGTH_IN_35MM_FILM](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_FOCAL_LENGTH_IN_35MM_FILM)
        pub const TAG_FOCAL_LENGTH_IN_35MM_FILM : &'static str = "FocalLengthIn35mmFilm";

        /// public static final [TAG_FOCAL_PLANE_RESOLUTION_UNIT](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_FOCAL_PLANE_RESOLUTION_UNIT)
        pub const TAG_FOCAL_PLANE_RESOLUTION_UNIT : &'static str = "FocalPlaneResolutionUnit";

        /// public static final [TAG_FOCAL_PLANE_X_RESOLUTION](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_FOCAL_PLANE_X_RESOLUTION)
        pub const TAG_FOCAL_PLANE_X_RESOLUTION : &'static str = "FocalPlaneXResolution";

        /// public static final [TAG_FOCAL_PLANE_Y_RESOLUTION](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_FOCAL_PLANE_Y_RESOLUTION)
        pub const TAG_FOCAL_PLANE_Y_RESOLUTION : &'static str = "FocalPlaneYResolution";

        /// public static final [TAG_F_NUMBER](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_F_NUMBER)
        pub const TAG_F_NUMBER : &'static str = "FNumber";

        /// public static final [TAG_GAIN_CONTROL](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_GAIN_CONTROL)
        pub const TAG_GAIN_CONTROL : &'static str = "GainControl";

        /// public static final [TAG_GPS_ALTITUDE](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_GPS_ALTITUDE)
        pub const TAG_GPS_ALTITUDE : &'static str = "GPSAltitude";

        /// public static final [TAG_GPS_ALTITUDE_REF](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_GPS_ALTITUDE_REF)
        pub const TAG_GPS_ALTITUDE_REF : &'static str = "GPSAltitudeRef";

        /// public static final [TAG_GPS_AREA_INFORMATION](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_GPS_AREA_INFORMATION)
        pub const TAG_GPS_AREA_INFORMATION : &'static str = "GPSAreaInformation";

        /// public static final [TAG_GPS_DATESTAMP](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_GPS_DATESTAMP)
        pub const TAG_GPS_DATESTAMP : &'static str = "GPSDateStamp";

        /// public static final [TAG_GPS_DEST_BEARING](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_GPS_DEST_BEARING)
        pub const TAG_GPS_DEST_BEARING : &'static str = "GPSDestBearing";

        /// public static final [TAG_GPS_DEST_BEARING_REF](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_GPS_DEST_BEARING_REF)
        pub const TAG_GPS_DEST_BEARING_REF : &'static str = "GPSDestBearingRef";

        /// public static final [TAG_GPS_DEST_DISTANCE](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_GPS_DEST_DISTANCE)
        pub const TAG_GPS_DEST_DISTANCE : &'static str = "GPSDestDistance";

        /// public static final [TAG_GPS_DEST_DISTANCE_REF](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_GPS_DEST_DISTANCE_REF)
        pub const TAG_GPS_DEST_DISTANCE_REF : &'static str = "GPSDestDistanceRef";

        /// public static final [TAG_GPS_DEST_LATITUDE](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_GPS_DEST_LATITUDE)
        pub const TAG_GPS_DEST_LATITUDE : &'static str = "GPSDestLatitude";

        /// public static final [TAG_GPS_DEST_LATITUDE_REF](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_GPS_DEST_LATITUDE_REF)
        pub const TAG_GPS_DEST_LATITUDE_REF : &'static str = "GPSDestLatitudeRef";

        /// public static final [TAG_GPS_DEST_LONGITUDE](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_GPS_DEST_LONGITUDE)
        pub const TAG_GPS_DEST_LONGITUDE : &'static str = "GPSDestLongitude";

        /// public static final [TAG_GPS_DEST_LONGITUDE_REF](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_GPS_DEST_LONGITUDE_REF)
        pub const TAG_GPS_DEST_LONGITUDE_REF : &'static str = "GPSDestLongitudeRef";

        /// public static final [TAG_GPS_DIFFERENTIAL](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_GPS_DIFFERENTIAL)
        pub const TAG_GPS_DIFFERENTIAL : &'static str = "GPSDifferential";

        /// public static final [TAG_GPS_DOP](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_GPS_DOP)
        pub const TAG_GPS_DOP : &'static str = "GPSDOP";

        /// public static final [TAG_GPS_IMG_DIRECTION](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_GPS_IMG_DIRECTION)
        pub const TAG_GPS_IMG_DIRECTION : &'static str = "GPSImgDirection";

        /// public static final [TAG_GPS_IMG_DIRECTION_REF](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_GPS_IMG_DIRECTION_REF)
        pub const TAG_GPS_IMG_DIRECTION_REF : &'static str = "GPSImgDirectionRef";

        /// public static final [TAG_GPS_LATITUDE](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_GPS_LATITUDE)
        pub const TAG_GPS_LATITUDE : &'static str = "GPSLatitude";

        /// public static final [TAG_GPS_LATITUDE_REF](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_GPS_LATITUDE_REF)
        pub const TAG_GPS_LATITUDE_REF : &'static str = "GPSLatitudeRef";

        /// public static final [TAG_GPS_LONGITUDE](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_GPS_LONGITUDE)
        pub const TAG_GPS_LONGITUDE : &'static str = "GPSLongitude";

        /// public static final [TAG_GPS_LONGITUDE_REF](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_GPS_LONGITUDE_REF)
        pub const TAG_GPS_LONGITUDE_REF : &'static str = "GPSLongitudeRef";

        /// public static final [TAG_GPS_MAP_DATUM](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_GPS_MAP_DATUM)
        pub const TAG_GPS_MAP_DATUM : &'static str = "GPSMapDatum";

        /// public static final [TAG_GPS_MEASURE_MODE](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_GPS_MEASURE_MODE)
        pub const TAG_GPS_MEASURE_MODE : &'static str = "GPSMeasureMode";

        /// public static final [TAG_GPS_PROCESSING_METHOD](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_GPS_PROCESSING_METHOD)
        pub const TAG_GPS_PROCESSING_METHOD : &'static str = "GPSProcessingMethod";

        /// public static final [TAG_GPS_SATELLITES](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_GPS_SATELLITES)
        pub const TAG_GPS_SATELLITES : &'static str = "GPSSatellites";

        /// public static final [TAG_GPS_SPEED](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_GPS_SPEED)
        pub const TAG_GPS_SPEED : &'static str = "GPSSpeed";

        /// public static final [TAG_GPS_SPEED_REF](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_GPS_SPEED_REF)
        pub const TAG_GPS_SPEED_REF : &'static str = "GPSSpeedRef";

        /// public static final [TAG_GPS_STATUS](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_GPS_STATUS)
        pub const TAG_GPS_STATUS : &'static str = "GPSStatus";

        /// public static final [TAG_GPS_TIMESTAMP](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_GPS_TIMESTAMP)
        pub const TAG_GPS_TIMESTAMP : &'static str = "GPSTimeStamp";

        /// public static final [TAG_GPS_TRACK](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_GPS_TRACK)
        pub const TAG_GPS_TRACK : &'static str = "GPSTrack";

        /// public static final [TAG_GPS_TRACK_REF](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_GPS_TRACK_REF)
        pub const TAG_GPS_TRACK_REF : &'static str = "GPSTrackRef";

        /// public static final [TAG_GPS_VERSION_ID](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_GPS_VERSION_ID)
        pub const TAG_GPS_VERSION_ID : &'static str = "GPSVersionID";

        /// public static final [TAG_IMAGE_DESCRIPTION](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_IMAGE_DESCRIPTION)
        pub const TAG_IMAGE_DESCRIPTION : &'static str = "ImageDescription";

        /// public static final [TAG_IMAGE_LENGTH](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_IMAGE_LENGTH)
        pub const TAG_IMAGE_LENGTH : &'static str = "ImageLength";

        /// public static final [TAG_IMAGE_UNIQUE_ID](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_IMAGE_UNIQUE_ID)
        pub const TAG_IMAGE_UNIQUE_ID : &'static str = "ImageUniqueID";

        /// public static final [TAG_IMAGE_WIDTH](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_IMAGE_WIDTH)
        pub const TAG_IMAGE_WIDTH : &'static str = "ImageWidth";

        /// public static final [TAG_INTEROPERABILITY_INDEX](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_INTEROPERABILITY_INDEX)
        pub const TAG_INTEROPERABILITY_INDEX : &'static str = "InteroperabilityIndex";

        /// public static final [TAG_ISO](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_ISO)
        #[deprecated] pub const TAG_ISO : &'static str = "ISOSpeedRatings";

        /// public static final [TAG_ISO_SPEED_RATINGS](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_ISO_SPEED_RATINGS)
        pub const TAG_ISO_SPEED_RATINGS : &'static str = "ISOSpeedRatings";

        /// public static final [TAG_JPEG_INTERCHANGE_FORMAT](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_JPEG_INTERCHANGE_FORMAT)
        pub const TAG_JPEG_INTERCHANGE_FORMAT : &'static str = "JPEGInterchangeFormat";

        /// public static final [TAG_JPEG_INTERCHANGE_FORMAT_LENGTH](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_JPEG_INTERCHANGE_FORMAT_LENGTH)
        pub const TAG_JPEG_INTERCHANGE_FORMAT_LENGTH : &'static str = "JPEGInterchangeFormatLength";

        /// public static final [TAG_LIGHT_SOURCE](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_LIGHT_SOURCE)
        pub const TAG_LIGHT_SOURCE : &'static str = "LightSource";

        /// public static final [TAG_MAKE](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_MAKE)
        pub const TAG_MAKE : &'static str = "Make";

        /// public static final [TAG_MAKER_NOTE](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_MAKER_NOTE)
        pub const TAG_MAKER_NOTE : &'static str = "MakerNote";

        /// public static final [TAG_MAX_APERTURE_VALUE](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_MAX_APERTURE_VALUE)
        pub const TAG_MAX_APERTURE_VALUE : &'static str = "MaxApertureValue";

        /// public static final [TAG_METERING_MODE](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_METERING_MODE)
        pub const TAG_METERING_MODE : &'static str = "MeteringMode";

        /// public static final [TAG_MODEL](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_MODEL)
        pub const TAG_MODEL : &'static str = "Model";

        /// public static final [TAG_NEW_SUBFILE_TYPE](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_NEW_SUBFILE_TYPE)
        pub const TAG_NEW_SUBFILE_TYPE : &'static str = "NewSubfileType";

        /// public static final [TAG_OECF](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_OECF)
        pub const TAG_OECF : &'static str = "OECF";

        /// public static final [TAG_ORF_ASPECT_FRAME](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_ORF_ASPECT_FRAME)
        pub const TAG_ORF_ASPECT_FRAME : &'static str = "AspectFrame";

        /// public static final [TAG_ORF_PREVIEW_IMAGE_LENGTH](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_ORF_PREVIEW_IMAGE_LENGTH)
        pub const TAG_ORF_PREVIEW_IMAGE_LENGTH : &'static str = "PreviewImageLength";

        /// public static final [TAG_ORF_PREVIEW_IMAGE_START](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_ORF_PREVIEW_IMAGE_START)
        pub const TAG_ORF_PREVIEW_IMAGE_START : &'static str = "PreviewImageStart";

        /// public static final [TAG_ORF_THUMBNAIL_IMAGE](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_ORF_THUMBNAIL_IMAGE)
        pub const TAG_ORF_THUMBNAIL_IMAGE : &'static str = "ThumbnailImage";

        /// public static final [TAG_ORIENTATION](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_ORIENTATION)
        pub const TAG_ORIENTATION : &'static str = "Orientation";

        /// public static final [TAG_PHOTOMETRIC_INTERPRETATION](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_PHOTOMETRIC_INTERPRETATION)
        pub const TAG_PHOTOMETRIC_INTERPRETATION : &'static str = "PhotometricInterpretation";

        /// public static final [TAG_PIXEL_X_DIMENSION](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_PIXEL_X_DIMENSION)
        pub const TAG_PIXEL_X_DIMENSION : &'static str = "PixelXDimension";

        /// public static final [TAG_PIXEL_Y_DIMENSION](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_PIXEL_Y_DIMENSION)
        pub const TAG_PIXEL_Y_DIMENSION : &'static str = "PixelYDimension";

        /// public static final [TAG_PLANAR_CONFIGURATION](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_PLANAR_CONFIGURATION)
        pub const TAG_PLANAR_CONFIGURATION : &'static str = "PlanarConfiguration";

        /// public static final [TAG_PRIMARY_CHROMATICITIES](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_PRIMARY_CHROMATICITIES)
        pub const TAG_PRIMARY_CHROMATICITIES : &'static str = "PrimaryChromaticities";

        /// public static final [TAG_REFERENCE_BLACK_WHITE](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_REFERENCE_BLACK_WHITE)
        pub const TAG_REFERENCE_BLACK_WHITE : &'static str = "ReferenceBlackWhite";

        /// public static final [TAG_RELATED_SOUND_FILE](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_RELATED_SOUND_FILE)
        pub const TAG_RELATED_SOUND_FILE : &'static str = "RelatedSoundFile";

        /// public static final [TAG_RESOLUTION_UNIT](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_RESOLUTION_UNIT)
        pub const TAG_RESOLUTION_UNIT : &'static str = "ResolutionUnit";

        /// public static final [TAG_ROWS_PER_STRIP](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_ROWS_PER_STRIP)
        pub const TAG_ROWS_PER_STRIP : &'static str = "RowsPerStrip";

        /// public static final [TAG_RW2_ISO](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_RW2_ISO)
        pub const TAG_RW2_ISO : &'static str = "ISO";

        /// public static final [TAG_RW2_JPG_FROM_RAW](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_RW2_JPG_FROM_RAW)
        pub const TAG_RW2_JPG_FROM_RAW : &'static str = "JpgFromRaw";

        /// public static final [TAG_RW2_SENSOR_BOTTOM_BORDER](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_RW2_SENSOR_BOTTOM_BORDER)
        pub const TAG_RW2_SENSOR_BOTTOM_BORDER : &'static str = "SensorBottomBorder";

        /// public static final [TAG_RW2_SENSOR_LEFT_BORDER](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_RW2_SENSOR_LEFT_BORDER)
        pub const TAG_RW2_SENSOR_LEFT_BORDER : &'static str = "SensorLeftBorder";

        /// public static final [TAG_RW2_SENSOR_RIGHT_BORDER](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_RW2_SENSOR_RIGHT_BORDER)
        pub const TAG_RW2_SENSOR_RIGHT_BORDER : &'static str = "SensorRightBorder";

        /// public static final [TAG_RW2_SENSOR_TOP_BORDER](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_RW2_SENSOR_TOP_BORDER)
        pub const TAG_RW2_SENSOR_TOP_BORDER : &'static str = "SensorTopBorder";

        /// public static final [TAG_SAMPLES_PER_PIXEL](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_SAMPLES_PER_PIXEL)
        pub const TAG_SAMPLES_PER_PIXEL : &'static str = "SamplesPerPixel";

        /// public static final [TAG_SATURATION](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_SATURATION)
        pub const TAG_SATURATION : &'static str = "Saturation";

        /// public static final [TAG_SCENE_CAPTURE_TYPE](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_SCENE_CAPTURE_TYPE)
        pub const TAG_SCENE_CAPTURE_TYPE : &'static str = "SceneCaptureType";

        /// public static final [TAG_SCENE_TYPE](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_SCENE_TYPE)
        pub const TAG_SCENE_TYPE : &'static str = "SceneType";

        /// public static final [TAG_SENSING_METHOD](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_SENSING_METHOD)
        pub const TAG_SENSING_METHOD : &'static str = "SensingMethod";

        /// public static final [TAG_SHARPNESS](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_SHARPNESS)
        pub const TAG_SHARPNESS : &'static str = "Sharpness";

        /// public static final [TAG_SHUTTER_SPEED_VALUE](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_SHUTTER_SPEED_VALUE)
        pub const TAG_SHUTTER_SPEED_VALUE : &'static str = "ShutterSpeedValue";

        /// public static final [TAG_SOFTWARE](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_SOFTWARE)
        pub const TAG_SOFTWARE : &'static str = "Software";

        /// public static final [TAG_SPATIAL_FREQUENCY_RESPONSE](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_SPATIAL_FREQUENCY_RESPONSE)
        pub const TAG_SPATIAL_FREQUENCY_RESPONSE : &'static str = "SpatialFrequencyResponse";

        /// public static final [TAG_SPECTRAL_SENSITIVITY](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_SPECTRAL_SENSITIVITY)
        pub const TAG_SPECTRAL_SENSITIVITY : &'static str = "SpectralSensitivity";

        /// public static final [TAG_STRIP_BYTE_COUNTS](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_STRIP_BYTE_COUNTS)
        pub const TAG_STRIP_BYTE_COUNTS : &'static str = "StripByteCounts";

        /// public static final [TAG_STRIP_OFFSETS](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_STRIP_OFFSETS)
        pub const TAG_STRIP_OFFSETS : &'static str = "StripOffsets";

        /// public static final [TAG_SUBFILE_TYPE](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_SUBFILE_TYPE)
        pub const TAG_SUBFILE_TYPE : &'static str = "SubfileType";

        /// public static final [TAG_SUBJECT_AREA](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_SUBJECT_AREA)
        pub const TAG_SUBJECT_AREA : &'static str = "SubjectArea";

        /// public static final [TAG_SUBJECT_DISTANCE](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_SUBJECT_DISTANCE)
        pub const TAG_SUBJECT_DISTANCE : &'static str = "SubjectDistance";

        /// public static final [TAG_SUBJECT_DISTANCE_RANGE](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_SUBJECT_DISTANCE_RANGE)
        pub const TAG_SUBJECT_DISTANCE_RANGE : &'static str = "SubjectDistanceRange";

        /// public static final [TAG_SUBJECT_LOCATION](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_SUBJECT_LOCATION)
        pub const TAG_SUBJECT_LOCATION : &'static str = "SubjectLocation";

        /// public static final [TAG_SUBSEC_TIME](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_SUBSEC_TIME)
        pub const TAG_SUBSEC_TIME : &'static str = "SubSecTime";

        /// public static final [TAG_SUBSEC_TIME_DIG](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_SUBSEC_TIME_DIG)
        #[deprecated] pub const TAG_SUBSEC_TIME_DIG : &'static str = "SubSecTimeDigitized";

        /// public static final [TAG_SUBSEC_TIME_DIGITIZED](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_SUBSEC_TIME_DIGITIZED)
        pub const TAG_SUBSEC_TIME_DIGITIZED : &'static str = "SubSecTimeDigitized";

        /// public static final [TAG_SUBSEC_TIME_ORIG](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_SUBSEC_TIME_ORIG)
        #[deprecated] pub const TAG_SUBSEC_TIME_ORIG : &'static str = "SubSecTimeOriginal";

        /// public static final [TAG_SUBSEC_TIME_ORIGINAL](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_SUBSEC_TIME_ORIGINAL)
        pub const TAG_SUBSEC_TIME_ORIGINAL : &'static str = "SubSecTimeOriginal";

        /// public static final [TAG_THUMBNAIL_IMAGE_LENGTH](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_THUMBNAIL_IMAGE_LENGTH)
        pub const TAG_THUMBNAIL_IMAGE_LENGTH : &'static str = "ThumbnailImageLength";

        /// public static final [TAG_THUMBNAIL_IMAGE_WIDTH](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_THUMBNAIL_IMAGE_WIDTH)
        pub const TAG_THUMBNAIL_IMAGE_WIDTH : &'static str = "ThumbnailImageWidth";

        /// public static final [TAG_TRANSFER_FUNCTION](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_TRANSFER_FUNCTION)
        pub const TAG_TRANSFER_FUNCTION : &'static str = "TransferFunction";

        /// public static final [TAG_USER_COMMENT](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_USER_COMMENT)
        pub const TAG_USER_COMMENT : &'static str = "UserComment";

        /// public static final [TAG_WHITE_BALANCE](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_WHITE_BALANCE)
        pub const TAG_WHITE_BALANCE : &'static str = "WhiteBalance";

        /// public static final [TAG_WHITE_POINT](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_WHITE_POINT)
        pub const TAG_WHITE_POINT : &'static str = "WhitePoint";

        /// public static final [TAG_XMP](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_XMP)
        pub const TAG_XMP : &'static str = "Xmp";

        /// public static final [TAG_X_RESOLUTION](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_X_RESOLUTION)
        pub const TAG_X_RESOLUTION : &'static str = "XResolution";

        /// public static final [TAG_Y_CB_CR_COEFFICIENTS](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_Y_CB_CR_COEFFICIENTS)
        pub const TAG_Y_CB_CR_COEFFICIENTS : &'static str = "YCbCrCoefficients";

        /// public static final [TAG_Y_CB_CR_POSITIONING](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_Y_CB_CR_POSITIONING)
        pub const TAG_Y_CB_CR_POSITIONING : &'static str = "YCbCrPositioning";

        /// public static final [TAG_Y_CB_CR_SUB_SAMPLING](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_Y_CB_CR_SUB_SAMPLING)
        pub const TAG_Y_CB_CR_SUB_SAMPLING : &'static str = "YCbCrSubSampling";

        /// public static final [TAG_Y_RESOLUTION](https://developer.android.com/reference/android/media/ExifInterface.html#TAG_Y_RESOLUTION)
        pub const TAG_Y_RESOLUTION : &'static str = "YResolution";

        /// public static final [WHITEBALANCE_AUTO](https://developer.android.com/reference/android/media/ExifInterface.html#WHITEBALANCE_AUTO)
        pub const WHITEBALANCE_AUTO : i32 = 0;

        /// public static final [WHITEBALANCE_MANUAL](https://developer.android.com/reference/android/media/ExifInterface.html#WHITEBALANCE_MANUAL)
        pub const WHITEBALANCE_MANUAL : i32 = 1;
    }
}
