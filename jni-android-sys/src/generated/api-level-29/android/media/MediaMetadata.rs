// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-media-MediaMetadata"))]
__jni_bindgen! {
    /// public final class [MediaMetadata](https://developer.android.com/reference/android/media/MediaMetadata.html)
    ///
    /// Required feature: android-media-MediaMetadata
    public final class MediaMetadata ("android/media/MediaMetadata") extends crate::java::lang::Object, implements crate::android::os::Parcelable {

        // // Not emitting: Non-public method
        // /// [MediaMetadata](https://developer.android.com/reference/android/media/MediaMetadata.html#MediaMetadata(android.os.Bundle))
        // ///
        // /// Required features: "android-os-Bundle"
        // #[cfg(any(feature = "all", all(feature = "android-os-Bundle")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::media::MediaMetadata>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/media/MediaMetadata", java.flags == (empty), .name == "<init>", .descriptor == "(Landroid/os/Bundle;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaMetadata\0", "<init>\0", "(Landroid/os/Bundle;)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [containsKey](https://developer.android.com/reference/android/media/MediaMetadata.html#containsKey(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn containsKey<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaMetadata", java.flags == PUBLIC, .name == "containsKey", .descriptor == "(Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaMetadata\0", "containsKey\0", "(Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getText](https://developer.android.com/reference/android/media/MediaMetadata.html#getText(java.lang.String))
        ///
        /// Required features: "java-lang-CharSequence", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence", feature = "java-lang-String")))]
        pub fn getText<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::CharSequence>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaMetadata", java.flags == PUBLIC, .name == "getText", .descriptor == "(Ljava/lang/String;)Ljava/lang/CharSequence;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaMetadata\0", "getText\0", "(Ljava/lang/String;)Ljava/lang/CharSequence;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getString](https://developer.android.com/reference/android/media/MediaMetadata.html#getString(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getString<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaMetadata", java.flags == PUBLIC, .name == "getString", .descriptor == "(Ljava/lang/String;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaMetadata\0", "getString\0", "(Ljava/lang/String;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLong](https://developer.android.com/reference/android/media/MediaMetadata.html#getLong(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getLong<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaMetadata", java.flags == PUBLIC, .name == "getLong", .descriptor == "(Ljava/lang/String;)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaMetadata\0", "getLong\0", "(Ljava/lang/String;)J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRating](https://developer.android.com/reference/android/media/MediaMetadata.html#getRating(java.lang.String))
        ///
        /// Required features: "android-media-Rating", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-media-Rating", feature = "java-lang-String")))]
        pub fn getRating<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::Rating>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaMetadata", java.flags == PUBLIC, .name == "getRating", .descriptor == "(Ljava/lang/String;)Landroid/media/Rating;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaMetadata\0", "getRating\0", "(Ljava/lang/String;)Landroid/media/Rating;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getBitmap](https://developer.android.com/reference/android/media/MediaMetadata.html#getBitmap(java.lang.String))
        ///
        /// Required features: "android-graphics-Bitmap", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Bitmap", feature = "java-lang-String")))]
        pub fn getBitmap<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Bitmap>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaMetadata", java.flags == PUBLIC, .name == "getBitmap", .descriptor == "(Ljava/lang/String;)Landroid/graphics/Bitmap;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaMetadata\0", "getBitmap\0", "(Ljava/lang/String;)Landroid/graphics/Bitmap;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [describeContents](https://developer.android.com/reference/android/media/MediaMetadata.html#describeContents())
        pub fn describeContents<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaMetadata", java.flags == PUBLIC, .name == "describeContents", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaMetadata\0", "describeContents\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [writeToParcel](https://developer.android.com/reference/android/media/MediaMetadata.html#writeToParcel(android.os.Parcel,%20int))
        ///
        /// Required features: "android-os-Parcel"
        #[cfg(any(feature = "all", all(feature = "android-os-Parcel")))]
        pub fn writeToParcel<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Parcel>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaMetadata", java.flags == PUBLIC, .name == "writeToParcel", .descriptor == "(Landroid/os/Parcel;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaMetadata\0", "writeToParcel\0", "(Landroid/os/Parcel;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [size](https://developer.android.com/reference/android/media/MediaMetadata.html#size())
        pub fn size<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaMetadata", java.flags == PUBLIC, .name == "size", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaMetadata\0", "size\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [keySet](https://developer.android.com/reference/android/media/MediaMetadata.html#keySet())
        ///
        /// Required features: "java-util-Set"
        #[cfg(any(feature = "all", all(feature = "java-util-Set")))]
        pub fn keySet<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Set>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaMetadata", java.flags == PUBLIC, .name == "keySet", .descriptor == "()Ljava/util/Set;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaMetadata\0", "keySet\0", "()Ljava/util/Set;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDescription](https://developer.android.com/reference/android/media/MediaMetadata.html#getDescription())
        ///
        /// Required features: "android-media-MediaDescription"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaDescription")))]
        pub fn getDescription<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::MediaDescription>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaMetadata", java.flags == PUBLIC, .name == "getDescription", .descriptor == "()Landroid/media/MediaDescription;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaMetadata\0", "getDescription\0", "()Landroid/media/MediaDescription;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [equals](https://developer.android.com/reference/android/media/MediaMetadata.html#equals(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn equals<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaMetadata", java.flags == PUBLIC, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaMetadata\0", "equals\0", "(Ljava/lang/Object;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hashCode](https://developer.android.com/reference/android/media/MediaMetadata.html#hashCode())
        pub fn hashCode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaMetadata", java.flags == PUBLIC, .name == "hashCode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaMetadata\0", "hashCode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// **get** public static final [CREATOR](https://developer.android.com/reference/android/media/MediaMetadata.html#CREATOR)
        ///
        /// Required feature: android-os-Parcelable_Creator
        #[cfg(any(feature = "all", feature = "android-os-Parcelable_Creator"))]
        pub fn CREATOR<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Parcelable_Creator>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/media/MediaMetadata\0", "CREATOR\0", "Landroid/os/Parcelable$Creator;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// public static final [METADATA_KEY_ALBUM](https://developer.android.com/reference/android/media/MediaMetadata.html#METADATA_KEY_ALBUM)
        pub const METADATA_KEY_ALBUM : &'static str = "android.media.metadata.ALBUM";

        /// public static final [METADATA_KEY_ALBUM_ART](https://developer.android.com/reference/android/media/MediaMetadata.html#METADATA_KEY_ALBUM_ART)
        pub const METADATA_KEY_ALBUM_ART : &'static str = "android.media.metadata.ALBUM_ART";

        /// public static final [METADATA_KEY_ALBUM_ARTIST](https://developer.android.com/reference/android/media/MediaMetadata.html#METADATA_KEY_ALBUM_ARTIST)
        pub const METADATA_KEY_ALBUM_ARTIST : &'static str = "android.media.metadata.ALBUM_ARTIST";

        /// public static final [METADATA_KEY_ALBUM_ART_URI](https://developer.android.com/reference/android/media/MediaMetadata.html#METADATA_KEY_ALBUM_ART_URI)
        pub const METADATA_KEY_ALBUM_ART_URI : &'static str = "android.media.metadata.ALBUM_ART_URI";

        /// public static final [METADATA_KEY_ART](https://developer.android.com/reference/android/media/MediaMetadata.html#METADATA_KEY_ART)
        pub const METADATA_KEY_ART : &'static str = "android.media.metadata.ART";

        /// public static final [METADATA_KEY_ARTIST](https://developer.android.com/reference/android/media/MediaMetadata.html#METADATA_KEY_ARTIST)
        pub const METADATA_KEY_ARTIST : &'static str = "android.media.metadata.ARTIST";

        /// public static final [METADATA_KEY_ART_URI](https://developer.android.com/reference/android/media/MediaMetadata.html#METADATA_KEY_ART_URI)
        pub const METADATA_KEY_ART_URI : &'static str = "android.media.metadata.ART_URI";

        /// public static final [METADATA_KEY_AUTHOR](https://developer.android.com/reference/android/media/MediaMetadata.html#METADATA_KEY_AUTHOR)
        pub const METADATA_KEY_AUTHOR : &'static str = "android.media.metadata.AUTHOR";

        /// public static final [METADATA_KEY_BT_FOLDER_TYPE](https://developer.android.com/reference/android/media/MediaMetadata.html#METADATA_KEY_BT_FOLDER_TYPE)
        pub const METADATA_KEY_BT_FOLDER_TYPE : &'static str = "android.media.metadata.BT_FOLDER_TYPE";

        /// public static final [METADATA_KEY_COMPILATION](https://developer.android.com/reference/android/media/MediaMetadata.html#METADATA_KEY_COMPILATION)
        pub const METADATA_KEY_COMPILATION : &'static str = "android.media.metadata.COMPILATION";

        /// public static final [METADATA_KEY_COMPOSER](https://developer.android.com/reference/android/media/MediaMetadata.html#METADATA_KEY_COMPOSER)
        pub const METADATA_KEY_COMPOSER : &'static str = "android.media.metadata.COMPOSER";

        /// public static final [METADATA_KEY_DATE](https://developer.android.com/reference/android/media/MediaMetadata.html#METADATA_KEY_DATE)
        pub const METADATA_KEY_DATE : &'static str = "android.media.metadata.DATE";

        /// public static final [METADATA_KEY_DISC_NUMBER](https://developer.android.com/reference/android/media/MediaMetadata.html#METADATA_KEY_DISC_NUMBER)
        pub const METADATA_KEY_DISC_NUMBER : &'static str = "android.media.metadata.DISC_NUMBER";

        /// public static final [METADATA_KEY_DISPLAY_DESCRIPTION](https://developer.android.com/reference/android/media/MediaMetadata.html#METADATA_KEY_DISPLAY_DESCRIPTION)
        pub const METADATA_KEY_DISPLAY_DESCRIPTION : &'static str = "android.media.metadata.DISPLAY_DESCRIPTION";

        /// public static final [METADATA_KEY_DISPLAY_ICON](https://developer.android.com/reference/android/media/MediaMetadata.html#METADATA_KEY_DISPLAY_ICON)
        pub const METADATA_KEY_DISPLAY_ICON : &'static str = "android.media.metadata.DISPLAY_ICON";

        /// public static final [METADATA_KEY_DISPLAY_ICON_URI](https://developer.android.com/reference/android/media/MediaMetadata.html#METADATA_KEY_DISPLAY_ICON_URI)
        pub const METADATA_KEY_DISPLAY_ICON_URI : &'static str = "android.media.metadata.DISPLAY_ICON_URI";

        /// public static final [METADATA_KEY_DISPLAY_SUBTITLE](https://developer.android.com/reference/android/media/MediaMetadata.html#METADATA_KEY_DISPLAY_SUBTITLE)
        pub const METADATA_KEY_DISPLAY_SUBTITLE : &'static str = "android.media.metadata.DISPLAY_SUBTITLE";

        /// public static final [METADATA_KEY_DISPLAY_TITLE](https://developer.android.com/reference/android/media/MediaMetadata.html#METADATA_KEY_DISPLAY_TITLE)
        pub const METADATA_KEY_DISPLAY_TITLE : &'static str = "android.media.metadata.DISPLAY_TITLE";

        /// public static final [METADATA_KEY_DURATION](https://developer.android.com/reference/android/media/MediaMetadata.html#METADATA_KEY_DURATION)
        pub const METADATA_KEY_DURATION : &'static str = "android.media.metadata.DURATION";

        /// public static final [METADATA_KEY_GENRE](https://developer.android.com/reference/android/media/MediaMetadata.html#METADATA_KEY_GENRE)
        pub const METADATA_KEY_GENRE : &'static str = "android.media.metadata.GENRE";

        /// public static final [METADATA_KEY_MEDIA_ID](https://developer.android.com/reference/android/media/MediaMetadata.html#METADATA_KEY_MEDIA_ID)
        pub const METADATA_KEY_MEDIA_ID : &'static str = "android.media.metadata.MEDIA_ID";

        /// public static final [METADATA_KEY_MEDIA_URI](https://developer.android.com/reference/android/media/MediaMetadata.html#METADATA_KEY_MEDIA_URI)
        pub const METADATA_KEY_MEDIA_URI : &'static str = "android.media.metadata.MEDIA_URI";

        /// public static final [METADATA_KEY_NUM_TRACKS](https://developer.android.com/reference/android/media/MediaMetadata.html#METADATA_KEY_NUM_TRACKS)
        pub const METADATA_KEY_NUM_TRACKS : &'static str = "android.media.metadata.NUM_TRACKS";

        /// public static final [METADATA_KEY_RATING](https://developer.android.com/reference/android/media/MediaMetadata.html#METADATA_KEY_RATING)
        pub const METADATA_KEY_RATING : &'static str = "android.media.metadata.RATING";

        /// public static final [METADATA_KEY_TITLE](https://developer.android.com/reference/android/media/MediaMetadata.html#METADATA_KEY_TITLE)
        pub const METADATA_KEY_TITLE : &'static str = "android.media.metadata.TITLE";

        /// public static final [METADATA_KEY_TRACK_NUMBER](https://developer.android.com/reference/android/media/MediaMetadata.html#METADATA_KEY_TRACK_NUMBER)
        pub const METADATA_KEY_TRACK_NUMBER : &'static str = "android.media.metadata.TRACK_NUMBER";

        /// public static final [METADATA_KEY_USER_RATING](https://developer.android.com/reference/android/media/MediaMetadata.html#METADATA_KEY_USER_RATING)
        pub const METADATA_KEY_USER_RATING : &'static str = "android.media.metadata.USER_RATING";

        /// public static final [METADATA_KEY_WRITER](https://developer.android.com/reference/android/media/MediaMetadata.html#METADATA_KEY_WRITER)
        pub const METADATA_KEY_WRITER : &'static str = "android.media.metadata.WRITER";

        /// public static final [METADATA_KEY_YEAR](https://developer.android.com/reference/android/media/MediaMetadata.html#METADATA_KEY_YEAR)
        pub const METADATA_KEY_YEAR : &'static str = "android.media.metadata.YEAR";
    }
}
