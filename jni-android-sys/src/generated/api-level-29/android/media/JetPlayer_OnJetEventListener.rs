// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-media-JetPlayer_OnJetEventListener"))]
__jni_bindgen! {
    /// public interface [JetPlayer.OnJetEventListener](https://developer.android.com/reference/android/media/JetPlayer.OnJetEventListener.html)
    ///
    /// Required feature: android-media-JetPlayer_OnJetEventListener
    public interface JetPlayer_OnJetEventListener ("android/media/JetPlayer$OnJetEventListener") extends crate::java::lang::Object {

        /// [onJetEvent](https://developer.android.com/reference/android/media/JetPlayer.OnJetEventListener.html#onJetEvent(android.media.JetPlayer,%20short,%20byte,%20byte,%20byte,%20byte))
        ///
        /// Required features: "android-media-JetPlayer"
        #[cfg(any(feature = "all", all(feature = "android-media-JetPlayer")))]
        pub fn onJetEvent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::JetPlayer>>, arg1: i16, arg2: i8, arg3: i8, arg4: i8, arg5: i8) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/JetPlayer$OnJetEventListener", java.flags == PUBLIC | ABSTRACT, .name == "onJetEvent", .descriptor == "(Landroid/media/JetPlayer;SBBBB)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/JetPlayer$OnJetEventListener\0", "onJetEvent\0", "(Landroid/media/JetPlayer;SBBBB)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onJetUserIdUpdate](https://developer.android.com/reference/android/media/JetPlayer.OnJetEventListener.html#onJetUserIdUpdate(android.media.JetPlayer,%20int,%20int))
        ///
        /// Required features: "android-media-JetPlayer"
        #[cfg(any(feature = "all", all(feature = "android-media-JetPlayer")))]
        pub fn onJetUserIdUpdate<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::JetPlayer>>, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/JetPlayer$OnJetEventListener", java.flags == PUBLIC | ABSTRACT, .name == "onJetUserIdUpdate", .descriptor == "(Landroid/media/JetPlayer;II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/JetPlayer$OnJetEventListener\0", "onJetUserIdUpdate\0", "(Landroid/media/JetPlayer;II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onJetNumQueuedSegmentUpdate](https://developer.android.com/reference/android/media/JetPlayer.OnJetEventListener.html#onJetNumQueuedSegmentUpdate(android.media.JetPlayer,%20int))
        ///
        /// Required features: "android-media-JetPlayer"
        #[cfg(any(feature = "all", all(feature = "android-media-JetPlayer")))]
        pub fn onJetNumQueuedSegmentUpdate<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::JetPlayer>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/JetPlayer$OnJetEventListener", java.flags == PUBLIC | ABSTRACT, .name == "onJetNumQueuedSegmentUpdate", .descriptor == "(Landroid/media/JetPlayer;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/JetPlayer$OnJetEventListener\0", "onJetNumQueuedSegmentUpdate\0", "(Landroid/media/JetPlayer;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onJetPauseUpdate](https://developer.android.com/reference/android/media/JetPlayer.OnJetEventListener.html#onJetPauseUpdate(android.media.JetPlayer,%20int))
        ///
        /// Required features: "android-media-JetPlayer"
        #[cfg(any(feature = "all", all(feature = "android-media-JetPlayer")))]
        pub fn onJetPauseUpdate<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::JetPlayer>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/JetPlayer$OnJetEventListener", java.flags == PUBLIC | ABSTRACT, .name == "onJetPauseUpdate", .descriptor == "(Landroid/media/JetPlayer;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/JetPlayer$OnJetEventListener\0", "onJetPauseUpdate\0", "(Landroid/media/JetPlayer;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
