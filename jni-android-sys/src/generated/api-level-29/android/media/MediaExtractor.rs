// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-media-MediaExtractor"))]
__jni_bindgen! {
    /// public final class [MediaExtractor](https://developer.android.com/reference/android/media/MediaExtractor.html)
    ///
    /// Required feature: android-media-MediaExtractor
    public final class MediaExtractor ("android/media/MediaExtractor") extends crate::java::lang::Object {

        /// [MediaExtractor](https://developer.android.com/reference/android/media/MediaExtractor.html#MediaExtractor())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::media::MediaExtractor>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaExtractor", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaExtractor\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDataSource](https://developer.android.com/reference/android/media/MediaExtractor.html#setDataSource(android.media.MediaDataSource))
        ///
        /// Required features: "android-media-MediaDataSource"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaDataSource")))]
        pub fn setDataSource_MediaDataSource<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaDataSource>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaExtractor", java.flags == PUBLIC | NATIVE, .name == "setDataSource", .descriptor == "(Landroid/media/MediaDataSource;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaExtractor\0", "setDataSource\0", "(Landroid/media/MediaDataSource;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDataSource](https://developer.android.com/reference/android/media/MediaExtractor.html#setDataSource(android.content.Context,%20android.net.Uri,%20java.util.Map))
        ///
        /// Required features: "android-content-Context", "android-net-Uri", "java-util-Map"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-net-Uri", feature = "java-util-Map")))]
        pub fn setDataSource_Context_Uri_Map<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Map>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaExtractor", java.flags == PUBLIC, .name == "setDataSource", .descriptor == "(Landroid/content/Context;Landroid/net/Uri;Ljava/util/Map;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaExtractor\0", "setDataSource\0", "(Landroid/content/Context;Landroid/net/Uri;Ljava/util/Map;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDataSource](https://developer.android.com/reference/android/media/MediaExtractor.html#setDataSource(java.lang.String,%20java.util.Map))
        ///
        /// Required features: "java-lang-String", "java-util-Map"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-util-Map")))]
        pub fn setDataSource_String_Map<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Map>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaExtractor", java.flags == PUBLIC, .name == "setDataSource", .descriptor == "(Ljava/lang/String;Ljava/util/Map;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaExtractor\0", "setDataSource\0", "(Ljava/lang/String;Ljava/util/Map;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDataSource](https://developer.android.com/reference/android/media/MediaExtractor.html#setDataSource(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn setDataSource_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaExtractor", java.flags == PUBLIC, .name == "setDataSource", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaExtractor\0", "setDataSource\0", "(Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDataSource](https://developer.android.com/reference/android/media/MediaExtractor.html#setDataSource(android.content.res.AssetFileDescriptor))
        ///
        /// Required features: "android-content-res-AssetFileDescriptor"
        #[cfg(any(feature = "all", all(feature = "android-content-res-AssetFileDescriptor")))]
        pub fn setDataSource_AssetFileDescriptor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::res::AssetFileDescriptor>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaExtractor", java.flags == PUBLIC, .name == "setDataSource", .descriptor == "(Landroid/content/res/AssetFileDescriptor;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaExtractor\0", "setDataSource\0", "(Landroid/content/res/AssetFileDescriptor;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDataSource](https://developer.android.com/reference/android/media/MediaExtractor.html#setDataSource(java.io.FileDescriptor))
        ///
        /// Required features: "java-io-FileDescriptor"
        #[cfg(any(feature = "all", all(feature = "java-io-FileDescriptor")))]
        pub fn setDataSource_FileDescriptor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::FileDescriptor>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaExtractor", java.flags == PUBLIC, .name == "setDataSource", .descriptor == "(Ljava/io/FileDescriptor;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaExtractor\0", "setDataSource\0", "(Ljava/io/FileDescriptor;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDataSource](https://developer.android.com/reference/android/media/MediaExtractor.html#setDataSource(java.io.FileDescriptor,%20long,%20long))
        ///
        /// Required features: "java-io-FileDescriptor"
        #[cfg(any(feature = "all", all(feature = "java-io-FileDescriptor")))]
        pub fn setDataSource_FileDescriptor_long_long<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::FileDescriptor>>, arg1: i64, arg2: i64) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaExtractor", java.flags == PUBLIC | NATIVE, .name == "setDataSource", .descriptor == "(Ljava/io/FileDescriptor;JJ)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaExtractor\0", "setDataSource\0", "(Ljava/io/FileDescriptor;JJ)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setMediaCas](https://developer.android.com/reference/android/media/MediaExtractor.html#setMediaCas(android.media.MediaCas))
        ///
        /// Required features: "android-media-MediaCas"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaCas")))]
        pub fn setMediaCas<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaCas>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaExtractor", java.flags == PUBLIC, .name == "setMediaCas", .descriptor == "(Landroid/media/MediaCas;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaExtractor\0", "setMediaCas\0", "(Landroid/media/MediaCas;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCasInfo](https://developer.android.com/reference/android/media/MediaExtractor.html#getCasInfo(int))
        ///
        /// Required features: "android-media-MediaExtractor_CasInfo"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaExtractor_CasInfo")))]
        pub fn getCasInfo<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::MediaExtractor_CasInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaExtractor", java.flags == PUBLIC, .name == "getCasInfo", .descriptor == "(I)Landroid/media/MediaExtractor$CasInfo;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaExtractor\0", "getCasInfo\0", "(I)Landroid/media/MediaExtractor$CasInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [finalize](https://developer.android.com/reference/android/media/MediaExtractor.html#finalize())
        // fn finalize<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/media/MediaExtractor", java.flags == PROTECTED, .name == "finalize", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaExtractor\0", "finalize\0", "()V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [release](https://developer.android.com/reference/android/media/MediaExtractor.html#release())
        pub fn release<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaExtractor", java.flags == PUBLIC | NATIVE, .name == "release", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaExtractor\0", "release\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTrackCount](https://developer.android.com/reference/android/media/MediaExtractor.html#getTrackCount())
        pub fn getTrackCount<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaExtractor", java.flags == PUBLIC | NATIVE, .name == "getTrackCount", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaExtractor\0", "getTrackCount\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDrmInitData](https://developer.android.com/reference/android/media/MediaExtractor.html#getDrmInitData())
        ///
        /// Required features: "android-media-DrmInitData"
        #[cfg(any(feature = "all", all(feature = "android-media-DrmInitData")))]
        pub fn getDrmInitData<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::DrmInitData>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaExtractor", java.flags == PUBLIC, .name == "getDrmInitData", .descriptor == "()Landroid/media/DrmInitData;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaExtractor\0", "getDrmInitData\0", "()Landroid/media/DrmInitData;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAudioPresentations](https://developer.android.com/reference/android/media/MediaExtractor.html#getAudioPresentations(int))
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getAudioPresentations<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaExtractor", java.flags == PUBLIC, .name == "getAudioPresentations", .descriptor == "(I)Ljava/util/List;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaExtractor\0", "getAudioPresentations\0", "(I)Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPsshInfo](https://developer.android.com/reference/android/media/MediaExtractor.html#getPsshInfo())
        ///
        /// Required features: "java-util-Map"
        #[cfg(any(feature = "all", all(feature = "java-util-Map")))]
        pub fn getPsshInfo<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Map>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaExtractor", java.flags == PUBLIC, .name == "getPsshInfo", .descriptor == "()Ljava/util/Map;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaExtractor\0", "getPsshInfo\0", "()Ljava/util/Map;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTrackFormat](https://developer.android.com/reference/android/media/MediaExtractor.html#getTrackFormat(int))
        ///
        /// Required features: "android-media-MediaFormat"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaFormat")))]
        pub fn getTrackFormat<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::MediaFormat>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaExtractor", java.flags == PUBLIC, .name == "getTrackFormat", .descriptor == "(I)Landroid/media/MediaFormat;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaExtractor\0", "getTrackFormat\0", "(I)Landroid/media/MediaFormat;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [selectTrack](https://developer.android.com/reference/android/media/MediaExtractor.html#selectTrack(int))
        pub fn selectTrack<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaExtractor", java.flags == PUBLIC | NATIVE, .name == "selectTrack", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaExtractor\0", "selectTrack\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unselectTrack](https://developer.android.com/reference/android/media/MediaExtractor.html#unselectTrack(int))
        pub fn unselectTrack<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaExtractor", java.flags == PUBLIC | NATIVE, .name == "unselectTrack", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaExtractor\0", "unselectTrack\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [seekTo](https://developer.android.com/reference/android/media/MediaExtractor.html#seekTo(long,%20int))
        pub fn seekTo<'env>(&'env self, arg0: i64, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaExtractor", java.flags == PUBLIC | NATIVE, .name == "seekTo", .descriptor == "(JI)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaExtractor\0", "seekTo\0", "(JI)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [advance](https://developer.android.com/reference/android/media/MediaExtractor.html#advance())
        pub fn advance<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaExtractor", java.flags == PUBLIC | NATIVE, .name == "advance", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaExtractor\0", "advance\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [readSampleData](https://developer.android.com/reference/android/media/MediaExtractor.html#readSampleData(java.nio.ByteBuffer,%20int))
        ///
        /// Required features: "java-nio-ByteBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-ByteBuffer")))]
        pub fn readSampleData<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::ByteBuffer>>, arg1: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaExtractor", java.flags == PUBLIC | NATIVE, .name == "readSampleData", .descriptor == "(Ljava/nio/ByteBuffer;I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaExtractor\0", "readSampleData\0", "(Ljava/nio/ByteBuffer;I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSampleTrackIndex](https://developer.android.com/reference/android/media/MediaExtractor.html#getSampleTrackIndex())
        pub fn getSampleTrackIndex<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaExtractor", java.flags == PUBLIC | NATIVE, .name == "getSampleTrackIndex", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaExtractor\0", "getSampleTrackIndex\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSampleTime](https://developer.android.com/reference/android/media/MediaExtractor.html#getSampleTime())
        pub fn getSampleTime<'env>(&'env self) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaExtractor", java.flags == PUBLIC | NATIVE, .name == "getSampleTime", .descriptor == "()J"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaExtractor\0", "getSampleTime\0", "()J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSampleSize](https://developer.android.com/reference/android/media/MediaExtractor.html#getSampleSize())
        pub fn getSampleSize<'env>(&'env self) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaExtractor", java.flags == PUBLIC | NATIVE, .name == "getSampleSize", .descriptor == "()J"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaExtractor\0", "getSampleSize\0", "()J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSampleFlags](https://developer.android.com/reference/android/media/MediaExtractor.html#getSampleFlags())
        pub fn getSampleFlags<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaExtractor", java.flags == PUBLIC | NATIVE, .name == "getSampleFlags", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaExtractor\0", "getSampleFlags\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSampleCryptoInfo](https://developer.android.com/reference/android/media/MediaExtractor.html#getSampleCryptoInfo(android.media.MediaCodec.CryptoInfo))
        ///
        /// Required features: "android-media-MediaCodec_CryptoInfo"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaCodec_CryptoInfo")))]
        pub fn getSampleCryptoInfo<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaCodec_CryptoInfo>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaExtractor", java.flags == PUBLIC | NATIVE, .name == "getSampleCryptoInfo", .descriptor == "(Landroid/media/MediaCodec$CryptoInfo;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaExtractor\0", "getSampleCryptoInfo\0", "(Landroid/media/MediaCodec$CryptoInfo;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCachedDuration](https://developer.android.com/reference/android/media/MediaExtractor.html#getCachedDuration())
        pub fn getCachedDuration<'env>(&'env self) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaExtractor", java.flags == PUBLIC | NATIVE, .name == "getCachedDuration", .descriptor == "()J"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaExtractor\0", "getCachedDuration\0", "()J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasCacheReachedEndOfStream](https://developer.android.com/reference/android/media/MediaExtractor.html#hasCacheReachedEndOfStream())
        pub fn hasCacheReachedEndOfStream<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaExtractor", java.flags == PUBLIC | NATIVE, .name == "hasCacheReachedEndOfStream", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaExtractor\0", "hasCacheReachedEndOfStream\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMetrics](https://developer.android.com/reference/android/media/MediaExtractor.html#getMetrics())
        ///
        /// Required features: "android-os-PersistableBundle"
        #[cfg(any(feature = "all", all(feature = "android-os-PersistableBundle")))]
        pub fn getMetrics<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::PersistableBundle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaExtractor", java.flags == PUBLIC, .name == "getMetrics", .descriptor == "()Landroid/os/PersistableBundle;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaExtractor\0", "getMetrics\0", "()Landroid/os/PersistableBundle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [SAMPLE_FLAG_ENCRYPTED](https://developer.android.com/reference/android/media/MediaExtractor.html#SAMPLE_FLAG_ENCRYPTED)
        pub const SAMPLE_FLAG_ENCRYPTED : i32 = 2;

        /// public static final [SAMPLE_FLAG_PARTIAL_FRAME](https://developer.android.com/reference/android/media/MediaExtractor.html#SAMPLE_FLAG_PARTIAL_FRAME)
        pub const SAMPLE_FLAG_PARTIAL_FRAME : i32 = 4;

        /// public static final [SAMPLE_FLAG_SYNC](https://developer.android.com/reference/android/media/MediaExtractor.html#SAMPLE_FLAG_SYNC)
        pub const SAMPLE_FLAG_SYNC : i32 = 1;

        /// public static final [SEEK_TO_CLOSEST_SYNC](https://developer.android.com/reference/android/media/MediaExtractor.html#SEEK_TO_CLOSEST_SYNC)
        pub const SEEK_TO_CLOSEST_SYNC : i32 = 2;

        /// public static final [SEEK_TO_NEXT_SYNC](https://developer.android.com/reference/android/media/MediaExtractor.html#SEEK_TO_NEXT_SYNC)
        pub const SEEK_TO_NEXT_SYNC : i32 = 1;

        /// public static final [SEEK_TO_PREVIOUS_SYNC](https://developer.android.com/reference/android/media/MediaExtractor.html#SEEK_TO_PREVIOUS_SYNC)
        pub const SEEK_TO_PREVIOUS_SYNC : i32 = 0;
    }
}
