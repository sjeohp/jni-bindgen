// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-media-MediaCodec"))]
__jni_bindgen! {
    /// public final class [MediaCodec](https://developer.android.com/reference/android/media/MediaCodec.html)
    ///
    /// Required feature: android-media-MediaCodec
    public final class MediaCodec ("android/media/MediaCodec") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [MediaCodec](https://developer.android.com/reference/android/media/MediaCodec.html#MediaCodec(java.lang.String,%20boolean,%20boolean))
        // ///
        // /// Required features: "java-lang-String"
        // #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: bool, arg2: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::media::MediaCodec>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/media/MediaCodec", java.flags == (empty), .name == "<init>", .descriptor == "(Ljava/lang/String;ZZ)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodec\0", "<init>\0", "(Ljava/lang/String;ZZ)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [createDecoderByType](https://developer.android.com/reference/android/media/MediaCodec.html#createDecoderByType(java.lang.String))
        ///
        /// Required features: "android-media-MediaCodec", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaCodec", feature = "java-lang-String")))]
        pub fn createDecoderByType<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::MediaCodec>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodec", java.flags == PUBLIC | STATIC, .name == "createDecoderByType", .descriptor == "(Ljava/lang/String;)Landroid/media/MediaCodec;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/media/MediaCodec\0", "createDecoderByType\0", "(Ljava/lang/String;)Landroid/media/MediaCodec;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createEncoderByType](https://developer.android.com/reference/android/media/MediaCodec.html#createEncoderByType(java.lang.String))
        ///
        /// Required features: "android-media-MediaCodec", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaCodec", feature = "java-lang-String")))]
        pub fn createEncoderByType<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::MediaCodec>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodec", java.flags == PUBLIC | STATIC, .name == "createEncoderByType", .descriptor == "(Ljava/lang/String;)Landroid/media/MediaCodec;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/media/MediaCodec\0", "createEncoderByType\0", "(Ljava/lang/String;)Landroid/media/MediaCodec;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createByCodecName](https://developer.android.com/reference/android/media/MediaCodec.html#createByCodecName(java.lang.String))
        ///
        /// Required features: "android-media-MediaCodec", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaCodec", feature = "java-lang-String")))]
        pub fn createByCodecName<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::MediaCodec>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodec", java.flags == PUBLIC | STATIC, .name == "createByCodecName", .descriptor == "(Ljava/lang/String;)Landroid/media/MediaCodec;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/media/MediaCodec\0", "createByCodecName\0", "(Ljava/lang/String;)Landroid/media/MediaCodec;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [finalize](https://developer.android.com/reference/android/media/MediaCodec.html#finalize())
        // fn finalize<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/media/MediaCodec", java.flags == PROTECTED, .name == "finalize", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodec\0", "finalize\0", "()V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [reset](https://developer.android.com/reference/android/media/MediaCodec.html#reset())
        pub fn reset<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodec", java.flags == PUBLIC, .name == "reset", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodec\0", "reset\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [release](https://developer.android.com/reference/android/media/MediaCodec.html#release())
        pub fn release<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodec", java.flags == PUBLIC, .name == "release", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodec\0", "release\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [configure](https://developer.android.com/reference/android/media/MediaCodec.html#configure(android.media.MediaFormat,%20android.view.Surface,%20android.media.MediaCrypto,%20int))
        ///
        /// Required features: "android-media-MediaCrypto", "android-media-MediaFormat", "android-view-Surface"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaCrypto", feature = "android-media-MediaFormat", feature = "android-view-Surface")))]
        pub fn configure_MediaFormat_Surface_MediaCrypto_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaFormat>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::Surface>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaCrypto>>, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodec", java.flags == PUBLIC, .name == "configure", .descriptor == "(Landroid/media/MediaFormat;Landroid/view/Surface;Landroid/media/MediaCrypto;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodec\0", "configure\0", "(Landroid/media/MediaFormat;Landroid/view/Surface;Landroid/media/MediaCrypto;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [configure](https://developer.android.com/reference/android/media/MediaCodec.html#configure(android.media.MediaFormat,%20android.view.Surface,%20int,%20android.media.MediaDescrambler))
        ///
        /// Required features: "android-media-MediaDescrambler", "android-media-MediaFormat", "android-view-Surface"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaDescrambler", feature = "android-media-MediaFormat", feature = "android-view-Surface")))]
        pub fn configure_MediaFormat_Surface_int_MediaDescrambler<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaFormat>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::Surface>>, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaDescrambler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodec", java.flags == PUBLIC, .name == "configure", .descriptor == "(Landroid/media/MediaFormat;Landroid/view/Surface;ILandroid/media/MediaDescrambler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodec\0", "configure\0", "(Landroid/media/MediaFormat;Landroid/view/Surface;ILandroid/media/MediaDescrambler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOutputSurface](https://developer.android.com/reference/android/media/MediaCodec.html#setOutputSurface(android.view.Surface))
        ///
        /// Required features: "android-view-Surface"
        #[cfg(any(feature = "all", all(feature = "android-view-Surface")))]
        pub fn setOutputSurface<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::Surface>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodec", java.flags == PUBLIC, .name == "setOutputSurface", .descriptor == "(Landroid/view/Surface;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodec\0", "setOutputSurface\0", "(Landroid/view/Surface;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createPersistentInputSurface](https://developer.android.com/reference/android/media/MediaCodec.html#createPersistentInputSurface())
        ///
        /// Required features: "android-view-Surface"
        #[cfg(any(feature = "all", all(feature = "android-view-Surface")))]
        pub fn createPersistentInputSurface<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::Surface>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodec", java.flags == PUBLIC | STATIC, .name == "createPersistentInputSurface", .descriptor == "()Landroid/view/Surface;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/media/MediaCodec\0", "createPersistentInputSurface\0", "()Landroid/view/Surface;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setInputSurface](https://developer.android.com/reference/android/media/MediaCodec.html#setInputSurface(android.view.Surface))
        ///
        /// Required features: "android-view-Surface"
        #[cfg(any(feature = "all", all(feature = "android-view-Surface")))]
        pub fn setInputSurface<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::Surface>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodec", java.flags == PUBLIC, .name == "setInputSurface", .descriptor == "(Landroid/view/Surface;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodec\0", "setInputSurface\0", "(Landroid/view/Surface;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createInputSurface](https://developer.android.com/reference/android/media/MediaCodec.html#createInputSurface())
        ///
        /// Required features: "android-view-Surface"
        #[cfg(any(feature = "all", all(feature = "android-view-Surface")))]
        pub fn createInputSurface<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::Surface>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodec", java.flags == PUBLIC | NATIVE, .name == "createInputSurface", .descriptor == "()Landroid/view/Surface;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodec\0", "createInputSurface\0", "()Landroid/view/Surface;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [start](https://developer.android.com/reference/android/media/MediaCodec.html#start())
        pub fn start<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodec", java.flags == PUBLIC, .name == "start", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodec\0", "start\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [stop](https://developer.android.com/reference/android/media/MediaCodec.html#stop())
        pub fn stop<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodec", java.flags == PUBLIC, .name == "stop", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodec\0", "stop\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [flush](https://developer.android.com/reference/android/media/MediaCodec.html#flush())
        pub fn flush<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodec", java.flags == PUBLIC, .name == "flush", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodec\0", "flush\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [queueInputBuffer](https://developer.android.com/reference/android/media/MediaCodec.html#queueInputBuffer(int,%20int,%20int,%20long,%20int))
        pub fn queueInputBuffer<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: i64, arg4: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodec", java.flags == PUBLIC, .name == "queueInputBuffer", .descriptor == "(IIIJI)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodec\0", "queueInputBuffer\0", "(IIIJI)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [queueSecureInputBuffer](https://developer.android.com/reference/android/media/MediaCodec.html#queueSecureInputBuffer(int,%20int,%20android.media.MediaCodec.CryptoInfo,%20long,%20int))
        ///
        /// Required features: "android-media-MediaCodec_CryptoInfo"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaCodec_CryptoInfo")))]
        pub fn queueSecureInputBuffer<'env>(&'env self, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaCodec_CryptoInfo>>, arg3: i64, arg4: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodec", java.flags == PUBLIC, .name == "queueSecureInputBuffer", .descriptor == "(IILandroid/media/MediaCodec$CryptoInfo;JI)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodec\0", "queueSecureInputBuffer\0", "(IILandroid/media/MediaCodec$CryptoInfo;JI)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dequeueInputBuffer](https://developer.android.com/reference/android/media/MediaCodec.html#dequeueInputBuffer(long))
        pub fn dequeueInputBuffer<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodec", java.flags == PUBLIC, .name == "dequeueInputBuffer", .descriptor == "(J)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodec\0", "dequeueInputBuffer\0", "(J)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dequeueOutputBuffer](https://developer.android.com/reference/android/media/MediaCodec.html#dequeueOutputBuffer(android.media.MediaCodec.BufferInfo,%20long))
        ///
        /// Required features: "android-media-MediaCodec_BufferInfo"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaCodec_BufferInfo")))]
        pub fn dequeueOutputBuffer<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaCodec_BufferInfo>>, arg1: i64) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodec", java.flags == PUBLIC, .name == "dequeueOutputBuffer", .descriptor == "(Landroid/media/MediaCodec$BufferInfo;J)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodec\0", "dequeueOutputBuffer\0", "(Landroid/media/MediaCodec$BufferInfo;J)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [releaseOutputBuffer](https://developer.android.com/reference/android/media/MediaCodec.html#releaseOutputBuffer(int,%20boolean))
        pub fn releaseOutputBuffer_int_boolean<'env>(&'env self, arg0: i32, arg1: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodec", java.flags == PUBLIC, .name == "releaseOutputBuffer", .descriptor == "(IZ)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodec\0", "releaseOutputBuffer\0", "(IZ)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [releaseOutputBuffer](https://developer.android.com/reference/android/media/MediaCodec.html#releaseOutputBuffer(int,%20long))
        pub fn releaseOutputBuffer_int_long<'env>(&'env self, arg0: i32, arg1: i64) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodec", java.flags == PUBLIC, .name == "releaseOutputBuffer", .descriptor == "(IJ)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodec\0", "releaseOutputBuffer\0", "(IJ)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [signalEndOfInputStream](https://developer.android.com/reference/android/media/MediaCodec.html#signalEndOfInputStream())
        pub fn signalEndOfInputStream<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodec", java.flags == PUBLIC | NATIVE, .name == "signalEndOfInputStream", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodec\0", "signalEndOfInputStream\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getOutputFormat](https://developer.android.com/reference/android/media/MediaCodec.html#getOutputFormat())
        ///
        /// Required features: "android-media-MediaFormat"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaFormat")))]
        pub fn getOutputFormat<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::MediaFormat>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodec", java.flags == PUBLIC, .name == "getOutputFormat", .descriptor == "()Landroid/media/MediaFormat;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodec\0", "getOutputFormat\0", "()Landroid/media/MediaFormat;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInputFormat](https://developer.android.com/reference/android/media/MediaCodec.html#getInputFormat())
        ///
        /// Required features: "android-media-MediaFormat"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaFormat")))]
        pub fn getInputFormat<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::MediaFormat>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodec", java.flags == PUBLIC, .name == "getInputFormat", .descriptor == "()Landroid/media/MediaFormat;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodec\0", "getInputFormat\0", "()Landroid/media/MediaFormat;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getOutputFormat](https://developer.android.com/reference/android/media/MediaCodec.html#getOutputFormat(int))
        ///
        /// Required features: "android-media-MediaFormat"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaFormat")))]
        pub fn getOutputFormat_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::MediaFormat>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodec", java.flags == PUBLIC, .name == "getOutputFormat", .descriptor == "(I)Landroid/media/MediaFormat;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodec\0", "getOutputFormat\0", "(I)Landroid/media/MediaFormat;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInputBuffers](https://developer.android.com/reference/android/media/MediaCodec.html#getInputBuffers())
        ///
        /// Required features: "java-nio-ByteBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-ByteBuffer")))]
        #[deprecated] pub fn getInputBuffers<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::nio::ByteBuffer, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodec", java.flags == PUBLIC, .name == "getInputBuffers", .descriptor == "()[Ljava/nio/ByteBuffer;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodec\0", "getInputBuffers\0", "()[Ljava/nio/ByteBuffer;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getOutputBuffers](https://developer.android.com/reference/android/media/MediaCodec.html#getOutputBuffers())
        ///
        /// Required features: "java-nio-ByteBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-ByteBuffer")))]
        #[deprecated] pub fn getOutputBuffers<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::nio::ByteBuffer, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodec", java.flags == PUBLIC, .name == "getOutputBuffers", .descriptor == "()[Ljava/nio/ByteBuffer;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodec\0", "getOutputBuffers\0", "()[Ljava/nio/ByteBuffer;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInputBuffer](https://developer.android.com/reference/android/media/MediaCodec.html#getInputBuffer(int))
        ///
        /// Required features: "java-nio-ByteBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-ByteBuffer")))]
        pub fn getInputBuffer<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::ByteBuffer>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodec", java.flags == PUBLIC, .name == "getInputBuffer", .descriptor == "(I)Ljava/nio/ByteBuffer;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodec\0", "getInputBuffer\0", "(I)Ljava/nio/ByteBuffer;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInputImage](https://developer.android.com/reference/android/media/MediaCodec.html#getInputImage(int))
        ///
        /// Required features: "android-media-Image"
        #[cfg(any(feature = "all", all(feature = "android-media-Image")))]
        pub fn getInputImage<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::Image>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodec", java.flags == PUBLIC, .name == "getInputImage", .descriptor == "(I)Landroid/media/Image;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodec\0", "getInputImage\0", "(I)Landroid/media/Image;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getOutputBuffer](https://developer.android.com/reference/android/media/MediaCodec.html#getOutputBuffer(int))
        ///
        /// Required features: "java-nio-ByteBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-ByteBuffer")))]
        pub fn getOutputBuffer<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::nio::ByteBuffer>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodec", java.flags == PUBLIC, .name == "getOutputBuffer", .descriptor == "(I)Ljava/nio/ByteBuffer;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodec\0", "getOutputBuffer\0", "(I)Ljava/nio/ByteBuffer;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getOutputImage](https://developer.android.com/reference/android/media/MediaCodec.html#getOutputImage(int))
        ///
        /// Required features: "android-media-Image"
        #[cfg(any(feature = "all", all(feature = "android-media-Image")))]
        pub fn getOutputImage<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::Image>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodec", java.flags == PUBLIC, .name == "getOutputImage", .descriptor == "(I)Landroid/media/Image;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodec\0", "getOutputImage\0", "(I)Landroid/media/Image;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setVideoScalingMode](https://developer.android.com/reference/android/media/MediaCodec.html#setVideoScalingMode(int))
        pub fn setVideoScalingMode<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodec", java.flags == PUBLIC | NATIVE, .name == "setVideoScalingMode", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodec\0", "setVideoScalingMode\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAudioPresentation](https://developer.android.com/reference/android/media/MediaCodec.html#setAudioPresentation(android.media.AudioPresentation))
        ///
        /// Required features: "android-media-AudioPresentation"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioPresentation")))]
        pub fn setAudioPresentation<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::AudioPresentation>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodec", java.flags == PUBLIC, .name == "setAudioPresentation", .descriptor == "(Landroid/media/AudioPresentation;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodec\0", "setAudioPresentation\0", "(Landroid/media/AudioPresentation;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getName](https://developer.android.com/reference/android/media/MediaCodec.html#getName())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getName<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodec", java.flags == PUBLIC, .name == "getName", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodec\0", "getName\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCanonicalName](https://developer.android.com/reference/android/media/MediaCodec.html#getCanonicalName())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getCanonicalName<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodec", java.flags == PUBLIC | NATIVE, .name == "getCanonicalName", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodec\0", "getCanonicalName\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMetrics](https://developer.android.com/reference/android/media/MediaCodec.html#getMetrics())
        ///
        /// Required features: "android-os-PersistableBundle"
        #[cfg(any(feature = "all", all(feature = "android-os-PersistableBundle")))]
        pub fn getMetrics<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::PersistableBundle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodec", java.flags == PUBLIC, .name == "getMetrics", .descriptor == "()Landroid/os/PersistableBundle;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodec\0", "getMetrics\0", "()Landroid/os/PersistableBundle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setParameters](https://developer.android.com/reference/android/media/MediaCodec.html#setParameters(android.os.Bundle))
        ///
        /// Required features: "android-os-Bundle"
        #[cfg(any(feature = "all", all(feature = "android-os-Bundle")))]
        pub fn setParameters<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodec", java.flags == PUBLIC, .name == "setParameters", .descriptor == "(Landroid/os/Bundle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodec\0", "setParameters\0", "(Landroid/os/Bundle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setCallback](https://developer.android.com/reference/android/media/MediaCodec.html#setCallback(android.media.MediaCodec.Callback,%20android.os.Handler))
        ///
        /// Required features: "android-media-MediaCodec_Callback", "android-os-Handler"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaCodec_Callback", feature = "android-os-Handler")))]
        pub fn setCallback_Callback_Handler<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaCodec_Callback>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodec", java.flags == PUBLIC, .name == "setCallback", .descriptor == "(Landroid/media/MediaCodec$Callback;Landroid/os/Handler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodec\0", "setCallback\0", "(Landroid/media/MediaCodec$Callback;Landroid/os/Handler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setCallback](https://developer.android.com/reference/android/media/MediaCodec.html#setCallback(android.media.MediaCodec.Callback))
        ///
        /// Required features: "android-media-MediaCodec_Callback"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaCodec_Callback")))]
        pub fn setCallback_Callback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaCodec_Callback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodec", java.flags == PUBLIC, .name == "setCallback", .descriptor == "(Landroid/media/MediaCodec$Callback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodec\0", "setCallback\0", "(Landroid/media/MediaCodec$Callback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOnFrameRenderedListener](https://developer.android.com/reference/android/media/MediaCodec.html#setOnFrameRenderedListener(android.media.MediaCodec.OnFrameRenderedListener,%20android.os.Handler))
        ///
        /// Required features: "android-media-MediaCodec_OnFrameRenderedListener", "android-os-Handler"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaCodec_OnFrameRenderedListener", feature = "android-os-Handler")))]
        pub fn setOnFrameRenderedListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::MediaCodec_OnFrameRenderedListener>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodec", java.flags == PUBLIC, .name == "setOnFrameRenderedListener", .descriptor == "(Landroid/media/MediaCodec$OnFrameRenderedListener;Landroid/os/Handler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodec\0", "setOnFrameRenderedListener\0", "(Landroid/media/MediaCodec$OnFrameRenderedListener;Landroid/os/Handler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCodecInfo](https://developer.android.com/reference/android/media/MediaCodec.html#getCodecInfo())
        ///
        /// Required features: "android-media-MediaCodecInfo"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaCodecInfo")))]
        pub fn getCodecInfo<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::MediaCodecInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodec", java.flags == PUBLIC, .name == "getCodecInfo", .descriptor == "()Landroid/media/MediaCodecInfo;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodec\0", "getCodecInfo\0", "()Landroid/media/MediaCodecInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [BUFFER_FLAG_CODEC_CONFIG](https://developer.android.com/reference/android/media/MediaCodec.html#BUFFER_FLAG_CODEC_CONFIG)
        pub const BUFFER_FLAG_CODEC_CONFIG : i32 = 2;

        /// public static final [BUFFER_FLAG_END_OF_STREAM](https://developer.android.com/reference/android/media/MediaCodec.html#BUFFER_FLAG_END_OF_STREAM)
        pub const BUFFER_FLAG_END_OF_STREAM : i32 = 4;

        /// public static final [BUFFER_FLAG_KEY_FRAME](https://developer.android.com/reference/android/media/MediaCodec.html#BUFFER_FLAG_KEY_FRAME)
        pub const BUFFER_FLAG_KEY_FRAME : i32 = 1;

        /// public static final [BUFFER_FLAG_PARTIAL_FRAME](https://developer.android.com/reference/android/media/MediaCodec.html#BUFFER_FLAG_PARTIAL_FRAME)
        pub const BUFFER_FLAG_PARTIAL_FRAME : i32 = 8;

        /// public static final [BUFFER_FLAG_SYNC_FRAME](https://developer.android.com/reference/android/media/MediaCodec.html#BUFFER_FLAG_SYNC_FRAME)
        #[deprecated] pub const BUFFER_FLAG_SYNC_FRAME : i32 = 1;

        /// public static final [CONFIGURE_FLAG_ENCODE](https://developer.android.com/reference/android/media/MediaCodec.html#CONFIGURE_FLAG_ENCODE)
        pub const CONFIGURE_FLAG_ENCODE : i32 = 1;

        /// public static final [CRYPTO_MODE_AES_CBC](https://developer.android.com/reference/android/media/MediaCodec.html#CRYPTO_MODE_AES_CBC)
        pub const CRYPTO_MODE_AES_CBC : i32 = 2;

        /// public static final [CRYPTO_MODE_AES_CTR](https://developer.android.com/reference/android/media/MediaCodec.html#CRYPTO_MODE_AES_CTR)
        pub const CRYPTO_MODE_AES_CTR : i32 = 1;

        /// public static final [CRYPTO_MODE_UNENCRYPTED](https://developer.android.com/reference/android/media/MediaCodec.html#CRYPTO_MODE_UNENCRYPTED)
        pub const CRYPTO_MODE_UNENCRYPTED : i32 = 0;

        /// public static final [INFO_OUTPUT_BUFFERS_CHANGED](https://developer.android.com/reference/android/media/MediaCodec.html#INFO_OUTPUT_BUFFERS_CHANGED)
        #[deprecated] pub const INFO_OUTPUT_BUFFERS_CHANGED : i32 = -3;

        /// public static final [INFO_OUTPUT_FORMAT_CHANGED](https://developer.android.com/reference/android/media/MediaCodec.html#INFO_OUTPUT_FORMAT_CHANGED)
        pub const INFO_OUTPUT_FORMAT_CHANGED : i32 = -2;

        /// public static final [INFO_TRY_AGAIN_LATER](https://developer.android.com/reference/android/media/MediaCodec.html#INFO_TRY_AGAIN_LATER)
        pub const INFO_TRY_AGAIN_LATER : i32 = -1;

        /// public static final [PARAMETER_KEY_HDR10_PLUS_INFO](https://developer.android.com/reference/android/media/MediaCodec.html#PARAMETER_KEY_HDR10_PLUS_INFO)
        pub const PARAMETER_KEY_HDR10_PLUS_INFO : &'static str = "hdr10-plus-info";

        /// public static final [PARAMETER_KEY_OFFSET_TIME](https://developer.android.com/reference/android/media/MediaCodec.html#PARAMETER_KEY_OFFSET_TIME)
        pub const PARAMETER_KEY_OFFSET_TIME : &'static str = "time-offset-us";

        /// public static final [PARAMETER_KEY_REQUEST_SYNC_FRAME](https://developer.android.com/reference/android/media/MediaCodec.html#PARAMETER_KEY_REQUEST_SYNC_FRAME)
        pub const PARAMETER_KEY_REQUEST_SYNC_FRAME : &'static str = "request-sync";

        /// public static final [PARAMETER_KEY_SUSPEND](https://developer.android.com/reference/android/media/MediaCodec.html#PARAMETER_KEY_SUSPEND)
        pub const PARAMETER_KEY_SUSPEND : &'static str = "drop-input-frames";

        /// public static final [PARAMETER_KEY_SUSPEND_TIME](https://developer.android.com/reference/android/media/MediaCodec.html#PARAMETER_KEY_SUSPEND_TIME)
        pub const PARAMETER_KEY_SUSPEND_TIME : &'static str = "drop-start-time-us";

        /// public static final [PARAMETER_KEY_VIDEO_BITRATE](https://developer.android.com/reference/android/media/MediaCodec.html#PARAMETER_KEY_VIDEO_BITRATE)
        pub const PARAMETER_KEY_VIDEO_BITRATE : &'static str = "video-bitrate";

        /// public static final [VIDEO_SCALING_MODE_SCALE_TO_FIT](https://developer.android.com/reference/android/media/MediaCodec.html#VIDEO_SCALING_MODE_SCALE_TO_FIT)
        pub const VIDEO_SCALING_MODE_SCALE_TO_FIT : i32 = 1;

        /// public static final [VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING](https://developer.android.com/reference/android/media/MediaCodec.html#VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING)
        pub const VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING : i32 = 2;
    }
}
