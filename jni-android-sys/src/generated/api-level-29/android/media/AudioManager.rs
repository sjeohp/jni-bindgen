// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-media-AudioManager"))]
__jni_bindgen! {
    /// public class [AudioManager](https://developer.android.com/reference/android/media/AudioManager.html)
    ///
    /// Required feature: android-media-AudioManager
    public class AudioManager ("android/media/AudioManager") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [AudioManager](https://developer.android.com/reference/android/media/AudioManager.html#AudioManager())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::media::AudioManager>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/media/AudioManager", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioManager\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [dispatchMediaKeyEvent](https://developer.android.com/reference/android/media/AudioManager.html#dispatchMediaKeyEvent(android.view.KeyEvent))
        ///
        /// Required features: "android-view-KeyEvent"
        #[cfg(any(feature = "all", all(feature = "android-view-KeyEvent")))]
        pub fn dispatchMediaKeyEvent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::KeyEvent>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioManager", java.flags == PUBLIC, .name == "dispatchMediaKeyEvent", .descriptor == "(Landroid/view/KeyEvent;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioManager\0", "dispatchMediaKeyEvent\0", "(Landroid/view/KeyEvent;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isVolumeFixed](https://developer.android.com/reference/android/media/AudioManager.html#isVolumeFixed())
        pub fn isVolumeFixed<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioManager", java.flags == PUBLIC, .name == "isVolumeFixed", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioManager\0", "isVolumeFixed\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [adjustStreamVolume](https://developer.android.com/reference/android/media/AudioManager.html#adjustStreamVolume(int,%20int,%20int))
        pub fn adjustStreamVolume<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioManager", java.flags == PUBLIC, .name == "adjustStreamVolume", .descriptor == "(III)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioManager\0", "adjustStreamVolume\0", "(III)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [adjustVolume](https://developer.android.com/reference/android/media/AudioManager.html#adjustVolume(int,%20int))
        pub fn adjustVolume<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioManager", java.flags == PUBLIC, .name == "adjustVolume", .descriptor == "(II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioManager\0", "adjustVolume\0", "(II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [adjustSuggestedStreamVolume](https://developer.android.com/reference/android/media/AudioManager.html#adjustSuggestedStreamVolume(int,%20int,%20int))
        pub fn adjustSuggestedStreamVolume<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioManager", java.flags == PUBLIC, .name == "adjustSuggestedStreamVolume", .descriptor == "(III)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioManager\0", "adjustSuggestedStreamVolume\0", "(III)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRingerMode](https://developer.android.com/reference/android/media/AudioManager.html#getRingerMode())
        pub fn getRingerMode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioManager", java.flags == PUBLIC, .name == "getRingerMode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioManager\0", "getRingerMode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getStreamMaxVolume](https://developer.android.com/reference/android/media/AudioManager.html#getStreamMaxVolume(int))
        pub fn getStreamMaxVolume<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioManager", java.flags == PUBLIC, .name == "getStreamMaxVolume", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioManager\0", "getStreamMaxVolume\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getStreamMinVolume](https://developer.android.com/reference/android/media/AudioManager.html#getStreamMinVolume(int))
        pub fn getStreamMinVolume<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioManager", java.flags == PUBLIC, .name == "getStreamMinVolume", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioManager\0", "getStreamMinVolume\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getStreamVolume](https://developer.android.com/reference/android/media/AudioManager.html#getStreamVolume(int))
        pub fn getStreamVolume<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioManager", java.flags == PUBLIC, .name == "getStreamVolume", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioManager\0", "getStreamVolume\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getStreamVolumeDb](https://developer.android.com/reference/android/media/AudioManager.html#getStreamVolumeDb(int,%20int,%20int))
        pub fn getStreamVolumeDb<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioManager", java.flags == PUBLIC, .name == "getStreamVolumeDb", .descriptor == "(III)F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioManager\0", "getStreamVolumeDb\0", "(III)F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setRingerMode](https://developer.android.com/reference/android/media/AudioManager.html#setRingerMode(int))
        pub fn setRingerMode<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioManager", java.flags == PUBLIC, .name == "setRingerMode", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioManager\0", "setRingerMode\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setStreamVolume](https://developer.android.com/reference/android/media/AudioManager.html#setStreamVolume(int,%20int,%20int))
        pub fn setStreamVolume<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioManager", java.flags == PUBLIC, .name == "setStreamVolume", .descriptor == "(III)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioManager\0", "setStreamVolume\0", "(III)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setStreamSolo](https://developer.android.com/reference/android/media/AudioManager.html#setStreamSolo(int,%20boolean))
        #[deprecated] pub fn setStreamSolo<'env>(&'env self, arg0: i32, arg1: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioManager", java.flags == PUBLIC, .name == "setStreamSolo", .descriptor == "(IZ)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioManager\0", "setStreamSolo\0", "(IZ)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setStreamMute](https://developer.android.com/reference/android/media/AudioManager.html#setStreamMute(int,%20boolean))
        #[deprecated] pub fn setStreamMute<'env>(&'env self, arg0: i32, arg1: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioManager", java.flags == PUBLIC, .name == "setStreamMute", .descriptor == "(IZ)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioManager\0", "setStreamMute\0", "(IZ)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isStreamMute](https://developer.android.com/reference/android/media/AudioManager.html#isStreamMute(int))
        pub fn isStreamMute<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioManager", java.flags == PUBLIC, .name == "isStreamMute", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioManager\0", "isStreamMute\0", "(I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [shouldVibrate](https://developer.android.com/reference/android/media/AudioManager.html#shouldVibrate(int))
        #[deprecated] pub fn shouldVibrate<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioManager", java.flags == PUBLIC, .name == "shouldVibrate", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioManager\0", "shouldVibrate\0", "(I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getVibrateSetting](https://developer.android.com/reference/android/media/AudioManager.html#getVibrateSetting(int))
        #[deprecated] pub fn getVibrateSetting<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioManager", java.flags == PUBLIC, .name == "getVibrateSetting", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioManager\0", "getVibrateSetting\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setVibrateSetting](https://developer.android.com/reference/android/media/AudioManager.html#setVibrateSetting(int,%20int))
        #[deprecated] pub fn setVibrateSetting<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioManager", java.flags == PUBLIC, .name == "setVibrateSetting", .descriptor == "(II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioManager\0", "setVibrateSetting\0", "(II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setSpeakerphoneOn](https://developer.android.com/reference/android/media/AudioManager.html#setSpeakerphoneOn(boolean))
        pub fn setSpeakerphoneOn<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioManager", java.flags == PUBLIC, .name == "setSpeakerphoneOn", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioManager\0", "setSpeakerphoneOn\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isSpeakerphoneOn](https://developer.android.com/reference/android/media/AudioManager.html#isSpeakerphoneOn())
        pub fn isSpeakerphoneOn<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioManager", java.flags == PUBLIC, .name == "isSpeakerphoneOn", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioManager\0", "isSpeakerphoneOn\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAllowedCapturePolicy](https://developer.android.com/reference/android/media/AudioManager.html#setAllowedCapturePolicy(int))
        pub fn setAllowedCapturePolicy<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioManager", java.flags == PUBLIC, .name == "setAllowedCapturePolicy", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioManager\0", "setAllowedCapturePolicy\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAllowedCapturePolicy](https://developer.android.com/reference/android/media/AudioManager.html#getAllowedCapturePolicy())
        pub fn getAllowedCapturePolicy<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioManager", java.flags == PUBLIC, .name == "getAllowedCapturePolicy", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioManager\0", "getAllowedCapturePolicy\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isOffloadedPlaybackSupported](https://developer.android.com/reference/android/media/AudioManager.html#isOffloadedPlaybackSupported(android.media.AudioFormat,%20android.media.AudioAttributes))
        ///
        /// Required features: "android-media-AudioAttributes", "android-media-AudioFormat"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioAttributes", feature = "android-media-AudioFormat")))]
        pub fn isOffloadedPlaybackSupported<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::AudioFormat>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::AudioAttributes>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioManager", java.flags == PUBLIC | STATIC, .name == "isOffloadedPlaybackSupported", .descriptor == "(Landroid/media/AudioFormat;Landroid/media/AudioAttributes;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/media/AudioManager\0", "isOffloadedPlaybackSupported\0", "(Landroid/media/AudioFormat;Landroid/media/AudioAttributes;)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isBluetoothScoAvailableOffCall](https://developer.android.com/reference/android/media/AudioManager.html#isBluetoothScoAvailableOffCall())
        pub fn isBluetoothScoAvailableOffCall<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioManager", java.flags == PUBLIC, .name == "isBluetoothScoAvailableOffCall", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioManager\0", "isBluetoothScoAvailableOffCall\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [startBluetoothSco](https://developer.android.com/reference/android/media/AudioManager.html#startBluetoothSco())
        pub fn startBluetoothSco<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioManager", java.flags == PUBLIC, .name == "startBluetoothSco", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioManager\0", "startBluetoothSco\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [stopBluetoothSco](https://developer.android.com/reference/android/media/AudioManager.html#stopBluetoothSco())
        pub fn stopBluetoothSco<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioManager", java.flags == PUBLIC, .name == "stopBluetoothSco", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioManager\0", "stopBluetoothSco\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setBluetoothScoOn](https://developer.android.com/reference/android/media/AudioManager.html#setBluetoothScoOn(boolean))
        pub fn setBluetoothScoOn<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioManager", java.flags == PUBLIC, .name == "setBluetoothScoOn", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioManager\0", "setBluetoothScoOn\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isBluetoothScoOn](https://developer.android.com/reference/android/media/AudioManager.html#isBluetoothScoOn())
        pub fn isBluetoothScoOn<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioManager", java.flags == PUBLIC, .name == "isBluetoothScoOn", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioManager\0", "isBluetoothScoOn\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setBluetoothA2dpOn](https://developer.android.com/reference/android/media/AudioManager.html#setBluetoothA2dpOn(boolean))
        #[deprecated] pub fn setBluetoothA2dpOn<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioManager", java.flags == PUBLIC, .name == "setBluetoothA2dpOn", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioManager\0", "setBluetoothA2dpOn\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isBluetoothA2dpOn](https://developer.android.com/reference/android/media/AudioManager.html#isBluetoothA2dpOn())
        #[deprecated] pub fn isBluetoothA2dpOn<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioManager", java.flags == PUBLIC, .name == "isBluetoothA2dpOn", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioManager\0", "isBluetoothA2dpOn\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setWiredHeadsetOn](https://developer.android.com/reference/android/media/AudioManager.html#setWiredHeadsetOn(boolean))
        #[deprecated] pub fn setWiredHeadsetOn<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioManager", java.flags == PUBLIC, .name == "setWiredHeadsetOn", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioManager\0", "setWiredHeadsetOn\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isWiredHeadsetOn](https://developer.android.com/reference/android/media/AudioManager.html#isWiredHeadsetOn())
        #[deprecated] pub fn isWiredHeadsetOn<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioManager", java.flags == PUBLIC, .name == "isWiredHeadsetOn", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioManager\0", "isWiredHeadsetOn\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setMicrophoneMute](https://developer.android.com/reference/android/media/AudioManager.html#setMicrophoneMute(boolean))
        pub fn setMicrophoneMute<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioManager", java.flags == PUBLIC, .name == "setMicrophoneMute", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioManager\0", "setMicrophoneMute\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isMicrophoneMute](https://developer.android.com/reference/android/media/AudioManager.html#isMicrophoneMute())
        pub fn isMicrophoneMute<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioManager", java.flags == PUBLIC, .name == "isMicrophoneMute", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioManager\0", "isMicrophoneMute\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setMode](https://developer.android.com/reference/android/media/AudioManager.html#setMode(int))
        pub fn setMode<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioManager", java.flags == PUBLIC, .name == "setMode", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioManager\0", "setMode\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMode](https://developer.android.com/reference/android/media/AudioManager.html#getMode())
        pub fn getMode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioManager", java.flags == PUBLIC, .name == "getMode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioManager\0", "getMode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setRouting](https://developer.android.com/reference/android/media/AudioManager.html#setRouting(int,%20int,%20int))
        #[deprecated] pub fn setRouting<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioManager", java.flags == PUBLIC, .name == "setRouting", .descriptor == "(III)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioManager\0", "setRouting\0", "(III)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRouting](https://developer.android.com/reference/android/media/AudioManager.html#getRouting(int))
        #[deprecated] pub fn getRouting<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioManager", java.flags == PUBLIC, .name == "getRouting", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioManager\0", "getRouting\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isMusicActive](https://developer.android.com/reference/android/media/AudioManager.html#isMusicActive())
        pub fn isMusicActive<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioManager", java.flags == PUBLIC, .name == "isMusicActive", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioManager\0", "isMusicActive\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [generateAudioSessionId](https://developer.android.com/reference/android/media/AudioManager.html#generateAudioSessionId())
        pub fn generateAudioSessionId<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioManager", java.flags == PUBLIC, .name == "generateAudioSessionId", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioManager\0", "generateAudioSessionId\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setParameters](https://developer.android.com/reference/android/media/AudioManager.html#setParameters(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn setParameters<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioManager", java.flags == PUBLIC, .name == "setParameters", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioManager\0", "setParameters\0", "(Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getParameters](https://developer.android.com/reference/android/media/AudioManager.html#getParameters(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getParameters<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioManager", java.flags == PUBLIC, .name == "getParameters", .descriptor == "(Ljava/lang/String;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioManager\0", "getParameters\0", "(Ljava/lang/String;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [playSoundEffect](https://developer.android.com/reference/android/media/AudioManager.html#playSoundEffect(int))
        pub fn playSoundEffect_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioManager", java.flags == PUBLIC, .name == "playSoundEffect", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioManager\0", "playSoundEffect\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [playSoundEffect](https://developer.android.com/reference/android/media/AudioManager.html#playSoundEffect(int,%20float))
        pub fn playSoundEffect_int_float<'env>(&'env self, arg0: i32, arg1: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioManager", java.flags == PUBLIC, .name == "playSoundEffect", .descriptor == "(IF)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioManager\0", "playSoundEffect\0", "(IF)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [loadSoundEffects](https://developer.android.com/reference/android/media/AudioManager.html#loadSoundEffects())
        pub fn loadSoundEffects<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioManager", java.flags == PUBLIC, .name == "loadSoundEffects", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioManager\0", "loadSoundEffects\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unloadSoundEffects](https://developer.android.com/reference/android/media/AudioManager.html#unloadSoundEffects())
        pub fn unloadSoundEffects<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioManager", java.flags == PUBLIC, .name == "unloadSoundEffects", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioManager\0", "unloadSoundEffects\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [requestAudioFocus](https://developer.android.com/reference/android/media/AudioManager.html#requestAudioFocus(android.media.AudioManager.OnAudioFocusChangeListener,%20int,%20int))
        ///
        /// Required features: "android-media-AudioManager_OnAudioFocusChangeListener"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioManager_OnAudioFocusChangeListener")))]
        #[deprecated] pub fn requestAudioFocus_OnAudioFocusChangeListener_int_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::AudioManager_OnAudioFocusChangeListener>>, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioManager", java.flags == PUBLIC, .name == "requestAudioFocus", .descriptor == "(Landroid/media/AudioManager$OnAudioFocusChangeListener;II)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioManager\0", "requestAudioFocus\0", "(Landroid/media/AudioManager$OnAudioFocusChangeListener;II)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [requestAudioFocus](https://developer.android.com/reference/android/media/AudioManager.html#requestAudioFocus(android.media.AudioFocusRequest))
        ///
        /// Required features: "android-media-AudioFocusRequest"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioFocusRequest")))]
        pub fn requestAudioFocus_AudioFocusRequest<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::AudioFocusRequest>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioManager", java.flags == PUBLIC, .name == "requestAudioFocus", .descriptor == "(Landroid/media/AudioFocusRequest;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioManager\0", "requestAudioFocus\0", "(Landroid/media/AudioFocusRequest;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [abandonAudioFocusRequest](https://developer.android.com/reference/android/media/AudioManager.html#abandonAudioFocusRequest(android.media.AudioFocusRequest))
        ///
        /// Required features: "android-media-AudioFocusRequest"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioFocusRequest")))]
        pub fn abandonAudioFocusRequest<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::AudioFocusRequest>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioManager", java.flags == PUBLIC, .name == "abandonAudioFocusRequest", .descriptor == "(Landroid/media/AudioFocusRequest;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioManager\0", "abandonAudioFocusRequest\0", "(Landroid/media/AudioFocusRequest;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [abandonAudioFocus](https://developer.android.com/reference/android/media/AudioManager.html#abandonAudioFocus(android.media.AudioManager.OnAudioFocusChangeListener))
        ///
        /// Required features: "android-media-AudioManager_OnAudioFocusChangeListener"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioManager_OnAudioFocusChangeListener")))]
        #[deprecated] pub fn abandonAudioFocus<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::AudioManager_OnAudioFocusChangeListener>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioManager", java.flags == PUBLIC, .name == "abandonAudioFocus", .descriptor == "(Landroid/media/AudioManager$OnAudioFocusChangeListener;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioManager\0", "abandonAudioFocus\0", "(Landroid/media/AudioManager$OnAudioFocusChangeListener;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [registerMediaButtonEventReceiver](https://developer.android.com/reference/android/media/AudioManager.html#registerMediaButtonEventReceiver(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        #[deprecated] pub fn registerMediaButtonEventReceiver_ComponentName<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioManager", java.flags == PUBLIC, .name == "registerMediaButtonEventReceiver", .descriptor == "(Landroid/content/ComponentName;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioManager\0", "registerMediaButtonEventReceiver\0", "(Landroid/content/ComponentName;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [registerMediaButtonEventReceiver](https://developer.android.com/reference/android/media/AudioManager.html#registerMediaButtonEventReceiver(android.app.PendingIntent))
        ///
        /// Required features: "android-app-PendingIntent"
        #[cfg(any(feature = "all", all(feature = "android-app-PendingIntent")))]
        #[deprecated] pub fn registerMediaButtonEventReceiver_PendingIntent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::PendingIntent>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioManager", java.flags == PUBLIC, .name == "registerMediaButtonEventReceiver", .descriptor == "(Landroid/app/PendingIntent;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioManager\0", "registerMediaButtonEventReceiver\0", "(Landroid/app/PendingIntent;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unregisterMediaButtonEventReceiver](https://developer.android.com/reference/android/media/AudioManager.html#unregisterMediaButtonEventReceiver(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        #[deprecated] pub fn unregisterMediaButtonEventReceiver_ComponentName<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioManager", java.flags == PUBLIC, .name == "unregisterMediaButtonEventReceiver", .descriptor == "(Landroid/content/ComponentName;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioManager\0", "unregisterMediaButtonEventReceiver\0", "(Landroid/content/ComponentName;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unregisterMediaButtonEventReceiver](https://developer.android.com/reference/android/media/AudioManager.html#unregisterMediaButtonEventReceiver(android.app.PendingIntent))
        ///
        /// Required features: "android-app-PendingIntent"
        #[cfg(any(feature = "all", all(feature = "android-app-PendingIntent")))]
        #[deprecated] pub fn unregisterMediaButtonEventReceiver_PendingIntent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::PendingIntent>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioManager", java.flags == PUBLIC, .name == "unregisterMediaButtonEventReceiver", .descriptor == "(Landroid/app/PendingIntent;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioManager\0", "unregisterMediaButtonEventReceiver\0", "(Landroid/app/PendingIntent;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [registerRemoteControlClient](https://developer.android.com/reference/android/media/AudioManager.html#registerRemoteControlClient(android.media.RemoteControlClient))
        ///
        /// Required features: "android-media-RemoteControlClient"
        #[cfg(any(feature = "all", all(feature = "android-media-RemoteControlClient")))]
        #[deprecated] pub fn registerRemoteControlClient<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::RemoteControlClient>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioManager", java.flags == PUBLIC, .name == "registerRemoteControlClient", .descriptor == "(Landroid/media/RemoteControlClient;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioManager\0", "registerRemoteControlClient\0", "(Landroid/media/RemoteControlClient;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unregisterRemoteControlClient](https://developer.android.com/reference/android/media/AudioManager.html#unregisterRemoteControlClient(android.media.RemoteControlClient))
        ///
        /// Required features: "android-media-RemoteControlClient"
        #[cfg(any(feature = "all", all(feature = "android-media-RemoteControlClient")))]
        #[deprecated] pub fn unregisterRemoteControlClient<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::RemoteControlClient>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioManager", java.flags == PUBLIC, .name == "unregisterRemoteControlClient", .descriptor == "(Landroid/media/RemoteControlClient;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioManager\0", "unregisterRemoteControlClient\0", "(Landroid/media/RemoteControlClient;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [registerRemoteController](https://developer.android.com/reference/android/media/AudioManager.html#registerRemoteController(android.media.RemoteController))
        ///
        /// Required features: "android-media-RemoteController"
        #[cfg(any(feature = "all", all(feature = "android-media-RemoteController")))]
        #[deprecated] pub fn registerRemoteController<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::RemoteController>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioManager", java.flags == PUBLIC, .name == "registerRemoteController", .descriptor == "(Landroid/media/RemoteController;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioManager\0", "registerRemoteController\0", "(Landroid/media/RemoteController;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unregisterRemoteController](https://developer.android.com/reference/android/media/AudioManager.html#unregisterRemoteController(android.media.RemoteController))
        ///
        /// Required features: "android-media-RemoteController"
        #[cfg(any(feature = "all", all(feature = "android-media-RemoteController")))]
        #[deprecated] pub fn unregisterRemoteController<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::RemoteController>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioManager", java.flags == PUBLIC, .name == "unregisterRemoteController", .descriptor == "(Landroid/media/RemoteController;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioManager\0", "unregisterRemoteController\0", "(Landroid/media/RemoteController;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [registerAudioPlaybackCallback](https://developer.android.com/reference/android/media/AudioManager.html#registerAudioPlaybackCallback(android.media.AudioManager.AudioPlaybackCallback,%20android.os.Handler))
        ///
        /// Required features: "android-media-AudioManager_AudioPlaybackCallback", "android-os-Handler"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioManager_AudioPlaybackCallback", feature = "android-os-Handler")))]
        pub fn registerAudioPlaybackCallback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::AudioManager_AudioPlaybackCallback>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioManager", java.flags == PUBLIC, .name == "registerAudioPlaybackCallback", .descriptor == "(Landroid/media/AudioManager$AudioPlaybackCallback;Landroid/os/Handler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioManager\0", "registerAudioPlaybackCallback\0", "(Landroid/media/AudioManager$AudioPlaybackCallback;Landroid/os/Handler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unregisterAudioPlaybackCallback](https://developer.android.com/reference/android/media/AudioManager.html#unregisterAudioPlaybackCallback(android.media.AudioManager.AudioPlaybackCallback))
        ///
        /// Required features: "android-media-AudioManager_AudioPlaybackCallback"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioManager_AudioPlaybackCallback")))]
        pub fn unregisterAudioPlaybackCallback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::AudioManager_AudioPlaybackCallback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioManager", java.flags == PUBLIC, .name == "unregisterAudioPlaybackCallback", .descriptor == "(Landroid/media/AudioManager$AudioPlaybackCallback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioManager\0", "unregisterAudioPlaybackCallback\0", "(Landroid/media/AudioManager$AudioPlaybackCallback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getActivePlaybackConfigurations](https://developer.android.com/reference/android/media/AudioManager.html#getActivePlaybackConfigurations())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getActivePlaybackConfigurations<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioManager", java.flags == PUBLIC, .name == "getActivePlaybackConfigurations", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioManager\0", "getActivePlaybackConfigurations\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [registerAudioRecordingCallback](https://developer.android.com/reference/android/media/AudioManager.html#registerAudioRecordingCallback(android.media.AudioManager.AudioRecordingCallback,%20android.os.Handler))
        ///
        /// Required features: "android-media-AudioManager_AudioRecordingCallback", "android-os-Handler"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioManager_AudioRecordingCallback", feature = "android-os-Handler")))]
        pub fn registerAudioRecordingCallback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::AudioManager_AudioRecordingCallback>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioManager", java.flags == PUBLIC, .name == "registerAudioRecordingCallback", .descriptor == "(Landroid/media/AudioManager$AudioRecordingCallback;Landroid/os/Handler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioManager\0", "registerAudioRecordingCallback\0", "(Landroid/media/AudioManager$AudioRecordingCallback;Landroid/os/Handler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unregisterAudioRecordingCallback](https://developer.android.com/reference/android/media/AudioManager.html#unregisterAudioRecordingCallback(android.media.AudioManager.AudioRecordingCallback))
        ///
        /// Required features: "android-media-AudioManager_AudioRecordingCallback"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioManager_AudioRecordingCallback")))]
        pub fn unregisterAudioRecordingCallback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::AudioManager_AudioRecordingCallback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioManager", java.flags == PUBLIC, .name == "unregisterAudioRecordingCallback", .descriptor == "(Landroid/media/AudioManager$AudioRecordingCallback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioManager\0", "unregisterAudioRecordingCallback\0", "(Landroid/media/AudioManager$AudioRecordingCallback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getActiveRecordingConfigurations](https://developer.android.com/reference/android/media/AudioManager.html#getActiveRecordingConfigurations())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getActiveRecordingConfigurations<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioManager", java.flags == PUBLIC, .name == "getActiveRecordingConfigurations", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioManager\0", "getActiveRecordingConfigurations\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getProperty](https://developer.android.com/reference/android/media/AudioManager.html#getProperty(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getProperty<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioManager", java.flags == PUBLIC, .name == "getProperty", .descriptor == "(Ljava/lang/String;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioManager\0", "getProperty\0", "(Ljava/lang/String;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDevices](https://developer.android.com/reference/android/media/AudioManager.html#getDevices(int))
        ///
        /// Required features: "android-media-AudioDeviceInfo"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioDeviceInfo")))]
        pub fn getDevices<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::android::media::AudioDeviceInfo, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioManager", java.flags == PUBLIC, .name == "getDevices", .descriptor == "(I)[Landroid/media/AudioDeviceInfo;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioManager\0", "getDevices\0", "(I)[Landroid/media/AudioDeviceInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [registerAudioDeviceCallback](https://developer.android.com/reference/android/media/AudioManager.html#registerAudioDeviceCallback(android.media.AudioDeviceCallback,%20android.os.Handler))
        ///
        /// Required features: "android-media-AudioDeviceCallback", "android-os-Handler"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioDeviceCallback", feature = "android-os-Handler")))]
        pub fn registerAudioDeviceCallback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::AudioDeviceCallback>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioManager", java.flags == PUBLIC, .name == "registerAudioDeviceCallback", .descriptor == "(Landroid/media/AudioDeviceCallback;Landroid/os/Handler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioManager\0", "registerAudioDeviceCallback\0", "(Landroid/media/AudioDeviceCallback;Landroid/os/Handler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unregisterAudioDeviceCallback](https://developer.android.com/reference/android/media/AudioManager.html#unregisterAudioDeviceCallback(android.media.AudioDeviceCallback))
        ///
        /// Required features: "android-media-AudioDeviceCallback"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioDeviceCallback")))]
        pub fn unregisterAudioDeviceCallback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::AudioDeviceCallback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioManager", java.flags == PUBLIC, .name == "unregisterAudioDeviceCallback", .descriptor == "(Landroid/media/AudioDeviceCallback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioManager\0", "unregisterAudioDeviceCallback\0", "(Landroid/media/AudioDeviceCallback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMicrophones](https://developer.android.com/reference/android/media/AudioManager.html#getMicrophones())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getMicrophones<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioManager", java.flags == PUBLIC, .name == "getMicrophones", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioManager\0", "getMicrophones\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isHapticPlaybackSupported](https://developer.android.com/reference/android/media/AudioManager.html#isHapticPlaybackSupported())
        pub fn isHapticPlaybackSupported<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioManager", java.flags == PUBLIC | STATIC, .name == "isHapticPlaybackSupported", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/media/AudioManager\0", "isHapticPlaybackSupported\0", "()Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [ACTION_AUDIO_BECOMING_NOISY](https://developer.android.com/reference/android/media/AudioManager.html#ACTION_AUDIO_BECOMING_NOISY)
        pub const ACTION_AUDIO_BECOMING_NOISY : &'static str = "android.media.AUDIO_BECOMING_NOISY";

        /// public static final [ACTION_HDMI_AUDIO_PLUG](https://developer.android.com/reference/android/media/AudioManager.html#ACTION_HDMI_AUDIO_PLUG)
        pub const ACTION_HDMI_AUDIO_PLUG : &'static str = "android.media.action.HDMI_AUDIO_PLUG";

        /// public static final [ACTION_HEADSET_PLUG](https://developer.android.com/reference/android/media/AudioManager.html#ACTION_HEADSET_PLUG)
        pub const ACTION_HEADSET_PLUG : &'static str = "android.intent.action.HEADSET_PLUG";

        /// public static final [ACTION_MICROPHONE_MUTE_CHANGED](https://developer.android.com/reference/android/media/AudioManager.html#ACTION_MICROPHONE_MUTE_CHANGED)
        pub const ACTION_MICROPHONE_MUTE_CHANGED : &'static str = "android.media.action.MICROPHONE_MUTE_CHANGED";

        /// public static final [ACTION_SCO_AUDIO_STATE_CHANGED](https://developer.android.com/reference/android/media/AudioManager.html#ACTION_SCO_AUDIO_STATE_CHANGED)
        #[deprecated] pub const ACTION_SCO_AUDIO_STATE_CHANGED : &'static str = "android.media.SCO_AUDIO_STATE_CHANGED";

        /// public static final [ACTION_SCO_AUDIO_STATE_UPDATED](https://developer.android.com/reference/android/media/AudioManager.html#ACTION_SCO_AUDIO_STATE_UPDATED)
        pub const ACTION_SCO_AUDIO_STATE_UPDATED : &'static str = "android.media.ACTION_SCO_AUDIO_STATE_UPDATED";

        /// public static final [ACTION_SPEAKERPHONE_STATE_CHANGED](https://developer.android.com/reference/android/media/AudioManager.html#ACTION_SPEAKERPHONE_STATE_CHANGED)
        pub const ACTION_SPEAKERPHONE_STATE_CHANGED : &'static str = "android.media.action.SPEAKERPHONE_STATE_CHANGED";

        /// public static final [ADJUST_LOWER](https://developer.android.com/reference/android/media/AudioManager.html#ADJUST_LOWER)
        pub const ADJUST_LOWER : i32 = -1;

        /// public static final [ADJUST_MUTE](https://developer.android.com/reference/android/media/AudioManager.html#ADJUST_MUTE)
        pub const ADJUST_MUTE : i32 = -100;

        /// public static final [ADJUST_RAISE](https://developer.android.com/reference/android/media/AudioManager.html#ADJUST_RAISE)
        pub const ADJUST_RAISE : i32 = 1;

        /// public static final [ADJUST_SAME](https://developer.android.com/reference/android/media/AudioManager.html#ADJUST_SAME)
        pub const ADJUST_SAME : i32 = 0;

        /// public static final [ADJUST_TOGGLE_MUTE](https://developer.android.com/reference/android/media/AudioManager.html#ADJUST_TOGGLE_MUTE)
        pub const ADJUST_TOGGLE_MUTE : i32 = 101;

        /// public static final [ADJUST_UNMUTE](https://developer.android.com/reference/android/media/AudioManager.html#ADJUST_UNMUTE)
        pub const ADJUST_UNMUTE : i32 = 100;

        /// public static final [AUDIOFOCUS_GAIN](https://developer.android.com/reference/android/media/AudioManager.html#AUDIOFOCUS_GAIN)
        pub const AUDIOFOCUS_GAIN : i32 = 1;

        /// public static final [AUDIOFOCUS_GAIN_TRANSIENT](https://developer.android.com/reference/android/media/AudioManager.html#AUDIOFOCUS_GAIN_TRANSIENT)
        pub const AUDIOFOCUS_GAIN_TRANSIENT : i32 = 2;

        /// public static final [AUDIOFOCUS_GAIN_TRANSIENT_EXCLUSIVE](https://developer.android.com/reference/android/media/AudioManager.html#AUDIOFOCUS_GAIN_TRANSIENT_EXCLUSIVE)
        pub const AUDIOFOCUS_GAIN_TRANSIENT_EXCLUSIVE : i32 = 4;

        /// public static final [AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK](https://developer.android.com/reference/android/media/AudioManager.html#AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK)
        pub const AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK : i32 = 3;

        /// public static final [AUDIOFOCUS_LOSS](https://developer.android.com/reference/android/media/AudioManager.html#AUDIOFOCUS_LOSS)
        pub const AUDIOFOCUS_LOSS : i32 = -1;

        /// public static final [AUDIOFOCUS_LOSS_TRANSIENT](https://developer.android.com/reference/android/media/AudioManager.html#AUDIOFOCUS_LOSS_TRANSIENT)
        pub const AUDIOFOCUS_LOSS_TRANSIENT : i32 = -2;

        /// public static final [AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK](https://developer.android.com/reference/android/media/AudioManager.html#AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK)
        pub const AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK : i32 = -3;

        /// public static final [AUDIOFOCUS_NONE](https://developer.android.com/reference/android/media/AudioManager.html#AUDIOFOCUS_NONE)
        pub const AUDIOFOCUS_NONE : i32 = 0;

        /// public static final [AUDIOFOCUS_REQUEST_DELAYED](https://developer.android.com/reference/android/media/AudioManager.html#AUDIOFOCUS_REQUEST_DELAYED)
        pub const AUDIOFOCUS_REQUEST_DELAYED : i32 = 2;

        /// public static final [AUDIOFOCUS_REQUEST_FAILED](https://developer.android.com/reference/android/media/AudioManager.html#AUDIOFOCUS_REQUEST_FAILED)
        pub const AUDIOFOCUS_REQUEST_FAILED : i32 = 0;

        /// public static final [AUDIOFOCUS_REQUEST_GRANTED](https://developer.android.com/reference/android/media/AudioManager.html#AUDIOFOCUS_REQUEST_GRANTED)
        pub const AUDIOFOCUS_REQUEST_GRANTED : i32 = 1;

        /// public static final [AUDIO_SESSION_ID_GENERATE](https://developer.android.com/reference/android/media/AudioManager.html#AUDIO_SESSION_ID_GENERATE)
        pub const AUDIO_SESSION_ID_GENERATE : i32 = 0;

        /// public static final [ERROR](https://developer.android.com/reference/android/media/AudioManager.html#ERROR)
        pub const ERROR : i32 = -1;

        /// public static final [ERROR_DEAD_OBJECT](https://developer.android.com/reference/android/media/AudioManager.html#ERROR_DEAD_OBJECT)
        pub const ERROR_DEAD_OBJECT : i32 = -6;

        /// public static final [EXTRA_AUDIO_PLUG_STATE](https://developer.android.com/reference/android/media/AudioManager.html#EXTRA_AUDIO_PLUG_STATE)
        pub const EXTRA_AUDIO_PLUG_STATE : &'static str = "android.media.extra.AUDIO_PLUG_STATE";

        /// public static final [EXTRA_ENCODINGS](https://developer.android.com/reference/android/media/AudioManager.html#EXTRA_ENCODINGS)
        pub const EXTRA_ENCODINGS : &'static str = "android.media.extra.ENCODINGS";

        /// public static final [EXTRA_MAX_CHANNEL_COUNT](https://developer.android.com/reference/android/media/AudioManager.html#EXTRA_MAX_CHANNEL_COUNT)
        pub const EXTRA_MAX_CHANNEL_COUNT : &'static str = "android.media.extra.MAX_CHANNEL_COUNT";

        /// public static final [EXTRA_RINGER_MODE](https://developer.android.com/reference/android/media/AudioManager.html#EXTRA_RINGER_MODE)
        pub const EXTRA_RINGER_MODE : &'static str = "android.media.EXTRA_RINGER_MODE";

        /// public static final [EXTRA_SCO_AUDIO_PREVIOUS_STATE](https://developer.android.com/reference/android/media/AudioManager.html#EXTRA_SCO_AUDIO_PREVIOUS_STATE)
        pub const EXTRA_SCO_AUDIO_PREVIOUS_STATE : &'static str = "android.media.extra.SCO_AUDIO_PREVIOUS_STATE";

        /// public static final [EXTRA_SCO_AUDIO_STATE](https://developer.android.com/reference/android/media/AudioManager.html#EXTRA_SCO_AUDIO_STATE)
        pub const EXTRA_SCO_AUDIO_STATE : &'static str = "android.media.extra.SCO_AUDIO_STATE";

        /// public static final [EXTRA_VIBRATE_SETTING](https://developer.android.com/reference/android/media/AudioManager.html#EXTRA_VIBRATE_SETTING)
        #[deprecated] pub const EXTRA_VIBRATE_SETTING : &'static str = "android.media.EXTRA_VIBRATE_SETTING";

        /// public static final [EXTRA_VIBRATE_TYPE](https://developer.android.com/reference/android/media/AudioManager.html#EXTRA_VIBRATE_TYPE)
        #[deprecated] pub const EXTRA_VIBRATE_TYPE : &'static str = "android.media.EXTRA_VIBRATE_TYPE";

        /// public static final [FLAG_ALLOW_RINGER_MODES](https://developer.android.com/reference/android/media/AudioManager.html#FLAG_ALLOW_RINGER_MODES)
        pub const FLAG_ALLOW_RINGER_MODES : i32 = 2;

        /// public static final [FLAG_PLAY_SOUND](https://developer.android.com/reference/android/media/AudioManager.html#FLAG_PLAY_SOUND)
        pub const FLAG_PLAY_SOUND : i32 = 4;

        /// public static final [FLAG_REMOVE_SOUND_AND_VIBRATE](https://developer.android.com/reference/android/media/AudioManager.html#FLAG_REMOVE_SOUND_AND_VIBRATE)
        pub const FLAG_REMOVE_SOUND_AND_VIBRATE : i32 = 8;

        /// public static final [FLAG_SHOW_UI](https://developer.android.com/reference/android/media/AudioManager.html#FLAG_SHOW_UI)
        pub const FLAG_SHOW_UI : i32 = 1;

        /// public static final [FLAG_VIBRATE](https://developer.android.com/reference/android/media/AudioManager.html#FLAG_VIBRATE)
        pub const FLAG_VIBRATE : i32 = 16;

        /// public static final [FX_FOCUS_NAVIGATION_DOWN](https://developer.android.com/reference/android/media/AudioManager.html#FX_FOCUS_NAVIGATION_DOWN)
        pub const FX_FOCUS_NAVIGATION_DOWN : i32 = 2;

        /// public static final [FX_FOCUS_NAVIGATION_LEFT](https://developer.android.com/reference/android/media/AudioManager.html#FX_FOCUS_NAVIGATION_LEFT)
        pub const FX_FOCUS_NAVIGATION_LEFT : i32 = 3;

        /// public static final [FX_FOCUS_NAVIGATION_RIGHT](https://developer.android.com/reference/android/media/AudioManager.html#FX_FOCUS_NAVIGATION_RIGHT)
        pub const FX_FOCUS_NAVIGATION_RIGHT : i32 = 4;

        /// public static final [FX_FOCUS_NAVIGATION_UP](https://developer.android.com/reference/android/media/AudioManager.html#FX_FOCUS_NAVIGATION_UP)
        pub const FX_FOCUS_NAVIGATION_UP : i32 = 1;

        /// public static final [FX_KEYPRESS_DELETE](https://developer.android.com/reference/android/media/AudioManager.html#FX_KEYPRESS_DELETE)
        pub const FX_KEYPRESS_DELETE : i32 = 7;

        /// public static final [FX_KEYPRESS_INVALID](https://developer.android.com/reference/android/media/AudioManager.html#FX_KEYPRESS_INVALID)
        pub const FX_KEYPRESS_INVALID : i32 = 9;

        /// public static final [FX_KEYPRESS_RETURN](https://developer.android.com/reference/android/media/AudioManager.html#FX_KEYPRESS_RETURN)
        pub const FX_KEYPRESS_RETURN : i32 = 8;

        /// public static final [FX_KEYPRESS_SPACEBAR](https://developer.android.com/reference/android/media/AudioManager.html#FX_KEYPRESS_SPACEBAR)
        pub const FX_KEYPRESS_SPACEBAR : i32 = 6;

        /// public static final [FX_KEYPRESS_STANDARD](https://developer.android.com/reference/android/media/AudioManager.html#FX_KEYPRESS_STANDARD)
        pub const FX_KEYPRESS_STANDARD : i32 = 5;

        /// public static final [FX_KEY_CLICK](https://developer.android.com/reference/android/media/AudioManager.html#FX_KEY_CLICK)
        pub const FX_KEY_CLICK : i32 = 0;

        /// public static final [GET_DEVICES_ALL](https://developer.android.com/reference/android/media/AudioManager.html#GET_DEVICES_ALL)
        pub const GET_DEVICES_ALL : i32 = 3;

        /// public static final [GET_DEVICES_INPUTS](https://developer.android.com/reference/android/media/AudioManager.html#GET_DEVICES_INPUTS)
        pub const GET_DEVICES_INPUTS : i32 = 1;

        /// public static final [GET_DEVICES_OUTPUTS](https://developer.android.com/reference/android/media/AudioManager.html#GET_DEVICES_OUTPUTS)
        pub const GET_DEVICES_OUTPUTS : i32 = 2;

        /// public static final [MODE_CURRENT](https://developer.android.com/reference/android/media/AudioManager.html#MODE_CURRENT)
        pub const MODE_CURRENT : i32 = -1;

        /// public static final [MODE_INVALID](https://developer.android.com/reference/android/media/AudioManager.html#MODE_INVALID)
        pub const MODE_INVALID : i32 = -2;

        /// public static final [MODE_IN_CALL](https://developer.android.com/reference/android/media/AudioManager.html#MODE_IN_CALL)
        pub const MODE_IN_CALL : i32 = 2;

        /// public static final [MODE_IN_COMMUNICATION](https://developer.android.com/reference/android/media/AudioManager.html#MODE_IN_COMMUNICATION)
        pub const MODE_IN_COMMUNICATION : i32 = 3;

        /// public static final [MODE_NORMAL](https://developer.android.com/reference/android/media/AudioManager.html#MODE_NORMAL)
        pub const MODE_NORMAL : i32 = 0;

        /// public static final [MODE_RINGTONE](https://developer.android.com/reference/android/media/AudioManager.html#MODE_RINGTONE)
        pub const MODE_RINGTONE : i32 = 1;

        /// public static final [NUM_STREAMS](https://developer.android.com/reference/android/media/AudioManager.html#NUM_STREAMS)
        #[deprecated] pub const NUM_STREAMS : i32 = 5;

        /// public static final [PROPERTY_OUTPUT_FRAMES_PER_BUFFER](https://developer.android.com/reference/android/media/AudioManager.html#PROPERTY_OUTPUT_FRAMES_PER_BUFFER)
        pub const PROPERTY_OUTPUT_FRAMES_PER_BUFFER : &'static str = "android.media.property.OUTPUT_FRAMES_PER_BUFFER";

        /// public static final [PROPERTY_OUTPUT_SAMPLE_RATE](https://developer.android.com/reference/android/media/AudioManager.html#PROPERTY_OUTPUT_SAMPLE_RATE)
        pub const PROPERTY_OUTPUT_SAMPLE_RATE : &'static str = "android.media.property.OUTPUT_SAMPLE_RATE";

        /// public static final [PROPERTY_SUPPORT_AUDIO_SOURCE_UNPROCESSED](https://developer.android.com/reference/android/media/AudioManager.html#PROPERTY_SUPPORT_AUDIO_SOURCE_UNPROCESSED)
        pub const PROPERTY_SUPPORT_AUDIO_SOURCE_UNPROCESSED : &'static str = "android.media.property.SUPPORT_AUDIO_SOURCE_UNPROCESSED";

        /// public static final [PROPERTY_SUPPORT_MIC_NEAR_ULTRASOUND](https://developer.android.com/reference/android/media/AudioManager.html#PROPERTY_SUPPORT_MIC_NEAR_ULTRASOUND)
        pub const PROPERTY_SUPPORT_MIC_NEAR_ULTRASOUND : &'static str = "android.media.property.SUPPORT_MIC_NEAR_ULTRASOUND";

        /// public static final [PROPERTY_SUPPORT_SPEAKER_NEAR_ULTRASOUND](https://developer.android.com/reference/android/media/AudioManager.html#PROPERTY_SUPPORT_SPEAKER_NEAR_ULTRASOUND)
        pub const PROPERTY_SUPPORT_SPEAKER_NEAR_ULTRASOUND : &'static str = "android.media.property.SUPPORT_SPEAKER_NEAR_ULTRASOUND";

        /// public static final [RINGER_MODE_CHANGED_ACTION](https://developer.android.com/reference/android/media/AudioManager.html#RINGER_MODE_CHANGED_ACTION)
        pub const RINGER_MODE_CHANGED_ACTION : &'static str = "android.media.RINGER_MODE_CHANGED";

        /// public static final [RINGER_MODE_NORMAL](https://developer.android.com/reference/android/media/AudioManager.html#RINGER_MODE_NORMAL)
        pub const RINGER_MODE_NORMAL : i32 = 2;

        /// public static final [RINGER_MODE_SILENT](https://developer.android.com/reference/android/media/AudioManager.html#RINGER_MODE_SILENT)
        pub const RINGER_MODE_SILENT : i32 = 0;

        /// public static final [RINGER_MODE_VIBRATE](https://developer.android.com/reference/android/media/AudioManager.html#RINGER_MODE_VIBRATE)
        pub const RINGER_MODE_VIBRATE : i32 = 1;

        /// public static final [ROUTE_ALL](https://developer.android.com/reference/android/media/AudioManager.html#ROUTE_ALL)
        #[deprecated] pub const ROUTE_ALL : i32 = -1;

        /// public static final [ROUTE_BLUETOOTH](https://developer.android.com/reference/android/media/AudioManager.html#ROUTE_BLUETOOTH)
        #[deprecated] pub const ROUTE_BLUETOOTH : i32 = 4;

        /// public static final [ROUTE_BLUETOOTH_A2DP](https://developer.android.com/reference/android/media/AudioManager.html#ROUTE_BLUETOOTH_A2DP)
        #[deprecated] pub const ROUTE_BLUETOOTH_A2DP : i32 = 16;

        /// public static final [ROUTE_BLUETOOTH_SCO](https://developer.android.com/reference/android/media/AudioManager.html#ROUTE_BLUETOOTH_SCO)
        #[deprecated] pub const ROUTE_BLUETOOTH_SCO : i32 = 4;

        /// public static final [ROUTE_EARPIECE](https://developer.android.com/reference/android/media/AudioManager.html#ROUTE_EARPIECE)
        #[deprecated] pub const ROUTE_EARPIECE : i32 = 1;

        /// public static final [ROUTE_HEADSET](https://developer.android.com/reference/android/media/AudioManager.html#ROUTE_HEADSET)
        #[deprecated] pub const ROUTE_HEADSET : i32 = 8;

        /// public static final [ROUTE_SPEAKER](https://developer.android.com/reference/android/media/AudioManager.html#ROUTE_SPEAKER)
        #[deprecated] pub const ROUTE_SPEAKER : i32 = 2;

        /// public static final [SCO_AUDIO_STATE_CONNECTED](https://developer.android.com/reference/android/media/AudioManager.html#SCO_AUDIO_STATE_CONNECTED)
        pub const SCO_AUDIO_STATE_CONNECTED : i32 = 1;

        /// public static final [SCO_AUDIO_STATE_CONNECTING](https://developer.android.com/reference/android/media/AudioManager.html#SCO_AUDIO_STATE_CONNECTING)
        pub const SCO_AUDIO_STATE_CONNECTING : i32 = 2;

        /// public static final [SCO_AUDIO_STATE_DISCONNECTED](https://developer.android.com/reference/android/media/AudioManager.html#SCO_AUDIO_STATE_DISCONNECTED)
        pub const SCO_AUDIO_STATE_DISCONNECTED : i32 = 0;

        /// public static final [SCO_AUDIO_STATE_ERROR](https://developer.android.com/reference/android/media/AudioManager.html#SCO_AUDIO_STATE_ERROR)
        pub const SCO_AUDIO_STATE_ERROR : i32 = -1;

        /// public static final [STREAM_ACCESSIBILITY](https://developer.android.com/reference/android/media/AudioManager.html#STREAM_ACCESSIBILITY)
        pub const STREAM_ACCESSIBILITY : i32 = 10;

        /// public static final [STREAM_ALARM](https://developer.android.com/reference/android/media/AudioManager.html#STREAM_ALARM)
        pub const STREAM_ALARM : i32 = 4;

        /// public static final [STREAM_DTMF](https://developer.android.com/reference/android/media/AudioManager.html#STREAM_DTMF)
        pub const STREAM_DTMF : i32 = 8;

        /// public static final [STREAM_MUSIC](https://developer.android.com/reference/android/media/AudioManager.html#STREAM_MUSIC)
        pub const STREAM_MUSIC : i32 = 3;

        /// public static final [STREAM_NOTIFICATION](https://developer.android.com/reference/android/media/AudioManager.html#STREAM_NOTIFICATION)
        pub const STREAM_NOTIFICATION : i32 = 5;

        /// public static final [STREAM_RING](https://developer.android.com/reference/android/media/AudioManager.html#STREAM_RING)
        pub const STREAM_RING : i32 = 2;

        /// public static final [STREAM_SYSTEM](https://developer.android.com/reference/android/media/AudioManager.html#STREAM_SYSTEM)
        pub const STREAM_SYSTEM : i32 = 1;

        /// public static final [STREAM_VOICE_CALL](https://developer.android.com/reference/android/media/AudioManager.html#STREAM_VOICE_CALL)
        pub const STREAM_VOICE_CALL : i32 = 0;

        /// public static final [USE_DEFAULT_STREAM_TYPE](https://developer.android.com/reference/android/media/AudioManager.html#USE_DEFAULT_STREAM_TYPE)
        pub const USE_DEFAULT_STREAM_TYPE : i32 = -2147483648;

        /// public static final [VIBRATE_SETTING_CHANGED_ACTION](https://developer.android.com/reference/android/media/AudioManager.html#VIBRATE_SETTING_CHANGED_ACTION)
        #[deprecated] pub const VIBRATE_SETTING_CHANGED_ACTION : &'static str = "android.media.VIBRATE_SETTING_CHANGED";

        /// public static final [VIBRATE_SETTING_OFF](https://developer.android.com/reference/android/media/AudioManager.html#VIBRATE_SETTING_OFF)
        #[deprecated] pub const VIBRATE_SETTING_OFF : i32 = 0;

        /// public static final [VIBRATE_SETTING_ON](https://developer.android.com/reference/android/media/AudioManager.html#VIBRATE_SETTING_ON)
        #[deprecated] pub const VIBRATE_SETTING_ON : i32 = 1;

        /// public static final [VIBRATE_SETTING_ONLY_SILENT](https://developer.android.com/reference/android/media/AudioManager.html#VIBRATE_SETTING_ONLY_SILENT)
        #[deprecated] pub const VIBRATE_SETTING_ONLY_SILENT : i32 = 2;

        /// public static final [VIBRATE_TYPE_NOTIFICATION](https://developer.android.com/reference/android/media/AudioManager.html#VIBRATE_TYPE_NOTIFICATION)
        #[deprecated] pub const VIBRATE_TYPE_NOTIFICATION : i32 = 1;

        /// public static final [VIBRATE_TYPE_RINGER](https://developer.android.com/reference/android/media/AudioManager.html#VIBRATE_TYPE_RINGER)
        #[deprecated] pub const VIBRATE_TYPE_RINGER : i32 = 0;
    }
}
