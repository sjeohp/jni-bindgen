// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-media-MediaCodecInfo_VideoCapabilities"))]
__jni_bindgen! {
    /// public final class [MediaCodecInfo.VideoCapabilities](https://developer.android.com/reference/android/media/MediaCodecInfo.VideoCapabilities.html)
    ///
    /// Required feature: android-media-MediaCodecInfo_VideoCapabilities
    public final class MediaCodecInfo_VideoCapabilities ("android/media/MediaCodecInfo$VideoCapabilities") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [VideoCapabilities](https://developer.android.com/reference/android/media/MediaCodecInfo.VideoCapabilities.html#VideoCapabilities())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::media::MediaCodecInfo_VideoCapabilities>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/media/MediaCodecInfo$VideoCapabilities", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodecInfo$VideoCapabilities\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getBitrateRange](https://developer.android.com/reference/android/media/MediaCodecInfo.VideoCapabilities.html#getBitrateRange())
        ///
        /// Required features: "android-util-Range"
        #[cfg(any(feature = "all", all(feature = "android-util-Range")))]
        pub fn getBitrateRange<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::util::Range>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodecInfo$VideoCapabilities", java.flags == PUBLIC, .name == "getBitrateRange", .descriptor == "()Landroid/util/Range;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodecInfo$VideoCapabilities\0", "getBitrateRange\0", "()Landroid/util/Range;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSupportedWidths](https://developer.android.com/reference/android/media/MediaCodecInfo.VideoCapabilities.html#getSupportedWidths())
        ///
        /// Required features: "android-util-Range"
        #[cfg(any(feature = "all", all(feature = "android-util-Range")))]
        pub fn getSupportedWidths<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::util::Range>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodecInfo$VideoCapabilities", java.flags == PUBLIC, .name == "getSupportedWidths", .descriptor == "()Landroid/util/Range;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodecInfo$VideoCapabilities\0", "getSupportedWidths\0", "()Landroid/util/Range;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSupportedHeights](https://developer.android.com/reference/android/media/MediaCodecInfo.VideoCapabilities.html#getSupportedHeights())
        ///
        /// Required features: "android-util-Range"
        #[cfg(any(feature = "all", all(feature = "android-util-Range")))]
        pub fn getSupportedHeights<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::util::Range>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodecInfo$VideoCapabilities", java.flags == PUBLIC, .name == "getSupportedHeights", .descriptor == "()Landroid/util/Range;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodecInfo$VideoCapabilities\0", "getSupportedHeights\0", "()Landroid/util/Range;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getWidthAlignment](https://developer.android.com/reference/android/media/MediaCodecInfo.VideoCapabilities.html#getWidthAlignment())
        pub fn getWidthAlignment<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodecInfo$VideoCapabilities", java.flags == PUBLIC, .name == "getWidthAlignment", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodecInfo$VideoCapabilities\0", "getWidthAlignment\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getHeightAlignment](https://developer.android.com/reference/android/media/MediaCodecInfo.VideoCapabilities.html#getHeightAlignment())
        pub fn getHeightAlignment<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodecInfo$VideoCapabilities", java.flags == PUBLIC, .name == "getHeightAlignment", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodecInfo$VideoCapabilities\0", "getHeightAlignment\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSupportedFrameRates](https://developer.android.com/reference/android/media/MediaCodecInfo.VideoCapabilities.html#getSupportedFrameRates())
        ///
        /// Required features: "android-util-Range"
        #[cfg(any(feature = "all", all(feature = "android-util-Range")))]
        pub fn getSupportedFrameRates<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::util::Range>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodecInfo$VideoCapabilities", java.flags == PUBLIC, .name == "getSupportedFrameRates", .descriptor == "()Landroid/util/Range;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodecInfo$VideoCapabilities\0", "getSupportedFrameRates\0", "()Landroid/util/Range;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSupportedWidthsFor](https://developer.android.com/reference/android/media/MediaCodecInfo.VideoCapabilities.html#getSupportedWidthsFor(int))
        ///
        /// Required features: "android-util-Range"
        #[cfg(any(feature = "all", all(feature = "android-util-Range")))]
        pub fn getSupportedWidthsFor<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::util::Range>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodecInfo$VideoCapabilities", java.flags == PUBLIC, .name == "getSupportedWidthsFor", .descriptor == "(I)Landroid/util/Range;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodecInfo$VideoCapabilities\0", "getSupportedWidthsFor\0", "(I)Landroid/util/Range;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSupportedHeightsFor](https://developer.android.com/reference/android/media/MediaCodecInfo.VideoCapabilities.html#getSupportedHeightsFor(int))
        ///
        /// Required features: "android-util-Range"
        #[cfg(any(feature = "all", all(feature = "android-util-Range")))]
        pub fn getSupportedHeightsFor<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::util::Range>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodecInfo$VideoCapabilities", java.flags == PUBLIC, .name == "getSupportedHeightsFor", .descriptor == "(I)Landroid/util/Range;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodecInfo$VideoCapabilities\0", "getSupportedHeightsFor\0", "(I)Landroid/util/Range;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSupportedFrameRatesFor](https://developer.android.com/reference/android/media/MediaCodecInfo.VideoCapabilities.html#getSupportedFrameRatesFor(int,%20int))
        ///
        /// Required features: "android-util-Range"
        #[cfg(any(feature = "all", all(feature = "android-util-Range")))]
        pub fn getSupportedFrameRatesFor<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::util::Range>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodecInfo$VideoCapabilities", java.flags == PUBLIC, .name == "getSupportedFrameRatesFor", .descriptor == "(II)Landroid/util/Range;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodecInfo$VideoCapabilities\0", "getSupportedFrameRatesFor\0", "(II)Landroid/util/Range;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAchievableFrameRatesFor](https://developer.android.com/reference/android/media/MediaCodecInfo.VideoCapabilities.html#getAchievableFrameRatesFor(int,%20int))
        ///
        /// Required features: "android-util-Range"
        #[cfg(any(feature = "all", all(feature = "android-util-Range")))]
        pub fn getAchievableFrameRatesFor<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::util::Range>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodecInfo$VideoCapabilities", java.flags == PUBLIC, .name == "getAchievableFrameRatesFor", .descriptor == "(II)Landroid/util/Range;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodecInfo$VideoCapabilities\0", "getAchievableFrameRatesFor\0", "(II)Landroid/util/Range;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSupportedPerformancePoints](https://developer.android.com/reference/android/media/MediaCodecInfo.VideoCapabilities.html#getSupportedPerformancePoints())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getSupportedPerformancePoints<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodecInfo$VideoCapabilities", java.flags == PUBLIC, .name == "getSupportedPerformancePoints", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodecInfo$VideoCapabilities\0", "getSupportedPerformancePoints\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [areSizeAndRateSupported](https://developer.android.com/reference/android/media/MediaCodecInfo.VideoCapabilities.html#areSizeAndRateSupported(int,%20int,%20double))
        pub fn areSizeAndRateSupported<'env>(&'env self, arg0: i32, arg1: i32, arg2: f64) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodecInfo$VideoCapabilities", java.flags == PUBLIC, .name == "areSizeAndRateSupported", .descriptor == "(IID)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodecInfo$VideoCapabilities\0", "areSizeAndRateSupported\0", "(IID)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isSizeSupported](https://developer.android.com/reference/android/media/MediaCodecInfo.VideoCapabilities.html#isSizeSupported(int,%20int))
        pub fn isSizeSupported<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaCodecInfo$VideoCapabilities", java.flags == PUBLIC, .name == "isSizeSupported", .descriptor == "(II)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaCodecInfo$VideoCapabilities\0", "isSizeSupported\0", "(II)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
