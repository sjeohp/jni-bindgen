// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-media-MediaDescription_Builder"))]
__jni_bindgen! {
    /// public class [MediaDescription.Builder](https://developer.android.com/reference/android/media/MediaDescription.Builder.html)
    ///
    /// Required feature: android-media-MediaDescription_Builder
    public class MediaDescription_Builder ("android/media/MediaDescription$Builder") extends crate::java::lang::Object {

        /// [Builder](https://developer.android.com/reference/android/media/MediaDescription.Builder.html#Builder())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::media::MediaDescription_Builder>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaDescription$Builder", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaDescription$Builder\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setMediaId](https://developer.android.com/reference/android/media/MediaDescription.Builder.html#setMediaId(java.lang.String))
        ///
        /// Required features: "android-media-MediaDescription_Builder", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaDescription_Builder", feature = "java-lang-String")))]
        pub fn setMediaId<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::MediaDescription_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaDescription$Builder", java.flags == PUBLIC, .name == "setMediaId", .descriptor == "(Ljava/lang/String;)Landroid/media/MediaDescription$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaDescription$Builder\0", "setMediaId\0", "(Ljava/lang/String;)Landroid/media/MediaDescription$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTitle](https://developer.android.com/reference/android/media/MediaDescription.Builder.html#setTitle(java.lang.CharSequence))
        ///
        /// Required features: "android-media-MediaDescription_Builder", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaDescription_Builder", feature = "java-lang-CharSequence")))]
        pub fn setTitle<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::MediaDescription_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaDescription$Builder", java.flags == PUBLIC, .name == "setTitle", .descriptor == "(Ljava/lang/CharSequence;)Landroid/media/MediaDescription$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaDescription$Builder\0", "setTitle\0", "(Ljava/lang/CharSequence;)Landroid/media/MediaDescription$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setSubtitle](https://developer.android.com/reference/android/media/MediaDescription.Builder.html#setSubtitle(java.lang.CharSequence))
        ///
        /// Required features: "android-media-MediaDescription_Builder", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaDescription_Builder", feature = "java-lang-CharSequence")))]
        pub fn setSubtitle<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::MediaDescription_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaDescription$Builder", java.flags == PUBLIC, .name == "setSubtitle", .descriptor == "(Ljava/lang/CharSequence;)Landroid/media/MediaDescription$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaDescription$Builder\0", "setSubtitle\0", "(Ljava/lang/CharSequence;)Landroid/media/MediaDescription$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDescription](https://developer.android.com/reference/android/media/MediaDescription.Builder.html#setDescription(java.lang.CharSequence))
        ///
        /// Required features: "android-media-MediaDescription_Builder", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaDescription_Builder", feature = "java-lang-CharSequence")))]
        pub fn setDescription<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::MediaDescription_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaDescription$Builder", java.flags == PUBLIC, .name == "setDescription", .descriptor == "(Ljava/lang/CharSequence;)Landroid/media/MediaDescription$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaDescription$Builder\0", "setDescription\0", "(Ljava/lang/CharSequence;)Landroid/media/MediaDescription$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setIconBitmap](https://developer.android.com/reference/android/media/MediaDescription.Builder.html#setIconBitmap(android.graphics.Bitmap))
        ///
        /// Required features: "android-graphics-Bitmap", "android-media-MediaDescription_Builder"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Bitmap", feature = "android-media-MediaDescription_Builder")))]
        pub fn setIconBitmap<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Bitmap>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::MediaDescription_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaDescription$Builder", java.flags == PUBLIC, .name == "setIconBitmap", .descriptor == "(Landroid/graphics/Bitmap;)Landroid/media/MediaDescription$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaDescription$Builder\0", "setIconBitmap\0", "(Landroid/graphics/Bitmap;)Landroid/media/MediaDescription$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setIconUri](https://developer.android.com/reference/android/media/MediaDescription.Builder.html#setIconUri(android.net.Uri))
        ///
        /// Required features: "android-media-MediaDescription_Builder", "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaDescription_Builder", feature = "android-net-Uri")))]
        pub fn setIconUri<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::MediaDescription_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaDescription$Builder", java.flags == PUBLIC, .name == "setIconUri", .descriptor == "(Landroid/net/Uri;)Landroid/media/MediaDescription$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaDescription$Builder\0", "setIconUri\0", "(Landroid/net/Uri;)Landroid/media/MediaDescription$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setExtras](https://developer.android.com/reference/android/media/MediaDescription.Builder.html#setExtras(android.os.Bundle))
        ///
        /// Required features: "android-media-MediaDescription_Builder", "android-os-Bundle"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaDescription_Builder", feature = "android-os-Bundle")))]
        pub fn setExtras<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::MediaDescription_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaDescription$Builder", java.flags == PUBLIC, .name == "setExtras", .descriptor == "(Landroid/os/Bundle;)Landroid/media/MediaDescription$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaDescription$Builder\0", "setExtras\0", "(Landroid/os/Bundle;)Landroid/media/MediaDescription$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setMediaUri](https://developer.android.com/reference/android/media/MediaDescription.Builder.html#setMediaUri(android.net.Uri))
        ///
        /// Required features: "android-media-MediaDescription_Builder", "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaDescription_Builder", feature = "android-net-Uri")))]
        pub fn setMediaUri<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::MediaDescription_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaDescription$Builder", java.flags == PUBLIC, .name == "setMediaUri", .descriptor == "(Landroid/net/Uri;)Landroid/media/MediaDescription$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaDescription$Builder\0", "setMediaUri\0", "(Landroid/net/Uri;)Landroid/media/MediaDescription$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [build](https://developer.android.com/reference/android/media/MediaDescription.Builder.html#build())
        ///
        /// Required features: "android-media-MediaDescription"
        #[cfg(any(feature = "all", all(feature = "android-media-MediaDescription")))]
        pub fn build<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::MediaDescription>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/MediaDescription$Builder", java.flags == PUBLIC, .name == "build", .descriptor == "()Landroid/media/MediaDescription;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/MediaDescription$Builder\0", "build\0", "()Landroid/media/MediaDescription;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
