// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-media-AudioDeviceInfo"))]
__jni_bindgen! {
    /// public final class [AudioDeviceInfo](https://developer.android.com/reference/android/media/AudioDeviceInfo.html)
    ///
    /// Required feature: android-media-AudioDeviceInfo
    public final class AudioDeviceInfo ("android/media/AudioDeviceInfo") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [AudioDeviceInfo](https://developer.android.com/reference/android/media/AudioDeviceInfo.html#AudioDeviceInfo())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::media::AudioDeviceInfo>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/media/AudioDeviceInfo", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioDeviceInfo\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [equals](https://developer.android.com/reference/android/media/AudioDeviceInfo.html#equals(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn equals<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioDeviceInfo", java.flags == PUBLIC, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioDeviceInfo\0", "equals\0", "(Ljava/lang/Object;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hashCode](https://developer.android.com/reference/android/media/AudioDeviceInfo.html#hashCode())
        pub fn hashCode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioDeviceInfo", java.flags == PUBLIC, .name == "hashCode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioDeviceInfo\0", "hashCode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getId](https://developer.android.com/reference/android/media/AudioDeviceInfo.html#getId())
        pub fn getId<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioDeviceInfo", java.flags == PUBLIC, .name == "getId", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioDeviceInfo\0", "getId\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getProductName](https://developer.android.com/reference/android/media/AudioDeviceInfo.html#getProductName())
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn getProductName<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::CharSequence>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioDeviceInfo", java.flags == PUBLIC, .name == "getProductName", .descriptor == "()Ljava/lang/CharSequence;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioDeviceInfo\0", "getProductName\0", "()Ljava/lang/CharSequence;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAddress](https://developer.android.com/reference/android/media/AudioDeviceInfo.html#getAddress())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getAddress<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioDeviceInfo", java.flags == PUBLIC, .name == "getAddress", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioDeviceInfo\0", "getAddress\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isSource](https://developer.android.com/reference/android/media/AudioDeviceInfo.html#isSource())
        pub fn isSource<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioDeviceInfo", java.flags == PUBLIC, .name == "isSource", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioDeviceInfo\0", "isSource\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isSink](https://developer.android.com/reference/android/media/AudioDeviceInfo.html#isSink())
        pub fn isSink<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioDeviceInfo", java.flags == PUBLIC, .name == "isSink", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioDeviceInfo\0", "isSink\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSampleRates](https://developer.android.com/reference/android/media/AudioDeviceInfo.html#getSampleRates())
        pub fn getSampleRates<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::IntArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioDeviceInfo", java.flags == PUBLIC, .name == "getSampleRates", .descriptor == "()[I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioDeviceInfo\0", "getSampleRates\0", "()[I\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getChannelMasks](https://developer.android.com/reference/android/media/AudioDeviceInfo.html#getChannelMasks())
        pub fn getChannelMasks<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::IntArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioDeviceInfo", java.flags == PUBLIC, .name == "getChannelMasks", .descriptor == "()[I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioDeviceInfo\0", "getChannelMasks\0", "()[I\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getChannelIndexMasks](https://developer.android.com/reference/android/media/AudioDeviceInfo.html#getChannelIndexMasks())
        pub fn getChannelIndexMasks<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::IntArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioDeviceInfo", java.flags == PUBLIC, .name == "getChannelIndexMasks", .descriptor == "()[I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioDeviceInfo\0", "getChannelIndexMasks\0", "()[I\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getChannelCounts](https://developer.android.com/reference/android/media/AudioDeviceInfo.html#getChannelCounts())
        pub fn getChannelCounts<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::IntArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioDeviceInfo", java.flags == PUBLIC, .name == "getChannelCounts", .descriptor == "()[I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioDeviceInfo\0", "getChannelCounts\0", "()[I\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getEncodings](https://developer.android.com/reference/android/media/AudioDeviceInfo.html#getEncodings())
        pub fn getEncodings<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::IntArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioDeviceInfo", java.flags == PUBLIC, .name == "getEncodings", .descriptor == "()[I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioDeviceInfo\0", "getEncodings\0", "()[I\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getType](https://developer.android.com/reference/android/media/AudioDeviceInfo.html#getType())
        pub fn getType<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/media/AudioDeviceInfo", java.flags == PUBLIC, .name == "getType", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/media/AudioDeviceInfo\0", "getType\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [TYPE_AUX_LINE](https://developer.android.com/reference/android/media/AudioDeviceInfo.html#TYPE_AUX_LINE)
        pub const TYPE_AUX_LINE : i32 = 19;

        /// public static final [TYPE_BLUETOOTH_A2DP](https://developer.android.com/reference/android/media/AudioDeviceInfo.html#TYPE_BLUETOOTH_A2DP)
        pub const TYPE_BLUETOOTH_A2DP : i32 = 8;

        /// public static final [TYPE_BLUETOOTH_SCO](https://developer.android.com/reference/android/media/AudioDeviceInfo.html#TYPE_BLUETOOTH_SCO)
        pub const TYPE_BLUETOOTH_SCO : i32 = 7;

        /// public static final [TYPE_BUILTIN_EARPIECE](https://developer.android.com/reference/android/media/AudioDeviceInfo.html#TYPE_BUILTIN_EARPIECE)
        pub const TYPE_BUILTIN_EARPIECE : i32 = 1;

        /// public static final [TYPE_BUILTIN_MIC](https://developer.android.com/reference/android/media/AudioDeviceInfo.html#TYPE_BUILTIN_MIC)
        pub const TYPE_BUILTIN_MIC : i32 = 15;

        /// public static final [TYPE_BUILTIN_SPEAKER](https://developer.android.com/reference/android/media/AudioDeviceInfo.html#TYPE_BUILTIN_SPEAKER)
        pub const TYPE_BUILTIN_SPEAKER : i32 = 2;

        /// public static final [TYPE_BUS](https://developer.android.com/reference/android/media/AudioDeviceInfo.html#TYPE_BUS)
        pub const TYPE_BUS : i32 = 21;

        /// public static final [TYPE_DOCK](https://developer.android.com/reference/android/media/AudioDeviceInfo.html#TYPE_DOCK)
        pub const TYPE_DOCK : i32 = 13;

        /// public static final [TYPE_FM](https://developer.android.com/reference/android/media/AudioDeviceInfo.html#TYPE_FM)
        pub const TYPE_FM : i32 = 14;

        /// public static final [TYPE_FM_TUNER](https://developer.android.com/reference/android/media/AudioDeviceInfo.html#TYPE_FM_TUNER)
        pub const TYPE_FM_TUNER : i32 = 16;

        /// public static final [TYPE_HDMI](https://developer.android.com/reference/android/media/AudioDeviceInfo.html#TYPE_HDMI)
        pub const TYPE_HDMI : i32 = 9;

        /// public static final [TYPE_HDMI_ARC](https://developer.android.com/reference/android/media/AudioDeviceInfo.html#TYPE_HDMI_ARC)
        pub const TYPE_HDMI_ARC : i32 = 10;

        /// public static final [TYPE_HEARING_AID](https://developer.android.com/reference/android/media/AudioDeviceInfo.html#TYPE_HEARING_AID)
        pub const TYPE_HEARING_AID : i32 = 23;

        /// public static final [TYPE_IP](https://developer.android.com/reference/android/media/AudioDeviceInfo.html#TYPE_IP)
        pub const TYPE_IP : i32 = 20;

        /// public static final [TYPE_LINE_ANALOG](https://developer.android.com/reference/android/media/AudioDeviceInfo.html#TYPE_LINE_ANALOG)
        pub const TYPE_LINE_ANALOG : i32 = 5;

        /// public static final [TYPE_LINE_DIGITAL](https://developer.android.com/reference/android/media/AudioDeviceInfo.html#TYPE_LINE_DIGITAL)
        pub const TYPE_LINE_DIGITAL : i32 = 6;

        /// public static final [TYPE_TELEPHONY](https://developer.android.com/reference/android/media/AudioDeviceInfo.html#TYPE_TELEPHONY)
        pub const TYPE_TELEPHONY : i32 = 18;

        /// public static final [TYPE_TV_TUNER](https://developer.android.com/reference/android/media/AudioDeviceInfo.html#TYPE_TV_TUNER)
        pub const TYPE_TV_TUNER : i32 = 17;

        /// public static final [TYPE_UNKNOWN](https://developer.android.com/reference/android/media/AudioDeviceInfo.html#TYPE_UNKNOWN)
        pub const TYPE_UNKNOWN : i32 = 0;

        /// public static final [TYPE_USB_ACCESSORY](https://developer.android.com/reference/android/media/AudioDeviceInfo.html#TYPE_USB_ACCESSORY)
        pub const TYPE_USB_ACCESSORY : i32 = 12;

        /// public static final [TYPE_USB_DEVICE](https://developer.android.com/reference/android/media/AudioDeviceInfo.html#TYPE_USB_DEVICE)
        pub const TYPE_USB_DEVICE : i32 = 11;

        /// public static final [TYPE_USB_HEADSET](https://developer.android.com/reference/android/media/AudioDeviceInfo.html#TYPE_USB_HEADSET)
        pub const TYPE_USB_HEADSET : i32 = 22;

        /// public static final [TYPE_WIRED_HEADPHONES](https://developer.android.com/reference/android/media/AudioDeviceInfo.html#TYPE_WIRED_HEADPHONES)
        pub const TYPE_WIRED_HEADPHONES : i32 = 4;

        /// public static final [TYPE_WIRED_HEADSET](https://developer.android.com/reference/android/media/AudioDeviceInfo.html#TYPE_WIRED_HEADSET)
        pub const TYPE_WIRED_HEADSET : i32 = 3;
    }
}
