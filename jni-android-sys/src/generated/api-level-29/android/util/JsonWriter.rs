// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-util-JsonWriter"))]
__jni_bindgen! {
    /// public final class [JsonWriter](https://developer.android.com/reference/android/util/JsonWriter.html)
    ///
    /// Required feature: android-util-JsonWriter
    public final class JsonWriter ("android/util/JsonWriter") extends crate::java::lang::Object, implements crate::java::io::Closeable {

        /// [JsonWriter](https://developer.android.com/reference/android/util/JsonWriter.html#JsonWriter(java.io.Writer))
        ///
        /// Required features: "java-io-Writer"
        #[cfg(any(feature = "all", all(feature = "java-io-Writer")))]
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::Writer>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::util::JsonWriter>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/util/JsonWriter", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/io/Writer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/util/JsonWriter\0", "<init>\0", "(Ljava/io/Writer;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setIndent](https://developer.android.com/reference/android/util/JsonWriter.html#setIndent(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn setIndent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/util/JsonWriter", java.flags == PUBLIC, .name == "setIndent", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/util/JsonWriter\0", "setIndent\0", "(Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setLenient](https://developer.android.com/reference/android/util/JsonWriter.html#setLenient(boolean))
        pub fn setLenient<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/util/JsonWriter", java.flags == PUBLIC, .name == "setLenient", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/util/JsonWriter\0", "setLenient\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isLenient](https://developer.android.com/reference/android/util/JsonWriter.html#isLenient())
        pub fn isLenient<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/util/JsonWriter", java.flags == PUBLIC, .name == "isLenient", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/util/JsonWriter\0", "isLenient\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [beginArray](https://developer.android.com/reference/android/util/JsonWriter.html#beginArray())
        ///
        /// Required features: "android-util-JsonWriter"
        #[cfg(any(feature = "all", all(feature = "android-util-JsonWriter")))]
        pub fn beginArray<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::util::JsonWriter>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/util/JsonWriter", java.flags == PUBLIC, .name == "beginArray", .descriptor == "()Landroid/util/JsonWriter;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/util/JsonWriter\0", "beginArray\0", "()Landroid/util/JsonWriter;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [endArray](https://developer.android.com/reference/android/util/JsonWriter.html#endArray())
        ///
        /// Required features: "android-util-JsonWriter"
        #[cfg(any(feature = "all", all(feature = "android-util-JsonWriter")))]
        pub fn endArray<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::util::JsonWriter>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/util/JsonWriter", java.flags == PUBLIC, .name == "endArray", .descriptor == "()Landroid/util/JsonWriter;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/util/JsonWriter\0", "endArray\0", "()Landroid/util/JsonWriter;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [beginObject](https://developer.android.com/reference/android/util/JsonWriter.html#beginObject())
        ///
        /// Required features: "android-util-JsonWriter"
        #[cfg(any(feature = "all", all(feature = "android-util-JsonWriter")))]
        pub fn beginObject<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::util::JsonWriter>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/util/JsonWriter", java.flags == PUBLIC, .name == "beginObject", .descriptor == "()Landroid/util/JsonWriter;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/util/JsonWriter\0", "beginObject\0", "()Landroid/util/JsonWriter;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [endObject](https://developer.android.com/reference/android/util/JsonWriter.html#endObject())
        ///
        /// Required features: "android-util-JsonWriter"
        #[cfg(any(feature = "all", all(feature = "android-util-JsonWriter")))]
        pub fn endObject<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::util::JsonWriter>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/util/JsonWriter", java.flags == PUBLIC, .name == "endObject", .descriptor == "()Landroid/util/JsonWriter;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/util/JsonWriter\0", "endObject\0", "()Landroid/util/JsonWriter;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [name](https://developer.android.com/reference/android/util/JsonWriter.html#name(java.lang.String))
        ///
        /// Required features: "android-util-JsonWriter", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-util-JsonWriter", feature = "java-lang-String")))]
        pub fn name<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::util::JsonWriter>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/util/JsonWriter", java.flags == PUBLIC, .name == "name", .descriptor == "(Ljava/lang/String;)Landroid/util/JsonWriter;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/util/JsonWriter\0", "name\0", "(Ljava/lang/String;)Landroid/util/JsonWriter;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [value](https://developer.android.com/reference/android/util/JsonWriter.html#value(java.lang.String))
        ///
        /// Required features: "android-util-JsonWriter", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-util-JsonWriter", feature = "java-lang-String")))]
        pub fn value_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::util::JsonWriter>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/util/JsonWriter", java.flags == PUBLIC, .name == "value", .descriptor == "(Ljava/lang/String;)Landroid/util/JsonWriter;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/util/JsonWriter\0", "value\0", "(Ljava/lang/String;)Landroid/util/JsonWriter;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [nullValue](https://developer.android.com/reference/android/util/JsonWriter.html#nullValue())
        ///
        /// Required features: "android-util-JsonWriter"
        #[cfg(any(feature = "all", all(feature = "android-util-JsonWriter")))]
        pub fn nullValue<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::util::JsonWriter>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/util/JsonWriter", java.flags == PUBLIC, .name == "nullValue", .descriptor == "()Landroid/util/JsonWriter;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/util/JsonWriter\0", "nullValue\0", "()Landroid/util/JsonWriter;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [value](https://developer.android.com/reference/android/util/JsonWriter.html#value(boolean))
        ///
        /// Required features: "android-util-JsonWriter"
        #[cfg(any(feature = "all", all(feature = "android-util-JsonWriter")))]
        pub fn value_boolean<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::util::JsonWriter>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/util/JsonWriter", java.flags == PUBLIC, .name == "value", .descriptor == "(Z)Landroid/util/JsonWriter;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/util/JsonWriter\0", "value\0", "(Z)Landroid/util/JsonWriter;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [value](https://developer.android.com/reference/android/util/JsonWriter.html#value(double))
        ///
        /// Required features: "android-util-JsonWriter"
        #[cfg(any(feature = "all", all(feature = "android-util-JsonWriter")))]
        pub fn value_double<'env>(&'env self, arg0: f64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::util::JsonWriter>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/util/JsonWriter", java.flags == PUBLIC, .name == "value", .descriptor == "(D)Landroid/util/JsonWriter;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/util/JsonWriter\0", "value\0", "(D)Landroid/util/JsonWriter;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [value](https://developer.android.com/reference/android/util/JsonWriter.html#value(long))
        ///
        /// Required features: "android-util-JsonWriter"
        #[cfg(any(feature = "all", all(feature = "android-util-JsonWriter")))]
        pub fn value_long<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::util::JsonWriter>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/util/JsonWriter", java.flags == PUBLIC, .name == "value", .descriptor == "(J)Landroid/util/JsonWriter;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/util/JsonWriter\0", "value\0", "(J)Landroid/util/JsonWriter;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [value](https://developer.android.com/reference/android/util/JsonWriter.html#value(java.lang.Number))
        ///
        /// Required features: "android-util-JsonWriter", "java-lang-Number"
        #[cfg(any(feature = "all", all(feature = "android-util-JsonWriter", feature = "java-lang-Number")))]
        pub fn value_Number<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Number>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::util::JsonWriter>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/util/JsonWriter", java.flags == PUBLIC, .name == "value", .descriptor == "(Ljava/lang/Number;)Landroid/util/JsonWriter;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/util/JsonWriter\0", "value\0", "(Ljava/lang/Number;)Landroid/util/JsonWriter;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [flush](https://developer.android.com/reference/android/util/JsonWriter.html#flush())
        pub fn flush<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/util/JsonWriter", java.flags == PUBLIC, .name == "flush", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/util/JsonWriter\0", "flush\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [close](https://developer.android.com/reference/android/util/JsonWriter.html#close())
        pub fn close<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/util/JsonWriter", java.flags == PUBLIC, .name == "close", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/util/JsonWriter\0", "close\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
