// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-util-Range"))]
__jni_bindgen! {
    /// public final class [Range](https://developer.android.com/reference/android/util/Range.html)
    ///
    /// Required feature: android-util-Range
    public final class Range ("android/util/Range") extends crate::java::lang::Object {

        /// [Range](https://developer.android.com/reference/android/util/Range.html#Range(java.lang.Comparable,%20java.lang.Comparable))
        ///
        /// Required features: "java-lang-Comparable"
        #[cfg(any(feature = "all", all(feature = "java-lang-Comparable")))]
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Comparable>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Comparable>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::util::Range>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/util/Range", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/lang/Comparable;Ljava/lang/Comparable;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/util/Range\0", "<init>\0", "(Ljava/lang/Comparable;Ljava/lang/Comparable;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [create](https://developer.android.com/reference/android/util/Range.html#create(java.lang.Comparable,%20java.lang.Comparable))
        ///
        /// Required features: "android-util-Range", "java-lang-Comparable"
        #[cfg(any(feature = "all", all(feature = "android-util-Range", feature = "java-lang-Comparable")))]
        pub fn create<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Comparable>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Comparable>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::util::Range>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/util/Range", java.flags == PUBLIC | STATIC, .name == "create", .descriptor == "(Ljava/lang/Comparable;Ljava/lang/Comparable;)Landroid/util/Range;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/util/Range\0", "create\0", "(Ljava/lang/Comparable;Ljava/lang/Comparable;)Landroid/util/Range;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLower](https://developer.android.com/reference/android/util/Range.html#getLower())
        ///
        /// Required features: "java-lang-Comparable"
        #[cfg(any(feature = "all", all(feature = "java-lang-Comparable")))]
        pub fn getLower<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Comparable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/util/Range", java.flags == PUBLIC, .name == "getLower", .descriptor == "()Ljava/lang/Comparable;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/util/Range\0", "getLower\0", "()Ljava/lang/Comparable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getUpper](https://developer.android.com/reference/android/util/Range.html#getUpper())
        ///
        /// Required features: "java-lang-Comparable"
        #[cfg(any(feature = "all", all(feature = "java-lang-Comparable")))]
        pub fn getUpper<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Comparable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/util/Range", java.flags == PUBLIC, .name == "getUpper", .descriptor == "()Ljava/lang/Comparable;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/util/Range\0", "getUpper\0", "()Ljava/lang/Comparable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [contains](https://developer.android.com/reference/android/util/Range.html#contains(java.lang.Comparable))
        ///
        /// Required features: "java-lang-Comparable"
        #[cfg(any(feature = "all", all(feature = "java-lang-Comparable")))]
        pub fn contains_Comparable<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Comparable>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/util/Range", java.flags == PUBLIC, .name == "contains", .descriptor == "(Ljava/lang/Comparable;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/util/Range\0", "contains\0", "(Ljava/lang/Comparable;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [contains](https://developer.android.com/reference/android/util/Range.html#contains(android.util.Range))
        ///
        /// Required features: "android-util-Range"
        #[cfg(any(feature = "all", all(feature = "android-util-Range")))]
        pub fn contains_Range<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::util::Range>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/util/Range", java.flags == PUBLIC, .name == "contains", .descriptor == "(Landroid/util/Range;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/util/Range\0", "contains\0", "(Landroid/util/Range;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [equals](https://developer.android.com/reference/android/util/Range.html#equals(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn equals<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/util/Range", java.flags == PUBLIC, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/util/Range\0", "equals\0", "(Ljava/lang/Object;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clamp](https://developer.android.com/reference/android/util/Range.html#clamp(java.lang.Comparable))
        ///
        /// Required features: "java-lang-Comparable"
        #[cfg(any(feature = "all", all(feature = "java-lang-Comparable")))]
        pub fn clamp<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Comparable>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Comparable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/util/Range", java.flags == PUBLIC, .name == "clamp", .descriptor == "(Ljava/lang/Comparable;)Ljava/lang/Comparable;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/util/Range\0", "clamp\0", "(Ljava/lang/Comparable;)Ljava/lang/Comparable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [intersect](https://developer.android.com/reference/android/util/Range.html#intersect(android.util.Range))
        ///
        /// Required features: "android-util-Range"
        #[cfg(any(feature = "all", all(feature = "android-util-Range")))]
        pub fn intersect_Range<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::util::Range>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::util::Range>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/util/Range", java.flags == PUBLIC, .name == "intersect", .descriptor == "(Landroid/util/Range;)Landroid/util/Range;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/util/Range\0", "intersect\0", "(Landroid/util/Range;)Landroid/util/Range;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [intersect](https://developer.android.com/reference/android/util/Range.html#intersect(java.lang.Comparable,%20java.lang.Comparable))
        ///
        /// Required features: "android-util-Range", "java-lang-Comparable"
        #[cfg(any(feature = "all", all(feature = "android-util-Range", feature = "java-lang-Comparable")))]
        pub fn intersect_Comparable_Comparable<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Comparable>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Comparable>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::util::Range>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/util/Range", java.flags == PUBLIC, .name == "intersect", .descriptor == "(Ljava/lang/Comparable;Ljava/lang/Comparable;)Landroid/util/Range;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/util/Range\0", "intersect\0", "(Ljava/lang/Comparable;Ljava/lang/Comparable;)Landroid/util/Range;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [extend](https://developer.android.com/reference/android/util/Range.html#extend(android.util.Range))
        ///
        /// Required features: "android-util-Range"
        #[cfg(any(feature = "all", all(feature = "android-util-Range")))]
        pub fn extend_Range<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::util::Range>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::util::Range>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/util/Range", java.flags == PUBLIC, .name == "extend", .descriptor == "(Landroid/util/Range;)Landroid/util/Range;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/util/Range\0", "extend\0", "(Landroid/util/Range;)Landroid/util/Range;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [extend](https://developer.android.com/reference/android/util/Range.html#extend(java.lang.Comparable,%20java.lang.Comparable))
        ///
        /// Required features: "android-util-Range", "java-lang-Comparable"
        #[cfg(any(feature = "all", all(feature = "android-util-Range", feature = "java-lang-Comparable")))]
        pub fn extend_Comparable_Comparable<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Comparable>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Comparable>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::util::Range>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/util/Range", java.flags == PUBLIC, .name == "extend", .descriptor == "(Ljava/lang/Comparable;Ljava/lang/Comparable;)Landroid/util/Range;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/util/Range\0", "extend\0", "(Ljava/lang/Comparable;Ljava/lang/Comparable;)Landroid/util/Range;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [extend](https://developer.android.com/reference/android/util/Range.html#extend(java.lang.Comparable))
        ///
        /// Required features: "android-util-Range", "java-lang-Comparable"
        #[cfg(any(feature = "all", all(feature = "android-util-Range", feature = "java-lang-Comparable")))]
        pub fn extend_Comparable<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Comparable>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::util::Range>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/util/Range", java.flags == PUBLIC, .name == "extend", .descriptor == "(Ljava/lang/Comparable;)Landroid/util/Range;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/util/Range\0", "extend\0", "(Ljava/lang/Comparable;)Landroid/util/Range;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/android/util/Range.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/util/Range", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/util/Range\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hashCode](https://developer.android.com/reference/android/util/Range.html#hashCode())
        pub fn hashCode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/util/Range", java.flags == PUBLIC, .name == "hashCode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/util/Range\0", "hashCode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
