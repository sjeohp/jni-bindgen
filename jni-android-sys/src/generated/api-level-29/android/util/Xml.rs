// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-util-Xml"))]
__jni_bindgen! {
    /// public class [Xml](https://developer.android.com/reference/android/util/Xml.html)
    ///
    /// Required feature: android-util-Xml
    public class Xml ("android/util/Xml") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [Xml](https://developer.android.com/reference/android/util/Xml.html#Xml())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::util::Xml>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/util/Xml", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/util/Xml\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [parse](https://developer.android.com/reference/android/util/Xml.html#parse(java.lang.String,%20org.xml.sax.ContentHandler))
        ///
        /// Required features: "java-lang-String", "org-xml-sax-ContentHandler"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "org-xml-sax-ContentHandler")))]
        pub fn parse_String_ContentHandler<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::org::xml::sax::ContentHandler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/util/Xml", java.flags == PUBLIC | STATIC, .name == "parse", .descriptor == "(Ljava/lang/String;Lorg/xml/sax/ContentHandler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/util/Xml\0", "parse\0", "(Ljava/lang/String;Lorg/xml/sax/ContentHandler;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [parse](https://developer.android.com/reference/android/util/Xml.html#parse(java.io.Reader,%20org.xml.sax.ContentHandler))
        ///
        /// Required features: "java-io-Reader", "org-xml-sax-ContentHandler"
        #[cfg(any(feature = "all", all(feature = "java-io-Reader", feature = "org-xml-sax-ContentHandler")))]
        pub fn parse_Reader_ContentHandler<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::Reader>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::org::xml::sax::ContentHandler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/util/Xml", java.flags == PUBLIC | STATIC, .name == "parse", .descriptor == "(Ljava/io/Reader;Lorg/xml/sax/ContentHandler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/util/Xml\0", "parse\0", "(Ljava/io/Reader;Lorg/xml/sax/ContentHandler;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [parse](https://developer.android.com/reference/android/util/Xml.html#parse(java.io.InputStream,%20android.util.Xml.Encoding,%20org.xml.sax.ContentHandler))
        ///
        /// Required features: "android-util-Xml_Encoding", "java-io-InputStream", "org-xml-sax-ContentHandler"
        #[cfg(any(feature = "all", all(feature = "android-util-Xml_Encoding", feature = "java-io-InputStream", feature = "org-xml-sax-ContentHandler")))]
        pub fn parse_InputStream_Encoding_ContentHandler<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::InputStream>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::util::Xml_Encoding>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::org::xml::sax::ContentHandler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/util/Xml", java.flags == PUBLIC | STATIC, .name == "parse", .descriptor == "(Ljava/io/InputStream;Landroid/util/Xml$Encoding;Lorg/xml/sax/ContentHandler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/util/Xml\0", "parse\0", "(Ljava/io/InputStream;Landroid/util/Xml$Encoding;Lorg/xml/sax/ContentHandler;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newPullParser](https://developer.android.com/reference/android/util/Xml.html#newPullParser())
        ///
        /// Required features: "org-xmlpull-v1-XmlPullParser"
        #[cfg(any(feature = "all", all(feature = "org-xmlpull-v1-XmlPullParser")))]
        pub fn newPullParser<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::org::xmlpull::v1::XmlPullParser>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/util/Xml", java.flags == PUBLIC | STATIC, .name == "newPullParser", .descriptor == "()Lorg/xmlpull/v1/XmlPullParser;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/util/Xml\0", "newPullParser\0", "()Lorg/xmlpull/v1/XmlPullParser;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newSerializer](https://developer.android.com/reference/android/util/Xml.html#newSerializer())
        ///
        /// Required features: "org-xmlpull-v1-XmlSerializer"
        #[cfg(any(feature = "all", all(feature = "org-xmlpull-v1-XmlSerializer")))]
        pub fn newSerializer<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::org::xmlpull::v1::XmlSerializer>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/util/Xml", java.flags == PUBLIC | STATIC, .name == "newSerializer", .descriptor == "()Lorg/xmlpull/v1/XmlSerializer;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/util/Xml\0", "newSerializer\0", "()Lorg/xmlpull/v1/XmlSerializer;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [findEncodingByName](https://developer.android.com/reference/android/util/Xml.html#findEncodingByName(java.lang.String))
        ///
        /// Required features: "android-util-Xml_Encoding", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-util-Xml_Encoding", feature = "java-lang-String")))]
        pub fn findEncodingByName<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::util::Xml_Encoding>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/util/Xml", java.flags == PUBLIC | STATIC, .name == "findEncodingByName", .descriptor == "(Ljava/lang/String;)Landroid/util/Xml$Encoding;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/util/Xml\0", "findEncodingByName\0", "(Ljava/lang/String;)Landroid/util/Xml$Encoding;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [asAttributeSet](https://developer.android.com/reference/android/util/Xml.html#asAttributeSet(org.xmlpull.v1.XmlPullParser))
        ///
        /// Required features: "android-util-AttributeSet", "org-xmlpull-v1-XmlPullParser"
        #[cfg(any(feature = "all", all(feature = "android-util-AttributeSet", feature = "org-xmlpull-v1-XmlPullParser")))]
        pub fn asAttributeSet<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::org::xmlpull::v1::XmlPullParser>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::util::AttributeSet>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/util/Xml", java.flags == PUBLIC | STATIC, .name == "asAttributeSet", .descriptor == "(Lorg/xmlpull/v1/XmlPullParser;)Landroid/util/AttributeSet;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/util/Xml\0", "asAttributeSet\0", "(Lorg/xmlpull/v1/XmlPullParser;)Landroid/util/AttributeSet;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// **get** public static [FEATURE_RELAXED](https://developer.android.com/reference/android/util/Xml.html#FEATURE_RELAXED)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn FEATURE_RELAXED<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/util/Xml\0", "FEATURE_RELAXED\0", "Ljava/lang/String;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **set** public static [FEATURE_RELAXED](https://developer.android.com/reference/android/util/Xml.html#FEATURE_RELAXED)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn set_FEATURE_RELAXED<'env, 'obj>(env: &'env __jni_bindgen::Env, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::java::lang::String>>) {
            unsafe {
                let (class, field) = env.require_class_static_field("android/util/Xml\0", "FEATURE_RELAXED\0", "Ljava/lang/String;\0");
                env.set_static_object_field(class, field, value)
            }
        }
    }
}
