// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-util-TimeUtils"))]
__jni_bindgen! {
    /// public class [TimeUtils](https://developer.android.com/reference/android/util/TimeUtils.html)
    ///
    /// Required feature: android-util-TimeUtils
    public class TimeUtils ("android/util/TimeUtils") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [TimeUtils](https://developer.android.com/reference/android/util/TimeUtils.html#TimeUtils())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::util::TimeUtils>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/util/TimeUtils", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/util/TimeUtils\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getTimeZone](https://developer.android.com/reference/android/util/TimeUtils.html#getTimeZone(int,%20boolean,%20long,%20java.lang.String))
        ///
        /// Required features: "java-lang-String", "java-util-TimeZone"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-util-TimeZone")))]
        pub fn getTimeZone<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: bool, arg2: i64, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::TimeZone>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/util/TimeUtils", java.flags == PUBLIC | STATIC, .name == "getTimeZone", .descriptor == "(IZJLjava/lang/String;)Ljava/util/TimeZone;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/util/TimeUtils\0", "getTimeZone\0", "(IZJLjava/lang/String;)Ljava/util/TimeZone;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTimeZoneIdsForCountryCode](https://developer.android.com/reference/android/util/TimeUtils.html#getTimeZoneIdsForCountryCode(java.lang.String))
        ///
        /// Required features: "java-lang-String", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-util-List")))]
        pub fn getTimeZoneIdsForCountryCode<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/util/TimeUtils", java.flags == PUBLIC | STATIC, .name == "getTimeZoneIdsForCountryCode", .descriptor == "(Ljava/lang/String;)Ljava/util/List;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/util/TimeUtils\0", "getTimeZoneIdsForCountryCode\0", "(Ljava/lang/String;)Ljava/util/List;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTimeZoneDatabaseVersion](https://developer.android.com/reference/android/util/TimeUtils.html#getTimeZoneDatabaseVersion())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getTimeZoneDatabaseVersion<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/util/TimeUtils", java.flags == PUBLIC | STATIC, .name == "getTimeZoneDatabaseVersion", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/util/TimeUtils\0", "getTimeZoneDatabaseVersion\0", "()Ljava/lang/String;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
