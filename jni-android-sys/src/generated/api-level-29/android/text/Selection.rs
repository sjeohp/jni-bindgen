// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-text-Selection"))]
__jni_bindgen! {
    /// public class [Selection](https://developer.android.com/reference/android/text/Selection.html)
    ///
    /// Required feature: android-text-Selection
    public class Selection ("android/text/Selection") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [Selection](https://developer.android.com/reference/android/text/Selection.html#Selection())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::text::Selection>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/text/Selection", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/Selection\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getSelectionStart](https://developer.android.com/reference/android/text/Selection.html#getSelectionStart(java.lang.CharSequence))
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn getSelectionStart<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Selection", java.flags == PUBLIC | STATIC | FINAL, .name == "getSelectionStart", .descriptor == "(Ljava/lang/CharSequence;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/text/Selection\0", "getSelectionStart\0", "(Ljava/lang/CharSequence;)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSelectionEnd](https://developer.android.com/reference/android/text/Selection.html#getSelectionEnd(java.lang.CharSequence))
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn getSelectionEnd<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Selection", java.flags == PUBLIC | STATIC | FINAL, .name == "getSelectionEnd", .descriptor == "(Ljava/lang/CharSequence;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/text/Selection\0", "getSelectionEnd\0", "(Ljava/lang/CharSequence;)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setSelection](https://developer.android.com/reference/android/text/Selection.html#setSelection(android.text.Spannable,%20int,%20int))
        ///
        /// Required features: "android-text-Spannable"
        #[cfg(any(feature = "all", all(feature = "android-text-Spannable")))]
        pub fn setSelection_Spannable_int_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::Spannable>>, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Selection", java.flags == PUBLIC | STATIC, .name == "setSelection", .descriptor == "(Landroid/text/Spannable;II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/text/Selection\0", "setSelection\0", "(Landroid/text/Spannable;II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setSelection](https://developer.android.com/reference/android/text/Selection.html#setSelection(android.text.Spannable,%20int))
        ///
        /// Required features: "android-text-Spannable"
        #[cfg(any(feature = "all", all(feature = "android-text-Spannable")))]
        pub fn setSelection_Spannable_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::Spannable>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Selection", java.flags == PUBLIC | STATIC | FINAL, .name == "setSelection", .descriptor == "(Landroid/text/Spannable;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/text/Selection\0", "setSelection\0", "(Landroid/text/Spannable;I)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [selectAll](https://developer.android.com/reference/android/text/Selection.html#selectAll(android.text.Spannable))
        ///
        /// Required features: "android-text-Spannable"
        #[cfg(any(feature = "all", all(feature = "android-text-Spannable")))]
        pub fn selectAll<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::Spannable>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Selection", java.flags == PUBLIC | STATIC | FINAL, .name == "selectAll", .descriptor == "(Landroid/text/Spannable;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/text/Selection\0", "selectAll\0", "(Landroid/text/Spannable;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [extendSelection](https://developer.android.com/reference/android/text/Selection.html#extendSelection(android.text.Spannable,%20int))
        ///
        /// Required features: "android-text-Spannable"
        #[cfg(any(feature = "all", all(feature = "android-text-Spannable")))]
        pub fn extendSelection<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::Spannable>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Selection", java.flags == PUBLIC | STATIC | FINAL, .name == "extendSelection", .descriptor == "(Landroid/text/Spannable;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/text/Selection\0", "extendSelection\0", "(Landroid/text/Spannable;I)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeSelection](https://developer.android.com/reference/android/text/Selection.html#removeSelection(android.text.Spannable))
        ///
        /// Required features: "android-text-Spannable"
        #[cfg(any(feature = "all", all(feature = "android-text-Spannable")))]
        pub fn removeSelection<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::Spannable>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Selection", java.flags == PUBLIC | STATIC | FINAL, .name == "removeSelection", .descriptor == "(Landroid/text/Spannable;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/text/Selection\0", "removeSelection\0", "(Landroid/text/Spannable;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [moveUp](https://developer.android.com/reference/android/text/Selection.html#moveUp(android.text.Spannable,%20android.text.Layout))
        ///
        /// Required features: "android-text-Layout", "android-text-Spannable"
        #[cfg(any(feature = "all", all(feature = "android-text-Layout", feature = "android-text-Spannable")))]
        pub fn moveUp<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::Spannable>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::Layout>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Selection", java.flags == PUBLIC | STATIC, .name == "moveUp", .descriptor == "(Landroid/text/Spannable;Landroid/text/Layout;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/text/Selection\0", "moveUp\0", "(Landroid/text/Spannable;Landroid/text/Layout;)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [moveDown](https://developer.android.com/reference/android/text/Selection.html#moveDown(android.text.Spannable,%20android.text.Layout))
        ///
        /// Required features: "android-text-Layout", "android-text-Spannable"
        #[cfg(any(feature = "all", all(feature = "android-text-Layout", feature = "android-text-Spannable")))]
        pub fn moveDown<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::Spannable>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::Layout>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Selection", java.flags == PUBLIC | STATIC, .name == "moveDown", .descriptor == "(Landroid/text/Spannable;Landroid/text/Layout;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/text/Selection\0", "moveDown\0", "(Landroid/text/Spannable;Landroid/text/Layout;)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [moveLeft](https://developer.android.com/reference/android/text/Selection.html#moveLeft(android.text.Spannable,%20android.text.Layout))
        ///
        /// Required features: "android-text-Layout", "android-text-Spannable"
        #[cfg(any(feature = "all", all(feature = "android-text-Layout", feature = "android-text-Spannable")))]
        pub fn moveLeft<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::Spannable>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::Layout>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Selection", java.flags == PUBLIC | STATIC, .name == "moveLeft", .descriptor == "(Landroid/text/Spannable;Landroid/text/Layout;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/text/Selection\0", "moveLeft\0", "(Landroid/text/Spannable;Landroid/text/Layout;)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [moveRight](https://developer.android.com/reference/android/text/Selection.html#moveRight(android.text.Spannable,%20android.text.Layout))
        ///
        /// Required features: "android-text-Layout", "android-text-Spannable"
        #[cfg(any(feature = "all", all(feature = "android-text-Layout", feature = "android-text-Spannable")))]
        pub fn moveRight<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::Spannable>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::Layout>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Selection", java.flags == PUBLIC | STATIC, .name == "moveRight", .descriptor == "(Landroid/text/Spannable;Landroid/text/Layout;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/text/Selection\0", "moveRight\0", "(Landroid/text/Spannable;Landroid/text/Layout;)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [extendUp](https://developer.android.com/reference/android/text/Selection.html#extendUp(android.text.Spannable,%20android.text.Layout))
        ///
        /// Required features: "android-text-Layout", "android-text-Spannable"
        #[cfg(any(feature = "all", all(feature = "android-text-Layout", feature = "android-text-Spannable")))]
        pub fn extendUp<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::Spannable>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::Layout>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Selection", java.flags == PUBLIC | STATIC, .name == "extendUp", .descriptor == "(Landroid/text/Spannable;Landroid/text/Layout;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/text/Selection\0", "extendUp\0", "(Landroid/text/Spannable;Landroid/text/Layout;)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [extendDown](https://developer.android.com/reference/android/text/Selection.html#extendDown(android.text.Spannable,%20android.text.Layout))
        ///
        /// Required features: "android-text-Layout", "android-text-Spannable"
        #[cfg(any(feature = "all", all(feature = "android-text-Layout", feature = "android-text-Spannable")))]
        pub fn extendDown<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::Spannable>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::Layout>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Selection", java.flags == PUBLIC | STATIC, .name == "extendDown", .descriptor == "(Landroid/text/Spannable;Landroid/text/Layout;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/text/Selection\0", "extendDown\0", "(Landroid/text/Spannable;Landroid/text/Layout;)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [extendLeft](https://developer.android.com/reference/android/text/Selection.html#extendLeft(android.text.Spannable,%20android.text.Layout))
        ///
        /// Required features: "android-text-Layout", "android-text-Spannable"
        #[cfg(any(feature = "all", all(feature = "android-text-Layout", feature = "android-text-Spannable")))]
        pub fn extendLeft<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::Spannable>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::Layout>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Selection", java.flags == PUBLIC | STATIC, .name == "extendLeft", .descriptor == "(Landroid/text/Spannable;Landroid/text/Layout;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/text/Selection\0", "extendLeft\0", "(Landroid/text/Spannable;Landroid/text/Layout;)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [extendRight](https://developer.android.com/reference/android/text/Selection.html#extendRight(android.text.Spannable,%20android.text.Layout))
        ///
        /// Required features: "android-text-Layout", "android-text-Spannable"
        #[cfg(any(feature = "all", all(feature = "android-text-Layout", feature = "android-text-Spannable")))]
        pub fn extendRight<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::Spannable>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::Layout>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Selection", java.flags == PUBLIC | STATIC, .name == "extendRight", .descriptor == "(Landroid/text/Spannable;Landroid/text/Layout;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/text/Selection\0", "extendRight\0", "(Landroid/text/Spannable;Landroid/text/Layout;)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [extendToLeftEdge](https://developer.android.com/reference/android/text/Selection.html#extendToLeftEdge(android.text.Spannable,%20android.text.Layout))
        ///
        /// Required features: "android-text-Layout", "android-text-Spannable"
        #[cfg(any(feature = "all", all(feature = "android-text-Layout", feature = "android-text-Spannable")))]
        pub fn extendToLeftEdge<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::Spannable>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::Layout>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Selection", java.flags == PUBLIC | STATIC, .name == "extendToLeftEdge", .descriptor == "(Landroid/text/Spannable;Landroid/text/Layout;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/text/Selection\0", "extendToLeftEdge\0", "(Landroid/text/Spannable;Landroid/text/Layout;)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [extendToRightEdge](https://developer.android.com/reference/android/text/Selection.html#extendToRightEdge(android.text.Spannable,%20android.text.Layout))
        ///
        /// Required features: "android-text-Layout", "android-text-Spannable"
        #[cfg(any(feature = "all", all(feature = "android-text-Layout", feature = "android-text-Spannable")))]
        pub fn extendToRightEdge<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::Spannable>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::Layout>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Selection", java.flags == PUBLIC | STATIC, .name == "extendToRightEdge", .descriptor == "(Landroid/text/Spannable;Landroid/text/Layout;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/text/Selection\0", "extendToRightEdge\0", "(Landroid/text/Spannable;Landroid/text/Layout;)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [moveToLeftEdge](https://developer.android.com/reference/android/text/Selection.html#moveToLeftEdge(android.text.Spannable,%20android.text.Layout))
        ///
        /// Required features: "android-text-Layout", "android-text-Spannable"
        #[cfg(any(feature = "all", all(feature = "android-text-Layout", feature = "android-text-Spannable")))]
        pub fn moveToLeftEdge<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::Spannable>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::Layout>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Selection", java.flags == PUBLIC | STATIC, .name == "moveToLeftEdge", .descriptor == "(Landroid/text/Spannable;Landroid/text/Layout;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/text/Selection\0", "moveToLeftEdge\0", "(Landroid/text/Spannable;Landroid/text/Layout;)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [moveToRightEdge](https://developer.android.com/reference/android/text/Selection.html#moveToRightEdge(android.text.Spannable,%20android.text.Layout))
        ///
        /// Required features: "android-text-Layout", "android-text-Spannable"
        #[cfg(any(feature = "all", all(feature = "android-text-Layout", feature = "android-text-Spannable")))]
        pub fn moveToRightEdge<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::Spannable>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::Layout>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Selection", java.flags == PUBLIC | STATIC, .name == "moveToRightEdge", .descriptor == "(Landroid/text/Spannable;Landroid/text/Layout;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/text/Selection\0", "moveToRightEdge\0", "(Landroid/text/Spannable;Landroid/text/Layout;)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// **get** public static final [SELECTION_END](https://developer.android.com/reference/android/text/Selection.html#SELECTION_END)
        ///
        /// Required feature: java-lang-Object
        #[cfg(any(feature = "all", feature = "java-lang-Object"))]
        pub fn SELECTION_END<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/text/Selection\0", "SELECTION_END\0", "Ljava/lang/Object;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [SELECTION_START](https://developer.android.com/reference/android/text/Selection.html#SELECTION_START)
        ///
        /// Required feature: java-lang-Object
        #[cfg(any(feature = "all", feature = "java-lang-Object"))]
        pub fn SELECTION_START<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/text/Selection\0", "SELECTION_START\0", "Ljava/lang/Object;\0");
                env.get_static_object_field(class, field)
            }
        }
    }
}
