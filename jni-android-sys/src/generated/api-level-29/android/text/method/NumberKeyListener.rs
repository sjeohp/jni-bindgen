// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-text-method-NumberKeyListener"))]
__jni_bindgen! {
    /// public class [NumberKeyListener](https://developer.android.com/reference/android/text/method/NumberKeyListener.html)
    ///
    /// Required feature: android-text-method-NumberKeyListener
    public class NumberKeyListener ("android/text/method/NumberKeyListener") extends crate::android::text::method::BaseKeyListener, implements crate::android::text::InputFilter {

        /// [NumberKeyListener](https://developer.android.com/reference/android/text/method/NumberKeyListener.html#NumberKeyListener())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::text::method::NumberKeyListener>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/method/NumberKeyListener", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/method/NumberKeyListener\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [getAcceptedChars](https://developer.android.com/reference/android/text/method/NumberKeyListener.html#getAcceptedChars())
        // fn getAcceptedChars<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::CharArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/text/method/NumberKeyListener", java.flags == PROTECTED | ABSTRACT, .name == "getAcceptedChars", .descriptor == "()[C"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/method/NumberKeyListener\0", "getAcceptedChars\0", "()[C\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [lookup](https://developer.android.com/reference/android/text/method/NumberKeyListener.html#lookup(android.view.KeyEvent,%20android.text.Spannable))
        // ///
        // /// Required features: "android-text-Spannable", "android-view-KeyEvent"
        // #[cfg(any(feature = "all", all(feature = "android-text-Spannable", feature = "android-view-KeyEvent")))]
        // fn lookup<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::KeyEvent>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::Spannable>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/text/method/NumberKeyListener", java.flags == PROTECTED, .name == "lookup", .descriptor == "(Landroid/view/KeyEvent;Landroid/text/Spannable;)I"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/method/NumberKeyListener\0", "lookup\0", "(Landroid/view/KeyEvent;Landroid/text/Spannable;)I\0");
        //         __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [filter](https://developer.android.com/reference/android/text/method/NumberKeyListener.html#filter(java.lang.CharSequence,%20int,%20int,%20android.text.Spanned,%20int,%20int))
        ///
        /// Required features: "android-text-Spanned", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-text-Spanned", feature = "java-lang-CharSequence")))]
        pub fn filter<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg1: i32, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::Spanned>>, arg4: i32, arg5: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::CharSequence>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/method/NumberKeyListener", java.flags == PUBLIC, .name == "filter", .descriptor == "(Ljava/lang/CharSequence;IILandroid/text/Spanned;II)Ljava/lang/CharSequence;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/method/NumberKeyListener\0", "filter\0", "(Ljava/lang/CharSequence;IILandroid/text/Spanned;II)Ljava/lang/CharSequence;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [ok](https://developer.android.com/reference/android/text/method/NumberKeyListener.html#ok(char%5B%5D,%20char))
        // fn ok<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::CharArray>>, arg1: __jni_bindgen::jchar) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/text/method/NumberKeyListener", java.flags == PROTECTED | STATIC, .name == "ok", .descriptor == "([CC)Z"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/text/method/NumberKeyListener\0", "ok\0", "([CC)Z\0");
        //         __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [onKeyDown](https://developer.android.com/reference/android/text/method/NumberKeyListener.html#onKeyDown(android.view.View,%20android.text.Editable,%20int,%20android.view.KeyEvent))
        ///
        /// Required features: "android-text-Editable", "android-view-KeyEvent", "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-text-Editable", feature = "android-view-KeyEvent", feature = "android-view-View")))]
        pub fn onKeyDown<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::Editable>>, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::KeyEvent>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/method/NumberKeyListener", java.flags == PUBLIC, .name == "onKeyDown", .descriptor == "(Landroid/view/View;Landroid/text/Editable;ILandroid/view/KeyEvent;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/method/NumberKeyListener\0", "onKeyDown\0", "(Landroid/view/View;Landroid/text/Editable;ILandroid/view/KeyEvent;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
