// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-text-method-BaseKeyListener"))]
__jni_bindgen! {
    /// public class [BaseKeyListener](https://developer.android.com/reference/android/text/method/BaseKeyListener.html)
    ///
    /// Required feature: android-text-method-BaseKeyListener
    public class BaseKeyListener ("android/text/method/BaseKeyListener") extends crate::android::text::method::MetaKeyKeyListener, implements crate::android::text::method::KeyListener {

        /// [BaseKeyListener](https://developer.android.com/reference/android/text/method/BaseKeyListener.html#BaseKeyListener())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::text::method::BaseKeyListener>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/method/BaseKeyListener", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/method/BaseKeyListener\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [backspace](https://developer.android.com/reference/android/text/method/BaseKeyListener.html#backspace(android.view.View,%20android.text.Editable,%20int,%20android.view.KeyEvent))
        ///
        /// Required features: "android-text-Editable", "android-view-KeyEvent", "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-text-Editable", feature = "android-view-KeyEvent", feature = "android-view-View")))]
        pub fn backspace<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::Editable>>, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::KeyEvent>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/method/BaseKeyListener", java.flags == PUBLIC, .name == "backspace", .descriptor == "(Landroid/view/View;Landroid/text/Editable;ILandroid/view/KeyEvent;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/method/BaseKeyListener\0", "backspace\0", "(Landroid/view/View;Landroid/text/Editable;ILandroid/view/KeyEvent;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [forwardDelete](https://developer.android.com/reference/android/text/method/BaseKeyListener.html#forwardDelete(android.view.View,%20android.text.Editable,%20int,%20android.view.KeyEvent))
        ///
        /// Required features: "android-text-Editable", "android-view-KeyEvent", "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-text-Editable", feature = "android-view-KeyEvent", feature = "android-view-View")))]
        pub fn forwardDelete<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::Editable>>, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::KeyEvent>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/method/BaseKeyListener", java.flags == PUBLIC, .name == "forwardDelete", .descriptor == "(Landroid/view/View;Landroid/text/Editable;ILandroid/view/KeyEvent;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/method/BaseKeyListener\0", "forwardDelete\0", "(Landroid/view/View;Landroid/text/Editable;ILandroid/view/KeyEvent;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onKeyDown](https://developer.android.com/reference/android/text/method/BaseKeyListener.html#onKeyDown(android.view.View,%20android.text.Editable,%20int,%20android.view.KeyEvent))
        ///
        /// Required features: "android-text-Editable", "android-view-KeyEvent", "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-text-Editable", feature = "android-view-KeyEvent", feature = "android-view-View")))]
        pub fn onKeyDown<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::Editable>>, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::KeyEvent>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/method/BaseKeyListener", java.flags == PUBLIC, .name == "onKeyDown", .descriptor == "(Landroid/view/View;Landroid/text/Editable;ILandroid/view/KeyEvent;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/method/BaseKeyListener\0", "onKeyDown\0", "(Landroid/view/View;Landroid/text/Editable;ILandroid/view/KeyEvent;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onKeyOther](https://developer.android.com/reference/android/text/method/BaseKeyListener.html#onKeyOther(android.view.View,%20android.text.Editable,%20android.view.KeyEvent))
        ///
        /// Required features: "android-text-Editable", "android-view-KeyEvent", "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-text-Editable", feature = "android-view-KeyEvent", feature = "android-view-View")))]
        pub fn onKeyOther<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::Editable>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::KeyEvent>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/method/BaseKeyListener", java.flags == PUBLIC, .name == "onKeyOther", .descriptor == "(Landroid/view/View;Landroid/text/Editable;Landroid/view/KeyEvent;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/method/BaseKeyListener\0", "onKeyOther\0", "(Landroid/view/View;Landroid/text/Editable;Landroid/view/KeyEvent;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
