// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-text-method-Touch"))]
__jni_bindgen! {
    /// public class [Touch](https://developer.android.com/reference/android/text/method/Touch.html)
    ///
    /// Required feature: android-text-method-Touch
    public class Touch ("android/text/method/Touch") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [Touch](https://developer.android.com/reference/android/text/method/Touch.html#Touch())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::text::method::Touch>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/text/method/Touch", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/method/Touch\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [scrollTo](https://developer.android.com/reference/android/text/method/Touch.html#scrollTo(android.widget.TextView,%20android.text.Layout,%20int,%20int))
        ///
        /// Required features: "android-text-Layout", "android-widget-TextView"
        #[cfg(any(feature = "all", all(feature = "android-text-Layout", feature = "android-widget-TextView")))]
        pub fn scrollTo<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::widget::TextView>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::Layout>>, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/method/Touch", java.flags == PUBLIC | STATIC, .name == "scrollTo", .descriptor == "(Landroid/widget/TextView;Landroid/text/Layout;II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/text/method/Touch\0", "scrollTo\0", "(Landroid/widget/TextView;Landroid/text/Layout;II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onTouchEvent](https://developer.android.com/reference/android/text/method/Touch.html#onTouchEvent(android.widget.TextView,%20android.text.Spannable,%20android.view.MotionEvent))
        ///
        /// Required features: "android-text-Spannable", "android-view-MotionEvent", "android-widget-TextView"
        #[cfg(any(feature = "all", all(feature = "android-text-Spannable", feature = "android-view-MotionEvent", feature = "android-widget-TextView")))]
        pub fn onTouchEvent<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::widget::TextView>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::Spannable>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::MotionEvent>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/method/Touch", java.flags == PUBLIC | STATIC, .name == "onTouchEvent", .descriptor == "(Landroid/widget/TextView;Landroid/text/Spannable;Landroid/view/MotionEvent;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/text/method/Touch\0", "onTouchEvent\0", "(Landroid/widget/TextView;Landroid/text/Spannable;Landroid/view/MotionEvent;)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInitialScrollX](https://developer.android.com/reference/android/text/method/Touch.html#getInitialScrollX(android.widget.TextView,%20android.text.Spannable))
        ///
        /// Required features: "android-text-Spannable", "android-widget-TextView"
        #[cfg(any(feature = "all", all(feature = "android-text-Spannable", feature = "android-widget-TextView")))]
        pub fn getInitialScrollX<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::widget::TextView>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::Spannable>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/method/Touch", java.flags == PUBLIC | STATIC, .name == "getInitialScrollX", .descriptor == "(Landroid/widget/TextView;Landroid/text/Spannable;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/text/method/Touch\0", "getInitialScrollX\0", "(Landroid/widget/TextView;Landroid/text/Spannable;)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInitialScrollY](https://developer.android.com/reference/android/text/method/Touch.html#getInitialScrollY(android.widget.TextView,%20android.text.Spannable))
        ///
        /// Required features: "android-text-Spannable", "android-widget-TextView"
        #[cfg(any(feature = "all", all(feature = "android-text-Spannable", feature = "android-widget-TextView")))]
        pub fn getInitialScrollY<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::widget::TextView>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::Spannable>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/method/Touch", java.flags == PUBLIC | STATIC, .name == "getInitialScrollY", .descriptor == "(Landroid/widget/TextView;Landroid/text/Spannable;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/text/method/Touch\0", "getInitialScrollY\0", "(Landroid/widget/TextView;Landroid/text/Spannable;)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
