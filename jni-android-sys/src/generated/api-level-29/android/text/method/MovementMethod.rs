// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-text-method-MovementMethod"))]
__jni_bindgen! {
    /// public interface [MovementMethod](https://developer.android.com/reference/android/text/method/MovementMethod.html)
    ///
    /// Required feature: android-text-method-MovementMethod
    public interface MovementMethod ("android/text/method/MovementMethod") extends crate::java::lang::Object {

        /// [initialize](https://developer.android.com/reference/android/text/method/MovementMethod.html#initialize(android.widget.TextView,%20android.text.Spannable))
        ///
        /// Required features: "android-text-Spannable", "android-widget-TextView"
        #[cfg(any(feature = "all", all(feature = "android-text-Spannable", feature = "android-widget-TextView")))]
        pub fn initialize<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::widget::TextView>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::Spannable>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/method/MovementMethod", java.flags == PUBLIC | ABSTRACT, .name == "initialize", .descriptor == "(Landroid/widget/TextView;Landroid/text/Spannable;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/method/MovementMethod\0", "initialize\0", "(Landroid/widget/TextView;Landroid/text/Spannable;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onKeyDown](https://developer.android.com/reference/android/text/method/MovementMethod.html#onKeyDown(android.widget.TextView,%20android.text.Spannable,%20int,%20android.view.KeyEvent))
        ///
        /// Required features: "android-text-Spannable", "android-view-KeyEvent", "android-widget-TextView"
        #[cfg(any(feature = "all", all(feature = "android-text-Spannable", feature = "android-view-KeyEvent", feature = "android-widget-TextView")))]
        pub fn onKeyDown<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::widget::TextView>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::Spannable>>, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::KeyEvent>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/method/MovementMethod", java.flags == PUBLIC | ABSTRACT, .name == "onKeyDown", .descriptor == "(Landroid/widget/TextView;Landroid/text/Spannable;ILandroid/view/KeyEvent;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/method/MovementMethod\0", "onKeyDown\0", "(Landroid/widget/TextView;Landroid/text/Spannable;ILandroid/view/KeyEvent;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onKeyUp](https://developer.android.com/reference/android/text/method/MovementMethod.html#onKeyUp(android.widget.TextView,%20android.text.Spannable,%20int,%20android.view.KeyEvent))
        ///
        /// Required features: "android-text-Spannable", "android-view-KeyEvent", "android-widget-TextView"
        #[cfg(any(feature = "all", all(feature = "android-text-Spannable", feature = "android-view-KeyEvent", feature = "android-widget-TextView")))]
        pub fn onKeyUp<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::widget::TextView>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::Spannable>>, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::KeyEvent>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/method/MovementMethod", java.flags == PUBLIC | ABSTRACT, .name == "onKeyUp", .descriptor == "(Landroid/widget/TextView;Landroid/text/Spannable;ILandroid/view/KeyEvent;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/method/MovementMethod\0", "onKeyUp\0", "(Landroid/widget/TextView;Landroid/text/Spannable;ILandroid/view/KeyEvent;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onKeyOther](https://developer.android.com/reference/android/text/method/MovementMethod.html#onKeyOther(android.widget.TextView,%20android.text.Spannable,%20android.view.KeyEvent))
        ///
        /// Required features: "android-text-Spannable", "android-view-KeyEvent", "android-widget-TextView"
        #[cfg(any(feature = "all", all(feature = "android-text-Spannable", feature = "android-view-KeyEvent", feature = "android-widget-TextView")))]
        pub fn onKeyOther<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::widget::TextView>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::Spannable>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::KeyEvent>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/method/MovementMethod", java.flags == PUBLIC | ABSTRACT, .name == "onKeyOther", .descriptor == "(Landroid/widget/TextView;Landroid/text/Spannable;Landroid/view/KeyEvent;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/method/MovementMethod\0", "onKeyOther\0", "(Landroid/widget/TextView;Landroid/text/Spannable;Landroid/view/KeyEvent;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onTakeFocus](https://developer.android.com/reference/android/text/method/MovementMethod.html#onTakeFocus(android.widget.TextView,%20android.text.Spannable,%20int))
        ///
        /// Required features: "android-text-Spannable", "android-widget-TextView"
        #[cfg(any(feature = "all", all(feature = "android-text-Spannable", feature = "android-widget-TextView")))]
        pub fn onTakeFocus<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::widget::TextView>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::Spannable>>, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/method/MovementMethod", java.flags == PUBLIC | ABSTRACT, .name == "onTakeFocus", .descriptor == "(Landroid/widget/TextView;Landroid/text/Spannable;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/method/MovementMethod\0", "onTakeFocus\0", "(Landroid/widget/TextView;Landroid/text/Spannable;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onTrackballEvent](https://developer.android.com/reference/android/text/method/MovementMethod.html#onTrackballEvent(android.widget.TextView,%20android.text.Spannable,%20android.view.MotionEvent))
        ///
        /// Required features: "android-text-Spannable", "android-view-MotionEvent", "android-widget-TextView"
        #[cfg(any(feature = "all", all(feature = "android-text-Spannable", feature = "android-view-MotionEvent", feature = "android-widget-TextView")))]
        pub fn onTrackballEvent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::widget::TextView>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::Spannable>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::MotionEvent>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/method/MovementMethod", java.flags == PUBLIC | ABSTRACT, .name == "onTrackballEvent", .descriptor == "(Landroid/widget/TextView;Landroid/text/Spannable;Landroid/view/MotionEvent;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/method/MovementMethod\0", "onTrackballEvent\0", "(Landroid/widget/TextView;Landroid/text/Spannable;Landroid/view/MotionEvent;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onTouchEvent](https://developer.android.com/reference/android/text/method/MovementMethod.html#onTouchEvent(android.widget.TextView,%20android.text.Spannable,%20android.view.MotionEvent))
        ///
        /// Required features: "android-text-Spannable", "android-view-MotionEvent", "android-widget-TextView"
        #[cfg(any(feature = "all", all(feature = "android-text-Spannable", feature = "android-view-MotionEvent", feature = "android-widget-TextView")))]
        pub fn onTouchEvent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::widget::TextView>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::Spannable>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::MotionEvent>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/method/MovementMethod", java.flags == PUBLIC | ABSTRACT, .name == "onTouchEvent", .descriptor == "(Landroid/widget/TextView;Landroid/text/Spannable;Landroid/view/MotionEvent;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/method/MovementMethod\0", "onTouchEvent\0", "(Landroid/widget/TextView;Landroid/text/Spannable;Landroid/view/MotionEvent;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onGenericMotionEvent](https://developer.android.com/reference/android/text/method/MovementMethod.html#onGenericMotionEvent(android.widget.TextView,%20android.text.Spannable,%20android.view.MotionEvent))
        ///
        /// Required features: "android-text-Spannable", "android-view-MotionEvent", "android-widget-TextView"
        #[cfg(any(feature = "all", all(feature = "android-text-Spannable", feature = "android-view-MotionEvent", feature = "android-widget-TextView")))]
        pub fn onGenericMotionEvent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::widget::TextView>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::Spannable>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::MotionEvent>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/method/MovementMethod", java.flags == PUBLIC | ABSTRACT, .name == "onGenericMotionEvent", .descriptor == "(Landroid/widget/TextView;Landroid/text/Spannable;Landroid/view/MotionEvent;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/method/MovementMethod\0", "onGenericMotionEvent\0", "(Landroid/widget/TextView;Landroid/text/Spannable;Landroid/view/MotionEvent;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [canSelectArbitrarily](https://developer.android.com/reference/android/text/method/MovementMethod.html#canSelectArbitrarily())
        pub fn canSelectArbitrarily<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/method/MovementMethod", java.flags == PUBLIC | ABSTRACT, .name == "canSelectArbitrarily", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/method/MovementMethod\0", "canSelectArbitrarily\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
