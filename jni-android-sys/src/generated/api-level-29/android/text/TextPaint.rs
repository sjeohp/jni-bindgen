// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-text-TextPaint"))]
__jni_bindgen! {
    /// public class [TextPaint](https://developer.android.com/reference/android/text/TextPaint.html)
    ///
    /// Required feature: android-text-TextPaint
    public class TextPaint ("android/text/TextPaint") extends crate::android::graphics::Paint {

        /// [TextPaint](https://developer.android.com/reference/android/text/TextPaint.html#TextPaint())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::text::TextPaint>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/TextPaint", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/TextPaint\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [TextPaint](https://developer.android.com/reference/android/text/TextPaint.html#TextPaint(int))
        pub fn new_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::text::TextPaint>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/TextPaint", java.flags == PUBLIC, .name == "<init>", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/TextPaint\0", "<init>\0", "(I)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [TextPaint](https://developer.android.com/reference/android/text/TextPaint.html#TextPaint(android.graphics.Paint))
        ///
        /// Required features: "android-graphics-Paint"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Paint")))]
        pub fn new_Paint<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Paint>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::text::TextPaint>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/TextPaint", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/graphics/Paint;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/TextPaint\0", "<init>\0", "(Landroid/graphics/Paint;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [set](https://developer.android.com/reference/android/text/TextPaint.html#set(android.text.TextPaint))
        ///
        /// Required features: "android-text-TextPaint"
        #[cfg(any(feature = "all", all(feature = "android-text-TextPaint")))]
        pub fn set<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::TextPaint>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/TextPaint", java.flags == PUBLIC, .name == "set", .descriptor == "(Landroid/text/TextPaint;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/TextPaint\0", "set\0", "(Landroid/text/TextPaint;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getUnderlineThickness](https://developer.android.com/reference/android/text/TextPaint.html#getUnderlineThickness())
        pub fn getUnderlineThickness<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/TextPaint", java.flags == PUBLIC, .name == "getUnderlineThickness", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/TextPaint\0", "getUnderlineThickness\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// **get** public [baselineShift](https://developer.android.com/reference/android/text/TextPaint.html#baselineShift)
        pub fn baselineShift<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/text/TextPaint\0", "baselineShift\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [baselineShift](https://developer.android.com/reference/android/text/TextPaint.html#baselineShift)
        pub fn set_baselineShift<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/text/TextPaint\0", "baselineShift\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [bgColor](https://developer.android.com/reference/android/text/TextPaint.html#bgColor)
        pub fn bgColor<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/text/TextPaint\0", "bgColor\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [bgColor](https://developer.android.com/reference/android/text/TextPaint.html#bgColor)
        pub fn set_bgColor<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/text/TextPaint\0", "bgColor\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [density](https://developer.android.com/reference/android/text/TextPaint.html#density)
        pub fn density<'env>(&'env self) -> f32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/text/TextPaint\0", "density\0", "F\0");
                env.get_float_field(class, field)
            }
        }

        /// **set** public [density](https://developer.android.com/reference/android/text/TextPaint.html#density)
        pub fn set_density<'env>(&'env self, value: f32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/text/TextPaint\0", "density\0", "F\0");
                env.set_float_field(class, field, value)
            }
        }

        /// **get** public [drawableState](https://developer.android.com/reference/android/text/TextPaint.html#drawableState)
        pub fn drawableState<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::IntArray>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/text/TextPaint\0", "drawableState\0", "[I\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [drawableState](https://developer.android.com/reference/android/text/TextPaint.html#drawableState)
        pub fn set_drawableState<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj __jni_bindgen::IntArray>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/text/TextPaint\0", "drawableState\0", "[I\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [linkColor](https://developer.android.com/reference/android/text/TextPaint.html#linkColor)
        pub fn linkColor<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/text/TextPaint\0", "linkColor\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [linkColor](https://developer.android.com/reference/android/text/TextPaint.html#linkColor)
        pub fn set_linkColor<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/text/TextPaint\0", "linkColor\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [underlineColor](https://developer.android.com/reference/android/text/TextPaint.html#underlineColor)
        pub fn underlineColor<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/text/TextPaint\0", "underlineColor\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [underlineColor](https://developer.android.com/reference/android/text/TextPaint.html#underlineColor)
        pub fn set_underlineColor<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/text/TextPaint\0", "underlineColor\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [underlineThickness](https://developer.android.com/reference/android/text/TextPaint.html#underlineThickness)
        pub fn underlineThickness<'env>(&'env self) -> f32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/text/TextPaint\0", "underlineThickness\0", "F\0");
                env.get_float_field(class, field)
            }
        }

        /// **set** public [underlineThickness](https://developer.android.com/reference/android/text/TextPaint.html#underlineThickness)
        pub fn set_underlineThickness<'env>(&'env self, value: f32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/text/TextPaint\0", "underlineThickness\0", "F\0");
                env.set_float_field(class, field, value)
            }
        }
    }
}
