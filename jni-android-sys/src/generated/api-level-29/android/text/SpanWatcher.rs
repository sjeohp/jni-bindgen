// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-text-SpanWatcher"))]
__jni_bindgen! {
    /// public interface [SpanWatcher](https://developer.android.com/reference/android/text/SpanWatcher.html)
    ///
    /// Required feature: android-text-SpanWatcher
    public interface SpanWatcher ("android/text/SpanWatcher") extends crate::java::lang::Object, implements crate::android::text::NoCopySpan {

        /// [onSpanAdded](https://developer.android.com/reference/android/text/SpanWatcher.html#onSpanAdded(android.text.Spannable,%20java.lang.Object,%20int,%20int))
        ///
        /// Required features: "android-text-Spannable", "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "android-text-Spannable", feature = "java-lang-Object")))]
        pub fn onSpanAdded<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::Spannable>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/SpanWatcher", java.flags == PUBLIC | ABSTRACT, .name == "onSpanAdded", .descriptor == "(Landroid/text/Spannable;Ljava/lang/Object;II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/SpanWatcher\0", "onSpanAdded\0", "(Landroid/text/Spannable;Ljava/lang/Object;II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onSpanRemoved](https://developer.android.com/reference/android/text/SpanWatcher.html#onSpanRemoved(android.text.Spannable,%20java.lang.Object,%20int,%20int))
        ///
        /// Required features: "android-text-Spannable", "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "android-text-Spannable", feature = "java-lang-Object")))]
        pub fn onSpanRemoved<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::Spannable>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/SpanWatcher", java.flags == PUBLIC | ABSTRACT, .name == "onSpanRemoved", .descriptor == "(Landroid/text/Spannable;Ljava/lang/Object;II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/SpanWatcher\0", "onSpanRemoved\0", "(Landroid/text/Spannable;Ljava/lang/Object;II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onSpanChanged](https://developer.android.com/reference/android/text/SpanWatcher.html#onSpanChanged(android.text.Spannable,%20java.lang.Object,%20int,%20int,%20int,%20int))
        ///
        /// Required features: "android-text-Spannable", "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "android-text-Spannable", feature = "java-lang-Object")))]
        pub fn onSpanChanged<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::Spannable>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>, arg2: i32, arg3: i32, arg4: i32, arg5: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/SpanWatcher", java.flags == PUBLIC | ABSTRACT, .name == "onSpanChanged", .descriptor == "(Landroid/text/Spannable;Ljava/lang/Object;IIII)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/SpanWatcher\0", "onSpanChanged\0", "(Landroid/text/Spannable;Ljava/lang/Object;IIII)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
