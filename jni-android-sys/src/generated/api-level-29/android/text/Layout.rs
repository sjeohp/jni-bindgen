// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-text-Layout"))]
__jni_bindgen! {
    /// public class [Layout](https://developer.android.com/reference/android/text/Layout.html)
    ///
    /// Required feature: android-text-Layout
    public class Layout ("android/text/Layout") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [Layout](https://developer.android.com/reference/android/text/Layout.html#Layout(java.lang.CharSequence,%20android.text.TextPaint,%20int,%20android.text.Layout.Alignment,%20float,%20float))
        // ///
        // /// Required features: "android-text-Layout_Alignment", "android-text-TextPaint", "java-lang-CharSequence"
        // #[cfg(any(feature = "all", all(feature = "android-text-Layout_Alignment", feature = "android-text-TextPaint", feature = "java-lang-CharSequence")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::TextPaint>>, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::Layout_Alignment>>, arg4: f32, arg5: f32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::text::Layout>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/text/Layout", java.flags == PROTECTED, .name == "<init>", .descriptor == "(Ljava/lang/CharSequence;Landroid/text/TextPaint;ILandroid/text/Layout$Alignment;FF)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5)];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/Layout\0", "<init>\0", "(Ljava/lang/CharSequence;Landroid/text/TextPaint;ILandroid/text/Layout$Alignment;FF)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getDesiredWidth](https://developer.android.com/reference/android/text/Layout.html#getDesiredWidth(java.lang.CharSequence,%20android.text.TextPaint))
        ///
        /// Required features: "android-text-TextPaint", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-text-TextPaint", feature = "java-lang-CharSequence")))]
        pub fn getDesiredWidth_CharSequence_TextPaint<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::TextPaint>>) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Layout", java.flags == PUBLIC | STATIC, .name == "getDesiredWidth", .descriptor == "(Ljava/lang/CharSequence;Landroid/text/TextPaint;)F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/text/Layout\0", "getDesiredWidth\0", "(Ljava/lang/CharSequence;Landroid/text/TextPaint;)F\0");
                __jni_env.call_static_float_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDesiredWidth](https://developer.android.com/reference/android/text/Layout.html#getDesiredWidth(java.lang.CharSequence,%20int,%20int,%20android.text.TextPaint))
        ///
        /// Required features: "android-text-TextPaint", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-text-TextPaint", feature = "java-lang-CharSequence")))]
        pub fn getDesiredWidth_CharSequence_int_int_TextPaint<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg1: i32, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::TextPaint>>) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Layout", java.flags == PUBLIC | STATIC, .name == "getDesiredWidth", .descriptor == "(Ljava/lang/CharSequence;IILandroid/text/TextPaint;)F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/text/Layout\0", "getDesiredWidth\0", "(Ljava/lang/CharSequence;IILandroid/text/TextPaint;)F\0");
                __jni_env.call_static_float_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [draw](https://developer.android.com/reference/android/text/Layout.html#draw(android.graphics.Canvas))
        ///
        /// Required features: "android-graphics-Canvas"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Canvas")))]
        pub fn draw_Canvas<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Canvas>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Layout", java.flags == PUBLIC, .name == "draw", .descriptor == "(Landroid/graphics/Canvas;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/Layout\0", "draw\0", "(Landroid/graphics/Canvas;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [draw](https://developer.android.com/reference/android/text/Layout.html#draw(android.graphics.Canvas,%20android.graphics.Path,%20android.graphics.Paint,%20int))
        ///
        /// Required features: "android-graphics-Canvas", "android-graphics-Paint", "android-graphics-Path"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Canvas", feature = "android-graphics-Paint", feature = "android-graphics-Path")))]
        pub fn draw_Canvas_Path_Paint_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Canvas>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Path>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Paint>>, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Layout", java.flags == PUBLIC, .name == "draw", .descriptor == "(Landroid/graphics/Canvas;Landroid/graphics/Path;Landroid/graphics/Paint;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/Layout\0", "draw\0", "(Landroid/graphics/Canvas;Landroid/graphics/Path;Landroid/graphics/Paint;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getText](https://developer.android.com/reference/android/text/Layout.html#getText())
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn getText<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::CharSequence>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Layout", java.flags == PUBLIC | FINAL, .name == "getText", .descriptor == "()Ljava/lang/CharSequence;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/Layout\0", "getText\0", "()Ljava/lang/CharSequence;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPaint](https://developer.android.com/reference/android/text/Layout.html#getPaint())
        ///
        /// Required features: "android-text-TextPaint"
        #[cfg(any(feature = "all", all(feature = "android-text-TextPaint")))]
        pub fn getPaint<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::text::TextPaint>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Layout", java.flags == PUBLIC | FINAL, .name == "getPaint", .descriptor == "()Landroid/text/TextPaint;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/Layout\0", "getPaint\0", "()Landroid/text/TextPaint;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getWidth](https://developer.android.com/reference/android/text/Layout.html#getWidth())
        pub fn getWidth<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Layout", java.flags == PUBLIC | FINAL, .name == "getWidth", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/Layout\0", "getWidth\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getEllipsizedWidth](https://developer.android.com/reference/android/text/Layout.html#getEllipsizedWidth())
        pub fn getEllipsizedWidth<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Layout", java.flags == PUBLIC, .name == "getEllipsizedWidth", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/Layout\0", "getEllipsizedWidth\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [increaseWidthTo](https://developer.android.com/reference/android/text/Layout.html#increaseWidthTo(int))
        pub fn increaseWidthTo<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Layout", java.flags == PUBLIC | FINAL, .name == "increaseWidthTo", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/Layout\0", "increaseWidthTo\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getHeight](https://developer.android.com/reference/android/text/Layout.html#getHeight())
        pub fn getHeight<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Layout", java.flags == PUBLIC, .name == "getHeight", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/Layout\0", "getHeight\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAlignment](https://developer.android.com/reference/android/text/Layout.html#getAlignment())
        ///
        /// Required features: "android-text-Layout_Alignment"
        #[cfg(any(feature = "all", all(feature = "android-text-Layout_Alignment")))]
        pub fn getAlignment<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::text::Layout_Alignment>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Layout", java.flags == PUBLIC | FINAL, .name == "getAlignment", .descriptor == "()Landroid/text/Layout$Alignment;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/Layout\0", "getAlignment\0", "()Landroid/text/Layout$Alignment;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSpacingMultiplier](https://developer.android.com/reference/android/text/Layout.html#getSpacingMultiplier())
        pub fn getSpacingMultiplier<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Layout", java.flags == PUBLIC | FINAL, .name == "getSpacingMultiplier", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/Layout\0", "getSpacingMultiplier\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSpacingAdd](https://developer.android.com/reference/android/text/Layout.html#getSpacingAdd())
        pub fn getSpacingAdd<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Layout", java.flags == PUBLIC | FINAL, .name == "getSpacingAdd", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/Layout\0", "getSpacingAdd\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLineCount](https://developer.android.com/reference/android/text/Layout.html#getLineCount())
        pub fn getLineCount<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Layout", java.flags == PUBLIC | ABSTRACT, .name == "getLineCount", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/Layout\0", "getLineCount\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLineBounds](https://developer.android.com/reference/android/text/Layout.html#getLineBounds(int,%20android.graphics.Rect))
        ///
        /// Required features: "android-graphics-Rect"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Rect")))]
        pub fn getLineBounds<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Rect>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Layout", java.flags == PUBLIC, .name == "getLineBounds", .descriptor == "(ILandroid/graphics/Rect;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/Layout\0", "getLineBounds\0", "(ILandroid/graphics/Rect;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLineTop](https://developer.android.com/reference/android/text/Layout.html#getLineTop(int))
        pub fn getLineTop<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Layout", java.flags == PUBLIC | ABSTRACT, .name == "getLineTop", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/Layout\0", "getLineTop\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLineDescent](https://developer.android.com/reference/android/text/Layout.html#getLineDescent(int))
        pub fn getLineDescent<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Layout", java.flags == PUBLIC | ABSTRACT, .name == "getLineDescent", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/Layout\0", "getLineDescent\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLineStart](https://developer.android.com/reference/android/text/Layout.html#getLineStart(int))
        pub fn getLineStart<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Layout", java.flags == PUBLIC | ABSTRACT, .name == "getLineStart", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/Layout\0", "getLineStart\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getParagraphDirection](https://developer.android.com/reference/android/text/Layout.html#getParagraphDirection(int))
        pub fn getParagraphDirection<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Layout", java.flags == PUBLIC | ABSTRACT, .name == "getParagraphDirection", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/Layout\0", "getParagraphDirection\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLineContainsTab](https://developer.android.com/reference/android/text/Layout.html#getLineContainsTab(int))
        pub fn getLineContainsTab<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Layout", java.flags == PUBLIC | ABSTRACT, .name == "getLineContainsTab", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/Layout\0", "getLineContainsTab\0", "(I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLineDirections](https://developer.android.com/reference/android/text/Layout.html#getLineDirections(int))
        ///
        /// Required features: "android-text-Layout_Directions"
        #[cfg(any(feature = "all", all(feature = "android-text-Layout_Directions")))]
        pub fn getLineDirections<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::text::Layout_Directions>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Layout", java.flags == PUBLIC | ABSTRACT, .name == "getLineDirections", .descriptor == "(I)Landroid/text/Layout$Directions;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/Layout\0", "getLineDirections\0", "(I)Landroid/text/Layout$Directions;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTopPadding](https://developer.android.com/reference/android/text/Layout.html#getTopPadding())
        pub fn getTopPadding<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Layout", java.flags == PUBLIC | ABSTRACT, .name == "getTopPadding", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/Layout\0", "getTopPadding\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getBottomPadding](https://developer.android.com/reference/android/text/Layout.html#getBottomPadding())
        pub fn getBottomPadding<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Layout", java.flags == PUBLIC | ABSTRACT, .name == "getBottomPadding", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/Layout\0", "getBottomPadding\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isRtlCharAt](https://developer.android.com/reference/android/text/Layout.html#isRtlCharAt(int))
        pub fn isRtlCharAt<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Layout", java.flags == PUBLIC, .name == "isRtlCharAt", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/Layout\0", "isRtlCharAt\0", "(I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPrimaryHorizontal](https://developer.android.com/reference/android/text/Layout.html#getPrimaryHorizontal(int))
        pub fn getPrimaryHorizontal<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Layout", java.flags == PUBLIC, .name == "getPrimaryHorizontal", .descriptor == "(I)F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/Layout\0", "getPrimaryHorizontal\0", "(I)F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSecondaryHorizontal](https://developer.android.com/reference/android/text/Layout.html#getSecondaryHorizontal(int))
        pub fn getSecondaryHorizontal<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Layout", java.flags == PUBLIC, .name == "getSecondaryHorizontal", .descriptor == "(I)F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/Layout\0", "getSecondaryHorizontal\0", "(I)F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLineLeft](https://developer.android.com/reference/android/text/Layout.html#getLineLeft(int))
        pub fn getLineLeft<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Layout", java.flags == PUBLIC, .name == "getLineLeft", .descriptor == "(I)F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/Layout\0", "getLineLeft\0", "(I)F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLineRight](https://developer.android.com/reference/android/text/Layout.html#getLineRight(int))
        pub fn getLineRight<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Layout", java.flags == PUBLIC, .name == "getLineRight", .descriptor == "(I)F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/Layout\0", "getLineRight\0", "(I)F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLineMax](https://developer.android.com/reference/android/text/Layout.html#getLineMax(int))
        pub fn getLineMax<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Layout", java.flags == PUBLIC, .name == "getLineMax", .descriptor == "(I)F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/Layout\0", "getLineMax\0", "(I)F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLineWidth](https://developer.android.com/reference/android/text/Layout.html#getLineWidth(int))
        pub fn getLineWidth<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Layout", java.flags == PUBLIC, .name == "getLineWidth", .descriptor == "(I)F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/Layout\0", "getLineWidth\0", "(I)F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLineForVertical](https://developer.android.com/reference/android/text/Layout.html#getLineForVertical(int))
        pub fn getLineForVertical<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Layout", java.flags == PUBLIC, .name == "getLineForVertical", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/Layout\0", "getLineForVertical\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLineForOffset](https://developer.android.com/reference/android/text/Layout.html#getLineForOffset(int))
        pub fn getLineForOffset<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Layout", java.flags == PUBLIC, .name == "getLineForOffset", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/Layout\0", "getLineForOffset\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getOffsetForHorizontal](https://developer.android.com/reference/android/text/Layout.html#getOffsetForHorizontal(int,%20float))
        pub fn getOffsetForHorizontal<'env>(&'env self, arg0: i32, arg1: f32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Layout", java.flags == PUBLIC, .name == "getOffsetForHorizontal", .descriptor == "(IF)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/Layout\0", "getOffsetForHorizontal\0", "(IF)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLineEnd](https://developer.android.com/reference/android/text/Layout.html#getLineEnd(int))
        pub fn getLineEnd<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Layout", java.flags == PUBLIC | FINAL, .name == "getLineEnd", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/Layout\0", "getLineEnd\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLineVisibleEnd](https://developer.android.com/reference/android/text/Layout.html#getLineVisibleEnd(int))
        pub fn getLineVisibleEnd<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Layout", java.flags == PUBLIC, .name == "getLineVisibleEnd", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/Layout\0", "getLineVisibleEnd\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLineBottom](https://developer.android.com/reference/android/text/Layout.html#getLineBottom(int))
        pub fn getLineBottom<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Layout", java.flags == PUBLIC | FINAL, .name == "getLineBottom", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/Layout\0", "getLineBottom\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLineBaseline](https://developer.android.com/reference/android/text/Layout.html#getLineBaseline(int))
        pub fn getLineBaseline<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Layout", java.flags == PUBLIC | FINAL, .name == "getLineBaseline", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/Layout\0", "getLineBaseline\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLineAscent](https://developer.android.com/reference/android/text/Layout.html#getLineAscent(int))
        pub fn getLineAscent<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Layout", java.flags == PUBLIC | FINAL, .name == "getLineAscent", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/Layout\0", "getLineAscent\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getOffsetToLeftOf](https://developer.android.com/reference/android/text/Layout.html#getOffsetToLeftOf(int))
        pub fn getOffsetToLeftOf<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Layout", java.flags == PUBLIC, .name == "getOffsetToLeftOf", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/Layout\0", "getOffsetToLeftOf\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getOffsetToRightOf](https://developer.android.com/reference/android/text/Layout.html#getOffsetToRightOf(int))
        pub fn getOffsetToRightOf<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Layout", java.flags == PUBLIC, .name == "getOffsetToRightOf", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/Layout\0", "getOffsetToRightOf\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCursorPath](https://developer.android.com/reference/android/text/Layout.html#getCursorPath(int,%20android.graphics.Path,%20java.lang.CharSequence))
        ///
        /// Required features: "android-graphics-Path", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Path", feature = "java-lang-CharSequence")))]
        pub fn getCursorPath<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Path>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Layout", java.flags == PUBLIC, .name == "getCursorPath", .descriptor == "(ILandroid/graphics/Path;Ljava/lang/CharSequence;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/Layout\0", "getCursorPath\0", "(ILandroid/graphics/Path;Ljava/lang/CharSequence;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSelectionPath](https://developer.android.com/reference/android/text/Layout.html#getSelectionPath(int,%20int,%20android.graphics.Path))
        ///
        /// Required features: "android-graphics-Path"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Path")))]
        pub fn getSelectionPath<'env>(&'env self, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Path>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Layout", java.flags == PUBLIC, .name == "getSelectionPath", .descriptor == "(IILandroid/graphics/Path;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/Layout\0", "getSelectionPath\0", "(IILandroid/graphics/Path;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getParagraphAlignment](https://developer.android.com/reference/android/text/Layout.html#getParagraphAlignment(int))
        ///
        /// Required features: "android-text-Layout_Alignment"
        #[cfg(any(feature = "all", all(feature = "android-text-Layout_Alignment")))]
        pub fn getParagraphAlignment<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::text::Layout_Alignment>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Layout", java.flags == PUBLIC | FINAL, .name == "getParagraphAlignment", .descriptor == "(I)Landroid/text/Layout$Alignment;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/Layout\0", "getParagraphAlignment\0", "(I)Landroid/text/Layout$Alignment;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getParagraphLeft](https://developer.android.com/reference/android/text/Layout.html#getParagraphLeft(int))
        pub fn getParagraphLeft<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Layout", java.flags == PUBLIC | FINAL, .name == "getParagraphLeft", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/Layout\0", "getParagraphLeft\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getParagraphRight](https://developer.android.com/reference/android/text/Layout.html#getParagraphRight(int))
        pub fn getParagraphRight<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Layout", java.flags == PUBLIC | FINAL, .name == "getParagraphRight", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/Layout\0", "getParagraphRight\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [isSpanned](https://developer.android.com/reference/android/text/Layout.html#isSpanned())
        // fn isSpanned<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/text/Layout", java.flags == PROTECTED | FINAL, .name == "isSpanned", .descriptor == "()Z"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/Layout\0", "isSpanned\0", "()Z\0");
        //         __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getEllipsisStart](https://developer.android.com/reference/android/text/Layout.html#getEllipsisStart(int))
        pub fn getEllipsisStart<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Layout", java.flags == PUBLIC | ABSTRACT, .name == "getEllipsisStart", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/Layout\0", "getEllipsisStart\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getEllipsisCount](https://developer.android.com/reference/android/text/Layout.html#getEllipsisCount(int))
        pub fn getEllipsisCount<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Layout", java.flags == PUBLIC | ABSTRACT, .name == "getEllipsisCount", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/Layout\0", "getEllipsisCount\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [BREAK_STRATEGY_BALANCED](https://developer.android.com/reference/android/text/Layout.html#BREAK_STRATEGY_BALANCED)
        pub const BREAK_STRATEGY_BALANCED : i32 = 2;

        /// public static final [BREAK_STRATEGY_HIGH_QUALITY](https://developer.android.com/reference/android/text/Layout.html#BREAK_STRATEGY_HIGH_QUALITY)
        pub const BREAK_STRATEGY_HIGH_QUALITY : i32 = 1;

        /// public static final [BREAK_STRATEGY_SIMPLE](https://developer.android.com/reference/android/text/Layout.html#BREAK_STRATEGY_SIMPLE)
        pub const BREAK_STRATEGY_SIMPLE : i32 = 0;

        /// public static final [DEFAULT_LINESPACING_ADDITION](https://developer.android.com/reference/android/text/Layout.html#DEFAULT_LINESPACING_ADDITION)
        pub const DEFAULT_LINESPACING_ADDITION : f32 = 0f32;

        /// public static final [DEFAULT_LINESPACING_MULTIPLIER](https://developer.android.com/reference/android/text/Layout.html#DEFAULT_LINESPACING_MULTIPLIER)
        pub const DEFAULT_LINESPACING_MULTIPLIER : f32 = 1f32;

        /// public static final [DIR_LEFT_TO_RIGHT](https://developer.android.com/reference/android/text/Layout.html#DIR_LEFT_TO_RIGHT)
        pub const DIR_LEFT_TO_RIGHT : i32 = 1;

        /// public static final [DIR_RIGHT_TO_LEFT](https://developer.android.com/reference/android/text/Layout.html#DIR_RIGHT_TO_LEFT)
        pub const DIR_RIGHT_TO_LEFT : i32 = -1;

        /// public static final [HYPHENATION_FREQUENCY_FULL](https://developer.android.com/reference/android/text/Layout.html#HYPHENATION_FREQUENCY_FULL)
        pub const HYPHENATION_FREQUENCY_FULL : i32 = 2;

        /// public static final [HYPHENATION_FREQUENCY_NONE](https://developer.android.com/reference/android/text/Layout.html#HYPHENATION_FREQUENCY_NONE)
        pub const HYPHENATION_FREQUENCY_NONE : i32 = 0;

        /// public static final [HYPHENATION_FREQUENCY_NORMAL](https://developer.android.com/reference/android/text/Layout.html#HYPHENATION_FREQUENCY_NORMAL)
        pub const HYPHENATION_FREQUENCY_NORMAL : i32 = 1;

        /// public static final [JUSTIFICATION_MODE_INTER_WORD](https://developer.android.com/reference/android/text/Layout.html#JUSTIFICATION_MODE_INTER_WORD)
        pub const JUSTIFICATION_MODE_INTER_WORD : i32 = 1;

        /// public static final [JUSTIFICATION_MODE_NONE](https://developer.android.com/reference/android/text/Layout.html#JUSTIFICATION_MODE_NONE)
        pub const JUSTIFICATION_MODE_NONE : i32 = 0;
    }
}
