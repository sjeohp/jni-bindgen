// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-text-BidiFormatter"))]
__jni_bindgen! {
    /// public final class [BidiFormatter](https://developer.android.com/reference/android/text/BidiFormatter.html)
    ///
    /// Required feature: android-text-BidiFormatter
    public final class BidiFormatter ("android/text/BidiFormatter") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [BidiFormatter](https://developer.android.com/reference/android/text/BidiFormatter.html#BidiFormatter(boolean,%20int,%20android.text.TextDirectionHeuristic))
        // ///
        // /// Required features: "android-text-TextDirectionHeuristic"
        // #[cfg(any(feature = "all", all(feature = "android-text-TextDirectionHeuristic")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: bool, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::TextDirectionHeuristic>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::text::BidiFormatter>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/text/BidiFormatter", java.flags == (empty), .name == "<init>", .descriptor == "(ZILandroid/text/TextDirectionHeuristic;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/BidiFormatter\0", "<init>\0", "(ZILandroid/text/TextDirectionHeuristic;)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getInstance](https://developer.android.com/reference/android/text/BidiFormatter.html#getInstance())
        ///
        /// Required features: "android-text-BidiFormatter"
        #[cfg(any(feature = "all", all(feature = "android-text-BidiFormatter")))]
        pub fn getInstance<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::text::BidiFormatter>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/BidiFormatter", java.flags == PUBLIC | STATIC, .name == "getInstance", .descriptor == "()Landroid/text/BidiFormatter;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/text/BidiFormatter\0", "getInstance\0", "()Landroid/text/BidiFormatter;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInstance](https://developer.android.com/reference/android/text/BidiFormatter.html#getInstance(boolean))
        ///
        /// Required features: "android-text-BidiFormatter"
        #[cfg(any(feature = "all", all(feature = "android-text-BidiFormatter")))]
        pub fn getInstance_boolean<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::text::BidiFormatter>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/BidiFormatter", java.flags == PUBLIC | STATIC, .name == "getInstance", .descriptor == "(Z)Landroid/text/BidiFormatter;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/text/BidiFormatter\0", "getInstance\0", "(Z)Landroid/text/BidiFormatter;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInstance](https://developer.android.com/reference/android/text/BidiFormatter.html#getInstance(java.util.Locale))
        ///
        /// Required features: "android-text-BidiFormatter", "java-util-Locale"
        #[cfg(any(feature = "all", all(feature = "android-text-BidiFormatter", feature = "java-util-Locale")))]
        pub fn getInstance_Locale<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Locale>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::text::BidiFormatter>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/BidiFormatter", java.flags == PUBLIC | STATIC, .name == "getInstance", .descriptor == "(Ljava/util/Locale;)Landroid/text/BidiFormatter;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/text/BidiFormatter\0", "getInstance\0", "(Ljava/util/Locale;)Landroid/text/BidiFormatter;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isRtlContext](https://developer.android.com/reference/android/text/BidiFormatter.html#isRtlContext())
        pub fn isRtlContext<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/BidiFormatter", java.flags == PUBLIC, .name == "isRtlContext", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/BidiFormatter\0", "isRtlContext\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getStereoReset](https://developer.android.com/reference/android/text/BidiFormatter.html#getStereoReset())
        pub fn getStereoReset<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/BidiFormatter", java.flags == PUBLIC, .name == "getStereoReset", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/BidiFormatter\0", "getStereoReset\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isRtl](https://developer.android.com/reference/android/text/BidiFormatter.html#isRtl(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn isRtl_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/BidiFormatter", java.flags == PUBLIC, .name == "isRtl", .descriptor == "(Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/BidiFormatter\0", "isRtl\0", "(Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isRtl](https://developer.android.com/reference/android/text/BidiFormatter.html#isRtl(java.lang.CharSequence))
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn isRtl_CharSequence<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/BidiFormatter", java.flags == PUBLIC, .name == "isRtl", .descriptor == "(Ljava/lang/CharSequence;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/BidiFormatter\0", "isRtl\0", "(Ljava/lang/CharSequence;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unicodeWrap](https://developer.android.com/reference/android/text/BidiFormatter.html#unicodeWrap(java.lang.String,%20android.text.TextDirectionHeuristic,%20boolean))
        ///
        /// Required features: "android-text-TextDirectionHeuristic", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-text-TextDirectionHeuristic", feature = "java-lang-String")))]
        pub fn unicodeWrap_String_TextDirectionHeuristic_boolean<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::TextDirectionHeuristic>>, arg2: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/BidiFormatter", java.flags == PUBLIC, .name == "unicodeWrap", .descriptor == "(Ljava/lang/String;Landroid/text/TextDirectionHeuristic;Z)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/BidiFormatter\0", "unicodeWrap\0", "(Ljava/lang/String;Landroid/text/TextDirectionHeuristic;Z)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unicodeWrap](https://developer.android.com/reference/android/text/BidiFormatter.html#unicodeWrap(java.lang.CharSequence,%20android.text.TextDirectionHeuristic,%20boolean))
        ///
        /// Required features: "android-text-TextDirectionHeuristic", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-text-TextDirectionHeuristic", feature = "java-lang-CharSequence")))]
        pub fn unicodeWrap_CharSequence_TextDirectionHeuristic_boolean<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::TextDirectionHeuristic>>, arg2: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::CharSequence>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/BidiFormatter", java.flags == PUBLIC, .name == "unicodeWrap", .descriptor == "(Ljava/lang/CharSequence;Landroid/text/TextDirectionHeuristic;Z)Ljava/lang/CharSequence;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/BidiFormatter\0", "unicodeWrap\0", "(Ljava/lang/CharSequence;Landroid/text/TextDirectionHeuristic;Z)Ljava/lang/CharSequence;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unicodeWrap](https://developer.android.com/reference/android/text/BidiFormatter.html#unicodeWrap(java.lang.String,%20android.text.TextDirectionHeuristic))
        ///
        /// Required features: "android-text-TextDirectionHeuristic", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-text-TextDirectionHeuristic", feature = "java-lang-String")))]
        pub fn unicodeWrap_String_TextDirectionHeuristic<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::TextDirectionHeuristic>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/BidiFormatter", java.flags == PUBLIC, .name == "unicodeWrap", .descriptor == "(Ljava/lang/String;Landroid/text/TextDirectionHeuristic;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/BidiFormatter\0", "unicodeWrap\0", "(Ljava/lang/String;Landroid/text/TextDirectionHeuristic;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unicodeWrap](https://developer.android.com/reference/android/text/BidiFormatter.html#unicodeWrap(java.lang.CharSequence,%20android.text.TextDirectionHeuristic))
        ///
        /// Required features: "android-text-TextDirectionHeuristic", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-text-TextDirectionHeuristic", feature = "java-lang-CharSequence")))]
        pub fn unicodeWrap_CharSequence_TextDirectionHeuristic<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::TextDirectionHeuristic>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::CharSequence>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/BidiFormatter", java.flags == PUBLIC, .name == "unicodeWrap", .descriptor == "(Ljava/lang/CharSequence;Landroid/text/TextDirectionHeuristic;)Ljava/lang/CharSequence;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/BidiFormatter\0", "unicodeWrap\0", "(Ljava/lang/CharSequence;Landroid/text/TextDirectionHeuristic;)Ljava/lang/CharSequence;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unicodeWrap](https://developer.android.com/reference/android/text/BidiFormatter.html#unicodeWrap(java.lang.String,%20boolean))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn unicodeWrap_String_boolean<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/BidiFormatter", java.flags == PUBLIC, .name == "unicodeWrap", .descriptor == "(Ljava/lang/String;Z)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/BidiFormatter\0", "unicodeWrap\0", "(Ljava/lang/String;Z)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unicodeWrap](https://developer.android.com/reference/android/text/BidiFormatter.html#unicodeWrap(java.lang.CharSequence,%20boolean))
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn unicodeWrap_CharSequence_boolean<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg1: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::CharSequence>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/BidiFormatter", java.flags == PUBLIC, .name == "unicodeWrap", .descriptor == "(Ljava/lang/CharSequence;Z)Ljava/lang/CharSequence;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/BidiFormatter\0", "unicodeWrap\0", "(Ljava/lang/CharSequence;Z)Ljava/lang/CharSequence;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unicodeWrap](https://developer.android.com/reference/android/text/BidiFormatter.html#unicodeWrap(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn unicodeWrap_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/BidiFormatter", java.flags == PUBLIC, .name == "unicodeWrap", .descriptor == "(Ljava/lang/String;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/BidiFormatter\0", "unicodeWrap\0", "(Ljava/lang/String;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unicodeWrap](https://developer.android.com/reference/android/text/BidiFormatter.html#unicodeWrap(java.lang.CharSequence))
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn unicodeWrap_CharSequence<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::CharSequence>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/BidiFormatter", java.flags == PUBLIC, .name == "unicodeWrap", .descriptor == "(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/BidiFormatter\0", "unicodeWrap\0", "(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
