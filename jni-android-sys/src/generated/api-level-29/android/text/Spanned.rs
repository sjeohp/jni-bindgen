// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-text-Spanned"))]
__jni_bindgen! {
    /// public interface [Spanned](https://developer.android.com/reference/android/text/Spanned.html)
    ///
    /// Required feature: android-text-Spanned
    public interface Spanned ("android/text/Spanned") extends crate::java::lang::Object, implements crate::java::lang::CharSequence {

        /// [getSpans](https://developer.android.com/reference/android/text/Spanned.html#getSpans(int,%20int,%20java.lang.Class))
        ///
        /// Required features: "java-lang-Class", "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-lang-Object")))]
        pub fn getSpans<'env>(&'env self, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::Object, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Spanned", java.flags == PUBLIC | ABSTRACT, .name == "getSpans", .descriptor == "(IILjava/lang/Class;)[Ljava/lang/Object;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/Spanned\0", "getSpans\0", "(IILjava/lang/Class;)[Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSpanStart](https://developer.android.com/reference/android/text/Spanned.html#getSpanStart(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn getSpanStart<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Spanned", java.flags == PUBLIC | ABSTRACT, .name == "getSpanStart", .descriptor == "(Ljava/lang/Object;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/Spanned\0", "getSpanStart\0", "(Ljava/lang/Object;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSpanEnd](https://developer.android.com/reference/android/text/Spanned.html#getSpanEnd(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn getSpanEnd<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Spanned", java.flags == PUBLIC | ABSTRACT, .name == "getSpanEnd", .descriptor == "(Ljava/lang/Object;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/Spanned\0", "getSpanEnd\0", "(Ljava/lang/Object;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSpanFlags](https://developer.android.com/reference/android/text/Spanned.html#getSpanFlags(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn getSpanFlags<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Spanned", java.flags == PUBLIC | ABSTRACT, .name == "getSpanFlags", .descriptor == "(Ljava/lang/Object;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/Spanned\0", "getSpanFlags\0", "(Ljava/lang/Object;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [nextSpanTransition](https://developer.android.com/reference/android/text/Spanned.html#nextSpanTransition(int,%20int,%20java.lang.Class))
        ///
        /// Required features: "java-lang-Class"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class")))]
        pub fn nextSpanTransition<'env>(&'env self, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Spanned", java.flags == PUBLIC | ABSTRACT, .name == "nextSpanTransition", .descriptor == "(IILjava/lang/Class;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/Spanned\0", "nextSpanTransition\0", "(IILjava/lang/Class;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [SPAN_COMPOSING](https://developer.android.com/reference/android/text/Spanned.html#SPAN_COMPOSING)
        pub const SPAN_COMPOSING : i32 = 256;

        /// public static final [SPAN_EXCLUSIVE_EXCLUSIVE](https://developer.android.com/reference/android/text/Spanned.html#SPAN_EXCLUSIVE_EXCLUSIVE)
        pub const SPAN_EXCLUSIVE_EXCLUSIVE : i32 = 33;

        /// public static final [SPAN_EXCLUSIVE_INCLUSIVE](https://developer.android.com/reference/android/text/Spanned.html#SPAN_EXCLUSIVE_INCLUSIVE)
        pub const SPAN_EXCLUSIVE_INCLUSIVE : i32 = 34;

        /// public static final [SPAN_INCLUSIVE_EXCLUSIVE](https://developer.android.com/reference/android/text/Spanned.html#SPAN_INCLUSIVE_EXCLUSIVE)
        pub const SPAN_INCLUSIVE_EXCLUSIVE : i32 = 17;

        /// public static final [SPAN_INCLUSIVE_INCLUSIVE](https://developer.android.com/reference/android/text/Spanned.html#SPAN_INCLUSIVE_INCLUSIVE)
        pub const SPAN_INCLUSIVE_INCLUSIVE : i32 = 18;

        /// public static final [SPAN_INTERMEDIATE](https://developer.android.com/reference/android/text/Spanned.html#SPAN_INTERMEDIATE)
        pub const SPAN_INTERMEDIATE : i32 = 512;

        /// public static final [SPAN_MARK_MARK](https://developer.android.com/reference/android/text/Spanned.html#SPAN_MARK_MARK)
        pub const SPAN_MARK_MARK : i32 = 17;

        /// public static final [SPAN_MARK_POINT](https://developer.android.com/reference/android/text/Spanned.html#SPAN_MARK_POINT)
        pub const SPAN_MARK_POINT : i32 = 18;

        /// public static final [SPAN_PARAGRAPH](https://developer.android.com/reference/android/text/Spanned.html#SPAN_PARAGRAPH)
        pub const SPAN_PARAGRAPH : i32 = 51;

        /// public static final [SPAN_POINT_MARK](https://developer.android.com/reference/android/text/Spanned.html#SPAN_POINT_MARK)
        pub const SPAN_POINT_MARK : i32 = 33;

        /// public static final [SPAN_POINT_MARK_MASK](https://developer.android.com/reference/android/text/Spanned.html#SPAN_POINT_MARK_MASK)
        pub const SPAN_POINT_MARK_MASK : i32 = 51;

        /// public static final [SPAN_POINT_POINT](https://developer.android.com/reference/android/text/Spanned.html#SPAN_POINT_POINT)
        pub const SPAN_POINT_POINT : i32 = 34;

        /// public static final [SPAN_PRIORITY](https://developer.android.com/reference/android/text/Spanned.html#SPAN_PRIORITY)
        pub const SPAN_PRIORITY : i32 = 16711680;

        /// public static final [SPAN_PRIORITY_SHIFT](https://developer.android.com/reference/android/text/Spanned.html#SPAN_PRIORITY_SHIFT)
        pub const SPAN_PRIORITY_SHIFT : i32 = 16;

        /// public static final [SPAN_USER](https://developer.android.com/reference/android/text/Spanned.html#SPAN_USER)
        pub const SPAN_USER : i32 = -16777216;

        /// public static final [SPAN_USER_SHIFT](https://developer.android.com/reference/android/text/Spanned.html#SPAN_USER_SHIFT)
        pub const SPAN_USER_SHIFT : i32 = 24;
    }
}
