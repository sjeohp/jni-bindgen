// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-text-Editable"))]
__jni_bindgen! {
    /// public interface [Editable](https://developer.android.com/reference/android/text/Editable.html)
    ///
    /// Required feature: android-text-Editable
    public interface Editable ("android/text/Editable") extends crate::java::lang::Object, implements crate::java::lang::CharSequence, crate::android::text::GetChars, crate::android::text::Spannable, crate::java::lang::Appendable {

        /// [replace](https://developer.android.com/reference/android/text/Editable.html#replace(int,%20int,%20java.lang.CharSequence,%20int,%20int))
        ///
        /// Required features: "android-text-Editable", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-text-Editable", feature = "java-lang-CharSequence")))]
        pub fn replace_int_int_CharSequence_int_int<'env>(&'env self, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg3: i32, arg4: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::text::Editable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Editable", java.flags == PUBLIC | ABSTRACT, .name == "replace", .descriptor == "(IILjava/lang/CharSequence;II)Landroid/text/Editable;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/Editable\0", "replace\0", "(IILjava/lang/CharSequence;II)Landroid/text/Editable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [replace](https://developer.android.com/reference/android/text/Editable.html#replace(int,%20int,%20java.lang.CharSequence))
        ///
        /// Required features: "android-text-Editable", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-text-Editable", feature = "java-lang-CharSequence")))]
        pub fn replace_int_int_CharSequence<'env>(&'env self, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::text::Editable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Editable", java.flags == PUBLIC | ABSTRACT, .name == "replace", .descriptor == "(IILjava/lang/CharSequence;)Landroid/text/Editable;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/Editable\0", "replace\0", "(IILjava/lang/CharSequence;)Landroid/text/Editable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [insert](https://developer.android.com/reference/android/text/Editable.html#insert(int,%20java.lang.CharSequence,%20int,%20int))
        ///
        /// Required features: "android-text-Editable", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-text-Editable", feature = "java-lang-CharSequence")))]
        pub fn insert_int_CharSequence_int_int<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::text::Editable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Editable", java.flags == PUBLIC | ABSTRACT, .name == "insert", .descriptor == "(ILjava/lang/CharSequence;II)Landroid/text/Editable;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/Editable\0", "insert\0", "(ILjava/lang/CharSequence;II)Landroid/text/Editable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [insert](https://developer.android.com/reference/android/text/Editable.html#insert(int,%20java.lang.CharSequence))
        ///
        /// Required features: "android-text-Editable", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-text-Editable", feature = "java-lang-CharSequence")))]
        pub fn insert_int_CharSequence<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::text::Editable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Editable", java.flags == PUBLIC | ABSTRACT, .name == "insert", .descriptor == "(ILjava/lang/CharSequence;)Landroid/text/Editable;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/Editable\0", "insert\0", "(ILjava/lang/CharSequence;)Landroid/text/Editable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [delete](https://developer.android.com/reference/android/text/Editable.html#delete(int,%20int))
        ///
        /// Required features: "android-text-Editable"
        #[cfg(any(feature = "all", all(feature = "android-text-Editable")))]
        pub fn delete<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::text::Editable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Editable", java.flags == PUBLIC | ABSTRACT, .name == "delete", .descriptor == "(II)Landroid/text/Editable;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/Editable\0", "delete\0", "(II)Landroid/text/Editable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [append](https://developer.android.com/reference/android/text/Editable.html#append(java.lang.CharSequence))
        ///
        /// Required features: "android-text-Editable", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-text-Editable", feature = "java-lang-CharSequence")))]
        pub fn append_CharSequence<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::text::Editable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Editable", java.flags == PUBLIC | ABSTRACT, .name == "append", .descriptor == "(Ljava/lang/CharSequence;)Landroid/text/Editable;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/Editable\0", "append\0", "(Ljava/lang/CharSequence;)Landroid/text/Editable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [append](https://developer.android.com/reference/android/text/Editable.html#append(java.lang.CharSequence,%20int,%20int))
        ///
        /// Required features: "android-text-Editable", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-text-Editable", feature = "java-lang-CharSequence")))]
        pub fn append_CharSequence_int_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::text::Editable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Editable", java.flags == PUBLIC | ABSTRACT, .name == "append", .descriptor == "(Ljava/lang/CharSequence;II)Landroid/text/Editable;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/Editable\0", "append\0", "(Ljava/lang/CharSequence;II)Landroid/text/Editable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [append](https://developer.android.com/reference/android/text/Editable.html#append(char))
        ///
        /// Required features: "android-text-Editable"
        #[cfg(any(feature = "all", all(feature = "android-text-Editable")))]
        pub fn append_char<'env>(&'env self, arg0: __jni_bindgen::jchar) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::text::Editable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Editable", java.flags == PUBLIC | ABSTRACT, .name == "append", .descriptor == "(C)Landroid/text/Editable;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/Editable\0", "append\0", "(C)Landroid/text/Editable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clear](https://developer.android.com/reference/android/text/Editable.html#clear())
        pub fn clear<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Editable", java.flags == PUBLIC | ABSTRACT, .name == "clear", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/Editable\0", "clear\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clearSpans](https://developer.android.com/reference/android/text/Editable.html#clearSpans())
        pub fn clearSpans<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Editable", java.flags == PUBLIC | ABSTRACT, .name == "clearSpans", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/Editable\0", "clearSpans\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setFilters](https://developer.android.com/reference/android/text/Editable.html#setFilters(android.text.InputFilter%5B%5D))
        ///
        /// Required features: "android-text-InputFilter"
        #[cfg(any(feature = "all", all(feature = "android-text-InputFilter")))]
        pub fn setFilters<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::android::text::InputFilter, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Editable", java.flags == PUBLIC | ABSTRACT, .name == "setFilters", .descriptor == "([Landroid/text/InputFilter;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/Editable\0", "setFilters\0", "([Landroid/text/InputFilter;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFilters](https://developer.android.com/reference/android/text/Editable.html#getFilters())
        ///
        /// Required features: "android-text-InputFilter"
        #[cfg(any(feature = "all", all(feature = "android-text-InputFilter")))]
        pub fn getFilters<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::android::text::InputFilter, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Editable", java.flags == PUBLIC | ABSTRACT, .name == "getFilters", .descriptor == "()[Landroid/text/InputFilter;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/Editable\0", "getFilters\0", "()[Landroid/text/InputFilter;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Bridge method - type erasure
        // /// [append](https://developer.android.com/reference/android/text/Editable.html#append(char))
        // ///
        // /// Required features: "java-lang-Appendable"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Appendable")))]
        // pub fn append_char<'env>(&'env self, arg0: __jni_bindgen::jchar) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Appendable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/text/Editable", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "append", .descriptor == "(C)Ljava/lang/Appendable;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/Editable\0", "append\0", "(C)Ljava/lang/Appendable;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [append](https://developer.android.com/reference/android/text/Editable.html#append(java.lang.CharSequence,%20int,%20int))
        // ///
        // /// Required features: "java-lang-Appendable", "java-lang-CharSequence"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Appendable", feature = "java-lang-CharSequence")))]
        // pub fn append_CharSequence_int_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Appendable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/text/Editable", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "append", .descriptor == "(Ljava/lang/CharSequence;II)Ljava/lang/Appendable;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/Editable\0", "append\0", "(Ljava/lang/CharSequence;II)Ljava/lang/Appendable;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [append](https://developer.android.com/reference/android/text/Editable.html#append(java.lang.CharSequence))
        // ///
        // /// Required features: "java-lang-Appendable", "java-lang-CharSequence"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Appendable", feature = "java-lang-CharSequence")))]
        // pub fn append_CharSequence<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Appendable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/text/Editable", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "append", .descriptor == "(Ljava/lang/CharSequence;)Ljava/lang/Appendable;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/Editable\0", "append\0", "(Ljava/lang/CharSequence;)Ljava/lang/Appendable;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }
    }
}
