// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-text-DynamicLayout_Builder"))]
__jni_bindgen! {
    /// public final class [DynamicLayout.Builder](https://developer.android.com/reference/android/text/DynamicLayout.Builder.html)
    ///
    /// Required feature: android-text-DynamicLayout_Builder
    public final class DynamicLayout_Builder ("android/text/DynamicLayout$Builder") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [Builder](https://developer.android.com/reference/android/text/DynamicLayout.Builder.html#Builder())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::text::DynamicLayout_Builder>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/text/DynamicLayout$Builder", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/DynamicLayout$Builder\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [obtain](https://developer.android.com/reference/android/text/DynamicLayout.Builder.html#obtain(java.lang.CharSequence,%20android.text.TextPaint,%20int))
        ///
        /// Required features: "android-text-DynamicLayout_Builder", "android-text-TextPaint", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-text-DynamicLayout_Builder", feature = "android-text-TextPaint", feature = "java-lang-CharSequence")))]
        pub fn obtain<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::TextPaint>>, arg2: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::text::DynamicLayout_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/DynamicLayout$Builder", java.flags == PUBLIC | STATIC, .name == "obtain", .descriptor == "(Ljava/lang/CharSequence;Landroid/text/TextPaint;I)Landroid/text/DynamicLayout$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/text/DynamicLayout$Builder\0", "obtain\0", "(Ljava/lang/CharSequence;Landroid/text/TextPaint;I)Landroid/text/DynamicLayout$Builder;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDisplayText](https://developer.android.com/reference/android/text/DynamicLayout.Builder.html#setDisplayText(java.lang.CharSequence))
        ///
        /// Required features: "android-text-DynamicLayout_Builder", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-text-DynamicLayout_Builder", feature = "java-lang-CharSequence")))]
        pub fn setDisplayText<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::text::DynamicLayout_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/DynamicLayout$Builder", java.flags == PUBLIC, .name == "setDisplayText", .descriptor == "(Ljava/lang/CharSequence;)Landroid/text/DynamicLayout$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/DynamicLayout$Builder\0", "setDisplayText\0", "(Ljava/lang/CharSequence;)Landroid/text/DynamicLayout$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAlignment](https://developer.android.com/reference/android/text/DynamicLayout.Builder.html#setAlignment(android.text.Layout.Alignment))
        ///
        /// Required features: "android-text-DynamicLayout_Builder", "android-text-Layout_Alignment"
        #[cfg(any(feature = "all", all(feature = "android-text-DynamicLayout_Builder", feature = "android-text-Layout_Alignment")))]
        pub fn setAlignment<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::Layout_Alignment>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::text::DynamicLayout_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/DynamicLayout$Builder", java.flags == PUBLIC, .name == "setAlignment", .descriptor == "(Landroid/text/Layout$Alignment;)Landroid/text/DynamicLayout$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/DynamicLayout$Builder\0", "setAlignment\0", "(Landroid/text/Layout$Alignment;)Landroid/text/DynamicLayout$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTextDirection](https://developer.android.com/reference/android/text/DynamicLayout.Builder.html#setTextDirection(android.text.TextDirectionHeuristic))
        ///
        /// Required features: "android-text-DynamicLayout_Builder", "android-text-TextDirectionHeuristic"
        #[cfg(any(feature = "all", all(feature = "android-text-DynamicLayout_Builder", feature = "android-text-TextDirectionHeuristic")))]
        pub fn setTextDirection<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::TextDirectionHeuristic>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::text::DynamicLayout_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/DynamicLayout$Builder", java.flags == PUBLIC, .name == "setTextDirection", .descriptor == "(Landroid/text/TextDirectionHeuristic;)Landroid/text/DynamicLayout$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/DynamicLayout$Builder\0", "setTextDirection\0", "(Landroid/text/TextDirectionHeuristic;)Landroid/text/DynamicLayout$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setLineSpacing](https://developer.android.com/reference/android/text/DynamicLayout.Builder.html#setLineSpacing(float,%20float))
        ///
        /// Required features: "android-text-DynamicLayout_Builder"
        #[cfg(any(feature = "all", all(feature = "android-text-DynamicLayout_Builder")))]
        pub fn setLineSpacing<'env>(&'env self, arg0: f32, arg1: f32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::text::DynamicLayout_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/DynamicLayout$Builder", java.flags == PUBLIC, .name == "setLineSpacing", .descriptor == "(FF)Landroid/text/DynamicLayout$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/DynamicLayout$Builder\0", "setLineSpacing\0", "(FF)Landroid/text/DynamicLayout$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setIncludePad](https://developer.android.com/reference/android/text/DynamicLayout.Builder.html#setIncludePad(boolean))
        ///
        /// Required features: "android-text-DynamicLayout_Builder"
        #[cfg(any(feature = "all", all(feature = "android-text-DynamicLayout_Builder")))]
        pub fn setIncludePad<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::text::DynamicLayout_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/DynamicLayout$Builder", java.flags == PUBLIC, .name == "setIncludePad", .descriptor == "(Z)Landroid/text/DynamicLayout$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/DynamicLayout$Builder\0", "setIncludePad\0", "(Z)Landroid/text/DynamicLayout$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setUseLineSpacingFromFallbacks](https://developer.android.com/reference/android/text/DynamicLayout.Builder.html#setUseLineSpacingFromFallbacks(boolean))
        ///
        /// Required features: "android-text-DynamicLayout_Builder"
        #[cfg(any(feature = "all", all(feature = "android-text-DynamicLayout_Builder")))]
        pub fn setUseLineSpacingFromFallbacks<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::text::DynamicLayout_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/DynamicLayout$Builder", java.flags == PUBLIC, .name == "setUseLineSpacingFromFallbacks", .descriptor == "(Z)Landroid/text/DynamicLayout$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/DynamicLayout$Builder\0", "setUseLineSpacingFromFallbacks\0", "(Z)Landroid/text/DynamicLayout$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setEllipsizedWidth](https://developer.android.com/reference/android/text/DynamicLayout.Builder.html#setEllipsizedWidth(int))
        ///
        /// Required features: "android-text-DynamicLayout_Builder"
        #[cfg(any(feature = "all", all(feature = "android-text-DynamicLayout_Builder")))]
        pub fn setEllipsizedWidth<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::text::DynamicLayout_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/DynamicLayout$Builder", java.flags == PUBLIC, .name == "setEllipsizedWidth", .descriptor == "(I)Landroid/text/DynamicLayout$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/DynamicLayout$Builder\0", "setEllipsizedWidth\0", "(I)Landroid/text/DynamicLayout$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setEllipsize](https://developer.android.com/reference/android/text/DynamicLayout.Builder.html#setEllipsize(android.text.TextUtils.TruncateAt))
        ///
        /// Required features: "android-text-DynamicLayout_Builder", "android-text-TextUtils_TruncateAt"
        #[cfg(any(feature = "all", all(feature = "android-text-DynamicLayout_Builder", feature = "android-text-TextUtils_TruncateAt")))]
        pub fn setEllipsize<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::TextUtils_TruncateAt>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::text::DynamicLayout_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/DynamicLayout$Builder", java.flags == PUBLIC, .name == "setEllipsize", .descriptor == "(Landroid/text/TextUtils$TruncateAt;)Landroid/text/DynamicLayout$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/DynamicLayout$Builder\0", "setEllipsize\0", "(Landroid/text/TextUtils$TruncateAt;)Landroid/text/DynamicLayout$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setBreakStrategy](https://developer.android.com/reference/android/text/DynamicLayout.Builder.html#setBreakStrategy(int))
        ///
        /// Required features: "android-text-DynamicLayout_Builder"
        #[cfg(any(feature = "all", all(feature = "android-text-DynamicLayout_Builder")))]
        pub fn setBreakStrategy<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::text::DynamicLayout_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/DynamicLayout$Builder", java.flags == PUBLIC, .name == "setBreakStrategy", .descriptor == "(I)Landroid/text/DynamicLayout$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/DynamicLayout$Builder\0", "setBreakStrategy\0", "(I)Landroid/text/DynamicLayout$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setHyphenationFrequency](https://developer.android.com/reference/android/text/DynamicLayout.Builder.html#setHyphenationFrequency(int))
        ///
        /// Required features: "android-text-DynamicLayout_Builder"
        #[cfg(any(feature = "all", all(feature = "android-text-DynamicLayout_Builder")))]
        pub fn setHyphenationFrequency<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::text::DynamicLayout_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/DynamicLayout$Builder", java.flags == PUBLIC, .name == "setHyphenationFrequency", .descriptor == "(I)Landroid/text/DynamicLayout$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/DynamicLayout$Builder\0", "setHyphenationFrequency\0", "(I)Landroid/text/DynamicLayout$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setJustificationMode](https://developer.android.com/reference/android/text/DynamicLayout.Builder.html#setJustificationMode(int))
        ///
        /// Required features: "android-text-DynamicLayout_Builder"
        #[cfg(any(feature = "all", all(feature = "android-text-DynamicLayout_Builder")))]
        pub fn setJustificationMode<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::text::DynamicLayout_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/DynamicLayout$Builder", java.flags == PUBLIC, .name == "setJustificationMode", .descriptor == "(I)Landroid/text/DynamicLayout$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/DynamicLayout$Builder\0", "setJustificationMode\0", "(I)Landroid/text/DynamicLayout$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [build](https://developer.android.com/reference/android/text/DynamicLayout.Builder.html#build())
        ///
        /// Required features: "android-text-DynamicLayout"
        #[cfg(any(feature = "all", all(feature = "android-text-DynamicLayout")))]
        pub fn build<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::text::DynamicLayout>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/DynamicLayout$Builder", java.flags == PUBLIC, .name == "build", .descriptor == "()Landroid/text/DynamicLayout;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/DynamicLayout$Builder\0", "build\0", "()Landroid/text/DynamicLayout;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
