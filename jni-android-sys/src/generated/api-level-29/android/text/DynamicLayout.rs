// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-text-DynamicLayout"))]
__jni_bindgen! {
    /// public class [DynamicLayout](https://developer.android.com/reference/android/text/DynamicLayout.html)
    ///
    /// Required feature: android-text-DynamicLayout
    public class DynamicLayout ("android/text/DynamicLayout") extends crate::android::text::Layout {

        /// [DynamicLayout](https://developer.android.com/reference/android/text/DynamicLayout.html#DynamicLayout(java.lang.CharSequence,%20android.text.TextPaint,%20int,%20android.text.Layout.Alignment,%20float,%20float,%20boolean))
        ///
        /// Required features: "android-text-Layout_Alignment", "android-text-TextPaint", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-text-Layout_Alignment", feature = "android-text-TextPaint", feature = "java-lang-CharSequence")))]
        #[deprecated] pub fn new_CharSequence_TextPaint_int_Alignment_float_float_boolean<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::TextPaint>>, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::Layout_Alignment>>, arg4: f32, arg5: f32, arg6: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::text::DynamicLayout>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/DynamicLayout", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/lang/CharSequence;Landroid/text/TextPaint;ILandroid/text/Layout$Alignment;FFZ)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/DynamicLayout\0", "<init>\0", "(Ljava/lang/CharSequence;Landroid/text/TextPaint;ILandroid/text/Layout$Alignment;FFZ)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [DynamicLayout](https://developer.android.com/reference/android/text/DynamicLayout.html#DynamicLayout(java.lang.CharSequence,%20java.lang.CharSequence,%20android.text.TextPaint,%20int,%20android.text.Layout.Alignment,%20float,%20float,%20boolean))
        ///
        /// Required features: "android-text-Layout_Alignment", "android-text-TextPaint", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-text-Layout_Alignment", feature = "android-text-TextPaint", feature = "java-lang-CharSequence")))]
        #[deprecated] pub fn new_CharSequence_CharSequence_TextPaint_int_Alignment_float_float_boolean<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::TextPaint>>, arg3: i32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::Layout_Alignment>>, arg5: f32, arg6: f32, arg7: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::text::DynamicLayout>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/DynamicLayout", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;Landroid/text/TextPaint;ILandroid/text/Layout$Alignment;FFZ)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6), __jni_bindgen::AsJValue::as_jvalue(&arg7)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/DynamicLayout\0", "<init>\0", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;Landroid/text/TextPaint;ILandroid/text/Layout$Alignment;FFZ)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [DynamicLayout](https://developer.android.com/reference/android/text/DynamicLayout.html#DynamicLayout(java.lang.CharSequence,%20java.lang.CharSequence,%20android.text.TextPaint,%20int,%20android.text.Layout.Alignment,%20float,%20float,%20boolean,%20android.text.TextUtils.TruncateAt,%20int))
        ///
        /// Required features: "android-text-Layout_Alignment", "android-text-TextPaint", "android-text-TextUtils_TruncateAt", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-text-Layout_Alignment", feature = "android-text-TextPaint", feature = "android-text-TextUtils_TruncateAt", feature = "java-lang-CharSequence")))]
        #[deprecated] pub fn new_CharSequence_CharSequence_TextPaint_int_Alignment_float_float_boolean_TruncateAt_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::TextPaint>>, arg3: i32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::Layout_Alignment>>, arg5: f32, arg6: f32, arg7: bool, arg8: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::TextUtils_TruncateAt>>, arg9: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::text::DynamicLayout>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/DynamicLayout", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;Landroid/text/TextPaint;ILandroid/text/Layout$Alignment;FFZLandroid/text/TextUtils$TruncateAt;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6), __jni_bindgen::AsJValue::as_jvalue(&arg7), __jni_bindgen::AsJValue::as_jvalue(&arg8.into()), __jni_bindgen::AsJValue::as_jvalue(&arg9)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/DynamicLayout\0", "<init>\0", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;Landroid/text/TextPaint;ILandroid/text/Layout$Alignment;FFZLandroid/text/TextUtils$TruncateAt;I)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLineCount](https://developer.android.com/reference/android/text/DynamicLayout.html#getLineCount())
        pub fn getLineCount<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/DynamicLayout", java.flags == PUBLIC, .name == "getLineCount", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/DynamicLayout\0", "getLineCount\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLineTop](https://developer.android.com/reference/android/text/DynamicLayout.html#getLineTop(int))
        pub fn getLineTop<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/DynamicLayout", java.flags == PUBLIC, .name == "getLineTop", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/DynamicLayout\0", "getLineTop\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLineDescent](https://developer.android.com/reference/android/text/DynamicLayout.html#getLineDescent(int))
        pub fn getLineDescent<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/DynamicLayout", java.flags == PUBLIC, .name == "getLineDescent", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/DynamicLayout\0", "getLineDescent\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLineStart](https://developer.android.com/reference/android/text/DynamicLayout.html#getLineStart(int))
        pub fn getLineStart<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/DynamicLayout", java.flags == PUBLIC, .name == "getLineStart", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/DynamicLayout\0", "getLineStart\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLineContainsTab](https://developer.android.com/reference/android/text/DynamicLayout.html#getLineContainsTab(int))
        pub fn getLineContainsTab<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/DynamicLayout", java.flags == PUBLIC, .name == "getLineContainsTab", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/DynamicLayout\0", "getLineContainsTab\0", "(I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getParagraphDirection](https://developer.android.com/reference/android/text/DynamicLayout.html#getParagraphDirection(int))
        pub fn getParagraphDirection<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/DynamicLayout", java.flags == PUBLIC, .name == "getParagraphDirection", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/DynamicLayout\0", "getParagraphDirection\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLineDirections](https://developer.android.com/reference/android/text/DynamicLayout.html#getLineDirections(int))
        ///
        /// Required features: "android-text-Layout_Directions"
        #[cfg(any(feature = "all", all(feature = "android-text-Layout_Directions")))]
        pub fn getLineDirections<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::text::Layout_Directions>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/DynamicLayout", java.flags == PUBLIC | FINAL, .name == "getLineDirections", .descriptor == "(I)Landroid/text/Layout$Directions;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/DynamicLayout\0", "getLineDirections\0", "(I)Landroid/text/Layout$Directions;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTopPadding](https://developer.android.com/reference/android/text/DynamicLayout.html#getTopPadding())
        pub fn getTopPadding<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/DynamicLayout", java.flags == PUBLIC, .name == "getTopPadding", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/DynamicLayout\0", "getTopPadding\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getBottomPadding](https://developer.android.com/reference/android/text/DynamicLayout.html#getBottomPadding())
        pub fn getBottomPadding<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/DynamicLayout", java.flags == PUBLIC, .name == "getBottomPadding", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/DynamicLayout\0", "getBottomPadding\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getEllipsizedWidth](https://developer.android.com/reference/android/text/DynamicLayout.html#getEllipsizedWidth())
        pub fn getEllipsizedWidth<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/DynamicLayout", java.flags == PUBLIC, .name == "getEllipsizedWidth", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/DynamicLayout\0", "getEllipsizedWidth\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getEllipsisStart](https://developer.android.com/reference/android/text/DynamicLayout.html#getEllipsisStart(int))
        pub fn getEllipsisStart<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/DynamicLayout", java.flags == PUBLIC, .name == "getEllipsisStart", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/DynamicLayout\0", "getEllipsisStart\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getEllipsisCount](https://developer.android.com/reference/android/text/DynamicLayout.html#getEllipsisCount(int))
        pub fn getEllipsisCount<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/DynamicLayout", java.flags == PUBLIC, .name == "getEllipsisCount", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/DynamicLayout\0", "getEllipsisCount\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
