// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-text-PrecomputedText_Params"))]
__jni_bindgen! {
    /// public final class [PrecomputedText.Params](https://developer.android.com/reference/android/text/PrecomputedText.Params.html)
    ///
    /// Required feature: android-text-PrecomputedText_Params
    public final class PrecomputedText_Params ("android/text/PrecomputedText$Params") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [Params](https://developer.android.com/reference/android/text/PrecomputedText.Params.html#Params(android.text.TextPaint,%20android.text.TextDirectionHeuristic,%20int,%20int))
        // ///
        // /// Required features: "android-text-TextDirectionHeuristic", "android-text-TextPaint"
        // #[cfg(any(feature = "all", all(feature = "android-text-TextDirectionHeuristic", feature = "android-text-TextPaint")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::TextPaint>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::TextDirectionHeuristic>>, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::text::PrecomputedText_Params>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/text/PrecomputedText$Params", java.flags == (empty), .name == "<init>", .descriptor == "(Landroid/text/TextPaint;Landroid/text/TextDirectionHeuristic;II)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/PrecomputedText$Params\0", "<init>\0", "(Landroid/text/TextPaint;Landroid/text/TextDirectionHeuristic;II)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getTextPaint](https://developer.android.com/reference/android/text/PrecomputedText.Params.html#getTextPaint())
        ///
        /// Required features: "android-text-TextPaint"
        #[cfg(any(feature = "all", all(feature = "android-text-TextPaint")))]
        pub fn getTextPaint<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::text::TextPaint>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/PrecomputedText$Params", java.flags == PUBLIC, .name == "getTextPaint", .descriptor == "()Landroid/text/TextPaint;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/PrecomputedText$Params\0", "getTextPaint\0", "()Landroid/text/TextPaint;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTextDirection](https://developer.android.com/reference/android/text/PrecomputedText.Params.html#getTextDirection())
        ///
        /// Required features: "android-text-TextDirectionHeuristic"
        #[cfg(any(feature = "all", all(feature = "android-text-TextDirectionHeuristic")))]
        pub fn getTextDirection<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::text::TextDirectionHeuristic>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/PrecomputedText$Params", java.flags == PUBLIC, .name == "getTextDirection", .descriptor == "()Landroid/text/TextDirectionHeuristic;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/PrecomputedText$Params\0", "getTextDirection\0", "()Landroid/text/TextDirectionHeuristic;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getBreakStrategy](https://developer.android.com/reference/android/text/PrecomputedText.Params.html#getBreakStrategy())
        pub fn getBreakStrategy<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/PrecomputedText$Params", java.flags == PUBLIC, .name == "getBreakStrategy", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/PrecomputedText$Params\0", "getBreakStrategy\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getHyphenationFrequency](https://developer.android.com/reference/android/text/PrecomputedText.Params.html#getHyphenationFrequency())
        pub fn getHyphenationFrequency<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/PrecomputedText$Params", java.flags == PUBLIC, .name == "getHyphenationFrequency", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/PrecomputedText$Params\0", "getHyphenationFrequency\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [equals](https://developer.android.com/reference/android/text/PrecomputedText.Params.html#equals(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn equals<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/PrecomputedText$Params", java.flags == PUBLIC, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/PrecomputedText$Params\0", "equals\0", "(Ljava/lang/Object;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hashCode](https://developer.android.com/reference/android/text/PrecomputedText.Params.html#hashCode())
        pub fn hashCode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/PrecomputedText$Params", java.flags == PUBLIC, .name == "hashCode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/PrecomputedText$Params\0", "hashCode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/android/text/PrecomputedText.Params.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/PrecomputedText$Params", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/PrecomputedText$Params\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
