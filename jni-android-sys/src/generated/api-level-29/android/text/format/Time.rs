// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-text-format-Time"))]
__jni_bindgen! {
    /// public class [Time](https://developer.android.com/reference/android/text/format/Time.html)
    ///
    /// Required feature: android-text-format-Time
    #[deprecated] public class Time ("android/text/format/Time") extends crate::java::lang::Object {

        /// [Time](https://developer.android.com/reference/android/text/format/Time.html#Time(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        #[deprecated] pub fn new_String<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::text::format::Time>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/format/Time", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/format/Time\0", "<init>\0", "(Ljava/lang/String;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [Time](https://developer.android.com/reference/android/text/format/Time.html#Time())
        #[deprecated] pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::text::format::Time>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/format/Time", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/format/Time\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [Time](https://developer.android.com/reference/android/text/format/Time.html#Time(android.text.format.Time))
        ///
        /// Required features: "android-text-format-Time"
        #[cfg(any(feature = "all", all(feature = "android-text-format-Time")))]
        #[deprecated] pub fn new_Time<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::format::Time>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::text::format::Time>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/format/Time", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/text/format/Time;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/format/Time\0", "<init>\0", "(Landroid/text/format/Time;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [normalize](https://developer.android.com/reference/android/text/format/Time.html#normalize(boolean))
        #[deprecated] pub fn normalize<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/format/Time", java.flags == PUBLIC, .name == "normalize", .descriptor == "(Z)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/format/Time\0", "normalize\0", "(Z)J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [switchTimezone](https://developer.android.com/reference/android/text/format/Time.html#switchTimezone(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        #[deprecated] pub fn switchTimezone<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/format/Time", java.flags == PUBLIC, .name == "switchTimezone", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/format/Time\0", "switchTimezone\0", "(Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getActualMaximum](https://developer.android.com/reference/android/text/format/Time.html#getActualMaximum(int))
        #[deprecated] pub fn getActualMaximum<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/format/Time", java.flags == PUBLIC, .name == "getActualMaximum", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/format/Time\0", "getActualMaximum\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clear](https://developer.android.com/reference/android/text/format/Time.html#clear(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        #[deprecated] pub fn clear<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/format/Time", java.flags == PUBLIC, .name == "clear", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/format/Time\0", "clear\0", "(Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [compare](https://developer.android.com/reference/android/text/format/Time.html#compare(android.text.format.Time,%20android.text.format.Time))
        ///
        /// Required features: "android-text-format-Time"
        #[cfg(any(feature = "all", all(feature = "android-text-format-Time")))]
        #[deprecated] pub fn compare<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::format::Time>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::format::Time>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/format/Time", java.flags == PUBLIC | STATIC, .name == "compare", .descriptor == "(Landroid/text/format/Time;Landroid/text/format/Time;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/text/format/Time\0", "compare\0", "(Landroid/text/format/Time;Landroid/text/format/Time;)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [format](https://developer.android.com/reference/android/text/format/Time.html#format(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        #[deprecated] pub fn format<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/format/Time", java.flags == PUBLIC, .name == "format", .descriptor == "(Ljava/lang/String;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/format/Time\0", "format\0", "(Ljava/lang/String;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/android/text/format/Time.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        #[deprecated] pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/format/Time", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/format/Time\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [parse](https://developer.android.com/reference/android/text/format/Time.html#parse(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        #[deprecated] pub fn parse<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/format/Time", java.flags == PUBLIC, .name == "parse", .descriptor == "(Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/format/Time\0", "parse\0", "(Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [parse3339](https://developer.android.com/reference/android/text/format/Time.html#parse3339(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        #[deprecated] pub fn parse3339<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/format/Time", java.flags == PUBLIC, .name == "parse3339", .descriptor == "(Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/format/Time\0", "parse3339\0", "(Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCurrentTimezone](https://developer.android.com/reference/android/text/format/Time.html#getCurrentTimezone())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        #[deprecated] pub fn getCurrentTimezone<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/format/Time", java.flags == PUBLIC | STATIC, .name == "getCurrentTimezone", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/text/format/Time\0", "getCurrentTimezone\0", "()Ljava/lang/String;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setToNow](https://developer.android.com/reference/android/text/format/Time.html#setToNow())
        #[deprecated] pub fn setToNow<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/format/Time", java.flags == PUBLIC, .name == "setToNow", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/format/Time\0", "setToNow\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toMillis](https://developer.android.com/reference/android/text/format/Time.html#toMillis(boolean))
        #[deprecated] pub fn toMillis<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/format/Time", java.flags == PUBLIC, .name == "toMillis", .descriptor == "(Z)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/format/Time\0", "toMillis\0", "(Z)J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [set](https://developer.android.com/reference/android/text/format/Time.html#set(long))
        #[deprecated] pub fn set_long<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/format/Time", java.flags == PUBLIC, .name == "set", .descriptor == "(J)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/format/Time\0", "set\0", "(J)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [format2445](https://developer.android.com/reference/android/text/format/Time.html#format2445())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        #[deprecated] pub fn format2445<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/format/Time", java.flags == PUBLIC, .name == "format2445", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/format/Time\0", "format2445\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [set](https://developer.android.com/reference/android/text/format/Time.html#set(android.text.format.Time))
        ///
        /// Required features: "android-text-format-Time"
        #[cfg(any(feature = "all", all(feature = "android-text-format-Time")))]
        #[deprecated] pub fn set_Time<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::format::Time>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/format/Time", java.flags == PUBLIC, .name == "set", .descriptor == "(Landroid/text/format/Time;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/format/Time\0", "set\0", "(Landroid/text/format/Time;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [set](https://developer.android.com/reference/android/text/format/Time.html#set(int,%20int,%20int,%20int,%20int,%20int))
        #[deprecated] pub fn set_int_int_int_int_int_int<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: i32, arg4: i32, arg5: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/format/Time", java.flags == PUBLIC, .name == "set", .descriptor == "(IIIIII)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/format/Time\0", "set\0", "(IIIIII)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [set](https://developer.android.com/reference/android/text/format/Time.html#set(int,%20int,%20int))
        #[deprecated] pub fn set_int_int_int<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/format/Time", java.flags == PUBLIC, .name == "set", .descriptor == "(III)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/format/Time\0", "set\0", "(III)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [before](https://developer.android.com/reference/android/text/format/Time.html#before(android.text.format.Time))
        ///
        /// Required features: "android-text-format-Time"
        #[cfg(any(feature = "all", all(feature = "android-text-format-Time")))]
        #[deprecated] pub fn before<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::format::Time>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/format/Time", java.flags == PUBLIC, .name == "before", .descriptor == "(Landroid/text/format/Time;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/format/Time\0", "before\0", "(Landroid/text/format/Time;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [after](https://developer.android.com/reference/android/text/format/Time.html#after(android.text.format.Time))
        ///
        /// Required features: "android-text-format-Time"
        #[cfg(any(feature = "all", all(feature = "android-text-format-Time")))]
        #[deprecated] pub fn after<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::format::Time>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/format/Time", java.flags == PUBLIC, .name == "after", .descriptor == "(Landroid/text/format/Time;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/format/Time\0", "after\0", "(Landroid/text/format/Time;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getWeekNumber](https://developer.android.com/reference/android/text/format/Time.html#getWeekNumber())
        #[deprecated] pub fn getWeekNumber<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/format/Time", java.flags == PUBLIC, .name == "getWeekNumber", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/format/Time\0", "getWeekNumber\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [format3339](https://developer.android.com/reference/android/text/format/Time.html#format3339(boolean))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        #[deprecated] pub fn format3339<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/format/Time", java.flags == PUBLIC, .name == "format3339", .descriptor == "(Z)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/format/Time\0", "format3339\0", "(Z)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isEpoch](https://developer.android.com/reference/android/text/format/Time.html#isEpoch(android.text.format.Time))
        ///
        /// Required features: "android-text-format-Time"
        #[cfg(any(feature = "all", all(feature = "android-text-format-Time")))]
        #[deprecated] pub fn isEpoch<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::format::Time>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/format/Time", java.flags == PUBLIC | STATIC, .name == "isEpoch", .descriptor == "(Landroid/text/format/Time;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/text/format/Time\0", "isEpoch\0", "(Landroid/text/format/Time;)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getJulianDay](https://developer.android.com/reference/android/text/format/Time.html#getJulianDay(long,%20long))
        #[deprecated] pub fn getJulianDay<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i64, arg1: i64) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/format/Time", java.flags == PUBLIC | STATIC, .name == "getJulianDay", .descriptor == "(JJ)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/text/format/Time\0", "getJulianDay\0", "(JJ)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setJulianDay](https://developer.android.com/reference/android/text/format/Time.html#setJulianDay(int))
        #[deprecated] pub fn setJulianDay<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/format/Time", java.flags == PUBLIC, .name == "setJulianDay", .descriptor == "(I)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/format/Time\0", "setJulianDay\0", "(I)J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getWeeksSinceEpochFromJulianDay](https://developer.android.com/reference/android/text/format/Time.html#getWeeksSinceEpochFromJulianDay(int,%20int))
        #[deprecated] pub fn getWeeksSinceEpochFromJulianDay<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/format/Time", java.flags == PUBLIC | STATIC, .name == "getWeeksSinceEpochFromJulianDay", .descriptor == "(II)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/text/format/Time\0", "getWeeksSinceEpochFromJulianDay\0", "(II)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getJulianMondayFromWeeksSinceEpoch](https://developer.android.com/reference/android/text/format/Time.html#getJulianMondayFromWeeksSinceEpoch(int))
        #[deprecated] pub fn getJulianMondayFromWeeksSinceEpoch<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/format/Time", java.flags == PUBLIC | STATIC, .name == "getJulianMondayFromWeeksSinceEpoch", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/text/format/Time\0", "getJulianMondayFromWeeksSinceEpoch\0", "(I)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [EPOCH_JULIAN_DAY](https://developer.android.com/reference/android/text/format/Time.html#EPOCH_JULIAN_DAY)
        #[deprecated] pub const EPOCH_JULIAN_DAY : i32 = 2440588;

        /// public static final [FRIDAY](https://developer.android.com/reference/android/text/format/Time.html#FRIDAY)
        #[deprecated] pub const FRIDAY : i32 = 5;

        /// public static final [HOUR](https://developer.android.com/reference/android/text/format/Time.html#HOUR)
        #[deprecated] pub const HOUR : i32 = 3;

        /// public static final [MINUTE](https://developer.android.com/reference/android/text/format/Time.html#MINUTE)
        #[deprecated] pub const MINUTE : i32 = 2;

        /// public static final [MONDAY](https://developer.android.com/reference/android/text/format/Time.html#MONDAY)
        #[deprecated] pub const MONDAY : i32 = 1;

        /// public static final [MONDAY_BEFORE_JULIAN_EPOCH](https://developer.android.com/reference/android/text/format/Time.html#MONDAY_BEFORE_JULIAN_EPOCH)
        #[deprecated] pub const MONDAY_BEFORE_JULIAN_EPOCH : i32 = 2440585;

        /// public static final [MONTH](https://developer.android.com/reference/android/text/format/Time.html#MONTH)
        #[deprecated] pub const MONTH : i32 = 5;

        /// public static final [MONTH_DAY](https://developer.android.com/reference/android/text/format/Time.html#MONTH_DAY)
        #[deprecated] pub const MONTH_DAY : i32 = 4;

        /// public static final [SATURDAY](https://developer.android.com/reference/android/text/format/Time.html#SATURDAY)
        #[deprecated] pub const SATURDAY : i32 = 6;

        /// public static final [SECOND](https://developer.android.com/reference/android/text/format/Time.html#SECOND)
        #[deprecated] pub const SECOND : i32 = 1;

        /// public static final [SUNDAY](https://developer.android.com/reference/android/text/format/Time.html#SUNDAY)
        #[deprecated] pub const SUNDAY : i32 = 0;

        /// public static final [THURSDAY](https://developer.android.com/reference/android/text/format/Time.html#THURSDAY)
        #[deprecated] pub const THURSDAY : i32 = 4;

        /// public static final [TIMEZONE_UTC](https://developer.android.com/reference/android/text/format/Time.html#TIMEZONE_UTC)
        #[deprecated] pub const TIMEZONE_UTC : &'static str = "UTC";

        /// public static final [TUESDAY](https://developer.android.com/reference/android/text/format/Time.html#TUESDAY)
        #[deprecated] pub const TUESDAY : i32 = 2;

        /// public static final [WEDNESDAY](https://developer.android.com/reference/android/text/format/Time.html#WEDNESDAY)
        #[deprecated] pub const WEDNESDAY : i32 = 3;

        /// public static final [WEEK_DAY](https://developer.android.com/reference/android/text/format/Time.html#WEEK_DAY)
        #[deprecated] pub const WEEK_DAY : i32 = 7;

        /// public static final [WEEK_NUM](https://developer.android.com/reference/android/text/format/Time.html#WEEK_NUM)
        #[deprecated] pub const WEEK_NUM : i32 = 9;

        /// public static final [YEAR](https://developer.android.com/reference/android/text/format/Time.html#YEAR)
        #[deprecated] pub const YEAR : i32 = 6;

        /// public static final [YEAR_DAY](https://developer.android.com/reference/android/text/format/Time.html#YEAR_DAY)
        #[deprecated] pub const YEAR_DAY : i32 = 8;

        /// **get** public [allDay](https://developer.android.com/reference/android/text/format/Time.html#allDay)
        #[deprecated] pub fn allDay<'env>(&'env self) -> bool {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/text/format/Time\0", "allDay\0", "Z\0");
                env.get_boolean_field(class, field)
            }
        }

        /// **set** public [allDay](https://developer.android.com/reference/android/text/format/Time.html#allDay)
        #[deprecated] pub fn set_allDay<'env>(&'env self, value: bool) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/text/format/Time\0", "allDay\0", "Z\0");
                env.set_boolean_field(class, field, value)
            }
        }

        /// **get** public [gmtoff](https://developer.android.com/reference/android/text/format/Time.html#gmtoff)
        #[deprecated] pub fn gmtoff<'env>(&'env self) -> i64 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/text/format/Time\0", "gmtoff\0", "J\0");
                env.get_long_field(class, field)
            }
        }

        /// **set** public [gmtoff](https://developer.android.com/reference/android/text/format/Time.html#gmtoff)
        #[deprecated] pub fn set_gmtoff<'env>(&'env self, value: i64) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/text/format/Time\0", "gmtoff\0", "J\0");
                env.set_long_field(class, field, value)
            }
        }

        /// **get** public [hour](https://developer.android.com/reference/android/text/format/Time.html#hour)
        #[deprecated] pub fn hour<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/text/format/Time\0", "hour\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [hour](https://developer.android.com/reference/android/text/format/Time.html#hour)
        #[deprecated] pub fn set_hour<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/text/format/Time\0", "hour\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [isDst](https://developer.android.com/reference/android/text/format/Time.html#isDst)
        #[deprecated] pub fn isDst<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/text/format/Time\0", "isDst\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [isDst](https://developer.android.com/reference/android/text/format/Time.html#isDst)
        #[deprecated] pub fn set_isDst<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/text/format/Time\0", "isDst\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [minute](https://developer.android.com/reference/android/text/format/Time.html#minute)
        #[deprecated] pub fn minute<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/text/format/Time\0", "minute\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [minute](https://developer.android.com/reference/android/text/format/Time.html#minute)
        #[deprecated] pub fn set_minute<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/text/format/Time\0", "minute\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [month](https://developer.android.com/reference/android/text/format/Time.html#month)
        #[deprecated] pub fn month<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/text/format/Time\0", "month\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [month](https://developer.android.com/reference/android/text/format/Time.html#month)
        #[deprecated] pub fn set_month<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/text/format/Time\0", "month\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [monthDay](https://developer.android.com/reference/android/text/format/Time.html#monthDay)
        #[deprecated] pub fn monthDay<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/text/format/Time\0", "monthDay\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [monthDay](https://developer.android.com/reference/android/text/format/Time.html#monthDay)
        #[deprecated] pub fn set_monthDay<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/text/format/Time\0", "monthDay\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [second](https://developer.android.com/reference/android/text/format/Time.html#second)
        #[deprecated] pub fn second<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/text/format/Time\0", "second\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [second](https://developer.android.com/reference/android/text/format/Time.html#second)
        #[deprecated] pub fn set_second<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/text/format/Time\0", "second\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [timezone](https://developer.android.com/reference/android/text/format/Time.html#timezone)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        #[deprecated] pub fn timezone<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/text/format/Time\0", "timezone\0", "Ljava/lang/String;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [timezone](https://developer.android.com/reference/android/text/format/Time.html#timezone)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        #[deprecated] pub fn set_timezone<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::java::lang::String>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/text/format/Time\0", "timezone\0", "Ljava/lang/String;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [weekDay](https://developer.android.com/reference/android/text/format/Time.html#weekDay)
        #[deprecated] pub fn weekDay<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/text/format/Time\0", "weekDay\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [weekDay](https://developer.android.com/reference/android/text/format/Time.html#weekDay)
        #[deprecated] pub fn set_weekDay<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/text/format/Time\0", "weekDay\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [year](https://developer.android.com/reference/android/text/format/Time.html#year)
        #[deprecated] pub fn year<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/text/format/Time\0", "year\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [year](https://developer.android.com/reference/android/text/format/Time.html#year)
        #[deprecated] pub fn set_year<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/text/format/Time\0", "year\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [yearDay](https://developer.android.com/reference/android/text/format/Time.html#yearDay)
        #[deprecated] pub fn yearDay<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/text/format/Time\0", "yearDay\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [yearDay](https://developer.android.com/reference/android/text/format/Time.html#yearDay)
        #[deprecated] pub fn set_yearDay<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/text/format/Time\0", "yearDay\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }
    }
}
