// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-text-style-MetricAffectingSpan"))]
__jni_bindgen! {
    /// public class [MetricAffectingSpan](https://developer.android.com/reference/android/text/style/MetricAffectingSpan.html)
    ///
    /// Required feature: android-text-style-MetricAffectingSpan
    public class MetricAffectingSpan ("android/text/style/MetricAffectingSpan") extends crate::android::text::style::CharacterStyle, implements crate::android::text::style::UpdateLayout {

        /// [MetricAffectingSpan](https://developer.android.com/reference/android/text/style/MetricAffectingSpan.html#MetricAffectingSpan())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::text::style::MetricAffectingSpan>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/style/MetricAffectingSpan", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/style/MetricAffectingSpan\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateMeasureState](https://developer.android.com/reference/android/text/style/MetricAffectingSpan.html#updateMeasureState(android.text.TextPaint))
        ///
        /// Required features: "android-text-TextPaint"
        #[cfg(any(feature = "all", all(feature = "android-text-TextPaint")))]
        pub fn updateMeasureState<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::TextPaint>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/style/MetricAffectingSpan", java.flags == PUBLIC | ABSTRACT, .name == "updateMeasureState", .descriptor == "(Landroid/text/TextPaint;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/style/MetricAffectingSpan\0", "updateMeasureState\0", "(Landroid/text/TextPaint;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getUnderlying](https://developer.android.com/reference/android/text/style/MetricAffectingSpan.html#getUnderlying())
        ///
        /// Required features: "android-text-style-MetricAffectingSpan"
        #[cfg(any(feature = "all", all(feature = "android-text-style-MetricAffectingSpan")))]
        pub fn getUnderlying<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::text::style::MetricAffectingSpan>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/style/MetricAffectingSpan", java.flags == PUBLIC, .name == "getUnderlying", .descriptor == "()Landroid/text/style/MetricAffectingSpan;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/style/MetricAffectingSpan\0", "getUnderlying\0", "()Landroid/text/style/MetricAffectingSpan;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Bridge method - type erasure
        // /// [getUnderlying](https://developer.android.com/reference/android/text/style/MetricAffectingSpan.html#getUnderlying())
        // ///
        // /// Required features: "android-text-style-CharacterStyle"
        // #[cfg(any(feature = "all", all(feature = "android-text-style-CharacterStyle")))]
        // pub fn getUnderlying<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::text::style::CharacterStyle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/text/style/MetricAffectingSpan", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "getUnderlying", .descriptor == "()Landroid/text/style/CharacterStyle;"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/style/MetricAffectingSpan\0", "getUnderlying\0", "()Landroid/text/style/CharacterStyle;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }
    }
}
