// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-text-style-DynamicDrawableSpan"))]
__jni_bindgen! {
    /// public class [DynamicDrawableSpan](https://developer.android.com/reference/android/text/style/DynamicDrawableSpan.html)
    ///
    /// Required feature: android-text-style-DynamicDrawableSpan
    public class DynamicDrawableSpan ("android/text/style/DynamicDrawableSpan") extends crate::android::text::style::ReplacementSpan {

        /// [DynamicDrawableSpan](https://developer.android.com/reference/android/text/style/DynamicDrawableSpan.html#DynamicDrawableSpan())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::text::style::DynamicDrawableSpan>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/style/DynamicDrawableSpan", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/style/DynamicDrawableSpan\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [DynamicDrawableSpan](https://developer.android.com/reference/android/text/style/DynamicDrawableSpan.html#DynamicDrawableSpan(int))
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::text::style::DynamicDrawableSpan>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/text/style/DynamicDrawableSpan", java.flags == PROTECTED, .name == "<init>", .descriptor == "(I)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/style/DynamicDrawableSpan\0", "<init>\0", "(I)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getVerticalAlignment](https://developer.android.com/reference/android/text/style/DynamicDrawableSpan.html#getVerticalAlignment())
        pub fn getVerticalAlignment<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/style/DynamicDrawableSpan", java.flags == PUBLIC, .name == "getVerticalAlignment", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/style/DynamicDrawableSpan\0", "getVerticalAlignment\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDrawable](https://developer.android.com/reference/android/text/style/DynamicDrawableSpan.html#getDrawable())
        ///
        /// Required features: "android-graphics-drawable-Drawable"
        #[cfg(any(feature = "all", all(feature = "android-graphics-drawable-Drawable")))]
        pub fn getDrawable<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::drawable::Drawable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/style/DynamicDrawableSpan", java.flags == PUBLIC | ABSTRACT, .name == "getDrawable", .descriptor == "()Landroid/graphics/drawable/Drawable;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/style/DynamicDrawableSpan\0", "getDrawable\0", "()Landroid/graphics/drawable/Drawable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSize](https://developer.android.com/reference/android/text/style/DynamicDrawableSpan.html#getSize(android.graphics.Paint,%20java.lang.CharSequence,%20int,%20int,%20android.graphics.Paint.FontMetricsInt))
        ///
        /// Required features: "android-graphics-Paint", "android-graphics-Paint_FontMetricsInt", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Paint", feature = "android-graphics-Paint_FontMetricsInt", feature = "java-lang-CharSequence")))]
        pub fn getSize<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Paint>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg2: i32, arg3: i32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Paint_FontMetricsInt>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/style/DynamicDrawableSpan", java.flags == PUBLIC, .name == "getSize", .descriptor == "(Landroid/graphics/Paint;Ljava/lang/CharSequence;IILandroid/graphics/Paint$FontMetricsInt;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/style/DynamicDrawableSpan\0", "getSize\0", "(Landroid/graphics/Paint;Ljava/lang/CharSequence;IILandroid/graphics/Paint$FontMetricsInt;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [draw](https://developer.android.com/reference/android/text/style/DynamicDrawableSpan.html#draw(android.graphics.Canvas,%20java.lang.CharSequence,%20int,%20int,%20float,%20int,%20int,%20int,%20android.graphics.Paint))
        ///
        /// Required features: "android-graphics-Canvas", "android-graphics-Paint", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Canvas", feature = "android-graphics-Paint", feature = "java-lang-CharSequence")))]
        pub fn draw<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Canvas>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg2: i32, arg3: i32, arg4: f32, arg5: i32, arg6: i32, arg7: i32, arg8: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Paint>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/style/DynamicDrawableSpan", java.flags == PUBLIC, .name == "draw", .descriptor == "(Landroid/graphics/Canvas;Ljava/lang/CharSequence;IIFIIILandroid/graphics/Paint;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6), __jni_bindgen::AsJValue::as_jvalue(&arg7), __jni_bindgen::AsJValue::as_jvalue(&arg8.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/style/DynamicDrawableSpan\0", "draw\0", "(Landroid/graphics/Canvas;Ljava/lang/CharSequence;IIFIIILandroid/graphics/Paint;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [ALIGN_BASELINE](https://developer.android.com/reference/android/text/style/DynamicDrawableSpan.html#ALIGN_BASELINE)
        pub const ALIGN_BASELINE : i32 = 1;

        /// public static final [ALIGN_BOTTOM](https://developer.android.com/reference/android/text/style/DynamicDrawableSpan.html#ALIGN_BOTTOM)
        pub const ALIGN_BOTTOM : i32 = 0;

        /// public static final [ALIGN_CENTER](https://developer.android.com/reference/android/text/style/DynamicDrawableSpan.html#ALIGN_CENTER)
        pub const ALIGN_CENTER : i32 = 2;

        // // Not emitting: Non-public field
        // /// **get** protected final [mVerticalAlignment](https://developer.android.com/reference/android/text/style/DynamicDrawableSpan.html#mVerticalAlignment)
        // pub fn mVerticalAlignment<'env>(&'env self) -> i32 {
        //     unsafe {
        //         let env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (class, field) = env.require_class_field("android/text/style/DynamicDrawableSpan\0", "mVerticalAlignment\0", "I\0");
        //         env.get_int_field(class, field)
        //     }
        // }
    }
}
