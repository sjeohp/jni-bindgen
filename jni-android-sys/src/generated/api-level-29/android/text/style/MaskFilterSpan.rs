// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-text-style-MaskFilterSpan"))]
__jni_bindgen! {
    /// public class [MaskFilterSpan](https://developer.android.com/reference/android/text/style/MaskFilterSpan.html)
    ///
    /// Required feature: android-text-style-MaskFilterSpan
    public class MaskFilterSpan ("android/text/style/MaskFilterSpan") extends crate::android::text::style::CharacterStyle, implements crate::android::text::style::UpdateAppearance {

        /// [MaskFilterSpan](https://developer.android.com/reference/android/text/style/MaskFilterSpan.html#MaskFilterSpan(android.graphics.MaskFilter))
        ///
        /// Required features: "android-graphics-MaskFilter"
        #[cfg(any(feature = "all", all(feature = "android-graphics-MaskFilter")))]
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::MaskFilter>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::text::style::MaskFilterSpan>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/style/MaskFilterSpan", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/graphics/MaskFilter;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/style/MaskFilterSpan\0", "<init>\0", "(Landroid/graphics/MaskFilter;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMaskFilter](https://developer.android.com/reference/android/text/style/MaskFilterSpan.html#getMaskFilter())
        ///
        /// Required features: "android-graphics-MaskFilter"
        #[cfg(any(feature = "all", all(feature = "android-graphics-MaskFilter")))]
        pub fn getMaskFilter<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::MaskFilter>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/style/MaskFilterSpan", java.flags == PUBLIC, .name == "getMaskFilter", .descriptor == "()Landroid/graphics/MaskFilter;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/style/MaskFilterSpan\0", "getMaskFilter\0", "()Landroid/graphics/MaskFilter;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateDrawState](https://developer.android.com/reference/android/text/style/MaskFilterSpan.html#updateDrawState(android.text.TextPaint))
        ///
        /// Required features: "android-text-TextPaint"
        #[cfg(any(feature = "all", all(feature = "android-text-TextPaint")))]
        pub fn updateDrawState<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::TextPaint>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/style/MaskFilterSpan", java.flags == PUBLIC, .name == "updateDrawState", .descriptor == "(Landroid/text/TextPaint;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/style/MaskFilterSpan\0", "updateDrawState\0", "(Landroid/text/TextPaint;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
