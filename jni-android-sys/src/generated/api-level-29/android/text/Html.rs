// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-text-Html"))]
__jni_bindgen! {
    /// public class [Html](https://developer.android.com/reference/android/text/Html.html)
    ///
    /// Required feature: android-text-Html
    public class Html ("android/text/Html") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [Html](https://developer.android.com/reference/android/text/Html.html#Html())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::text::Html>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/text/Html", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/text/Html\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [fromHtml](https://developer.android.com/reference/android/text/Html.html#fromHtml(java.lang.String))
        ///
        /// Required features: "android-text-Spanned", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-text-Spanned", feature = "java-lang-String")))]
        #[deprecated] pub fn fromHtml_String<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::text::Spanned>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Html", java.flags == PUBLIC | STATIC, .name == "fromHtml", .descriptor == "(Ljava/lang/String;)Landroid/text/Spanned;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/text/Html\0", "fromHtml\0", "(Ljava/lang/String;)Landroid/text/Spanned;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [fromHtml](https://developer.android.com/reference/android/text/Html.html#fromHtml(java.lang.String,%20int))
        ///
        /// Required features: "android-text-Spanned", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-text-Spanned", feature = "java-lang-String")))]
        pub fn fromHtml_String_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::text::Spanned>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Html", java.flags == PUBLIC | STATIC, .name == "fromHtml", .descriptor == "(Ljava/lang/String;I)Landroid/text/Spanned;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/text/Html\0", "fromHtml\0", "(Ljava/lang/String;I)Landroid/text/Spanned;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [fromHtml](https://developer.android.com/reference/android/text/Html.html#fromHtml(java.lang.String,%20android.text.Html.ImageGetter,%20android.text.Html.TagHandler))
        ///
        /// Required features: "android-text-Html_ImageGetter", "android-text-Html_TagHandler", "android-text-Spanned", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-text-Html_ImageGetter", feature = "android-text-Html_TagHandler", feature = "android-text-Spanned", feature = "java-lang-String")))]
        #[deprecated] pub fn fromHtml_String_ImageGetter_TagHandler<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::Html_ImageGetter>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::Html_TagHandler>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::text::Spanned>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Html", java.flags == PUBLIC | STATIC, .name == "fromHtml", .descriptor == "(Ljava/lang/String;Landroid/text/Html$ImageGetter;Landroid/text/Html$TagHandler;)Landroid/text/Spanned;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/text/Html\0", "fromHtml\0", "(Ljava/lang/String;Landroid/text/Html$ImageGetter;Landroid/text/Html$TagHandler;)Landroid/text/Spanned;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [fromHtml](https://developer.android.com/reference/android/text/Html.html#fromHtml(java.lang.String,%20int,%20android.text.Html.ImageGetter,%20android.text.Html.TagHandler))
        ///
        /// Required features: "android-text-Html_ImageGetter", "android-text-Html_TagHandler", "android-text-Spanned", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-text-Html_ImageGetter", feature = "android-text-Html_TagHandler", feature = "android-text-Spanned", feature = "java-lang-String")))]
        pub fn fromHtml_String_int_ImageGetter_TagHandler<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::Html_ImageGetter>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::Html_TagHandler>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::text::Spanned>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Html", java.flags == PUBLIC | STATIC, .name == "fromHtml", .descriptor == "(Ljava/lang/String;ILandroid/text/Html$ImageGetter;Landroid/text/Html$TagHandler;)Landroid/text/Spanned;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/text/Html\0", "fromHtml\0", "(Ljava/lang/String;ILandroid/text/Html$ImageGetter;Landroid/text/Html$TagHandler;)Landroid/text/Spanned;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toHtml](https://developer.android.com/reference/android/text/Html.html#toHtml(android.text.Spanned))
        ///
        /// Required features: "android-text-Spanned", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-text-Spanned", feature = "java-lang-String")))]
        #[deprecated] pub fn toHtml_Spanned<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::Spanned>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Html", java.flags == PUBLIC | STATIC, .name == "toHtml", .descriptor == "(Landroid/text/Spanned;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/text/Html\0", "toHtml\0", "(Landroid/text/Spanned;)Ljava/lang/String;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toHtml](https://developer.android.com/reference/android/text/Html.html#toHtml(android.text.Spanned,%20int))
        ///
        /// Required features: "android-text-Spanned", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-text-Spanned", feature = "java-lang-String")))]
        pub fn toHtml_Spanned_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::text::Spanned>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Html", java.flags == PUBLIC | STATIC, .name == "toHtml", .descriptor == "(Landroid/text/Spanned;I)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/text/Html\0", "toHtml\0", "(Landroid/text/Spanned;I)Ljava/lang/String;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [escapeHtml](https://developer.android.com/reference/android/text/Html.html#escapeHtml(java.lang.CharSequence))
        ///
        /// Required features: "java-lang-CharSequence", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence", feature = "java-lang-String")))]
        pub fn escapeHtml<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/text/Html", java.flags == PUBLIC | STATIC, .name == "escapeHtml", .descriptor == "(Ljava/lang/CharSequence;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/text/Html\0", "escapeHtml\0", "(Ljava/lang/CharSequence;)Ljava/lang/String;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [FROM_HTML_MODE_COMPACT](https://developer.android.com/reference/android/text/Html.html#FROM_HTML_MODE_COMPACT)
        pub const FROM_HTML_MODE_COMPACT : i32 = 63;

        /// public static final [FROM_HTML_MODE_LEGACY](https://developer.android.com/reference/android/text/Html.html#FROM_HTML_MODE_LEGACY)
        pub const FROM_HTML_MODE_LEGACY : i32 = 0;

        /// public static final [FROM_HTML_OPTION_USE_CSS_COLORS](https://developer.android.com/reference/android/text/Html.html#FROM_HTML_OPTION_USE_CSS_COLORS)
        pub const FROM_HTML_OPTION_USE_CSS_COLORS : i32 = 256;

        /// public static final [FROM_HTML_SEPARATOR_LINE_BREAK_BLOCKQUOTE](https://developer.android.com/reference/android/text/Html.html#FROM_HTML_SEPARATOR_LINE_BREAK_BLOCKQUOTE)
        pub const FROM_HTML_SEPARATOR_LINE_BREAK_BLOCKQUOTE : i32 = 32;

        /// public static final [FROM_HTML_SEPARATOR_LINE_BREAK_DIV](https://developer.android.com/reference/android/text/Html.html#FROM_HTML_SEPARATOR_LINE_BREAK_DIV)
        pub const FROM_HTML_SEPARATOR_LINE_BREAK_DIV : i32 = 16;

        /// public static final [FROM_HTML_SEPARATOR_LINE_BREAK_HEADING](https://developer.android.com/reference/android/text/Html.html#FROM_HTML_SEPARATOR_LINE_BREAK_HEADING)
        pub const FROM_HTML_SEPARATOR_LINE_BREAK_HEADING : i32 = 2;

        /// public static final [FROM_HTML_SEPARATOR_LINE_BREAK_LIST](https://developer.android.com/reference/android/text/Html.html#FROM_HTML_SEPARATOR_LINE_BREAK_LIST)
        pub const FROM_HTML_SEPARATOR_LINE_BREAK_LIST : i32 = 8;

        /// public static final [FROM_HTML_SEPARATOR_LINE_BREAK_LIST_ITEM](https://developer.android.com/reference/android/text/Html.html#FROM_HTML_SEPARATOR_LINE_BREAK_LIST_ITEM)
        pub const FROM_HTML_SEPARATOR_LINE_BREAK_LIST_ITEM : i32 = 4;

        /// public static final [FROM_HTML_SEPARATOR_LINE_BREAK_PARAGRAPH](https://developer.android.com/reference/android/text/Html.html#FROM_HTML_SEPARATOR_LINE_BREAK_PARAGRAPH)
        pub const FROM_HTML_SEPARATOR_LINE_BREAK_PARAGRAPH : i32 = 1;

        /// public static final [TO_HTML_PARAGRAPH_LINES_CONSECUTIVE](https://developer.android.com/reference/android/text/Html.html#TO_HTML_PARAGRAPH_LINES_CONSECUTIVE)
        pub const TO_HTML_PARAGRAPH_LINES_CONSECUTIVE : i32 = 0;

        /// public static final [TO_HTML_PARAGRAPH_LINES_INDIVIDUAL](https://developer.android.com/reference/android/text/Html.html#TO_HTML_PARAGRAPH_LINES_INDIVIDUAL)
        pub const TO_HTML_PARAGRAPH_LINES_INDIVIDUAL : i32 = 1;
    }
}
