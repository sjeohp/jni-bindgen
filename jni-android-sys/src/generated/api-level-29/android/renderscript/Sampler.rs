// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-renderscript-Sampler"))]
__jni_bindgen! {
    /// public class [Sampler](https://developer.android.com/reference/android/renderscript/Sampler.html)
    ///
    /// Required feature: android-renderscript-Sampler
    public class Sampler ("android/renderscript/Sampler") extends crate::android::renderscript::BaseObj {

        // // Not emitting: Non-public method
        // /// [Sampler](https://developer.android.com/reference/android/renderscript/Sampler.html#Sampler(long,%20android.renderscript.RenderScript))
        // ///
        // /// Required features: "android-renderscript-RenderScript"
        // #[cfg(any(feature = "all", all(feature = "android-renderscript-RenderScript")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i64, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::renderscript::Sampler>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/renderscript/Sampler", java.flags == (empty), .name == "<init>", .descriptor == "(JLandroid/renderscript/RenderScript;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/Sampler\0", "<init>\0", "(JLandroid/renderscript/RenderScript;)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getMinification](https://developer.android.com/reference/android/renderscript/Sampler.html#getMinification())
        ///
        /// Required features: "android-renderscript-Sampler_Value"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Sampler_Value")))]
        pub fn getMinification<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Sampler_Value>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Sampler", java.flags == PUBLIC, .name == "getMinification", .descriptor == "()Landroid/renderscript/Sampler$Value;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/Sampler\0", "getMinification\0", "()Landroid/renderscript/Sampler$Value;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMagnification](https://developer.android.com/reference/android/renderscript/Sampler.html#getMagnification())
        ///
        /// Required features: "android-renderscript-Sampler_Value"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Sampler_Value")))]
        pub fn getMagnification<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Sampler_Value>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Sampler", java.flags == PUBLIC, .name == "getMagnification", .descriptor == "()Landroid/renderscript/Sampler$Value;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/Sampler\0", "getMagnification\0", "()Landroid/renderscript/Sampler$Value;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getWrapS](https://developer.android.com/reference/android/renderscript/Sampler.html#getWrapS())
        ///
        /// Required features: "android-renderscript-Sampler_Value"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Sampler_Value")))]
        pub fn getWrapS<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Sampler_Value>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Sampler", java.flags == PUBLIC, .name == "getWrapS", .descriptor == "()Landroid/renderscript/Sampler$Value;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/Sampler\0", "getWrapS\0", "()Landroid/renderscript/Sampler$Value;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getWrapT](https://developer.android.com/reference/android/renderscript/Sampler.html#getWrapT())
        ///
        /// Required features: "android-renderscript-Sampler_Value"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Sampler_Value")))]
        pub fn getWrapT<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Sampler_Value>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Sampler", java.flags == PUBLIC, .name == "getWrapT", .descriptor == "()Landroid/renderscript/Sampler$Value;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/Sampler\0", "getWrapT\0", "()Landroid/renderscript/Sampler$Value;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAnisotropy](https://developer.android.com/reference/android/renderscript/Sampler.html#getAnisotropy())
        pub fn getAnisotropy<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Sampler", java.flags == PUBLIC, .name == "getAnisotropy", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/Sampler\0", "getAnisotropy\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [CLAMP_NEAREST](https://developer.android.com/reference/android/renderscript/Sampler.html#CLAMP_NEAREST(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-RenderScript", "android-renderscript-Sampler"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-RenderScript", feature = "android-renderscript-Sampler")))]
        pub fn CLAMP_NEAREST<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Sampler>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Sampler", java.flags == PUBLIC | STATIC, .name == "CLAMP_NEAREST", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Sampler;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Sampler\0", "CLAMP_NEAREST\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Sampler;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [CLAMP_LINEAR](https://developer.android.com/reference/android/renderscript/Sampler.html#CLAMP_LINEAR(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-RenderScript", "android-renderscript-Sampler"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-RenderScript", feature = "android-renderscript-Sampler")))]
        pub fn CLAMP_LINEAR<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Sampler>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Sampler", java.flags == PUBLIC | STATIC, .name == "CLAMP_LINEAR", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Sampler;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Sampler\0", "CLAMP_LINEAR\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Sampler;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [CLAMP_LINEAR_MIP_LINEAR](https://developer.android.com/reference/android/renderscript/Sampler.html#CLAMP_LINEAR_MIP_LINEAR(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-RenderScript", "android-renderscript-Sampler"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-RenderScript", feature = "android-renderscript-Sampler")))]
        pub fn CLAMP_LINEAR_MIP_LINEAR<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Sampler>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Sampler", java.flags == PUBLIC | STATIC, .name == "CLAMP_LINEAR_MIP_LINEAR", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Sampler;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Sampler\0", "CLAMP_LINEAR_MIP_LINEAR\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Sampler;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [WRAP_NEAREST](https://developer.android.com/reference/android/renderscript/Sampler.html#WRAP_NEAREST(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-RenderScript", "android-renderscript-Sampler"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-RenderScript", feature = "android-renderscript-Sampler")))]
        pub fn WRAP_NEAREST<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Sampler>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Sampler", java.flags == PUBLIC | STATIC, .name == "WRAP_NEAREST", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Sampler;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Sampler\0", "WRAP_NEAREST\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Sampler;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [WRAP_LINEAR](https://developer.android.com/reference/android/renderscript/Sampler.html#WRAP_LINEAR(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-RenderScript", "android-renderscript-Sampler"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-RenderScript", feature = "android-renderscript-Sampler")))]
        pub fn WRAP_LINEAR<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Sampler>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Sampler", java.flags == PUBLIC | STATIC, .name == "WRAP_LINEAR", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Sampler;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Sampler\0", "WRAP_LINEAR\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Sampler;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [WRAP_LINEAR_MIP_LINEAR](https://developer.android.com/reference/android/renderscript/Sampler.html#WRAP_LINEAR_MIP_LINEAR(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-RenderScript", "android-renderscript-Sampler"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-RenderScript", feature = "android-renderscript-Sampler")))]
        pub fn WRAP_LINEAR_MIP_LINEAR<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Sampler>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Sampler", java.flags == PUBLIC | STATIC, .name == "WRAP_LINEAR_MIP_LINEAR", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Sampler;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Sampler\0", "WRAP_LINEAR_MIP_LINEAR\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Sampler;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [MIRRORED_REPEAT_NEAREST](https://developer.android.com/reference/android/renderscript/Sampler.html#MIRRORED_REPEAT_NEAREST(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-RenderScript", "android-renderscript-Sampler"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-RenderScript", feature = "android-renderscript-Sampler")))]
        pub fn MIRRORED_REPEAT_NEAREST<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Sampler>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Sampler", java.flags == PUBLIC | STATIC, .name == "MIRRORED_REPEAT_NEAREST", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Sampler;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Sampler\0", "MIRRORED_REPEAT_NEAREST\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Sampler;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [MIRRORED_REPEAT_LINEAR](https://developer.android.com/reference/android/renderscript/Sampler.html#MIRRORED_REPEAT_LINEAR(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-RenderScript", "android-renderscript-Sampler"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-RenderScript", feature = "android-renderscript-Sampler")))]
        pub fn MIRRORED_REPEAT_LINEAR<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Sampler>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Sampler", java.flags == PUBLIC | STATIC, .name == "MIRRORED_REPEAT_LINEAR", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Sampler;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Sampler\0", "MIRRORED_REPEAT_LINEAR\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Sampler;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [MIRRORED_REPEAT_LINEAR_MIP_LINEAR](https://developer.android.com/reference/android/renderscript/Sampler.html#MIRRORED_REPEAT_LINEAR_MIP_LINEAR(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-RenderScript", "android-renderscript-Sampler"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-RenderScript", feature = "android-renderscript-Sampler")))]
        pub fn MIRRORED_REPEAT_LINEAR_MIP_LINEAR<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Sampler>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Sampler", java.flags == PUBLIC | STATIC, .name == "MIRRORED_REPEAT_LINEAR_MIP_LINEAR", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Sampler;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Sampler\0", "MIRRORED_REPEAT_LINEAR_MIP_LINEAR\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Sampler;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
