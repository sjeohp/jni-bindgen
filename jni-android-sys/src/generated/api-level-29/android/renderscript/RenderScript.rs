// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-renderscript-RenderScript"))]
__jni_bindgen! {
    /// public class [RenderScript](https://developer.android.com/reference/android/renderscript/RenderScript.html)
    ///
    /// Required feature: android-renderscript-RenderScript
    public class RenderScript ("android/renderscript/RenderScript") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [RenderScript](https://developer.android.com/reference/android/renderscript/RenderScript.html#RenderScript(android.content.Context))
        // ///
        // /// Required features: "android-content-Context"
        // #[cfg(any(feature = "all", all(feature = "android-content-Context")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::renderscript::RenderScript>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/renderscript/RenderScript", java.flags == (empty), .name == "<init>", .descriptor == "(Landroid/content/Context;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/RenderScript\0", "<init>\0", "(Landroid/content/Context;)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getMinorVersion](https://developer.android.com/reference/android/renderscript/RenderScript.html#getMinorVersion())
        pub fn getMinorVersion<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/RenderScript", java.flags == PUBLIC | STATIC, .name == "getMinorVersion", .descriptor == "()J"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/RenderScript\0", "getMinorVersion\0", "()J\0");
                __jni_env.call_static_long_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setMessageHandler](https://developer.android.com/reference/android/renderscript/RenderScript.html#setMessageHandler(android.renderscript.RenderScript.RSMessageHandler))
        ///
        /// Required features: "android-renderscript-RenderScript_RSMessageHandler"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-RenderScript_RSMessageHandler")))]
        pub fn setMessageHandler<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript_RSMessageHandler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/RenderScript", java.flags == PUBLIC, .name == "setMessageHandler", .descriptor == "(Landroid/renderscript/RenderScript$RSMessageHandler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/RenderScript\0", "setMessageHandler\0", "(Landroid/renderscript/RenderScript$RSMessageHandler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMessageHandler](https://developer.android.com/reference/android/renderscript/RenderScript.html#getMessageHandler())
        ///
        /// Required features: "android-renderscript-RenderScript_RSMessageHandler"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-RenderScript_RSMessageHandler")))]
        pub fn getMessageHandler<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::RenderScript_RSMessageHandler>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/RenderScript", java.flags == PUBLIC, .name == "getMessageHandler", .descriptor == "()Landroid/renderscript/RenderScript$RSMessageHandler;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/RenderScript\0", "getMessageHandler\0", "()Landroid/renderscript/RenderScript$RSMessageHandler;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [sendMessage](https://developer.android.com/reference/android/renderscript/RenderScript.html#sendMessage(int,%20int%5B%5D))
        pub fn sendMessage<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/RenderScript", java.flags == PUBLIC, .name == "sendMessage", .descriptor == "(I[I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/RenderScript\0", "sendMessage\0", "(I[I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setErrorHandler](https://developer.android.com/reference/android/renderscript/RenderScript.html#setErrorHandler(android.renderscript.RenderScript.RSErrorHandler))
        ///
        /// Required features: "android-renderscript-RenderScript_RSErrorHandler"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-RenderScript_RSErrorHandler")))]
        pub fn setErrorHandler<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript_RSErrorHandler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/RenderScript", java.flags == PUBLIC, .name == "setErrorHandler", .descriptor == "(Landroid/renderscript/RenderScript$RSErrorHandler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/RenderScript\0", "setErrorHandler\0", "(Landroid/renderscript/RenderScript$RSErrorHandler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getErrorHandler](https://developer.android.com/reference/android/renderscript/RenderScript.html#getErrorHandler())
        ///
        /// Required features: "android-renderscript-RenderScript_RSErrorHandler"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-RenderScript_RSErrorHandler")))]
        pub fn getErrorHandler<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::RenderScript_RSErrorHandler>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/RenderScript", java.flags == PUBLIC, .name == "getErrorHandler", .descriptor == "()Landroid/renderscript/RenderScript$RSErrorHandler;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/RenderScript\0", "getErrorHandler\0", "()Landroid/renderscript/RenderScript$RSErrorHandler;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPriority](https://developer.android.com/reference/android/renderscript/RenderScript.html#setPriority(android.renderscript.RenderScript.Priority))
        ///
        /// Required features: "android-renderscript-RenderScript_Priority"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-RenderScript_Priority")))]
        pub fn setPriority<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript_Priority>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/RenderScript", java.flags == PUBLIC, .name == "setPriority", .descriptor == "(Landroid/renderscript/RenderScript$Priority;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/RenderScript\0", "setPriority\0", "(Landroid/renderscript/RenderScript$Priority;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getApplicationContext](https://developer.android.com/reference/android/renderscript/RenderScript.html#getApplicationContext())
        ///
        /// Required features: "android-content-Context"
        #[cfg(any(feature = "all", all(feature = "android-content-Context")))]
        pub fn getApplicationContext<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::Context>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/RenderScript", java.flags == PUBLIC | FINAL, .name == "getApplicationContext", .descriptor == "()Landroid/content/Context;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/RenderScript\0", "getApplicationContext\0", "()Landroid/content/Context;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [create](https://developer.android.com/reference/android/renderscript/RenderScript.html#create(android.content.Context))
        ///
        /// Required features: "android-content-Context", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-renderscript-RenderScript")))]
        pub fn create_Context<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::RenderScript>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/RenderScript", java.flags == PUBLIC | STATIC, .name == "create", .descriptor == "(Landroid/content/Context;)Landroid/renderscript/RenderScript;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/RenderScript\0", "create\0", "(Landroid/content/Context;)Landroid/renderscript/RenderScript;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [create](https://developer.android.com/reference/android/renderscript/RenderScript.html#create(android.content.Context,%20android.renderscript.RenderScript.ContextType))
        ///
        /// Required features: "android-content-Context", "android-renderscript-RenderScript", "android-renderscript-RenderScript_ContextType"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-renderscript-RenderScript", feature = "android-renderscript-RenderScript_ContextType")))]
        pub fn create_Context_ContextType<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript_ContextType>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::RenderScript>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/RenderScript", java.flags == PUBLIC | STATIC, .name == "create", .descriptor == "(Landroid/content/Context;Landroid/renderscript/RenderScript$ContextType;)Landroid/renderscript/RenderScript;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/RenderScript\0", "create\0", "(Landroid/content/Context;Landroid/renderscript/RenderScript$ContextType;)Landroid/renderscript/RenderScript;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [create](https://developer.android.com/reference/android/renderscript/RenderScript.html#create(android.content.Context,%20android.renderscript.RenderScript.ContextType,%20int))
        ///
        /// Required features: "android-content-Context", "android-renderscript-RenderScript", "android-renderscript-RenderScript_ContextType"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-renderscript-RenderScript", feature = "android-renderscript-RenderScript_ContextType")))]
        pub fn create_Context_ContextType_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript_ContextType>>, arg2: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::RenderScript>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/RenderScript", java.flags == PUBLIC | STATIC, .name == "create", .descriptor == "(Landroid/content/Context;Landroid/renderscript/RenderScript$ContextType;I)Landroid/renderscript/RenderScript;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/RenderScript\0", "create\0", "(Landroid/content/Context;Landroid/renderscript/RenderScript$ContextType;I)Landroid/renderscript/RenderScript;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [releaseAllContexts](https://developer.android.com/reference/android/renderscript/RenderScript.html#releaseAllContexts())
        pub fn releaseAllContexts<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/RenderScript", java.flags == PUBLIC | STATIC, .name == "releaseAllContexts", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/RenderScript\0", "releaseAllContexts\0", "()V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createMultiContext](https://developer.android.com/reference/android/renderscript/RenderScript.html#createMultiContext(android.content.Context,%20android.renderscript.RenderScript.ContextType,%20int,%20int))
        ///
        /// Required features: "android-content-Context", "android-renderscript-RenderScript", "android-renderscript-RenderScript_ContextType"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-renderscript-RenderScript", feature = "android-renderscript-RenderScript_ContextType")))]
        pub fn createMultiContext<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript_ContextType>>, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::RenderScript>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/RenderScript", java.flags == PUBLIC | STATIC, .name == "createMultiContext", .descriptor == "(Landroid/content/Context;Landroid/renderscript/RenderScript$ContextType;II)Landroid/renderscript/RenderScript;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/RenderScript\0", "createMultiContext\0", "(Landroid/content/Context;Landroid/renderscript/RenderScript$ContextType;II)Landroid/renderscript/RenderScript;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [contextDump](https://developer.android.com/reference/android/renderscript/RenderScript.html#contextDump())
        pub fn contextDump<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/RenderScript", java.flags == PUBLIC, .name == "contextDump", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/RenderScript\0", "contextDump\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [finish](https://developer.android.com/reference/android/renderscript/RenderScript.html#finish())
        pub fn finish<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/RenderScript", java.flags == PUBLIC, .name == "finish", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/RenderScript\0", "finish\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [finalize](https://developer.android.com/reference/android/renderscript/RenderScript.html#finalize())
        // fn finalize<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/renderscript/RenderScript", java.flags == PROTECTED, .name == "finalize", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/RenderScript\0", "finalize\0", "()V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [destroy](https://developer.android.com/reference/android/renderscript/RenderScript.html#destroy())
        pub fn destroy<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/RenderScript", java.flags == PUBLIC, .name == "destroy", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/RenderScript\0", "destroy\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [CREATE_FLAG_LOW_LATENCY](https://developer.android.com/reference/android/renderscript/RenderScript.html#CREATE_FLAG_LOW_LATENCY)
        pub const CREATE_FLAG_LOW_LATENCY : i32 = 2;

        /// public static final [CREATE_FLAG_LOW_POWER](https://developer.android.com/reference/android/renderscript/RenderScript.html#CREATE_FLAG_LOW_POWER)
        pub const CREATE_FLAG_LOW_POWER : i32 = 4;

        /// public static final [CREATE_FLAG_NONE](https://developer.android.com/reference/android/renderscript/RenderScript.html#CREATE_FLAG_NONE)
        pub const CREATE_FLAG_NONE : i32 = 0;
    }
}
