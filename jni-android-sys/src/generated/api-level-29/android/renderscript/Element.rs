// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-renderscript-Element"))]
__jni_bindgen! {
    /// public class [Element](https://developer.android.com/reference/android/renderscript/Element.html)
    ///
    /// Required feature: android-renderscript-Element
    public class Element ("android/renderscript/Element") extends crate::android::renderscript::BaseObj {

        // // Not emitting: Non-public method
        // /// [Element](https://developer.android.com/reference/android/renderscript/Element.html#Element(long,%20android.renderscript.RenderScript))
        // ///
        // /// Required features: "android-renderscript-RenderScript"
        // #[cfg(any(feature = "all", all(feature = "android-renderscript-RenderScript")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i64, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::renderscript::Element>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/renderscript/Element", java.flags == (empty), .name == "<init>", .descriptor == "(JLandroid/renderscript/RenderScript;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/Element\0", "<init>\0", "(JLandroid/renderscript/RenderScript;)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getBytesSize](https://developer.android.com/reference/android/renderscript/Element.html#getBytesSize())
        pub fn getBytesSize<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC, .name == "getBytesSize", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/Element\0", "getBytesSize\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getVectorSize](https://developer.android.com/reference/android/renderscript/Element.html#getVectorSize())
        pub fn getVectorSize<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC, .name == "getVectorSize", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/Element\0", "getVectorSize\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isComplex](https://developer.android.com/reference/android/renderscript/Element.html#isComplex())
        pub fn isComplex<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC, .name == "isComplex", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/Element\0", "isComplex\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSubElementCount](https://developer.android.com/reference/android/renderscript/Element.html#getSubElementCount())
        pub fn getSubElementCount<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC, .name == "getSubElementCount", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/Element\0", "getSubElementCount\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSubElement](https://developer.android.com/reference/android/renderscript/Element.html#getSubElement(int))
        ///
        /// Required features: "android-renderscript-Element"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element")))]
        pub fn getSubElement<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC, .name == "getSubElement", .descriptor == "(I)Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/Element\0", "getSubElement\0", "(I)Landroid/renderscript/Element;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSubElementName](https://developer.android.com/reference/android/renderscript/Element.html#getSubElementName(int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getSubElementName<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC, .name == "getSubElementName", .descriptor == "(I)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/Element\0", "getSubElementName\0", "(I)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSubElementArraySize](https://developer.android.com/reference/android/renderscript/Element.html#getSubElementArraySize(int))
        pub fn getSubElementArraySize<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC, .name == "getSubElementArraySize", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/Element\0", "getSubElementArraySize\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSubElementOffsetBytes](https://developer.android.com/reference/android/renderscript/Element.html#getSubElementOffsetBytes(int))
        pub fn getSubElementOffsetBytes<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC, .name == "getSubElementOffsetBytes", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/Element\0", "getSubElementOffsetBytes\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDataType](https://developer.android.com/reference/android/renderscript/Element.html#getDataType())
        ///
        /// Required features: "android-renderscript-Element_DataType"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element_DataType")))]
        pub fn getDataType<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element_DataType>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC, .name == "getDataType", .descriptor == "()Landroid/renderscript/Element$DataType;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/Element\0", "getDataType\0", "()Landroid/renderscript/Element$DataType;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDataKind](https://developer.android.com/reference/android/renderscript/Element.html#getDataKind())
        ///
        /// Required features: "android-renderscript-Element_DataKind"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element_DataKind")))]
        pub fn getDataKind<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element_DataKind>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC, .name == "getDataKind", .descriptor == "()Landroid/renderscript/Element$DataKind;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/Element\0", "getDataKind\0", "()Landroid/renderscript/Element$DataKind;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [BOOLEAN](https://developer.android.com/reference/android/renderscript/Element.html#BOOLEAN(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-Element", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element", feature = "android-renderscript-RenderScript")))]
        pub fn BOOLEAN<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC | STATIC, .name == "BOOLEAN", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Element\0", "BOOLEAN\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [U8](https://developer.android.com/reference/android/renderscript/Element.html#U8(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-Element", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element", feature = "android-renderscript-RenderScript")))]
        pub fn U8<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC | STATIC, .name == "U8", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Element\0", "U8\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [I8](https://developer.android.com/reference/android/renderscript/Element.html#I8(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-Element", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element", feature = "android-renderscript-RenderScript")))]
        pub fn I8<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC | STATIC, .name == "I8", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Element\0", "I8\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [U16](https://developer.android.com/reference/android/renderscript/Element.html#U16(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-Element", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element", feature = "android-renderscript-RenderScript")))]
        pub fn U16<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC | STATIC, .name == "U16", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Element\0", "U16\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [I16](https://developer.android.com/reference/android/renderscript/Element.html#I16(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-Element", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element", feature = "android-renderscript-RenderScript")))]
        pub fn I16<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC | STATIC, .name == "I16", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Element\0", "I16\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [U32](https://developer.android.com/reference/android/renderscript/Element.html#U32(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-Element", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element", feature = "android-renderscript-RenderScript")))]
        pub fn U32<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC | STATIC, .name == "U32", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Element\0", "U32\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [I32](https://developer.android.com/reference/android/renderscript/Element.html#I32(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-Element", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element", feature = "android-renderscript-RenderScript")))]
        pub fn I32<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC | STATIC, .name == "I32", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Element\0", "I32\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [U64](https://developer.android.com/reference/android/renderscript/Element.html#U64(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-Element", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element", feature = "android-renderscript-RenderScript")))]
        pub fn U64<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC | STATIC, .name == "U64", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Element\0", "U64\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [I64](https://developer.android.com/reference/android/renderscript/Element.html#I64(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-Element", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element", feature = "android-renderscript-RenderScript")))]
        pub fn I64<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC | STATIC, .name == "I64", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Element\0", "I64\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [F16](https://developer.android.com/reference/android/renderscript/Element.html#F16(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-Element", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element", feature = "android-renderscript-RenderScript")))]
        pub fn F16<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC | STATIC, .name == "F16", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Element\0", "F16\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [F32](https://developer.android.com/reference/android/renderscript/Element.html#F32(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-Element", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element", feature = "android-renderscript-RenderScript")))]
        pub fn F32<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC | STATIC, .name == "F32", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Element\0", "F32\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [F64](https://developer.android.com/reference/android/renderscript/Element.html#F64(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-Element", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element", feature = "android-renderscript-RenderScript")))]
        pub fn F64<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC | STATIC, .name == "F64", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Element\0", "F64\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ELEMENT](https://developer.android.com/reference/android/renderscript/Element.html#ELEMENT(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-Element", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element", feature = "android-renderscript-RenderScript")))]
        pub fn ELEMENT<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC | STATIC, .name == "ELEMENT", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Element\0", "ELEMENT\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [TYPE](https://developer.android.com/reference/android/renderscript/Element.html#TYPE(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-Element", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element", feature = "android-renderscript-RenderScript")))]
        pub fn TYPE<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC | STATIC, .name == "TYPE", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Element\0", "TYPE\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ALLOCATION](https://developer.android.com/reference/android/renderscript/Element.html#ALLOCATION(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-Element", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element", feature = "android-renderscript-RenderScript")))]
        pub fn ALLOCATION<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC | STATIC, .name == "ALLOCATION", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Element\0", "ALLOCATION\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [SAMPLER](https://developer.android.com/reference/android/renderscript/Element.html#SAMPLER(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-Element", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element", feature = "android-renderscript-RenderScript")))]
        pub fn SAMPLER<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC | STATIC, .name == "SAMPLER", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Element\0", "SAMPLER\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [SCRIPT](https://developer.android.com/reference/android/renderscript/Element.html#SCRIPT(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-Element", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element", feature = "android-renderscript-RenderScript")))]
        pub fn SCRIPT<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC | STATIC, .name == "SCRIPT", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Element\0", "SCRIPT\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [MESH](https://developer.android.com/reference/android/renderscript/Element.html#MESH(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-Element", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element", feature = "android-renderscript-RenderScript")))]
        pub fn MESH<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC | STATIC, .name == "MESH", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Element\0", "MESH\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [PROGRAM_FRAGMENT](https://developer.android.com/reference/android/renderscript/Element.html#PROGRAM_FRAGMENT(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-Element", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element", feature = "android-renderscript-RenderScript")))]
        pub fn PROGRAM_FRAGMENT<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC | STATIC, .name == "PROGRAM_FRAGMENT", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Element\0", "PROGRAM_FRAGMENT\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [PROGRAM_VERTEX](https://developer.android.com/reference/android/renderscript/Element.html#PROGRAM_VERTEX(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-Element", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element", feature = "android-renderscript-RenderScript")))]
        pub fn PROGRAM_VERTEX<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC | STATIC, .name == "PROGRAM_VERTEX", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Element\0", "PROGRAM_VERTEX\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [PROGRAM_RASTER](https://developer.android.com/reference/android/renderscript/Element.html#PROGRAM_RASTER(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-Element", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element", feature = "android-renderscript-RenderScript")))]
        pub fn PROGRAM_RASTER<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC | STATIC, .name == "PROGRAM_RASTER", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Element\0", "PROGRAM_RASTER\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [PROGRAM_STORE](https://developer.android.com/reference/android/renderscript/Element.html#PROGRAM_STORE(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-Element", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element", feature = "android-renderscript-RenderScript")))]
        pub fn PROGRAM_STORE<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC | STATIC, .name == "PROGRAM_STORE", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Element\0", "PROGRAM_STORE\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [FONT](https://developer.android.com/reference/android/renderscript/Element.html#FONT(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-Element", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element", feature = "android-renderscript-RenderScript")))]
        pub fn FONT<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC | STATIC, .name == "FONT", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Element\0", "FONT\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [A_8](https://developer.android.com/reference/android/renderscript/Element.html#A_8(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-Element", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element", feature = "android-renderscript-RenderScript")))]
        pub fn A_8<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC | STATIC, .name == "A_8", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Element\0", "A_8\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [RGB_565](https://developer.android.com/reference/android/renderscript/Element.html#RGB_565(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-Element", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element", feature = "android-renderscript-RenderScript")))]
        pub fn RGB_565<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC | STATIC, .name == "RGB_565", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Element\0", "RGB_565\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [RGB_888](https://developer.android.com/reference/android/renderscript/Element.html#RGB_888(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-Element", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element", feature = "android-renderscript-RenderScript")))]
        pub fn RGB_888<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC | STATIC, .name == "RGB_888", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Element\0", "RGB_888\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [RGBA_5551](https://developer.android.com/reference/android/renderscript/Element.html#RGBA_5551(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-Element", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element", feature = "android-renderscript-RenderScript")))]
        pub fn RGBA_5551<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC | STATIC, .name == "RGBA_5551", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Element\0", "RGBA_5551\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [RGBA_4444](https://developer.android.com/reference/android/renderscript/Element.html#RGBA_4444(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-Element", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element", feature = "android-renderscript-RenderScript")))]
        pub fn RGBA_4444<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC | STATIC, .name == "RGBA_4444", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Element\0", "RGBA_4444\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [RGBA_8888](https://developer.android.com/reference/android/renderscript/Element.html#RGBA_8888(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-Element", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element", feature = "android-renderscript-RenderScript")))]
        pub fn RGBA_8888<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC | STATIC, .name == "RGBA_8888", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Element\0", "RGBA_8888\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [F16_2](https://developer.android.com/reference/android/renderscript/Element.html#F16_2(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-Element", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element", feature = "android-renderscript-RenderScript")))]
        pub fn F16_2<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC | STATIC, .name == "F16_2", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Element\0", "F16_2\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [F16_3](https://developer.android.com/reference/android/renderscript/Element.html#F16_3(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-Element", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element", feature = "android-renderscript-RenderScript")))]
        pub fn F16_3<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC | STATIC, .name == "F16_3", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Element\0", "F16_3\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [F16_4](https://developer.android.com/reference/android/renderscript/Element.html#F16_4(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-Element", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element", feature = "android-renderscript-RenderScript")))]
        pub fn F16_4<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC | STATIC, .name == "F16_4", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Element\0", "F16_4\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [F32_2](https://developer.android.com/reference/android/renderscript/Element.html#F32_2(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-Element", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element", feature = "android-renderscript-RenderScript")))]
        pub fn F32_2<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC | STATIC, .name == "F32_2", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Element\0", "F32_2\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [F32_3](https://developer.android.com/reference/android/renderscript/Element.html#F32_3(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-Element", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element", feature = "android-renderscript-RenderScript")))]
        pub fn F32_3<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC | STATIC, .name == "F32_3", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Element\0", "F32_3\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [F32_4](https://developer.android.com/reference/android/renderscript/Element.html#F32_4(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-Element", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element", feature = "android-renderscript-RenderScript")))]
        pub fn F32_4<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC | STATIC, .name == "F32_4", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Element\0", "F32_4\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [F64_2](https://developer.android.com/reference/android/renderscript/Element.html#F64_2(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-Element", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element", feature = "android-renderscript-RenderScript")))]
        pub fn F64_2<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC | STATIC, .name == "F64_2", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Element\0", "F64_2\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [F64_3](https://developer.android.com/reference/android/renderscript/Element.html#F64_3(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-Element", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element", feature = "android-renderscript-RenderScript")))]
        pub fn F64_3<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC | STATIC, .name == "F64_3", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Element\0", "F64_3\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [F64_4](https://developer.android.com/reference/android/renderscript/Element.html#F64_4(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-Element", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element", feature = "android-renderscript-RenderScript")))]
        pub fn F64_4<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC | STATIC, .name == "F64_4", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Element\0", "F64_4\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [U8_2](https://developer.android.com/reference/android/renderscript/Element.html#U8_2(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-Element", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element", feature = "android-renderscript-RenderScript")))]
        pub fn U8_2<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC | STATIC, .name == "U8_2", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Element\0", "U8_2\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [U8_3](https://developer.android.com/reference/android/renderscript/Element.html#U8_3(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-Element", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element", feature = "android-renderscript-RenderScript")))]
        pub fn U8_3<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC | STATIC, .name == "U8_3", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Element\0", "U8_3\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [U8_4](https://developer.android.com/reference/android/renderscript/Element.html#U8_4(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-Element", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element", feature = "android-renderscript-RenderScript")))]
        pub fn U8_4<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC | STATIC, .name == "U8_4", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Element\0", "U8_4\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [I8_2](https://developer.android.com/reference/android/renderscript/Element.html#I8_2(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-Element", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element", feature = "android-renderscript-RenderScript")))]
        pub fn I8_2<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC | STATIC, .name == "I8_2", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Element\0", "I8_2\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [I8_3](https://developer.android.com/reference/android/renderscript/Element.html#I8_3(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-Element", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element", feature = "android-renderscript-RenderScript")))]
        pub fn I8_3<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC | STATIC, .name == "I8_3", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Element\0", "I8_3\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [I8_4](https://developer.android.com/reference/android/renderscript/Element.html#I8_4(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-Element", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element", feature = "android-renderscript-RenderScript")))]
        pub fn I8_4<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC | STATIC, .name == "I8_4", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Element\0", "I8_4\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [U16_2](https://developer.android.com/reference/android/renderscript/Element.html#U16_2(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-Element", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element", feature = "android-renderscript-RenderScript")))]
        pub fn U16_2<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC | STATIC, .name == "U16_2", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Element\0", "U16_2\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [U16_3](https://developer.android.com/reference/android/renderscript/Element.html#U16_3(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-Element", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element", feature = "android-renderscript-RenderScript")))]
        pub fn U16_3<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC | STATIC, .name == "U16_3", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Element\0", "U16_3\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [U16_4](https://developer.android.com/reference/android/renderscript/Element.html#U16_4(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-Element", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element", feature = "android-renderscript-RenderScript")))]
        pub fn U16_4<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC | STATIC, .name == "U16_4", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Element\0", "U16_4\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [I16_2](https://developer.android.com/reference/android/renderscript/Element.html#I16_2(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-Element", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element", feature = "android-renderscript-RenderScript")))]
        pub fn I16_2<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC | STATIC, .name == "I16_2", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Element\0", "I16_2\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [I16_3](https://developer.android.com/reference/android/renderscript/Element.html#I16_3(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-Element", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element", feature = "android-renderscript-RenderScript")))]
        pub fn I16_3<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC | STATIC, .name == "I16_3", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Element\0", "I16_3\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [I16_4](https://developer.android.com/reference/android/renderscript/Element.html#I16_4(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-Element", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element", feature = "android-renderscript-RenderScript")))]
        pub fn I16_4<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC | STATIC, .name == "I16_4", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Element\0", "I16_4\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [U32_2](https://developer.android.com/reference/android/renderscript/Element.html#U32_2(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-Element", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element", feature = "android-renderscript-RenderScript")))]
        pub fn U32_2<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC | STATIC, .name == "U32_2", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Element\0", "U32_2\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [U32_3](https://developer.android.com/reference/android/renderscript/Element.html#U32_3(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-Element", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element", feature = "android-renderscript-RenderScript")))]
        pub fn U32_3<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC | STATIC, .name == "U32_3", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Element\0", "U32_3\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [U32_4](https://developer.android.com/reference/android/renderscript/Element.html#U32_4(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-Element", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element", feature = "android-renderscript-RenderScript")))]
        pub fn U32_4<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC | STATIC, .name == "U32_4", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Element\0", "U32_4\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [I32_2](https://developer.android.com/reference/android/renderscript/Element.html#I32_2(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-Element", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element", feature = "android-renderscript-RenderScript")))]
        pub fn I32_2<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC | STATIC, .name == "I32_2", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Element\0", "I32_2\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [I32_3](https://developer.android.com/reference/android/renderscript/Element.html#I32_3(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-Element", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element", feature = "android-renderscript-RenderScript")))]
        pub fn I32_3<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC | STATIC, .name == "I32_3", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Element\0", "I32_3\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [I32_4](https://developer.android.com/reference/android/renderscript/Element.html#I32_4(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-Element", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element", feature = "android-renderscript-RenderScript")))]
        pub fn I32_4<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC | STATIC, .name == "I32_4", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Element\0", "I32_4\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [U64_2](https://developer.android.com/reference/android/renderscript/Element.html#U64_2(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-Element", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element", feature = "android-renderscript-RenderScript")))]
        pub fn U64_2<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC | STATIC, .name == "U64_2", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Element\0", "U64_2\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [U64_3](https://developer.android.com/reference/android/renderscript/Element.html#U64_3(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-Element", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element", feature = "android-renderscript-RenderScript")))]
        pub fn U64_3<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC | STATIC, .name == "U64_3", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Element\0", "U64_3\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [U64_4](https://developer.android.com/reference/android/renderscript/Element.html#U64_4(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-Element", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element", feature = "android-renderscript-RenderScript")))]
        pub fn U64_4<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC | STATIC, .name == "U64_4", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Element\0", "U64_4\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [I64_2](https://developer.android.com/reference/android/renderscript/Element.html#I64_2(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-Element", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element", feature = "android-renderscript-RenderScript")))]
        pub fn I64_2<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC | STATIC, .name == "I64_2", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Element\0", "I64_2\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [I64_3](https://developer.android.com/reference/android/renderscript/Element.html#I64_3(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-Element", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element", feature = "android-renderscript-RenderScript")))]
        pub fn I64_3<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC | STATIC, .name == "I64_3", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Element\0", "I64_3\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [I64_4](https://developer.android.com/reference/android/renderscript/Element.html#I64_4(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-Element", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element", feature = "android-renderscript-RenderScript")))]
        pub fn I64_4<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC | STATIC, .name == "I64_4", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Element\0", "I64_4\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [YUV](https://developer.android.com/reference/android/renderscript/Element.html#YUV(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-Element", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element", feature = "android-renderscript-RenderScript")))]
        pub fn YUV<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC | STATIC, .name == "YUV", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Element\0", "YUV\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [MATRIX_4X4](https://developer.android.com/reference/android/renderscript/Element.html#MATRIX_4X4(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-Element", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element", feature = "android-renderscript-RenderScript")))]
        pub fn MATRIX_4X4<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC | STATIC, .name == "MATRIX_4X4", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Element\0", "MATRIX_4X4\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [MATRIX4X4](https://developer.android.com/reference/android/renderscript/Element.html#MATRIX4X4(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-Element", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element", feature = "android-renderscript-RenderScript")))]
        #[deprecated] pub fn MATRIX4X4<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC | STATIC, .name == "MATRIX4X4", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Element\0", "MATRIX4X4\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [MATRIX_3X3](https://developer.android.com/reference/android/renderscript/Element.html#MATRIX_3X3(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-Element", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element", feature = "android-renderscript-RenderScript")))]
        pub fn MATRIX_3X3<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC | STATIC, .name == "MATRIX_3X3", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Element\0", "MATRIX_3X3\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [MATRIX_2X2](https://developer.android.com/reference/android/renderscript/Element.html#MATRIX_2X2(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-Element", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element", feature = "android-renderscript-RenderScript")))]
        pub fn MATRIX_2X2<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC | STATIC, .name == "MATRIX_2X2", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Element\0", "MATRIX_2X2\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/Element;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createVector](https://developer.android.com/reference/android/renderscript/Element.html#createVector(android.renderscript.RenderScript,%20android.renderscript.Element.DataType,%20int))
        ///
        /// Required features: "android-renderscript-Element", "android-renderscript-Element_DataType", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element", feature = "android-renderscript-Element_DataType", feature = "android-renderscript-RenderScript")))]
        pub fn createVector<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Element_DataType>>, arg2: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC | STATIC, .name == "createVector", .descriptor == "(Landroid/renderscript/RenderScript;Landroid/renderscript/Element$DataType;I)Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Element\0", "createVector\0", "(Landroid/renderscript/RenderScript;Landroid/renderscript/Element$DataType;I)Landroid/renderscript/Element;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createPixel](https://developer.android.com/reference/android/renderscript/Element.html#createPixel(android.renderscript.RenderScript,%20android.renderscript.Element.DataType,%20android.renderscript.Element.DataKind))
        ///
        /// Required features: "android-renderscript-Element", "android-renderscript-Element_DataKind", "android-renderscript-Element_DataType", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element", feature = "android-renderscript-Element_DataKind", feature = "android-renderscript-Element_DataType", feature = "android-renderscript-RenderScript")))]
        pub fn createPixel<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Element_DataType>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Element_DataKind>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC | STATIC, .name == "createPixel", .descriptor == "(Landroid/renderscript/RenderScript;Landroid/renderscript/Element$DataType;Landroid/renderscript/Element$DataKind;)Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/Element\0", "createPixel\0", "(Landroid/renderscript/RenderScript;Landroid/renderscript/Element$DataType;Landroid/renderscript/Element$DataKind;)Landroid/renderscript/Element;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isCompatible](https://developer.android.com/reference/android/renderscript/Element.html#isCompatible(android.renderscript.Element))
        ///
        /// Required features: "android-renderscript-Element"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element")))]
        pub fn isCompatible<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Element>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Element", java.flags == PUBLIC, .name == "isCompatible", .descriptor == "(Landroid/renderscript/Element;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/Element\0", "isCompatible\0", "(Landroid/renderscript/Element;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
