// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-renderscript-ScriptIntrinsicBLAS"))]
__jni_bindgen! {
    /// public final class [ScriptIntrinsicBLAS](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html)
    ///
    /// Required feature: android-renderscript-ScriptIntrinsicBLAS
    public final class ScriptIntrinsicBLAS ("android/renderscript/ScriptIntrinsicBLAS") extends crate::android::renderscript::ScriptIntrinsic {

        // // Not emitting: Non-public method
        // /// [ScriptIntrinsicBLAS](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#ScriptIntrinsicBLAS(long,%20android.renderscript.RenderScript))
        // ///
        // /// Required features: "android-renderscript-RenderScript"
        // #[cfg(any(feature = "all", all(feature = "android-renderscript-RenderScript")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i64, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::renderscript::ScriptIntrinsicBLAS>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == (empty), .name == "<init>", .descriptor == "(JLandroid/renderscript/RenderScript;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "<init>\0", "(JLandroid/renderscript/RenderScript;)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [create](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#create(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-RenderScript", "android-renderscript-ScriptIntrinsicBLAS"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-RenderScript", feature = "android-renderscript-ScriptIntrinsicBLAS")))]
        pub fn create<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::ScriptIntrinsicBLAS>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC | STATIC, .name == "create", .descriptor == "(Landroid/renderscript/RenderScript;)Landroid/renderscript/ScriptIntrinsicBLAS;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/ScriptIntrinsicBLAS\0", "create\0", "(Landroid/renderscript/RenderScript;)Landroid/renderscript/ScriptIntrinsicBLAS;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [SGEMV](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#SGEMV(int,%20float,%20android.renderscript.Allocation,%20android.renderscript.Allocation,%20int,%20float,%20android.renderscript.Allocation,%20int))
        ///
        /// Required features: "android-renderscript-Allocation"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation")))]
        pub fn SGEMV<'env>(&'env self, arg0: i32, arg1: f32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg4: i32, arg5: f32, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg7: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "SGEMV", .descriptor == "(IFLandroid/renderscript/Allocation;Landroid/renderscript/Allocation;IFLandroid/renderscript/Allocation;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6.into()), __jni_bindgen::AsJValue::as_jvalue(&arg7)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "SGEMV\0", "(IFLandroid/renderscript/Allocation;Landroid/renderscript/Allocation;IFLandroid/renderscript/Allocation;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [DGEMV](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#DGEMV(int,%20double,%20android.renderscript.Allocation,%20android.renderscript.Allocation,%20int,%20double,%20android.renderscript.Allocation,%20int))
        ///
        /// Required features: "android-renderscript-Allocation"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation")))]
        pub fn DGEMV<'env>(&'env self, arg0: i32, arg1: f64, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg4: i32, arg5: f64, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg7: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "DGEMV", .descriptor == "(IDLandroid/renderscript/Allocation;Landroid/renderscript/Allocation;IDLandroid/renderscript/Allocation;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6.into()), __jni_bindgen::AsJValue::as_jvalue(&arg7)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "DGEMV\0", "(IDLandroid/renderscript/Allocation;Landroid/renderscript/Allocation;IDLandroid/renderscript/Allocation;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [CGEMV](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#CGEMV(int,%20android.renderscript.Float2,%20android.renderscript.Allocation,%20android.renderscript.Allocation,%20int,%20android.renderscript.Float2,%20android.renderscript.Allocation,%20int))
        ///
        /// Required features: "android-renderscript-Allocation", "android-renderscript-Float2"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation", feature = "android-renderscript-Float2")))]
        pub fn CGEMV<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Float2>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg4: i32, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Float2>>, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg7: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "CGEMV", .descriptor == "(ILandroid/renderscript/Float2;Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;ILandroid/renderscript/Float2;Landroid/renderscript/Allocation;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5.into()), __jni_bindgen::AsJValue::as_jvalue(&arg6.into()), __jni_bindgen::AsJValue::as_jvalue(&arg7)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "CGEMV\0", "(ILandroid/renderscript/Float2;Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;ILandroid/renderscript/Float2;Landroid/renderscript/Allocation;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ZGEMV](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#ZGEMV(int,%20android.renderscript.Double2,%20android.renderscript.Allocation,%20android.renderscript.Allocation,%20int,%20android.renderscript.Double2,%20android.renderscript.Allocation,%20int))
        ///
        /// Required features: "android-renderscript-Allocation", "android-renderscript-Double2"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation", feature = "android-renderscript-Double2")))]
        pub fn ZGEMV<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Double2>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg4: i32, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Double2>>, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg7: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "ZGEMV", .descriptor == "(ILandroid/renderscript/Double2;Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;ILandroid/renderscript/Double2;Landroid/renderscript/Allocation;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5.into()), __jni_bindgen::AsJValue::as_jvalue(&arg6.into()), __jni_bindgen::AsJValue::as_jvalue(&arg7)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "ZGEMV\0", "(ILandroid/renderscript/Double2;Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;ILandroid/renderscript/Double2;Landroid/renderscript/Allocation;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [SGBMV](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#SGBMV(int,%20int,%20int,%20float,%20android.renderscript.Allocation,%20android.renderscript.Allocation,%20int,%20float,%20android.renderscript.Allocation,%20int))
        ///
        /// Required features: "android-renderscript-Allocation"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation")))]
        pub fn SGBMV<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: f32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg6: i32, arg7: f32, arg8: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg9: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "SGBMV", .descriptor == "(IIIFLandroid/renderscript/Allocation;Landroid/renderscript/Allocation;IFLandroid/renderscript/Allocation;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5.into()), __jni_bindgen::AsJValue::as_jvalue(&arg6), __jni_bindgen::AsJValue::as_jvalue(&arg7), __jni_bindgen::AsJValue::as_jvalue(&arg8.into()), __jni_bindgen::AsJValue::as_jvalue(&arg9)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "SGBMV\0", "(IIIFLandroid/renderscript/Allocation;Landroid/renderscript/Allocation;IFLandroid/renderscript/Allocation;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [DGBMV](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#DGBMV(int,%20int,%20int,%20double,%20android.renderscript.Allocation,%20android.renderscript.Allocation,%20int,%20double,%20android.renderscript.Allocation,%20int))
        ///
        /// Required features: "android-renderscript-Allocation"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation")))]
        pub fn DGBMV<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: f64, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg6: i32, arg7: f64, arg8: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg9: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "DGBMV", .descriptor == "(IIIDLandroid/renderscript/Allocation;Landroid/renderscript/Allocation;IDLandroid/renderscript/Allocation;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5.into()), __jni_bindgen::AsJValue::as_jvalue(&arg6), __jni_bindgen::AsJValue::as_jvalue(&arg7), __jni_bindgen::AsJValue::as_jvalue(&arg8.into()), __jni_bindgen::AsJValue::as_jvalue(&arg9)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "DGBMV\0", "(IIIDLandroid/renderscript/Allocation;Landroid/renderscript/Allocation;IDLandroid/renderscript/Allocation;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [CGBMV](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#CGBMV(int,%20int,%20int,%20android.renderscript.Float2,%20android.renderscript.Allocation,%20android.renderscript.Allocation,%20int,%20android.renderscript.Float2,%20android.renderscript.Allocation,%20int))
        ///
        /// Required features: "android-renderscript-Allocation", "android-renderscript-Float2"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation", feature = "android-renderscript-Float2")))]
        pub fn CGBMV<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Float2>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg6: i32, arg7: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Float2>>, arg8: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg9: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "CGBMV", .descriptor == "(IIILandroid/renderscript/Float2;Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;ILandroid/renderscript/Float2;Landroid/renderscript/Allocation;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5.into()), __jni_bindgen::AsJValue::as_jvalue(&arg6), __jni_bindgen::AsJValue::as_jvalue(&arg7.into()), __jni_bindgen::AsJValue::as_jvalue(&arg8.into()), __jni_bindgen::AsJValue::as_jvalue(&arg9)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "CGBMV\0", "(IIILandroid/renderscript/Float2;Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;ILandroid/renderscript/Float2;Landroid/renderscript/Allocation;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ZGBMV](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#ZGBMV(int,%20int,%20int,%20android.renderscript.Double2,%20android.renderscript.Allocation,%20android.renderscript.Allocation,%20int,%20android.renderscript.Double2,%20android.renderscript.Allocation,%20int))
        ///
        /// Required features: "android-renderscript-Allocation", "android-renderscript-Double2"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation", feature = "android-renderscript-Double2")))]
        pub fn ZGBMV<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Double2>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg6: i32, arg7: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Double2>>, arg8: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg9: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "ZGBMV", .descriptor == "(IIILandroid/renderscript/Double2;Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;ILandroid/renderscript/Double2;Landroid/renderscript/Allocation;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5.into()), __jni_bindgen::AsJValue::as_jvalue(&arg6), __jni_bindgen::AsJValue::as_jvalue(&arg7.into()), __jni_bindgen::AsJValue::as_jvalue(&arg8.into()), __jni_bindgen::AsJValue::as_jvalue(&arg9)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "ZGBMV\0", "(IIILandroid/renderscript/Double2;Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;ILandroid/renderscript/Double2;Landroid/renderscript/Allocation;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [STRMV](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#STRMV(int,%20int,%20int,%20android.renderscript.Allocation,%20android.renderscript.Allocation,%20int))
        ///
        /// Required features: "android-renderscript-Allocation"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation")))]
        pub fn STRMV<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg5: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "STRMV", .descriptor == "(IIILandroid/renderscript/Allocation;Landroid/renderscript/Allocation;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "STRMV\0", "(IIILandroid/renderscript/Allocation;Landroid/renderscript/Allocation;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [DTRMV](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#DTRMV(int,%20int,%20int,%20android.renderscript.Allocation,%20android.renderscript.Allocation,%20int))
        ///
        /// Required features: "android-renderscript-Allocation"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation")))]
        pub fn DTRMV<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg5: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "DTRMV", .descriptor == "(IIILandroid/renderscript/Allocation;Landroid/renderscript/Allocation;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "DTRMV\0", "(IIILandroid/renderscript/Allocation;Landroid/renderscript/Allocation;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [CTRMV](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#CTRMV(int,%20int,%20int,%20android.renderscript.Allocation,%20android.renderscript.Allocation,%20int))
        ///
        /// Required features: "android-renderscript-Allocation"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation")))]
        pub fn CTRMV<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg5: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "CTRMV", .descriptor == "(IIILandroid/renderscript/Allocation;Landroid/renderscript/Allocation;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "CTRMV\0", "(IIILandroid/renderscript/Allocation;Landroid/renderscript/Allocation;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ZTRMV](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#ZTRMV(int,%20int,%20int,%20android.renderscript.Allocation,%20android.renderscript.Allocation,%20int))
        ///
        /// Required features: "android-renderscript-Allocation"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation")))]
        pub fn ZTRMV<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg5: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "ZTRMV", .descriptor == "(IIILandroid/renderscript/Allocation;Landroid/renderscript/Allocation;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "ZTRMV\0", "(IIILandroid/renderscript/Allocation;Landroid/renderscript/Allocation;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [STBMV](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#STBMV(int,%20int,%20int,%20int,%20android.renderscript.Allocation,%20android.renderscript.Allocation,%20int))
        ///
        /// Required features: "android-renderscript-Allocation"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation")))]
        pub fn STBMV<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: i32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg6: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "STBMV", .descriptor == "(IIIILandroid/renderscript/Allocation;Landroid/renderscript/Allocation;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5.into()), __jni_bindgen::AsJValue::as_jvalue(&arg6)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "STBMV\0", "(IIIILandroid/renderscript/Allocation;Landroid/renderscript/Allocation;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [DTBMV](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#DTBMV(int,%20int,%20int,%20int,%20android.renderscript.Allocation,%20android.renderscript.Allocation,%20int))
        ///
        /// Required features: "android-renderscript-Allocation"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation")))]
        pub fn DTBMV<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: i32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg6: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "DTBMV", .descriptor == "(IIIILandroid/renderscript/Allocation;Landroid/renderscript/Allocation;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5.into()), __jni_bindgen::AsJValue::as_jvalue(&arg6)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "DTBMV\0", "(IIIILandroid/renderscript/Allocation;Landroid/renderscript/Allocation;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [CTBMV](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#CTBMV(int,%20int,%20int,%20int,%20android.renderscript.Allocation,%20android.renderscript.Allocation,%20int))
        ///
        /// Required features: "android-renderscript-Allocation"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation")))]
        pub fn CTBMV<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: i32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg6: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "CTBMV", .descriptor == "(IIIILandroid/renderscript/Allocation;Landroid/renderscript/Allocation;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5.into()), __jni_bindgen::AsJValue::as_jvalue(&arg6)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "CTBMV\0", "(IIIILandroid/renderscript/Allocation;Landroid/renderscript/Allocation;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ZTBMV](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#ZTBMV(int,%20int,%20int,%20int,%20android.renderscript.Allocation,%20android.renderscript.Allocation,%20int))
        ///
        /// Required features: "android-renderscript-Allocation"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation")))]
        pub fn ZTBMV<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: i32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg6: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "ZTBMV", .descriptor == "(IIIILandroid/renderscript/Allocation;Landroid/renderscript/Allocation;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5.into()), __jni_bindgen::AsJValue::as_jvalue(&arg6)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "ZTBMV\0", "(IIIILandroid/renderscript/Allocation;Landroid/renderscript/Allocation;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [STPMV](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#STPMV(int,%20int,%20int,%20android.renderscript.Allocation,%20android.renderscript.Allocation,%20int))
        ///
        /// Required features: "android-renderscript-Allocation"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation")))]
        pub fn STPMV<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg5: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "STPMV", .descriptor == "(IIILandroid/renderscript/Allocation;Landroid/renderscript/Allocation;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "STPMV\0", "(IIILandroid/renderscript/Allocation;Landroid/renderscript/Allocation;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [DTPMV](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#DTPMV(int,%20int,%20int,%20android.renderscript.Allocation,%20android.renderscript.Allocation,%20int))
        ///
        /// Required features: "android-renderscript-Allocation"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation")))]
        pub fn DTPMV<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg5: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "DTPMV", .descriptor == "(IIILandroid/renderscript/Allocation;Landroid/renderscript/Allocation;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "DTPMV\0", "(IIILandroid/renderscript/Allocation;Landroid/renderscript/Allocation;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [CTPMV](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#CTPMV(int,%20int,%20int,%20android.renderscript.Allocation,%20android.renderscript.Allocation,%20int))
        ///
        /// Required features: "android-renderscript-Allocation"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation")))]
        pub fn CTPMV<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg5: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "CTPMV", .descriptor == "(IIILandroid/renderscript/Allocation;Landroid/renderscript/Allocation;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "CTPMV\0", "(IIILandroid/renderscript/Allocation;Landroid/renderscript/Allocation;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ZTPMV](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#ZTPMV(int,%20int,%20int,%20android.renderscript.Allocation,%20android.renderscript.Allocation,%20int))
        ///
        /// Required features: "android-renderscript-Allocation"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation")))]
        pub fn ZTPMV<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg5: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "ZTPMV", .descriptor == "(IIILandroid/renderscript/Allocation;Landroid/renderscript/Allocation;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "ZTPMV\0", "(IIILandroid/renderscript/Allocation;Landroid/renderscript/Allocation;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [STRSV](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#STRSV(int,%20int,%20int,%20android.renderscript.Allocation,%20android.renderscript.Allocation,%20int))
        ///
        /// Required features: "android-renderscript-Allocation"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation")))]
        pub fn STRSV<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg5: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "STRSV", .descriptor == "(IIILandroid/renderscript/Allocation;Landroid/renderscript/Allocation;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "STRSV\0", "(IIILandroid/renderscript/Allocation;Landroid/renderscript/Allocation;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [DTRSV](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#DTRSV(int,%20int,%20int,%20android.renderscript.Allocation,%20android.renderscript.Allocation,%20int))
        ///
        /// Required features: "android-renderscript-Allocation"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation")))]
        pub fn DTRSV<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg5: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "DTRSV", .descriptor == "(IIILandroid/renderscript/Allocation;Landroid/renderscript/Allocation;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "DTRSV\0", "(IIILandroid/renderscript/Allocation;Landroid/renderscript/Allocation;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [CTRSV](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#CTRSV(int,%20int,%20int,%20android.renderscript.Allocation,%20android.renderscript.Allocation,%20int))
        ///
        /// Required features: "android-renderscript-Allocation"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation")))]
        pub fn CTRSV<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg5: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "CTRSV", .descriptor == "(IIILandroid/renderscript/Allocation;Landroid/renderscript/Allocation;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "CTRSV\0", "(IIILandroid/renderscript/Allocation;Landroid/renderscript/Allocation;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ZTRSV](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#ZTRSV(int,%20int,%20int,%20android.renderscript.Allocation,%20android.renderscript.Allocation,%20int))
        ///
        /// Required features: "android-renderscript-Allocation"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation")))]
        pub fn ZTRSV<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg5: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "ZTRSV", .descriptor == "(IIILandroid/renderscript/Allocation;Landroid/renderscript/Allocation;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "ZTRSV\0", "(IIILandroid/renderscript/Allocation;Landroid/renderscript/Allocation;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [STBSV](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#STBSV(int,%20int,%20int,%20int,%20android.renderscript.Allocation,%20android.renderscript.Allocation,%20int))
        ///
        /// Required features: "android-renderscript-Allocation"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation")))]
        pub fn STBSV<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: i32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg6: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "STBSV", .descriptor == "(IIIILandroid/renderscript/Allocation;Landroid/renderscript/Allocation;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5.into()), __jni_bindgen::AsJValue::as_jvalue(&arg6)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "STBSV\0", "(IIIILandroid/renderscript/Allocation;Landroid/renderscript/Allocation;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [DTBSV](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#DTBSV(int,%20int,%20int,%20int,%20android.renderscript.Allocation,%20android.renderscript.Allocation,%20int))
        ///
        /// Required features: "android-renderscript-Allocation"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation")))]
        pub fn DTBSV<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: i32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg6: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "DTBSV", .descriptor == "(IIIILandroid/renderscript/Allocation;Landroid/renderscript/Allocation;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5.into()), __jni_bindgen::AsJValue::as_jvalue(&arg6)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "DTBSV\0", "(IIIILandroid/renderscript/Allocation;Landroid/renderscript/Allocation;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [CTBSV](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#CTBSV(int,%20int,%20int,%20int,%20android.renderscript.Allocation,%20android.renderscript.Allocation,%20int))
        ///
        /// Required features: "android-renderscript-Allocation"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation")))]
        pub fn CTBSV<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: i32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg6: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "CTBSV", .descriptor == "(IIIILandroid/renderscript/Allocation;Landroid/renderscript/Allocation;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5.into()), __jni_bindgen::AsJValue::as_jvalue(&arg6)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "CTBSV\0", "(IIIILandroid/renderscript/Allocation;Landroid/renderscript/Allocation;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ZTBSV](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#ZTBSV(int,%20int,%20int,%20int,%20android.renderscript.Allocation,%20android.renderscript.Allocation,%20int))
        ///
        /// Required features: "android-renderscript-Allocation"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation")))]
        pub fn ZTBSV<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: i32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg6: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "ZTBSV", .descriptor == "(IIIILandroid/renderscript/Allocation;Landroid/renderscript/Allocation;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5.into()), __jni_bindgen::AsJValue::as_jvalue(&arg6)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "ZTBSV\0", "(IIIILandroid/renderscript/Allocation;Landroid/renderscript/Allocation;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [STPSV](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#STPSV(int,%20int,%20int,%20android.renderscript.Allocation,%20android.renderscript.Allocation,%20int))
        ///
        /// Required features: "android-renderscript-Allocation"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation")))]
        pub fn STPSV<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg5: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "STPSV", .descriptor == "(IIILandroid/renderscript/Allocation;Landroid/renderscript/Allocation;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "STPSV\0", "(IIILandroid/renderscript/Allocation;Landroid/renderscript/Allocation;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [DTPSV](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#DTPSV(int,%20int,%20int,%20android.renderscript.Allocation,%20android.renderscript.Allocation,%20int))
        ///
        /// Required features: "android-renderscript-Allocation"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation")))]
        pub fn DTPSV<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg5: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "DTPSV", .descriptor == "(IIILandroid/renderscript/Allocation;Landroid/renderscript/Allocation;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "DTPSV\0", "(IIILandroid/renderscript/Allocation;Landroid/renderscript/Allocation;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [CTPSV](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#CTPSV(int,%20int,%20int,%20android.renderscript.Allocation,%20android.renderscript.Allocation,%20int))
        ///
        /// Required features: "android-renderscript-Allocation"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation")))]
        pub fn CTPSV<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg5: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "CTPSV", .descriptor == "(IIILandroid/renderscript/Allocation;Landroid/renderscript/Allocation;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "CTPSV\0", "(IIILandroid/renderscript/Allocation;Landroid/renderscript/Allocation;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ZTPSV](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#ZTPSV(int,%20int,%20int,%20android.renderscript.Allocation,%20android.renderscript.Allocation,%20int))
        ///
        /// Required features: "android-renderscript-Allocation"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation")))]
        pub fn ZTPSV<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg5: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "ZTPSV", .descriptor == "(IIILandroid/renderscript/Allocation;Landroid/renderscript/Allocation;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "ZTPSV\0", "(IIILandroid/renderscript/Allocation;Landroid/renderscript/Allocation;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [SSYMV](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#SSYMV(int,%20float,%20android.renderscript.Allocation,%20android.renderscript.Allocation,%20int,%20float,%20android.renderscript.Allocation,%20int))
        ///
        /// Required features: "android-renderscript-Allocation"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation")))]
        pub fn SSYMV<'env>(&'env self, arg0: i32, arg1: f32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg4: i32, arg5: f32, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg7: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "SSYMV", .descriptor == "(IFLandroid/renderscript/Allocation;Landroid/renderscript/Allocation;IFLandroid/renderscript/Allocation;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6.into()), __jni_bindgen::AsJValue::as_jvalue(&arg7)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "SSYMV\0", "(IFLandroid/renderscript/Allocation;Landroid/renderscript/Allocation;IFLandroid/renderscript/Allocation;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [SSBMV](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#SSBMV(int,%20int,%20float,%20android.renderscript.Allocation,%20android.renderscript.Allocation,%20int,%20float,%20android.renderscript.Allocation,%20int))
        ///
        /// Required features: "android-renderscript-Allocation"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation")))]
        pub fn SSBMV<'env>(&'env self, arg0: i32, arg1: i32, arg2: f32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg5: i32, arg6: f32, arg7: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg8: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "SSBMV", .descriptor == "(IIFLandroid/renderscript/Allocation;Landroid/renderscript/Allocation;IFLandroid/renderscript/Allocation;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6), __jni_bindgen::AsJValue::as_jvalue(&arg7.into()), __jni_bindgen::AsJValue::as_jvalue(&arg8)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "SSBMV\0", "(IIFLandroid/renderscript/Allocation;Landroid/renderscript/Allocation;IFLandroid/renderscript/Allocation;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [SSPMV](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#SSPMV(int,%20float,%20android.renderscript.Allocation,%20android.renderscript.Allocation,%20int,%20float,%20android.renderscript.Allocation,%20int))
        ///
        /// Required features: "android-renderscript-Allocation"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation")))]
        pub fn SSPMV<'env>(&'env self, arg0: i32, arg1: f32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg4: i32, arg5: f32, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg7: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "SSPMV", .descriptor == "(IFLandroid/renderscript/Allocation;Landroid/renderscript/Allocation;IFLandroid/renderscript/Allocation;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6.into()), __jni_bindgen::AsJValue::as_jvalue(&arg7)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "SSPMV\0", "(IFLandroid/renderscript/Allocation;Landroid/renderscript/Allocation;IFLandroid/renderscript/Allocation;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [SGER](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#SGER(float,%20android.renderscript.Allocation,%20int,%20android.renderscript.Allocation,%20int,%20android.renderscript.Allocation))
        ///
        /// Required features: "android-renderscript-Allocation"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation")))]
        pub fn SGER<'env>(&'env self, arg0: f32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg4: i32, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "SGER", .descriptor == "(FLandroid/renderscript/Allocation;ILandroid/renderscript/Allocation;ILandroid/renderscript/Allocation;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "SGER\0", "(FLandroid/renderscript/Allocation;ILandroid/renderscript/Allocation;ILandroid/renderscript/Allocation;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [SSYR](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#SSYR(int,%20float,%20android.renderscript.Allocation,%20int,%20android.renderscript.Allocation))
        ///
        /// Required features: "android-renderscript-Allocation"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation")))]
        pub fn SSYR<'env>(&'env self, arg0: i32, arg1: f32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg3: i32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "SSYR", .descriptor == "(IFLandroid/renderscript/Allocation;ILandroid/renderscript/Allocation;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "SSYR\0", "(IFLandroid/renderscript/Allocation;ILandroid/renderscript/Allocation;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [SSPR](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#SSPR(int,%20float,%20android.renderscript.Allocation,%20int,%20android.renderscript.Allocation))
        ///
        /// Required features: "android-renderscript-Allocation"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation")))]
        pub fn SSPR<'env>(&'env self, arg0: i32, arg1: f32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg3: i32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "SSPR", .descriptor == "(IFLandroid/renderscript/Allocation;ILandroid/renderscript/Allocation;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "SSPR\0", "(IFLandroid/renderscript/Allocation;ILandroid/renderscript/Allocation;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [SSYR2](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#SSYR2(int,%20float,%20android.renderscript.Allocation,%20int,%20android.renderscript.Allocation,%20int,%20android.renderscript.Allocation))
        ///
        /// Required features: "android-renderscript-Allocation"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation")))]
        pub fn SSYR2<'env>(&'env self, arg0: i32, arg1: f32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg3: i32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg5: i32, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "SSYR2", .descriptor == "(IFLandroid/renderscript/Allocation;ILandroid/renderscript/Allocation;ILandroid/renderscript/Allocation;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "SSYR2\0", "(IFLandroid/renderscript/Allocation;ILandroid/renderscript/Allocation;ILandroid/renderscript/Allocation;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [SSPR2](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#SSPR2(int,%20float,%20android.renderscript.Allocation,%20int,%20android.renderscript.Allocation,%20int,%20android.renderscript.Allocation))
        ///
        /// Required features: "android-renderscript-Allocation"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation")))]
        pub fn SSPR2<'env>(&'env self, arg0: i32, arg1: f32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg3: i32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg5: i32, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "SSPR2", .descriptor == "(IFLandroid/renderscript/Allocation;ILandroid/renderscript/Allocation;ILandroid/renderscript/Allocation;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "SSPR2\0", "(IFLandroid/renderscript/Allocation;ILandroid/renderscript/Allocation;ILandroid/renderscript/Allocation;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [DSYMV](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#DSYMV(int,%20double,%20android.renderscript.Allocation,%20android.renderscript.Allocation,%20int,%20double,%20android.renderscript.Allocation,%20int))
        ///
        /// Required features: "android-renderscript-Allocation"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation")))]
        pub fn DSYMV<'env>(&'env self, arg0: i32, arg1: f64, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg4: i32, arg5: f64, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg7: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "DSYMV", .descriptor == "(IDLandroid/renderscript/Allocation;Landroid/renderscript/Allocation;IDLandroid/renderscript/Allocation;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6.into()), __jni_bindgen::AsJValue::as_jvalue(&arg7)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "DSYMV\0", "(IDLandroid/renderscript/Allocation;Landroid/renderscript/Allocation;IDLandroid/renderscript/Allocation;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [DSBMV](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#DSBMV(int,%20int,%20double,%20android.renderscript.Allocation,%20android.renderscript.Allocation,%20int,%20double,%20android.renderscript.Allocation,%20int))
        ///
        /// Required features: "android-renderscript-Allocation"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation")))]
        pub fn DSBMV<'env>(&'env self, arg0: i32, arg1: i32, arg2: f64, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg5: i32, arg6: f64, arg7: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg8: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "DSBMV", .descriptor == "(IIDLandroid/renderscript/Allocation;Landroid/renderscript/Allocation;IDLandroid/renderscript/Allocation;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6), __jni_bindgen::AsJValue::as_jvalue(&arg7.into()), __jni_bindgen::AsJValue::as_jvalue(&arg8)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "DSBMV\0", "(IIDLandroid/renderscript/Allocation;Landroid/renderscript/Allocation;IDLandroid/renderscript/Allocation;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [DSPMV](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#DSPMV(int,%20double,%20android.renderscript.Allocation,%20android.renderscript.Allocation,%20int,%20double,%20android.renderscript.Allocation,%20int))
        ///
        /// Required features: "android-renderscript-Allocation"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation")))]
        pub fn DSPMV<'env>(&'env self, arg0: i32, arg1: f64, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg4: i32, arg5: f64, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg7: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "DSPMV", .descriptor == "(IDLandroid/renderscript/Allocation;Landroid/renderscript/Allocation;IDLandroid/renderscript/Allocation;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6.into()), __jni_bindgen::AsJValue::as_jvalue(&arg7)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "DSPMV\0", "(IDLandroid/renderscript/Allocation;Landroid/renderscript/Allocation;IDLandroid/renderscript/Allocation;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [DGER](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#DGER(double,%20android.renderscript.Allocation,%20int,%20android.renderscript.Allocation,%20int,%20android.renderscript.Allocation))
        ///
        /// Required features: "android-renderscript-Allocation"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation")))]
        pub fn DGER<'env>(&'env self, arg0: f64, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg4: i32, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "DGER", .descriptor == "(DLandroid/renderscript/Allocation;ILandroid/renderscript/Allocation;ILandroid/renderscript/Allocation;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "DGER\0", "(DLandroid/renderscript/Allocation;ILandroid/renderscript/Allocation;ILandroid/renderscript/Allocation;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [DSYR](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#DSYR(int,%20double,%20android.renderscript.Allocation,%20int,%20android.renderscript.Allocation))
        ///
        /// Required features: "android-renderscript-Allocation"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation")))]
        pub fn DSYR<'env>(&'env self, arg0: i32, arg1: f64, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg3: i32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "DSYR", .descriptor == "(IDLandroid/renderscript/Allocation;ILandroid/renderscript/Allocation;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "DSYR\0", "(IDLandroid/renderscript/Allocation;ILandroid/renderscript/Allocation;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [DSPR](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#DSPR(int,%20double,%20android.renderscript.Allocation,%20int,%20android.renderscript.Allocation))
        ///
        /// Required features: "android-renderscript-Allocation"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation")))]
        pub fn DSPR<'env>(&'env self, arg0: i32, arg1: f64, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg3: i32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "DSPR", .descriptor == "(IDLandroid/renderscript/Allocation;ILandroid/renderscript/Allocation;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "DSPR\0", "(IDLandroid/renderscript/Allocation;ILandroid/renderscript/Allocation;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [DSYR2](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#DSYR2(int,%20double,%20android.renderscript.Allocation,%20int,%20android.renderscript.Allocation,%20int,%20android.renderscript.Allocation))
        ///
        /// Required features: "android-renderscript-Allocation"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation")))]
        pub fn DSYR2<'env>(&'env self, arg0: i32, arg1: f64, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg3: i32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg5: i32, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "DSYR2", .descriptor == "(IDLandroid/renderscript/Allocation;ILandroid/renderscript/Allocation;ILandroid/renderscript/Allocation;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "DSYR2\0", "(IDLandroid/renderscript/Allocation;ILandroid/renderscript/Allocation;ILandroid/renderscript/Allocation;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [DSPR2](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#DSPR2(int,%20double,%20android.renderscript.Allocation,%20int,%20android.renderscript.Allocation,%20int,%20android.renderscript.Allocation))
        ///
        /// Required features: "android-renderscript-Allocation"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation")))]
        pub fn DSPR2<'env>(&'env self, arg0: i32, arg1: f64, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg3: i32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg5: i32, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "DSPR2", .descriptor == "(IDLandroid/renderscript/Allocation;ILandroid/renderscript/Allocation;ILandroid/renderscript/Allocation;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "DSPR2\0", "(IDLandroid/renderscript/Allocation;ILandroid/renderscript/Allocation;ILandroid/renderscript/Allocation;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [CHEMV](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#CHEMV(int,%20android.renderscript.Float2,%20android.renderscript.Allocation,%20android.renderscript.Allocation,%20int,%20android.renderscript.Float2,%20android.renderscript.Allocation,%20int))
        ///
        /// Required features: "android-renderscript-Allocation", "android-renderscript-Float2"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation", feature = "android-renderscript-Float2")))]
        pub fn CHEMV<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Float2>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg4: i32, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Float2>>, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg7: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "CHEMV", .descriptor == "(ILandroid/renderscript/Float2;Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;ILandroid/renderscript/Float2;Landroid/renderscript/Allocation;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5.into()), __jni_bindgen::AsJValue::as_jvalue(&arg6.into()), __jni_bindgen::AsJValue::as_jvalue(&arg7)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "CHEMV\0", "(ILandroid/renderscript/Float2;Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;ILandroid/renderscript/Float2;Landroid/renderscript/Allocation;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [CHBMV](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#CHBMV(int,%20int,%20android.renderscript.Float2,%20android.renderscript.Allocation,%20android.renderscript.Allocation,%20int,%20android.renderscript.Float2,%20android.renderscript.Allocation,%20int))
        ///
        /// Required features: "android-renderscript-Allocation", "android-renderscript-Float2"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation", feature = "android-renderscript-Float2")))]
        pub fn CHBMV<'env>(&'env self, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Float2>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg5: i32, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Float2>>, arg7: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg8: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "CHBMV", .descriptor == "(IILandroid/renderscript/Float2;Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;ILandroid/renderscript/Float2;Landroid/renderscript/Allocation;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6.into()), __jni_bindgen::AsJValue::as_jvalue(&arg7.into()), __jni_bindgen::AsJValue::as_jvalue(&arg8)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "CHBMV\0", "(IILandroid/renderscript/Float2;Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;ILandroid/renderscript/Float2;Landroid/renderscript/Allocation;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [CHPMV](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#CHPMV(int,%20android.renderscript.Float2,%20android.renderscript.Allocation,%20android.renderscript.Allocation,%20int,%20android.renderscript.Float2,%20android.renderscript.Allocation,%20int))
        ///
        /// Required features: "android-renderscript-Allocation", "android-renderscript-Float2"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation", feature = "android-renderscript-Float2")))]
        pub fn CHPMV<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Float2>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg4: i32, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Float2>>, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg7: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "CHPMV", .descriptor == "(ILandroid/renderscript/Float2;Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;ILandroid/renderscript/Float2;Landroid/renderscript/Allocation;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5.into()), __jni_bindgen::AsJValue::as_jvalue(&arg6.into()), __jni_bindgen::AsJValue::as_jvalue(&arg7)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "CHPMV\0", "(ILandroid/renderscript/Float2;Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;ILandroid/renderscript/Float2;Landroid/renderscript/Allocation;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [CGERU](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#CGERU(android.renderscript.Float2,%20android.renderscript.Allocation,%20int,%20android.renderscript.Allocation,%20int,%20android.renderscript.Allocation))
        ///
        /// Required features: "android-renderscript-Allocation", "android-renderscript-Float2"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation", feature = "android-renderscript-Float2")))]
        pub fn CGERU<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Float2>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg4: i32, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "CGERU", .descriptor == "(Landroid/renderscript/Float2;Landroid/renderscript/Allocation;ILandroid/renderscript/Allocation;ILandroid/renderscript/Allocation;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "CGERU\0", "(Landroid/renderscript/Float2;Landroid/renderscript/Allocation;ILandroid/renderscript/Allocation;ILandroid/renderscript/Allocation;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [CGERC](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#CGERC(android.renderscript.Float2,%20android.renderscript.Allocation,%20int,%20android.renderscript.Allocation,%20int,%20android.renderscript.Allocation))
        ///
        /// Required features: "android-renderscript-Allocation", "android-renderscript-Float2"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation", feature = "android-renderscript-Float2")))]
        pub fn CGERC<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Float2>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg4: i32, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "CGERC", .descriptor == "(Landroid/renderscript/Float2;Landroid/renderscript/Allocation;ILandroid/renderscript/Allocation;ILandroid/renderscript/Allocation;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "CGERC\0", "(Landroid/renderscript/Float2;Landroid/renderscript/Allocation;ILandroid/renderscript/Allocation;ILandroid/renderscript/Allocation;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [CHER](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#CHER(int,%20float,%20android.renderscript.Allocation,%20int,%20android.renderscript.Allocation))
        ///
        /// Required features: "android-renderscript-Allocation"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation")))]
        pub fn CHER<'env>(&'env self, arg0: i32, arg1: f32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg3: i32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "CHER", .descriptor == "(IFLandroid/renderscript/Allocation;ILandroid/renderscript/Allocation;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "CHER\0", "(IFLandroid/renderscript/Allocation;ILandroid/renderscript/Allocation;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [CHPR](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#CHPR(int,%20float,%20android.renderscript.Allocation,%20int,%20android.renderscript.Allocation))
        ///
        /// Required features: "android-renderscript-Allocation"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation")))]
        pub fn CHPR<'env>(&'env self, arg0: i32, arg1: f32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg3: i32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "CHPR", .descriptor == "(IFLandroid/renderscript/Allocation;ILandroid/renderscript/Allocation;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "CHPR\0", "(IFLandroid/renderscript/Allocation;ILandroid/renderscript/Allocation;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [CHER2](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#CHER2(int,%20android.renderscript.Float2,%20android.renderscript.Allocation,%20int,%20android.renderscript.Allocation,%20int,%20android.renderscript.Allocation))
        ///
        /// Required features: "android-renderscript-Allocation", "android-renderscript-Float2"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation", feature = "android-renderscript-Float2")))]
        pub fn CHER2<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Float2>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg3: i32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg5: i32, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "CHER2", .descriptor == "(ILandroid/renderscript/Float2;Landroid/renderscript/Allocation;ILandroid/renderscript/Allocation;ILandroid/renderscript/Allocation;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "CHER2\0", "(ILandroid/renderscript/Float2;Landroid/renderscript/Allocation;ILandroid/renderscript/Allocation;ILandroid/renderscript/Allocation;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [CHPR2](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#CHPR2(int,%20android.renderscript.Float2,%20android.renderscript.Allocation,%20int,%20android.renderscript.Allocation,%20int,%20android.renderscript.Allocation))
        ///
        /// Required features: "android-renderscript-Allocation", "android-renderscript-Float2"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation", feature = "android-renderscript-Float2")))]
        pub fn CHPR2<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Float2>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg3: i32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg5: i32, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "CHPR2", .descriptor == "(ILandroid/renderscript/Float2;Landroid/renderscript/Allocation;ILandroid/renderscript/Allocation;ILandroid/renderscript/Allocation;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "CHPR2\0", "(ILandroid/renderscript/Float2;Landroid/renderscript/Allocation;ILandroid/renderscript/Allocation;ILandroid/renderscript/Allocation;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ZHEMV](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#ZHEMV(int,%20android.renderscript.Double2,%20android.renderscript.Allocation,%20android.renderscript.Allocation,%20int,%20android.renderscript.Double2,%20android.renderscript.Allocation,%20int))
        ///
        /// Required features: "android-renderscript-Allocation", "android-renderscript-Double2"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation", feature = "android-renderscript-Double2")))]
        pub fn ZHEMV<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Double2>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg4: i32, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Double2>>, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg7: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "ZHEMV", .descriptor == "(ILandroid/renderscript/Double2;Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;ILandroid/renderscript/Double2;Landroid/renderscript/Allocation;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5.into()), __jni_bindgen::AsJValue::as_jvalue(&arg6.into()), __jni_bindgen::AsJValue::as_jvalue(&arg7)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "ZHEMV\0", "(ILandroid/renderscript/Double2;Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;ILandroid/renderscript/Double2;Landroid/renderscript/Allocation;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ZHBMV](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#ZHBMV(int,%20int,%20android.renderscript.Double2,%20android.renderscript.Allocation,%20android.renderscript.Allocation,%20int,%20android.renderscript.Double2,%20android.renderscript.Allocation,%20int))
        ///
        /// Required features: "android-renderscript-Allocation", "android-renderscript-Double2"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation", feature = "android-renderscript-Double2")))]
        pub fn ZHBMV<'env>(&'env self, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Double2>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg5: i32, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Double2>>, arg7: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg8: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "ZHBMV", .descriptor == "(IILandroid/renderscript/Double2;Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;ILandroid/renderscript/Double2;Landroid/renderscript/Allocation;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6.into()), __jni_bindgen::AsJValue::as_jvalue(&arg7.into()), __jni_bindgen::AsJValue::as_jvalue(&arg8)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "ZHBMV\0", "(IILandroid/renderscript/Double2;Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;ILandroid/renderscript/Double2;Landroid/renderscript/Allocation;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ZHPMV](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#ZHPMV(int,%20android.renderscript.Double2,%20android.renderscript.Allocation,%20android.renderscript.Allocation,%20int,%20android.renderscript.Double2,%20android.renderscript.Allocation,%20int))
        ///
        /// Required features: "android-renderscript-Allocation", "android-renderscript-Double2"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation", feature = "android-renderscript-Double2")))]
        pub fn ZHPMV<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Double2>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg4: i32, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Double2>>, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg7: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "ZHPMV", .descriptor == "(ILandroid/renderscript/Double2;Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;ILandroid/renderscript/Double2;Landroid/renderscript/Allocation;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5.into()), __jni_bindgen::AsJValue::as_jvalue(&arg6.into()), __jni_bindgen::AsJValue::as_jvalue(&arg7)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "ZHPMV\0", "(ILandroid/renderscript/Double2;Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;ILandroid/renderscript/Double2;Landroid/renderscript/Allocation;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ZGERU](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#ZGERU(android.renderscript.Double2,%20android.renderscript.Allocation,%20int,%20android.renderscript.Allocation,%20int,%20android.renderscript.Allocation))
        ///
        /// Required features: "android-renderscript-Allocation", "android-renderscript-Double2"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation", feature = "android-renderscript-Double2")))]
        pub fn ZGERU<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Double2>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg4: i32, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "ZGERU", .descriptor == "(Landroid/renderscript/Double2;Landroid/renderscript/Allocation;ILandroid/renderscript/Allocation;ILandroid/renderscript/Allocation;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "ZGERU\0", "(Landroid/renderscript/Double2;Landroid/renderscript/Allocation;ILandroid/renderscript/Allocation;ILandroid/renderscript/Allocation;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ZGERC](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#ZGERC(android.renderscript.Double2,%20android.renderscript.Allocation,%20int,%20android.renderscript.Allocation,%20int,%20android.renderscript.Allocation))
        ///
        /// Required features: "android-renderscript-Allocation", "android-renderscript-Double2"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation", feature = "android-renderscript-Double2")))]
        pub fn ZGERC<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Double2>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg4: i32, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "ZGERC", .descriptor == "(Landroid/renderscript/Double2;Landroid/renderscript/Allocation;ILandroid/renderscript/Allocation;ILandroid/renderscript/Allocation;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "ZGERC\0", "(Landroid/renderscript/Double2;Landroid/renderscript/Allocation;ILandroid/renderscript/Allocation;ILandroid/renderscript/Allocation;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ZHER](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#ZHER(int,%20double,%20android.renderscript.Allocation,%20int,%20android.renderscript.Allocation))
        ///
        /// Required features: "android-renderscript-Allocation"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation")))]
        pub fn ZHER<'env>(&'env self, arg0: i32, arg1: f64, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg3: i32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "ZHER", .descriptor == "(IDLandroid/renderscript/Allocation;ILandroid/renderscript/Allocation;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "ZHER\0", "(IDLandroid/renderscript/Allocation;ILandroid/renderscript/Allocation;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ZHPR](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#ZHPR(int,%20double,%20android.renderscript.Allocation,%20int,%20android.renderscript.Allocation))
        ///
        /// Required features: "android-renderscript-Allocation"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation")))]
        pub fn ZHPR<'env>(&'env self, arg0: i32, arg1: f64, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg3: i32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "ZHPR", .descriptor == "(IDLandroid/renderscript/Allocation;ILandroid/renderscript/Allocation;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "ZHPR\0", "(IDLandroid/renderscript/Allocation;ILandroid/renderscript/Allocation;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ZHER2](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#ZHER2(int,%20android.renderscript.Double2,%20android.renderscript.Allocation,%20int,%20android.renderscript.Allocation,%20int,%20android.renderscript.Allocation))
        ///
        /// Required features: "android-renderscript-Allocation", "android-renderscript-Double2"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation", feature = "android-renderscript-Double2")))]
        pub fn ZHER2<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Double2>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg3: i32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg5: i32, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "ZHER2", .descriptor == "(ILandroid/renderscript/Double2;Landroid/renderscript/Allocation;ILandroid/renderscript/Allocation;ILandroid/renderscript/Allocation;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "ZHER2\0", "(ILandroid/renderscript/Double2;Landroid/renderscript/Allocation;ILandroid/renderscript/Allocation;ILandroid/renderscript/Allocation;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ZHPR2](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#ZHPR2(int,%20android.renderscript.Double2,%20android.renderscript.Allocation,%20int,%20android.renderscript.Allocation,%20int,%20android.renderscript.Allocation))
        ///
        /// Required features: "android-renderscript-Allocation", "android-renderscript-Double2"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation", feature = "android-renderscript-Double2")))]
        pub fn ZHPR2<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Double2>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg3: i32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg5: i32, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "ZHPR2", .descriptor == "(ILandroid/renderscript/Double2;Landroid/renderscript/Allocation;ILandroid/renderscript/Allocation;ILandroid/renderscript/Allocation;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "ZHPR2\0", "(ILandroid/renderscript/Double2;Landroid/renderscript/Allocation;ILandroid/renderscript/Allocation;ILandroid/renderscript/Allocation;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [SGEMM](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#SGEMM(int,%20int,%20float,%20android.renderscript.Allocation,%20android.renderscript.Allocation,%20float,%20android.renderscript.Allocation))
        ///
        /// Required features: "android-renderscript-Allocation"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation")))]
        pub fn SGEMM<'env>(&'env self, arg0: i32, arg1: i32, arg2: f32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg5: f32, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "SGEMM", .descriptor == "(IIFLandroid/renderscript/Allocation;Landroid/renderscript/Allocation;FLandroid/renderscript/Allocation;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "SGEMM\0", "(IIFLandroid/renderscript/Allocation;Landroid/renderscript/Allocation;FLandroid/renderscript/Allocation;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [DGEMM](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#DGEMM(int,%20int,%20double,%20android.renderscript.Allocation,%20android.renderscript.Allocation,%20double,%20android.renderscript.Allocation))
        ///
        /// Required features: "android-renderscript-Allocation"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation")))]
        pub fn DGEMM<'env>(&'env self, arg0: i32, arg1: i32, arg2: f64, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg5: f64, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "DGEMM", .descriptor == "(IIDLandroid/renderscript/Allocation;Landroid/renderscript/Allocation;DLandroid/renderscript/Allocation;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "DGEMM\0", "(IIDLandroid/renderscript/Allocation;Landroid/renderscript/Allocation;DLandroid/renderscript/Allocation;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [CGEMM](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#CGEMM(int,%20int,%20android.renderscript.Float2,%20android.renderscript.Allocation,%20android.renderscript.Allocation,%20android.renderscript.Float2,%20android.renderscript.Allocation))
        ///
        /// Required features: "android-renderscript-Allocation", "android-renderscript-Float2"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation", feature = "android-renderscript-Float2")))]
        pub fn CGEMM<'env>(&'env self, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Float2>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Float2>>, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "CGEMM", .descriptor == "(IILandroid/renderscript/Float2;Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;Landroid/renderscript/Float2;Landroid/renderscript/Allocation;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5.into()), __jni_bindgen::AsJValue::as_jvalue(&arg6.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "CGEMM\0", "(IILandroid/renderscript/Float2;Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;Landroid/renderscript/Float2;Landroid/renderscript/Allocation;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ZGEMM](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#ZGEMM(int,%20int,%20android.renderscript.Double2,%20android.renderscript.Allocation,%20android.renderscript.Allocation,%20android.renderscript.Double2,%20android.renderscript.Allocation))
        ///
        /// Required features: "android-renderscript-Allocation", "android-renderscript-Double2"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation", feature = "android-renderscript-Double2")))]
        pub fn ZGEMM<'env>(&'env self, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Double2>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Double2>>, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "ZGEMM", .descriptor == "(IILandroid/renderscript/Double2;Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;Landroid/renderscript/Double2;Landroid/renderscript/Allocation;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5.into()), __jni_bindgen::AsJValue::as_jvalue(&arg6.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "ZGEMM\0", "(IILandroid/renderscript/Double2;Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;Landroid/renderscript/Double2;Landroid/renderscript/Allocation;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [SSYMM](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#SSYMM(int,%20int,%20float,%20android.renderscript.Allocation,%20android.renderscript.Allocation,%20float,%20android.renderscript.Allocation))
        ///
        /// Required features: "android-renderscript-Allocation"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation")))]
        pub fn SSYMM<'env>(&'env self, arg0: i32, arg1: i32, arg2: f32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg5: f32, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "SSYMM", .descriptor == "(IIFLandroid/renderscript/Allocation;Landroid/renderscript/Allocation;FLandroid/renderscript/Allocation;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "SSYMM\0", "(IIFLandroid/renderscript/Allocation;Landroid/renderscript/Allocation;FLandroid/renderscript/Allocation;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [DSYMM](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#DSYMM(int,%20int,%20double,%20android.renderscript.Allocation,%20android.renderscript.Allocation,%20double,%20android.renderscript.Allocation))
        ///
        /// Required features: "android-renderscript-Allocation"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation")))]
        pub fn DSYMM<'env>(&'env self, arg0: i32, arg1: i32, arg2: f64, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg5: f64, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "DSYMM", .descriptor == "(IIDLandroid/renderscript/Allocation;Landroid/renderscript/Allocation;DLandroid/renderscript/Allocation;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "DSYMM\0", "(IIDLandroid/renderscript/Allocation;Landroid/renderscript/Allocation;DLandroid/renderscript/Allocation;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [CSYMM](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#CSYMM(int,%20int,%20android.renderscript.Float2,%20android.renderscript.Allocation,%20android.renderscript.Allocation,%20android.renderscript.Float2,%20android.renderscript.Allocation))
        ///
        /// Required features: "android-renderscript-Allocation", "android-renderscript-Float2"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation", feature = "android-renderscript-Float2")))]
        pub fn CSYMM<'env>(&'env self, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Float2>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Float2>>, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "CSYMM", .descriptor == "(IILandroid/renderscript/Float2;Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;Landroid/renderscript/Float2;Landroid/renderscript/Allocation;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5.into()), __jni_bindgen::AsJValue::as_jvalue(&arg6.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "CSYMM\0", "(IILandroid/renderscript/Float2;Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;Landroid/renderscript/Float2;Landroid/renderscript/Allocation;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ZSYMM](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#ZSYMM(int,%20int,%20android.renderscript.Double2,%20android.renderscript.Allocation,%20android.renderscript.Allocation,%20android.renderscript.Double2,%20android.renderscript.Allocation))
        ///
        /// Required features: "android-renderscript-Allocation", "android-renderscript-Double2"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation", feature = "android-renderscript-Double2")))]
        pub fn ZSYMM<'env>(&'env self, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Double2>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Double2>>, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "ZSYMM", .descriptor == "(IILandroid/renderscript/Double2;Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;Landroid/renderscript/Double2;Landroid/renderscript/Allocation;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5.into()), __jni_bindgen::AsJValue::as_jvalue(&arg6.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "ZSYMM\0", "(IILandroid/renderscript/Double2;Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;Landroid/renderscript/Double2;Landroid/renderscript/Allocation;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [SSYRK](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#SSYRK(int,%20int,%20float,%20android.renderscript.Allocation,%20float,%20android.renderscript.Allocation))
        ///
        /// Required features: "android-renderscript-Allocation"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation")))]
        pub fn SSYRK<'env>(&'env self, arg0: i32, arg1: i32, arg2: f32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg4: f32, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "SSYRK", .descriptor == "(IIFLandroid/renderscript/Allocation;FLandroid/renderscript/Allocation;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "SSYRK\0", "(IIFLandroid/renderscript/Allocation;FLandroid/renderscript/Allocation;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [DSYRK](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#DSYRK(int,%20int,%20double,%20android.renderscript.Allocation,%20double,%20android.renderscript.Allocation))
        ///
        /// Required features: "android-renderscript-Allocation"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation")))]
        pub fn DSYRK<'env>(&'env self, arg0: i32, arg1: i32, arg2: f64, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg4: f64, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "DSYRK", .descriptor == "(IIDLandroid/renderscript/Allocation;DLandroid/renderscript/Allocation;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "DSYRK\0", "(IIDLandroid/renderscript/Allocation;DLandroid/renderscript/Allocation;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [CSYRK](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#CSYRK(int,%20int,%20android.renderscript.Float2,%20android.renderscript.Allocation,%20android.renderscript.Float2,%20android.renderscript.Allocation))
        ///
        /// Required features: "android-renderscript-Allocation", "android-renderscript-Float2"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation", feature = "android-renderscript-Float2")))]
        pub fn CSYRK<'env>(&'env self, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Float2>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Float2>>, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "CSYRK", .descriptor == "(IILandroid/renderscript/Float2;Landroid/renderscript/Allocation;Landroid/renderscript/Float2;Landroid/renderscript/Allocation;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "CSYRK\0", "(IILandroid/renderscript/Float2;Landroid/renderscript/Allocation;Landroid/renderscript/Float2;Landroid/renderscript/Allocation;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ZSYRK](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#ZSYRK(int,%20int,%20android.renderscript.Double2,%20android.renderscript.Allocation,%20android.renderscript.Double2,%20android.renderscript.Allocation))
        ///
        /// Required features: "android-renderscript-Allocation", "android-renderscript-Double2"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation", feature = "android-renderscript-Double2")))]
        pub fn ZSYRK<'env>(&'env self, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Double2>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Double2>>, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "ZSYRK", .descriptor == "(IILandroid/renderscript/Double2;Landroid/renderscript/Allocation;Landroid/renderscript/Double2;Landroid/renderscript/Allocation;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "ZSYRK\0", "(IILandroid/renderscript/Double2;Landroid/renderscript/Allocation;Landroid/renderscript/Double2;Landroid/renderscript/Allocation;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [SSYR2K](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#SSYR2K(int,%20int,%20float,%20android.renderscript.Allocation,%20android.renderscript.Allocation,%20float,%20android.renderscript.Allocation))
        ///
        /// Required features: "android-renderscript-Allocation"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation")))]
        pub fn SSYR2K<'env>(&'env self, arg0: i32, arg1: i32, arg2: f32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg5: f32, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "SSYR2K", .descriptor == "(IIFLandroid/renderscript/Allocation;Landroid/renderscript/Allocation;FLandroid/renderscript/Allocation;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "SSYR2K\0", "(IIFLandroid/renderscript/Allocation;Landroid/renderscript/Allocation;FLandroid/renderscript/Allocation;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [DSYR2K](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#DSYR2K(int,%20int,%20double,%20android.renderscript.Allocation,%20android.renderscript.Allocation,%20double,%20android.renderscript.Allocation))
        ///
        /// Required features: "android-renderscript-Allocation"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation")))]
        pub fn DSYR2K<'env>(&'env self, arg0: i32, arg1: i32, arg2: f64, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg5: f64, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "DSYR2K", .descriptor == "(IIDLandroid/renderscript/Allocation;Landroid/renderscript/Allocation;DLandroid/renderscript/Allocation;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "DSYR2K\0", "(IIDLandroid/renderscript/Allocation;Landroid/renderscript/Allocation;DLandroid/renderscript/Allocation;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [CSYR2K](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#CSYR2K(int,%20int,%20android.renderscript.Float2,%20android.renderscript.Allocation,%20android.renderscript.Allocation,%20android.renderscript.Float2,%20android.renderscript.Allocation))
        ///
        /// Required features: "android-renderscript-Allocation", "android-renderscript-Float2"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation", feature = "android-renderscript-Float2")))]
        pub fn CSYR2K<'env>(&'env self, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Float2>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Float2>>, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "CSYR2K", .descriptor == "(IILandroid/renderscript/Float2;Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;Landroid/renderscript/Float2;Landroid/renderscript/Allocation;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5.into()), __jni_bindgen::AsJValue::as_jvalue(&arg6.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "CSYR2K\0", "(IILandroid/renderscript/Float2;Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;Landroid/renderscript/Float2;Landroid/renderscript/Allocation;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ZSYR2K](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#ZSYR2K(int,%20int,%20android.renderscript.Double2,%20android.renderscript.Allocation,%20android.renderscript.Allocation,%20android.renderscript.Double2,%20android.renderscript.Allocation))
        ///
        /// Required features: "android-renderscript-Allocation", "android-renderscript-Double2"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation", feature = "android-renderscript-Double2")))]
        pub fn ZSYR2K<'env>(&'env self, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Double2>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Double2>>, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "ZSYR2K", .descriptor == "(IILandroid/renderscript/Double2;Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;Landroid/renderscript/Double2;Landroid/renderscript/Allocation;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5.into()), __jni_bindgen::AsJValue::as_jvalue(&arg6.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "ZSYR2K\0", "(IILandroid/renderscript/Double2;Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;Landroid/renderscript/Double2;Landroid/renderscript/Allocation;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [STRMM](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#STRMM(int,%20int,%20int,%20int,%20float,%20android.renderscript.Allocation,%20android.renderscript.Allocation))
        ///
        /// Required features: "android-renderscript-Allocation"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation")))]
        pub fn STRMM<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: i32, arg4: f32, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "STRMM", .descriptor == "(IIIIFLandroid/renderscript/Allocation;Landroid/renderscript/Allocation;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5.into()), __jni_bindgen::AsJValue::as_jvalue(&arg6.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "STRMM\0", "(IIIIFLandroid/renderscript/Allocation;Landroid/renderscript/Allocation;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [DTRMM](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#DTRMM(int,%20int,%20int,%20int,%20double,%20android.renderscript.Allocation,%20android.renderscript.Allocation))
        ///
        /// Required features: "android-renderscript-Allocation"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation")))]
        pub fn DTRMM<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: i32, arg4: f64, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "DTRMM", .descriptor == "(IIIIDLandroid/renderscript/Allocation;Landroid/renderscript/Allocation;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5.into()), __jni_bindgen::AsJValue::as_jvalue(&arg6.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "DTRMM\0", "(IIIIDLandroid/renderscript/Allocation;Landroid/renderscript/Allocation;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [CTRMM](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#CTRMM(int,%20int,%20int,%20int,%20android.renderscript.Float2,%20android.renderscript.Allocation,%20android.renderscript.Allocation))
        ///
        /// Required features: "android-renderscript-Allocation", "android-renderscript-Float2"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation", feature = "android-renderscript-Float2")))]
        pub fn CTRMM<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: i32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Float2>>, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "CTRMM", .descriptor == "(IIIILandroid/renderscript/Float2;Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5.into()), __jni_bindgen::AsJValue::as_jvalue(&arg6.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "CTRMM\0", "(IIIILandroid/renderscript/Float2;Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ZTRMM](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#ZTRMM(int,%20int,%20int,%20int,%20android.renderscript.Double2,%20android.renderscript.Allocation,%20android.renderscript.Allocation))
        ///
        /// Required features: "android-renderscript-Allocation", "android-renderscript-Double2"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation", feature = "android-renderscript-Double2")))]
        pub fn ZTRMM<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: i32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Double2>>, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "ZTRMM", .descriptor == "(IIIILandroid/renderscript/Double2;Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5.into()), __jni_bindgen::AsJValue::as_jvalue(&arg6.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "ZTRMM\0", "(IIIILandroid/renderscript/Double2;Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [STRSM](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#STRSM(int,%20int,%20int,%20int,%20float,%20android.renderscript.Allocation,%20android.renderscript.Allocation))
        ///
        /// Required features: "android-renderscript-Allocation"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation")))]
        pub fn STRSM<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: i32, arg4: f32, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "STRSM", .descriptor == "(IIIIFLandroid/renderscript/Allocation;Landroid/renderscript/Allocation;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5.into()), __jni_bindgen::AsJValue::as_jvalue(&arg6.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "STRSM\0", "(IIIIFLandroid/renderscript/Allocation;Landroid/renderscript/Allocation;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [DTRSM](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#DTRSM(int,%20int,%20int,%20int,%20double,%20android.renderscript.Allocation,%20android.renderscript.Allocation))
        ///
        /// Required features: "android-renderscript-Allocation"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation")))]
        pub fn DTRSM<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: i32, arg4: f64, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "DTRSM", .descriptor == "(IIIIDLandroid/renderscript/Allocation;Landroid/renderscript/Allocation;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5.into()), __jni_bindgen::AsJValue::as_jvalue(&arg6.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "DTRSM\0", "(IIIIDLandroid/renderscript/Allocation;Landroid/renderscript/Allocation;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [CTRSM](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#CTRSM(int,%20int,%20int,%20int,%20android.renderscript.Float2,%20android.renderscript.Allocation,%20android.renderscript.Allocation))
        ///
        /// Required features: "android-renderscript-Allocation", "android-renderscript-Float2"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation", feature = "android-renderscript-Float2")))]
        pub fn CTRSM<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: i32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Float2>>, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "CTRSM", .descriptor == "(IIIILandroid/renderscript/Float2;Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5.into()), __jni_bindgen::AsJValue::as_jvalue(&arg6.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "CTRSM\0", "(IIIILandroid/renderscript/Float2;Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ZTRSM](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#ZTRSM(int,%20int,%20int,%20int,%20android.renderscript.Double2,%20android.renderscript.Allocation,%20android.renderscript.Allocation))
        ///
        /// Required features: "android-renderscript-Allocation", "android-renderscript-Double2"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation", feature = "android-renderscript-Double2")))]
        pub fn ZTRSM<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: i32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Double2>>, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "ZTRSM", .descriptor == "(IIIILandroid/renderscript/Double2;Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5.into()), __jni_bindgen::AsJValue::as_jvalue(&arg6.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "ZTRSM\0", "(IIIILandroid/renderscript/Double2;Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [CHEMM](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#CHEMM(int,%20int,%20android.renderscript.Float2,%20android.renderscript.Allocation,%20android.renderscript.Allocation,%20android.renderscript.Float2,%20android.renderscript.Allocation))
        ///
        /// Required features: "android-renderscript-Allocation", "android-renderscript-Float2"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation", feature = "android-renderscript-Float2")))]
        pub fn CHEMM<'env>(&'env self, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Float2>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Float2>>, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "CHEMM", .descriptor == "(IILandroid/renderscript/Float2;Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;Landroid/renderscript/Float2;Landroid/renderscript/Allocation;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5.into()), __jni_bindgen::AsJValue::as_jvalue(&arg6.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "CHEMM\0", "(IILandroid/renderscript/Float2;Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;Landroid/renderscript/Float2;Landroid/renderscript/Allocation;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ZHEMM](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#ZHEMM(int,%20int,%20android.renderscript.Double2,%20android.renderscript.Allocation,%20android.renderscript.Allocation,%20android.renderscript.Double2,%20android.renderscript.Allocation))
        ///
        /// Required features: "android-renderscript-Allocation", "android-renderscript-Double2"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation", feature = "android-renderscript-Double2")))]
        pub fn ZHEMM<'env>(&'env self, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Double2>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Double2>>, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "ZHEMM", .descriptor == "(IILandroid/renderscript/Double2;Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;Landroid/renderscript/Double2;Landroid/renderscript/Allocation;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5.into()), __jni_bindgen::AsJValue::as_jvalue(&arg6.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "ZHEMM\0", "(IILandroid/renderscript/Double2;Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;Landroid/renderscript/Double2;Landroid/renderscript/Allocation;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [CHERK](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#CHERK(int,%20int,%20float,%20android.renderscript.Allocation,%20float,%20android.renderscript.Allocation))
        ///
        /// Required features: "android-renderscript-Allocation"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation")))]
        pub fn CHERK<'env>(&'env self, arg0: i32, arg1: i32, arg2: f32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg4: f32, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "CHERK", .descriptor == "(IIFLandroid/renderscript/Allocation;FLandroid/renderscript/Allocation;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "CHERK\0", "(IIFLandroid/renderscript/Allocation;FLandroid/renderscript/Allocation;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ZHERK](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#ZHERK(int,%20int,%20double,%20android.renderscript.Allocation,%20double,%20android.renderscript.Allocation))
        ///
        /// Required features: "android-renderscript-Allocation"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation")))]
        pub fn ZHERK<'env>(&'env self, arg0: i32, arg1: i32, arg2: f64, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg4: f64, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "ZHERK", .descriptor == "(IIDLandroid/renderscript/Allocation;DLandroid/renderscript/Allocation;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "ZHERK\0", "(IIDLandroid/renderscript/Allocation;DLandroid/renderscript/Allocation;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [CHER2K](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#CHER2K(int,%20int,%20android.renderscript.Float2,%20android.renderscript.Allocation,%20android.renderscript.Allocation,%20float,%20android.renderscript.Allocation))
        ///
        /// Required features: "android-renderscript-Allocation", "android-renderscript-Float2"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation", feature = "android-renderscript-Float2")))]
        pub fn CHER2K<'env>(&'env self, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Float2>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg5: f32, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "CHER2K", .descriptor == "(IILandroid/renderscript/Float2;Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;FLandroid/renderscript/Allocation;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "CHER2K\0", "(IILandroid/renderscript/Float2;Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;FLandroid/renderscript/Allocation;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ZHER2K](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#ZHER2K(int,%20int,%20android.renderscript.Double2,%20android.renderscript.Allocation,%20android.renderscript.Allocation,%20double,%20android.renderscript.Allocation))
        ///
        /// Required features: "android-renderscript-Allocation", "android-renderscript-Double2"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation", feature = "android-renderscript-Double2")))]
        pub fn ZHER2K<'env>(&'env self, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Double2>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg5: f64, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "ZHER2K", .descriptor == "(IILandroid/renderscript/Double2;Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;DLandroid/renderscript/Allocation;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "ZHER2K\0", "(IILandroid/renderscript/Double2;Landroid/renderscript/Allocation;Landroid/renderscript/Allocation;DLandroid/renderscript/Allocation;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [BNNM](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#BNNM(android.renderscript.Allocation,%20int,%20android.renderscript.Allocation,%20int,%20android.renderscript.Allocation,%20int,%20int))
        ///
        /// Required features: "android-renderscript-Allocation"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation")))]
        pub fn BNNM<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg3: i32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg5: i32, arg6: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/ScriptIntrinsicBLAS", java.flags == PUBLIC, .name == "BNNM", .descriptor == "(Landroid/renderscript/Allocation;ILandroid/renderscript/Allocation;ILandroid/renderscript/Allocation;II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/ScriptIntrinsicBLAS\0", "BNNM\0", "(Landroid/renderscript/Allocation;ILandroid/renderscript/Allocation;ILandroid/renderscript/Allocation;II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [CONJ_TRANSPOSE](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#CONJ_TRANSPOSE)
        pub const CONJ_TRANSPOSE : i32 = 113;

        /// public static final [LEFT](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#LEFT)
        pub const LEFT : i32 = 141;

        /// public static final [LOWER](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#LOWER)
        pub const LOWER : i32 = 122;

        /// public static final [NON_UNIT](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#NON_UNIT)
        pub const NON_UNIT : i32 = 131;

        /// public static final [NO_TRANSPOSE](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#NO_TRANSPOSE)
        pub const NO_TRANSPOSE : i32 = 111;

        /// public static final [RIGHT](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#RIGHT)
        pub const RIGHT : i32 = 142;

        /// public static final [TRANSPOSE](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#TRANSPOSE)
        pub const TRANSPOSE : i32 = 112;

        /// public static final [UNIT](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#UNIT)
        pub const UNIT : i32 = 132;

        /// public static final [UPPER](https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBLAS.html#UPPER)
        pub const UPPER : i32 = 121;
    }
}
