// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-renderscript-AllocationAdapter"))]
__jni_bindgen! {
    /// public class [AllocationAdapter](https://developer.android.com/reference/android/renderscript/AllocationAdapter.html)
    ///
    /// Required feature: android-renderscript-AllocationAdapter
    public class AllocationAdapter ("android/renderscript/AllocationAdapter") extends crate::android::renderscript::Allocation {

        // // Not emitting: Non-public method
        // /// [AllocationAdapter](https://developer.android.com/reference/android/renderscript/AllocationAdapter.html#AllocationAdapter(long,%20android.renderscript.RenderScript,%20android.renderscript.Allocation,%20android.renderscript.Type))
        // ///
        // /// Required features: "android-renderscript-Allocation", "android-renderscript-RenderScript", "android-renderscript-Type"
        // #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation", feature = "android-renderscript-RenderScript", feature = "android-renderscript-Type")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i64, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Type>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::renderscript::AllocationAdapter>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/renderscript/AllocationAdapter", java.flags == (empty), .name == "<init>", .descriptor == "(JLandroid/renderscript/RenderScript;Landroid/renderscript/Allocation;Landroid/renderscript/Type;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/AllocationAdapter\0", "<init>\0", "(JLandroid/renderscript/RenderScript;Landroid/renderscript/Allocation;Landroid/renderscript/Type;)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [setLOD](https://developer.android.com/reference/android/renderscript/AllocationAdapter.html#setLOD(int))
        pub fn setLOD<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/AllocationAdapter", java.flags == PUBLIC, .name == "setLOD", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/AllocationAdapter\0", "setLOD\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setFace](https://developer.android.com/reference/android/renderscript/AllocationAdapter.html#setFace(android.renderscript.Type.CubemapFace))
        ///
        /// Required features: "android-renderscript-Type_CubemapFace"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Type_CubemapFace")))]
        pub fn setFace<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Type_CubemapFace>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/AllocationAdapter", java.flags == PUBLIC, .name == "setFace", .descriptor == "(Landroid/renderscript/Type$CubemapFace;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/AllocationAdapter\0", "setFace\0", "(Landroid/renderscript/Type$CubemapFace;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setX](https://developer.android.com/reference/android/renderscript/AllocationAdapter.html#setX(int))
        pub fn setX<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/AllocationAdapter", java.flags == PUBLIC, .name == "setX", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/AllocationAdapter\0", "setX\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setY](https://developer.android.com/reference/android/renderscript/AllocationAdapter.html#setY(int))
        pub fn setY<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/AllocationAdapter", java.flags == PUBLIC, .name == "setY", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/AllocationAdapter\0", "setY\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setZ](https://developer.android.com/reference/android/renderscript/AllocationAdapter.html#setZ(int))
        pub fn setZ<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/AllocationAdapter", java.flags == PUBLIC, .name == "setZ", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/AllocationAdapter\0", "setZ\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [create1D](https://developer.android.com/reference/android/renderscript/AllocationAdapter.html#create1D(android.renderscript.RenderScript,%20android.renderscript.Allocation))
        ///
        /// Required features: "android-renderscript-Allocation", "android-renderscript-AllocationAdapter", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation", feature = "android-renderscript-AllocationAdapter", feature = "android-renderscript-RenderScript")))]
        pub fn create1D<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::AllocationAdapter>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/AllocationAdapter", java.flags == PUBLIC | STATIC, .name == "create1D", .descriptor == "(Landroid/renderscript/RenderScript;Landroid/renderscript/Allocation;)Landroid/renderscript/AllocationAdapter;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/AllocationAdapter\0", "create1D\0", "(Landroid/renderscript/RenderScript;Landroid/renderscript/Allocation;)Landroid/renderscript/AllocationAdapter;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [create2D](https://developer.android.com/reference/android/renderscript/AllocationAdapter.html#create2D(android.renderscript.RenderScript,%20android.renderscript.Allocation))
        ///
        /// Required features: "android-renderscript-Allocation", "android-renderscript-AllocationAdapter", "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation", feature = "android-renderscript-AllocationAdapter", feature = "android-renderscript-RenderScript")))]
        pub fn create2D<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::AllocationAdapter>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/AllocationAdapter", java.flags == PUBLIC | STATIC, .name == "create2D", .descriptor == "(Landroid/renderscript/RenderScript;Landroid/renderscript/Allocation;)Landroid/renderscript/AllocationAdapter;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/AllocationAdapter\0", "create2D\0", "(Landroid/renderscript/RenderScript;Landroid/renderscript/Allocation;)Landroid/renderscript/AllocationAdapter;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createTyped](https://developer.android.com/reference/android/renderscript/AllocationAdapter.html#createTyped(android.renderscript.RenderScript,%20android.renderscript.Allocation,%20android.renderscript.Type))
        ///
        /// Required features: "android-renderscript-Allocation", "android-renderscript-AllocationAdapter", "android-renderscript-RenderScript", "android-renderscript-Type"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation", feature = "android-renderscript-AllocationAdapter", feature = "android-renderscript-RenderScript", feature = "android-renderscript-Type")))]
        pub fn createTyped<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Allocation>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Type>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::AllocationAdapter>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/AllocationAdapter", java.flags == PUBLIC | STATIC, .name == "createTyped", .descriptor == "(Landroid/renderscript/RenderScript;Landroid/renderscript/Allocation;Landroid/renderscript/Type;)Landroid/renderscript/AllocationAdapter;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/renderscript/AllocationAdapter\0", "createTyped\0", "(Landroid/renderscript/RenderScript;Landroid/renderscript/Allocation;Landroid/renderscript/Type;)Landroid/renderscript/AllocationAdapter;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [resize](https://developer.android.com/reference/android/renderscript/AllocationAdapter.html#resize(int))
        pub fn resize<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/AllocationAdapter", java.flags == PUBLIC | SYNCRONIZED, .name == "resize", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/AllocationAdapter\0", "resize\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
