// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-renderscript-Script_LaunchOptions"))]
__jni_bindgen! {
    /// public final class [Script.LaunchOptions](https://developer.android.com/reference/android/renderscript/Script.LaunchOptions.html)
    ///
    /// Required feature: android-renderscript-Script_LaunchOptions
    public final class Script_LaunchOptions ("android/renderscript/Script$LaunchOptions") extends crate::java::lang::Object {

        /// [LaunchOptions](https://developer.android.com/reference/android/renderscript/Script.LaunchOptions.html#LaunchOptions())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::renderscript::Script_LaunchOptions>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Script$LaunchOptions", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/Script$LaunchOptions\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setX](https://developer.android.com/reference/android/renderscript/Script.LaunchOptions.html#setX(int,%20int))
        ///
        /// Required features: "android-renderscript-Script_LaunchOptions"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Script_LaunchOptions")))]
        pub fn setX<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Script_LaunchOptions>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Script$LaunchOptions", java.flags == PUBLIC, .name == "setX", .descriptor == "(II)Landroid/renderscript/Script$LaunchOptions;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/Script$LaunchOptions\0", "setX\0", "(II)Landroid/renderscript/Script$LaunchOptions;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setY](https://developer.android.com/reference/android/renderscript/Script.LaunchOptions.html#setY(int,%20int))
        ///
        /// Required features: "android-renderscript-Script_LaunchOptions"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Script_LaunchOptions")))]
        pub fn setY<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Script_LaunchOptions>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Script$LaunchOptions", java.flags == PUBLIC, .name == "setY", .descriptor == "(II)Landroid/renderscript/Script$LaunchOptions;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/Script$LaunchOptions\0", "setY\0", "(II)Landroid/renderscript/Script$LaunchOptions;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setZ](https://developer.android.com/reference/android/renderscript/Script.LaunchOptions.html#setZ(int,%20int))
        ///
        /// Required features: "android-renderscript-Script_LaunchOptions"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Script_LaunchOptions")))]
        pub fn setZ<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Script_LaunchOptions>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Script$LaunchOptions", java.flags == PUBLIC, .name == "setZ", .descriptor == "(II)Landroid/renderscript/Script$LaunchOptions;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/Script$LaunchOptions\0", "setZ\0", "(II)Landroid/renderscript/Script$LaunchOptions;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getXStart](https://developer.android.com/reference/android/renderscript/Script.LaunchOptions.html#getXStart())
        pub fn getXStart<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Script$LaunchOptions", java.flags == PUBLIC, .name == "getXStart", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/Script$LaunchOptions\0", "getXStart\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getXEnd](https://developer.android.com/reference/android/renderscript/Script.LaunchOptions.html#getXEnd())
        pub fn getXEnd<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Script$LaunchOptions", java.flags == PUBLIC, .name == "getXEnd", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/Script$LaunchOptions\0", "getXEnd\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getYStart](https://developer.android.com/reference/android/renderscript/Script.LaunchOptions.html#getYStart())
        pub fn getYStart<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Script$LaunchOptions", java.flags == PUBLIC, .name == "getYStart", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/Script$LaunchOptions\0", "getYStart\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getYEnd](https://developer.android.com/reference/android/renderscript/Script.LaunchOptions.html#getYEnd())
        pub fn getYEnd<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Script$LaunchOptions", java.flags == PUBLIC, .name == "getYEnd", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/Script$LaunchOptions\0", "getYEnd\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getZStart](https://developer.android.com/reference/android/renderscript/Script.LaunchOptions.html#getZStart())
        pub fn getZStart<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Script$LaunchOptions", java.flags == PUBLIC, .name == "getZStart", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/Script$LaunchOptions\0", "getZStart\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getZEnd](https://developer.android.com/reference/android/renderscript/Script.LaunchOptions.html#getZEnd())
        pub fn getZEnd<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Script$LaunchOptions", java.flags == PUBLIC, .name == "getZEnd", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/Script$LaunchOptions\0", "getZEnd\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
