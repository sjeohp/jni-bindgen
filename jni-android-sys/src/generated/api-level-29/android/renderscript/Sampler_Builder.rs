// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-renderscript-Sampler_Builder"))]
__jni_bindgen! {
    /// public class [Sampler.Builder](https://developer.android.com/reference/android/renderscript/Sampler.Builder.html)
    ///
    /// Required feature: android-renderscript-Sampler_Builder
    public class Sampler_Builder ("android/renderscript/Sampler$Builder") extends crate::java::lang::Object {

        /// [Builder](https://developer.android.com/reference/android/renderscript/Sampler.Builder.html#Builder(android.renderscript.RenderScript))
        ///
        /// Required features: "android-renderscript-RenderScript"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-RenderScript")))]
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::renderscript::Sampler_Builder>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Sampler$Builder", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/renderscript/RenderScript;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/Sampler$Builder\0", "<init>\0", "(Landroid/renderscript/RenderScript;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setMinification](https://developer.android.com/reference/android/renderscript/Sampler.Builder.html#setMinification(android.renderscript.Sampler.Value))
        ///
        /// Required features: "android-renderscript-Sampler_Value"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Sampler_Value")))]
        pub fn setMinification<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Sampler_Value>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Sampler$Builder", java.flags == PUBLIC, .name == "setMinification", .descriptor == "(Landroid/renderscript/Sampler$Value;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/Sampler$Builder\0", "setMinification\0", "(Landroid/renderscript/Sampler$Value;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setMagnification](https://developer.android.com/reference/android/renderscript/Sampler.Builder.html#setMagnification(android.renderscript.Sampler.Value))
        ///
        /// Required features: "android-renderscript-Sampler_Value"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Sampler_Value")))]
        pub fn setMagnification<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Sampler_Value>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Sampler$Builder", java.flags == PUBLIC, .name == "setMagnification", .descriptor == "(Landroid/renderscript/Sampler$Value;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/Sampler$Builder\0", "setMagnification\0", "(Landroid/renderscript/Sampler$Value;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setWrapS](https://developer.android.com/reference/android/renderscript/Sampler.Builder.html#setWrapS(android.renderscript.Sampler.Value))
        ///
        /// Required features: "android-renderscript-Sampler_Value"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Sampler_Value")))]
        pub fn setWrapS<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Sampler_Value>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Sampler$Builder", java.flags == PUBLIC, .name == "setWrapS", .descriptor == "(Landroid/renderscript/Sampler$Value;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/Sampler$Builder\0", "setWrapS\0", "(Landroid/renderscript/Sampler$Value;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setWrapT](https://developer.android.com/reference/android/renderscript/Sampler.Builder.html#setWrapT(android.renderscript.Sampler.Value))
        ///
        /// Required features: "android-renderscript-Sampler_Value"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Sampler_Value")))]
        pub fn setWrapT<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Sampler_Value>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Sampler$Builder", java.flags == PUBLIC, .name == "setWrapT", .descriptor == "(Landroid/renderscript/Sampler$Value;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/Sampler$Builder\0", "setWrapT\0", "(Landroid/renderscript/Sampler$Value;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAnisotropy](https://developer.android.com/reference/android/renderscript/Sampler.Builder.html#setAnisotropy(float))
        pub fn setAnisotropy<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Sampler$Builder", java.flags == PUBLIC, .name == "setAnisotropy", .descriptor == "(F)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/Sampler$Builder\0", "setAnisotropy\0", "(F)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [create](https://developer.android.com/reference/android/renderscript/Sampler.Builder.html#create())
        ///
        /// Required features: "android-renderscript-Sampler"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Sampler")))]
        pub fn create<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Sampler>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Sampler$Builder", java.flags == PUBLIC, .name == "create", .descriptor == "()Landroid/renderscript/Sampler;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/Sampler$Builder\0", "create\0", "()Landroid/renderscript/Sampler;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
