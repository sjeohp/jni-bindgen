// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-renderscript-FieldPacker"))]
__jni_bindgen! {
    /// public class [FieldPacker](https://developer.android.com/reference/android/renderscript/FieldPacker.html)
    ///
    /// Required feature: android-renderscript-FieldPacker
    public class FieldPacker ("android/renderscript/FieldPacker") extends crate::java::lang::Object {

        /// [FieldPacker](https://developer.android.com/reference/android/renderscript/FieldPacker.html#FieldPacker(int))
        pub fn new_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::renderscript::FieldPacker>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "<init>", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "<init>\0", "(I)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [FieldPacker](https://developer.android.com/reference/android/renderscript/FieldPacker.html#FieldPacker(byte%5B%5D))
        pub fn new_byte_array<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::renderscript::FieldPacker>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "<init>", .descriptor == "([B)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "<init>\0", "([B)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [align](https://developer.android.com/reference/android/renderscript/FieldPacker.html#align(int))
        pub fn align<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "align", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "align\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [subalign](https://developer.android.com/reference/android/renderscript/FieldPacker.html#subalign(int))
        pub fn subalign<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "subalign", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "subalign\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [reset](https://developer.android.com/reference/android/renderscript/FieldPacker.html#reset())
        pub fn reset<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "reset", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "reset\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [reset](https://developer.android.com/reference/android/renderscript/FieldPacker.html#reset(int))
        pub fn reset_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "reset", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "reset\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [skip](https://developer.android.com/reference/android/renderscript/FieldPacker.html#skip(int))
        pub fn skip<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "skip", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "skip\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addI8](https://developer.android.com/reference/android/renderscript/FieldPacker.html#addI8(byte))
        pub fn addI8_byte<'env>(&'env self, arg0: i8) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "addI8", .descriptor == "(B)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "addI8\0", "(B)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [subI8](https://developer.android.com/reference/android/renderscript/FieldPacker.html#subI8())
        pub fn subI8<'env>(&'env self) -> __jni_bindgen::std::result::Result<i8, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "subI8", .descriptor == "()B"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "subI8\0", "()B\0");
                __jni_env.call_byte_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addI16](https://developer.android.com/reference/android/renderscript/FieldPacker.html#addI16(short))
        pub fn addI16_short<'env>(&'env self, arg0: i16) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "addI16", .descriptor == "(S)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "addI16\0", "(S)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [subI16](https://developer.android.com/reference/android/renderscript/FieldPacker.html#subI16())
        pub fn subI16<'env>(&'env self) -> __jni_bindgen::std::result::Result<i16, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "subI16", .descriptor == "()S"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "subI16\0", "()S\0");
                __jni_env.call_short_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addI32](https://developer.android.com/reference/android/renderscript/FieldPacker.html#addI32(int))
        pub fn addI32_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "addI32", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "addI32\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [subI32](https://developer.android.com/reference/android/renderscript/FieldPacker.html#subI32())
        pub fn subI32<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "subI32", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "subI32\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addI64](https://developer.android.com/reference/android/renderscript/FieldPacker.html#addI64(long))
        pub fn addI64_long<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "addI64", .descriptor == "(J)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "addI64\0", "(J)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [subI64](https://developer.android.com/reference/android/renderscript/FieldPacker.html#subI64())
        pub fn subI64<'env>(&'env self) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "subI64", .descriptor == "()J"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "subI64\0", "()J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addU8](https://developer.android.com/reference/android/renderscript/FieldPacker.html#addU8(short))
        pub fn addU8_short<'env>(&'env self, arg0: i16) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "addU8", .descriptor == "(S)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "addU8\0", "(S)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addU16](https://developer.android.com/reference/android/renderscript/FieldPacker.html#addU16(int))
        pub fn addU16_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "addU16", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "addU16\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addU32](https://developer.android.com/reference/android/renderscript/FieldPacker.html#addU32(long))
        pub fn addU32_long<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "addU32", .descriptor == "(J)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "addU32\0", "(J)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addU64](https://developer.android.com/reference/android/renderscript/FieldPacker.html#addU64(long))
        pub fn addU64_long<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "addU64", .descriptor == "(J)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "addU64\0", "(J)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addF32](https://developer.android.com/reference/android/renderscript/FieldPacker.html#addF32(float))
        pub fn addF32_float<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "addF32", .descriptor == "(F)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "addF32\0", "(F)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [subF32](https://developer.android.com/reference/android/renderscript/FieldPacker.html#subF32())
        pub fn subF32<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "subF32", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "subF32\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addF64](https://developer.android.com/reference/android/renderscript/FieldPacker.html#addF64(double))
        pub fn addF64_double<'env>(&'env self, arg0: f64) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "addF64", .descriptor == "(D)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "addF64\0", "(D)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [subF64](https://developer.android.com/reference/android/renderscript/FieldPacker.html#subF64())
        pub fn subF64<'env>(&'env self) -> __jni_bindgen::std::result::Result<f64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "subF64", .descriptor == "()D"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "subF64\0", "()D\0");
                __jni_env.call_double_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addObj](https://developer.android.com/reference/android/renderscript/FieldPacker.html#addObj(android.renderscript.BaseObj))
        ///
        /// Required features: "android-renderscript-BaseObj"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-BaseObj")))]
        pub fn addObj<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::BaseObj>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "addObj", .descriptor == "(Landroid/renderscript/BaseObj;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "addObj\0", "(Landroid/renderscript/BaseObj;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addF32](https://developer.android.com/reference/android/renderscript/FieldPacker.html#addF32(android.renderscript.Float2))
        ///
        /// Required features: "android-renderscript-Float2"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Float2")))]
        pub fn addF32_Float2<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Float2>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "addF32", .descriptor == "(Landroid/renderscript/Float2;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "addF32\0", "(Landroid/renderscript/Float2;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addF32](https://developer.android.com/reference/android/renderscript/FieldPacker.html#addF32(android.renderscript.Float3))
        ///
        /// Required features: "android-renderscript-Float3"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Float3")))]
        pub fn addF32_Float3<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Float3>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "addF32", .descriptor == "(Landroid/renderscript/Float3;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "addF32\0", "(Landroid/renderscript/Float3;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addF32](https://developer.android.com/reference/android/renderscript/FieldPacker.html#addF32(android.renderscript.Float4))
        ///
        /// Required features: "android-renderscript-Float4"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Float4")))]
        pub fn addF32_Float4<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Float4>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "addF32", .descriptor == "(Landroid/renderscript/Float4;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "addF32\0", "(Landroid/renderscript/Float4;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addF64](https://developer.android.com/reference/android/renderscript/FieldPacker.html#addF64(android.renderscript.Double2))
        ///
        /// Required features: "android-renderscript-Double2"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Double2")))]
        pub fn addF64_Double2<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Double2>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "addF64", .descriptor == "(Landroid/renderscript/Double2;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "addF64\0", "(Landroid/renderscript/Double2;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addF64](https://developer.android.com/reference/android/renderscript/FieldPacker.html#addF64(android.renderscript.Double3))
        ///
        /// Required features: "android-renderscript-Double3"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Double3")))]
        pub fn addF64_Double3<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Double3>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "addF64", .descriptor == "(Landroid/renderscript/Double3;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "addF64\0", "(Landroid/renderscript/Double3;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addF64](https://developer.android.com/reference/android/renderscript/FieldPacker.html#addF64(android.renderscript.Double4))
        ///
        /// Required features: "android-renderscript-Double4"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Double4")))]
        pub fn addF64_Double4<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Double4>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "addF64", .descriptor == "(Landroid/renderscript/Double4;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "addF64\0", "(Landroid/renderscript/Double4;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addI8](https://developer.android.com/reference/android/renderscript/FieldPacker.html#addI8(android.renderscript.Byte2))
        ///
        /// Required features: "android-renderscript-Byte2"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Byte2")))]
        pub fn addI8_Byte2<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Byte2>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "addI8", .descriptor == "(Landroid/renderscript/Byte2;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "addI8\0", "(Landroid/renderscript/Byte2;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addI8](https://developer.android.com/reference/android/renderscript/FieldPacker.html#addI8(android.renderscript.Byte3))
        ///
        /// Required features: "android-renderscript-Byte3"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Byte3")))]
        pub fn addI8_Byte3<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Byte3>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "addI8", .descriptor == "(Landroid/renderscript/Byte3;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "addI8\0", "(Landroid/renderscript/Byte3;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addI8](https://developer.android.com/reference/android/renderscript/FieldPacker.html#addI8(android.renderscript.Byte4))
        ///
        /// Required features: "android-renderscript-Byte4"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Byte4")))]
        pub fn addI8_Byte4<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Byte4>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "addI8", .descriptor == "(Landroid/renderscript/Byte4;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "addI8\0", "(Landroid/renderscript/Byte4;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addU8](https://developer.android.com/reference/android/renderscript/FieldPacker.html#addU8(android.renderscript.Short2))
        ///
        /// Required features: "android-renderscript-Short2"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Short2")))]
        pub fn addU8_Short2<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Short2>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "addU8", .descriptor == "(Landroid/renderscript/Short2;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "addU8\0", "(Landroid/renderscript/Short2;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addU8](https://developer.android.com/reference/android/renderscript/FieldPacker.html#addU8(android.renderscript.Short3))
        ///
        /// Required features: "android-renderscript-Short3"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Short3")))]
        pub fn addU8_Short3<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Short3>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "addU8", .descriptor == "(Landroid/renderscript/Short3;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "addU8\0", "(Landroid/renderscript/Short3;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addU8](https://developer.android.com/reference/android/renderscript/FieldPacker.html#addU8(android.renderscript.Short4))
        ///
        /// Required features: "android-renderscript-Short4"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Short4")))]
        pub fn addU8_Short4<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Short4>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "addU8", .descriptor == "(Landroid/renderscript/Short4;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "addU8\0", "(Landroid/renderscript/Short4;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addI16](https://developer.android.com/reference/android/renderscript/FieldPacker.html#addI16(android.renderscript.Short2))
        ///
        /// Required features: "android-renderscript-Short2"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Short2")))]
        pub fn addI16_Short2<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Short2>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "addI16", .descriptor == "(Landroid/renderscript/Short2;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "addI16\0", "(Landroid/renderscript/Short2;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addI16](https://developer.android.com/reference/android/renderscript/FieldPacker.html#addI16(android.renderscript.Short3))
        ///
        /// Required features: "android-renderscript-Short3"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Short3")))]
        pub fn addI16_Short3<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Short3>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "addI16", .descriptor == "(Landroid/renderscript/Short3;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "addI16\0", "(Landroid/renderscript/Short3;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addI16](https://developer.android.com/reference/android/renderscript/FieldPacker.html#addI16(android.renderscript.Short4))
        ///
        /// Required features: "android-renderscript-Short4"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Short4")))]
        pub fn addI16_Short4<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Short4>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "addI16", .descriptor == "(Landroid/renderscript/Short4;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "addI16\0", "(Landroid/renderscript/Short4;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addU16](https://developer.android.com/reference/android/renderscript/FieldPacker.html#addU16(android.renderscript.Int2))
        ///
        /// Required features: "android-renderscript-Int2"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Int2")))]
        pub fn addU16_Int2<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Int2>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "addU16", .descriptor == "(Landroid/renderscript/Int2;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "addU16\0", "(Landroid/renderscript/Int2;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addU16](https://developer.android.com/reference/android/renderscript/FieldPacker.html#addU16(android.renderscript.Int3))
        ///
        /// Required features: "android-renderscript-Int3"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Int3")))]
        pub fn addU16_Int3<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Int3>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "addU16", .descriptor == "(Landroid/renderscript/Int3;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "addU16\0", "(Landroid/renderscript/Int3;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addU16](https://developer.android.com/reference/android/renderscript/FieldPacker.html#addU16(android.renderscript.Int4))
        ///
        /// Required features: "android-renderscript-Int4"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Int4")))]
        pub fn addU16_Int4<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Int4>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "addU16", .descriptor == "(Landroid/renderscript/Int4;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "addU16\0", "(Landroid/renderscript/Int4;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addI32](https://developer.android.com/reference/android/renderscript/FieldPacker.html#addI32(android.renderscript.Int2))
        ///
        /// Required features: "android-renderscript-Int2"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Int2")))]
        pub fn addI32_Int2<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Int2>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "addI32", .descriptor == "(Landroid/renderscript/Int2;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "addI32\0", "(Landroid/renderscript/Int2;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addI32](https://developer.android.com/reference/android/renderscript/FieldPacker.html#addI32(android.renderscript.Int3))
        ///
        /// Required features: "android-renderscript-Int3"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Int3")))]
        pub fn addI32_Int3<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Int3>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "addI32", .descriptor == "(Landroid/renderscript/Int3;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "addI32\0", "(Landroid/renderscript/Int3;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addI32](https://developer.android.com/reference/android/renderscript/FieldPacker.html#addI32(android.renderscript.Int4))
        ///
        /// Required features: "android-renderscript-Int4"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Int4")))]
        pub fn addI32_Int4<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Int4>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "addI32", .descriptor == "(Landroid/renderscript/Int4;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "addI32\0", "(Landroid/renderscript/Int4;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addU32](https://developer.android.com/reference/android/renderscript/FieldPacker.html#addU32(android.renderscript.Long2))
        ///
        /// Required features: "android-renderscript-Long2"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Long2")))]
        pub fn addU32_Long2<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Long2>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "addU32", .descriptor == "(Landroid/renderscript/Long2;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "addU32\0", "(Landroid/renderscript/Long2;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addU32](https://developer.android.com/reference/android/renderscript/FieldPacker.html#addU32(android.renderscript.Long3))
        ///
        /// Required features: "android-renderscript-Long3"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Long3")))]
        pub fn addU32_Long3<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Long3>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "addU32", .descriptor == "(Landroid/renderscript/Long3;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "addU32\0", "(Landroid/renderscript/Long3;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addU32](https://developer.android.com/reference/android/renderscript/FieldPacker.html#addU32(android.renderscript.Long4))
        ///
        /// Required features: "android-renderscript-Long4"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Long4")))]
        pub fn addU32_Long4<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Long4>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "addU32", .descriptor == "(Landroid/renderscript/Long4;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "addU32\0", "(Landroid/renderscript/Long4;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addI64](https://developer.android.com/reference/android/renderscript/FieldPacker.html#addI64(android.renderscript.Long2))
        ///
        /// Required features: "android-renderscript-Long2"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Long2")))]
        pub fn addI64_Long2<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Long2>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "addI64", .descriptor == "(Landroid/renderscript/Long2;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "addI64\0", "(Landroid/renderscript/Long2;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addI64](https://developer.android.com/reference/android/renderscript/FieldPacker.html#addI64(android.renderscript.Long3))
        ///
        /// Required features: "android-renderscript-Long3"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Long3")))]
        pub fn addI64_Long3<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Long3>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "addI64", .descriptor == "(Landroid/renderscript/Long3;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "addI64\0", "(Landroid/renderscript/Long3;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addI64](https://developer.android.com/reference/android/renderscript/FieldPacker.html#addI64(android.renderscript.Long4))
        ///
        /// Required features: "android-renderscript-Long4"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Long4")))]
        pub fn addI64_Long4<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Long4>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "addI64", .descriptor == "(Landroid/renderscript/Long4;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "addI64\0", "(Landroid/renderscript/Long4;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addU64](https://developer.android.com/reference/android/renderscript/FieldPacker.html#addU64(android.renderscript.Long2))
        ///
        /// Required features: "android-renderscript-Long2"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Long2")))]
        pub fn addU64_Long2<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Long2>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "addU64", .descriptor == "(Landroid/renderscript/Long2;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "addU64\0", "(Landroid/renderscript/Long2;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addU64](https://developer.android.com/reference/android/renderscript/FieldPacker.html#addU64(android.renderscript.Long3))
        ///
        /// Required features: "android-renderscript-Long3"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Long3")))]
        pub fn addU64_Long3<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Long3>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "addU64", .descriptor == "(Landroid/renderscript/Long3;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "addU64\0", "(Landroid/renderscript/Long3;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addU64](https://developer.android.com/reference/android/renderscript/FieldPacker.html#addU64(android.renderscript.Long4))
        ///
        /// Required features: "android-renderscript-Long4"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Long4")))]
        pub fn addU64_Long4<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Long4>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "addU64", .descriptor == "(Landroid/renderscript/Long4;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "addU64\0", "(Landroid/renderscript/Long4;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [subFloat2](https://developer.android.com/reference/android/renderscript/FieldPacker.html#subFloat2())
        ///
        /// Required features: "android-renderscript-Float2"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Float2")))]
        pub fn subFloat2<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Float2>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "subFloat2", .descriptor == "()Landroid/renderscript/Float2;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "subFloat2\0", "()Landroid/renderscript/Float2;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [subFloat3](https://developer.android.com/reference/android/renderscript/FieldPacker.html#subFloat3())
        ///
        /// Required features: "android-renderscript-Float3"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Float3")))]
        pub fn subFloat3<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Float3>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "subFloat3", .descriptor == "()Landroid/renderscript/Float3;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "subFloat3\0", "()Landroid/renderscript/Float3;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [subFloat4](https://developer.android.com/reference/android/renderscript/FieldPacker.html#subFloat4())
        ///
        /// Required features: "android-renderscript-Float4"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Float4")))]
        pub fn subFloat4<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Float4>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "subFloat4", .descriptor == "()Landroid/renderscript/Float4;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "subFloat4\0", "()Landroid/renderscript/Float4;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [subDouble2](https://developer.android.com/reference/android/renderscript/FieldPacker.html#subDouble2())
        ///
        /// Required features: "android-renderscript-Double2"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Double2")))]
        pub fn subDouble2<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Double2>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "subDouble2", .descriptor == "()Landroid/renderscript/Double2;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "subDouble2\0", "()Landroid/renderscript/Double2;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [subDouble3](https://developer.android.com/reference/android/renderscript/FieldPacker.html#subDouble3())
        ///
        /// Required features: "android-renderscript-Double3"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Double3")))]
        pub fn subDouble3<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Double3>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "subDouble3", .descriptor == "()Landroid/renderscript/Double3;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "subDouble3\0", "()Landroid/renderscript/Double3;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [subDouble4](https://developer.android.com/reference/android/renderscript/FieldPacker.html#subDouble4())
        ///
        /// Required features: "android-renderscript-Double4"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Double4")))]
        pub fn subDouble4<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Double4>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "subDouble4", .descriptor == "()Landroid/renderscript/Double4;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "subDouble4\0", "()Landroid/renderscript/Double4;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [subByte2](https://developer.android.com/reference/android/renderscript/FieldPacker.html#subByte2())
        ///
        /// Required features: "android-renderscript-Byte2"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Byte2")))]
        pub fn subByte2<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Byte2>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "subByte2", .descriptor == "()Landroid/renderscript/Byte2;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "subByte2\0", "()Landroid/renderscript/Byte2;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [subByte3](https://developer.android.com/reference/android/renderscript/FieldPacker.html#subByte3())
        ///
        /// Required features: "android-renderscript-Byte3"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Byte3")))]
        pub fn subByte3<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Byte3>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "subByte3", .descriptor == "()Landroid/renderscript/Byte3;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "subByte3\0", "()Landroid/renderscript/Byte3;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [subByte4](https://developer.android.com/reference/android/renderscript/FieldPacker.html#subByte4())
        ///
        /// Required features: "android-renderscript-Byte4"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Byte4")))]
        pub fn subByte4<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Byte4>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "subByte4", .descriptor == "()Landroid/renderscript/Byte4;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "subByte4\0", "()Landroid/renderscript/Byte4;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [subShort2](https://developer.android.com/reference/android/renderscript/FieldPacker.html#subShort2())
        ///
        /// Required features: "android-renderscript-Short2"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Short2")))]
        pub fn subShort2<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Short2>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "subShort2", .descriptor == "()Landroid/renderscript/Short2;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "subShort2\0", "()Landroid/renderscript/Short2;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [subShort3](https://developer.android.com/reference/android/renderscript/FieldPacker.html#subShort3())
        ///
        /// Required features: "android-renderscript-Short3"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Short3")))]
        pub fn subShort3<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Short3>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "subShort3", .descriptor == "()Landroid/renderscript/Short3;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "subShort3\0", "()Landroid/renderscript/Short3;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [subShort4](https://developer.android.com/reference/android/renderscript/FieldPacker.html#subShort4())
        ///
        /// Required features: "android-renderscript-Short4"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Short4")))]
        pub fn subShort4<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Short4>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "subShort4", .descriptor == "()Landroid/renderscript/Short4;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "subShort4\0", "()Landroid/renderscript/Short4;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [subInt2](https://developer.android.com/reference/android/renderscript/FieldPacker.html#subInt2())
        ///
        /// Required features: "android-renderscript-Int2"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Int2")))]
        pub fn subInt2<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Int2>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "subInt2", .descriptor == "()Landroid/renderscript/Int2;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "subInt2\0", "()Landroid/renderscript/Int2;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [subInt3](https://developer.android.com/reference/android/renderscript/FieldPacker.html#subInt3())
        ///
        /// Required features: "android-renderscript-Int3"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Int3")))]
        pub fn subInt3<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Int3>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "subInt3", .descriptor == "()Landroid/renderscript/Int3;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "subInt3\0", "()Landroid/renderscript/Int3;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [subInt4](https://developer.android.com/reference/android/renderscript/FieldPacker.html#subInt4())
        ///
        /// Required features: "android-renderscript-Int4"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Int4")))]
        pub fn subInt4<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Int4>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "subInt4", .descriptor == "()Landroid/renderscript/Int4;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "subInt4\0", "()Landroid/renderscript/Int4;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [subLong2](https://developer.android.com/reference/android/renderscript/FieldPacker.html#subLong2())
        ///
        /// Required features: "android-renderscript-Long2"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Long2")))]
        pub fn subLong2<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Long2>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "subLong2", .descriptor == "()Landroid/renderscript/Long2;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "subLong2\0", "()Landroid/renderscript/Long2;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [subLong3](https://developer.android.com/reference/android/renderscript/FieldPacker.html#subLong3())
        ///
        /// Required features: "android-renderscript-Long3"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Long3")))]
        pub fn subLong3<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Long3>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "subLong3", .descriptor == "()Landroid/renderscript/Long3;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "subLong3\0", "()Landroid/renderscript/Long3;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [subLong4](https://developer.android.com/reference/android/renderscript/FieldPacker.html#subLong4())
        ///
        /// Required features: "android-renderscript-Long4"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Long4")))]
        pub fn subLong4<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Long4>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "subLong4", .descriptor == "()Landroid/renderscript/Long4;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "subLong4\0", "()Landroid/renderscript/Long4;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addMatrix](https://developer.android.com/reference/android/renderscript/FieldPacker.html#addMatrix(android.renderscript.Matrix4f))
        ///
        /// Required features: "android-renderscript-Matrix4f"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Matrix4f")))]
        pub fn addMatrix_Matrix4f<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Matrix4f>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "addMatrix", .descriptor == "(Landroid/renderscript/Matrix4f;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "addMatrix\0", "(Landroid/renderscript/Matrix4f;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [subMatrix4f](https://developer.android.com/reference/android/renderscript/FieldPacker.html#subMatrix4f())
        ///
        /// Required features: "android-renderscript-Matrix4f"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Matrix4f")))]
        pub fn subMatrix4f<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Matrix4f>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "subMatrix4f", .descriptor == "()Landroid/renderscript/Matrix4f;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "subMatrix4f\0", "()Landroid/renderscript/Matrix4f;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addMatrix](https://developer.android.com/reference/android/renderscript/FieldPacker.html#addMatrix(android.renderscript.Matrix3f))
        ///
        /// Required features: "android-renderscript-Matrix3f"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Matrix3f")))]
        pub fn addMatrix_Matrix3f<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Matrix3f>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "addMatrix", .descriptor == "(Landroid/renderscript/Matrix3f;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "addMatrix\0", "(Landroid/renderscript/Matrix3f;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [subMatrix3f](https://developer.android.com/reference/android/renderscript/FieldPacker.html#subMatrix3f())
        ///
        /// Required features: "android-renderscript-Matrix3f"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Matrix3f")))]
        pub fn subMatrix3f<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Matrix3f>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "subMatrix3f", .descriptor == "()Landroid/renderscript/Matrix3f;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "subMatrix3f\0", "()Landroid/renderscript/Matrix3f;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addMatrix](https://developer.android.com/reference/android/renderscript/FieldPacker.html#addMatrix(android.renderscript.Matrix2f))
        ///
        /// Required features: "android-renderscript-Matrix2f"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Matrix2f")))]
        pub fn addMatrix_Matrix2f<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::Matrix2f>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "addMatrix", .descriptor == "(Landroid/renderscript/Matrix2f;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "addMatrix\0", "(Landroid/renderscript/Matrix2f;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [subMatrix2f](https://developer.android.com/reference/android/renderscript/FieldPacker.html#subMatrix2f())
        ///
        /// Required features: "android-renderscript-Matrix2f"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Matrix2f")))]
        pub fn subMatrix2f<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Matrix2f>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "subMatrix2f", .descriptor == "()Landroid/renderscript/Matrix2f;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "subMatrix2f\0", "()Landroid/renderscript/Matrix2f;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addBoolean](https://developer.android.com/reference/android/renderscript/FieldPacker.html#addBoolean(boolean))
        pub fn addBoolean<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "addBoolean", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "addBoolean\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [subBoolean](https://developer.android.com/reference/android/renderscript/FieldPacker.html#subBoolean())
        pub fn subBoolean<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC, .name == "subBoolean", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "subBoolean\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getData](https://developer.android.com/reference/android/renderscript/FieldPacker.html#getData())
        pub fn getData<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ByteArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/FieldPacker", java.flags == PUBLIC | FINAL, .name == "getData", .descriptor == "()[B"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/FieldPacker\0", "getData\0", "()[B\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
