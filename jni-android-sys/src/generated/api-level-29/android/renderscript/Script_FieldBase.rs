// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-renderscript-Script_FieldBase"))]
__jni_bindgen! {
    /// public class [Script.FieldBase](https://developer.android.com/reference/android/renderscript/Script.FieldBase.html)
    ///
    /// Required feature: android-renderscript-Script_FieldBase
    public class Script_FieldBase ("android/renderscript/Script$FieldBase") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [FieldBase](https://developer.android.com/reference/android/renderscript/Script.FieldBase.html#FieldBase())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::renderscript::Script_FieldBase>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/renderscript/Script$FieldBase", java.flags == PROTECTED, .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/Script$FieldBase\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [init](https://developer.android.com/reference/android/renderscript/Script.FieldBase.html#init(android.renderscript.RenderScript,%20int))
        // ///
        // /// Required features: "android-renderscript-RenderScript"
        // #[cfg(any(feature = "all", all(feature = "android-renderscript-RenderScript")))]
        // fn init<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/renderscript/Script$FieldBase", java.flags == PROTECTED, .name == "init", .descriptor == "(Landroid/renderscript/RenderScript;I)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/Script$FieldBase\0", "init\0", "(Landroid/renderscript/RenderScript;I)V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [init](https://developer.android.com/reference/android/renderscript/Script.FieldBase.html#init(android.renderscript.RenderScript,%20int,%20int))
        // ///
        // /// Required features: "android-renderscript-RenderScript"
        // #[cfg(any(feature = "all", all(feature = "android-renderscript-RenderScript")))]
        // fn init<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::renderscript::RenderScript>>, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/renderscript/Script$FieldBase", java.flags == PROTECTED, .name == "init", .descriptor == "(Landroid/renderscript/RenderScript;II)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/Script$FieldBase\0", "init\0", "(Landroid/renderscript/RenderScript;II)V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getElement](https://developer.android.com/reference/android/renderscript/Script.FieldBase.html#getElement())
        ///
        /// Required features: "android-renderscript-Element"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Element")))]
        pub fn getElement<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Script$FieldBase", java.flags == PUBLIC, .name == "getElement", .descriptor == "()Landroid/renderscript/Element;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/Script$FieldBase\0", "getElement\0", "()Landroid/renderscript/Element;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getType](https://developer.android.com/reference/android/renderscript/Script.FieldBase.html#getType())
        ///
        /// Required features: "android-renderscript-Type"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Type")))]
        pub fn getType<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Type>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Script$FieldBase", java.flags == PUBLIC, .name == "getType", .descriptor == "()Landroid/renderscript/Type;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/Script$FieldBase\0", "getType\0", "()Landroid/renderscript/Type;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAllocation](https://developer.android.com/reference/android/renderscript/Script.FieldBase.html#getAllocation())
        ///
        /// Required features: "android-renderscript-Allocation"
        #[cfg(any(feature = "all", all(feature = "android-renderscript-Allocation")))]
        pub fn getAllocation<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Allocation>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Script$FieldBase", java.flags == PUBLIC, .name == "getAllocation", .descriptor == "()Landroid/renderscript/Allocation;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/Script$FieldBase\0", "getAllocation\0", "()Landroid/renderscript/Allocation;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateAllocation](https://developer.android.com/reference/android/renderscript/Script.FieldBase.html#updateAllocation())
        pub fn updateAllocation<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/renderscript/Script$FieldBase", java.flags == PUBLIC, .name == "updateAllocation", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/renderscript/Script$FieldBase\0", "updateAllocation\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public field
        // /// **get** protected [mAllocation](https://developer.android.com/reference/android/renderscript/Script.FieldBase.html#mAllocation)
        // ///
        // /// Required feature: android-renderscript-Allocation
        // #[cfg(any(feature = "all", feature = "android-renderscript-Allocation"))]
        // pub fn mAllocation<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Allocation>> {
        //     unsafe {
        //         let env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (class, field) = env.require_class_field("android/renderscript/Script$FieldBase\0", "mAllocation\0", "Landroid/renderscript/Allocation;\0");
        //         env.get_object_field(class, field)
        //     }
        // }

        // /// **set** protected [mAllocation](https://developer.android.com/reference/android/renderscript/Script.FieldBase.html#mAllocation)
        // ///
        // /// Required feature: android-renderscript-Allocation
        // #[cfg(any(feature = "all", feature = "android-renderscript-Allocation"))]
        // pub fn set_mAllocation<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::android::renderscript::Allocation>>) {
        //     unsafe {
        //         let env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (class, field) = env.require_class_field("android/renderscript/Script$FieldBase\0", "mAllocation\0", "Landroid/renderscript/Allocation;\0");
        //         env.set_object_field(class, field, value)
        //     }
        // }

        // // Not emitting: Non-public field
        // /// **get** protected [mElement](https://developer.android.com/reference/android/renderscript/Script.FieldBase.html#mElement)
        // ///
        // /// Required feature: android-renderscript-Element
        // #[cfg(any(feature = "all", feature = "android-renderscript-Element"))]
        // pub fn mElement<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::renderscript::Element>> {
        //     unsafe {
        //         let env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (class, field) = env.require_class_field("android/renderscript/Script$FieldBase\0", "mElement\0", "Landroid/renderscript/Element;\0");
        //         env.get_object_field(class, field)
        //     }
        // }

        // /// **set** protected [mElement](https://developer.android.com/reference/android/renderscript/Script.FieldBase.html#mElement)
        // ///
        // /// Required feature: android-renderscript-Element
        // #[cfg(any(feature = "all", feature = "android-renderscript-Element"))]
        // pub fn set_mElement<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::android::renderscript::Element>>) {
        //     unsafe {
        //         let env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (class, field) = env.require_class_field("android/renderscript/Script$FieldBase\0", "mElement\0", "Landroid/renderscript/Element;\0");
        //         env.set_object_field(class, field, value)
        //     }
        // }
    }
}
