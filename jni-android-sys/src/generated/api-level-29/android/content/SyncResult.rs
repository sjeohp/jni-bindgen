// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-content-SyncResult"))]
__jni_bindgen! {
    /// public final class [SyncResult](https://developer.android.com/reference/android/content/SyncResult.html)
    ///
    /// Required feature: android-content-SyncResult
    public final class SyncResult ("android/content/SyncResult") extends crate::java::lang::Object, implements crate::android::os::Parcelable {

        /// [SyncResult](https://developer.android.com/reference/android/content/SyncResult.html#SyncResult())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::content::SyncResult>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/SyncResult", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/SyncResult\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasHardError](https://developer.android.com/reference/android/content/SyncResult.html#hasHardError())
        pub fn hasHardError<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/SyncResult", java.flags == PUBLIC, .name == "hasHardError", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/SyncResult\0", "hasHardError\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasSoftError](https://developer.android.com/reference/android/content/SyncResult.html#hasSoftError())
        pub fn hasSoftError<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/SyncResult", java.flags == PUBLIC, .name == "hasSoftError", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/SyncResult\0", "hasSoftError\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasError](https://developer.android.com/reference/android/content/SyncResult.html#hasError())
        pub fn hasError<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/SyncResult", java.flags == PUBLIC, .name == "hasError", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/SyncResult\0", "hasError\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [madeSomeProgress](https://developer.android.com/reference/android/content/SyncResult.html#madeSomeProgress())
        pub fn madeSomeProgress<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/SyncResult", java.flags == PUBLIC, .name == "madeSomeProgress", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/SyncResult\0", "madeSomeProgress\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clear](https://developer.android.com/reference/android/content/SyncResult.html#clear())
        pub fn clear<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/SyncResult", java.flags == PUBLIC, .name == "clear", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/SyncResult\0", "clear\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [describeContents](https://developer.android.com/reference/android/content/SyncResult.html#describeContents())
        pub fn describeContents<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/SyncResult", java.flags == PUBLIC, .name == "describeContents", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/SyncResult\0", "describeContents\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [writeToParcel](https://developer.android.com/reference/android/content/SyncResult.html#writeToParcel(android.os.Parcel,%20int))
        ///
        /// Required features: "android-os-Parcel"
        #[cfg(any(feature = "all", all(feature = "android-os-Parcel")))]
        pub fn writeToParcel<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Parcel>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/SyncResult", java.flags == PUBLIC, .name == "writeToParcel", .descriptor == "(Landroid/os/Parcel;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/SyncResult\0", "writeToParcel\0", "(Landroid/os/Parcel;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/android/content/SyncResult.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/SyncResult", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/SyncResult\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toDebugString](https://developer.android.com/reference/android/content/SyncResult.html#toDebugString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toDebugString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/SyncResult", java.flags == PUBLIC, .name == "toDebugString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/SyncResult\0", "toDebugString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// **get** public static final [ALREADY_IN_PROGRESS](https://developer.android.com/reference/android/content/SyncResult.html#ALREADY_IN_PROGRESS)
        ///
        /// Required feature: android-content-SyncResult
        #[cfg(any(feature = "all", feature = "android-content-SyncResult"))]
        pub fn ALREADY_IN_PROGRESS<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::SyncResult>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/content/SyncResult\0", "ALREADY_IN_PROGRESS\0", "Landroid/content/SyncResult;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [CREATOR](https://developer.android.com/reference/android/content/SyncResult.html#CREATOR)
        ///
        /// Required feature: android-os-Parcelable_Creator
        #[cfg(any(feature = "all", feature = "android-os-Parcelable_Creator"))]
        pub fn CREATOR<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Parcelable_Creator>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/content/SyncResult\0", "CREATOR\0", "Landroid/os/Parcelable$Creator;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public [databaseError](https://developer.android.com/reference/android/content/SyncResult.html#databaseError)
        pub fn databaseError<'env>(&'env self) -> bool {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/SyncResult\0", "databaseError\0", "Z\0");
                env.get_boolean_field(class, field)
            }
        }

        /// **set** public [databaseError](https://developer.android.com/reference/android/content/SyncResult.html#databaseError)
        pub fn set_databaseError<'env>(&'env self, value: bool) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/SyncResult\0", "databaseError\0", "Z\0");
                env.set_boolean_field(class, field, value)
            }
        }

        /// **get** public [delayUntil](https://developer.android.com/reference/android/content/SyncResult.html#delayUntil)
        pub fn delayUntil<'env>(&'env self) -> i64 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/SyncResult\0", "delayUntil\0", "J\0");
                env.get_long_field(class, field)
            }
        }

        /// **set** public [delayUntil](https://developer.android.com/reference/android/content/SyncResult.html#delayUntil)
        pub fn set_delayUntil<'env>(&'env self, value: i64) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/SyncResult\0", "delayUntil\0", "J\0");
                env.set_long_field(class, field, value)
            }
        }

        /// **get** public [fullSyncRequested](https://developer.android.com/reference/android/content/SyncResult.html#fullSyncRequested)
        pub fn fullSyncRequested<'env>(&'env self) -> bool {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/SyncResult\0", "fullSyncRequested\0", "Z\0");
                env.get_boolean_field(class, field)
            }
        }

        /// **set** public [fullSyncRequested](https://developer.android.com/reference/android/content/SyncResult.html#fullSyncRequested)
        pub fn set_fullSyncRequested<'env>(&'env self, value: bool) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/SyncResult\0", "fullSyncRequested\0", "Z\0");
                env.set_boolean_field(class, field, value)
            }
        }

        /// **get** public [moreRecordsToGet](https://developer.android.com/reference/android/content/SyncResult.html#moreRecordsToGet)
        pub fn moreRecordsToGet<'env>(&'env self) -> bool {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/SyncResult\0", "moreRecordsToGet\0", "Z\0");
                env.get_boolean_field(class, field)
            }
        }

        /// **set** public [moreRecordsToGet](https://developer.android.com/reference/android/content/SyncResult.html#moreRecordsToGet)
        pub fn set_moreRecordsToGet<'env>(&'env self, value: bool) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/SyncResult\0", "moreRecordsToGet\0", "Z\0");
                env.set_boolean_field(class, field, value)
            }
        }

        /// **get** public [partialSyncUnavailable](https://developer.android.com/reference/android/content/SyncResult.html#partialSyncUnavailable)
        pub fn partialSyncUnavailable<'env>(&'env self) -> bool {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/SyncResult\0", "partialSyncUnavailable\0", "Z\0");
                env.get_boolean_field(class, field)
            }
        }

        /// **set** public [partialSyncUnavailable](https://developer.android.com/reference/android/content/SyncResult.html#partialSyncUnavailable)
        pub fn set_partialSyncUnavailable<'env>(&'env self, value: bool) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/SyncResult\0", "partialSyncUnavailable\0", "Z\0");
                env.set_boolean_field(class, field, value)
            }
        }

        /// **get** public final [stats](https://developer.android.com/reference/android/content/SyncResult.html#stats)
        ///
        /// Required feature: android-content-SyncStats
        #[cfg(any(feature = "all", feature = "android-content-SyncStats"))]
        pub fn stats<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::SyncStats>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/SyncResult\0", "stats\0", "Landroid/content/SyncStats;\0");
                env.get_object_field(class, field)
            }
        }

        /// **get** public final [syncAlreadyInProgress](https://developer.android.com/reference/android/content/SyncResult.html#syncAlreadyInProgress)
        pub fn syncAlreadyInProgress<'env>(&'env self) -> bool {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/SyncResult\0", "syncAlreadyInProgress\0", "Z\0");
                env.get_boolean_field(class, field)
            }
        }

        /// **get** public [tooManyDeletions](https://developer.android.com/reference/android/content/SyncResult.html#tooManyDeletions)
        pub fn tooManyDeletions<'env>(&'env self) -> bool {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/SyncResult\0", "tooManyDeletions\0", "Z\0");
                env.get_boolean_field(class, field)
            }
        }

        /// **set** public [tooManyDeletions](https://developer.android.com/reference/android/content/SyncResult.html#tooManyDeletions)
        pub fn set_tooManyDeletions<'env>(&'env self, value: bool) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/SyncResult\0", "tooManyDeletions\0", "Z\0");
                env.set_boolean_field(class, field, value)
            }
        }

        /// **get** public [tooManyRetries](https://developer.android.com/reference/android/content/SyncResult.html#tooManyRetries)
        pub fn tooManyRetries<'env>(&'env self) -> bool {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/SyncResult\0", "tooManyRetries\0", "Z\0");
                env.get_boolean_field(class, field)
            }
        }

        /// **set** public [tooManyRetries](https://developer.android.com/reference/android/content/SyncResult.html#tooManyRetries)
        pub fn set_tooManyRetries<'env>(&'env self, value: bool) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/SyncResult\0", "tooManyRetries\0", "Z\0");
                env.set_boolean_field(class, field, value)
            }
        }
    }
}
