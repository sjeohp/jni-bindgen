// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-content-AsyncQueryHandler_WorkerArgs"))]
__jni_bindgen! {
    /// public final class [AsyncQueryHandler.WorkerArgs](https://developer.android.com/reference/android/content/AsyncQueryHandler.WorkerArgs.html)
    ///
    /// Required feature: android-content-AsyncQueryHandler_WorkerArgs
    public final class AsyncQueryHandler_WorkerArgs ("android/content/AsyncQueryHandler$WorkerArgs") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [WorkerArgs](https://developer.android.com/reference/android/content/AsyncQueryHandler.WorkerArgs.html#WorkerArgs())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::content::AsyncQueryHandler_WorkerArgs>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/content/AsyncQueryHandler$WorkerArgs", java.flags == PROTECTED, .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/AsyncQueryHandler$WorkerArgs\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// **get** public [cookie](https://developer.android.com/reference/android/content/AsyncQueryHandler.WorkerArgs.html#cookie)
        ///
        /// Required feature: java-lang-Object
        #[cfg(any(feature = "all", feature = "java-lang-Object"))]
        pub fn cookie<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/AsyncQueryHandler$WorkerArgs\0", "cookie\0", "Ljava/lang/Object;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [cookie](https://developer.android.com/reference/android/content/AsyncQueryHandler.WorkerArgs.html#cookie)
        ///
        /// Required feature: java-lang-Object
        #[cfg(any(feature = "all", feature = "java-lang-Object"))]
        pub fn set_cookie<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::java::lang::Object>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/AsyncQueryHandler$WorkerArgs\0", "cookie\0", "Ljava/lang/Object;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [handler](https://developer.android.com/reference/android/content/AsyncQueryHandler.WorkerArgs.html#handler)
        ///
        /// Required feature: android-os-Handler
        #[cfg(any(feature = "all", feature = "android-os-Handler"))]
        pub fn handler<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Handler>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/AsyncQueryHandler$WorkerArgs\0", "handler\0", "Landroid/os/Handler;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [handler](https://developer.android.com/reference/android/content/AsyncQueryHandler.WorkerArgs.html#handler)
        ///
        /// Required feature: android-os-Handler
        #[cfg(any(feature = "all", feature = "android-os-Handler"))]
        pub fn set_handler<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::android::os::Handler>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/AsyncQueryHandler$WorkerArgs\0", "handler\0", "Landroid/os/Handler;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [orderBy](https://developer.android.com/reference/android/content/AsyncQueryHandler.WorkerArgs.html#orderBy)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn orderBy<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/AsyncQueryHandler$WorkerArgs\0", "orderBy\0", "Ljava/lang/String;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [orderBy](https://developer.android.com/reference/android/content/AsyncQueryHandler.WorkerArgs.html#orderBy)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn set_orderBy<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::java::lang::String>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/AsyncQueryHandler$WorkerArgs\0", "orderBy\0", "Ljava/lang/String;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [projection](https://developer.android.com/reference/android/content/AsyncQueryHandler.WorkerArgs.html#projection)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn projection<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/AsyncQueryHandler$WorkerArgs\0", "projection\0", "[Ljava/lang/String;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [projection](https://developer.android.com/reference/android/content/AsyncQueryHandler.WorkerArgs.html#projection)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn set_projection<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/AsyncQueryHandler$WorkerArgs\0", "projection\0", "[Ljava/lang/String;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [result](https://developer.android.com/reference/android/content/AsyncQueryHandler.WorkerArgs.html#result)
        ///
        /// Required feature: java-lang-Object
        #[cfg(any(feature = "all", feature = "java-lang-Object"))]
        pub fn result<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/AsyncQueryHandler$WorkerArgs\0", "result\0", "Ljava/lang/Object;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [result](https://developer.android.com/reference/android/content/AsyncQueryHandler.WorkerArgs.html#result)
        ///
        /// Required feature: java-lang-Object
        #[cfg(any(feature = "all", feature = "java-lang-Object"))]
        pub fn set_result<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::java::lang::Object>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/AsyncQueryHandler$WorkerArgs\0", "result\0", "Ljava/lang/Object;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [selection](https://developer.android.com/reference/android/content/AsyncQueryHandler.WorkerArgs.html#selection)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn selection<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/AsyncQueryHandler$WorkerArgs\0", "selection\0", "Ljava/lang/String;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [selection](https://developer.android.com/reference/android/content/AsyncQueryHandler.WorkerArgs.html#selection)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn set_selection<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::java::lang::String>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/AsyncQueryHandler$WorkerArgs\0", "selection\0", "Ljava/lang/String;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [selectionArgs](https://developer.android.com/reference/android/content/AsyncQueryHandler.WorkerArgs.html#selectionArgs)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn selectionArgs<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/AsyncQueryHandler$WorkerArgs\0", "selectionArgs\0", "[Ljava/lang/String;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [selectionArgs](https://developer.android.com/reference/android/content/AsyncQueryHandler.WorkerArgs.html#selectionArgs)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn set_selectionArgs<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/AsyncQueryHandler$WorkerArgs\0", "selectionArgs\0", "[Ljava/lang/String;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [uri](https://developer.android.com/reference/android/content/AsyncQueryHandler.WorkerArgs.html#uri)
        ///
        /// Required feature: android-net-Uri
        #[cfg(any(feature = "all", feature = "android-net-Uri"))]
        pub fn uri<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/AsyncQueryHandler$WorkerArgs\0", "uri\0", "Landroid/net/Uri;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [uri](https://developer.android.com/reference/android/content/AsyncQueryHandler.WorkerArgs.html#uri)
        ///
        /// Required feature: android-net-Uri
        #[cfg(any(feature = "all", feature = "android-net-Uri"))]
        pub fn set_uri<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::android::net::Uri>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/AsyncQueryHandler$WorkerArgs\0", "uri\0", "Landroid/net/Uri;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [values](https://developer.android.com/reference/android/content/AsyncQueryHandler.WorkerArgs.html#values)
        ///
        /// Required feature: android-content-ContentValues
        #[cfg(any(feature = "all", feature = "android-content-ContentValues"))]
        pub fn values<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::ContentValues>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/AsyncQueryHandler$WorkerArgs\0", "values\0", "Landroid/content/ContentValues;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [values](https://developer.android.com/reference/android/content/AsyncQueryHandler.WorkerArgs.html#values)
        ///
        /// Required feature: android-content-ContentValues
        #[cfg(any(feature = "all", feature = "android-content-ContentValues"))]
        pub fn set_values<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::android::content::ContentValues>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/AsyncQueryHandler$WorkerArgs\0", "values\0", "Landroid/content/ContentValues;\0");
                env.set_object_field(class, field, value)
            }
        }
    }
}
