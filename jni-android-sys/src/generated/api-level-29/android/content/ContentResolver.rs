// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-content-ContentResolver"))]
__jni_bindgen! {
    /// public class [ContentResolver](https://developer.android.com/reference/android/content/ContentResolver.html)
    ///
    /// Required feature: android-content-ContentResolver
    public class ContentResolver ("android/content/ContentResolver") extends crate::java::lang::Object {

        /// [ContentResolver](https://developer.android.com/reference/android/content/ContentResolver.html#ContentResolver(android.content.Context))
        ///
        /// Required features: "android-content-Context"
        #[cfg(any(feature = "all", all(feature = "android-content-Context")))]
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::content::ContentResolver>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentResolver", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/content/Context;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentResolver\0", "<init>\0", "(Landroid/content/Context;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [wrap](https://developer.android.com/reference/android/content/ContentResolver.html#wrap(android.content.ContentProvider))
        ///
        /// Required features: "android-content-ContentProvider", "android-content-ContentResolver"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentProvider", feature = "android-content-ContentResolver")))]
        pub fn wrap_ContentProvider<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentProvider>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::ContentResolver>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentResolver", java.flags == PUBLIC | STATIC, .name == "wrap", .descriptor == "(Landroid/content/ContentProvider;)Landroid/content/ContentResolver;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/content/ContentResolver\0", "wrap\0", "(Landroid/content/ContentProvider;)Landroid/content/ContentResolver;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [wrap](https://developer.android.com/reference/android/content/ContentResolver.html#wrap(android.content.ContentProviderClient))
        ///
        /// Required features: "android-content-ContentProviderClient", "android-content-ContentResolver"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentProviderClient", feature = "android-content-ContentResolver")))]
        pub fn wrap_ContentProviderClient<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentProviderClient>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::ContentResolver>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentResolver", java.flags == PUBLIC | STATIC, .name == "wrap", .descriptor == "(Landroid/content/ContentProviderClient;)Landroid/content/ContentResolver;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/content/ContentResolver\0", "wrap\0", "(Landroid/content/ContentProviderClient;)Landroid/content/ContentResolver;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getType](https://developer.android.com/reference/android/content/ContentResolver.html#getType(android.net.Uri))
        ///
        /// Required features: "android-net-Uri", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri", feature = "java-lang-String")))]
        pub fn getType<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentResolver", java.flags == PUBLIC | FINAL, .name == "getType", .descriptor == "(Landroid/net/Uri;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentResolver\0", "getType\0", "(Landroid/net/Uri;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getStreamTypes](https://developer.android.com/reference/android/content/ContentResolver.html#getStreamTypes(android.net.Uri,%20java.lang.String))
        ///
        /// Required features: "android-net-Uri", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri", feature = "java-lang-String")))]
        pub fn getStreamTypes<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentResolver", java.flags == PUBLIC, .name == "getStreamTypes", .descriptor == "(Landroid/net/Uri;Ljava/lang/String;)[Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentResolver\0", "getStreamTypes\0", "(Landroid/net/Uri;Ljava/lang/String;)[Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [query](https://developer.android.com/reference/android/content/ContentResolver.html#query(android.net.Uri,%20java.lang.String%5B%5D,%20java.lang.String,%20java.lang.String%5B%5D,%20java.lang.String))
        ///
        /// Required features: "android-database-Cursor", "android-net-Uri", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-database-Cursor", feature = "android-net-Uri", feature = "java-lang-String")))]
        pub fn query_Uri_String_array_String_String_array_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::database::Cursor>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentResolver", java.flags == PUBLIC | FINAL, .name == "query", .descriptor == "(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentResolver\0", "query\0", "(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [query](https://developer.android.com/reference/android/content/ContentResolver.html#query(android.net.Uri,%20java.lang.String%5B%5D,%20java.lang.String,%20java.lang.String%5B%5D,%20java.lang.String,%20android.os.CancellationSignal))
        ///
        /// Required features: "android-database-Cursor", "android-net-Uri", "android-os-CancellationSignal", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-database-Cursor", feature = "android-net-Uri", feature = "android-os-CancellationSignal", feature = "java-lang-String")))]
        pub fn query_Uri_String_array_String_String_array_String_CancellationSignal<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::CancellationSignal>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::database::Cursor>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentResolver", java.flags == PUBLIC | FINAL, .name == "query", .descriptor == "(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/database/Cursor;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentResolver\0", "query\0", "(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/database/Cursor;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [query](https://developer.android.com/reference/android/content/ContentResolver.html#query(android.net.Uri,%20java.lang.String%5B%5D,%20android.os.Bundle,%20android.os.CancellationSignal))
        ///
        /// Required features: "android-database-Cursor", "android-net-Uri", "android-os-Bundle", "android-os-CancellationSignal", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-database-Cursor", feature = "android-net-Uri", feature = "android-os-Bundle", feature = "android-os-CancellationSignal", feature = "java-lang-String")))]
        pub fn query_Uri_String_array_Bundle_CancellationSignal<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::CancellationSignal>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::database::Cursor>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentResolver", java.flags == PUBLIC | FINAL, .name == "query", .descriptor == "(Landroid/net/Uri;[Ljava/lang/String;Landroid/os/Bundle;Landroid/os/CancellationSignal;)Landroid/database/Cursor;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentResolver\0", "query\0", "(Landroid/net/Uri;[Ljava/lang/String;Landroid/os/Bundle;Landroid/os/CancellationSignal;)Landroid/database/Cursor;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [canonicalize](https://developer.android.com/reference/android/content/ContentResolver.html#canonicalize(android.net.Uri))
        ///
        /// Required features: "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri")))]
        pub fn canonicalize<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentResolver", java.flags == PUBLIC | FINAL, .name == "canonicalize", .descriptor == "(Landroid/net/Uri;)Landroid/net/Uri;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentResolver\0", "canonicalize\0", "(Landroid/net/Uri;)Landroid/net/Uri;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [uncanonicalize](https://developer.android.com/reference/android/content/ContentResolver.html#uncanonicalize(android.net.Uri))
        ///
        /// Required features: "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri")))]
        pub fn uncanonicalize<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentResolver", java.flags == PUBLIC | FINAL, .name == "uncanonicalize", .descriptor == "(Landroid/net/Uri;)Landroid/net/Uri;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentResolver\0", "uncanonicalize\0", "(Landroid/net/Uri;)Landroid/net/Uri;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [refresh](https://developer.android.com/reference/android/content/ContentResolver.html#refresh(android.net.Uri,%20android.os.Bundle,%20android.os.CancellationSignal))
        ///
        /// Required features: "android-net-Uri", "android-os-Bundle", "android-os-CancellationSignal"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri", feature = "android-os-Bundle", feature = "android-os-CancellationSignal")))]
        pub fn refresh<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::CancellationSignal>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentResolver", java.flags == PUBLIC | FINAL, .name == "refresh", .descriptor == "(Landroid/net/Uri;Landroid/os/Bundle;Landroid/os/CancellationSignal;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentResolver\0", "refresh\0", "(Landroid/net/Uri;Landroid/os/Bundle;Landroid/os/CancellationSignal;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [openInputStream](https://developer.android.com/reference/android/content/ContentResolver.html#openInputStream(android.net.Uri))
        ///
        /// Required features: "android-net-Uri", "java-io-InputStream"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri", feature = "java-io-InputStream")))]
        pub fn openInputStream<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::io::InputStream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentResolver", java.flags == PUBLIC | FINAL, .name == "openInputStream", .descriptor == "(Landroid/net/Uri;)Ljava/io/InputStream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentResolver\0", "openInputStream\0", "(Landroid/net/Uri;)Ljava/io/InputStream;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [openOutputStream](https://developer.android.com/reference/android/content/ContentResolver.html#openOutputStream(android.net.Uri))
        ///
        /// Required features: "android-net-Uri", "java-io-OutputStream"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri", feature = "java-io-OutputStream")))]
        pub fn openOutputStream_Uri<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::io::OutputStream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentResolver", java.flags == PUBLIC | FINAL, .name == "openOutputStream", .descriptor == "(Landroid/net/Uri;)Ljava/io/OutputStream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentResolver\0", "openOutputStream\0", "(Landroid/net/Uri;)Ljava/io/OutputStream;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [openOutputStream](https://developer.android.com/reference/android/content/ContentResolver.html#openOutputStream(android.net.Uri,%20java.lang.String))
        ///
        /// Required features: "android-net-Uri", "java-io-OutputStream", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri", feature = "java-io-OutputStream", feature = "java-lang-String")))]
        pub fn openOutputStream_Uri_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::io::OutputStream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentResolver", java.flags == PUBLIC | FINAL, .name == "openOutputStream", .descriptor == "(Landroid/net/Uri;Ljava/lang/String;)Ljava/io/OutputStream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentResolver\0", "openOutputStream\0", "(Landroid/net/Uri;Ljava/lang/String;)Ljava/io/OutputStream;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [openFile](https://developer.android.com/reference/android/content/ContentResolver.html#openFile(android.net.Uri,%20java.lang.String,%20android.os.CancellationSignal))
        ///
        /// Required features: "android-net-Uri", "android-os-CancellationSignal", "android-os-ParcelFileDescriptor", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri", feature = "android-os-CancellationSignal", feature = "android-os-ParcelFileDescriptor", feature = "java-lang-String")))]
        pub fn openFile<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::CancellationSignal>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::ParcelFileDescriptor>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentResolver", java.flags == PUBLIC | FINAL, .name == "openFile", .descriptor == "(Landroid/net/Uri;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/os/ParcelFileDescriptor;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentResolver\0", "openFile\0", "(Landroid/net/Uri;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/os/ParcelFileDescriptor;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [openFileDescriptor](https://developer.android.com/reference/android/content/ContentResolver.html#openFileDescriptor(android.net.Uri,%20java.lang.String))
        ///
        /// Required features: "android-net-Uri", "android-os-ParcelFileDescriptor", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri", feature = "android-os-ParcelFileDescriptor", feature = "java-lang-String")))]
        pub fn openFileDescriptor_Uri_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::ParcelFileDescriptor>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentResolver", java.flags == PUBLIC | FINAL, .name == "openFileDescriptor", .descriptor == "(Landroid/net/Uri;Ljava/lang/String;)Landroid/os/ParcelFileDescriptor;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentResolver\0", "openFileDescriptor\0", "(Landroid/net/Uri;Ljava/lang/String;)Landroid/os/ParcelFileDescriptor;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [openFileDescriptor](https://developer.android.com/reference/android/content/ContentResolver.html#openFileDescriptor(android.net.Uri,%20java.lang.String,%20android.os.CancellationSignal))
        ///
        /// Required features: "android-net-Uri", "android-os-CancellationSignal", "android-os-ParcelFileDescriptor", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri", feature = "android-os-CancellationSignal", feature = "android-os-ParcelFileDescriptor", feature = "java-lang-String")))]
        pub fn openFileDescriptor_Uri_String_CancellationSignal<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::CancellationSignal>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::ParcelFileDescriptor>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentResolver", java.flags == PUBLIC | FINAL, .name == "openFileDescriptor", .descriptor == "(Landroid/net/Uri;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/os/ParcelFileDescriptor;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentResolver\0", "openFileDescriptor\0", "(Landroid/net/Uri;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/os/ParcelFileDescriptor;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [openAssetFile](https://developer.android.com/reference/android/content/ContentResolver.html#openAssetFile(android.net.Uri,%20java.lang.String,%20android.os.CancellationSignal))
        ///
        /// Required features: "android-content-res-AssetFileDescriptor", "android-net-Uri", "android-os-CancellationSignal", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-res-AssetFileDescriptor", feature = "android-net-Uri", feature = "android-os-CancellationSignal", feature = "java-lang-String")))]
        pub fn openAssetFile<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::CancellationSignal>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::res::AssetFileDescriptor>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentResolver", java.flags == PUBLIC | FINAL, .name == "openAssetFile", .descriptor == "(Landroid/net/Uri;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/content/res/AssetFileDescriptor;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentResolver\0", "openAssetFile\0", "(Landroid/net/Uri;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/content/res/AssetFileDescriptor;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [openAssetFileDescriptor](https://developer.android.com/reference/android/content/ContentResolver.html#openAssetFileDescriptor(android.net.Uri,%20java.lang.String))
        ///
        /// Required features: "android-content-res-AssetFileDescriptor", "android-net-Uri", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-res-AssetFileDescriptor", feature = "android-net-Uri", feature = "java-lang-String")))]
        pub fn openAssetFileDescriptor_Uri_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::res::AssetFileDescriptor>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentResolver", java.flags == PUBLIC | FINAL, .name == "openAssetFileDescriptor", .descriptor == "(Landroid/net/Uri;Ljava/lang/String;)Landroid/content/res/AssetFileDescriptor;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentResolver\0", "openAssetFileDescriptor\0", "(Landroid/net/Uri;Ljava/lang/String;)Landroid/content/res/AssetFileDescriptor;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [openAssetFileDescriptor](https://developer.android.com/reference/android/content/ContentResolver.html#openAssetFileDescriptor(android.net.Uri,%20java.lang.String,%20android.os.CancellationSignal))
        ///
        /// Required features: "android-content-res-AssetFileDescriptor", "android-net-Uri", "android-os-CancellationSignal", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-res-AssetFileDescriptor", feature = "android-net-Uri", feature = "android-os-CancellationSignal", feature = "java-lang-String")))]
        pub fn openAssetFileDescriptor_Uri_String_CancellationSignal<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::CancellationSignal>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::res::AssetFileDescriptor>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentResolver", java.flags == PUBLIC | FINAL, .name == "openAssetFileDescriptor", .descriptor == "(Landroid/net/Uri;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/content/res/AssetFileDescriptor;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentResolver\0", "openAssetFileDescriptor\0", "(Landroid/net/Uri;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/content/res/AssetFileDescriptor;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [openTypedAssetFile](https://developer.android.com/reference/android/content/ContentResolver.html#openTypedAssetFile(android.net.Uri,%20java.lang.String,%20android.os.Bundle,%20android.os.CancellationSignal))
        ///
        /// Required features: "android-content-res-AssetFileDescriptor", "android-net-Uri", "android-os-Bundle", "android-os-CancellationSignal", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-res-AssetFileDescriptor", feature = "android-net-Uri", feature = "android-os-Bundle", feature = "android-os-CancellationSignal", feature = "java-lang-String")))]
        pub fn openTypedAssetFile<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::CancellationSignal>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::res::AssetFileDescriptor>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentResolver", java.flags == PUBLIC | FINAL, .name == "openTypedAssetFile", .descriptor == "(Landroid/net/Uri;Ljava/lang/String;Landroid/os/Bundle;Landroid/os/CancellationSignal;)Landroid/content/res/AssetFileDescriptor;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentResolver\0", "openTypedAssetFile\0", "(Landroid/net/Uri;Ljava/lang/String;Landroid/os/Bundle;Landroid/os/CancellationSignal;)Landroid/content/res/AssetFileDescriptor;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [openTypedAssetFileDescriptor](https://developer.android.com/reference/android/content/ContentResolver.html#openTypedAssetFileDescriptor(android.net.Uri,%20java.lang.String,%20android.os.Bundle))
        ///
        /// Required features: "android-content-res-AssetFileDescriptor", "android-net-Uri", "android-os-Bundle", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-res-AssetFileDescriptor", feature = "android-net-Uri", feature = "android-os-Bundle", feature = "java-lang-String")))]
        pub fn openTypedAssetFileDescriptor_Uri_String_Bundle<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::res::AssetFileDescriptor>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentResolver", java.flags == PUBLIC | FINAL, .name == "openTypedAssetFileDescriptor", .descriptor == "(Landroid/net/Uri;Ljava/lang/String;Landroid/os/Bundle;)Landroid/content/res/AssetFileDescriptor;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentResolver\0", "openTypedAssetFileDescriptor\0", "(Landroid/net/Uri;Ljava/lang/String;Landroid/os/Bundle;)Landroid/content/res/AssetFileDescriptor;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [openTypedAssetFileDescriptor](https://developer.android.com/reference/android/content/ContentResolver.html#openTypedAssetFileDescriptor(android.net.Uri,%20java.lang.String,%20android.os.Bundle,%20android.os.CancellationSignal))
        ///
        /// Required features: "android-content-res-AssetFileDescriptor", "android-net-Uri", "android-os-Bundle", "android-os-CancellationSignal", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-res-AssetFileDescriptor", feature = "android-net-Uri", feature = "android-os-Bundle", feature = "android-os-CancellationSignal", feature = "java-lang-String")))]
        pub fn openTypedAssetFileDescriptor_Uri_String_Bundle_CancellationSignal<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::CancellationSignal>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::res::AssetFileDescriptor>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentResolver", java.flags == PUBLIC | FINAL, .name == "openTypedAssetFileDescriptor", .descriptor == "(Landroid/net/Uri;Ljava/lang/String;Landroid/os/Bundle;Landroid/os/CancellationSignal;)Landroid/content/res/AssetFileDescriptor;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentResolver\0", "openTypedAssetFileDescriptor\0", "(Landroid/net/Uri;Ljava/lang/String;Landroid/os/Bundle;Landroid/os/CancellationSignal;)Landroid/content/res/AssetFileDescriptor;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [insert](https://developer.android.com/reference/android/content/ContentResolver.html#insert(android.net.Uri,%20android.content.ContentValues))
        ///
        /// Required features: "android-content-ContentValues", "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentValues", feature = "android-net-Uri")))]
        pub fn insert<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentValues>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentResolver", java.flags == PUBLIC | FINAL, .name == "insert", .descriptor == "(Landroid/net/Uri;Landroid/content/ContentValues;)Landroid/net/Uri;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentResolver\0", "insert\0", "(Landroid/net/Uri;Landroid/content/ContentValues;)Landroid/net/Uri;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [applyBatch](https://developer.android.com/reference/android/content/ContentResolver.html#applyBatch(java.lang.String,%20java.util.ArrayList))
        ///
        /// Required features: "android-content-ContentProviderResult", "java-lang-String", "java-util-ArrayList"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentProviderResult", feature = "java-lang-String", feature = "java-util-ArrayList")))]
        pub fn applyBatch<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::ArrayList>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::android::content::ContentProviderResult, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentResolver", java.flags == PUBLIC, .name == "applyBatch", .descriptor == "(Ljava/lang/String;Ljava/util/ArrayList;)[Landroid/content/ContentProviderResult;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentResolver\0", "applyBatch\0", "(Ljava/lang/String;Ljava/util/ArrayList;)[Landroid/content/ContentProviderResult;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [bulkInsert](https://developer.android.com/reference/android/content/ContentResolver.html#bulkInsert(android.net.Uri,%20android.content.ContentValues%5B%5D))
        ///
        /// Required features: "android-content-ContentValues", "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentValues", feature = "android-net-Uri")))]
        pub fn bulkInsert<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::android::content::ContentValues, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentResolver", java.flags == PUBLIC | FINAL, .name == "bulkInsert", .descriptor == "(Landroid/net/Uri;[Landroid/content/ContentValues;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentResolver\0", "bulkInsert\0", "(Landroid/net/Uri;[Landroid/content/ContentValues;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [delete](https://developer.android.com/reference/android/content/ContentResolver.html#delete(android.net.Uri,%20java.lang.String,%20java.lang.String%5B%5D))
        ///
        /// Required features: "android-net-Uri", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri", feature = "java-lang-String")))]
        pub fn delete<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentResolver", java.flags == PUBLIC | FINAL, .name == "delete", .descriptor == "(Landroid/net/Uri;Ljava/lang/String;[Ljava/lang/String;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentResolver\0", "delete\0", "(Landroid/net/Uri;Ljava/lang/String;[Ljava/lang/String;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [update](https://developer.android.com/reference/android/content/ContentResolver.html#update(android.net.Uri,%20android.content.ContentValues,%20java.lang.String,%20java.lang.String%5B%5D))
        ///
        /// Required features: "android-content-ContentValues", "android-net-Uri", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentValues", feature = "android-net-Uri", feature = "java-lang-String")))]
        pub fn update<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentValues>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentResolver", java.flags == PUBLIC | FINAL, .name == "update", .descriptor == "(Landroid/net/Uri;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentResolver\0", "update\0", "(Landroid/net/Uri;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [call](https://developer.android.com/reference/android/content/ContentResolver.html#call(android.net.Uri,%20java.lang.String,%20java.lang.String,%20android.os.Bundle))
        ///
        /// Required features: "android-net-Uri", "android-os-Bundle", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri", feature = "android-os-Bundle", feature = "java-lang-String")))]
        pub fn call_Uri_String_String_Bundle<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Bundle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentResolver", java.flags == PUBLIC | FINAL, .name == "call", .descriptor == "(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;Landroid/os/Bundle;)Landroid/os/Bundle;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentResolver\0", "call\0", "(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;Landroid/os/Bundle;)Landroid/os/Bundle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [call](https://developer.android.com/reference/android/content/ContentResolver.html#call(java.lang.String,%20java.lang.String,%20java.lang.String,%20android.os.Bundle))
        ///
        /// Required features: "android-os-Bundle", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-os-Bundle", feature = "java-lang-String")))]
        pub fn call_String_String_String_Bundle<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Bundle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentResolver", java.flags == PUBLIC | FINAL, .name == "call", .descriptor == "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/os/Bundle;)Landroid/os/Bundle;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentResolver\0", "call\0", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/os/Bundle;)Landroid/os/Bundle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [acquireContentProviderClient](https://developer.android.com/reference/android/content/ContentResolver.html#acquireContentProviderClient(android.net.Uri))
        ///
        /// Required features: "android-content-ContentProviderClient", "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentProviderClient", feature = "android-net-Uri")))]
        pub fn acquireContentProviderClient_Uri<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::ContentProviderClient>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentResolver", java.flags == PUBLIC | FINAL, .name == "acquireContentProviderClient", .descriptor == "(Landroid/net/Uri;)Landroid/content/ContentProviderClient;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentResolver\0", "acquireContentProviderClient\0", "(Landroid/net/Uri;)Landroid/content/ContentProviderClient;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [acquireContentProviderClient](https://developer.android.com/reference/android/content/ContentResolver.html#acquireContentProviderClient(java.lang.String))
        ///
        /// Required features: "android-content-ContentProviderClient", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentProviderClient", feature = "java-lang-String")))]
        pub fn acquireContentProviderClient_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::ContentProviderClient>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentResolver", java.flags == PUBLIC | FINAL, .name == "acquireContentProviderClient", .descriptor == "(Ljava/lang/String;)Landroid/content/ContentProviderClient;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentResolver\0", "acquireContentProviderClient\0", "(Ljava/lang/String;)Landroid/content/ContentProviderClient;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [acquireUnstableContentProviderClient](https://developer.android.com/reference/android/content/ContentResolver.html#acquireUnstableContentProviderClient(android.net.Uri))
        ///
        /// Required features: "android-content-ContentProviderClient", "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentProviderClient", feature = "android-net-Uri")))]
        pub fn acquireUnstableContentProviderClient_Uri<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::ContentProviderClient>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentResolver", java.flags == PUBLIC | FINAL, .name == "acquireUnstableContentProviderClient", .descriptor == "(Landroid/net/Uri;)Landroid/content/ContentProviderClient;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentResolver\0", "acquireUnstableContentProviderClient\0", "(Landroid/net/Uri;)Landroid/content/ContentProviderClient;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [acquireUnstableContentProviderClient](https://developer.android.com/reference/android/content/ContentResolver.html#acquireUnstableContentProviderClient(java.lang.String))
        ///
        /// Required features: "android-content-ContentProviderClient", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentProviderClient", feature = "java-lang-String")))]
        pub fn acquireUnstableContentProviderClient_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::ContentProviderClient>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentResolver", java.flags == PUBLIC | FINAL, .name == "acquireUnstableContentProviderClient", .descriptor == "(Ljava/lang/String;)Landroid/content/ContentProviderClient;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentResolver\0", "acquireUnstableContentProviderClient\0", "(Ljava/lang/String;)Landroid/content/ContentProviderClient;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [registerContentObserver](https://developer.android.com/reference/android/content/ContentResolver.html#registerContentObserver(android.net.Uri,%20boolean,%20android.database.ContentObserver))
        ///
        /// Required features: "android-database-ContentObserver", "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-database-ContentObserver", feature = "android-net-Uri")))]
        pub fn registerContentObserver<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg1: bool, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::database::ContentObserver>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentResolver", java.flags == PUBLIC | FINAL, .name == "registerContentObserver", .descriptor == "(Landroid/net/Uri;ZLandroid/database/ContentObserver;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentResolver\0", "registerContentObserver\0", "(Landroid/net/Uri;ZLandroid/database/ContentObserver;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unregisterContentObserver](https://developer.android.com/reference/android/content/ContentResolver.html#unregisterContentObserver(android.database.ContentObserver))
        ///
        /// Required features: "android-database-ContentObserver"
        #[cfg(any(feature = "all", all(feature = "android-database-ContentObserver")))]
        pub fn unregisterContentObserver<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::database::ContentObserver>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentResolver", java.flags == PUBLIC | FINAL, .name == "unregisterContentObserver", .descriptor == "(Landroid/database/ContentObserver;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentResolver\0", "unregisterContentObserver\0", "(Landroid/database/ContentObserver;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [notifyChange](https://developer.android.com/reference/android/content/ContentResolver.html#notifyChange(android.net.Uri,%20android.database.ContentObserver))
        ///
        /// Required features: "android-database-ContentObserver", "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-database-ContentObserver", feature = "android-net-Uri")))]
        pub fn notifyChange_Uri_ContentObserver<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::database::ContentObserver>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentResolver", java.flags == PUBLIC, .name == "notifyChange", .descriptor == "(Landroid/net/Uri;Landroid/database/ContentObserver;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentResolver\0", "notifyChange\0", "(Landroid/net/Uri;Landroid/database/ContentObserver;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [notifyChange](https://developer.android.com/reference/android/content/ContentResolver.html#notifyChange(android.net.Uri,%20android.database.ContentObserver,%20boolean))
        ///
        /// Required features: "android-database-ContentObserver", "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-database-ContentObserver", feature = "android-net-Uri")))]
        pub fn notifyChange_Uri_ContentObserver_boolean<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::database::ContentObserver>>, arg2: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentResolver", java.flags == PUBLIC, .name == "notifyChange", .descriptor == "(Landroid/net/Uri;Landroid/database/ContentObserver;Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentResolver\0", "notifyChange\0", "(Landroid/net/Uri;Landroid/database/ContentObserver;Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [notifyChange](https://developer.android.com/reference/android/content/ContentResolver.html#notifyChange(android.net.Uri,%20android.database.ContentObserver,%20int))
        ///
        /// Required features: "android-database-ContentObserver", "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-database-ContentObserver", feature = "android-net-Uri")))]
        pub fn notifyChange_Uri_ContentObserver_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::database::ContentObserver>>, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentResolver", java.flags == PUBLIC, .name == "notifyChange", .descriptor == "(Landroid/net/Uri;Landroid/database/ContentObserver;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentResolver\0", "notifyChange\0", "(Landroid/net/Uri;Landroid/database/ContentObserver;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [takePersistableUriPermission](https://developer.android.com/reference/android/content/ContentResolver.html#takePersistableUriPermission(android.net.Uri,%20int))
        ///
        /// Required features: "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri")))]
        pub fn takePersistableUriPermission<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentResolver", java.flags == PUBLIC, .name == "takePersistableUriPermission", .descriptor == "(Landroid/net/Uri;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentResolver\0", "takePersistableUriPermission\0", "(Landroid/net/Uri;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [releasePersistableUriPermission](https://developer.android.com/reference/android/content/ContentResolver.html#releasePersistableUriPermission(android.net.Uri,%20int))
        ///
        /// Required features: "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri")))]
        pub fn releasePersistableUriPermission<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentResolver", java.flags == PUBLIC, .name == "releasePersistableUriPermission", .descriptor == "(Landroid/net/Uri;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentResolver\0", "releasePersistableUriPermission\0", "(Landroid/net/Uri;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPersistedUriPermissions](https://developer.android.com/reference/android/content/ContentResolver.html#getPersistedUriPermissions())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getPersistedUriPermissions<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentResolver", java.flags == PUBLIC, .name == "getPersistedUriPermissions", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentResolver\0", "getPersistedUriPermissions\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getOutgoingPersistedUriPermissions](https://developer.android.com/reference/android/content/ContentResolver.html#getOutgoingPersistedUriPermissions())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getOutgoingPersistedUriPermissions<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentResolver", java.flags == PUBLIC, .name == "getOutgoingPersistedUriPermissions", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentResolver\0", "getOutgoingPersistedUriPermissions\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [startSync](https://developer.android.com/reference/android/content/ContentResolver.html#startSync(android.net.Uri,%20android.os.Bundle))
        ///
        /// Required features: "android-net-Uri", "android-os-Bundle"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri", feature = "android-os-Bundle")))]
        #[deprecated] pub fn startSync<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentResolver", java.flags == PUBLIC, .name == "startSync", .descriptor == "(Landroid/net/Uri;Landroid/os/Bundle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentResolver\0", "startSync\0", "(Landroid/net/Uri;Landroid/os/Bundle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [requestSync](https://developer.android.com/reference/android/content/ContentResolver.html#requestSync(android.accounts.Account,%20java.lang.String,%20android.os.Bundle))
        ///
        /// Required features: "android-accounts-Account", "android-os-Bundle", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-accounts-Account", feature = "android-os-Bundle", feature = "java-lang-String")))]
        pub fn requestSync_Account_String_Bundle<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accounts::Account>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentResolver", java.flags == PUBLIC | STATIC, .name == "requestSync", .descriptor == "(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/content/ContentResolver\0", "requestSync\0", "(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [requestSync](https://developer.android.com/reference/android/content/ContentResolver.html#requestSync(android.content.SyncRequest))
        ///
        /// Required features: "android-content-SyncRequest"
        #[cfg(any(feature = "all", all(feature = "android-content-SyncRequest")))]
        pub fn requestSync_SyncRequest<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::SyncRequest>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentResolver", java.flags == PUBLIC | STATIC, .name == "requestSync", .descriptor == "(Landroid/content/SyncRequest;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/content/ContentResolver\0", "requestSync\0", "(Landroid/content/SyncRequest;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [validateSyncExtrasBundle](https://developer.android.com/reference/android/content/ContentResolver.html#validateSyncExtrasBundle(android.os.Bundle))
        ///
        /// Required features: "android-os-Bundle"
        #[cfg(any(feature = "all", all(feature = "android-os-Bundle")))]
        pub fn validateSyncExtrasBundle<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentResolver", java.flags == PUBLIC | STATIC, .name == "validateSyncExtrasBundle", .descriptor == "(Landroid/os/Bundle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/content/ContentResolver\0", "validateSyncExtrasBundle\0", "(Landroid/os/Bundle;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [cancelSync](https://developer.android.com/reference/android/content/ContentResolver.html#cancelSync(android.net.Uri))
        ///
        /// Required features: "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri")))]
        #[deprecated] pub fn cancelSync_Uri<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentResolver", java.flags == PUBLIC, .name == "cancelSync", .descriptor == "(Landroid/net/Uri;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentResolver\0", "cancelSync\0", "(Landroid/net/Uri;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [cancelSync](https://developer.android.com/reference/android/content/ContentResolver.html#cancelSync(android.accounts.Account,%20java.lang.String))
        ///
        /// Required features: "android-accounts-Account", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-accounts-Account", feature = "java-lang-String")))]
        pub fn cancelSync_Account_String<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accounts::Account>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentResolver", java.flags == PUBLIC | STATIC, .name == "cancelSync", .descriptor == "(Landroid/accounts/Account;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/content/ContentResolver\0", "cancelSync\0", "(Landroid/accounts/Account;Ljava/lang/String;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSyncAdapterTypes](https://developer.android.com/reference/android/content/ContentResolver.html#getSyncAdapterTypes())
        ///
        /// Required features: "android-content-SyncAdapterType"
        #[cfg(any(feature = "all", all(feature = "android-content-SyncAdapterType")))]
        pub fn getSyncAdapterTypes<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::android::content::SyncAdapterType, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentResolver", java.flags == PUBLIC | STATIC, .name == "getSyncAdapterTypes", .descriptor == "()[Landroid/content/SyncAdapterType;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/content/ContentResolver\0", "getSyncAdapterTypes\0", "()[Landroid/content/SyncAdapterType;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSyncAutomatically](https://developer.android.com/reference/android/content/ContentResolver.html#getSyncAutomatically(android.accounts.Account,%20java.lang.String))
        ///
        /// Required features: "android-accounts-Account", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-accounts-Account", feature = "java-lang-String")))]
        pub fn getSyncAutomatically<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accounts::Account>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentResolver", java.flags == PUBLIC | STATIC, .name == "getSyncAutomatically", .descriptor == "(Landroid/accounts/Account;Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/content/ContentResolver\0", "getSyncAutomatically\0", "(Landroid/accounts/Account;Ljava/lang/String;)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setSyncAutomatically](https://developer.android.com/reference/android/content/ContentResolver.html#setSyncAutomatically(android.accounts.Account,%20java.lang.String,%20boolean))
        ///
        /// Required features: "android-accounts-Account", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-accounts-Account", feature = "java-lang-String")))]
        pub fn setSyncAutomatically<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accounts::Account>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentResolver", java.flags == PUBLIC | STATIC, .name == "setSyncAutomatically", .descriptor == "(Landroid/accounts/Account;Ljava/lang/String;Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/content/ContentResolver\0", "setSyncAutomatically\0", "(Landroid/accounts/Account;Ljava/lang/String;Z)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addPeriodicSync](https://developer.android.com/reference/android/content/ContentResolver.html#addPeriodicSync(android.accounts.Account,%20java.lang.String,%20android.os.Bundle,%20long))
        ///
        /// Required features: "android-accounts-Account", "android-os-Bundle", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-accounts-Account", feature = "android-os-Bundle", feature = "java-lang-String")))]
        pub fn addPeriodicSync<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accounts::Account>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>, arg3: i64) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentResolver", java.flags == PUBLIC | STATIC, .name == "addPeriodicSync", .descriptor == "(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;J)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/content/ContentResolver\0", "addPeriodicSync\0", "(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;J)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removePeriodicSync](https://developer.android.com/reference/android/content/ContentResolver.html#removePeriodicSync(android.accounts.Account,%20java.lang.String,%20android.os.Bundle))
        ///
        /// Required features: "android-accounts-Account", "android-os-Bundle", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-accounts-Account", feature = "android-os-Bundle", feature = "java-lang-String")))]
        pub fn removePeriodicSync<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accounts::Account>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentResolver", java.flags == PUBLIC | STATIC, .name == "removePeriodicSync", .descriptor == "(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/content/ContentResolver\0", "removePeriodicSync\0", "(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [cancelSync](https://developer.android.com/reference/android/content/ContentResolver.html#cancelSync(android.content.SyncRequest))
        ///
        /// Required features: "android-content-SyncRequest"
        #[cfg(any(feature = "all", all(feature = "android-content-SyncRequest")))]
        pub fn cancelSync_SyncRequest<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::SyncRequest>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentResolver", java.flags == PUBLIC | STATIC, .name == "cancelSync", .descriptor == "(Landroid/content/SyncRequest;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/content/ContentResolver\0", "cancelSync\0", "(Landroid/content/SyncRequest;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPeriodicSyncs](https://developer.android.com/reference/android/content/ContentResolver.html#getPeriodicSyncs(android.accounts.Account,%20java.lang.String))
        ///
        /// Required features: "android-accounts-Account", "java-lang-String", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "android-accounts-Account", feature = "java-lang-String", feature = "java-util-List")))]
        pub fn getPeriodicSyncs<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accounts::Account>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentResolver", java.flags == PUBLIC | STATIC, .name == "getPeriodicSyncs", .descriptor == "(Landroid/accounts/Account;Ljava/lang/String;)Ljava/util/List;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/content/ContentResolver\0", "getPeriodicSyncs\0", "(Landroid/accounts/Account;Ljava/lang/String;)Ljava/util/List;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getIsSyncable](https://developer.android.com/reference/android/content/ContentResolver.html#getIsSyncable(android.accounts.Account,%20java.lang.String))
        ///
        /// Required features: "android-accounts-Account", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-accounts-Account", feature = "java-lang-String")))]
        pub fn getIsSyncable<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accounts::Account>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentResolver", java.flags == PUBLIC | STATIC, .name == "getIsSyncable", .descriptor == "(Landroid/accounts/Account;Ljava/lang/String;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/content/ContentResolver\0", "getIsSyncable\0", "(Landroid/accounts/Account;Ljava/lang/String;)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setIsSyncable](https://developer.android.com/reference/android/content/ContentResolver.html#setIsSyncable(android.accounts.Account,%20java.lang.String,%20int))
        ///
        /// Required features: "android-accounts-Account", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-accounts-Account", feature = "java-lang-String")))]
        pub fn setIsSyncable<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accounts::Account>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentResolver", java.flags == PUBLIC | STATIC, .name == "setIsSyncable", .descriptor == "(Landroid/accounts/Account;Ljava/lang/String;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/content/ContentResolver\0", "setIsSyncable\0", "(Landroid/accounts/Account;Ljava/lang/String;I)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMasterSyncAutomatically](https://developer.android.com/reference/android/content/ContentResolver.html#getMasterSyncAutomatically())
        pub fn getMasterSyncAutomatically<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentResolver", java.flags == PUBLIC | STATIC, .name == "getMasterSyncAutomatically", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/content/ContentResolver\0", "getMasterSyncAutomatically\0", "()Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setMasterSyncAutomatically](https://developer.android.com/reference/android/content/ContentResolver.html#setMasterSyncAutomatically(boolean))
        pub fn setMasterSyncAutomatically<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentResolver", java.flags == PUBLIC | STATIC, .name == "setMasterSyncAutomatically", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/content/ContentResolver\0", "setMasterSyncAutomatically\0", "(Z)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isSyncActive](https://developer.android.com/reference/android/content/ContentResolver.html#isSyncActive(android.accounts.Account,%20java.lang.String))
        ///
        /// Required features: "android-accounts-Account", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-accounts-Account", feature = "java-lang-String")))]
        pub fn isSyncActive<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accounts::Account>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentResolver", java.flags == PUBLIC | STATIC, .name == "isSyncActive", .descriptor == "(Landroid/accounts/Account;Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/content/ContentResolver\0", "isSyncActive\0", "(Landroid/accounts/Account;Ljava/lang/String;)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCurrentSync](https://developer.android.com/reference/android/content/ContentResolver.html#getCurrentSync())
        ///
        /// Required features: "android-content-SyncInfo"
        #[cfg(any(feature = "all", all(feature = "android-content-SyncInfo")))]
        #[deprecated] pub fn getCurrentSync<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::SyncInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentResolver", java.flags == PUBLIC | STATIC, .name == "getCurrentSync", .descriptor == "()Landroid/content/SyncInfo;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/content/ContentResolver\0", "getCurrentSync\0", "()Landroid/content/SyncInfo;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCurrentSyncs](https://developer.android.com/reference/android/content/ContentResolver.html#getCurrentSyncs())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getCurrentSyncs<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentResolver", java.flags == PUBLIC | STATIC, .name == "getCurrentSyncs", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/content/ContentResolver\0", "getCurrentSyncs\0", "()Ljava/util/List;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isSyncPending](https://developer.android.com/reference/android/content/ContentResolver.html#isSyncPending(android.accounts.Account,%20java.lang.String))
        ///
        /// Required features: "android-accounts-Account", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-accounts-Account", feature = "java-lang-String")))]
        pub fn isSyncPending<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accounts::Account>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentResolver", java.flags == PUBLIC | STATIC, .name == "isSyncPending", .descriptor == "(Landroid/accounts/Account;Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/content/ContentResolver\0", "isSyncPending\0", "(Landroid/accounts/Account;Ljava/lang/String;)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addStatusChangeListener](https://developer.android.com/reference/android/content/ContentResolver.html#addStatusChangeListener(int,%20android.content.SyncStatusObserver))
        ///
        /// Required features: "android-content-SyncStatusObserver", "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "android-content-SyncStatusObserver", feature = "java-lang-Object")))]
        pub fn addStatusChangeListener<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::SyncStatusObserver>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentResolver", java.flags == PUBLIC | STATIC, .name == "addStatusChangeListener", .descriptor == "(ILandroid/content/SyncStatusObserver;)Ljava/lang/Object;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/content/ContentResolver\0", "addStatusChangeListener\0", "(ILandroid/content/SyncStatusObserver;)Ljava/lang/Object;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeStatusChangeListener](https://developer.android.com/reference/android/content/ContentResolver.html#removeStatusChangeListener(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn removeStatusChangeListener<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentResolver", java.flags == PUBLIC | STATIC, .name == "removeStatusChangeListener", .descriptor == "(Ljava/lang/Object;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/content/ContentResolver\0", "removeStatusChangeListener\0", "(Ljava/lang/Object;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTypeInfo](https://developer.android.com/reference/android/content/ContentResolver.html#getTypeInfo(java.lang.String))
        ///
        /// Required features: "android-content-ContentResolver_MimeTypeInfo", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentResolver_MimeTypeInfo", feature = "java-lang-String")))]
        pub fn getTypeInfo<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::ContentResolver_MimeTypeInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentResolver", java.flags == PUBLIC | FINAL, .name == "getTypeInfo", .descriptor == "(Ljava/lang/String;)Landroid/content/ContentResolver$MimeTypeInfo;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentResolver\0", "getTypeInfo\0", "(Ljava/lang/String;)Landroid/content/ContentResolver$MimeTypeInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [loadThumbnail](https://developer.android.com/reference/android/content/ContentResolver.html#loadThumbnail(android.net.Uri,%20android.util.Size,%20android.os.CancellationSignal))
        ///
        /// Required features: "android-graphics-Bitmap", "android-net-Uri", "android-os-CancellationSignal", "android-util-Size"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Bitmap", feature = "android-net-Uri", feature = "android-os-CancellationSignal", feature = "android-util-Size")))]
        pub fn loadThumbnail<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::util::Size>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::CancellationSignal>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Bitmap>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentResolver", java.flags == PUBLIC, .name == "loadThumbnail", .descriptor == "(Landroid/net/Uri;Landroid/util/Size;Landroid/os/CancellationSignal;)Landroid/graphics/Bitmap;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentResolver\0", "loadThumbnail\0", "(Landroid/net/Uri;Landroid/util/Size;Landroid/os/CancellationSignal;)Landroid/graphics/Bitmap;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [ANY_CURSOR_ITEM_TYPE](https://developer.android.com/reference/android/content/ContentResolver.html#ANY_CURSOR_ITEM_TYPE)
        pub const ANY_CURSOR_ITEM_TYPE : &'static str = "vnd.android.cursor.item/*";

        /// public static final [CURSOR_DIR_BASE_TYPE](https://developer.android.com/reference/android/content/ContentResolver.html#CURSOR_DIR_BASE_TYPE)
        pub const CURSOR_DIR_BASE_TYPE : &'static str = "vnd.android.cursor.dir";

        /// public static final [CURSOR_ITEM_BASE_TYPE](https://developer.android.com/reference/android/content/ContentResolver.html#CURSOR_ITEM_BASE_TYPE)
        pub const CURSOR_ITEM_BASE_TYPE : &'static str = "vnd.android.cursor.item";

        /// public static final [EXTRA_HONORED_ARGS](https://developer.android.com/reference/android/content/ContentResolver.html#EXTRA_HONORED_ARGS)
        pub const EXTRA_HONORED_ARGS : &'static str = "android.content.extra.HONORED_ARGS";

        /// public static final [EXTRA_REFRESH_SUPPORTED](https://developer.android.com/reference/android/content/ContentResolver.html#EXTRA_REFRESH_SUPPORTED)
        pub const EXTRA_REFRESH_SUPPORTED : &'static str = "android.content.extra.REFRESH_SUPPORTED";

        /// public static final [EXTRA_SIZE](https://developer.android.com/reference/android/content/ContentResolver.html#EXTRA_SIZE)
        pub const EXTRA_SIZE : &'static str = "android.content.extra.SIZE";

        /// public static final [EXTRA_TOTAL_COUNT](https://developer.android.com/reference/android/content/ContentResolver.html#EXTRA_TOTAL_COUNT)
        pub const EXTRA_TOTAL_COUNT : &'static str = "android.content.extra.TOTAL_COUNT";

        /// public static final [NOTIFY_SKIP_NOTIFY_FOR_DESCENDANTS](https://developer.android.com/reference/android/content/ContentResolver.html#NOTIFY_SKIP_NOTIFY_FOR_DESCENDANTS)
        pub const NOTIFY_SKIP_NOTIFY_FOR_DESCENDANTS : i32 = 2;

        /// public static final [NOTIFY_SYNC_TO_NETWORK](https://developer.android.com/reference/android/content/ContentResolver.html#NOTIFY_SYNC_TO_NETWORK)
        pub const NOTIFY_SYNC_TO_NETWORK : i32 = 1;

        /// public static final [QUERY_ARG_LIMIT](https://developer.android.com/reference/android/content/ContentResolver.html#QUERY_ARG_LIMIT)
        pub const QUERY_ARG_LIMIT : &'static str = "android:query-arg-limit";

        /// public static final [QUERY_ARG_OFFSET](https://developer.android.com/reference/android/content/ContentResolver.html#QUERY_ARG_OFFSET)
        pub const QUERY_ARG_OFFSET : &'static str = "android:query-arg-offset";

        /// public static final [QUERY_ARG_SORT_COLLATION](https://developer.android.com/reference/android/content/ContentResolver.html#QUERY_ARG_SORT_COLLATION)
        pub const QUERY_ARG_SORT_COLLATION : &'static str = "android:query-arg-sort-collation";

        /// public static final [QUERY_ARG_SORT_COLUMNS](https://developer.android.com/reference/android/content/ContentResolver.html#QUERY_ARG_SORT_COLUMNS)
        pub const QUERY_ARG_SORT_COLUMNS : &'static str = "android:query-arg-sort-columns";

        /// public static final [QUERY_ARG_SORT_DIRECTION](https://developer.android.com/reference/android/content/ContentResolver.html#QUERY_ARG_SORT_DIRECTION)
        pub const QUERY_ARG_SORT_DIRECTION : &'static str = "android:query-arg-sort-direction";

        /// public static final [QUERY_ARG_SQL_SELECTION](https://developer.android.com/reference/android/content/ContentResolver.html#QUERY_ARG_SQL_SELECTION)
        pub const QUERY_ARG_SQL_SELECTION : &'static str = "android:query-arg-sql-selection";

        /// public static final [QUERY_ARG_SQL_SELECTION_ARGS](https://developer.android.com/reference/android/content/ContentResolver.html#QUERY_ARG_SQL_SELECTION_ARGS)
        pub const QUERY_ARG_SQL_SELECTION_ARGS : &'static str = "android:query-arg-sql-selection-args";

        /// public static final [QUERY_ARG_SQL_SORT_ORDER](https://developer.android.com/reference/android/content/ContentResolver.html#QUERY_ARG_SQL_SORT_ORDER)
        pub const QUERY_ARG_SQL_SORT_ORDER : &'static str = "android:query-arg-sql-sort-order";

        /// public static final [QUERY_SORT_DIRECTION_ASCENDING](https://developer.android.com/reference/android/content/ContentResolver.html#QUERY_SORT_DIRECTION_ASCENDING)
        pub const QUERY_SORT_DIRECTION_ASCENDING : i32 = 0;

        /// public static final [QUERY_SORT_DIRECTION_DESCENDING](https://developer.android.com/reference/android/content/ContentResolver.html#QUERY_SORT_DIRECTION_DESCENDING)
        pub const QUERY_SORT_DIRECTION_DESCENDING : i32 = 1;

        /// public static final [SCHEME_ANDROID_RESOURCE](https://developer.android.com/reference/android/content/ContentResolver.html#SCHEME_ANDROID_RESOURCE)
        pub const SCHEME_ANDROID_RESOURCE : &'static str = "android.resource";

        /// public static final [SCHEME_CONTENT](https://developer.android.com/reference/android/content/ContentResolver.html#SCHEME_CONTENT)
        pub const SCHEME_CONTENT : &'static str = "content";

        /// public static final [SCHEME_FILE](https://developer.android.com/reference/android/content/ContentResolver.html#SCHEME_FILE)
        pub const SCHEME_FILE : &'static str = "file";

        /// public static final [SYNC_EXTRAS_ACCOUNT](https://developer.android.com/reference/android/content/ContentResolver.html#SYNC_EXTRAS_ACCOUNT)
        #[deprecated] pub const SYNC_EXTRAS_ACCOUNT : &'static str = "account";

        /// public static final [SYNC_EXTRAS_DISCARD_LOCAL_DELETIONS](https://developer.android.com/reference/android/content/ContentResolver.html#SYNC_EXTRAS_DISCARD_LOCAL_DELETIONS)
        pub const SYNC_EXTRAS_DISCARD_LOCAL_DELETIONS : &'static str = "discard_deletions";

        /// public static final [SYNC_EXTRAS_DO_NOT_RETRY](https://developer.android.com/reference/android/content/ContentResolver.html#SYNC_EXTRAS_DO_NOT_RETRY)
        pub const SYNC_EXTRAS_DO_NOT_RETRY : &'static str = "do_not_retry";

        /// public static final [SYNC_EXTRAS_EXPEDITED](https://developer.android.com/reference/android/content/ContentResolver.html#SYNC_EXTRAS_EXPEDITED)
        pub const SYNC_EXTRAS_EXPEDITED : &'static str = "expedited";

        /// public static final [SYNC_EXTRAS_FORCE](https://developer.android.com/reference/android/content/ContentResolver.html#SYNC_EXTRAS_FORCE)
        #[deprecated] pub const SYNC_EXTRAS_FORCE : &'static str = "force";

        /// public static final [SYNC_EXTRAS_IGNORE_BACKOFF](https://developer.android.com/reference/android/content/ContentResolver.html#SYNC_EXTRAS_IGNORE_BACKOFF)
        pub const SYNC_EXTRAS_IGNORE_BACKOFF : &'static str = "ignore_backoff";

        /// public static final [SYNC_EXTRAS_IGNORE_SETTINGS](https://developer.android.com/reference/android/content/ContentResolver.html#SYNC_EXTRAS_IGNORE_SETTINGS)
        pub const SYNC_EXTRAS_IGNORE_SETTINGS : &'static str = "ignore_settings";

        /// public static final [SYNC_EXTRAS_INITIALIZE](https://developer.android.com/reference/android/content/ContentResolver.html#SYNC_EXTRAS_INITIALIZE)
        pub const SYNC_EXTRAS_INITIALIZE : &'static str = "initialize";

        /// public static final [SYNC_EXTRAS_MANUAL](https://developer.android.com/reference/android/content/ContentResolver.html#SYNC_EXTRAS_MANUAL)
        pub const SYNC_EXTRAS_MANUAL : &'static str = "force";

        /// public static final [SYNC_EXTRAS_OVERRIDE_TOO_MANY_DELETIONS](https://developer.android.com/reference/android/content/ContentResolver.html#SYNC_EXTRAS_OVERRIDE_TOO_MANY_DELETIONS)
        pub const SYNC_EXTRAS_OVERRIDE_TOO_MANY_DELETIONS : &'static str = "deletions_override";

        /// public static final [SYNC_EXTRAS_REQUIRE_CHARGING](https://developer.android.com/reference/android/content/ContentResolver.html#SYNC_EXTRAS_REQUIRE_CHARGING)
        pub const SYNC_EXTRAS_REQUIRE_CHARGING : &'static str = "require_charging";

        /// public static final [SYNC_EXTRAS_UPLOAD](https://developer.android.com/reference/android/content/ContentResolver.html#SYNC_EXTRAS_UPLOAD)
        pub const SYNC_EXTRAS_UPLOAD : &'static str = "upload";

        /// public static final [SYNC_OBSERVER_TYPE_ACTIVE](https://developer.android.com/reference/android/content/ContentResolver.html#SYNC_OBSERVER_TYPE_ACTIVE)
        pub const SYNC_OBSERVER_TYPE_ACTIVE : i32 = 4;

        /// public static final [SYNC_OBSERVER_TYPE_PENDING](https://developer.android.com/reference/android/content/ContentResolver.html#SYNC_OBSERVER_TYPE_PENDING)
        pub const SYNC_OBSERVER_TYPE_PENDING : i32 = 2;

        /// public static final [SYNC_OBSERVER_TYPE_SETTINGS](https://developer.android.com/reference/android/content/ContentResolver.html#SYNC_OBSERVER_TYPE_SETTINGS)
        pub const SYNC_OBSERVER_TYPE_SETTINGS : i32 = 1;
    }
}
