// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-content-Context"))]
__jni_bindgen! {
    /// public class [Context](https://developer.android.com/reference/android/content/Context.html)
    ///
    /// Required feature: android-content-Context
    public class Context ("android/content/Context") extends crate::java::lang::Object {

        /// [Context](https://developer.android.com/reference/android/content/Context.html#Context())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::content::Context>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAssets](https://developer.android.com/reference/android/content/Context.html#getAssets())
        ///
        /// Required features: "android-content-res-AssetManager"
        #[cfg(any(feature = "all", all(feature = "android-content-res-AssetManager")))]
        pub fn getAssets<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::res::AssetManager>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "getAssets", .descriptor == "()Landroid/content/res/AssetManager;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "getAssets\0", "()Landroid/content/res/AssetManager;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getResources](https://developer.android.com/reference/android/content/Context.html#getResources())
        ///
        /// Required features: "android-content-res-Resources"
        #[cfg(any(feature = "all", all(feature = "android-content-res-Resources")))]
        pub fn getResources<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::res::Resources>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "getResources", .descriptor == "()Landroid/content/res/Resources;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "getResources\0", "()Landroid/content/res/Resources;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPackageManager](https://developer.android.com/reference/android/content/Context.html#getPackageManager())
        ///
        /// Required features: "android-content-pm-PackageManager"
        #[cfg(any(feature = "all", all(feature = "android-content-pm-PackageManager")))]
        pub fn getPackageManager<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::pm::PackageManager>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "getPackageManager", .descriptor == "()Landroid/content/pm/PackageManager;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "getPackageManager\0", "()Landroid/content/pm/PackageManager;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getContentResolver](https://developer.android.com/reference/android/content/Context.html#getContentResolver())
        ///
        /// Required features: "android-content-ContentResolver"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentResolver")))]
        pub fn getContentResolver<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::ContentResolver>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "getContentResolver", .descriptor == "()Landroid/content/ContentResolver;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "getContentResolver\0", "()Landroid/content/ContentResolver;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMainLooper](https://developer.android.com/reference/android/content/Context.html#getMainLooper())
        ///
        /// Required features: "android-os-Looper"
        #[cfg(any(feature = "all", all(feature = "android-os-Looper")))]
        pub fn getMainLooper<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Looper>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "getMainLooper", .descriptor == "()Landroid/os/Looper;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "getMainLooper\0", "()Landroid/os/Looper;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMainExecutor](https://developer.android.com/reference/android/content/Context.html#getMainExecutor())
        ///
        /// Required features: "java-util-concurrent-Executor"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-Executor")))]
        pub fn getMainExecutor<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::Executor>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC, .name == "getMainExecutor", .descriptor == "()Ljava/util/concurrent/Executor;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "getMainExecutor\0", "()Ljava/util/concurrent/Executor;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getApplicationContext](https://developer.android.com/reference/android/content/Context.html#getApplicationContext())
        ///
        /// Required features: "android-content-Context"
        #[cfg(any(feature = "all", all(feature = "android-content-Context")))]
        pub fn getApplicationContext<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::Context>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "getApplicationContext", .descriptor == "()Landroid/content/Context;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "getApplicationContext\0", "()Landroid/content/Context;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [registerComponentCallbacks](https://developer.android.com/reference/android/content/Context.html#registerComponentCallbacks(android.content.ComponentCallbacks))
        ///
        /// Required features: "android-content-ComponentCallbacks"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentCallbacks")))]
        pub fn registerComponentCallbacks<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentCallbacks>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC, .name == "registerComponentCallbacks", .descriptor == "(Landroid/content/ComponentCallbacks;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "registerComponentCallbacks\0", "(Landroid/content/ComponentCallbacks;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unregisterComponentCallbacks](https://developer.android.com/reference/android/content/Context.html#unregisterComponentCallbacks(android.content.ComponentCallbacks))
        ///
        /// Required features: "android-content-ComponentCallbacks"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentCallbacks")))]
        pub fn unregisterComponentCallbacks<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentCallbacks>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC, .name == "unregisterComponentCallbacks", .descriptor == "(Landroid/content/ComponentCallbacks;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "unregisterComponentCallbacks\0", "(Landroid/content/ComponentCallbacks;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getText](https://developer.android.com/reference/android/content/Context.html#getText(int))
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn getText<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::CharSequence>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | FINAL, .name == "getText", .descriptor == "(I)Ljava/lang/CharSequence;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "getText\0", "(I)Ljava/lang/CharSequence;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getString](https://developer.android.com/reference/android/content/Context.html#getString(int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getString_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | FINAL, .name == "getString", .descriptor == "(I)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "getString\0", "(I)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getString](https://developer.android.com/reference/android/content/Context.html#getString(int,%20java.lang.Object...))
        ///
        /// Required features: "java-lang-Object", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-lang-String")))]
        pub fn getString_int_Object_array<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::Object, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | FINAL | VARARGS, .name == "getString", .descriptor == "(I[Ljava/lang/Object;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "getString\0", "(I[Ljava/lang/Object;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getColor](https://developer.android.com/reference/android/content/Context.html#getColor(int))
        pub fn getColor<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | FINAL, .name == "getColor", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "getColor\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDrawable](https://developer.android.com/reference/android/content/Context.html#getDrawable(int))
        ///
        /// Required features: "android-graphics-drawable-Drawable"
        #[cfg(any(feature = "all", all(feature = "android-graphics-drawable-Drawable")))]
        pub fn getDrawable<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::drawable::Drawable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | FINAL, .name == "getDrawable", .descriptor == "(I)Landroid/graphics/drawable/Drawable;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "getDrawable\0", "(I)Landroid/graphics/drawable/Drawable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getColorStateList](https://developer.android.com/reference/android/content/Context.html#getColorStateList(int))
        ///
        /// Required features: "android-content-res-ColorStateList"
        #[cfg(any(feature = "all", all(feature = "android-content-res-ColorStateList")))]
        pub fn getColorStateList<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::res::ColorStateList>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | FINAL, .name == "getColorStateList", .descriptor == "(I)Landroid/content/res/ColorStateList;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "getColorStateList\0", "(I)Landroid/content/res/ColorStateList;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTheme](https://developer.android.com/reference/android/content/Context.html#setTheme(int))
        pub fn setTheme<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "setTheme", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "setTheme\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTheme](https://developer.android.com/reference/android/content/Context.html#getTheme())
        ///
        /// Required features: "android-content-res-Resources_Theme"
        #[cfg(any(feature = "all", all(feature = "android-content-res-Resources_Theme")))]
        pub fn getTheme<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::res::Resources_Theme>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "getTheme", .descriptor == "()Landroid/content/res/Resources$Theme;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "getTheme\0", "()Landroid/content/res/Resources$Theme;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [obtainStyledAttributes](https://developer.android.com/reference/android/content/Context.html#obtainStyledAttributes(int%5B%5D))
        ///
        /// Required features: "android-content-res-TypedArray"
        #[cfg(any(feature = "all", all(feature = "android-content-res-TypedArray")))]
        pub fn obtainStyledAttributes_int_array<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::res::TypedArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | FINAL, .name == "obtainStyledAttributes", .descriptor == "([I)Landroid/content/res/TypedArray;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "obtainStyledAttributes\0", "([I)Landroid/content/res/TypedArray;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [obtainStyledAttributes](https://developer.android.com/reference/android/content/Context.html#obtainStyledAttributes(int,%20int%5B%5D))
        ///
        /// Required features: "android-content-res-TypedArray"
        #[cfg(any(feature = "all", all(feature = "android-content-res-TypedArray")))]
        pub fn obtainStyledAttributes_int_int_array<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::res::TypedArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | FINAL, .name == "obtainStyledAttributes", .descriptor == "(I[I)Landroid/content/res/TypedArray;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "obtainStyledAttributes\0", "(I[I)Landroid/content/res/TypedArray;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [obtainStyledAttributes](https://developer.android.com/reference/android/content/Context.html#obtainStyledAttributes(android.util.AttributeSet,%20int%5B%5D))
        ///
        /// Required features: "android-content-res-TypedArray", "android-util-AttributeSet"
        #[cfg(any(feature = "all", all(feature = "android-content-res-TypedArray", feature = "android-util-AttributeSet")))]
        pub fn obtainStyledAttributes_AttributeSet_int_array<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::util::AttributeSet>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::res::TypedArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | FINAL, .name == "obtainStyledAttributes", .descriptor == "(Landroid/util/AttributeSet;[I)Landroid/content/res/TypedArray;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "obtainStyledAttributes\0", "(Landroid/util/AttributeSet;[I)Landroid/content/res/TypedArray;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [obtainStyledAttributes](https://developer.android.com/reference/android/content/Context.html#obtainStyledAttributes(android.util.AttributeSet,%20int%5B%5D,%20int,%20int))
        ///
        /// Required features: "android-content-res-TypedArray", "android-util-AttributeSet"
        #[cfg(any(feature = "all", all(feature = "android-content-res-TypedArray", feature = "android-util-AttributeSet")))]
        pub fn obtainStyledAttributes_AttributeSet_int_array_int_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::util::AttributeSet>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::res::TypedArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | FINAL, .name == "obtainStyledAttributes", .descriptor == "(Landroid/util/AttributeSet;[III)Landroid/content/res/TypedArray;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "obtainStyledAttributes\0", "(Landroid/util/AttributeSet;[III)Landroid/content/res/TypedArray;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getClassLoader](https://developer.android.com/reference/android/content/Context.html#getClassLoader())
        ///
        /// Required features: "java-lang-ClassLoader"
        #[cfg(any(feature = "all", all(feature = "java-lang-ClassLoader")))]
        pub fn getClassLoader<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::ClassLoader>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "getClassLoader", .descriptor == "()Ljava/lang/ClassLoader;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "getClassLoader\0", "()Ljava/lang/ClassLoader;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPackageName](https://developer.android.com/reference/android/content/Context.html#getPackageName())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getPackageName<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "getPackageName", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "getPackageName\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getOpPackageName](https://developer.android.com/reference/android/content/Context.html#getOpPackageName())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getOpPackageName<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC, .name == "getOpPackageName", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "getOpPackageName\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getApplicationInfo](https://developer.android.com/reference/android/content/Context.html#getApplicationInfo())
        ///
        /// Required features: "android-content-pm-ApplicationInfo"
        #[cfg(any(feature = "all", all(feature = "android-content-pm-ApplicationInfo")))]
        pub fn getApplicationInfo<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::pm::ApplicationInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "getApplicationInfo", .descriptor == "()Landroid/content/pm/ApplicationInfo;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "getApplicationInfo\0", "()Landroid/content/pm/ApplicationInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPackageResourcePath](https://developer.android.com/reference/android/content/Context.html#getPackageResourcePath())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getPackageResourcePath<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "getPackageResourcePath", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "getPackageResourcePath\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPackageCodePath](https://developer.android.com/reference/android/content/Context.html#getPackageCodePath())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getPackageCodePath<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "getPackageCodePath", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "getPackageCodePath\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSharedPreferences](https://developer.android.com/reference/android/content/Context.html#getSharedPreferences(java.lang.String,%20int))
        ///
        /// Required features: "android-content-SharedPreferences", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-SharedPreferences", feature = "java-lang-String")))]
        pub fn getSharedPreferences<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::SharedPreferences>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "getSharedPreferences", .descriptor == "(Ljava/lang/String;I)Landroid/content/SharedPreferences;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "getSharedPreferences\0", "(Ljava/lang/String;I)Landroid/content/SharedPreferences;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [moveSharedPreferencesFrom](https://developer.android.com/reference/android/content/Context.html#moveSharedPreferencesFrom(android.content.Context,%20java.lang.String))
        ///
        /// Required features: "android-content-Context", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "java-lang-String")))]
        pub fn moveSharedPreferencesFrom<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "moveSharedPreferencesFrom", .descriptor == "(Landroid/content/Context;Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "moveSharedPreferencesFrom\0", "(Landroid/content/Context;Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [deleteSharedPreferences](https://developer.android.com/reference/android/content/Context.html#deleteSharedPreferences(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn deleteSharedPreferences<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "deleteSharedPreferences", .descriptor == "(Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "deleteSharedPreferences\0", "(Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [openFileInput](https://developer.android.com/reference/android/content/Context.html#openFileInput(java.lang.String))
        ///
        /// Required features: "java-io-FileInputStream", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-io-FileInputStream", feature = "java-lang-String")))]
        pub fn openFileInput<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::io::FileInputStream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "openFileInput", .descriptor == "(Ljava/lang/String;)Ljava/io/FileInputStream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "openFileInput\0", "(Ljava/lang/String;)Ljava/io/FileInputStream;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [openFileOutput](https://developer.android.com/reference/android/content/Context.html#openFileOutput(java.lang.String,%20int))
        ///
        /// Required features: "java-io-FileOutputStream", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-io-FileOutputStream", feature = "java-lang-String")))]
        pub fn openFileOutput<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::io::FileOutputStream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "openFileOutput", .descriptor == "(Ljava/lang/String;I)Ljava/io/FileOutputStream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "openFileOutput\0", "(Ljava/lang/String;I)Ljava/io/FileOutputStream;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [deleteFile](https://developer.android.com/reference/android/content/Context.html#deleteFile(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn deleteFile<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "deleteFile", .descriptor == "(Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "deleteFile\0", "(Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFileStreamPath](https://developer.android.com/reference/android/content/Context.html#getFileStreamPath(java.lang.String))
        ///
        /// Required features: "java-io-File", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-io-File", feature = "java-lang-String")))]
        pub fn getFileStreamPath<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::io::File>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "getFileStreamPath", .descriptor == "(Ljava/lang/String;)Ljava/io/File;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "getFileStreamPath\0", "(Ljava/lang/String;)Ljava/io/File;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDataDir](https://developer.android.com/reference/android/content/Context.html#getDataDir())
        ///
        /// Required features: "java-io-File"
        #[cfg(any(feature = "all", all(feature = "java-io-File")))]
        pub fn getDataDir<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::io::File>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "getDataDir", .descriptor == "()Ljava/io/File;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "getDataDir\0", "()Ljava/io/File;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFilesDir](https://developer.android.com/reference/android/content/Context.html#getFilesDir())
        ///
        /// Required features: "java-io-File"
        #[cfg(any(feature = "all", all(feature = "java-io-File")))]
        pub fn getFilesDir<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::io::File>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "getFilesDir", .descriptor == "()Ljava/io/File;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "getFilesDir\0", "()Ljava/io/File;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNoBackupFilesDir](https://developer.android.com/reference/android/content/Context.html#getNoBackupFilesDir())
        ///
        /// Required features: "java-io-File"
        #[cfg(any(feature = "all", all(feature = "java-io-File")))]
        pub fn getNoBackupFilesDir<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::io::File>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "getNoBackupFilesDir", .descriptor == "()Ljava/io/File;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "getNoBackupFilesDir\0", "()Ljava/io/File;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getExternalFilesDir](https://developer.android.com/reference/android/content/Context.html#getExternalFilesDir(java.lang.String))
        ///
        /// Required features: "java-io-File", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-io-File", feature = "java-lang-String")))]
        pub fn getExternalFilesDir<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::io::File>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "getExternalFilesDir", .descriptor == "(Ljava/lang/String;)Ljava/io/File;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "getExternalFilesDir\0", "(Ljava/lang/String;)Ljava/io/File;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getExternalFilesDirs](https://developer.android.com/reference/android/content/Context.html#getExternalFilesDirs(java.lang.String))
        ///
        /// Required features: "java-io-File", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-io-File", feature = "java-lang-String")))]
        pub fn getExternalFilesDirs<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::io::File, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "getExternalFilesDirs", .descriptor == "(Ljava/lang/String;)[Ljava/io/File;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "getExternalFilesDirs\0", "(Ljava/lang/String;)[Ljava/io/File;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getObbDir](https://developer.android.com/reference/android/content/Context.html#getObbDir())
        ///
        /// Required features: "java-io-File"
        #[cfg(any(feature = "all", all(feature = "java-io-File")))]
        pub fn getObbDir<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::io::File>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "getObbDir", .descriptor == "()Ljava/io/File;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "getObbDir\0", "()Ljava/io/File;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getObbDirs](https://developer.android.com/reference/android/content/Context.html#getObbDirs())
        ///
        /// Required features: "java-io-File"
        #[cfg(any(feature = "all", all(feature = "java-io-File")))]
        pub fn getObbDirs<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::io::File, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "getObbDirs", .descriptor == "()[Ljava/io/File;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "getObbDirs\0", "()[Ljava/io/File;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCacheDir](https://developer.android.com/reference/android/content/Context.html#getCacheDir())
        ///
        /// Required features: "java-io-File"
        #[cfg(any(feature = "all", all(feature = "java-io-File")))]
        pub fn getCacheDir<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::io::File>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "getCacheDir", .descriptor == "()Ljava/io/File;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "getCacheDir\0", "()Ljava/io/File;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCodeCacheDir](https://developer.android.com/reference/android/content/Context.html#getCodeCacheDir())
        ///
        /// Required features: "java-io-File"
        #[cfg(any(feature = "all", all(feature = "java-io-File")))]
        pub fn getCodeCacheDir<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::io::File>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "getCodeCacheDir", .descriptor == "()Ljava/io/File;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "getCodeCacheDir\0", "()Ljava/io/File;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getExternalCacheDir](https://developer.android.com/reference/android/content/Context.html#getExternalCacheDir())
        ///
        /// Required features: "java-io-File"
        #[cfg(any(feature = "all", all(feature = "java-io-File")))]
        pub fn getExternalCacheDir<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::io::File>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "getExternalCacheDir", .descriptor == "()Ljava/io/File;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "getExternalCacheDir\0", "()Ljava/io/File;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getExternalCacheDirs](https://developer.android.com/reference/android/content/Context.html#getExternalCacheDirs())
        ///
        /// Required features: "java-io-File"
        #[cfg(any(feature = "all", all(feature = "java-io-File")))]
        pub fn getExternalCacheDirs<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::io::File, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "getExternalCacheDirs", .descriptor == "()[Ljava/io/File;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "getExternalCacheDirs\0", "()[Ljava/io/File;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getExternalMediaDirs](https://developer.android.com/reference/android/content/Context.html#getExternalMediaDirs())
        ///
        /// Required features: "java-io-File"
        #[cfg(any(feature = "all", all(feature = "java-io-File")))]
        pub fn getExternalMediaDirs<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::io::File, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "getExternalMediaDirs", .descriptor == "()[Ljava/io/File;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "getExternalMediaDirs\0", "()[Ljava/io/File;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [fileList](https://developer.android.com/reference/android/content/Context.html#fileList())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn fileList<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "fileList", .descriptor == "()[Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "fileList\0", "()[Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDir](https://developer.android.com/reference/android/content/Context.html#getDir(java.lang.String,%20int))
        ///
        /// Required features: "java-io-File", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-io-File", feature = "java-lang-String")))]
        pub fn getDir<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::io::File>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "getDir", .descriptor == "(Ljava/lang/String;I)Ljava/io/File;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "getDir\0", "(Ljava/lang/String;I)Ljava/io/File;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [openOrCreateDatabase](https://developer.android.com/reference/android/content/Context.html#openOrCreateDatabase(java.lang.String,%20int,%20android.database.sqlite.SQLiteDatabase.CursorFactory))
        ///
        /// Required features: "android-database-sqlite-SQLiteDatabase", "android-database-sqlite-SQLiteDatabase_CursorFactory", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-database-sqlite-SQLiteDatabase", feature = "android-database-sqlite-SQLiteDatabase_CursorFactory", feature = "java-lang-String")))]
        pub fn openOrCreateDatabase_String_int_CursorFactory<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::database::sqlite::SQLiteDatabase_CursorFactory>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::database::sqlite::SQLiteDatabase>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "openOrCreateDatabase", .descriptor == "(Ljava/lang/String;ILandroid/database/sqlite/SQLiteDatabase$CursorFactory;)Landroid/database/sqlite/SQLiteDatabase;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "openOrCreateDatabase\0", "(Ljava/lang/String;ILandroid/database/sqlite/SQLiteDatabase$CursorFactory;)Landroid/database/sqlite/SQLiteDatabase;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [openOrCreateDatabase](https://developer.android.com/reference/android/content/Context.html#openOrCreateDatabase(java.lang.String,%20int,%20android.database.sqlite.SQLiteDatabase.CursorFactory,%20android.database.DatabaseErrorHandler))
        ///
        /// Required features: "android-database-DatabaseErrorHandler", "android-database-sqlite-SQLiteDatabase", "android-database-sqlite-SQLiteDatabase_CursorFactory", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-database-DatabaseErrorHandler", feature = "android-database-sqlite-SQLiteDatabase", feature = "android-database-sqlite-SQLiteDatabase_CursorFactory", feature = "java-lang-String")))]
        pub fn openOrCreateDatabase_String_int_CursorFactory_DatabaseErrorHandler<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::database::sqlite::SQLiteDatabase_CursorFactory>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::database::DatabaseErrorHandler>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::database::sqlite::SQLiteDatabase>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "openOrCreateDatabase", .descriptor == "(Ljava/lang/String;ILandroid/database/sqlite/SQLiteDatabase$CursorFactory;Landroid/database/DatabaseErrorHandler;)Landroid/database/sqlite/SQLiteDatabase;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "openOrCreateDatabase\0", "(Ljava/lang/String;ILandroid/database/sqlite/SQLiteDatabase$CursorFactory;Landroid/database/DatabaseErrorHandler;)Landroid/database/sqlite/SQLiteDatabase;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [moveDatabaseFrom](https://developer.android.com/reference/android/content/Context.html#moveDatabaseFrom(android.content.Context,%20java.lang.String))
        ///
        /// Required features: "android-content-Context", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "java-lang-String")))]
        pub fn moveDatabaseFrom<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "moveDatabaseFrom", .descriptor == "(Landroid/content/Context;Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "moveDatabaseFrom\0", "(Landroid/content/Context;Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [deleteDatabase](https://developer.android.com/reference/android/content/Context.html#deleteDatabase(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn deleteDatabase<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "deleteDatabase", .descriptor == "(Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "deleteDatabase\0", "(Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDatabasePath](https://developer.android.com/reference/android/content/Context.html#getDatabasePath(java.lang.String))
        ///
        /// Required features: "java-io-File", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-io-File", feature = "java-lang-String")))]
        pub fn getDatabasePath<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::io::File>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "getDatabasePath", .descriptor == "(Ljava/lang/String;)Ljava/io/File;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "getDatabasePath\0", "(Ljava/lang/String;)Ljava/io/File;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [databaseList](https://developer.android.com/reference/android/content/Context.html#databaseList())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn databaseList<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "databaseList", .descriptor == "()[Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "databaseList\0", "()[Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getWallpaper](https://developer.android.com/reference/android/content/Context.html#getWallpaper())
        ///
        /// Required features: "android-graphics-drawable-Drawable"
        #[cfg(any(feature = "all", all(feature = "android-graphics-drawable-Drawable")))]
        #[deprecated] pub fn getWallpaper<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::drawable::Drawable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "getWallpaper", .descriptor == "()Landroid/graphics/drawable/Drawable;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "getWallpaper\0", "()Landroid/graphics/drawable/Drawable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [peekWallpaper](https://developer.android.com/reference/android/content/Context.html#peekWallpaper())
        ///
        /// Required features: "android-graphics-drawable-Drawable"
        #[cfg(any(feature = "all", all(feature = "android-graphics-drawable-Drawable")))]
        #[deprecated] pub fn peekWallpaper<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::drawable::Drawable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "peekWallpaper", .descriptor == "()Landroid/graphics/drawable/Drawable;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "peekWallpaper\0", "()Landroid/graphics/drawable/Drawable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getWallpaperDesiredMinimumWidth](https://developer.android.com/reference/android/content/Context.html#getWallpaperDesiredMinimumWidth())
        #[deprecated] pub fn getWallpaperDesiredMinimumWidth<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "getWallpaperDesiredMinimumWidth", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "getWallpaperDesiredMinimumWidth\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getWallpaperDesiredMinimumHeight](https://developer.android.com/reference/android/content/Context.html#getWallpaperDesiredMinimumHeight())
        #[deprecated] pub fn getWallpaperDesiredMinimumHeight<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "getWallpaperDesiredMinimumHeight", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "getWallpaperDesiredMinimumHeight\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setWallpaper](https://developer.android.com/reference/android/content/Context.html#setWallpaper(android.graphics.Bitmap))
        ///
        /// Required features: "android-graphics-Bitmap"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Bitmap")))]
        #[deprecated] pub fn setWallpaper_Bitmap<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Bitmap>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "setWallpaper", .descriptor == "(Landroid/graphics/Bitmap;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "setWallpaper\0", "(Landroid/graphics/Bitmap;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setWallpaper](https://developer.android.com/reference/android/content/Context.html#setWallpaper(java.io.InputStream))
        ///
        /// Required features: "java-io-InputStream"
        #[cfg(any(feature = "all", all(feature = "java-io-InputStream")))]
        #[deprecated] pub fn setWallpaper_InputStream<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::InputStream>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "setWallpaper", .descriptor == "(Ljava/io/InputStream;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "setWallpaper\0", "(Ljava/io/InputStream;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clearWallpaper](https://developer.android.com/reference/android/content/Context.html#clearWallpaper())
        #[deprecated] pub fn clearWallpaper<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "clearWallpaper", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "clearWallpaper\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [startActivity](https://developer.android.com/reference/android/content/Context.html#startActivity(android.content.Intent))
        ///
        /// Required features: "android-content-Intent"
        #[cfg(any(feature = "all", all(feature = "android-content-Intent")))]
        pub fn startActivity_Intent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "startActivity", .descriptor == "(Landroid/content/Intent;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "startActivity\0", "(Landroid/content/Intent;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [startActivity](https://developer.android.com/reference/android/content/Context.html#startActivity(android.content.Intent,%20android.os.Bundle))
        ///
        /// Required features: "android-content-Intent", "android-os-Bundle"
        #[cfg(any(feature = "all", all(feature = "android-content-Intent", feature = "android-os-Bundle")))]
        pub fn startActivity_Intent_Bundle<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "startActivity", .descriptor == "(Landroid/content/Intent;Landroid/os/Bundle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "startActivity\0", "(Landroid/content/Intent;Landroid/os/Bundle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [startActivities](https://developer.android.com/reference/android/content/Context.html#startActivities(android.content.Intent%5B%5D))
        ///
        /// Required features: "android-content-Intent"
        #[cfg(any(feature = "all", all(feature = "android-content-Intent")))]
        pub fn startActivities_Intent_array<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::android::content::Intent, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "startActivities", .descriptor == "([Landroid/content/Intent;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "startActivities\0", "([Landroid/content/Intent;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [startActivities](https://developer.android.com/reference/android/content/Context.html#startActivities(android.content.Intent%5B%5D,%20android.os.Bundle))
        ///
        /// Required features: "android-content-Intent", "android-os-Bundle"
        #[cfg(any(feature = "all", all(feature = "android-content-Intent", feature = "android-os-Bundle")))]
        pub fn startActivities_Intent_array_Bundle<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::android::content::Intent, crate::java::lang::Throwable>>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "startActivities", .descriptor == "([Landroid/content/Intent;Landroid/os/Bundle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "startActivities\0", "([Landroid/content/Intent;Landroid/os/Bundle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [startIntentSender](https://developer.android.com/reference/android/content/Context.html#startIntentSender(android.content.IntentSender,%20android.content.Intent,%20int,%20int,%20int))
        ///
        /// Required features: "android-content-Intent", "android-content-IntentSender"
        #[cfg(any(feature = "all", all(feature = "android-content-Intent", feature = "android-content-IntentSender")))]
        pub fn startIntentSender_IntentSender_Intent_int_int_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::IntentSender>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>, arg2: i32, arg3: i32, arg4: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "startIntentSender", .descriptor == "(Landroid/content/IntentSender;Landroid/content/Intent;III)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "startIntentSender\0", "(Landroid/content/IntentSender;Landroid/content/Intent;III)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [startIntentSender](https://developer.android.com/reference/android/content/Context.html#startIntentSender(android.content.IntentSender,%20android.content.Intent,%20int,%20int,%20int,%20android.os.Bundle))
        ///
        /// Required features: "android-content-Intent", "android-content-IntentSender", "android-os-Bundle"
        #[cfg(any(feature = "all", all(feature = "android-content-Intent", feature = "android-content-IntentSender", feature = "android-os-Bundle")))]
        pub fn startIntentSender_IntentSender_Intent_int_int_int_Bundle<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::IntentSender>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>, arg2: i32, arg3: i32, arg4: i32, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "startIntentSender", .descriptor == "(Landroid/content/IntentSender;Landroid/content/Intent;IIILandroid/os/Bundle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "startIntentSender\0", "(Landroid/content/IntentSender;Landroid/content/Intent;IIILandroid/os/Bundle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [sendBroadcast](https://developer.android.com/reference/android/content/Context.html#sendBroadcast(android.content.Intent))
        ///
        /// Required features: "android-content-Intent"
        #[cfg(any(feature = "all", all(feature = "android-content-Intent")))]
        pub fn sendBroadcast_Intent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "sendBroadcast", .descriptor == "(Landroid/content/Intent;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "sendBroadcast\0", "(Landroid/content/Intent;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [sendBroadcast](https://developer.android.com/reference/android/content/Context.html#sendBroadcast(android.content.Intent,%20java.lang.String))
        ///
        /// Required features: "android-content-Intent", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-Intent", feature = "java-lang-String")))]
        pub fn sendBroadcast_Intent_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "sendBroadcast", .descriptor == "(Landroid/content/Intent;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "sendBroadcast\0", "(Landroid/content/Intent;Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [sendOrderedBroadcast](https://developer.android.com/reference/android/content/Context.html#sendOrderedBroadcast(android.content.Intent,%20java.lang.String))
        ///
        /// Required features: "android-content-Intent", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-Intent", feature = "java-lang-String")))]
        pub fn sendOrderedBroadcast_Intent_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "sendOrderedBroadcast", .descriptor == "(Landroid/content/Intent;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "sendOrderedBroadcast\0", "(Landroid/content/Intent;Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [sendOrderedBroadcast](https://developer.android.com/reference/android/content/Context.html#sendOrderedBroadcast(android.content.Intent,%20java.lang.String,%20android.content.BroadcastReceiver,%20android.os.Handler,%20int,%20java.lang.String,%20android.os.Bundle))
        ///
        /// Required features: "android-content-BroadcastReceiver", "android-content-Intent", "android-os-Bundle", "android-os-Handler", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-BroadcastReceiver", feature = "android-content-Intent", feature = "android-os-Bundle", feature = "android-os-Handler", feature = "java-lang-String")))]
        pub fn sendOrderedBroadcast_Intent_String_BroadcastReceiver_Handler_int_String_Bundle<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::BroadcastReceiver>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>, arg4: i32, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "sendOrderedBroadcast", .descriptor == "(Landroid/content/Intent;Ljava/lang/String;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5.into()), __jni_bindgen::AsJValue::as_jvalue(&arg6.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "sendOrderedBroadcast\0", "(Landroid/content/Intent;Ljava/lang/String;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [sendBroadcastAsUser](https://developer.android.com/reference/android/content/Context.html#sendBroadcastAsUser(android.content.Intent,%20android.os.UserHandle))
        ///
        /// Required features: "android-content-Intent", "android-os-UserHandle"
        #[cfg(any(feature = "all", all(feature = "android-content-Intent", feature = "android-os-UserHandle")))]
        pub fn sendBroadcastAsUser_Intent_UserHandle<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::UserHandle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "sendBroadcastAsUser", .descriptor == "(Landroid/content/Intent;Landroid/os/UserHandle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "sendBroadcastAsUser\0", "(Landroid/content/Intent;Landroid/os/UserHandle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [sendBroadcastAsUser](https://developer.android.com/reference/android/content/Context.html#sendBroadcastAsUser(android.content.Intent,%20android.os.UserHandle,%20java.lang.String))
        ///
        /// Required features: "android-content-Intent", "android-os-UserHandle", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-Intent", feature = "android-os-UserHandle", feature = "java-lang-String")))]
        pub fn sendBroadcastAsUser_Intent_UserHandle_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::UserHandle>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "sendBroadcastAsUser", .descriptor == "(Landroid/content/Intent;Landroid/os/UserHandle;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "sendBroadcastAsUser\0", "(Landroid/content/Intent;Landroid/os/UserHandle;Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [sendOrderedBroadcastAsUser](https://developer.android.com/reference/android/content/Context.html#sendOrderedBroadcastAsUser(android.content.Intent,%20android.os.UserHandle,%20java.lang.String,%20android.content.BroadcastReceiver,%20android.os.Handler,%20int,%20java.lang.String,%20android.os.Bundle))
        ///
        /// Required features: "android-content-BroadcastReceiver", "android-content-Intent", "android-os-Bundle", "android-os-Handler", "android-os-UserHandle", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-BroadcastReceiver", feature = "android-content-Intent", feature = "android-os-Bundle", feature = "android-os-Handler", feature = "android-os-UserHandle", feature = "java-lang-String")))]
        pub fn sendOrderedBroadcastAsUser<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::UserHandle>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::BroadcastReceiver>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>, arg5: i32, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg7: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "sendOrderedBroadcastAsUser", .descriptor == "(Landroid/content/Intent;Landroid/os/UserHandle;Ljava/lang/String;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6.into()), __jni_bindgen::AsJValue::as_jvalue(&arg7.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "sendOrderedBroadcastAsUser\0", "(Landroid/content/Intent;Landroid/os/UserHandle;Ljava/lang/String;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [sendStickyBroadcast](https://developer.android.com/reference/android/content/Context.html#sendStickyBroadcast(android.content.Intent))
        ///
        /// Required features: "android-content-Intent"
        #[cfg(any(feature = "all", all(feature = "android-content-Intent")))]
        #[deprecated] pub fn sendStickyBroadcast<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "sendStickyBroadcast", .descriptor == "(Landroid/content/Intent;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "sendStickyBroadcast\0", "(Landroid/content/Intent;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [sendStickyOrderedBroadcast](https://developer.android.com/reference/android/content/Context.html#sendStickyOrderedBroadcast(android.content.Intent,%20android.content.BroadcastReceiver,%20android.os.Handler,%20int,%20java.lang.String,%20android.os.Bundle))
        ///
        /// Required features: "android-content-BroadcastReceiver", "android-content-Intent", "android-os-Bundle", "android-os-Handler", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-BroadcastReceiver", feature = "android-content-Intent", feature = "android-os-Bundle", feature = "android-os-Handler", feature = "java-lang-String")))]
        #[deprecated] pub fn sendStickyOrderedBroadcast<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::BroadcastReceiver>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>, arg3: i32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "sendStickyOrderedBroadcast", .descriptor == "(Landroid/content/Intent;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "sendStickyOrderedBroadcast\0", "(Landroid/content/Intent;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeStickyBroadcast](https://developer.android.com/reference/android/content/Context.html#removeStickyBroadcast(android.content.Intent))
        ///
        /// Required features: "android-content-Intent"
        #[cfg(any(feature = "all", all(feature = "android-content-Intent")))]
        #[deprecated] pub fn removeStickyBroadcast<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "removeStickyBroadcast", .descriptor == "(Landroid/content/Intent;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "removeStickyBroadcast\0", "(Landroid/content/Intent;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [sendStickyBroadcastAsUser](https://developer.android.com/reference/android/content/Context.html#sendStickyBroadcastAsUser(android.content.Intent,%20android.os.UserHandle))
        ///
        /// Required features: "android-content-Intent", "android-os-UserHandle"
        #[cfg(any(feature = "all", all(feature = "android-content-Intent", feature = "android-os-UserHandle")))]
        #[deprecated] pub fn sendStickyBroadcastAsUser<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::UserHandle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "sendStickyBroadcastAsUser", .descriptor == "(Landroid/content/Intent;Landroid/os/UserHandle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "sendStickyBroadcastAsUser\0", "(Landroid/content/Intent;Landroid/os/UserHandle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [sendStickyOrderedBroadcastAsUser](https://developer.android.com/reference/android/content/Context.html#sendStickyOrderedBroadcastAsUser(android.content.Intent,%20android.os.UserHandle,%20android.content.BroadcastReceiver,%20android.os.Handler,%20int,%20java.lang.String,%20android.os.Bundle))
        ///
        /// Required features: "android-content-BroadcastReceiver", "android-content-Intent", "android-os-Bundle", "android-os-Handler", "android-os-UserHandle", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-BroadcastReceiver", feature = "android-content-Intent", feature = "android-os-Bundle", feature = "android-os-Handler", feature = "android-os-UserHandle", feature = "java-lang-String")))]
        #[deprecated] pub fn sendStickyOrderedBroadcastAsUser<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::UserHandle>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::BroadcastReceiver>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>, arg4: i32, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "sendStickyOrderedBroadcastAsUser", .descriptor == "(Landroid/content/Intent;Landroid/os/UserHandle;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5.into()), __jni_bindgen::AsJValue::as_jvalue(&arg6.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "sendStickyOrderedBroadcastAsUser\0", "(Landroid/content/Intent;Landroid/os/UserHandle;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeStickyBroadcastAsUser](https://developer.android.com/reference/android/content/Context.html#removeStickyBroadcastAsUser(android.content.Intent,%20android.os.UserHandle))
        ///
        /// Required features: "android-content-Intent", "android-os-UserHandle"
        #[cfg(any(feature = "all", all(feature = "android-content-Intent", feature = "android-os-UserHandle")))]
        #[deprecated] pub fn removeStickyBroadcastAsUser<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::UserHandle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "removeStickyBroadcastAsUser", .descriptor == "(Landroid/content/Intent;Landroid/os/UserHandle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "removeStickyBroadcastAsUser\0", "(Landroid/content/Intent;Landroid/os/UserHandle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [registerReceiver](https://developer.android.com/reference/android/content/Context.html#registerReceiver(android.content.BroadcastReceiver,%20android.content.IntentFilter))
        ///
        /// Required features: "android-content-BroadcastReceiver", "android-content-Intent", "android-content-IntentFilter"
        #[cfg(any(feature = "all", all(feature = "android-content-BroadcastReceiver", feature = "android-content-Intent", feature = "android-content-IntentFilter")))]
        pub fn registerReceiver_BroadcastReceiver_IntentFilter<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::BroadcastReceiver>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::IntentFilter>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::Intent>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "registerReceiver", .descriptor == "(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;)Landroid/content/Intent;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "registerReceiver\0", "(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;)Landroid/content/Intent;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [registerReceiver](https://developer.android.com/reference/android/content/Context.html#registerReceiver(android.content.BroadcastReceiver,%20android.content.IntentFilter,%20int))
        ///
        /// Required features: "android-content-BroadcastReceiver", "android-content-Intent", "android-content-IntentFilter"
        #[cfg(any(feature = "all", all(feature = "android-content-BroadcastReceiver", feature = "android-content-Intent", feature = "android-content-IntentFilter")))]
        pub fn registerReceiver_BroadcastReceiver_IntentFilter_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::BroadcastReceiver>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::IntentFilter>>, arg2: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::Intent>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "registerReceiver", .descriptor == "(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;I)Landroid/content/Intent;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "registerReceiver\0", "(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;I)Landroid/content/Intent;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [registerReceiver](https://developer.android.com/reference/android/content/Context.html#registerReceiver(android.content.BroadcastReceiver,%20android.content.IntentFilter,%20java.lang.String,%20android.os.Handler))
        ///
        /// Required features: "android-content-BroadcastReceiver", "android-content-Intent", "android-content-IntentFilter", "android-os-Handler", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-BroadcastReceiver", feature = "android-content-Intent", feature = "android-content-IntentFilter", feature = "android-os-Handler", feature = "java-lang-String")))]
        pub fn registerReceiver_BroadcastReceiver_IntentFilter_String_Handler<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::BroadcastReceiver>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::IntentFilter>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::Intent>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "registerReceiver", .descriptor == "(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;Ljava/lang/String;Landroid/os/Handler;)Landroid/content/Intent;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "registerReceiver\0", "(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;Ljava/lang/String;Landroid/os/Handler;)Landroid/content/Intent;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [registerReceiver](https://developer.android.com/reference/android/content/Context.html#registerReceiver(android.content.BroadcastReceiver,%20android.content.IntentFilter,%20java.lang.String,%20android.os.Handler,%20int))
        ///
        /// Required features: "android-content-BroadcastReceiver", "android-content-Intent", "android-content-IntentFilter", "android-os-Handler", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-BroadcastReceiver", feature = "android-content-Intent", feature = "android-content-IntentFilter", feature = "android-os-Handler", feature = "java-lang-String")))]
        pub fn registerReceiver_BroadcastReceiver_IntentFilter_String_Handler_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::BroadcastReceiver>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::IntentFilter>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>, arg4: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::Intent>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "registerReceiver", .descriptor == "(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;Ljava/lang/String;Landroid/os/Handler;I)Landroid/content/Intent;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "registerReceiver\0", "(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;Ljava/lang/String;Landroid/os/Handler;I)Landroid/content/Intent;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unregisterReceiver](https://developer.android.com/reference/android/content/Context.html#unregisterReceiver(android.content.BroadcastReceiver))
        ///
        /// Required features: "android-content-BroadcastReceiver"
        #[cfg(any(feature = "all", all(feature = "android-content-BroadcastReceiver")))]
        pub fn unregisterReceiver<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::BroadcastReceiver>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "unregisterReceiver", .descriptor == "(Landroid/content/BroadcastReceiver;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "unregisterReceiver\0", "(Landroid/content/BroadcastReceiver;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [startService](https://developer.android.com/reference/android/content/Context.html#startService(android.content.Intent))
        ///
        /// Required features: "android-content-ComponentName", "android-content-Intent"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "android-content-Intent")))]
        pub fn startService<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::ComponentName>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "startService", .descriptor == "(Landroid/content/Intent;)Landroid/content/ComponentName;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "startService\0", "(Landroid/content/Intent;)Landroid/content/ComponentName;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [startForegroundService](https://developer.android.com/reference/android/content/Context.html#startForegroundService(android.content.Intent))
        ///
        /// Required features: "android-content-ComponentName", "android-content-Intent"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "android-content-Intent")))]
        pub fn startForegroundService<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::ComponentName>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "startForegroundService", .descriptor == "(Landroid/content/Intent;)Landroid/content/ComponentName;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "startForegroundService\0", "(Landroid/content/Intent;)Landroid/content/ComponentName;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [stopService](https://developer.android.com/reference/android/content/Context.html#stopService(android.content.Intent))
        ///
        /// Required features: "android-content-Intent"
        #[cfg(any(feature = "all", all(feature = "android-content-Intent")))]
        pub fn stopService<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "stopService", .descriptor == "(Landroid/content/Intent;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "stopService\0", "(Landroid/content/Intent;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [bindService](https://developer.android.com/reference/android/content/Context.html#bindService(android.content.Intent,%20android.content.ServiceConnection,%20int))
        ///
        /// Required features: "android-content-Intent", "android-content-ServiceConnection"
        #[cfg(any(feature = "all", all(feature = "android-content-Intent", feature = "android-content-ServiceConnection")))]
        pub fn bindService_Intent_ServiceConnection_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ServiceConnection>>, arg2: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "bindService", .descriptor == "(Landroid/content/Intent;Landroid/content/ServiceConnection;I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "bindService\0", "(Landroid/content/Intent;Landroid/content/ServiceConnection;I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [bindService](https://developer.android.com/reference/android/content/Context.html#bindService(android.content.Intent,%20int,%20java.util.concurrent.Executor,%20android.content.ServiceConnection))
        ///
        /// Required features: "android-content-Intent", "android-content-ServiceConnection", "java-util-concurrent-Executor"
        #[cfg(any(feature = "all", all(feature = "android-content-Intent", feature = "android-content-ServiceConnection", feature = "java-util-concurrent-Executor")))]
        pub fn bindService_Intent_int_Executor_ServiceConnection<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ServiceConnection>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC, .name == "bindService", .descriptor == "(Landroid/content/Intent;ILjava/util/concurrent/Executor;Landroid/content/ServiceConnection;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "bindService\0", "(Landroid/content/Intent;ILjava/util/concurrent/Executor;Landroid/content/ServiceConnection;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [bindIsolatedService](https://developer.android.com/reference/android/content/Context.html#bindIsolatedService(android.content.Intent,%20int,%20java.lang.String,%20java.util.concurrent.Executor,%20android.content.ServiceConnection))
        ///
        /// Required features: "android-content-Intent", "android-content-ServiceConnection", "java-lang-String", "java-util-concurrent-Executor"
        #[cfg(any(feature = "all", all(feature = "android-content-Intent", feature = "android-content-ServiceConnection", feature = "java-lang-String", feature = "java-util-concurrent-Executor")))]
        pub fn bindIsolatedService<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ServiceConnection>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC, .name == "bindIsolatedService", .descriptor == "(Landroid/content/Intent;ILjava/lang/String;Ljava/util/concurrent/Executor;Landroid/content/ServiceConnection;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "bindIsolatedService\0", "(Landroid/content/Intent;ILjava/lang/String;Ljava/util/concurrent/Executor;Landroid/content/ServiceConnection;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateServiceGroup](https://developer.android.com/reference/android/content/Context.html#updateServiceGroup(android.content.ServiceConnection,%20int,%20int))
        ///
        /// Required features: "android-content-ServiceConnection"
        #[cfg(any(feature = "all", all(feature = "android-content-ServiceConnection")))]
        pub fn updateServiceGroup<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ServiceConnection>>, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC, .name == "updateServiceGroup", .descriptor == "(Landroid/content/ServiceConnection;II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "updateServiceGroup\0", "(Landroid/content/ServiceConnection;II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unbindService](https://developer.android.com/reference/android/content/Context.html#unbindService(android.content.ServiceConnection))
        ///
        /// Required features: "android-content-ServiceConnection"
        #[cfg(any(feature = "all", all(feature = "android-content-ServiceConnection")))]
        pub fn unbindService<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ServiceConnection>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "unbindService", .descriptor == "(Landroid/content/ServiceConnection;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "unbindService\0", "(Landroid/content/ServiceConnection;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [startInstrumentation](https://developer.android.com/reference/android/content/Context.html#startInstrumentation(android.content.ComponentName,%20java.lang.String,%20android.os.Bundle))
        ///
        /// Required features: "android-content-ComponentName", "android-os-Bundle", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "android-os-Bundle", feature = "java-lang-String")))]
        pub fn startInstrumentation<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "startInstrumentation", .descriptor == "(Landroid/content/ComponentName;Ljava/lang/String;Landroid/os/Bundle;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "startInstrumentation\0", "(Landroid/content/ComponentName;Ljava/lang/String;Landroid/os/Bundle;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSystemService](https://developer.android.com/reference/android/content/Context.html#getSystemService(java.lang.String))
        ///
        /// Required features: "java-lang-Object", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-lang-String")))]
        pub fn getSystemService_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "getSystemService", .descriptor == "(Ljava/lang/String;)Ljava/lang/Object;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "getSystemService\0", "(Ljava/lang/String;)Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSystemService](https://developer.android.com/reference/android/content/Context.html#getSystemService(java.lang.Class))
        ///
        /// Required features: "java-lang-Class", "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-lang-Object")))]
        pub fn getSystemService_Class<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | FINAL, .name == "getSystemService", .descriptor == "(Ljava/lang/Class;)Ljava/lang/Object;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "getSystemService\0", "(Ljava/lang/Class;)Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSystemServiceName](https://developer.android.com/reference/android/content/Context.html#getSystemServiceName(java.lang.Class))
        ///
        /// Required features: "java-lang-Class", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-lang-String")))]
        pub fn getSystemServiceName<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "getSystemServiceName", .descriptor == "(Ljava/lang/Class;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "getSystemServiceName\0", "(Ljava/lang/Class;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [checkPermission](https://developer.android.com/reference/android/content/Context.html#checkPermission(java.lang.String,%20int,%20int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn checkPermission<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "checkPermission", .descriptor == "(Ljava/lang/String;II)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "checkPermission\0", "(Ljava/lang/String;II)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [checkCallingPermission](https://developer.android.com/reference/android/content/Context.html#checkCallingPermission(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn checkCallingPermission<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "checkCallingPermission", .descriptor == "(Ljava/lang/String;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "checkCallingPermission\0", "(Ljava/lang/String;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [checkCallingOrSelfPermission](https://developer.android.com/reference/android/content/Context.html#checkCallingOrSelfPermission(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn checkCallingOrSelfPermission<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "checkCallingOrSelfPermission", .descriptor == "(Ljava/lang/String;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "checkCallingOrSelfPermission\0", "(Ljava/lang/String;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [checkSelfPermission](https://developer.android.com/reference/android/content/Context.html#checkSelfPermission(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn checkSelfPermission<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "checkSelfPermission", .descriptor == "(Ljava/lang/String;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "checkSelfPermission\0", "(Ljava/lang/String;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [enforcePermission](https://developer.android.com/reference/android/content/Context.html#enforcePermission(java.lang.String,%20int,%20int,%20java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn enforcePermission<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "enforcePermission", .descriptor == "(Ljava/lang/String;IILjava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "enforcePermission\0", "(Ljava/lang/String;IILjava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [enforceCallingPermission](https://developer.android.com/reference/android/content/Context.html#enforceCallingPermission(java.lang.String,%20java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn enforceCallingPermission<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "enforceCallingPermission", .descriptor == "(Ljava/lang/String;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "enforceCallingPermission\0", "(Ljava/lang/String;Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [enforceCallingOrSelfPermission](https://developer.android.com/reference/android/content/Context.html#enforceCallingOrSelfPermission(java.lang.String,%20java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn enforceCallingOrSelfPermission<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "enforceCallingOrSelfPermission", .descriptor == "(Ljava/lang/String;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "enforceCallingOrSelfPermission\0", "(Ljava/lang/String;Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [grantUriPermission](https://developer.android.com/reference/android/content/Context.html#grantUriPermission(java.lang.String,%20android.net.Uri,%20int))
        ///
        /// Required features: "android-net-Uri", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri", feature = "java-lang-String")))]
        pub fn grantUriPermission<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "grantUriPermission", .descriptor == "(Ljava/lang/String;Landroid/net/Uri;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "grantUriPermission\0", "(Ljava/lang/String;Landroid/net/Uri;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [revokeUriPermission](https://developer.android.com/reference/android/content/Context.html#revokeUriPermission(android.net.Uri,%20int))
        ///
        /// Required features: "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri")))]
        pub fn revokeUriPermission_Uri_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "revokeUriPermission", .descriptor == "(Landroid/net/Uri;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "revokeUriPermission\0", "(Landroid/net/Uri;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [revokeUriPermission](https://developer.android.com/reference/android/content/Context.html#revokeUriPermission(java.lang.String,%20android.net.Uri,%20int))
        ///
        /// Required features: "android-net-Uri", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri", feature = "java-lang-String")))]
        pub fn revokeUriPermission_String_Uri_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "revokeUriPermission", .descriptor == "(Ljava/lang/String;Landroid/net/Uri;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "revokeUriPermission\0", "(Ljava/lang/String;Landroid/net/Uri;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [checkUriPermission](https://developer.android.com/reference/android/content/Context.html#checkUriPermission(android.net.Uri,%20int,%20int,%20int))
        ///
        /// Required features: "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri")))]
        pub fn checkUriPermission_Uri_int_int_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg1: i32, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "checkUriPermission", .descriptor == "(Landroid/net/Uri;III)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "checkUriPermission\0", "(Landroid/net/Uri;III)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [checkCallingUriPermission](https://developer.android.com/reference/android/content/Context.html#checkCallingUriPermission(android.net.Uri,%20int))
        ///
        /// Required features: "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri")))]
        pub fn checkCallingUriPermission<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg1: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "checkCallingUriPermission", .descriptor == "(Landroid/net/Uri;I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "checkCallingUriPermission\0", "(Landroid/net/Uri;I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [checkCallingOrSelfUriPermission](https://developer.android.com/reference/android/content/Context.html#checkCallingOrSelfUriPermission(android.net.Uri,%20int))
        ///
        /// Required features: "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri")))]
        pub fn checkCallingOrSelfUriPermission<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg1: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "checkCallingOrSelfUriPermission", .descriptor == "(Landroid/net/Uri;I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "checkCallingOrSelfUriPermission\0", "(Landroid/net/Uri;I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [checkUriPermission](https://developer.android.com/reference/android/content/Context.html#checkUriPermission(android.net.Uri,%20java.lang.String,%20java.lang.String,%20int,%20int,%20int))
        ///
        /// Required features: "android-net-Uri", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri", feature = "java-lang-String")))]
        pub fn checkUriPermission_Uri_String_String_int_int_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg3: i32, arg4: i32, arg5: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "checkUriPermission", .descriptor == "(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;III)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "checkUriPermission\0", "(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;III)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [enforceUriPermission](https://developer.android.com/reference/android/content/Context.html#enforceUriPermission(android.net.Uri,%20int,%20int,%20int,%20java.lang.String))
        ///
        /// Required features: "android-net-Uri", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri", feature = "java-lang-String")))]
        pub fn enforceUriPermission_Uri_int_int_int_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg1: i32, arg2: i32, arg3: i32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "enforceUriPermission", .descriptor == "(Landroid/net/Uri;IIILjava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "enforceUriPermission\0", "(Landroid/net/Uri;IIILjava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [enforceCallingUriPermission](https://developer.android.com/reference/android/content/Context.html#enforceCallingUriPermission(android.net.Uri,%20int,%20java.lang.String))
        ///
        /// Required features: "android-net-Uri", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri", feature = "java-lang-String")))]
        pub fn enforceCallingUriPermission<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "enforceCallingUriPermission", .descriptor == "(Landroid/net/Uri;ILjava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "enforceCallingUriPermission\0", "(Landroid/net/Uri;ILjava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [enforceCallingOrSelfUriPermission](https://developer.android.com/reference/android/content/Context.html#enforceCallingOrSelfUriPermission(android.net.Uri,%20int,%20java.lang.String))
        ///
        /// Required features: "android-net-Uri", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri", feature = "java-lang-String")))]
        pub fn enforceCallingOrSelfUriPermission<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "enforceCallingOrSelfUriPermission", .descriptor == "(Landroid/net/Uri;ILjava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "enforceCallingOrSelfUriPermission\0", "(Landroid/net/Uri;ILjava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [enforceUriPermission](https://developer.android.com/reference/android/content/Context.html#enforceUriPermission(android.net.Uri,%20java.lang.String,%20java.lang.String,%20int,%20int,%20int,%20java.lang.String))
        ///
        /// Required features: "android-net-Uri", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri", feature = "java-lang-String")))]
        pub fn enforceUriPermission_Uri_String_String_int_int_int_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg3: i32, arg4: i32, arg5: i32, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "enforceUriPermission", .descriptor == "(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;IIILjava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "enforceUriPermission\0", "(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;IIILjava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createPackageContext](https://developer.android.com/reference/android/content/Context.html#createPackageContext(java.lang.String,%20int))
        ///
        /// Required features: "android-content-Context", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "java-lang-String")))]
        pub fn createPackageContext<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::Context>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "createPackageContext", .descriptor == "(Ljava/lang/String;I)Landroid/content/Context;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "createPackageContext\0", "(Ljava/lang/String;I)Landroid/content/Context;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createContextForSplit](https://developer.android.com/reference/android/content/Context.html#createContextForSplit(java.lang.String))
        ///
        /// Required features: "android-content-Context", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "java-lang-String")))]
        pub fn createContextForSplit<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::Context>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "createContextForSplit", .descriptor == "(Ljava/lang/String;)Landroid/content/Context;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "createContextForSplit\0", "(Ljava/lang/String;)Landroid/content/Context;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createConfigurationContext](https://developer.android.com/reference/android/content/Context.html#createConfigurationContext(android.content.res.Configuration))
        ///
        /// Required features: "android-content-Context", "android-content-res-Configuration"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-content-res-Configuration")))]
        pub fn createConfigurationContext<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::res::Configuration>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::Context>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "createConfigurationContext", .descriptor == "(Landroid/content/res/Configuration;)Landroid/content/Context;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "createConfigurationContext\0", "(Landroid/content/res/Configuration;)Landroid/content/Context;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createDisplayContext](https://developer.android.com/reference/android/content/Context.html#createDisplayContext(android.view.Display))
        ///
        /// Required features: "android-content-Context", "android-view-Display"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-view-Display")))]
        pub fn createDisplayContext<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::Display>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::Context>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "createDisplayContext", .descriptor == "(Landroid/view/Display;)Landroid/content/Context;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "createDisplayContext\0", "(Landroid/view/Display;)Landroid/content/Context;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createDeviceProtectedStorageContext](https://developer.android.com/reference/android/content/Context.html#createDeviceProtectedStorageContext())
        ///
        /// Required features: "android-content-Context"
        #[cfg(any(feature = "all", all(feature = "android-content-Context")))]
        pub fn createDeviceProtectedStorageContext<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::Context>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "createDeviceProtectedStorageContext", .descriptor == "()Landroid/content/Context;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "createDeviceProtectedStorageContext\0", "()Landroid/content/Context;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isRestricted](https://developer.android.com/reference/android/content/Context.html#isRestricted())
        pub fn isRestricted<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC, .name == "isRestricted", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "isRestricted\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isDeviceProtectedStorage](https://developer.android.com/reference/android/content/Context.html#isDeviceProtectedStorage())
        pub fn isDeviceProtectedStorage<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/Context", java.flags == PUBLIC | ABSTRACT, .name == "isDeviceProtectedStorage", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/Context\0", "isDeviceProtectedStorage\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [ACCESSIBILITY_SERVICE](https://developer.android.com/reference/android/content/Context.html#ACCESSIBILITY_SERVICE)
        pub const ACCESSIBILITY_SERVICE : &'static str = "accessibility";

        /// public static final [ACCOUNT_SERVICE](https://developer.android.com/reference/android/content/Context.html#ACCOUNT_SERVICE)
        pub const ACCOUNT_SERVICE : &'static str = "account";

        /// public static final [ACTIVITY_SERVICE](https://developer.android.com/reference/android/content/Context.html#ACTIVITY_SERVICE)
        pub const ACTIVITY_SERVICE : &'static str = "activity";

        /// public static final [ALARM_SERVICE](https://developer.android.com/reference/android/content/Context.html#ALARM_SERVICE)
        pub const ALARM_SERVICE : &'static str = "alarm";

        /// public static final [APPWIDGET_SERVICE](https://developer.android.com/reference/android/content/Context.html#APPWIDGET_SERVICE)
        pub const APPWIDGET_SERVICE : &'static str = "appwidget";

        /// public static final [APP_OPS_SERVICE](https://developer.android.com/reference/android/content/Context.html#APP_OPS_SERVICE)
        pub const APP_OPS_SERVICE : &'static str = "appops";

        /// public static final [AUDIO_SERVICE](https://developer.android.com/reference/android/content/Context.html#AUDIO_SERVICE)
        pub const AUDIO_SERVICE : &'static str = "audio";

        /// public static final [BATTERY_SERVICE](https://developer.android.com/reference/android/content/Context.html#BATTERY_SERVICE)
        pub const BATTERY_SERVICE : &'static str = "batterymanager";

        /// public static final [BIND_ABOVE_CLIENT](https://developer.android.com/reference/android/content/Context.html#BIND_ABOVE_CLIENT)
        pub const BIND_ABOVE_CLIENT : i32 = 8;

        /// public static final [BIND_ADJUST_WITH_ACTIVITY](https://developer.android.com/reference/android/content/Context.html#BIND_ADJUST_WITH_ACTIVITY)
        pub const BIND_ADJUST_WITH_ACTIVITY : i32 = 128;

        /// public static final [BIND_ALLOW_OOM_MANAGEMENT](https://developer.android.com/reference/android/content/Context.html#BIND_ALLOW_OOM_MANAGEMENT)
        pub const BIND_ALLOW_OOM_MANAGEMENT : i32 = 16;

        /// public static final [BIND_AUTO_CREATE](https://developer.android.com/reference/android/content/Context.html#BIND_AUTO_CREATE)
        pub const BIND_AUTO_CREATE : i32 = 1;

        /// public static final [BIND_DEBUG_UNBIND](https://developer.android.com/reference/android/content/Context.html#BIND_DEBUG_UNBIND)
        pub const BIND_DEBUG_UNBIND : i32 = 2;

        /// public static final [BIND_EXTERNAL_SERVICE](https://developer.android.com/reference/android/content/Context.html#BIND_EXTERNAL_SERVICE)
        pub const BIND_EXTERNAL_SERVICE : i32 = -2147483648;

        /// public static final [BIND_IMPORTANT](https://developer.android.com/reference/android/content/Context.html#BIND_IMPORTANT)
        pub const BIND_IMPORTANT : i32 = 64;

        /// public static final [BIND_INCLUDE_CAPABILITIES](https://developer.android.com/reference/android/content/Context.html#BIND_INCLUDE_CAPABILITIES)
        pub const BIND_INCLUDE_CAPABILITIES : i32 = 4096;

        /// public static final [BIND_NOT_FOREGROUND](https://developer.android.com/reference/android/content/Context.html#BIND_NOT_FOREGROUND)
        pub const BIND_NOT_FOREGROUND : i32 = 4;

        /// public static final [BIND_NOT_PERCEPTIBLE](https://developer.android.com/reference/android/content/Context.html#BIND_NOT_PERCEPTIBLE)
        pub const BIND_NOT_PERCEPTIBLE : i32 = 256;

        /// public static final [BIND_WAIVE_PRIORITY](https://developer.android.com/reference/android/content/Context.html#BIND_WAIVE_PRIORITY)
        pub const BIND_WAIVE_PRIORITY : i32 = 32;

        /// public static final [BIOMETRIC_SERVICE](https://developer.android.com/reference/android/content/Context.html#BIOMETRIC_SERVICE)
        pub const BIOMETRIC_SERVICE : &'static str = "biometric";

        /// public static final [BLUETOOTH_SERVICE](https://developer.android.com/reference/android/content/Context.html#BLUETOOTH_SERVICE)
        pub const BLUETOOTH_SERVICE : &'static str = "bluetooth";

        /// public static final [CAMERA_SERVICE](https://developer.android.com/reference/android/content/Context.html#CAMERA_SERVICE)
        pub const CAMERA_SERVICE : &'static str = "camera";

        /// public static final [CAPTIONING_SERVICE](https://developer.android.com/reference/android/content/Context.html#CAPTIONING_SERVICE)
        pub const CAPTIONING_SERVICE : &'static str = "captioning";

        /// public static final [CARRIER_CONFIG_SERVICE](https://developer.android.com/reference/android/content/Context.html#CARRIER_CONFIG_SERVICE)
        pub const CARRIER_CONFIG_SERVICE : &'static str = "carrier_config";

        /// public static final [CLIPBOARD_SERVICE](https://developer.android.com/reference/android/content/Context.html#CLIPBOARD_SERVICE)
        pub const CLIPBOARD_SERVICE : &'static str = "clipboard";

        /// public static final [COMPANION_DEVICE_SERVICE](https://developer.android.com/reference/android/content/Context.html#COMPANION_DEVICE_SERVICE)
        pub const COMPANION_DEVICE_SERVICE : &'static str = "companiondevice";

        /// public static final [CONNECTIVITY_SERVICE](https://developer.android.com/reference/android/content/Context.html#CONNECTIVITY_SERVICE)
        pub const CONNECTIVITY_SERVICE : &'static str = "connectivity";

        /// public static final [CONSUMER_IR_SERVICE](https://developer.android.com/reference/android/content/Context.html#CONSUMER_IR_SERVICE)
        pub const CONSUMER_IR_SERVICE : &'static str = "consumer_ir";

        /// public static final [CONTEXT_IGNORE_SECURITY](https://developer.android.com/reference/android/content/Context.html#CONTEXT_IGNORE_SECURITY)
        pub const CONTEXT_IGNORE_SECURITY : i32 = 2;

        /// public static final [CONTEXT_INCLUDE_CODE](https://developer.android.com/reference/android/content/Context.html#CONTEXT_INCLUDE_CODE)
        pub const CONTEXT_INCLUDE_CODE : i32 = 1;

        /// public static final [CONTEXT_RESTRICTED](https://developer.android.com/reference/android/content/Context.html#CONTEXT_RESTRICTED)
        pub const CONTEXT_RESTRICTED : i32 = 4;

        /// public static final [CROSS_PROFILE_APPS_SERVICE](https://developer.android.com/reference/android/content/Context.html#CROSS_PROFILE_APPS_SERVICE)
        pub const CROSS_PROFILE_APPS_SERVICE : &'static str = "crossprofileapps";

        /// public static final [DEVICE_POLICY_SERVICE](https://developer.android.com/reference/android/content/Context.html#DEVICE_POLICY_SERVICE)
        pub const DEVICE_POLICY_SERVICE : &'static str = "device_policy";

        /// public static final [DISPLAY_SERVICE](https://developer.android.com/reference/android/content/Context.html#DISPLAY_SERVICE)
        pub const DISPLAY_SERVICE : &'static str = "display";

        /// public static final [DOWNLOAD_SERVICE](https://developer.android.com/reference/android/content/Context.html#DOWNLOAD_SERVICE)
        pub const DOWNLOAD_SERVICE : &'static str = "download";

        /// public static final [DROPBOX_SERVICE](https://developer.android.com/reference/android/content/Context.html#DROPBOX_SERVICE)
        pub const DROPBOX_SERVICE : &'static str = "dropbox";

        /// public static final [EUICC_SERVICE](https://developer.android.com/reference/android/content/Context.html#EUICC_SERVICE)
        pub const EUICC_SERVICE : &'static str = "euicc";

        /// public static final [FINGERPRINT_SERVICE](https://developer.android.com/reference/android/content/Context.html#FINGERPRINT_SERVICE)
        pub const FINGERPRINT_SERVICE : &'static str = "fingerprint";

        /// public static final [HARDWARE_PROPERTIES_SERVICE](https://developer.android.com/reference/android/content/Context.html#HARDWARE_PROPERTIES_SERVICE)
        pub const HARDWARE_PROPERTIES_SERVICE : &'static str = "hardware_properties";

        /// public static final [INPUT_METHOD_SERVICE](https://developer.android.com/reference/android/content/Context.html#INPUT_METHOD_SERVICE)
        pub const INPUT_METHOD_SERVICE : &'static str = "input_method";

        /// public static final [INPUT_SERVICE](https://developer.android.com/reference/android/content/Context.html#INPUT_SERVICE)
        pub const INPUT_SERVICE : &'static str = "input";

        /// public static final [IPSEC_SERVICE](https://developer.android.com/reference/android/content/Context.html#IPSEC_SERVICE)
        pub const IPSEC_SERVICE : &'static str = "ipsec";

        /// public static final [JOB_SCHEDULER_SERVICE](https://developer.android.com/reference/android/content/Context.html#JOB_SCHEDULER_SERVICE)
        pub const JOB_SCHEDULER_SERVICE : &'static str = "jobscheduler";

        /// public static final [KEYGUARD_SERVICE](https://developer.android.com/reference/android/content/Context.html#KEYGUARD_SERVICE)
        pub const KEYGUARD_SERVICE : &'static str = "keyguard";

        /// public static final [LAUNCHER_APPS_SERVICE](https://developer.android.com/reference/android/content/Context.html#LAUNCHER_APPS_SERVICE)
        pub const LAUNCHER_APPS_SERVICE : &'static str = "launcherapps";

        /// public static final [LAYOUT_INFLATER_SERVICE](https://developer.android.com/reference/android/content/Context.html#LAYOUT_INFLATER_SERVICE)
        pub const LAYOUT_INFLATER_SERVICE : &'static str = "layout_inflater";

        /// public static final [LOCATION_SERVICE](https://developer.android.com/reference/android/content/Context.html#LOCATION_SERVICE)
        pub const LOCATION_SERVICE : &'static str = "location";

        /// public static final [MEDIA_PROJECTION_SERVICE](https://developer.android.com/reference/android/content/Context.html#MEDIA_PROJECTION_SERVICE)
        pub const MEDIA_PROJECTION_SERVICE : &'static str = "media_projection";

        /// public static final [MEDIA_ROUTER_SERVICE](https://developer.android.com/reference/android/content/Context.html#MEDIA_ROUTER_SERVICE)
        pub const MEDIA_ROUTER_SERVICE : &'static str = "media_router";

        /// public static final [MEDIA_SESSION_SERVICE](https://developer.android.com/reference/android/content/Context.html#MEDIA_SESSION_SERVICE)
        pub const MEDIA_SESSION_SERVICE : &'static str = "media_session";

        /// public static final [MIDI_SERVICE](https://developer.android.com/reference/android/content/Context.html#MIDI_SERVICE)
        pub const MIDI_SERVICE : &'static str = "midi";

        /// public static final [MODE_APPEND](https://developer.android.com/reference/android/content/Context.html#MODE_APPEND)
        pub const MODE_APPEND : i32 = 32768;

        /// public static final [MODE_ENABLE_WRITE_AHEAD_LOGGING](https://developer.android.com/reference/android/content/Context.html#MODE_ENABLE_WRITE_AHEAD_LOGGING)
        pub const MODE_ENABLE_WRITE_AHEAD_LOGGING : i32 = 8;

        /// public static final [MODE_MULTI_PROCESS](https://developer.android.com/reference/android/content/Context.html#MODE_MULTI_PROCESS)
        #[deprecated] pub const MODE_MULTI_PROCESS : i32 = 4;

        /// public static final [MODE_NO_LOCALIZED_COLLATORS](https://developer.android.com/reference/android/content/Context.html#MODE_NO_LOCALIZED_COLLATORS)
        pub const MODE_NO_LOCALIZED_COLLATORS : i32 = 16;

        /// public static final [MODE_PRIVATE](https://developer.android.com/reference/android/content/Context.html#MODE_PRIVATE)
        pub const MODE_PRIVATE : i32 = 0;

        /// public static final [MODE_WORLD_READABLE](https://developer.android.com/reference/android/content/Context.html#MODE_WORLD_READABLE)
        #[deprecated] pub const MODE_WORLD_READABLE : i32 = 1;

        /// public static final [MODE_WORLD_WRITEABLE](https://developer.android.com/reference/android/content/Context.html#MODE_WORLD_WRITEABLE)
        #[deprecated] pub const MODE_WORLD_WRITEABLE : i32 = 2;

        /// public static final [NETWORK_STATS_SERVICE](https://developer.android.com/reference/android/content/Context.html#NETWORK_STATS_SERVICE)
        pub const NETWORK_STATS_SERVICE : &'static str = "netstats";

        /// public static final [NFC_SERVICE](https://developer.android.com/reference/android/content/Context.html#NFC_SERVICE)
        pub const NFC_SERVICE : &'static str = "nfc";

        /// public static final [NOTIFICATION_SERVICE](https://developer.android.com/reference/android/content/Context.html#NOTIFICATION_SERVICE)
        pub const NOTIFICATION_SERVICE : &'static str = "notification";

        /// public static final [NSD_SERVICE](https://developer.android.com/reference/android/content/Context.html#NSD_SERVICE)
        pub const NSD_SERVICE : &'static str = "servicediscovery";

        /// public static final [POWER_SERVICE](https://developer.android.com/reference/android/content/Context.html#POWER_SERVICE)
        pub const POWER_SERVICE : &'static str = "power";

        /// public static final [PRINT_SERVICE](https://developer.android.com/reference/android/content/Context.html#PRINT_SERVICE)
        pub const PRINT_SERVICE : &'static str = "print";

        /// public static final [RECEIVER_VISIBLE_TO_INSTANT_APPS](https://developer.android.com/reference/android/content/Context.html#RECEIVER_VISIBLE_TO_INSTANT_APPS)
        pub const RECEIVER_VISIBLE_TO_INSTANT_APPS : i32 = 1;

        /// public static final [RESTRICTIONS_SERVICE](https://developer.android.com/reference/android/content/Context.html#RESTRICTIONS_SERVICE)
        pub const RESTRICTIONS_SERVICE : &'static str = "restrictions";

        /// public static final [ROLE_SERVICE](https://developer.android.com/reference/android/content/Context.html#ROLE_SERVICE)
        pub const ROLE_SERVICE : &'static str = "role";

        /// public static final [SEARCH_SERVICE](https://developer.android.com/reference/android/content/Context.html#SEARCH_SERVICE)
        pub const SEARCH_SERVICE : &'static str = "search";

        /// public static final [SENSOR_SERVICE](https://developer.android.com/reference/android/content/Context.html#SENSOR_SERVICE)
        pub const SENSOR_SERVICE : &'static str = "sensor";

        /// public static final [SHORTCUT_SERVICE](https://developer.android.com/reference/android/content/Context.html#SHORTCUT_SERVICE)
        pub const SHORTCUT_SERVICE : &'static str = "shortcut";

        /// public static final [STORAGE_SERVICE](https://developer.android.com/reference/android/content/Context.html#STORAGE_SERVICE)
        pub const STORAGE_SERVICE : &'static str = "storage";

        /// public static final [STORAGE_STATS_SERVICE](https://developer.android.com/reference/android/content/Context.html#STORAGE_STATS_SERVICE)
        pub const STORAGE_STATS_SERVICE : &'static str = "storagestats";

        /// public static final [SYSTEM_HEALTH_SERVICE](https://developer.android.com/reference/android/content/Context.html#SYSTEM_HEALTH_SERVICE)
        pub const SYSTEM_HEALTH_SERVICE : &'static str = "systemhealth";

        /// public static final [TELECOM_SERVICE](https://developer.android.com/reference/android/content/Context.html#TELECOM_SERVICE)
        pub const TELECOM_SERVICE : &'static str = "telecom";

        /// public static final [TELEPHONY_SERVICE](https://developer.android.com/reference/android/content/Context.html#TELEPHONY_SERVICE)
        pub const TELEPHONY_SERVICE : &'static str = "phone";

        /// public static final [TELEPHONY_SUBSCRIPTION_SERVICE](https://developer.android.com/reference/android/content/Context.html#TELEPHONY_SUBSCRIPTION_SERVICE)
        pub const TELEPHONY_SUBSCRIPTION_SERVICE : &'static str = "telephony_subscription_service";

        /// public static final [TEXT_CLASSIFICATION_SERVICE](https://developer.android.com/reference/android/content/Context.html#TEXT_CLASSIFICATION_SERVICE)
        pub const TEXT_CLASSIFICATION_SERVICE : &'static str = "textclassification";

        /// public static final [TEXT_SERVICES_MANAGER_SERVICE](https://developer.android.com/reference/android/content/Context.html#TEXT_SERVICES_MANAGER_SERVICE)
        pub const TEXT_SERVICES_MANAGER_SERVICE : &'static str = "textservices";

        /// public static final [TV_INPUT_SERVICE](https://developer.android.com/reference/android/content/Context.html#TV_INPUT_SERVICE)
        pub const TV_INPUT_SERVICE : &'static str = "tv_input";

        /// public static final [UI_MODE_SERVICE](https://developer.android.com/reference/android/content/Context.html#UI_MODE_SERVICE)
        pub const UI_MODE_SERVICE : &'static str = "uimode";

        /// public static final [USAGE_STATS_SERVICE](https://developer.android.com/reference/android/content/Context.html#USAGE_STATS_SERVICE)
        pub const USAGE_STATS_SERVICE : &'static str = "usagestats";

        /// public static final [USB_SERVICE](https://developer.android.com/reference/android/content/Context.html#USB_SERVICE)
        pub const USB_SERVICE : &'static str = "usb";

        /// public static final [USER_SERVICE](https://developer.android.com/reference/android/content/Context.html#USER_SERVICE)
        pub const USER_SERVICE : &'static str = "user";

        /// public static final [VIBRATOR_SERVICE](https://developer.android.com/reference/android/content/Context.html#VIBRATOR_SERVICE)
        pub const VIBRATOR_SERVICE : &'static str = "vibrator";

        /// public static final [WALLPAPER_SERVICE](https://developer.android.com/reference/android/content/Context.html#WALLPAPER_SERVICE)
        pub const WALLPAPER_SERVICE : &'static str = "wallpaper";

        /// public static final [WIFI_AWARE_SERVICE](https://developer.android.com/reference/android/content/Context.html#WIFI_AWARE_SERVICE)
        pub const WIFI_AWARE_SERVICE : &'static str = "wifiaware";

        /// public static final [WIFI_P2P_SERVICE](https://developer.android.com/reference/android/content/Context.html#WIFI_P2P_SERVICE)
        pub const WIFI_P2P_SERVICE : &'static str = "wifip2p";

        /// public static final [WIFI_RTT_RANGING_SERVICE](https://developer.android.com/reference/android/content/Context.html#WIFI_RTT_RANGING_SERVICE)
        pub const WIFI_RTT_RANGING_SERVICE : &'static str = "wifirtt";

        /// public static final [WIFI_SERVICE](https://developer.android.com/reference/android/content/Context.html#WIFI_SERVICE)
        pub const WIFI_SERVICE : &'static str = "wifi";

        /// public static final [WINDOW_SERVICE](https://developer.android.com/reference/android/content/Context.html#WINDOW_SERVICE)
        pub const WINDOW_SERVICE : &'static str = "window";
    }
}
