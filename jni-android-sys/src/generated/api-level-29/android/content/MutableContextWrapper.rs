// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-content-MutableContextWrapper"))]
__jni_bindgen! {
    /// public class [MutableContextWrapper](https://developer.android.com/reference/android/content/MutableContextWrapper.html)
    ///
    /// Required feature: android-content-MutableContextWrapper
    public class MutableContextWrapper ("android/content/MutableContextWrapper") extends crate::android::content::ContextWrapper {

        /// [MutableContextWrapper](https://developer.android.com/reference/android/content/MutableContextWrapper.html#MutableContextWrapper(android.content.Context))
        ///
        /// Required features: "android-content-Context"
        #[cfg(any(feature = "all", all(feature = "android-content-Context")))]
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::content::MutableContextWrapper>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/MutableContextWrapper", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/content/Context;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/MutableContextWrapper\0", "<init>\0", "(Landroid/content/Context;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setBaseContext](https://developer.android.com/reference/android/content/MutableContextWrapper.html#setBaseContext(android.content.Context))
        ///
        /// Required features: "android-content-Context"
        #[cfg(any(feature = "all", all(feature = "android-content-Context")))]
        pub fn setBaseContext<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/MutableContextWrapper", java.flags == PUBLIC, .name == "setBaseContext", .descriptor == "(Landroid/content/Context;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/MutableContextWrapper\0", "setBaseContext\0", "(Landroid/content/Context;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
