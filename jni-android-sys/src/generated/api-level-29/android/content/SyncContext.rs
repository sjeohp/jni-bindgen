// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-content-SyncContext"))]
__jni_bindgen! {
    /// public class [SyncContext](https://developer.android.com/reference/android/content/SyncContext.html)
    ///
    /// Required feature: android-content-SyncContext
    public class SyncContext ("android/content/SyncContext") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [SyncContext](https://developer.android.com/reference/android/content/SyncContext.html#SyncContext())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::content::SyncContext>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/content/SyncContext", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/SyncContext\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [onFinished](https://developer.android.com/reference/android/content/SyncContext.html#onFinished(android.content.SyncResult))
        ///
        /// Required features: "android-content-SyncResult"
        #[cfg(any(feature = "all", all(feature = "android-content-SyncResult")))]
        pub fn onFinished<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::SyncResult>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/SyncContext", java.flags == PUBLIC, .name == "onFinished", .descriptor == "(Landroid/content/SyncResult;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/SyncContext\0", "onFinished\0", "(Landroid/content/SyncResult;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSyncContextBinder](https://developer.android.com/reference/android/content/SyncContext.html#getSyncContextBinder())
        ///
        /// Required features: "android-os-IBinder"
        #[cfg(any(feature = "all", all(feature = "android-os-IBinder")))]
        pub fn getSyncContextBinder<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::IBinder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/SyncContext", java.flags == PUBLIC, .name == "getSyncContextBinder", .descriptor == "()Landroid/os/IBinder;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/SyncContext\0", "getSyncContextBinder\0", "()Landroid/os/IBinder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
