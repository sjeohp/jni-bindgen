// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-content-pm-PackageItemInfo"))]
__jni_bindgen! {
    /// public class [PackageItemInfo](https://developer.android.com/reference/android/content/pm/PackageItemInfo.html)
    ///
    /// Required feature: android-content-pm-PackageItemInfo
    public class PackageItemInfo ("android/content/pm/PackageItemInfo") extends crate::java::lang::Object {

        /// [PackageItemInfo](https://developer.android.com/reference/android/content/pm/PackageItemInfo.html#PackageItemInfo())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::content::pm::PackageItemInfo>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageItemInfo", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageItemInfo\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [PackageItemInfo](https://developer.android.com/reference/android/content/pm/PackageItemInfo.html#PackageItemInfo(android.content.pm.PackageItemInfo))
        ///
        /// Required features: "android-content-pm-PackageItemInfo"
        #[cfg(any(feature = "all", all(feature = "android-content-pm-PackageItemInfo")))]
        pub fn new_PackageItemInfo<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::pm::PackageItemInfo>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::content::pm::PackageItemInfo>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageItemInfo", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/content/pm/PackageItemInfo;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageItemInfo\0", "<init>\0", "(Landroid/content/pm/PackageItemInfo;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [PackageItemInfo](https://developer.android.com/reference/android/content/pm/PackageItemInfo.html#PackageItemInfo(android.os.Parcel))
        // ///
        // /// Required features: "android-os-Parcel"
        // #[cfg(any(feature = "all", all(feature = "android-os-Parcel")))]
        // fn new_Parcel<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Parcel>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::content::pm::PackageItemInfo>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/content/pm/PackageItemInfo", java.flags == PROTECTED, .name == "<init>", .descriptor == "(Landroid/os/Parcel;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageItemInfo\0", "<init>\0", "(Landroid/os/Parcel;)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [loadLabel](https://developer.android.com/reference/android/content/pm/PackageItemInfo.html#loadLabel(android.content.pm.PackageManager))
        ///
        /// Required features: "android-content-pm-PackageManager", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-content-pm-PackageManager", feature = "java-lang-CharSequence")))]
        pub fn loadLabel<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::pm::PackageManager>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::CharSequence>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageItemInfo", java.flags == PUBLIC, .name == "loadLabel", .descriptor == "(Landroid/content/pm/PackageManager;)Ljava/lang/CharSequence;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageItemInfo\0", "loadLabel\0", "(Landroid/content/pm/PackageManager;)Ljava/lang/CharSequence;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [loadIcon](https://developer.android.com/reference/android/content/pm/PackageItemInfo.html#loadIcon(android.content.pm.PackageManager))
        ///
        /// Required features: "android-content-pm-PackageManager", "android-graphics-drawable-Drawable"
        #[cfg(any(feature = "all", all(feature = "android-content-pm-PackageManager", feature = "android-graphics-drawable-Drawable")))]
        pub fn loadIcon<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::pm::PackageManager>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::drawable::Drawable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageItemInfo", java.flags == PUBLIC, .name == "loadIcon", .descriptor == "(Landroid/content/pm/PackageManager;)Landroid/graphics/drawable/Drawable;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageItemInfo\0", "loadIcon\0", "(Landroid/content/pm/PackageManager;)Landroid/graphics/drawable/Drawable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [loadUnbadgedIcon](https://developer.android.com/reference/android/content/pm/PackageItemInfo.html#loadUnbadgedIcon(android.content.pm.PackageManager))
        ///
        /// Required features: "android-content-pm-PackageManager", "android-graphics-drawable-Drawable"
        #[cfg(any(feature = "all", all(feature = "android-content-pm-PackageManager", feature = "android-graphics-drawable-Drawable")))]
        pub fn loadUnbadgedIcon<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::pm::PackageManager>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::drawable::Drawable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageItemInfo", java.flags == PUBLIC, .name == "loadUnbadgedIcon", .descriptor == "(Landroid/content/pm/PackageManager;)Landroid/graphics/drawable/Drawable;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageItemInfo\0", "loadUnbadgedIcon\0", "(Landroid/content/pm/PackageManager;)Landroid/graphics/drawable/Drawable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [loadBanner](https://developer.android.com/reference/android/content/pm/PackageItemInfo.html#loadBanner(android.content.pm.PackageManager))
        ///
        /// Required features: "android-content-pm-PackageManager", "android-graphics-drawable-Drawable"
        #[cfg(any(feature = "all", all(feature = "android-content-pm-PackageManager", feature = "android-graphics-drawable-Drawable")))]
        pub fn loadBanner<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::pm::PackageManager>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::drawable::Drawable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageItemInfo", java.flags == PUBLIC, .name == "loadBanner", .descriptor == "(Landroid/content/pm/PackageManager;)Landroid/graphics/drawable/Drawable;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageItemInfo\0", "loadBanner\0", "(Landroid/content/pm/PackageManager;)Landroid/graphics/drawable/Drawable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [loadLogo](https://developer.android.com/reference/android/content/pm/PackageItemInfo.html#loadLogo(android.content.pm.PackageManager))
        ///
        /// Required features: "android-content-pm-PackageManager", "android-graphics-drawable-Drawable"
        #[cfg(any(feature = "all", all(feature = "android-content-pm-PackageManager", feature = "android-graphics-drawable-Drawable")))]
        pub fn loadLogo<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::pm::PackageManager>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::drawable::Drawable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageItemInfo", java.flags == PUBLIC, .name == "loadLogo", .descriptor == "(Landroid/content/pm/PackageManager;)Landroid/graphics/drawable/Drawable;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageItemInfo\0", "loadLogo\0", "(Landroid/content/pm/PackageManager;)Landroid/graphics/drawable/Drawable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [loadXmlMetaData](https://developer.android.com/reference/android/content/pm/PackageItemInfo.html#loadXmlMetaData(android.content.pm.PackageManager,%20java.lang.String))
        ///
        /// Required features: "android-content-pm-PackageManager", "android-content-res-XmlResourceParser", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-pm-PackageManager", feature = "android-content-res-XmlResourceParser", feature = "java-lang-String")))]
        pub fn loadXmlMetaData<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::pm::PackageManager>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::res::XmlResourceParser>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageItemInfo", java.flags == PUBLIC, .name == "loadXmlMetaData", .descriptor == "(Landroid/content/pm/PackageManager;Ljava/lang/String;)Landroid/content/res/XmlResourceParser;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageItemInfo\0", "loadXmlMetaData\0", "(Landroid/content/pm/PackageManager;Ljava/lang/String;)Landroid/content/res/XmlResourceParser;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [dumpFront](https://developer.android.com/reference/android/content/pm/PackageItemInfo.html#dumpFront(android.util.Printer,%20java.lang.String))
        // ///
        // /// Required features: "android-util-Printer", "java-lang-String"
        // #[cfg(any(feature = "all", all(feature = "android-util-Printer", feature = "java-lang-String")))]
        // fn dumpFront<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::util::Printer>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/content/pm/PackageItemInfo", java.flags == PROTECTED, .name == "dumpFront", .descriptor == "(Landroid/util/Printer;Ljava/lang/String;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageItemInfo\0", "dumpFront\0", "(Landroid/util/Printer;Ljava/lang/String;)V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [dumpBack](https://developer.android.com/reference/android/content/pm/PackageItemInfo.html#dumpBack(android.util.Printer,%20java.lang.String))
        // ///
        // /// Required features: "android-util-Printer", "java-lang-String"
        // #[cfg(any(feature = "all", all(feature = "android-util-Printer", feature = "java-lang-String")))]
        // fn dumpBack<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::util::Printer>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/content/pm/PackageItemInfo", java.flags == PROTECTED, .name == "dumpBack", .descriptor == "(Landroid/util/Printer;Ljava/lang/String;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageItemInfo\0", "dumpBack\0", "(Landroid/util/Printer;Ljava/lang/String;)V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [writeToParcel](https://developer.android.com/reference/android/content/pm/PackageItemInfo.html#writeToParcel(android.os.Parcel,%20int))
        ///
        /// Required features: "android-os-Parcel"
        #[cfg(any(feature = "all", all(feature = "android-os-Parcel")))]
        pub fn writeToParcel<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Parcel>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageItemInfo", java.flags == PUBLIC, .name == "writeToParcel", .descriptor == "(Landroid/os/Parcel;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageItemInfo\0", "writeToParcel\0", "(Landroid/os/Parcel;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// **get** public [banner](https://developer.android.com/reference/android/content/pm/PackageItemInfo.html#banner)
        pub fn banner<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/PackageItemInfo\0", "banner\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [banner](https://developer.android.com/reference/android/content/pm/PackageItemInfo.html#banner)
        pub fn set_banner<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/PackageItemInfo\0", "banner\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [icon](https://developer.android.com/reference/android/content/pm/PackageItemInfo.html#icon)
        pub fn icon<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/PackageItemInfo\0", "icon\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [icon](https://developer.android.com/reference/android/content/pm/PackageItemInfo.html#icon)
        pub fn set_icon<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/PackageItemInfo\0", "icon\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [labelRes](https://developer.android.com/reference/android/content/pm/PackageItemInfo.html#labelRes)
        pub fn labelRes<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/PackageItemInfo\0", "labelRes\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [labelRes](https://developer.android.com/reference/android/content/pm/PackageItemInfo.html#labelRes)
        pub fn set_labelRes<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/PackageItemInfo\0", "labelRes\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [logo](https://developer.android.com/reference/android/content/pm/PackageItemInfo.html#logo)
        pub fn logo<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/PackageItemInfo\0", "logo\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [logo](https://developer.android.com/reference/android/content/pm/PackageItemInfo.html#logo)
        pub fn set_logo<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/PackageItemInfo\0", "logo\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [metaData](https://developer.android.com/reference/android/content/pm/PackageItemInfo.html#metaData)
        ///
        /// Required feature: android-os-Bundle
        #[cfg(any(feature = "all", feature = "android-os-Bundle"))]
        pub fn metaData<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Bundle>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/PackageItemInfo\0", "metaData\0", "Landroid/os/Bundle;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [metaData](https://developer.android.com/reference/android/content/pm/PackageItemInfo.html#metaData)
        ///
        /// Required feature: android-os-Bundle
        #[cfg(any(feature = "all", feature = "android-os-Bundle"))]
        pub fn set_metaData<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::android::os::Bundle>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/PackageItemInfo\0", "metaData\0", "Landroid/os/Bundle;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [name](https://developer.android.com/reference/android/content/pm/PackageItemInfo.html#name)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn name<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/PackageItemInfo\0", "name\0", "Ljava/lang/String;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [name](https://developer.android.com/reference/android/content/pm/PackageItemInfo.html#name)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn set_name<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::java::lang::String>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/PackageItemInfo\0", "name\0", "Ljava/lang/String;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [nonLocalizedLabel](https://developer.android.com/reference/android/content/pm/PackageItemInfo.html#nonLocalizedLabel)
        ///
        /// Required feature: java-lang-CharSequence
        #[cfg(any(feature = "all", feature = "java-lang-CharSequence"))]
        pub fn nonLocalizedLabel<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::CharSequence>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/PackageItemInfo\0", "nonLocalizedLabel\0", "Ljava/lang/CharSequence;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [nonLocalizedLabel](https://developer.android.com/reference/android/content/pm/PackageItemInfo.html#nonLocalizedLabel)
        ///
        /// Required feature: java-lang-CharSequence
        #[cfg(any(feature = "all", feature = "java-lang-CharSequence"))]
        pub fn set_nonLocalizedLabel<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::java::lang::CharSequence>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/PackageItemInfo\0", "nonLocalizedLabel\0", "Ljava/lang/CharSequence;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [packageName](https://developer.android.com/reference/android/content/pm/PackageItemInfo.html#packageName)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn packageName<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/PackageItemInfo\0", "packageName\0", "Ljava/lang/String;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [packageName](https://developer.android.com/reference/android/content/pm/PackageItemInfo.html#packageName)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn set_packageName<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::java::lang::String>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/PackageItemInfo\0", "packageName\0", "Ljava/lang/String;\0");
                env.set_object_field(class, field, value)
            }
        }
    }
}
