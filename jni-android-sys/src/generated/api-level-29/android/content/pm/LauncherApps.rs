// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-content-pm-LauncherApps"))]
__jni_bindgen! {
    /// public class [LauncherApps](https://developer.android.com/reference/android/content/pm/LauncherApps.html)
    ///
    /// Required feature: android-content-pm-LauncherApps
    public class LauncherApps ("android/content/pm/LauncherApps") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [LauncherApps](https://developer.android.com/reference/android/content/pm/LauncherApps.html#LauncherApps(android.content.Context))
        // ///
        // /// Required features: "android-content-Context"
        // #[cfg(any(feature = "all", all(feature = "android-content-Context")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::content::pm::LauncherApps>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/content/pm/LauncherApps", java.flags == (empty), .name == "<init>", .descriptor == "(Landroid/content/Context;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/LauncherApps\0", "<init>\0", "(Landroid/content/Context;)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getProfiles](https://developer.android.com/reference/android/content/pm/LauncherApps.html#getProfiles())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getProfiles<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/LauncherApps", java.flags == PUBLIC, .name == "getProfiles", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/LauncherApps\0", "getProfiles\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getActivityList](https://developer.android.com/reference/android/content/pm/LauncherApps.html#getActivityList(java.lang.String,%20android.os.UserHandle))
        ///
        /// Required features: "android-os-UserHandle", "java-lang-String", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "android-os-UserHandle", feature = "java-lang-String", feature = "java-util-List")))]
        pub fn getActivityList<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::UserHandle>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/LauncherApps", java.flags == PUBLIC, .name == "getActivityList", .descriptor == "(Ljava/lang/String;Landroid/os/UserHandle;)Ljava/util/List;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/LauncherApps\0", "getActivityList\0", "(Ljava/lang/String;Landroid/os/UserHandle;)Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [resolveActivity](https://developer.android.com/reference/android/content/pm/LauncherApps.html#resolveActivity(android.content.Intent,%20android.os.UserHandle))
        ///
        /// Required features: "android-content-Intent", "android-content-pm-LauncherActivityInfo", "android-os-UserHandle"
        #[cfg(any(feature = "all", all(feature = "android-content-Intent", feature = "android-content-pm-LauncherActivityInfo", feature = "android-os-UserHandle")))]
        pub fn resolveActivity<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::UserHandle>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::pm::LauncherActivityInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/LauncherApps", java.flags == PUBLIC, .name == "resolveActivity", .descriptor == "(Landroid/content/Intent;Landroid/os/UserHandle;)Landroid/content/pm/LauncherActivityInfo;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/LauncherApps\0", "resolveActivity\0", "(Landroid/content/Intent;Landroid/os/UserHandle;)Landroid/content/pm/LauncherActivityInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [startMainActivity](https://developer.android.com/reference/android/content/pm/LauncherApps.html#startMainActivity(android.content.ComponentName,%20android.os.UserHandle,%20android.graphics.Rect,%20android.os.Bundle))
        ///
        /// Required features: "android-content-ComponentName", "android-graphics-Rect", "android-os-Bundle", "android-os-UserHandle"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "android-graphics-Rect", feature = "android-os-Bundle", feature = "android-os-UserHandle")))]
        pub fn startMainActivity<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::UserHandle>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Rect>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/LauncherApps", java.flags == PUBLIC, .name == "startMainActivity", .descriptor == "(Landroid/content/ComponentName;Landroid/os/UserHandle;Landroid/graphics/Rect;Landroid/os/Bundle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/LauncherApps\0", "startMainActivity\0", "(Landroid/content/ComponentName;Landroid/os/UserHandle;Landroid/graphics/Rect;Landroid/os/Bundle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [startPackageInstallerSessionDetailsActivity](https://developer.android.com/reference/android/content/pm/LauncherApps.html#startPackageInstallerSessionDetailsActivity(android.content.pm.PackageInstaller.SessionInfo,%20android.graphics.Rect,%20android.os.Bundle))
        ///
        /// Required features: "android-content-pm-PackageInstaller_SessionInfo", "android-graphics-Rect", "android-os-Bundle"
        #[cfg(any(feature = "all", all(feature = "android-content-pm-PackageInstaller_SessionInfo", feature = "android-graphics-Rect", feature = "android-os-Bundle")))]
        pub fn startPackageInstallerSessionDetailsActivity<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::pm::PackageInstaller_SessionInfo>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Rect>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/LauncherApps", java.flags == PUBLIC, .name == "startPackageInstallerSessionDetailsActivity", .descriptor == "(Landroid/content/pm/PackageInstaller$SessionInfo;Landroid/graphics/Rect;Landroid/os/Bundle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/LauncherApps\0", "startPackageInstallerSessionDetailsActivity\0", "(Landroid/content/pm/PackageInstaller$SessionInfo;Landroid/graphics/Rect;Landroid/os/Bundle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [startAppDetailsActivity](https://developer.android.com/reference/android/content/pm/LauncherApps.html#startAppDetailsActivity(android.content.ComponentName,%20android.os.UserHandle,%20android.graphics.Rect,%20android.os.Bundle))
        ///
        /// Required features: "android-content-ComponentName", "android-graphics-Rect", "android-os-Bundle", "android-os-UserHandle"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "android-graphics-Rect", feature = "android-os-Bundle", feature = "android-os-UserHandle")))]
        pub fn startAppDetailsActivity<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::UserHandle>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Rect>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/LauncherApps", java.flags == PUBLIC, .name == "startAppDetailsActivity", .descriptor == "(Landroid/content/ComponentName;Landroid/os/UserHandle;Landroid/graphics/Rect;Landroid/os/Bundle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/LauncherApps\0", "startAppDetailsActivity\0", "(Landroid/content/ComponentName;Landroid/os/UserHandle;Landroid/graphics/Rect;Landroid/os/Bundle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getShortcutConfigActivityList](https://developer.android.com/reference/android/content/pm/LauncherApps.html#getShortcutConfigActivityList(java.lang.String,%20android.os.UserHandle))
        ///
        /// Required features: "android-os-UserHandle", "java-lang-String", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "android-os-UserHandle", feature = "java-lang-String", feature = "java-util-List")))]
        pub fn getShortcutConfigActivityList<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::UserHandle>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/LauncherApps", java.flags == PUBLIC, .name == "getShortcutConfigActivityList", .descriptor == "(Ljava/lang/String;Landroid/os/UserHandle;)Ljava/util/List;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/LauncherApps\0", "getShortcutConfigActivityList\0", "(Ljava/lang/String;Landroid/os/UserHandle;)Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getShortcutConfigActivityIntent](https://developer.android.com/reference/android/content/pm/LauncherApps.html#getShortcutConfigActivityIntent(android.content.pm.LauncherActivityInfo))
        ///
        /// Required features: "android-content-IntentSender", "android-content-pm-LauncherActivityInfo"
        #[cfg(any(feature = "all", all(feature = "android-content-IntentSender", feature = "android-content-pm-LauncherActivityInfo")))]
        pub fn getShortcutConfigActivityIntent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::pm::LauncherActivityInfo>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::IntentSender>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/LauncherApps", java.flags == PUBLIC, .name == "getShortcutConfigActivityIntent", .descriptor == "(Landroid/content/pm/LauncherActivityInfo;)Landroid/content/IntentSender;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/LauncherApps\0", "getShortcutConfigActivityIntent\0", "(Landroid/content/pm/LauncherActivityInfo;)Landroid/content/IntentSender;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isPackageEnabled](https://developer.android.com/reference/android/content/pm/LauncherApps.html#isPackageEnabled(java.lang.String,%20android.os.UserHandle))
        ///
        /// Required features: "android-os-UserHandle", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-os-UserHandle", feature = "java-lang-String")))]
        pub fn isPackageEnabled<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::UserHandle>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/LauncherApps", java.flags == PUBLIC, .name == "isPackageEnabled", .descriptor == "(Ljava/lang/String;Landroid/os/UserHandle;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/LauncherApps\0", "isPackageEnabled\0", "(Ljava/lang/String;Landroid/os/UserHandle;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSuspendedPackageLauncherExtras](https://developer.android.com/reference/android/content/pm/LauncherApps.html#getSuspendedPackageLauncherExtras(java.lang.String,%20android.os.UserHandle))
        ///
        /// Required features: "android-os-Bundle", "android-os-UserHandle", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-os-Bundle", feature = "android-os-UserHandle", feature = "java-lang-String")))]
        pub fn getSuspendedPackageLauncherExtras<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::UserHandle>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Bundle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/LauncherApps", java.flags == PUBLIC, .name == "getSuspendedPackageLauncherExtras", .descriptor == "(Ljava/lang/String;Landroid/os/UserHandle;)Landroid/os/Bundle;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/LauncherApps\0", "getSuspendedPackageLauncherExtras\0", "(Ljava/lang/String;Landroid/os/UserHandle;)Landroid/os/Bundle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [shouldHideFromSuggestions](https://developer.android.com/reference/android/content/pm/LauncherApps.html#shouldHideFromSuggestions(java.lang.String,%20android.os.UserHandle))
        ///
        /// Required features: "android-os-UserHandle", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-os-UserHandle", feature = "java-lang-String")))]
        pub fn shouldHideFromSuggestions<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::UserHandle>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/LauncherApps", java.flags == PUBLIC, .name == "shouldHideFromSuggestions", .descriptor == "(Ljava/lang/String;Landroid/os/UserHandle;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/LauncherApps\0", "shouldHideFromSuggestions\0", "(Ljava/lang/String;Landroid/os/UserHandle;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getApplicationInfo](https://developer.android.com/reference/android/content/pm/LauncherApps.html#getApplicationInfo(java.lang.String,%20int,%20android.os.UserHandle))
        ///
        /// Required features: "android-content-pm-ApplicationInfo", "android-os-UserHandle", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-pm-ApplicationInfo", feature = "android-os-UserHandle", feature = "java-lang-String")))]
        pub fn getApplicationInfo<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::UserHandle>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::pm::ApplicationInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/LauncherApps", java.flags == PUBLIC, .name == "getApplicationInfo", .descriptor == "(Ljava/lang/String;ILandroid/os/UserHandle;)Landroid/content/pm/ApplicationInfo;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/LauncherApps\0", "getApplicationInfo\0", "(Ljava/lang/String;ILandroid/os/UserHandle;)Landroid/content/pm/ApplicationInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isActivityEnabled](https://developer.android.com/reference/android/content/pm/LauncherApps.html#isActivityEnabled(android.content.ComponentName,%20android.os.UserHandle))
        ///
        /// Required features: "android-content-ComponentName", "android-os-UserHandle"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "android-os-UserHandle")))]
        pub fn isActivityEnabled<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::UserHandle>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/LauncherApps", java.flags == PUBLIC, .name == "isActivityEnabled", .descriptor == "(Landroid/content/ComponentName;Landroid/os/UserHandle;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/LauncherApps\0", "isActivityEnabled\0", "(Landroid/content/ComponentName;Landroid/os/UserHandle;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasShortcutHostPermission](https://developer.android.com/reference/android/content/pm/LauncherApps.html#hasShortcutHostPermission())
        pub fn hasShortcutHostPermission<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/LauncherApps", java.flags == PUBLIC, .name == "hasShortcutHostPermission", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/LauncherApps\0", "hasShortcutHostPermission\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getShortcuts](https://developer.android.com/reference/android/content/pm/LauncherApps.html#getShortcuts(android.content.pm.LauncherApps.ShortcutQuery,%20android.os.UserHandle))
        ///
        /// Required features: "android-content-pm-LauncherApps_ShortcutQuery", "android-os-UserHandle", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "android-content-pm-LauncherApps_ShortcutQuery", feature = "android-os-UserHandle", feature = "java-util-List")))]
        pub fn getShortcuts<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::pm::LauncherApps_ShortcutQuery>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::UserHandle>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/LauncherApps", java.flags == PUBLIC, .name == "getShortcuts", .descriptor == "(Landroid/content/pm/LauncherApps$ShortcutQuery;Landroid/os/UserHandle;)Ljava/util/List;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/LauncherApps\0", "getShortcuts\0", "(Landroid/content/pm/LauncherApps$ShortcutQuery;Landroid/os/UserHandle;)Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [pinShortcuts](https://developer.android.com/reference/android/content/pm/LauncherApps.html#pinShortcuts(java.lang.String,%20java.util.List,%20android.os.UserHandle))
        ///
        /// Required features: "android-os-UserHandle", "java-lang-String", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "android-os-UserHandle", feature = "java-lang-String", feature = "java-util-List")))]
        pub fn pinShortcuts<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::UserHandle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/LauncherApps", java.flags == PUBLIC, .name == "pinShortcuts", .descriptor == "(Ljava/lang/String;Ljava/util/List;Landroid/os/UserHandle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/LauncherApps\0", "pinShortcuts\0", "(Ljava/lang/String;Ljava/util/List;Landroid/os/UserHandle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getShortcutIconDrawable](https://developer.android.com/reference/android/content/pm/LauncherApps.html#getShortcutIconDrawable(android.content.pm.ShortcutInfo,%20int))
        ///
        /// Required features: "android-content-pm-ShortcutInfo", "android-graphics-drawable-Drawable"
        #[cfg(any(feature = "all", all(feature = "android-content-pm-ShortcutInfo", feature = "android-graphics-drawable-Drawable")))]
        pub fn getShortcutIconDrawable<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::pm::ShortcutInfo>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::drawable::Drawable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/LauncherApps", java.flags == PUBLIC, .name == "getShortcutIconDrawable", .descriptor == "(Landroid/content/pm/ShortcutInfo;I)Landroid/graphics/drawable/Drawable;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/LauncherApps\0", "getShortcutIconDrawable\0", "(Landroid/content/pm/ShortcutInfo;I)Landroid/graphics/drawable/Drawable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getShortcutBadgedIconDrawable](https://developer.android.com/reference/android/content/pm/LauncherApps.html#getShortcutBadgedIconDrawable(android.content.pm.ShortcutInfo,%20int))
        ///
        /// Required features: "android-content-pm-ShortcutInfo", "android-graphics-drawable-Drawable"
        #[cfg(any(feature = "all", all(feature = "android-content-pm-ShortcutInfo", feature = "android-graphics-drawable-Drawable")))]
        pub fn getShortcutBadgedIconDrawable<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::pm::ShortcutInfo>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::drawable::Drawable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/LauncherApps", java.flags == PUBLIC, .name == "getShortcutBadgedIconDrawable", .descriptor == "(Landroid/content/pm/ShortcutInfo;I)Landroid/graphics/drawable/Drawable;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/LauncherApps\0", "getShortcutBadgedIconDrawable\0", "(Landroid/content/pm/ShortcutInfo;I)Landroid/graphics/drawable/Drawable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [startShortcut](https://developer.android.com/reference/android/content/pm/LauncherApps.html#startShortcut(java.lang.String,%20java.lang.String,%20android.graphics.Rect,%20android.os.Bundle,%20android.os.UserHandle))
        ///
        /// Required features: "android-graphics-Rect", "android-os-Bundle", "android-os-UserHandle", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Rect", feature = "android-os-Bundle", feature = "android-os-UserHandle", feature = "java-lang-String")))]
        pub fn startShortcut_String_String_Rect_Bundle_UserHandle<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Rect>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::UserHandle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/LauncherApps", java.flags == PUBLIC, .name == "startShortcut", .descriptor == "(Ljava/lang/String;Ljava/lang/String;Landroid/graphics/Rect;Landroid/os/Bundle;Landroid/os/UserHandle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/LauncherApps\0", "startShortcut\0", "(Ljava/lang/String;Ljava/lang/String;Landroid/graphics/Rect;Landroid/os/Bundle;Landroid/os/UserHandle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [startShortcut](https://developer.android.com/reference/android/content/pm/LauncherApps.html#startShortcut(android.content.pm.ShortcutInfo,%20android.graphics.Rect,%20android.os.Bundle))
        ///
        /// Required features: "android-content-pm-ShortcutInfo", "android-graphics-Rect", "android-os-Bundle"
        #[cfg(any(feature = "all", all(feature = "android-content-pm-ShortcutInfo", feature = "android-graphics-Rect", feature = "android-os-Bundle")))]
        pub fn startShortcut_ShortcutInfo_Rect_Bundle<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::pm::ShortcutInfo>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Rect>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/LauncherApps", java.flags == PUBLIC, .name == "startShortcut", .descriptor == "(Landroid/content/pm/ShortcutInfo;Landroid/graphics/Rect;Landroid/os/Bundle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/LauncherApps\0", "startShortcut\0", "(Landroid/content/pm/ShortcutInfo;Landroid/graphics/Rect;Landroid/os/Bundle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [registerCallback](https://developer.android.com/reference/android/content/pm/LauncherApps.html#registerCallback(android.content.pm.LauncherApps.Callback))
        ///
        /// Required features: "android-content-pm-LauncherApps_Callback"
        #[cfg(any(feature = "all", all(feature = "android-content-pm-LauncherApps_Callback")))]
        pub fn registerCallback_Callback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::pm::LauncherApps_Callback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/LauncherApps", java.flags == PUBLIC, .name == "registerCallback", .descriptor == "(Landroid/content/pm/LauncherApps$Callback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/LauncherApps\0", "registerCallback\0", "(Landroid/content/pm/LauncherApps$Callback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [registerCallback](https://developer.android.com/reference/android/content/pm/LauncherApps.html#registerCallback(android.content.pm.LauncherApps.Callback,%20android.os.Handler))
        ///
        /// Required features: "android-content-pm-LauncherApps_Callback", "android-os-Handler"
        #[cfg(any(feature = "all", all(feature = "android-content-pm-LauncherApps_Callback", feature = "android-os-Handler")))]
        pub fn registerCallback_Callback_Handler<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::pm::LauncherApps_Callback>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/LauncherApps", java.flags == PUBLIC, .name == "registerCallback", .descriptor == "(Landroid/content/pm/LauncherApps$Callback;Landroid/os/Handler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/LauncherApps\0", "registerCallback\0", "(Landroid/content/pm/LauncherApps$Callback;Landroid/os/Handler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unregisterCallback](https://developer.android.com/reference/android/content/pm/LauncherApps.html#unregisterCallback(android.content.pm.LauncherApps.Callback))
        ///
        /// Required features: "android-content-pm-LauncherApps_Callback"
        #[cfg(any(feature = "all", all(feature = "android-content-pm-LauncherApps_Callback")))]
        pub fn unregisterCallback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::pm::LauncherApps_Callback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/LauncherApps", java.flags == PUBLIC, .name == "unregisterCallback", .descriptor == "(Landroid/content/pm/LauncherApps$Callback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/LauncherApps\0", "unregisterCallback\0", "(Landroid/content/pm/LauncherApps$Callback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [registerPackageInstallerSessionCallback](https://developer.android.com/reference/android/content/pm/LauncherApps.html#registerPackageInstallerSessionCallback(java.util.concurrent.Executor,%20android.content.pm.PackageInstaller.SessionCallback))
        ///
        /// Required features: "android-content-pm-PackageInstaller_SessionCallback", "java-util-concurrent-Executor"
        #[cfg(any(feature = "all", all(feature = "android-content-pm-PackageInstaller_SessionCallback", feature = "java-util-concurrent-Executor")))]
        pub fn registerPackageInstallerSessionCallback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::pm::PackageInstaller_SessionCallback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/LauncherApps", java.flags == PUBLIC, .name == "registerPackageInstallerSessionCallback", .descriptor == "(Ljava/util/concurrent/Executor;Landroid/content/pm/PackageInstaller$SessionCallback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/LauncherApps\0", "registerPackageInstallerSessionCallback\0", "(Ljava/util/concurrent/Executor;Landroid/content/pm/PackageInstaller$SessionCallback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unregisterPackageInstallerSessionCallback](https://developer.android.com/reference/android/content/pm/LauncherApps.html#unregisterPackageInstallerSessionCallback(android.content.pm.PackageInstaller.SessionCallback))
        ///
        /// Required features: "android-content-pm-PackageInstaller_SessionCallback"
        #[cfg(any(feature = "all", all(feature = "android-content-pm-PackageInstaller_SessionCallback")))]
        pub fn unregisterPackageInstallerSessionCallback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::pm::PackageInstaller_SessionCallback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/LauncherApps", java.flags == PUBLIC, .name == "unregisterPackageInstallerSessionCallback", .descriptor == "(Landroid/content/pm/PackageInstaller$SessionCallback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/LauncherApps\0", "unregisterPackageInstallerSessionCallback\0", "(Landroid/content/pm/PackageInstaller$SessionCallback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAllPackageInstallerSessions](https://developer.android.com/reference/android/content/pm/LauncherApps.html#getAllPackageInstallerSessions())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getAllPackageInstallerSessions<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/LauncherApps", java.flags == PUBLIC, .name == "getAllPackageInstallerSessions", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/LauncherApps\0", "getAllPackageInstallerSessions\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPinItemRequest](https://developer.android.com/reference/android/content/pm/LauncherApps.html#getPinItemRequest(android.content.Intent))
        ///
        /// Required features: "android-content-Intent", "android-content-pm-LauncherApps_PinItemRequest"
        #[cfg(any(feature = "all", all(feature = "android-content-Intent", feature = "android-content-pm-LauncherApps_PinItemRequest")))]
        pub fn getPinItemRequest<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::pm::LauncherApps_PinItemRequest>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/LauncherApps", java.flags == PUBLIC, .name == "getPinItemRequest", .descriptor == "(Landroid/content/Intent;)Landroid/content/pm/LauncherApps$PinItemRequest;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/LauncherApps\0", "getPinItemRequest\0", "(Landroid/content/Intent;)Landroid/content/pm/LauncherApps$PinItemRequest;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [ACTION_CONFIRM_PIN_APPWIDGET](https://developer.android.com/reference/android/content/pm/LauncherApps.html#ACTION_CONFIRM_PIN_APPWIDGET)
        pub const ACTION_CONFIRM_PIN_APPWIDGET : &'static str = "android.content.pm.action.CONFIRM_PIN_APPWIDGET";

        /// public static final [ACTION_CONFIRM_PIN_SHORTCUT](https://developer.android.com/reference/android/content/pm/LauncherApps.html#ACTION_CONFIRM_PIN_SHORTCUT)
        pub const ACTION_CONFIRM_PIN_SHORTCUT : &'static str = "android.content.pm.action.CONFIRM_PIN_SHORTCUT";

        /// public static final [EXTRA_PIN_ITEM_REQUEST](https://developer.android.com/reference/android/content/pm/LauncherApps.html#EXTRA_PIN_ITEM_REQUEST)
        pub const EXTRA_PIN_ITEM_REQUEST : &'static str = "android.content.pm.extra.PIN_ITEM_REQUEST";
    }
}
