// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-content-pm-InstrumentationInfo"))]
__jni_bindgen! {
    /// public class [InstrumentationInfo](https://developer.android.com/reference/android/content/pm/InstrumentationInfo.html)
    ///
    /// Required feature: android-content-pm-InstrumentationInfo
    public class InstrumentationInfo ("android/content/pm/InstrumentationInfo") extends crate::android::content::pm::PackageItemInfo, implements crate::android::os::Parcelable {

        /// [InstrumentationInfo](https://developer.android.com/reference/android/content/pm/InstrumentationInfo.html#InstrumentationInfo())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::content::pm::InstrumentationInfo>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/InstrumentationInfo", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/InstrumentationInfo\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [InstrumentationInfo](https://developer.android.com/reference/android/content/pm/InstrumentationInfo.html#InstrumentationInfo(android.content.pm.InstrumentationInfo))
        ///
        /// Required features: "android-content-pm-InstrumentationInfo"
        #[cfg(any(feature = "all", all(feature = "android-content-pm-InstrumentationInfo")))]
        pub fn new_InstrumentationInfo<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::pm::InstrumentationInfo>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::content::pm::InstrumentationInfo>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/InstrumentationInfo", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/content/pm/InstrumentationInfo;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/InstrumentationInfo\0", "<init>\0", "(Landroid/content/pm/InstrumentationInfo;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/android/content/pm/InstrumentationInfo.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/InstrumentationInfo", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/InstrumentationInfo\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [describeContents](https://developer.android.com/reference/android/content/pm/InstrumentationInfo.html#describeContents())
        pub fn describeContents<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/InstrumentationInfo", java.flags == PUBLIC, .name == "describeContents", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/InstrumentationInfo\0", "describeContents\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [writeToParcel](https://developer.android.com/reference/android/content/pm/InstrumentationInfo.html#writeToParcel(android.os.Parcel,%20int))
        ///
        /// Required features: "android-os-Parcel"
        #[cfg(any(feature = "all", all(feature = "android-os-Parcel")))]
        pub fn writeToParcel<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Parcel>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/InstrumentationInfo", java.flags == PUBLIC, .name == "writeToParcel", .descriptor == "(Landroid/os/Parcel;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/InstrumentationInfo\0", "writeToParcel\0", "(Landroid/os/Parcel;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// **get** public static final [CREATOR](https://developer.android.com/reference/android/content/pm/InstrumentationInfo.html#CREATOR)
        ///
        /// Required feature: android-os-Parcelable_Creator
        #[cfg(any(feature = "all", feature = "android-os-Parcelable_Creator"))]
        pub fn CREATOR<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Parcelable_Creator>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/content/pm/InstrumentationInfo\0", "CREATOR\0", "Landroid/os/Parcelable$Creator;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public [dataDir](https://developer.android.com/reference/android/content/pm/InstrumentationInfo.html#dataDir)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn dataDir<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/InstrumentationInfo\0", "dataDir\0", "Ljava/lang/String;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [dataDir](https://developer.android.com/reference/android/content/pm/InstrumentationInfo.html#dataDir)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn set_dataDir<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::java::lang::String>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/InstrumentationInfo\0", "dataDir\0", "Ljava/lang/String;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [functionalTest](https://developer.android.com/reference/android/content/pm/InstrumentationInfo.html#functionalTest)
        pub fn functionalTest<'env>(&'env self) -> bool {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/InstrumentationInfo\0", "functionalTest\0", "Z\0");
                env.get_boolean_field(class, field)
            }
        }

        /// **set** public [functionalTest](https://developer.android.com/reference/android/content/pm/InstrumentationInfo.html#functionalTest)
        pub fn set_functionalTest<'env>(&'env self, value: bool) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/InstrumentationInfo\0", "functionalTest\0", "Z\0");
                env.set_boolean_field(class, field, value)
            }
        }

        /// **get** public [handleProfiling](https://developer.android.com/reference/android/content/pm/InstrumentationInfo.html#handleProfiling)
        pub fn handleProfiling<'env>(&'env self) -> bool {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/InstrumentationInfo\0", "handleProfiling\0", "Z\0");
                env.get_boolean_field(class, field)
            }
        }

        /// **set** public [handleProfiling](https://developer.android.com/reference/android/content/pm/InstrumentationInfo.html#handleProfiling)
        pub fn set_handleProfiling<'env>(&'env self, value: bool) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/InstrumentationInfo\0", "handleProfiling\0", "Z\0");
                env.set_boolean_field(class, field, value)
            }
        }

        /// **get** public [publicSourceDir](https://developer.android.com/reference/android/content/pm/InstrumentationInfo.html#publicSourceDir)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn publicSourceDir<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/InstrumentationInfo\0", "publicSourceDir\0", "Ljava/lang/String;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [publicSourceDir](https://developer.android.com/reference/android/content/pm/InstrumentationInfo.html#publicSourceDir)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn set_publicSourceDir<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::java::lang::String>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/InstrumentationInfo\0", "publicSourceDir\0", "Ljava/lang/String;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [sourceDir](https://developer.android.com/reference/android/content/pm/InstrumentationInfo.html#sourceDir)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn sourceDir<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/InstrumentationInfo\0", "sourceDir\0", "Ljava/lang/String;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [sourceDir](https://developer.android.com/reference/android/content/pm/InstrumentationInfo.html#sourceDir)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn set_sourceDir<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::java::lang::String>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/InstrumentationInfo\0", "sourceDir\0", "Ljava/lang/String;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [splitNames](https://developer.android.com/reference/android/content/pm/InstrumentationInfo.html#splitNames)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn splitNames<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/InstrumentationInfo\0", "splitNames\0", "[Ljava/lang/String;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [splitNames](https://developer.android.com/reference/android/content/pm/InstrumentationInfo.html#splitNames)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn set_splitNames<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/InstrumentationInfo\0", "splitNames\0", "[Ljava/lang/String;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [splitPublicSourceDirs](https://developer.android.com/reference/android/content/pm/InstrumentationInfo.html#splitPublicSourceDirs)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn splitPublicSourceDirs<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/InstrumentationInfo\0", "splitPublicSourceDirs\0", "[Ljava/lang/String;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [splitPublicSourceDirs](https://developer.android.com/reference/android/content/pm/InstrumentationInfo.html#splitPublicSourceDirs)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn set_splitPublicSourceDirs<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/InstrumentationInfo\0", "splitPublicSourceDirs\0", "[Ljava/lang/String;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [splitSourceDirs](https://developer.android.com/reference/android/content/pm/InstrumentationInfo.html#splitSourceDirs)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn splitSourceDirs<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/InstrumentationInfo\0", "splitSourceDirs\0", "[Ljava/lang/String;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [splitSourceDirs](https://developer.android.com/reference/android/content/pm/InstrumentationInfo.html#splitSourceDirs)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn set_splitSourceDirs<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/InstrumentationInfo\0", "splitSourceDirs\0", "[Ljava/lang/String;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [targetPackage](https://developer.android.com/reference/android/content/pm/InstrumentationInfo.html#targetPackage)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn targetPackage<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/InstrumentationInfo\0", "targetPackage\0", "Ljava/lang/String;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [targetPackage](https://developer.android.com/reference/android/content/pm/InstrumentationInfo.html#targetPackage)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn set_targetPackage<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::java::lang::String>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/InstrumentationInfo\0", "targetPackage\0", "Ljava/lang/String;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [targetProcesses](https://developer.android.com/reference/android/content/pm/InstrumentationInfo.html#targetProcesses)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn targetProcesses<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/InstrumentationInfo\0", "targetProcesses\0", "Ljava/lang/String;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [targetProcesses](https://developer.android.com/reference/android/content/pm/InstrumentationInfo.html#targetProcesses)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn set_targetProcesses<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::java::lang::String>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/InstrumentationInfo\0", "targetProcesses\0", "Ljava/lang/String;\0");
                env.set_object_field(class, field, value)
            }
        }
    }
}
