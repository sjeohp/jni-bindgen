// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-content-pm-ApplicationInfo"))]
__jni_bindgen! {
    /// public class [ApplicationInfo](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html)
    ///
    /// Required feature: android-content-pm-ApplicationInfo
    public class ApplicationInfo ("android/content/pm/ApplicationInfo") extends crate::android::content::pm::PackageItemInfo, implements crate::android::os::Parcelable {

        /// [ApplicationInfo](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#ApplicationInfo())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::content::pm::ApplicationInfo>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/ApplicationInfo", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/ApplicationInfo\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ApplicationInfo](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#ApplicationInfo(android.content.pm.ApplicationInfo))
        ///
        /// Required features: "android-content-pm-ApplicationInfo"
        #[cfg(any(feature = "all", all(feature = "android-content-pm-ApplicationInfo")))]
        pub fn new_ApplicationInfo<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::pm::ApplicationInfo>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::content::pm::ApplicationInfo>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/ApplicationInfo", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/content/pm/ApplicationInfo;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/ApplicationInfo\0", "<init>\0", "(Landroid/content/pm/ApplicationInfo;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCategoryTitle](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#getCategoryTitle(android.content.Context,%20int))
        ///
        /// Required features: "android-content-Context", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "java-lang-CharSequence")))]
        pub fn getCategoryTitle<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::CharSequence>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/ApplicationInfo", java.flags == PUBLIC | STATIC, .name == "getCategoryTitle", .descriptor == "(Landroid/content/Context;I)Ljava/lang/CharSequence;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/content/pm/ApplicationInfo\0", "getCategoryTitle\0", "(Landroid/content/Context;I)Ljava/lang/CharSequence;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dump](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#dump(android.util.Printer,%20java.lang.String))
        ///
        /// Required features: "android-util-Printer", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-util-Printer", feature = "java-lang-String")))]
        pub fn dump<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::util::Printer>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/ApplicationInfo", java.flags == PUBLIC, .name == "dump", .descriptor == "(Landroid/util/Printer;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/ApplicationInfo\0", "dump\0", "(Landroid/util/Printer;Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/ApplicationInfo", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/ApplicationInfo\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [describeContents](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#describeContents())
        pub fn describeContents<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/ApplicationInfo", java.flags == PUBLIC, .name == "describeContents", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/ApplicationInfo\0", "describeContents\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [writeToParcel](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#writeToParcel(android.os.Parcel,%20int))
        ///
        /// Required features: "android-os-Parcel"
        #[cfg(any(feature = "all", all(feature = "android-os-Parcel")))]
        pub fn writeToParcel<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Parcel>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/ApplicationInfo", java.flags == PUBLIC, .name == "writeToParcel", .descriptor == "(Landroid/os/Parcel;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/ApplicationInfo\0", "writeToParcel\0", "(Landroid/os/Parcel;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [loadDescription](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#loadDescription(android.content.pm.PackageManager))
        ///
        /// Required features: "android-content-pm-PackageManager", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-content-pm-PackageManager", feature = "java-lang-CharSequence")))]
        pub fn loadDescription<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::pm::PackageManager>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::CharSequence>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/ApplicationInfo", java.flags == PUBLIC, .name == "loadDescription", .descriptor == "(Landroid/content/pm/PackageManager;)Ljava/lang/CharSequence;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/ApplicationInfo\0", "loadDescription\0", "(Landroid/content/pm/PackageManager;)Ljava/lang/CharSequence;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isVirtualPreload](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#isVirtualPreload())
        pub fn isVirtualPreload<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/ApplicationInfo", java.flags == PUBLIC, .name == "isVirtualPreload", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/ApplicationInfo\0", "isVirtualPreload\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isProfileableByShell](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#isProfileableByShell())
        pub fn isProfileableByShell<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/ApplicationInfo", java.flags == PUBLIC, .name == "isProfileableByShell", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/ApplicationInfo\0", "isProfileableByShell\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isResourceOverlay](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#isResourceOverlay())
        pub fn isResourceOverlay<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/ApplicationInfo", java.flags == PUBLIC, .name == "isResourceOverlay", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/ApplicationInfo\0", "isResourceOverlay\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [CATEGORY_AUDIO](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#CATEGORY_AUDIO)
        pub const CATEGORY_AUDIO : i32 = 1;

        /// public static final [CATEGORY_GAME](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#CATEGORY_GAME)
        pub const CATEGORY_GAME : i32 = 0;

        /// public static final [CATEGORY_IMAGE](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#CATEGORY_IMAGE)
        pub const CATEGORY_IMAGE : i32 = 3;

        /// public static final [CATEGORY_MAPS](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#CATEGORY_MAPS)
        pub const CATEGORY_MAPS : i32 = 6;

        /// public static final [CATEGORY_NEWS](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#CATEGORY_NEWS)
        pub const CATEGORY_NEWS : i32 = 5;

        /// public static final [CATEGORY_PRODUCTIVITY](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#CATEGORY_PRODUCTIVITY)
        pub const CATEGORY_PRODUCTIVITY : i32 = 7;

        /// public static final [CATEGORY_SOCIAL](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#CATEGORY_SOCIAL)
        pub const CATEGORY_SOCIAL : i32 = 4;

        /// public static final [CATEGORY_UNDEFINED](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#CATEGORY_UNDEFINED)
        pub const CATEGORY_UNDEFINED : i32 = -1;

        /// public static final [CATEGORY_VIDEO](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#CATEGORY_VIDEO)
        pub const CATEGORY_VIDEO : i32 = 2;

        /// **get** public static final [CREATOR](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#CREATOR)
        ///
        /// Required feature: android-os-Parcelable_Creator
        #[cfg(any(feature = "all", feature = "android-os-Parcelable_Creator"))]
        pub fn CREATOR<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Parcelable_Creator>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/content/pm/ApplicationInfo\0", "CREATOR\0", "Landroid/os/Parcelable$Creator;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// public static final [FLAG_ALLOW_BACKUP](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#FLAG_ALLOW_BACKUP)
        pub const FLAG_ALLOW_BACKUP : i32 = 32768;

        /// public static final [FLAG_ALLOW_CLEAR_USER_DATA](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#FLAG_ALLOW_CLEAR_USER_DATA)
        pub const FLAG_ALLOW_CLEAR_USER_DATA : i32 = 64;

        /// public static final [FLAG_ALLOW_TASK_REPARENTING](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#FLAG_ALLOW_TASK_REPARENTING)
        pub const FLAG_ALLOW_TASK_REPARENTING : i32 = 32;

        /// public static final [FLAG_DEBUGGABLE](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#FLAG_DEBUGGABLE)
        pub const FLAG_DEBUGGABLE : i32 = 2;

        /// public static final [FLAG_EXTERNAL_STORAGE](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#FLAG_EXTERNAL_STORAGE)
        pub const FLAG_EXTERNAL_STORAGE : i32 = 262144;

        /// public static final [FLAG_EXTRACT_NATIVE_LIBS](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#FLAG_EXTRACT_NATIVE_LIBS)
        pub const FLAG_EXTRACT_NATIVE_LIBS : i32 = 268435456;

        /// public static final [FLAG_FACTORY_TEST](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#FLAG_FACTORY_TEST)
        pub const FLAG_FACTORY_TEST : i32 = 16;

        /// public static final [FLAG_FULL_BACKUP_ONLY](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#FLAG_FULL_BACKUP_ONLY)
        pub const FLAG_FULL_BACKUP_ONLY : i32 = 67108864;

        /// public static final [FLAG_HARDWARE_ACCELERATED](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#FLAG_HARDWARE_ACCELERATED)
        pub const FLAG_HARDWARE_ACCELERATED : i32 = 536870912;

        /// public static final [FLAG_HAS_CODE](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#FLAG_HAS_CODE)
        pub const FLAG_HAS_CODE : i32 = 4;

        /// public static final [FLAG_INSTALLED](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#FLAG_INSTALLED)
        pub const FLAG_INSTALLED : i32 = 8388608;

        /// public static final [FLAG_IS_DATA_ONLY](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#FLAG_IS_DATA_ONLY)
        pub const FLAG_IS_DATA_ONLY : i32 = 16777216;

        /// public static final [FLAG_IS_GAME](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#FLAG_IS_GAME)
        #[deprecated] pub const FLAG_IS_GAME : i32 = 33554432;

        /// public static final [FLAG_KILL_AFTER_RESTORE](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#FLAG_KILL_AFTER_RESTORE)
        pub const FLAG_KILL_AFTER_RESTORE : i32 = 65536;

        /// public static final [FLAG_LARGE_HEAP](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#FLAG_LARGE_HEAP)
        pub const FLAG_LARGE_HEAP : i32 = 1048576;

        /// public static final [FLAG_MULTIARCH](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#FLAG_MULTIARCH)
        pub const FLAG_MULTIARCH : i32 = -2147483648;

        /// public static final [FLAG_PERSISTENT](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#FLAG_PERSISTENT)
        pub const FLAG_PERSISTENT : i32 = 8;

        /// public static final [FLAG_RESIZEABLE_FOR_SCREENS](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#FLAG_RESIZEABLE_FOR_SCREENS)
        pub const FLAG_RESIZEABLE_FOR_SCREENS : i32 = 4096;

        /// public static final [FLAG_RESTORE_ANY_VERSION](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#FLAG_RESTORE_ANY_VERSION)
        pub const FLAG_RESTORE_ANY_VERSION : i32 = 131072;

        /// public static final [FLAG_STOPPED](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#FLAG_STOPPED)
        pub const FLAG_STOPPED : i32 = 2097152;

        /// public static final [FLAG_SUPPORTS_LARGE_SCREENS](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#FLAG_SUPPORTS_LARGE_SCREENS)
        pub const FLAG_SUPPORTS_LARGE_SCREENS : i32 = 2048;

        /// public static final [FLAG_SUPPORTS_NORMAL_SCREENS](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#FLAG_SUPPORTS_NORMAL_SCREENS)
        pub const FLAG_SUPPORTS_NORMAL_SCREENS : i32 = 1024;

        /// public static final [FLAG_SUPPORTS_RTL](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#FLAG_SUPPORTS_RTL)
        pub const FLAG_SUPPORTS_RTL : i32 = 4194304;

        /// public static final [FLAG_SUPPORTS_SCREEN_DENSITIES](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#FLAG_SUPPORTS_SCREEN_DENSITIES)
        pub const FLAG_SUPPORTS_SCREEN_DENSITIES : i32 = 8192;

        /// public static final [FLAG_SUPPORTS_SMALL_SCREENS](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#FLAG_SUPPORTS_SMALL_SCREENS)
        pub const FLAG_SUPPORTS_SMALL_SCREENS : i32 = 512;

        /// public static final [FLAG_SUPPORTS_XLARGE_SCREENS](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#FLAG_SUPPORTS_XLARGE_SCREENS)
        pub const FLAG_SUPPORTS_XLARGE_SCREENS : i32 = 524288;

        /// public static final [FLAG_SUSPENDED](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#FLAG_SUSPENDED)
        pub const FLAG_SUSPENDED : i32 = 1073741824;

        /// public static final [FLAG_SYSTEM](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#FLAG_SYSTEM)
        pub const FLAG_SYSTEM : i32 = 1;

        /// public static final [FLAG_TEST_ONLY](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#FLAG_TEST_ONLY)
        pub const FLAG_TEST_ONLY : i32 = 256;

        /// public static final [FLAG_UPDATED_SYSTEM_APP](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#FLAG_UPDATED_SYSTEM_APP)
        pub const FLAG_UPDATED_SYSTEM_APP : i32 = 128;

        /// public static final [FLAG_USES_CLEARTEXT_TRAFFIC](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#FLAG_USES_CLEARTEXT_TRAFFIC)
        pub const FLAG_USES_CLEARTEXT_TRAFFIC : i32 = 134217728;

        /// public static final [FLAG_VM_SAFE_MODE](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#FLAG_VM_SAFE_MODE)
        pub const FLAG_VM_SAFE_MODE : i32 = 16384;

        /// **get** public [appComponentFactory](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#appComponentFactory)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn appComponentFactory<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ApplicationInfo\0", "appComponentFactory\0", "Ljava/lang/String;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [appComponentFactory](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#appComponentFactory)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn set_appComponentFactory<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::java::lang::String>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ApplicationInfo\0", "appComponentFactory\0", "Ljava/lang/String;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [backupAgentName](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#backupAgentName)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn backupAgentName<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ApplicationInfo\0", "backupAgentName\0", "Ljava/lang/String;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [backupAgentName](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#backupAgentName)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn set_backupAgentName<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::java::lang::String>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ApplicationInfo\0", "backupAgentName\0", "Ljava/lang/String;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [category](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#category)
        pub fn category<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ApplicationInfo\0", "category\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [category](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#category)
        pub fn set_category<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ApplicationInfo\0", "category\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [className](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#className)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn className<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ApplicationInfo\0", "className\0", "Ljava/lang/String;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [className](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#className)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn set_className<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::java::lang::String>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ApplicationInfo\0", "className\0", "Ljava/lang/String;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [compatibleWidthLimitDp](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#compatibleWidthLimitDp)
        pub fn compatibleWidthLimitDp<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ApplicationInfo\0", "compatibleWidthLimitDp\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [compatibleWidthLimitDp](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#compatibleWidthLimitDp)
        pub fn set_compatibleWidthLimitDp<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ApplicationInfo\0", "compatibleWidthLimitDp\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [dataDir](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#dataDir)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn dataDir<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ApplicationInfo\0", "dataDir\0", "Ljava/lang/String;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [dataDir](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#dataDir)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn set_dataDir<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::java::lang::String>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ApplicationInfo\0", "dataDir\0", "Ljava/lang/String;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [descriptionRes](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#descriptionRes)
        pub fn descriptionRes<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ApplicationInfo\0", "descriptionRes\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [descriptionRes](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#descriptionRes)
        pub fn set_descriptionRes<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ApplicationInfo\0", "descriptionRes\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [deviceProtectedDataDir](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#deviceProtectedDataDir)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn deviceProtectedDataDir<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ApplicationInfo\0", "deviceProtectedDataDir\0", "Ljava/lang/String;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [deviceProtectedDataDir](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#deviceProtectedDataDir)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn set_deviceProtectedDataDir<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::java::lang::String>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ApplicationInfo\0", "deviceProtectedDataDir\0", "Ljava/lang/String;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [enabled](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#enabled)
        pub fn enabled<'env>(&'env self) -> bool {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ApplicationInfo\0", "enabled\0", "Z\0");
                env.get_boolean_field(class, field)
            }
        }

        /// **set** public [enabled](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#enabled)
        pub fn set_enabled<'env>(&'env self, value: bool) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ApplicationInfo\0", "enabled\0", "Z\0");
                env.set_boolean_field(class, field, value)
            }
        }

        /// **get** public [flags](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#flags)
        pub fn flags<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ApplicationInfo\0", "flags\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [flags](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#flags)
        pub fn set_flags<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ApplicationInfo\0", "flags\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [largestWidthLimitDp](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#largestWidthLimitDp)
        pub fn largestWidthLimitDp<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ApplicationInfo\0", "largestWidthLimitDp\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [largestWidthLimitDp](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#largestWidthLimitDp)
        pub fn set_largestWidthLimitDp<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ApplicationInfo\0", "largestWidthLimitDp\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [manageSpaceActivityName](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#manageSpaceActivityName)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn manageSpaceActivityName<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ApplicationInfo\0", "manageSpaceActivityName\0", "Ljava/lang/String;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [manageSpaceActivityName](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#manageSpaceActivityName)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn set_manageSpaceActivityName<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::java::lang::String>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ApplicationInfo\0", "manageSpaceActivityName\0", "Ljava/lang/String;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [minSdkVersion](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#minSdkVersion)
        pub fn minSdkVersion<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ApplicationInfo\0", "minSdkVersion\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [minSdkVersion](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#minSdkVersion)
        pub fn set_minSdkVersion<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ApplicationInfo\0", "minSdkVersion\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [nativeLibraryDir](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#nativeLibraryDir)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn nativeLibraryDir<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ApplicationInfo\0", "nativeLibraryDir\0", "Ljava/lang/String;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [nativeLibraryDir](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#nativeLibraryDir)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn set_nativeLibraryDir<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::java::lang::String>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ApplicationInfo\0", "nativeLibraryDir\0", "Ljava/lang/String;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [permission](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#permission)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn permission<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ApplicationInfo\0", "permission\0", "Ljava/lang/String;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [permission](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#permission)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn set_permission<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::java::lang::String>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ApplicationInfo\0", "permission\0", "Ljava/lang/String;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [processName](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#processName)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn processName<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ApplicationInfo\0", "processName\0", "Ljava/lang/String;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [processName](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#processName)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn set_processName<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::java::lang::String>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ApplicationInfo\0", "processName\0", "Ljava/lang/String;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [publicSourceDir](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#publicSourceDir)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn publicSourceDir<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ApplicationInfo\0", "publicSourceDir\0", "Ljava/lang/String;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [publicSourceDir](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#publicSourceDir)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn set_publicSourceDir<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::java::lang::String>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ApplicationInfo\0", "publicSourceDir\0", "Ljava/lang/String;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [requiresSmallestWidthDp](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#requiresSmallestWidthDp)
        pub fn requiresSmallestWidthDp<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ApplicationInfo\0", "requiresSmallestWidthDp\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [requiresSmallestWidthDp](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#requiresSmallestWidthDp)
        pub fn set_requiresSmallestWidthDp<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ApplicationInfo\0", "requiresSmallestWidthDp\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [sharedLibraryFiles](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#sharedLibraryFiles)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn sharedLibraryFiles<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ApplicationInfo\0", "sharedLibraryFiles\0", "[Ljava/lang/String;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [sharedLibraryFiles](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#sharedLibraryFiles)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn set_sharedLibraryFiles<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ApplicationInfo\0", "sharedLibraryFiles\0", "[Ljava/lang/String;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [sourceDir](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#sourceDir)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn sourceDir<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ApplicationInfo\0", "sourceDir\0", "Ljava/lang/String;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [sourceDir](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#sourceDir)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn set_sourceDir<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::java::lang::String>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ApplicationInfo\0", "sourceDir\0", "Ljava/lang/String;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [splitNames](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#splitNames)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn splitNames<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ApplicationInfo\0", "splitNames\0", "[Ljava/lang/String;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [splitNames](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#splitNames)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn set_splitNames<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ApplicationInfo\0", "splitNames\0", "[Ljava/lang/String;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [splitPublicSourceDirs](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#splitPublicSourceDirs)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn splitPublicSourceDirs<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ApplicationInfo\0", "splitPublicSourceDirs\0", "[Ljava/lang/String;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [splitPublicSourceDirs](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#splitPublicSourceDirs)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn set_splitPublicSourceDirs<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ApplicationInfo\0", "splitPublicSourceDirs\0", "[Ljava/lang/String;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [splitSourceDirs](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#splitSourceDirs)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn splitSourceDirs<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ApplicationInfo\0", "splitSourceDirs\0", "[Ljava/lang/String;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [splitSourceDirs](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#splitSourceDirs)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn set_splitSourceDirs<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ApplicationInfo\0", "splitSourceDirs\0", "[Ljava/lang/String;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [storageUuid](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#storageUuid)
        ///
        /// Required feature: java-util-UUID
        #[cfg(any(feature = "all", feature = "java-util-UUID"))]
        pub fn storageUuid<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::UUID>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ApplicationInfo\0", "storageUuid\0", "Ljava/util/UUID;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [storageUuid](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#storageUuid)
        ///
        /// Required feature: java-util-UUID
        #[cfg(any(feature = "all", feature = "java-util-UUID"))]
        pub fn set_storageUuid<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::java::util::UUID>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ApplicationInfo\0", "storageUuid\0", "Ljava/util/UUID;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [targetSdkVersion](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#targetSdkVersion)
        pub fn targetSdkVersion<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ApplicationInfo\0", "targetSdkVersion\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [targetSdkVersion](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#targetSdkVersion)
        pub fn set_targetSdkVersion<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ApplicationInfo\0", "targetSdkVersion\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [taskAffinity](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#taskAffinity)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn taskAffinity<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ApplicationInfo\0", "taskAffinity\0", "Ljava/lang/String;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [taskAffinity](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#taskAffinity)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn set_taskAffinity<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::java::lang::String>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ApplicationInfo\0", "taskAffinity\0", "Ljava/lang/String;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [theme](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#theme)
        pub fn theme<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ApplicationInfo\0", "theme\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [theme](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#theme)
        pub fn set_theme<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ApplicationInfo\0", "theme\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [uiOptions](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#uiOptions)
        pub fn uiOptions<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ApplicationInfo\0", "uiOptions\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [uiOptions](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#uiOptions)
        pub fn set_uiOptions<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ApplicationInfo\0", "uiOptions\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [uid](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#uid)
        pub fn uid<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ApplicationInfo\0", "uid\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [uid](https://developer.android.com/reference/android/content/pm/ApplicationInfo.html#uid)
        pub fn set_uid<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ApplicationInfo\0", "uid\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }
    }
}
