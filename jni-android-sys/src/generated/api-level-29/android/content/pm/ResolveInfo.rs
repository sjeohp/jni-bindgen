// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-content-pm-ResolveInfo"))]
__jni_bindgen! {
    /// public class [ResolveInfo](https://developer.android.com/reference/android/content/pm/ResolveInfo.html)
    ///
    /// Required feature: android-content-pm-ResolveInfo
    public class ResolveInfo ("android/content/pm/ResolveInfo") extends crate::java::lang::Object, implements crate::android::os::Parcelable {

        /// [ResolveInfo](https://developer.android.com/reference/android/content/pm/ResolveInfo.html#ResolveInfo())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::content::pm::ResolveInfo>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/ResolveInfo", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/ResolveInfo\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ResolveInfo](https://developer.android.com/reference/android/content/pm/ResolveInfo.html#ResolveInfo(android.content.pm.ResolveInfo))
        ///
        /// Required features: "android-content-pm-ResolveInfo"
        #[cfg(any(feature = "all", all(feature = "android-content-pm-ResolveInfo")))]
        pub fn new_ResolveInfo<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::pm::ResolveInfo>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::content::pm::ResolveInfo>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/ResolveInfo", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/content/pm/ResolveInfo;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/ResolveInfo\0", "<init>\0", "(Landroid/content/pm/ResolveInfo;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [loadLabel](https://developer.android.com/reference/android/content/pm/ResolveInfo.html#loadLabel(android.content.pm.PackageManager))
        ///
        /// Required features: "android-content-pm-PackageManager", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-content-pm-PackageManager", feature = "java-lang-CharSequence")))]
        pub fn loadLabel<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::pm::PackageManager>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::CharSequence>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/ResolveInfo", java.flags == PUBLIC, .name == "loadLabel", .descriptor == "(Landroid/content/pm/PackageManager;)Ljava/lang/CharSequence;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/ResolveInfo\0", "loadLabel\0", "(Landroid/content/pm/PackageManager;)Ljava/lang/CharSequence;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [loadIcon](https://developer.android.com/reference/android/content/pm/ResolveInfo.html#loadIcon(android.content.pm.PackageManager))
        ///
        /// Required features: "android-content-pm-PackageManager", "android-graphics-drawable-Drawable"
        #[cfg(any(feature = "all", all(feature = "android-content-pm-PackageManager", feature = "android-graphics-drawable-Drawable")))]
        pub fn loadIcon<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::pm::PackageManager>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::drawable::Drawable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/ResolveInfo", java.flags == PUBLIC, .name == "loadIcon", .descriptor == "(Landroid/content/pm/PackageManager;)Landroid/graphics/drawable/Drawable;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/ResolveInfo\0", "loadIcon\0", "(Landroid/content/pm/PackageManager;)Landroid/graphics/drawable/Drawable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getIconResource](https://developer.android.com/reference/android/content/pm/ResolveInfo.html#getIconResource())
        pub fn getIconResource<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/ResolveInfo", java.flags == PUBLIC | FINAL, .name == "getIconResource", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/ResolveInfo\0", "getIconResource\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dump](https://developer.android.com/reference/android/content/pm/ResolveInfo.html#dump(android.util.Printer,%20java.lang.String))
        ///
        /// Required features: "android-util-Printer", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-util-Printer", feature = "java-lang-String")))]
        pub fn dump<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::util::Printer>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/ResolveInfo", java.flags == PUBLIC, .name == "dump", .descriptor == "(Landroid/util/Printer;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/ResolveInfo\0", "dump\0", "(Landroid/util/Printer;Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/android/content/pm/ResolveInfo.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/ResolveInfo", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/ResolveInfo\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [describeContents](https://developer.android.com/reference/android/content/pm/ResolveInfo.html#describeContents())
        pub fn describeContents<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/ResolveInfo", java.flags == PUBLIC, .name == "describeContents", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/ResolveInfo\0", "describeContents\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [writeToParcel](https://developer.android.com/reference/android/content/pm/ResolveInfo.html#writeToParcel(android.os.Parcel,%20int))
        ///
        /// Required features: "android-os-Parcel"
        #[cfg(any(feature = "all", all(feature = "android-os-Parcel")))]
        pub fn writeToParcel<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Parcel>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/ResolveInfo", java.flags == PUBLIC, .name == "writeToParcel", .descriptor == "(Landroid/os/Parcel;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/ResolveInfo\0", "writeToParcel\0", "(Landroid/os/Parcel;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// **get** public static final [CREATOR](https://developer.android.com/reference/android/content/pm/ResolveInfo.html#CREATOR)
        ///
        /// Required feature: android-os-Parcelable_Creator
        #[cfg(any(feature = "all", feature = "android-os-Parcelable_Creator"))]
        pub fn CREATOR<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Parcelable_Creator>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/content/pm/ResolveInfo\0", "CREATOR\0", "Landroid/os/Parcelable$Creator;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public [activityInfo](https://developer.android.com/reference/android/content/pm/ResolveInfo.html#activityInfo)
        ///
        /// Required feature: android-content-pm-ActivityInfo
        #[cfg(any(feature = "all", feature = "android-content-pm-ActivityInfo"))]
        pub fn activityInfo<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::pm::ActivityInfo>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ResolveInfo\0", "activityInfo\0", "Landroid/content/pm/ActivityInfo;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [activityInfo](https://developer.android.com/reference/android/content/pm/ResolveInfo.html#activityInfo)
        ///
        /// Required feature: android-content-pm-ActivityInfo
        #[cfg(any(feature = "all", feature = "android-content-pm-ActivityInfo"))]
        pub fn set_activityInfo<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::android::content::pm::ActivityInfo>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ResolveInfo\0", "activityInfo\0", "Landroid/content/pm/ActivityInfo;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [filter](https://developer.android.com/reference/android/content/pm/ResolveInfo.html#filter)
        ///
        /// Required feature: android-content-IntentFilter
        #[cfg(any(feature = "all", feature = "android-content-IntentFilter"))]
        pub fn filter<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::IntentFilter>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ResolveInfo\0", "filter\0", "Landroid/content/IntentFilter;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [filter](https://developer.android.com/reference/android/content/pm/ResolveInfo.html#filter)
        ///
        /// Required feature: android-content-IntentFilter
        #[cfg(any(feature = "all", feature = "android-content-IntentFilter"))]
        pub fn set_filter<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::android::content::IntentFilter>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ResolveInfo\0", "filter\0", "Landroid/content/IntentFilter;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [icon](https://developer.android.com/reference/android/content/pm/ResolveInfo.html#icon)
        pub fn icon<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ResolveInfo\0", "icon\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [icon](https://developer.android.com/reference/android/content/pm/ResolveInfo.html#icon)
        pub fn set_icon<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ResolveInfo\0", "icon\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [isDefault](https://developer.android.com/reference/android/content/pm/ResolveInfo.html#isDefault)
        pub fn isDefault<'env>(&'env self) -> bool {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ResolveInfo\0", "isDefault\0", "Z\0");
                env.get_boolean_field(class, field)
            }
        }

        /// **set** public [isDefault](https://developer.android.com/reference/android/content/pm/ResolveInfo.html#isDefault)
        pub fn set_isDefault<'env>(&'env self, value: bool) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ResolveInfo\0", "isDefault\0", "Z\0");
                env.set_boolean_field(class, field, value)
            }
        }

        /// **get** public [isInstantAppAvailable](https://developer.android.com/reference/android/content/pm/ResolveInfo.html#isInstantAppAvailable)
        pub fn isInstantAppAvailable<'env>(&'env self) -> bool {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ResolveInfo\0", "isInstantAppAvailable\0", "Z\0");
                env.get_boolean_field(class, field)
            }
        }

        /// **set** public [isInstantAppAvailable](https://developer.android.com/reference/android/content/pm/ResolveInfo.html#isInstantAppAvailable)
        pub fn set_isInstantAppAvailable<'env>(&'env self, value: bool) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ResolveInfo\0", "isInstantAppAvailable\0", "Z\0");
                env.set_boolean_field(class, field, value)
            }
        }

        /// **get** public [labelRes](https://developer.android.com/reference/android/content/pm/ResolveInfo.html#labelRes)
        pub fn labelRes<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ResolveInfo\0", "labelRes\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [labelRes](https://developer.android.com/reference/android/content/pm/ResolveInfo.html#labelRes)
        pub fn set_labelRes<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ResolveInfo\0", "labelRes\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [match](https://developer.android.com/reference/android/content/pm/ResolveInfo.html#match)
        pub fn r#match<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ResolveInfo\0", "match\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [match](https://developer.android.com/reference/android/content/pm/ResolveInfo.html#match)
        pub fn set_match<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ResolveInfo\0", "match\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [nonLocalizedLabel](https://developer.android.com/reference/android/content/pm/ResolveInfo.html#nonLocalizedLabel)
        ///
        /// Required feature: java-lang-CharSequence
        #[cfg(any(feature = "all", feature = "java-lang-CharSequence"))]
        pub fn nonLocalizedLabel<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::CharSequence>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ResolveInfo\0", "nonLocalizedLabel\0", "Ljava/lang/CharSequence;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [nonLocalizedLabel](https://developer.android.com/reference/android/content/pm/ResolveInfo.html#nonLocalizedLabel)
        ///
        /// Required feature: java-lang-CharSequence
        #[cfg(any(feature = "all", feature = "java-lang-CharSequence"))]
        pub fn set_nonLocalizedLabel<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::java::lang::CharSequence>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ResolveInfo\0", "nonLocalizedLabel\0", "Ljava/lang/CharSequence;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [preferredOrder](https://developer.android.com/reference/android/content/pm/ResolveInfo.html#preferredOrder)
        pub fn preferredOrder<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ResolveInfo\0", "preferredOrder\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [preferredOrder](https://developer.android.com/reference/android/content/pm/ResolveInfo.html#preferredOrder)
        pub fn set_preferredOrder<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ResolveInfo\0", "preferredOrder\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [priority](https://developer.android.com/reference/android/content/pm/ResolveInfo.html#priority)
        pub fn priority<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ResolveInfo\0", "priority\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [priority](https://developer.android.com/reference/android/content/pm/ResolveInfo.html#priority)
        pub fn set_priority<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ResolveInfo\0", "priority\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [providerInfo](https://developer.android.com/reference/android/content/pm/ResolveInfo.html#providerInfo)
        ///
        /// Required feature: android-content-pm-ProviderInfo
        #[cfg(any(feature = "all", feature = "android-content-pm-ProviderInfo"))]
        pub fn providerInfo<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::pm::ProviderInfo>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ResolveInfo\0", "providerInfo\0", "Landroid/content/pm/ProviderInfo;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [providerInfo](https://developer.android.com/reference/android/content/pm/ResolveInfo.html#providerInfo)
        ///
        /// Required feature: android-content-pm-ProviderInfo
        #[cfg(any(feature = "all", feature = "android-content-pm-ProviderInfo"))]
        pub fn set_providerInfo<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::android::content::pm::ProviderInfo>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ResolveInfo\0", "providerInfo\0", "Landroid/content/pm/ProviderInfo;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [resolvePackageName](https://developer.android.com/reference/android/content/pm/ResolveInfo.html#resolvePackageName)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn resolvePackageName<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ResolveInfo\0", "resolvePackageName\0", "Ljava/lang/String;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [resolvePackageName](https://developer.android.com/reference/android/content/pm/ResolveInfo.html#resolvePackageName)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn set_resolvePackageName<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::java::lang::String>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ResolveInfo\0", "resolvePackageName\0", "Ljava/lang/String;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [serviceInfo](https://developer.android.com/reference/android/content/pm/ResolveInfo.html#serviceInfo)
        ///
        /// Required feature: android-content-pm-ServiceInfo
        #[cfg(any(feature = "all", feature = "android-content-pm-ServiceInfo"))]
        pub fn serviceInfo<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::pm::ServiceInfo>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ResolveInfo\0", "serviceInfo\0", "Landroid/content/pm/ServiceInfo;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [serviceInfo](https://developer.android.com/reference/android/content/pm/ResolveInfo.html#serviceInfo)
        ///
        /// Required feature: android-content-pm-ServiceInfo
        #[cfg(any(feature = "all", feature = "android-content-pm-ServiceInfo"))]
        pub fn set_serviceInfo<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::android::content::pm::ServiceInfo>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ResolveInfo\0", "serviceInfo\0", "Landroid/content/pm/ServiceInfo;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [specificIndex](https://developer.android.com/reference/android/content/pm/ResolveInfo.html#specificIndex)
        pub fn specificIndex<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ResolveInfo\0", "specificIndex\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [specificIndex](https://developer.android.com/reference/android/content/pm/ResolveInfo.html#specificIndex)
        pub fn set_specificIndex<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ResolveInfo\0", "specificIndex\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }
    }
}
