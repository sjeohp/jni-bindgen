// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-content-pm-PackageInfo"))]
__jni_bindgen! {
    /// public class [PackageInfo](https://developer.android.com/reference/android/content/pm/PackageInfo.html)
    ///
    /// Required feature: android-content-pm-PackageInfo
    public class PackageInfo ("android/content/pm/PackageInfo") extends crate::java::lang::Object, implements crate::android::os::Parcelable {

        /// [PackageInfo](https://developer.android.com/reference/android/content/pm/PackageInfo.html#PackageInfo())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::content::pm::PackageInfo>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageInfo", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageInfo\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLongVersionCode](https://developer.android.com/reference/android/content/pm/PackageInfo.html#getLongVersionCode())
        pub fn getLongVersionCode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageInfo", java.flags == PUBLIC, .name == "getLongVersionCode", .descriptor == "()J"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageInfo\0", "getLongVersionCode\0", "()J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setLongVersionCode](https://developer.android.com/reference/android/content/pm/PackageInfo.html#setLongVersionCode(long))
        pub fn setLongVersionCode<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageInfo", java.flags == PUBLIC, .name == "setLongVersionCode", .descriptor == "(J)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageInfo\0", "setLongVersionCode\0", "(J)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/android/content/pm/PackageInfo.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageInfo", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageInfo\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [describeContents](https://developer.android.com/reference/android/content/pm/PackageInfo.html#describeContents())
        pub fn describeContents<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageInfo", java.flags == PUBLIC, .name == "describeContents", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageInfo\0", "describeContents\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [writeToParcel](https://developer.android.com/reference/android/content/pm/PackageInfo.html#writeToParcel(android.os.Parcel,%20int))
        ///
        /// Required features: "android-os-Parcel"
        #[cfg(any(feature = "all", all(feature = "android-os-Parcel")))]
        pub fn writeToParcel<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Parcel>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageInfo", java.flags == PUBLIC, .name == "writeToParcel", .descriptor == "(Landroid/os/Parcel;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageInfo\0", "writeToParcel\0", "(Landroid/os/Parcel;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// **get** public static final [CREATOR](https://developer.android.com/reference/android/content/pm/PackageInfo.html#CREATOR)
        ///
        /// Required feature: android-os-Parcelable_Creator
        #[cfg(any(feature = "all", feature = "android-os-Parcelable_Creator"))]
        pub fn CREATOR<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Parcelable_Creator>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/content/pm/PackageInfo\0", "CREATOR\0", "Landroid/os/Parcelable$Creator;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// public static final [INSTALL_LOCATION_AUTO](https://developer.android.com/reference/android/content/pm/PackageInfo.html#INSTALL_LOCATION_AUTO)
        pub const INSTALL_LOCATION_AUTO : i32 = 0;

        /// public static final [INSTALL_LOCATION_INTERNAL_ONLY](https://developer.android.com/reference/android/content/pm/PackageInfo.html#INSTALL_LOCATION_INTERNAL_ONLY)
        pub const INSTALL_LOCATION_INTERNAL_ONLY : i32 = 1;

        /// public static final [INSTALL_LOCATION_PREFER_EXTERNAL](https://developer.android.com/reference/android/content/pm/PackageInfo.html#INSTALL_LOCATION_PREFER_EXTERNAL)
        pub const INSTALL_LOCATION_PREFER_EXTERNAL : i32 = 2;

        /// public static final [REQUESTED_PERMISSION_GRANTED](https://developer.android.com/reference/android/content/pm/PackageInfo.html#REQUESTED_PERMISSION_GRANTED)
        pub const REQUESTED_PERMISSION_GRANTED : i32 = 2;

        /// **get** public [activities](https://developer.android.com/reference/android/content/pm/PackageInfo.html#activities)
        ///
        /// Required feature: android-content-pm-ActivityInfo
        #[cfg(any(feature = "all", feature = "android-content-pm-ActivityInfo"))]
        pub fn activities<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::android::content::pm::ActivityInfo, crate::java::lang::Throwable>>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/PackageInfo\0", "activities\0", "[Landroid/content/pm/ActivityInfo;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [activities](https://developer.android.com/reference/android/content/pm/PackageInfo.html#activities)
        ///
        /// Required feature: android-content-pm-ActivityInfo
        #[cfg(any(feature = "all", feature = "android-content-pm-ActivityInfo"))]
        pub fn set_activities<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj __jni_bindgen::ObjectArray<crate::android::content::pm::ActivityInfo, crate::java::lang::Throwable>>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/PackageInfo\0", "activities\0", "[Landroid/content/pm/ActivityInfo;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [applicationInfo](https://developer.android.com/reference/android/content/pm/PackageInfo.html#applicationInfo)
        ///
        /// Required feature: android-content-pm-ApplicationInfo
        #[cfg(any(feature = "all", feature = "android-content-pm-ApplicationInfo"))]
        pub fn applicationInfo<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::pm::ApplicationInfo>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/PackageInfo\0", "applicationInfo\0", "Landroid/content/pm/ApplicationInfo;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [applicationInfo](https://developer.android.com/reference/android/content/pm/PackageInfo.html#applicationInfo)
        ///
        /// Required feature: android-content-pm-ApplicationInfo
        #[cfg(any(feature = "all", feature = "android-content-pm-ApplicationInfo"))]
        pub fn set_applicationInfo<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::android::content::pm::ApplicationInfo>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/PackageInfo\0", "applicationInfo\0", "Landroid/content/pm/ApplicationInfo;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [baseRevisionCode](https://developer.android.com/reference/android/content/pm/PackageInfo.html#baseRevisionCode)
        pub fn baseRevisionCode<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/PackageInfo\0", "baseRevisionCode\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [baseRevisionCode](https://developer.android.com/reference/android/content/pm/PackageInfo.html#baseRevisionCode)
        pub fn set_baseRevisionCode<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/PackageInfo\0", "baseRevisionCode\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [configPreferences](https://developer.android.com/reference/android/content/pm/PackageInfo.html#configPreferences)
        ///
        /// Required feature: android-content-pm-ConfigurationInfo
        #[cfg(any(feature = "all", feature = "android-content-pm-ConfigurationInfo"))]
        pub fn configPreferences<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::android::content::pm::ConfigurationInfo, crate::java::lang::Throwable>>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/PackageInfo\0", "configPreferences\0", "[Landroid/content/pm/ConfigurationInfo;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [configPreferences](https://developer.android.com/reference/android/content/pm/PackageInfo.html#configPreferences)
        ///
        /// Required feature: android-content-pm-ConfigurationInfo
        #[cfg(any(feature = "all", feature = "android-content-pm-ConfigurationInfo"))]
        pub fn set_configPreferences<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj __jni_bindgen::ObjectArray<crate::android::content::pm::ConfigurationInfo, crate::java::lang::Throwable>>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/PackageInfo\0", "configPreferences\0", "[Landroid/content/pm/ConfigurationInfo;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [featureGroups](https://developer.android.com/reference/android/content/pm/PackageInfo.html#featureGroups)
        ///
        /// Required feature: android-content-pm-FeatureGroupInfo
        #[cfg(any(feature = "all", feature = "android-content-pm-FeatureGroupInfo"))]
        pub fn featureGroups<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::android::content::pm::FeatureGroupInfo, crate::java::lang::Throwable>>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/PackageInfo\0", "featureGroups\0", "[Landroid/content/pm/FeatureGroupInfo;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [featureGroups](https://developer.android.com/reference/android/content/pm/PackageInfo.html#featureGroups)
        ///
        /// Required feature: android-content-pm-FeatureGroupInfo
        #[cfg(any(feature = "all", feature = "android-content-pm-FeatureGroupInfo"))]
        pub fn set_featureGroups<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj __jni_bindgen::ObjectArray<crate::android::content::pm::FeatureGroupInfo, crate::java::lang::Throwable>>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/PackageInfo\0", "featureGroups\0", "[Landroid/content/pm/FeatureGroupInfo;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [firstInstallTime](https://developer.android.com/reference/android/content/pm/PackageInfo.html#firstInstallTime)
        pub fn firstInstallTime<'env>(&'env self) -> i64 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/PackageInfo\0", "firstInstallTime\0", "J\0");
                env.get_long_field(class, field)
            }
        }

        /// **set** public [firstInstallTime](https://developer.android.com/reference/android/content/pm/PackageInfo.html#firstInstallTime)
        pub fn set_firstInstallTime<'env>(&'env self, value: i64) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/PackageInfo\0", "firstInstallTime\0", "J\0");
                env.set_long_field(class, field, value)
            }
        }

        /// **get** public [gids](https://developer.android.com/reference/android/content/pm/PackageInfo.html#gids)
        pub fn gids<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::IntArray>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/PackageInfo\0", "gids\0", "[I\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [gids](https://developer.android.com/reference/android/content/pm/PackageInfo.html#gids)
        pub fn set_gids<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj __jni_bindgen::IntArray>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/PackageInfo\0", "gids\0", "[I\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [installLocation](https://developer.android.com/reference/android/content/pm/PackageInfo.html#installLocation)
        pub fn installLocation<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/PackageInfo\0", "installLocation\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [installLocation](https://developer.android.com/reference/android/content/pm/PackageInfo.html#installLocation)
        pub fn set_installLocation<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/PackageInfo\0", "installLocation\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [instrumentation](https://developer.android.com/reference/android/content/pm/PackageInfo.html#instrumentation)
        ///
        /// Required feature: android-content-pm-InstrumentationInfo
        #[cfg(any(feature = "all", feature = "android-content-pm-InstrumentationInfo"))]
        pub fn instrumentation<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::android::content::pm::InstrumentationInfo, crate::java::lang::Throwable>>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/PackageInfo\0", "instrumentation\0", "[Landroid/content/pm/InstrumentationInfo;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [instrumentation](https://developer.android.com/reference/android/content/pm/PackageInfo.html#instrumentation)
        ///
        /// Required feature: android-content-pm-InstrumentationInfo
        #[cfg(any(feature = "all", feature = "android-content-pm-InstrumentationInfo"))]
        pub fn set_instrumentation<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj __jni_bindgen::ObjectArray<crate::android::content::pm::InstrumentationInfo, crate::java::lang::Throwable>>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/PackageInfo\0", "instrumentation\0", "[Landroid/content/pm/InstrumentationInfo;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [isApex](https://developer.android.com/reference/android/content/pm/PackageInfo.html#isApex)
        pub fn isApex<'env>(&'env self) -> bool {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/PackageInfo\0", "isApex\0", "Z\0");
                env.get_boolean_field(class, field)
            }
        }

        /// **set** public [isApex](https://developer.android.com/reference/android/content/pm/PackageInfo.html#isApex)
        pub fn set_isApex<'env>(&'env self, value: bool) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/PackageInfo\0", "isApex\0", "Z\0");
                env.set_boolean_field(class, field, value)
            }
        }

        /// **get** public [lastUpdateTime](https://developer.android.com/reference/android/content/pm/PackageInfo.html#lastUpdateTime)
        pub fn lastUpdateTime<'env>(&'env self) -> i64 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/PackageInfo\0", "lastUpdateTime\0", "J\0");
                env.get_long_field(class, field)
            }
        }

        /// **set** public [lastUpdateTime](https://developer.android.com/reference/android/content/pm/PackageInfo.html#lastUpdateTime)
        pub fn set_lastUpdateTime<'env>(&'env self, value: i64) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/PackageInfo\0", "lastUpdateTime\0", "J\0");
                env.set_long_field(class, field, value)
            }
        }

        /// **get** public [packageName](https://developer.android.com/reference/android/content/pm/PackageInfo.html#packageName)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn packageName<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/PackageInfo\0", "packageName\0", "Ljava/lang/String;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [packageName](https://developer.android.com/reference/android/content/pm/PackageInfo.html#packageName)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn set_packageName<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::java::lang::String>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/PackageInfo\0", "packageName\0", "Ljava/lang/String;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [permissions](https://developer.android.com/reference/android/content/pm/PackageInfo.html#permissions)
        ///
        /// Required feature: android-content-pm-PermissionInfo
        #[cfg(any(feature = "all", feature = "android-content-pm-PermissionInfo"))]
        pub fn permissions<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::android::content::pm::PermissionInfo, crate::java::lang::Throwable>>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/PackageInfo\0", "permissions\0", "[Landroid/content/pm/PermissionInfo;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [permissions](https://developer.android.com/reference/android/content/pm/PackageInfo.html#permissions)
        ///
        /// Required feature: android-content-pm-PermissionInfo
        #[cfg(any(feature = "all", feature = "android-content-pm-PermissionInfo"))]
        pub fn set_permissions<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj __jni_bindgen::ObjectArray<crate::android::content::pm::PermissionInfo, crate::java::lang::Throwable>>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/PackageInfo\0", "permissions\0", "[Landroid/content/pm/PermissionInfo;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [providers](https://developer.android.com/reference/android/content/pm/PackageInfo.html#providers)
        ///
        /// Required feature: android-content-pm-ProviderInfo
        #[cfg(any(feature = "all", feature = "android-content-pm-ProviderInfo"))]
        pub fn providers<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::android::content::pm::ProviderInfo, crate::java::lang::Throwable>>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/PackageInfo\0", "providers\0", "[Landroid/content/pm/ProviderInfo;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [providers](https://developer.android.com/reference/android/content/pm/PackageInfo.html#providers)
        ///
        /// Required feature: android-content-pm-ProviderInfo
        #[cfg(any(feature = "all", feature = "android-content-pm-ProviderInfo"))]
        pub fn set_providers<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj __jni_bindgen::ObjectArray<crate::android::content::pm::ProviderInfo, crate::java::lang::Throwable>>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/PackageInfo\0", "providers\0", "[Landroid/content/pm/ProviderInfo;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [receivers](https://developer.android.com/reference/android/content/pm/PackageInfo.html#receivers)
        ///
        /// Required feature: android-content-pm-ActivityInfo
        #[cfg(any(feature = "all", feature = "android-content-pm-ActivityInfo"))]
        pub fn receivers<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::android::content::pm::ActivityInfo, crate::java::lang::Throwable>>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/PackageInfo\0", "receivers\0", "[Landroid/content/pm/ActivityInfo;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [receivers](https://developer.android.com/reference/android/content/pm/PackageInfo.html#receivers)
        ///
        /// Required feature: android-content-pm-ActivityInfo
        #[cfg(any(feature = "all", feature = "android-content-pm-ActivityInfo"))]
        pub fn set_receivers<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj __jni_bindgen::ObjectArray<crate::android::content::pm::ActivityInfo, crate::java::lang::Throwable>>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/PackageInfo\0", "receivers\0", "[Landroid/content/pm/ActivityInfo;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [reqFeatures](https://developer.android.com/reference/android/content/pm/PackageInfo.html#reqFeatures)
        ///
        /// Required feature: android-content-pm-FeatureInfo
        #[cfg(any(feature = "all", feature = "android-content-pm-FeatureInfo"))]
        pub fn reqFeatures<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::android::content::pm::FeatureInfo, crate::java::lang::Throwable>>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/PackageInfo\0", "reqFeatures\0", "[Landroid/content/pm/FeatureInfo;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [reqFeatures](https://developer.android.com/reference/android/content/pm/PackageInfo.html#reqFeatures)
        ///
        /// Required feature: android-content-pm-FeatureInfo
        #[cfg(any(feature = "all", feature = "android-content-pm-FeatureInfo"))]
        pub fn set_reqFeatures<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj __jni_bindgen::ObjectArray<crate::android::content::pm::FeatureInfo, crate::java::lang::Throwable>>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/PackageInfo\0", "reqFeatures\0", "[Landroid/content/pm/FeatureInfo;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [requestedPermissions](https://developer.android.com/reference/android/content/pm/PackageInfo.html#requestedPermissions)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn requestedPermissions<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/PackageInfo\0", "requestedPermissions\0", "[Ljava/lang/String;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [requestedPermissions](https://developer.android.com/reference/android/content/pm/PackageInfo.html#requestedPermissions)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn set_requestedPermissions<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/PackageInfo\0", "requestedPermissions\0", "[Ljava/lang/String;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [requestedPermissionsFlags](https://developer.android.com/reference/android/content/pm/PackageInfo.html#requestedPermissionsFlags)
        pub fn requestedPermissionsFlags<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::IntArray>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/PackageInfo\0", "requestedPermissionsFlags\0", "[I\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [requestedPermissionsFlags](https://developer.android.com/reference/android/content/pm/PackageInfo.html#requestedPermissionsFlags)
        pub fn set_requestedPermissionsFlags<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj __jni_bindgen::IntArray>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/PackageInfo\0", "requestedPermissionsFlags\0", "[I\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [services](https://developer.android.com/reference/android/content/pm/PackageInfo.html#services)
        ///
        /// Required feature: android-content-pm-ServiceInfo
        #[cfg(any(feature = "all", feature = "android-content-pm-ServiceInfo"))]
        pub fn services<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::android::content::pm::ServiceInfo, crate::java::lang::Throwable>>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/PackageInfo\0", "services\0", "[Landroid/content/pm/ServiceInfo;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [services](https://developer.android.com/reference/android/content/pm/PackageInfo.html#services)
        ///
        /// Required feature: android-content-pm-ServiceInfo
        #[cfg(any(feature = "all", feature = "android-content-pm-ServiceInfo"))]
        pub fn set_services<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj __jni_bindgen::ObjectArray<crate::android::content::pm::ServiceInfo, crate::java::lang::Throwable>>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/PackageInfo\0", "services\0", "[Landroid/content/pm/ServiceInfo;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [sharedUserId](https://developer.android.com/reference/android/content/pm/PackageInfo.html#sharedUserId)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn sharedUserId<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/PackageInfo\0", "sharedUserId\0", "Ljava/lang/String;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [sharedUserId](https://developer.android.com/reference/android/content/pm/PackageInfo.html#sharedUserId)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn set_sharedUserId<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::java::lang::String>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/PackageInfo\0", "sharedUserId\0", "Ljava/lang/String;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [sharedUserLabel](https://developer.android.com/reference/android/content/pm/PackageInfo.html#sharedUserLabel)
        pub fn sharedUserLabel<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/PackageInfo\0", "sharedUserLabel\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [sharedUserLabel](https://developer.android.com/reference/android/content/pm/PackageInfo.html#sharedUserLabel)
        pub fn set_sharedUserLabel<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/PackageInfo\0", "sharedUserLabel\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [signatures](https://developer.android.com/reference/android/content/pm/PackageInfo.html#signatures)
        ///
        /// Required feature: android-content-pm-Signature
        #[cfg(any(feature = "all", feature = "android-content-pm-Signature"))]
        #[deprecated] pub fn signatures<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::android::content::pm::Signature, crate::java::lang::Throwable>>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/PackageInfo\0", "signatures\0", "[Landroid/content/pm/Signature;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [signatures](https://developer.android.com/reference/android/content/pm/PackageInfo.html#signatures)
        ///
        /// Required feature: android-content-pm-Signature
        #[cfg(any(feature = "all", feature = "android-content-pm-Signature"))]
        #[deprecated] pub fn set_signatures<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj __jni_bindgen::ObjectArray<crate::android::content::pm::Signature, crate::java::lang::Throwable>>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/PackageInfo\0", "signatures\0", "[Landroid/content/pm/Signature;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [signingInfo](https://developer.android.com/reference/android/content/pm/PackageInfo.html#signingInfo)
        ///
        /// Required feature: android-content-pm-SigningInfo
        #[cfg(any(feature = "all", feature = "android-content-pm-SigningInfo"))]
        pub fn signingInfo<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::pm::SigningInfo>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/PackageInfo\0", "signingInfo\0", "Landroid/content/pm/SigningInfo;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [signingInfo](https://developer.android.com/reference/android/content/pm/PackageInfo.html#signingInfo)
        ///
        /// Required feature: android-content-pm-SigningInfo
        #[cfg(any(feature = "all", feature = "android-content-pm-SigningInfo"))]
        pub fn set_signingInfo<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::android::content::pm::SigningInfo>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/PackageInfo\0", "signingInfo\0", "Landroid/content/pm/SigningInfo;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [splitNames](https://developer.android.com/reference/android/content/pm/PackageInfo.html#splitNames)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn splitNames<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/PackageInfo\0", "splitNames\0", "[Ljava/lang/String;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [splitNames](https://developer.android.com/reference/android/content/pm/PackageInfo.html#splitNames)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn set_splitNames<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/PackageInfo\0", "splitNames\0", "[Ljava/lang/String;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [splitRevisionCodes](https://developer.android.com/reference/android/content/pm/PackageInfo.html#splitRevisionCodes)
        pub fn splitRevisionCodes<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::IntArray>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/PackageInfo\0", "splitRevisionCodes\0", "[I\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [splitRevisionCodes](https://developer.android.com/reference/android/content/pm/PackageInfo.html#splitRevisionCodes)
        pub fn set_splitRevisionCodes<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj __jni_bindgen::IntArray>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/PackageInfo\0", "splitRevisionCodes\0", "[I\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [versionCode](https://developer.android.com/reference/android/content/pm/PackageInfo.html#versionCode)
        #[deprecated] pub fn versionCode<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/PackageInfo\0", "versionCode\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [versionCode](https://developer.android.com/reference/android/content/pm/PackageInfo.html#versionCode)
        #[deprecated] pub fn set_versionCode<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/PackageInfo\0", "versionCode\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [versionName](https://developer.android.com/reference/android/content/pm/PackageInfo.html#versionName)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn versionName<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/PackageInfo\0", "versionName\0", "Ljava/lang/String;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [versionName](https://developer.android.com/reference/android/content/pm/PackageInfo.html#versionName)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn set_versionName<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::java::lang::String>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/PackageInfo\0", "versionName\0", "Ljava/lang/String;\0");
                env.set_object_field(class, field, value)
            }
        }
    }
}
