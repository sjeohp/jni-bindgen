// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-content-pm-PackageManager"))]
__jni_bindgen! {
    /// public class [PackageManager](https://developer.android.com/reference/android/content/pm/PackageManager.html)
    ///
    /// Required feature: android-content-pm-PackageManager
    public class PackageManager ("android/content/pm/PackageManager") extends crate::java::lang::Object {

        /// [PackageManager](https://developer.android.com/reference/android/content/pm/PackageManager.html#PackageManager())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::content::pm::PackageManager>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPackageInfo](https://developer.android.com/reference/android/content/pm/PackageManager.html#getPackageInfo(java.lang.String,%20int))
        ///
        /// Required features: "android-content-pm-PackageInfo", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-pm-PackageInfo", feature = "java-lang-String")))]
        pub fn getPackageInfo_String_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::pm::PackageInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "getPackageInfo", .descriptor == "(Ljava/lang/String;I)Landroid/content/pm/PackageInfo;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "getPackageInfo\0", "(Ljava/lang/String;I)Landroid/content/pm/PackageInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPackageInfo](https://developer.android.com/reference/android/content/pm/PackageManager.html#getPackageInfo(android.content.pm.VersionedPackage,%20int))
        ///
        /// Required features: "android-content-pm-PackageInfo", "android-content-pm-VersionedPackage"
        #[cfg(any(feature = "all", all(feature = "android-content-pm-PackageInfo", feature = "android-content-pm-VersionedPackage")))]
        pub fn getPackageInfo_VersionedPackage_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::pm::VersionedPackage>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::pm::PackageInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "getPackageInfo", .descriptor == "(Landroid/content/pm/VersionedPackage;I)Landroid/content/pm/PackageInfo;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "getPackageInfo\0", "(Landroid/content/pm/VersionedPackage;I)Landroid/content/pm/PackageInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [currentToCanonicalPackageNames](https://developer.android.com/reference/android/content/pm/PackageManager.html#currentToCanonicalPackageNames(java.lang.String%5B%5D))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn currentToCanonicalPackageNames<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "currentToCanonicalPackageNames", .descriptor == "([Ljava/lang/String;)[Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "currentToCanonicalPackageNames\0", "([Ljava/lang/String;)[Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [canonicalToCurrentPackageNames](https://developer.android.com/reference/android/content/pm/PackageManager.html#canonicalToCurrentPackageNames(java.lang.String%5B%5D))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn canonicalToCurrentPackageNames<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "canonicalToCurrentPackageNames", .descriptor == "([Ljava/lang/String;)[Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "canonicalToCurrentPackageNames\0", "([Ljava/lang/String;)[Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLaunchIntentForPackage](https://developer.android.com/reference/android/content/pm/PackageManager.html#getLaunchIntentForPackage(java.lang.String))
        ///
        /// Required features: "android-content-Intent", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-Intent", feature = "java-lang-String")))]
        pub fn getLaunchIntentForPackage<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::Intent>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "getLaunchIntentForPackage", .descriptor == "(Ljava/lang/String;)Landroid/content/Intent;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "getLaunchIntentForPackage\0", "(Ljava/lang/String;)Landroid/content/Intent;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLeanbackLaunchIntentForPackage](https://developer.android.com/reference/android/content/pm/PackageManager.html#getLeanbackLaunchIntentForPackage(java.lang.String))
        ///
        /// Required features: "android-content-Intent", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-Intent", feature = "java-lang-String")))]
        pub fn getLeanbackLaunchIntentForPackage<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::Intent>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "getLeanbackLaunchIntentForPackage", .descriptor == "(Ljava/lang/String;)Landroid/content/Intent;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "getLeanbackLaunchIntentForPackage\0", "(Ljava/lang/String;)Landroid/content/Intent;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPackageGids](https://developer.android.com/reference/android/content/pm/PackageManager.html#getPackageGids(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getPackageGids_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::IntArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "getPackageGids", .descriptor == "(Ljava/lang/String;)[I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "getPackageGids\0", "(Ljava/lang/String;)[I\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPackageGids](https://developer.android.com/reference/android/content/pm/PackageManager.html#getPackageGids(java.lang.String,%20int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getPackageGids_String_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::IntArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "getPackageGids", .descriptor == "(Ljava/lang/String;I)[I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "getPackageGids\0", "(Ljava/lang/String;I)[I\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPackageUid](https://developer.android.com/reference/android/content/pm/PackageManager.html#getPackageUid(java.lang.String,%20int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getPackageUid<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "getPackageUid", .descriptor == "(Ljava/lang/String;I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "getPackageUid\0", "(Ljava/lang/String;I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPermissionInfo](https://developer.android.com/reference/android/content/pm/PackageManager.html#getPermissionInfo(java.lang.String,%20int))
        ///
        /// Required features: "android-content-pm-PermissionInfo", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-pm-PermissionInfo", feature = "java-lang-String")))]
        pub fn getPermissionInfo<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::pm::PermissionInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "getPermissionInfo", .descriptor == "(Ljava/lang/String;I)Landroid/content/pm/PermissionInfo;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "getPermissionInfo\0", "(Ljava/lang/String;I)Landroid/content/pm/PermissionInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [queryPermissionsByGroup](https://developer.android.com/reference/android/content/pm/PackageManager.html#queryPermissionsByGroup(java.lang.String,%20int))
        ///
        /// Required features: "java-lang-String", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-util-List")))]
        pub fn queryPermissionsByGroup<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "queryPermissionsByGroup", .descriptor == "(Ljava/lang/String;I)Ljava/util/List;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "queryPermissionsByGroup\0", "(Ljava/lang/String;I)Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPermissionGroupInfo](https://developer.android.com/reference/android/content/pm/PackageManager.html#getPermissionGroupInfo(java.lang.String,%20int))
        ///
        /// Required features: "android-content-pm-PermissionGroupInfo", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-pm-PermissionGroupInfo", feature = "java-lang-String")))]
        pub fn getPermissionGroupInfo<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::pm::PermissionGroupInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "getPermissionGroupInfo", .descriptor == "(Ljava/lang/String;I)Landroid/content/pm/PermissionGroupInfo;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "getPermissionGroupInfo\0", "(Ljava/lang/String;I)Landroid/content/pm/PermissionGroupInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAllPermissionGroups](https://developer.android.com/reference/android/content/pm/PackageManager.html#getAllPermissionGroups(int))
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getAllPermissionGroups<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "getAllPermissionGroups", .descriptor == "(I)Ljava/util/List;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "getAllPermissionGroups\0", "(I)Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getApplicationInfo](https://developer.android.com/reference/android/content/pm/PackageManager.html#getApplicationInfo(java.lang.String,%20int))
        ///
        /// Required features: "android-content-pm-ApplicationInfo", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-pm-ApplicationInfo", feature = "java-lang-String")))]
        pub fn getApplicationInfo<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::pm::ApplicationInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "getApplicationInfo", .descriptor == "(Ljava/lang/String;I)Landroid/content/pm/ApplicationInfo;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "getApplicationInfo\0", "(Ljava/lang/String;I)Landroid/content/pm/ApplicationInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getActivityInfo](https://developer.android.com/reference/android/content/pm/PackageManager.html#getActivityInfo(android.content.ComponentName,%20int))
        ///
        /// Required features: "android-content-ComponentName", "android-content-pm-ActivityInfo"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "android-content-pm-ActivityInfo")))]
        pub fn getActivityInfo<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::pm::ActivityInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "getActivityInfo", .descriptor == "(Landroid/content/ComponentName;I)Landroid/content/pm/ActivityInfo;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "getActivityInfo\0", "(Landroid/content/ComponentName;I)Landroid/content/pm/ActivityInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getReceiverInfo](https://developer.android.com/reference/android/content/pm/PackageManager.html#getReceiverInfo(android.content.ComponentName,%20int))
        ///
        /// Required features: "android-content-ComponentName", "android-content-pm-ActivityInfo"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "android-content-pm-ActivityInfo")))]
        pub fn getReceiverInfo<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::pm::ActivityInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "getReceiverInfo", .descriptor == "(Landroid/content/ComponentName;I)Landroid/content/pm/ActivityInfo;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "getReceiverInfo\0", "(Landroid/content/ComponentName;I)Landroid/content/pm/ActivityInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getServiceInfo](https://developer.android.com/reference/android/content/pm/PackageManager.html#getServiceInfo(android.content.ComponentName,%20int))
        ///
        /// Required features: "android-content-ComponentName", "android-content-pm-ServiceInfo"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "android-content-pm-ServiceInfo")))]
        pub fn getServiceInfo<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::pm::ServiceInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "getServiceInfo", .descriptor == "(Landroid/content/ComponentName;I)Landroid/content/pm/ServiceInfo;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "getServiceInfo\0", "(Landroid/content/ComponentName;I)Landroid/content/pm/ServiceInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getProviderInfo](https://developer.android.com/reference/android/content/pm/PackageManager.html#getProviderInfo(android.content.ComponentName,%20int))
        ///
        /// Required features: "android-content-ComponentName", "android-content-pm-ProviderInfo"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "android-content-pm-ProviderInfo")))]
        pub fn getProviderInfo<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::pm::ProviderInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "getProviderInfo", .descriptor == "(Landroid/content/ComponentName;I)Landroid/content/pm/ProviderInfo;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "getProviderInfo\0", "(Landroid/content/ComponentName;I)Landroid/content/pm/ProviderInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getModuleInfo](https://developer.android.com/reference/android/content/pm/PackageManager.html#getModuleInfo(java.lang.String,%20int))
        ///
        /// Required features: "android-content-pm-ModuleInfo", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-pm-ModuleInfo", feature = "java-lang-String")))]
        pub fn getModuleInfo<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::pm::ModuleInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC, .name == "getModuleInfo", .descriptor == "(Ljava/lang/String;I)Landroid/content/pm/ModuleInfo;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "getModuleInfo\0", "(Ljava/lang/String;I)Landroid/content/pm/ModuleInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInstalledModules](https://developer.android.com/reference/android/content/pm/PackageManager.html#getInstalledModules(int))
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getInstalledModules<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC, .name == "getInstalledModules", .descriptor == "(I)Ljava/util/List;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "getInstalledModules\0", "(I)Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInstalledPackages](https://developer.android.com/reference/android/content/pm/PackageManager.html#getInstalledPackages(int))
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getInstalledPackages<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "getInstalledPackages", .descriptor == "(I)Ljava/util/List;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "getInstalledPackages\0", "(I)Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPackagesHoldingPermissions](https://developer.android.com/reference/android/content/pm/PackageManager.html#getPackagesHoldingPermissions(java.lang.String%5B%5D,%20int))
        ///
        /// Required features: "java-lang-String", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-util-List")))]
        pub fn getPackagesHoldingPermissions<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "getPackagesHoldingPermissions", .descriptor == "([Ljava/lang/String;I)Ljava/util/List;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "getPackagesHoldingPermissions\0", "([Ljava/lang/String;I)Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [checkPermission](https://developer.android.com/reference/android/content/pm/PackageManager.html#checkPermission(java.lang.String,%20java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn checkPermission<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "checkPermission", .descriptor == "(Ljava/lang/String;Ljava/lang/String;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "checkPermission\0", "(Ljava/lang/String;Ljava/lang/String;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isPermissionRevokedByPolicy](https://developer.android.com/reference/android/content/pm/PackageManager.html#isPermissionRevokedByPolicy(java.lang.String,%20java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn isPermissionRevokedByPolicy<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "isPermissionRevokedByPolicy", .descriptor == "(Ljava/lang/String;Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "isPermissionRevokedByPolicy\0", "(Ljava/lang/String;Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addPermission](https://developer.android.com/reference/android/content/pm/PackageManager.html#addPermission(android.content.pm.PermissionInfo))
        ///
        /// Required features: "android-content-pm-PermissionInfo"
        #[cfg(any(feature = "all", all(feature = "android-content-pm-PermissionInfo")))]
        pub fn addPermission<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::pm::PermissionInfo>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "addPermission", .descriptor == "(Landroid/content/pm/PermissionInfo;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "addPermission\0", "(Landroid/content/pm/PermissionInfo;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addPermissionAsync](https://developer.android.com/reference/android/content/pm/PackageManager.html#addPermissionAsync(android.content.pm.PermissionInfo))
        ///
        /// Required features: "android-content-pm-PermissionInfo"
        #[cfg(any(feature = "all", all(feature = "android-content-pm-PermissionInfo")))]
        pub fn addPermissionAsync<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::pm::PermissionInfo>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "addPermissionAsync", .descriptor == "(Landroid/content/pm/PermissionInfo;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "addPermissionAsync\0", "(Landroid/content/pm/PermissionInfo;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removePermission](https://developer.android.com/reference/android/content/pm/PackageManager.html#removePermission(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn removePermission<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "removePermission", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "removePermission\0", "(Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getWhitelistedRestrictedPermissions](https://developer.android.com/reference/android/content/pm/PackageManager.html#getWhitelistedRestrictedPermissions(java.lang.String,%20int))
        ///
        /// Required features: "java-lang-String", "java-util-Set"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-util-Set")))]
        pub fn getWhitelistedRestrictedPermissions<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Set>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC, .name == "getWhitelistedRestrictedPermissions", .descriptor == "(Ljava/lang/String;I)Ljava/util/Set;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "getWhitelistedRestrictedPermissions\0", "(Ljava/lang/String;I)Ljava/util/Set;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addWhitelistedRestrictedPermission](https://developer.android.com/reference/android/content/pm/PackageManager.html#addWhitelistedRestrictedPermission(java.lang.String,%20java.lang.String,%20int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn addWhitelistedRestrictedPermission<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC, .name == "addWhitelistedRestrictedPermission", .descriptor == "(Ljava/lang/String;Ljava/lang/String;I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "addWhitelistedRestrictedPermission\0", "(Ljava/lang/String;Ljava/lang/String;I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeWhitelistedRestrictedPermission](https://developer.android.com/reference/android/content/pm/PackageManager.html#removeWhitelistedRestrictedPermission(java.lang.String,%20java.lang.String,%20int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn removeWhitelistedRestrictedPermission<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC, .name == "removeWhitelistedRestrictedPermission", .descriptor == "(Ljava/lang/String;Ljava/lang/String;I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "removeWhitelistedRestrictedPermission\0", "(Ljava/lang/String;Ljava/lang/String;I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [checkSignatures](https://developer.android.com/reference/android/content/pm/PackageManager.html#checkSignatures(java.lang.String,%20java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn checkSignatures_String_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "checkSignatures", .descriptor == "(Ljava/lang/String;Ljava/lang/String;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "checkSignatures\0", "(Ljava/lang/String;Ljava/lang/String;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [checkSignatures](https://developer.android.com/reference/android/content/pm/PackageManager.html#checkSignatures(int,%20int))
        pub fn checkSignatures_int_int<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "checkSignatures", .descriptor == "(II)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "checkSignatures\0", "(II)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPackagesForUid](https://developer.android.com/reference/android/content/pm/PackageManager.html#getPackagesForUid(int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getPackagesForUid<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "getPackagesForUid", .descriptor == "(I)[Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "getPackagesForUid\0", "(I)[Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNameForUid](https://developer.android.com/reference/android/content/pm/PackageManager.html#getNameForUid(int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getNameForUid<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "getNameForUid", .descriptor == "(I)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "getNameForUid\0", "(I)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInstalledApplications](https://developer.android.com/reference/android/content/pm/PackageManager.html#getInstalledApplications(int))
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getInstalledApplications<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "getInstalledApplications", .descriptor == "(I)Ljava/util/List;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "getInstalledApplications\0", "(I)Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isInstantApp](https://developer.android.com/reference/android/content/pm/PackageManager.html#isInstantApp())
        pub fn isInstantApp<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "isInstantApp", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "isInstantApp\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isInstantApp](https://developer.android.com/reference/android/content/pm/PackageManager.html#isInstantApp(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn isInstantApp_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "isInstantApp", .descriptor == "(Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "isInstantApp\0", "(Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInstantAppCookieMaxBytes](https://developer.android.com/reference/android/content/pm/PackageManager.html#getInstantAppCookieMaxBytes())
        pub fn getInstantAppCookieMaxBytes<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "getInstantAppCookieMaxBytes", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "getInstantAppCookieMaxBytes\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInstantAppCookie](https://developer.android.com/reference/android/content/pm/PackageManager.html#getInstantAppCookie())
        pub fn getInstantAppCookie<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ByteArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "getInstantAppCookie", .descriptor == "()[B"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "getInstantAppCookie\0", "()[B\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clearInstantAppCookie](https://developer.android.com/reference/android/content/pm/PackageManager.html#clearInstantAppCookie())
        pub fn clearInstantAppCookie<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "clearInstantAppCookie", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "clearInstantAppCookie\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateInstantAppCookie](https://developer.android.com/reference/android/content/pm/PackageManager.html#updateInstantAppCookie(byte%5B%5D))
        pub fn updateInstantAppCookie<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "updateInstantAppCookie", .descriptor == "([B)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "updateInstantAppCookie\0", "([B)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSystemSharedLibraryNames](https://developer.android.com/reference/android/content/pm/PackageManager.html#getSystemSharedLibraryNames())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getSystemSharedLibraryNames<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "getSystemSharedLibraryNames", .descriptor == "()[Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "getSystemSharedLibraryNames\0", "()[Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSharedLibraries](https://developer.android.com/reference/android/content/pm/PackageManager.html#getSharedLibraries(int))
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getSharedLibraries<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "getSharedLibraries", .descriptor == "(I)Ljava/util/List;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "getSharedLibraries\0", "(I)Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getChangedPackages](https://developer.android.com/reference/android/content/pm/PackageManager.html#getChangedPackages(int))
        ///
        /// Required features: "android-content-pm-ChangedPackages"
        #[cfg(any(feature = "all", all(feature = "android-content-pm-ChangedPackages")))]
        pub fn getChangedPackages<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::pm::ChangedPackages>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "getChangedPackages", .descriptor == "(I)Landroid/content/pm/ChangedPackages;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "getChangedPackages\0", "(I)Landroid/content/pm/ChangedPackages;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSystemAvailableFeatures](https://developer.android.com/reference/android/content/pm/PackageManager.html#getSystemAvailableFeatures())
        ///
        /// Required features: "android-content-pm-FeatureInfo"
        #[cfg(any(feature = "all", all(feature = "android-content-pm-FeatureInfo")))]
        pub fn getSystemAvailableFeatures<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::android::content::pm::FeatureInfo, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "getSystemAvailableFeatures", .descriptor == "()[Landroid/content/pm/FeatureInfo;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "getSystemAvailableFeatures\0", "()[Landroid/content/pm/FeatureInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasSystemFeature](https://developer.android.com/reference/android/content/pm/PackageManager.html#hasSystemFeature(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn hasSystemFeature_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "hasSystemFeature", .descriptor == "(Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "hasSystemFeature\0", "(Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasSystemFeature](https://developer.android.com/reference/android/content/pm/PackageManager.html#hasSystemFeature(java.lang.String,%20int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn hasSystemFeature_String_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "hasSystemFeature", .descriptor == "(Ljava/lang/String;I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "hasSystemFeature\0", "(Ljava/lang/String;I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [resolveActivity](https://developer.android.com/reference/android/content/pm/PackageManager.html#resolveActivity(android.content.Intent,%20int))
        ///
        /// Required features: "android-content-Intent", "android-content-pm-ResolveInfo"
        #[cfg(any(feature = "all", all(feature = "android-content-Intent", feature = "android-content-pm-ResolveInfo")))]
        pub fn resolveActivity<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::pm::ResolveInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "resolveActivity", .descriptor == "(Landroid/content/Intent;I)Landroid/content/pm/ResolveInfo;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "resolveActivity\0", "(Landroid/content/Intent;I)Landroid/content/pm/ResolveInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [queryIntentActivities](https://developer.android.com/reference/android/content/pm/PackageManager.html#queryIntentActivities(android.content.Intent,%20int))
        ///
        /// Required features: "android-content-Intent", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "android-content-Intent", feature = "java-util-List")))]
        pub fn queryIntentActivities<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "queryIntentActivities", .descriptor == "(Landroid/content/Intent;I)Ljava/util/List;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "queryIntentActivities\0", "(Landroid/content/Intent;I)Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [queryIntentActivityOptions](https://developer.android.com/reference/android/content/pm/PackageManager.html#queryIntentActivityOptions(android.content.ComponentName,%20android.content.Intent%5B%5D,%20android.content.Intent,%20int))
        ///
        /// Required features: "android-content-ComponentName", "android-content-Intent", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "android-content-Intent", feature = "java-util-List")))]
        pub fn queryIntentActivityOptions<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::android::content::Intent, crate::java::lang::Throwable>>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>, arg3: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "queryIntentActivityOptions", .descriptor == "(Landroid/content/ComponentName;[Landroid/content/Intent;Landroid/content/Intent;I)Ljava/util/List;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "queryIntentActivityOptions\0", "(Landroid/content/ComponentName;[Landroid/content/Intent;Landroid/content/Intent;I)Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [queryBroadcastReceivers](https://developer.android.com/reference/android/content/pm/PackageManager.html#queryBroadcastReceivers(android.content.Intent,%20int))
        ///
        /// Required features: "android-content-Intent", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "android-content-Intent", feature = "java-util-List")))]
        pub fn queryBroadcastReceivers<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "queryBroadcastReceivers", .descriptor == "(Landroid/content/Intent;I)Ljava/util/List;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "queryBroadcastReceivers\0", "(Landroid/content/Intent;I)Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [resolveService](https://developer.android.com/reference/android/content/pm/PackageManager.html#resolveService(android.content.Intent,%20int))
        ///
        /// Required features: "android-content-Intent", "android-content-pm-ResolveInfo"
        #[cfg(any(feature = "all", all(feature = "android-content-Intent", feature = "android-content-pm-ResolveInfo")))]
        pub fn resolveService<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::pm::ResolveInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "resolveService", .descriptor == "(Landroid/content/Intent;I)Landroid/content/pm/ResolveInfo;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "resolveService\0", "(Landroid/content/Intent;I)Landroid/content/pm/ResolveInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [queryIntentServices](https://developer.android.com/reference/android/content/pm/PackageManager.html#queryIntentServices(android.content.Intent,%20int))
        ///
        /// Required features: "android-content-Intent", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "android-content-Intent", feature = "java-util-List")))]
        pub fn queryIntentServices<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "queryIntentServices", .descriptor == "(Landroid/content/Intent;I)Ljava/util/List;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "queryIntentServices\0", "(Landroid/content/Intent;I)Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [queryIntentContentProviders](https://developer.android.com/reference/android/content/pm/PackageManager.html#queryIntentContentProviders(android.content.Intent,%20int))
        ///
        /// Required features: "android-content-Intent", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "android-content-Intent", feature = "java-util-List")))]
        pub fn queryIntentContentProviders<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "queryIntentContentProviders", .descriptor == "(Landroid/content/Intent;I)Ljava/util/List;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "queryIntentContentProviders\0", "(Landroid/content/Intent;I)Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [resolveContentProvider](https://developer.android.com/reference/android/content/pm/PackageManager.html#resolveContentProvider(java.lang.String,%20int))
        ///
        /// Required features: "android-content-pm-ProviderInfo", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-pm-ProviderInfo", feature = "java-lang-String")))]
        pub fn resolveContentProvider<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::pm::ProviderInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "resolveContentProvider", .descriptor == "(Ljava/lang/String;I)Landroid/content/pm/ProviderInfo;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "resolveContentProvider\0", "(Ljava/lang/String;I)Landroid/content/pm/ProviderInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [queryContentProviders](https://developer.android.com/reference/android/content/pm/PackageManager.html#queryContentProviders(java.lang.String,%20int,%20int))
        ///
        /// Required features: "java-lang-String", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-util-List")))]
        pub fn queryContentProviders<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "queryContentProviders", .descriptor == "(Ljava/lang/String;II)Ljava/util/List;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "queryContentProviders\0", "(Ljava/lang/String;II)Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInstrumentationInfo](https://developer.android.com/reference/android/content/pm/PackageManager.html#getInstrumentationInfo(android.content.ComponentName,%20int))
        ///
        /// Required features: "android-content-ComponentName", "android-content-pm-InstrumentationInfo"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "android-content-pm-InstrumentationInfo")))]
        pub fn getInstrumentationInfo<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::pm::InstrumentationInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "getInstrumentationInfo", .descriptor == "(Landroid/content/ComponentName;I)Landroid/content/pm/InstrumentationInfo;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "getInstrumentationInfo\0", "(Landroid/content/ComponentName;I)Landroid/content/pm/InstrumentationInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [queryInstrumentation](https://developer.android.com/reference/android/content/pm/PackageManager.html#queryInstrumentation(java.lang.String,%20int))
        ///
        /// Required features: "java-lang-String", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-util-List")))]
        pub fn queryInstrumentation<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "queryInstrumentation", .descriptor == "(Ljava/lang/String;I)Ljava/util/List;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "queryInstrumentation\0", "(Ljava/lang/String;I)Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDrawable](https://developer.android.com/reference/android/content/pm/PackageManager.html#getDrawable(java.lang.String,%20int,%20android.content.pm.ApplicationInfo))
        ///
        /// Required features: "android-content-pm-ApplicationInfo", "android-graphics-drawable-Drawable", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-pm-ApplicationInfo", feature = "android-graphics-drawable-Drawable", feature = "java-lang-String")))]
        pub fn getDrawable<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::pm::ApplicationInfo>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::drawable::Drawable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "getDrawable", .descriptor == "(Ljava/lang/String;ILandroid/content/pm/ApplicationInfo;)Landroid/graphics/drawable/Drawable;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "getDrawable\0", "(Ljava/lang/String;ILandroid/content/pm/ApplicationInfo;)Landroid/graphics/drawable/Drawable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getActivityIcon](https://developer.android.com/reference/android/content/pm/PackageManager.html#getActivityIcon(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName", "android-graphics-drawable-Drawable"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "android-graphics-drawable-Drawable")))]
        pub fn getActivityIcon_ComponentName<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::drawable::Drawable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "getActivityIcon", .descriptor == "(Landroid/content/ComponentName;)Landroid/graphics/drawable/Drawable;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "getActivityIcon\0", "(Landroid/content/ComponentName;)Landroid/graphics/drawable/Drawable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getActivityIcon](https://developer.android.com/reference/android/content/pm/PackageManager.html#getActivityIcon(android.content.Intent))
        ///
        /// Required features: "android-content-Intent", "android-graphics-drawable-Drawable"
        #[cfg(any(feature = "all", all(feature = "android-content-Intent", feature = "android-graphics-drawable-Drawable")))]
        pub fn getActivityIcon_Intent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::drawable::Drawable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "getActivityIcon", .descriptor == "(Landroid/content/Intent;)Landroid/graphics/drawable/Drawable;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "getActivityIcon\0", "(Landroid/content/Intent;)Landroid/graphics/drawable/Drawable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getActivityBanner](https://developer.android.com/reference/android/content/pm/PackageManager.html#getActivityBanner(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName", "android-graphics-drawable-Drawable"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "android-graphics-drawable-Drawable")))]
        pub fn getActivityBanner_ComponentName<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::drawable::Drawable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "getActivityBanner", .descriptor == "(Landroid/content/ComponentName;)Landroid/graphics/drawable/Drawable;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "getActivityBanner\0", "(Landroid/content/ComponentName;)Landroid/graphics/drawable/Drawable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getActivityBanner](https://developer.android.com/reference/android/content/pm/PackageManager.html#getActivityBanner(android.content.Intent))
        ///
        /// Required features: "android-content-Intent", "android-graphics-drawable-Drawable"
        #[cfg(any(feature = "all", all(feature = "android-content-Intent", feature = "android-graphics-drawable-Drawable")))]
        pub fn getActivityBanner_Intent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::drawable::Drawable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "getActivityBanner", .descriptor == "(Landroid/content/Intent;)Landroid/graphics/drawable/Drawable;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "getActivityBanner\0", "(Landroid/content/Intent;)Landroid/graphics/drawable/Drawable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDefaultActivityIcon](https://developer.android.com/reference/android/content/pm/PackageManager.html#getDefaultActivityIcon())
        ///
        /// Required features: "android-graphics-drawable-Drawable"
        #[cfg(any(feature = "all", all(feature = "android-graphics-drawable-Drawable")))]
        pub fn getDefaultActivityIcon<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::drawable::Drawable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "getDefaultActivityIcon", .descriptor == "()Landroid/graphics/drawable/Drawable;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "getDefaultActivityIcon\0", "()Landroid/graphics/drawable/Drawable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getApplicationIcon](https://developer.android.com/reference/android/content/pm/PackageManager.html#getApplicationIcon(android.content.pm.ApplicationInfo))
        ///
        /// Required features: "android-content-pm-ApplicationInfo", "android-graphics-drawable-Drawable"
        #[cfg(any(feature = "all", all(feature = "android-content-pm-ApplicationInfo", feature = "android-graphics-drawable-Drawable")))]
        pub fn getApplicationIcon_ApplicationInfo<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::pm::ApplicationInfo>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::drawable::Drawable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "getApplicationIcon", .descriptor == "(Landroid/content/pm/ApplicationInfo;)Landroid/graphics/drawable/Drawable;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "getApplicationIcon\0", "(Landroid/content/pm/ApplicationInfo;)Landroid/graphics/drawable/Drawable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getApplicationIcon](https://developer.android.com/reference/android/content/pm/PackageManager.html#getApplicationIcon(java.lang.String))
        ///
        /// Required features: "android-graphics-drawable-Drawable", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-graphics-drawable-Drawable", feature = "java-lang-String")))]
        pub fn getApplicationIcon_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::drawable::Drawable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "getApplicationIcon", .descriptor == "(Ljava/lang/String;)Landroid/graphics/drawable/Drawable;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "getApplicationIcon\0", "(Ljava/lang/String;)Landroid/graphics/drawable/Drawable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getApplicationBanner](https://developer.android.com/reference/android/content/pm/PackageManager.html#getApplicationBanner(android.content.pm.ApplicationInfo))
        ///
        /// Required features: "android-content-pm-ApplicationInfo", "android-graphics-drawable-Drawable"
        #[cfg(any(feature = "all", all(feature = "android-content-pm-ApplicationInfo", feature = "android-graphics-drawable-Drawable")))]
        pub fn getApplicationBanner_ApplicationInfo<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::pm::ApplicationInfo>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::drawable::Drawable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "getApplicationBanner", .descriptor == "(Landroid/content/pm/ApplicationInfo;)Landroid/graphics/drawable/Drawable;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "getApplicationBanner\0", "(Landroid/content/pm/ApplicationInfo;)Landroid/graphics/drawable/Drawable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getApplicationBanner](https://developer.android.com/reference/android/content/pm/PackageManager.html#getApplicationBanner(java.lang.String))
        ///
        /// Required features: "android-graphics-drawable-Drawable", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-graphics-drawable-Drawable", feature = "java-lang-String")))]
        pub fn getApplicationBanner_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::drawable::Drawable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "getApplicationBanner", .descriptor == "(Ljava/lang/String;)Landroid/graphics/drawable/Drawable;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "getApplicationBanner\0", "(Ljava/lang/String;)Landroid/graphics/drawable/Drawable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getActivityLogo](https://developer.android.com/reference/android/content/pm/PackageManager.html#getActivityLogo(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName", "android-graphics-drawable-Drawable"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "android-graphics-drawable-Drawable")))]
        pub fn getActivityLogo_ComponentName<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::drawable::Drawable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "getActivityLogo", .descriptor == "(Landroid/content/ComponentName;)Landroid/graphics/drawable/Drawable;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "getActivityLogo\0", "(Landroid/content/ComponentName;)Landroid/graphics/drawable/Drawable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getActivityLogo](https://developer.android.com/reference/android/content/pm/PackageManager.html#getActivityLogo(android.content.Intent))
        ///
        /// Required features: "android-content-Intent", "android-graphics-drawable-Drawable"
        #[cfg(any(feature = "all", all(feature = "android-content-Intent", feature = "android-graphics-drawable-Drawable")))]
        pub fn getActivityLogo_Intent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::drawable::Drawable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "getActivityLogo", .descriptor == "(Landroid/content/Intent;)Landroid/graphics/drawable/Drawable;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "getActivityLogo\0", "(Landroid/content/Intent;)Landroid/graphics/drawable/Drawable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getApplicationLogo](https://developer.android.com/reference/android/content/pm/PackageManager.html#getApplicationLogo(android.content.pm.ApplicationInfo))
        ///
        /// Required features: "android-content-pm-ApplicationInfo", "android-graphics-drawable-Drawable"
        #[cfg(any(feature = "all", all(feature = "android-content-pm-ApplicationInfo", feature = "android-graphics-drawable-Drawable")))]
        pub fn getApplicationLogo_ApplicationInfo<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::pm::ApplicationInfo>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::drawable::Drawable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "getApplicationLogo", .descriptor == "(Landroid/content/pm/ApplicationInfo;)Landroid/graphics/drawable/Drawable;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "getApplicationLogo\0", "(Landroid/content/pm/ApplicationInfo;)Landroid/graphics/drawable/Drawable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getApplicationLogo](https://developer.android.com/reference/android/content/pm/PackageManager.html#getApplicationLogo(java.lang.String))
        ///
        /// Required features: "android-graphics-drawable-Drawable", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-graphics-drawable-Drawable", feature = "java-lang-String")))]
        pub fn getApplicationLogo_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::drawable::Drawable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "getApplicationLogo", .descriptor == "(Ljava/lang/String;)Landroid/graphics/drawable/Drawable;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "getApplicationLogo\0", "(Ljava/lang/String;)Landroid/graphics/drawable/Drawable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getUserBadgedIcon](https://developer.android.com/reference/android/content/pm/PackageManager.html#getUserBadgedIcon(android.graphics.drawable.Drawable,%20android.os.UserHandle))
        ///
        /// Required features: "android-graphics-drawable-Drawable", "android-os-UserHandle"
        #[cfg(any(feature = "all", all(feature = "android-graphics-drawable-Drawable", feature = "android-os-UserHandle")))]
        pub fn getUserBadgedIcon<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::drawable::Drawable>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::UserHandle>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::drawable::Drawable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "getUserBadgedIcon", .descriptor == "(Landroid/graphics/drawable/Drawable;Landroid/os/UserHandle;)Landroid/graphics/drawable/Drawable;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "getUserBadgedIcon\0", "(Landroid/graphics/drawable/Drawable;Landroid/os/UserHandle;)Landroid/graphics/drawable/Drawable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getUserBadgedDrawableForDensity](https://developer.android.com/reference/android/content/pm/PackageManager.html#getUserBadgedDrawableForDensity(android.graphics.drawable.Drawable,%20android.os.UserHandle,%20android.graphics.Rect,%20int))
        ///
        /// Required features: "android-graphics-Rect", "android-graphics-drawable-Drawable", "android-os-UserHandle"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Rect", feature = "android-graphics-drawable-Drawable", feature = "android-os-UserHandle")))]
        pub fn getUserBadgedDrawableForDensity<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::drawable::Drawable>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::UserHandle>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Rect>>, arg3: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::drawable::Drawable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "getUserBadgedDrawableForDensity", .descriptor == "(Landroid/graphics/drawable/Drawable;Landroid/os/UserHandle;Landroid/graphics/Rect;I)Landroid/graphics/drawable/Drawable;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "getUserBadgedDrawableForDensity\0", "(Landroid/graphics/drawable/Drawable;Landroid/os/UserHandle;Landroid/graphics/Rect;I)Landroid/graphics/drawable/Drawable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getUserBadgedLabel](https://developer.android.com/reference/android/content/pm/PackageManager.html#getUserBadgedLabel(java.lang.CharSequence,%20android.os.UserHandle))
        ///
        /// Required features: "android-os-UserHandle", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-os-UserHandle", feature = "java-lang-CharSequence")))]
        pub fn getUserBadgedLabel<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::UserHandle>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::CharSequence>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "getUserBadgedLabel", .descriptor == "(Ljava/lang/CharSequence;Landroid/os/UserHandle;)Ljava/lang/CharSequence;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "getUserBadgedLabel\0", "(Ljava/lang/CharSequence;Landroid/os/UserHandle;)Ljava/lang/CharSequence;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getText](https://developer.android.com/reference/android/content/pm/PackageManager.html#getText(java.lang.String,%20int,%20android.content.pm.ApplicationInfo))
        ///
        /// Required features: "android-content-pm-ApplicationInfo", "java-lang-CharSequence", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-pm-ApplicationInfo", feature = "java-lang-CharSequence", feature = "java-lang-String")))]
        pub fn getText<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::pm::ApplicationInfo>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::CharSequence>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "getText", .descriptor == "(Ljava/lang/String;ILandroid/content/pm/ApplicationInfo;)Ljava/lang/CharSequence;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "getText\0", "(Ljava/lang/String;ILandroid/content/pm/ApplicationInfo;)Ljava/lang/CharSequence;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getXml](https://developer.android.com/reference/android/content/pm/PackageManager.html#getXml(java.lang.String,%20int,%20android.content.pm.ApplicationInfo))
        ///
        /// Required features: "android-content-pm-ApplicationInfo", "android-content-res-XmlResourceParser", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-pm-ApplicationInfo", feature = "android-content-res-XmlResourceParser", feature = "java-lang-String")))]
        pub fn getXml<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::pm::ApplicationInfo>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::res::XmlResourceParser>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "getXml", .descriptor == "(Ljava/lang/String;ILandroid/content/pm/ApplicationInfo;)Landroid/content/res/XmlResourceParser;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "getXml\0", "(Ljava/lang/String;ILandroid/content/pm/ApplicationInfo;)Landroid/content/res/XmlResourceParser;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getApplicationLabel](https://developer.android.com/reference/android/content/pm/PackageManager.html#getApplicationLabel(android.content.pm.ApplicationInfo))
        ///
        /// Required features: "android-content-pm-ApplicationInfo", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-content-pm-ApplicationInfo", feature = "java-lang-CharSequence")))]
        pub fn getApplicationLabel<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::pm::ApplicationInfo>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::CharSequence>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "getApplicationLabel", .descriptor == "(Landroid/content/pm/ApplicationInfo;)Ljava/lang/CharSequence;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "getApplicationLabel\0", "(Landroid/content/pm/ApplicationInfo;)Ljava/lang/CharSequence;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getResourcesForActivity](https://developer.android.com/reference/android/content/pm/PackageManager.html#getResourcesForActivity(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName", "android-content-res-Resources"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "android-content-res-Resources")))]
        pub fn getResourcesForActivity<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::res::Resources>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "getResourcesForActivity", .descriptor == "(Landroid/content/ComponentName;)Landroid/content/res/Resources;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "getResourcesForActivity\0", "(Landroid/content/ComponentName;)Landroid/content/res/Resources;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getResourcesForApplication](https://developer.android.com/reference/android/content/pm/PackageManager.html#getResourcesForApplication(android.content.pm.ApplicationInfo))
        ///
        /// Required features: "android-content-pm-ApplicationInfo", "android-content-res-Resources"
        #[cfg(any(feature = "all", all(feature = "android-content-pm-ApplicationInfo", feature = "android-content-res-Resources")))]
        pub fn getResourcesForApplication_ApplicationInfo<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::pm::ApplicationInfo>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::res::Resources>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "getResourcesForApplication", .descriptor == "(Landroid/content/pm/ApplicationInfo;)Landroid/content/res/Resources;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "getResourcesForApplication\0", "(Landroid/content/pm/ApplicationInfo;)Landroid/content/res/Resources;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getResourcesForApplication](https://developer.android.com/reference/android/content/pm/PackageManager.html#getResourcesForApplication(java.lang.String))
        ///
        /// Required features: "android-content-res-Resources", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-res-Resources", feature = "java-lang-String")))]
        pub fn getResourcesForApplication_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::res::Resources>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "getResourcesForApplication", .descriptor == "(Ljava/lang/String;)Landroid/content/res/Resources;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "getResourcesForApplication\0", "(Ljava/lang/String;)Landroid/content/res/Resources;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPackageArchiveInfo](https://developer.android.com/reference/android/content/pm/PackageManager.html#getPackageArchiveInfo(java.lang.String,%20int))
        ///
        /// Required features: "android-content-pm-PackageInfo", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-pm-PackageInfo", feature = "java-lang-String")))]
        pub fn getPackageArchiveInfo<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::pm::PackageInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC, .name == "getPackageArchiveInfo", .descriptor == "(Ljava/lang/String;I)Landroid/content/pm/PackageInfo;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "getPackageArchiveInfo\0", "(Ljava/lang/String;I)Landroid/content/pm/PackageInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [verifyPendingInstall](https://developer.android.com/reference/android/content/pm/PackageManager.html#verifyPendingInstall(int,%20int))
        pub fn verifyPendingInstall<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "verifyPendingInstall", .descriptor == "(II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "verifyPendingInstall\0", "(II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [extendVerificationTimeout](https://developer.android.com/reference/android/content/pm/PackageManager.html#extendVerificationTimeout(int,%20int,%20long))
        pub fn extendVerificationTimeout<'env>(&'env self, arg0: i32, arg1: i32, arg2: i64) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "extendVerificationTimeout", .descriptor == "(IIJ)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "extendVerificationTimeout\0", "(IIJ)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setInstallerPackageName](https://developer.android.com/reference/android/content/pm/PackageManager.html#setInstallerPackageName(java.lang.String,%20java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn setInstallerPackageName<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "setInstallerPackageName", .descriptor == "(Ljava/lang/String;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "setInstallerPackageName\0", "(Ljava/lang/String;Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInstallerPackageName](https://developer.android.com/reference/android/content/pm/PackageManager.html#getInstallerPackageName(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getInstallerPackageName<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "getInstallerPackageName", .descriptor == "(Ljava/lang/String;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "getInstallerPackageName\0", "(Ljava/lang/String;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addPackageToPreferred](https://developer.android.com/reference/android/content/pm/PackageManager.html#addPackageToPreferred(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        #[deprecated] pub fn addPackageToPreferred<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "addPackageToPreferred", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "addPackageToPreferred\0", "(Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removePackageFromPreferred](https://developer.android.com/reference/android/content/pm/PackageManager.html#removePackageFromPreferred(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        #[deprecated] pub fn removePackageFromPreferred<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "removePackageFromPreferred", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "removePackageFromPreferred\0", "(Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPreferredPackages](https://developer.android.com/reference/android/content/pm/PackageManager.html#getPreferredPackages(int))
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        #[deprecated] pub fn getPreferredPackages<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "getPreferredPackages", .descriptor == "(I)Ljava/util/List;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "getPreferredPackages\0", "(I)Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addPreferredActivity](https://developer.android.com/reference/android/content/pm/PackageManager.html#addPreferredActivity(android.content.IntentFilter,%20int,%20android.content.ComponentName%5B%5D,%20android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName", "android-content-IntentFilter"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "android-content-IntentFilter")))]
        #[deprecated] pub fn addPreferredActivity<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::IntentFilter>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::android::content::ComponentName, crate::java::lang::Throwable>>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "addPreferredActivity", .descriptor == "(Landroid/content/IntentFilter;I[Landroid/content/ComponentName;Landroid/content/ComponentName;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "addPreferredActivity\0", "(Landroid/content/IntentFilter;I[Landroid/content/ComponentName;Landroid/content/ComponentName;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clearPackagePreferredActivities](https://developer.android.com/reference/android/content/pm/PackageManager.html#clearPackagePreferredActivities(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        #[deprecated] pub fn clearPackagePreferredActivities<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "clearPackagePreferredActivities", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "clearPackagePreferredActivities\0", "(Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPreferredActivities](https://developer.android.com/reference/android/content/pm/PackageManager.html#getPreferredActivities(java.util.List,%20java.util.List,%20java.lang.String))
        ///
        /// Required features: "java-lang-String", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-util-List")))]
        #[deprecated] pub fn getPreferredActivities<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "getPreferredActivities", .descriptor == "(Ljava/util/List;Ljava/util/List;Ljava/lang/String;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "getPreferredActivities\0", "(Ljava/util/List;Ljava/util/List;Ljava/lang/String;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setComponentEnabledSetting](https://developer.android.com/reference/android/content/pm/PackageManager.html#setComponentEnabledSetting(android.content.ComponentName,%20int,%20int))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn setComponentEnabledSetting<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "setComponentEnabledSetting", .descriptor == "(Landroid/content/ComponentName;II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "setComponentEnabledSetting\0", "(Landroid/content/ComponentName;II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getComponentEnabledSetting](https://developer.android.com/reference/android/content/pm/PackageManager.html#getComponentEnabledSetting(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn getComponentEnabledSetting<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "getComponentEnabledSetting", .descriptor == "(Landroid/content/ComponentName;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "getComponentEnabledSetting\0", "(Landroid/content/ComponentName;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSyntheticAppDetailsActivityEnabled](https://developer.android.com/reference/android/content/pm/PackageManager.html#getSyntheticAppDetailsActivityEnabled(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getSyntheticAppDetailsActivityEnabled<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC, .name == "getSyntheticAppDetailsActivityEnabled", .descriptor == "(Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "getSyntheticAppDetailsActivityEnabled\0", "(Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setApplicationEnabledSetting](https://developer.android.com/reference/android/content/pm/PackageManager.html#setApplicationEnabledSetting(java.lang.String,%20int,%20int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn setApplicationEnabledSetting<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "setApplicationEnabledSetting", .descriptor == "(Ljava/lang/String;II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "setApplicationEnabledSetting\0", "(Ljava/lang/String;II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getApplicationEnabledSetting](https://developer.android.com/reference/android/content/pm/PackageManager.html#getApplicationEnabledSetting(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getApplicationEnabledSetting<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "getApplicationEnabledSetting", .descriptor == "(Ljava/lang/String;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "getApplicationEnabledSetting\0", "(Ljava/lang/String;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isSafeMode](https://developer.android.com/reference/android/content/pm/PackageManager.html#isSafeMode())
        pub fn isSafeMode<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "isSafeMode", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "isSafeMode\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isPackageSuspended](https://developer.android.com/reference/android/content/pm/PackageManager.html#isPackageSuspended(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn isPackageSuspended_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC, .name == "isPackageSuspended", .descriptor == "(Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "isPackageSuspended\0", "(Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isPackageSuspended](https://developer.android.com/reference/android/content/pm/PackageManager.html#isPackageSuspended())
        pub fn isPackageSuspended<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC, .name == "isPackageSuspended", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "isPackageSuspended\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSuspendedPackageAppExtras](https://developer.android.com/reference/android/content/pm/PackageManager.html#getSuspendedPackageAppExtras())
        ///
        /// Required features: "android-os-Bundle"
        #[cfg(any(feature = "all", all(feature = "android-os-Bundle")))]
        pub fn getSuspendedPackageAppExtras<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Bundle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC, .name == "getSuspendedPackageAppExtras", .descriptor == "()Landroid/os/Bundle;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "getSuspendedPackageAppExtras\0", "()Landroid/os/Bundle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setApplicationCategoryHint](https://developer.android.com/reference/android/content/pm/PackageManager.html#setApplicationCategoryHint(java.lang.String,%20int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn setApplicationCategoryHint<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "setApplicationCategoryHint", .descriptor == "(Ljava/lang/String;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "setApplicationCategoryHint\0", "(Ljava/lang/String;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isDeviceUpgrading](https://developer.android.com/reference/android/content/pm/PackageManager.html#isDeviceUpgrading())
        pub fn isDeviceUpgrading<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC, .name == "isDeviceUpgrading", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "isDeviceUpgrading\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPackageInstaller](https://developer.android.com/reference/android/content/pm/PackageManager.html#getPackageInstaller())
        ///
        /// Required features: "android-content-pm-PackageInstaller"
        #[cfg(any(feature = "all", all(feature = "android-content-pm-PackageInstaller")))]
        pub fn getPackageInstaller<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::pm::PackageInstaller>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "getPackageInstaller", .descriptor == "()Landroid/content/pm/PackageInstaller;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "getPackageInstaller\0", "()Landroid/content/pm/PackageInstaller;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [canRequestPackageInstalls](https://developer.android.com/reference/android/content/pm/PackageManager.html#canRequestPackageInstalls())
        pub fn canRequestPackageInstalls<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC | ABSTRACT, .name == "canRequestPackageInstalls", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "canRequestPackageInstalls\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasSigningCertificate](https://developer.android.com/reference/android/content/pm/PackageManager.html#hasSigningCertificate(java.lang.String,%20byte%5B%5D,%20int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn hasSigningCertificate_String_byte_array_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>, arg2: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC, .name == "hasSigningCertificate", .descriptor == "(Ljava/lang/String;[BI)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "hasSigningCertificate\0", "(Ljava/lang/String;[BI)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasSigningCertificate](https://developer.android.com/reference/android/content/pm/PackageManager.html#hasSigningCertificate(int,%20byte%5B%5D,%20int))
        pub fn hasSigningCertificate_int_byte_array_int<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>, arg2: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageManager", java.flags == PUBLIC, .name == "hasSigningCertificate", .descriptor == "(I[BI)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageManager\0", "hasSigningCertificate\0", "(I[BI)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [CERT_INPUT_RAW_X509](https://developer.android.com/reference/android/content/pm/PackageManager.html#CERT_INPUT_RAW_X509)
        pub const CERT_INPUT_RAW_X509 : i32 = 0;

        /// public static final [CERT_INPUT_SHA256](https://developer.android.com/reference/android/content/pm/PackageManager.html#CERT_INPUT_SHA256)
        pub const CERT_INPUT_SHA256 : i32 = 1;

        /// public static final [COMPONENT_ENABLED_STATE_DEFAULT](https://developer.android.com/reference/android/content/pm/PackageManager.html#COMPONENT_ENABLED_STATE_DEFAULT)
        pub const COMPONENT_ENABLED_STATE_DEFAULT : i32 = 0;

        /// public static final [COMPONENT_ENABLED_STATE_DISABLED](https://developer.android.com/reference/android/content/pm/PackageManager.html#COMPONENT_ENABLED_STATE_DISABLED)
        pub const COMPONENT_ENABLED_STATE_DISABLED : i32 = 2;

        /// public static final [COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED](https://developer.android.com/reference/android/content/pm/PackageManager.html#COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED)
        pub const COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED : i32 = 4;

        /// public static final [COMPONENT_ENABLED_STATE_DISABLED_USER](https://developer.android.com/reference/android/content/pm/PackageManager.html#COMPONENT_ENABLED_STATE_DISABLED_USER)
        pub const COMPONENT_ENABLED_STATE_DISABLED_USER : i32 = 3;

        /// public static final [COMPONENT_ENABLED_STATE_ENABLED](https://developer.android.com/reference/android/content/pm/PackageManager.html#COMPONENT_ENABLED_STATE_ENABLED)
        pub const COMPONENT_ENABLED_STATE_ENABLED : i32 = 1;

        /// public static final [DONT_KILL_APP](https://developer.android.com/reference/android/content/pm/PackageManager.html#DONT_KILL_APP)
        pub const DONT_KILL_APP : i32 = 1;

        /// public static final [EXTRA_VERIFICATION_ID](https://developer.android.com/reference/android/content/pm/PackageManager.html#EXTRA_VERIFICATION_ID)
        pub const EXTRA_VERIFICATION_ID : &'static str = "android.content.pm.extra.VERIFICATION_ID";

        /// public static final [EXTRA_VERIFICATION_RESULT](https://developer.android.com/reference/android/content/pm/PackageManager.html#EXTRA_VERIFICATION_RESULT)
        pub const EXTRA_VERIFICATION_RESULT : &'static str = "android.content.pm.extra.VERIFICATION_RESULT";

        /// public static final [FEATURE_ACTIVITIES_ON_SECONDARY_DISPLAYS](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_ACTIVITIES_ON_SECONDARY_DISPLAYS)
        pub const FEATURE_ACTIVITIES_ON_SECONDARY_DISPLAYS : &'static str = "android.software.activities_on_secondary_displays";

        /// public static final [FEATURE_APP_WIDGETS](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_APP_WIDGETS)
        pub const FEATURE_APP_WIDGETS : &'static str = "android.software.app_widgets";

        /// public static final [FEATURE_AUDIO_LOW_LATENCY](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_AUDIO_LOW_LATENCY)
        pub const FEATURE_AUDIO_LOW_LATENCY : &'static str = "android.hardware.audio.low_latency";

        /// public static final [FEATURE_AUDIO_OUTPUT](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_AUDIO_OUTPUT)
        pub const FEATURE_AUDIO_OUTPUT : &'static str = "android.hardware.audio.output";

        /// public static final [FEATURE_AUDIO_PRO](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_AUDIO_PRO)
        pub const FEATURE_AUDIO_PRO : &'static str = "android.hardware.audio.pro";

        /// public static final [FEATURE_AUTOFILL](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_AUTOFILL)
        pub const FEATURE_AUTOFILL : &'static str = "android.software.autofill";

        /// public static final [FEATURE_AUTOMOTIVE](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_AUTOMOTIVE)
        pub const FEATURE_AUTOMOTIVE : &'static str = "android.hardware.type.automotive";

        /// public static final [FEATURE_BACKUP](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_BACKUP)
        pub const FEATURE_BACKUP : &'static str = "android.software.backup";

        /// public static final [FEATURE_BLUETOOTH](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_BLUETOOTH)
        pub const FEATURE_BLUETOOTH : &'static str = "android.hardware.bluetooth";

        /// public static final [FEATURE_BLUETOOTH_LE](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_BLUETOOTH_LE)
        pub const FEATURE_BLUETOOTH_LE : &'static str = "android.hardware.bluetooth_le";

        /// public static final [FEATURE_CAMERA](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_CAMERA)
        pub const FEATURE_CAMERA : &'static str = "android.hardware.camera";

        /// public static final [FEATURE_CAMERA_ANY](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_CAMERA_ANY)
        pub const FEATURE_CAMERA_ANY : &'static str = "android.hardware.camera.any";

        /// public static final [FEATURE_CAMERA_AR](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_CAMERA_AR)
        pub const FEATURE_CAMERA_AR : &'static str = "android.hardware.camera.ar";

        /// public static final [FEATURE_CAMERA_AUTOFOCUS](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_CAMERA_AUTOFOCUS)
        pub const FEATURE_CAMERA_AUTOFOCUS : &'static str = "android.hardware.camera.autofocus";

        /// public static final [FEATURE_CAMERA_CAPABILITY_MANUAL_POST_PROCESSING](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_CAMERA_CAPABILITY_MANUAL_POST_PROCESSING)
        pub const FEATURE_CAMERA_CAPABILITY_MANUAL_POST_PROCESSING : &'static str = "android.hardware.camera.capability.manual_post_processing";

        /// public static final [FEATURE_CAMERA_CAPABILITY_MANUAL_SENSOR](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_CAMERA_CAPABILITY_MANUAL_SENSOR)
        pub const FEATURE_CAMERA_CAPABILITY_MANUAL_SENSOR : &'static str = "android.hardware.camera.capability.manual_sensor";

        /// public static final [FEATURE_CAMERA_CAPABILITY_RAW](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_CAMERA_CAPABILITY_RAW)
        pub const FEATURE_CAMERA_CAPABILITY_RAW : &'static str = "android.hardware.camera.capability.raw";

        /// public static final [FEATURE_CAMERA_EXTERNAL](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_CAMERA_EXTERNAL)
        pub const FEATURE_CAMERA_EXTERNAL : &'static str = "android.hardware.camera.external";

        /// public static final [FEATURE_CAMERA_FLASH](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_CAMERA_FLASH)
        pub const FEATURE_CAMERA_FLASH : &'static str = "android.hardware.camera.flash";

        /// public static final [FEATURE_CAMERA_FRONT](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_CAMERA_FRONT)
        pub const FEATURE_CAMERA_FRONT : &'static str = "android.hardware.camera.front";

        /// public static final [FEATURE_CAMERA_LEVEL_FULL](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_CAMERA_LEVEL_FULL)
        pub const FEATURE_CAMERA_LEVEL_FULL : &'static str = "android.hardware.camera.level.full";

        /// public static final [FEATURE_CANT_SAVE_STATE](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_CANT_SAVE_STATE)
        pub const FEATURE_CANT_SAVE_STATE : &'static str = "android.software.cant_save_state";

        /// public static final [FEATURE_COMPANION_DEVICE_SETUP](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_COMPANION_DEVICE_SETUP)
        pub const FEATURE_COMPANION_DEVICE_SETUP : &'static str = "android.software.companion_device_setup";

        /// public static final [FEATURE_CONNECTION_SERVICE](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_CONNECTION_SERVICE)
        pub const FEATURE_CONNECTION_SERVICE : &'static str = "android.software.connectionservice";

        /// public static final [FEATURE_CONSUMER_IR](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_CONSUMER_IR)
        pub const FEATURE_CONSUMER_IR : &'static str = "android.hardware.consumerir";

        /// public static final [FEATURE_DEVICE_ADMIN](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_DEVICE_ADMIN)
        pub const FEATURE_DEVICE_ADMIN : &'static str = "android.software.device_admin";

        /// public static final [FEATURE_EMBEDDED](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_EMBEDDED)
        pub const FEATURE_EMBEDDED : &'static str = "android.hardware.type.embedded";

        /// public static final [FEATURE_ETHERNET](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_ETHERNET)
        pub const FEATURE_ETHERNET : &'static str = "android.hardware.ethernet";

        /// public static final [FEATURE_FACE](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_FACE)
        pub const FEATURE_FACE : &'static str = "android.hardware.biometrics.face";

        /// public static final [FEATURE_FAKETOUCH](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_FAKETOUCH)
        pub const FEATURE_FAKETOUCH : &'static str = "android.hardware.faketouch";

        /// public static final [FEATURE_FAKETOUCH_MULTITOUCH_DISTINCT](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_FAKETOUCH_MULTITOUCH_DISTINCT)
        pub const FEATURE_FAKETOUCH_MULTITOUCH_DISTINCT : &'static str = "android.hardware.faketouch.multitouch.distinct";

        /// public static final [FEATURE_FAKETOUCH_MULTITOUCH_JAZZHAND](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_FAKETOUCH_MULTITOUCH_JAZZHAND)
        pub const FEATURE_FAKETOUCH_MULTITOUCH_JAZZHAND : &'static str = "android.hardware.faketouch.multitouch.jazzhand";

        /// public static final [FEATURE_FINGERPRINT](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_FINGERPRINT)
        pub const FEATURE_FINGERPRINT : &'static str = "android.hardware.fingerprint";

        /// public static final [FEATURE_FREEFORM_WINDOW_MANAGEMENT](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_FREEFORM_WINDOW_MANAGEMENT)
        pub const FEATURE_FREEFORM_WINDOW_MANAGEMENT : &'static str = "android.software.freeform_window_management";

        /// public static final [FEATURE_GAMEPAD](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_GAMEPAD)
        pub const FEATURE_GAMEPAD : &'static str = "android.hardware.gamepad";

        /// public static final [FEATURE_HIFI_SENSORS](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_HIFI_SENSORS)
        pub const FEATURE_HIFI_SENSORS : &'static str = "android.hardware.sensor.hifi_sensors";

        /// public static final [FEATURE_HOME_SCREEN](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_HOME_SCREEN)
        pub const FEATURE_HOME_SCREEN : &'static str = "android.software.home_screen";

        /// public static final [FEATURE_INPUT_METHODS](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_INPUT_METHODS)
        pub const FEATURE_INPUT_METHODS : &'static str = "android.software.input_methods";

        /// public static final [FEATURE_IPSEC_TUNNELS](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_IPSEC_TUNNELS)
        pub const FEATURE_IPSEC_TUNNELS : &'static str = "android.software.ipsec_tunnels";

        /// public static final [FEATURE_IRIS](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_IRIS)
        pub const FEATURE_IRIS : &'static str = "android.hardware.biometrics.iris";

        /// public static final [FEATURE_LEANBACK](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_LEANBACK)
        pub const FEATURE_LEANBACK : &'static str = "android.software.leanback";

        /// public static final [FEATURE_LEANBACK_ONLY](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_LEANBACK_ONLY)
        pub const FEATURE_LEANBACK_ONLY : &'static str = "android.software.leanback_only";

        /// public static final [FEATURE_LIVE_TV](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_LIVE_TV)
        pub const FEATURE_LIVE_TV : &'static str = "android.software.live_tv";

        /// public static final [FEATURE_LIVE_WALLPAPER](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_LIVE_WALLPAPER)
        pub const FEATURE_LIVE_WALLPAPER : &'static str = "android.software.live_wallpaper";

        /// public static final [FEATURE_LOCATION](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_LOCATION)
        pub const FEATURE_LOCATION : &'static str = "android.hardware.location";

        /// public static final [FEATURE_LOCATION_GPS](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_LOCATION_GPS)
        pub const FEATURE_LOCATION_GPS : &'static str = "android.hardware.location.gps";

        /// public static final [FEATURE_LOCATION_NETWORK](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_LOCATION_NETWORK)
        pub const FEATURE_LOCATION_NETWORK : &'static str = "android.hardware.location.network";

        /// public static final [FEATURE_MANAGED_USERS](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_MANAGED_USERS)
        pub const FEATURE_MANAGED_USERS : &'static str = "android.software.managed_users";

        /// public static final [FEATURE_MICROPHONE](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_MICROPHONE)
        pub const FEATURE_MICROPHONE : &'static str = "android.hardware.microphone";

        /// public static final [FEATURE_MIDI](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_MIDI)
        pub const FEATURE_MIDI : &'static str = "android.software.midi";

        /// public static final [FEATURE_NFC](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_NFC)
        pub const FEATURE_NFC : &'static str = "android.hardware.nfc";

        /// public static final [FEATURE_NFC_BEAM](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_NFC_BEAM)
        pub const FEATURE_NFC_BEAM : &'static str = "android.sofware.nfc.beam";

        /// public static final [FEATURE_NFC_HOST_CARD_EMULATION](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_NFC_HOST_CARD_EMULATION)
        pub const FEATURE_NFC_HOST_CARD_EMULATION : &'static str = "android.hardware.nfc.hce";

        /// public static final [FEATURE_NFC_HOST_CARD_EMULATION_NFCF](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_NFC_HOST_CARD_EMULATION_NFCF)
        pub const FEATURE_NFC_HOST_CARD_EMULATION_NFCF : &'static str = "android.hardware.nfc.hcef";

        /// public static final [FEATURE_NFC_OFF_HOST_CARD_EMULATION_ESE](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_NFC_OFF_HOST_CARD_EMULATION_ESE)
        pub const FEATURE_NFC_OFF_HOST_CARD_EMULATION_ESE : &'static str = "android.hardware.nfc.ese";

        /// public static final [FEATURE_NFC_OFF_HOST_CARD_EMULATION_UICC](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_NFC_OFF_HOST_CARD_EMULATION_UICC)
        pub const FEATURE_NFC_OFF_HOST_CARD_EMULATION_UICC : &'static str = "android.hardware.nfc.uicc";

        /// public static final [FEATURE_OPENGLES_EXTENSION_PACK](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_OPENGLES_EXTENSION_PACK)
        pub const FEATURE_OPENGLES_EXTENSION_PACK : &'static str = "android.hardware.opengles.aep";

        /// public static final [FEATURE_PC](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_PC)
        pub const FEATURE_PC : &'static str = "android.hardware.type.pc";

        /// public static final [FEATURE_PICTURE_IN_PICTURE](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_PICTURE_IN_PICTURE)
        pub const FEATURE_PICTURE_IN_PICTURE : &'static str = "android.software.picture_in_picture";

        /// public static final [FEATURE_PRINTING](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_PRINTING)
        pub const FEATURE_PRINTING : &'static str = "android.software.print";

        /// public static final [FEATURE_RAM_LOW](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_RAM_LOW)
        pub const FEATURE_RAM_LOW : &'static str = "android.hardware.ram.low";

        /// public static final [FEATURE_RAM_NORMAL](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_RAM_NORMAL)
        pub const FEATURE_RAM_NORMAL : &'static str = "android.hardware.ram.normal";

        /// public static final [FEATURE_SCREEN_LANDSCAPE](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_SCREEN_LANDSCAPE)
        pub const FEATURE_SCREEN_LANDSCAPE : &'static str = "android.hardware.screen.landscape";

        /// public static final [FEATURE_SCREEN_PORTRAIT](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_SCREEN_PORTRAIT)
        pub const FEATURE_SCREEN_PORTRAIT : &'static str = "android.hardware.screen.portrait";

        /// public static final [FEATURE_SECURELY_REMOVES_USERS](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_SECURELY_REMOVES_USERS)
        pub const FEATURE_SECURELY_REMOVES_USERS : &'static str = "android.software.securely_removes_users";

        /// public static final [FEATURE_SECURE_LOCK_SCREEN](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_SECURE_LOCK_SCREEN)
        pub const FEATURE_SECURE_LOCK_SCREEN : &'static str = "android.software.secure_lock_screen";

        /// public static final [FEATURE_SENSOR_ACCELEROMETER](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_SENSOR_ACCELEROMETER)
        pub const FEATURE_SENSOR_ACCELEROMETER : &'static str = "android.hardware.sensor.accelerometer";

        /// public static final [FEATURE_SENSOR_AMBIENT_TEMPERATURE](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_SENSOR_AMBIENT_TEMPERATURE)
        pub const FEATURE_SENSOR_AMBIENT_TEMPERATURE : &'static str = "android.hardware.sensor.ambient_temperature";

        /// public static final [FEATURE_SENSOR_BAROMETER](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_SENSOR_BAROMETER)
        pub const FEATURE_SENSOR_BAROMETER : &'static str = "android.hardware.sensor.barometer";

        /// public static final [FEATURE_SENSOR_COMPASS](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_SENSOR_COMPASS)
        pub const FEATURE_SENSOR_COMPASS : &'static str = "android.hardware.sensor.compass";

        /// public static final [FEATURE_SENSOR_GYROSCOPE](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_SENSOR_GYROSCOPE)
        pub const FEATURE_SENSOR_GYROSCOPE : &'static str = "android.hardware.sensor.gyroscope";

        /// public static final [FEATURE_SENSOR_HEART_RATE](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_SENSOR_HEART_RATE)
        pub const FEATURE_SENSOR_HEART_RATE : &'static str = "android.hardware.sensor.heartrate";

        /// public static final [FEATURE_SENSOR_HEART_RATE_ECG](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_SENSOR_HEART_RATE_ECG)
        pub const FEATURE_SENSOR_HEART_RATE_ECG : &'static str = "android.hardware.sensor.heartrate.ecg";

        /// public static final [FEATURE_SENSOR_LIGHT](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_SENSOR_LIGHT)
        pub const FEATURE_SENSOR_LIGHT : &'static str = "android.hardware.sensor.light";

        /// public static final [FEATURE_SENSOR_PROXIMITY](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_SENSOR_PROXIMITY)
        pub const FEATURE_SENSOR_PROXIMITY : &'static str = "android.hardware.sensor.proximity";

        /// public static final [FEATURE_SENSOR_RELATIVE_HUMIDITY](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_SENSOR_RELATIVE_HUMIDITY)
        pub const FEATURE_SENSOR_RELATIVE_HUMIDITY : &'static str = "android.hardware.sensor.relative_humidity";

        /// public static final [FEATURE_SENSOR_STEP_COUNTER](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_SENSOR_STEP_COUNTER)
        pub const FEATURE_SENSOR_STEP_COUNTER : &'static str = "android.hardware.sensor.stepcounter";

        /// public static final [FEATURE_SENSOR_STEP_DETECTOR](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_SENSOR_STEP_DETECTOR)
        pub const FEATURE_SENSOR_STEP_DETECTOR : &'static str = "android.hardware.sensor.stepdetector";

        /// public static final [FEATURE_SIP](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_SIP)
        pub const FEATURE_SIP : &'static str = "android.software.sip";

        /// public static final [FEATURE_SIP_VOIP](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_SIP_VOIP)
        pub const FEATURE_SIP_VOIP : &'static str = "android.software.sip.voip";

        /// public static final [FEATURE_STRONGBOX_KEYSTORE](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_STRONGBOX_KEYSTORE)
        pub const FEATURE_STRONGBOX_KEYSTORE : &'static str = "android.hardware.strongbox_keystore";

        /// public static final [FEATURE_TELEPHONY](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_TELEPHONY)
        pub const FEATURE_TELEPHONY : &'static str = "android.hardware.telephony";

        /// public static final [FEATURE_TELEPHONY_CDMA](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_TELEPHONY_CDMA)
        pub const FEATURE_TELEPHONY_CDMA : &'static str = "android.hardware.telephony.cdma";

        /// public static final [FEATURE_TELEPHONY_EUICC](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_TELEPHONY_EUICC)
        pub const FEATURE_TELEPHONY_EUICC : &'static str = "android.hardware.telephony.euicc";

        /// public static final [FEATURE_TELEPHONY_GSM](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_TELEPHONY_GSM)
        pub const FEATURE_TELEPHONY_GSM : &'static str = "android.hardware.telephony.gsm";

        /// public static final [FEATURE_TELEPHONY_IMS](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_TELEPHONY_IMS)
        pub const FEATURE_TELEPHONY_IMS : &'static str = "android.hardware.telephony.ims";

        /// public static final [FEATURE_TELEPHONY_MBMS](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_TELEPHONY_MBMS)
        pub const FEATURE_TELEPHONY_MBMS : &'static str = "android.hardware.telephony.mbms";

        /// public static final [FEATURE_TELEVISION](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_TELEVISION)
        #[deprecated] pub const FEATURE_TELEVISION : &'static str = "android.hardware.type.television";

        /// public static final [FEATURE_TOUCHSCREEN](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_TOUCHSCREEN)
        pub const FEATURE_TOUCHSCREEN : &'static str = "android.hardware.touchscreen";

        /// public static final [FEATURE_TOUCHSCREEN_MULTITOUCH](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_TOUCHSCREEN_MULTITOUCH)
        pub const FEATURE_TOUCHSCREEN_MULTITOUCH : &'static str = "android.hardware.touchscreen.multitouch";

        /// public static final [FEATURE_TOUCHSCREEN_MULTITOUCH_DISTINCT](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_TOUCHSCREEN_MULTITOUCH_DISTINCT)
        pub const FEATURE_TOUCHSCREEN_MULTITOUCH_DISTINCT : &'static str = "android.hardware.touchscreen.multitouch.distinct";

        /// public static final [FEATURE_TOUCHSCREEN_MULTITOUCH_JAZZHAND](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_TOUCHSCREEN_MULTITOUCH_JAZZHAND)
        pub const FEATURE_TOUCHSCREEN_MULTITOUCH_JAZZHAND : &'static str = "android.hardware.touchscreen.multitouch.jazzhand";

        /// public static final [FEATURE_USB_ACCESSORY](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_USB_ACCESSORY)
        pub const FEATURE_USB_ACCESSORY : &'static str = "android.hardware.usb.accessory";

        /// public static final [FEATURE_USB_HOST](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_USB_HOST)
        pub const FEATURE_USB_HOST : &'static str = "android.hardware.usb.host";

        /// public static final [FEATURE_VERIFIED_BOOT](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_VERIFIED_BOOT)
        pub const FEATURE_VERIFIED_BOOT : &'static str = "android.software.verified_boot";

        /// public static final [FEATURE_VR_HEADTRACKING](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_VR_HEADTRACKING)
        pub const FEATURE_VR_HEADTRACKING : &'static str = "android.hardware.vr.headtracking";

        /// public static final [FEATURE_VR_MODE](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_VR_MODE)
        #[deprecated] pub const FEATURE_VR_MODE : &'static str = "android.software.vr.mode";

        /// public static final [FEATURE_VR_MODE_HIGH_PERFORMANCE](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_VR_MODE_HIGH_PERFORMANCE)
        pub const FEATURE_VR_MODE_HIGH_PERFORMANCE : &'static str = "android.hardware.vr.high_performance";

        /// public static final [FEATURE_VULKAN_HARDWARE_COMPUTE](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_VULKAN_HARDWARE_COMPUTE)
        pub const FEATURE_VULKAN_HARDWARE_COMPUTE : &'static str = "android.hardware.vulkan.compute";

        /// public static final [FEATURE_VULKAN_HARDWARE_LEVEL](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_VULKAN_HARDWARE_LEVEL)
        pub const FEATURE_VULKAN_HARDWARE_LEVEL : &'static str = "android.hardware.vulkan.level";

        /// public static final [FEATURE_VULKAN_HARDWARE_VERSION](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_VULKAN_HARDWARE_VERSION)
        pub const FEATURE_VULKAN_HARDWARE_VERSION : &'static str = "android.hardware.vulkan.version";

        /// public static final [FEATURE_WATCH](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_WATCH)
        pub const FEATURE_WATCH : &'static str = "android.hardware.type.watch";

        /// public static final [FEATURE_WEBVIEW](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_WEBVIEW)
        pub const FEATURE_WEBVIEW : &'static str = "android.software.webview";

        /// public static final [FEATURE_WIFI](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_WIFI)
        pub const FEATURE_WIFI : &'static str = "android.hardware.wifi";

        /// public static final [FEATURE_WIFI_AWARE](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_WIFI_AWARE)
        pub const FEATURE_WIFI_AWARE : &'static str = "android.hardware.wifi.aware";

        /// public static final [FEATURE_WIFI_DIRECT](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_WIFI_DIRECT)
        pub const FEATURE_WIFI_DIRECT : &'static str = "android.hardware.wifi.direct";

        /// public static final [FEATURE_WIFI_PASSPOINT](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_WIFI_PASSPOINT)
        pub const FEATURE_WIFI_PASSPOINT : &'static str = "android.hardware.wifi.passpoint";

        /// public static final [FEATURE_WIFI_RTT](https://developer.android.com/reference/android/content/pm/PackageManager.html#FEATURE_WIFI_RTT)
        pub const FEATURE_WIFI_RTT : &'static str = "android.hardware.wifi.rtt";

        /// public static final [FLAG_PERMISSION_WHITELIST_INSTALLER](https://developer.android.com/reference/android/content/pm/PackageManager.html#FLAG_PERMISSION_WHITELIST_INSTALLER)
        pub const FLAG_PERMISSION_WHITELIST_INSTALLER : i32 = 2;

        /// public static final [FLAG_PERMISSION_WHITELIST_SYSTEM](https://developer.android.com/reference/android/content/pm/PackageManager.html#FLAG_PERMISSION_WHITELIST_SYSTEM)
        pub const FLAG_PERMISSION_WHITELIST_SYSTEM : i32 = 1;

        /// public static final [FLAG_PERMISSION_WHITELIST_UPGRADE](https://developer.android.com/reference/android/content/pm/PackageManager.html#FLAG_PERMISSION_WHITELIST_UPGRADE)
        pub const FLAG_PERMISSION_WHITELIST_UPGRADE : i32 = 4;

        /// public static final [GET_ACTIVITIES](https://developer.android.com/reference/android/content/pm/PackageManager.html#GET_ACTIVITIES)
        pub const GET_ACTIVITIES : i32 = 1;

        /// public static final [GET_CONFIGURATIONS](https://developer.android.com/reference/android/content/pm/PackageManager.html#GET_CONFIGURATIONS)
        pub const GET_CONFIGURATIONS : i32 = 16384;

        /// public static final [GET_DISABLED_COMPONENTS](https://developer.android.com/reference/android/content/pm/PackageManager.html#GET_DISABLED_COMPONENTS)
        #[deprecated] pub const GET_DISABLED_COMPONENTS : i32 = 512;

        /// public static final [GET_DISABLED_UNTIL_USED_COMPONENTS](https://developer.android.com/reference/android/content/pm/PackageManager.html#GET_DISABLED_UNTIL_USED_COMPONENTS)
        #[deprecated] pub const GET_DISABLED_UNTIL_USED_COMPONENTS : i32 = 32768;

        /// public static final [GET_GIDS](https://developer.android.com/reference/android/content/pm/PackageManager.html#GET_GIDS)
        pub const GET_GIDS : i32 = 256;

        /// public static final [GET_INSTRUMENTATION](https://developer.android.com/reference/android/content/pm/PackageManager.html#GET_INSTRUMENTATION)
        pub const GET_INSTRUMENTATION : i32 = 16;

        /// public static final [GET_INTENT_FILTERS](https://developer.android.com/reference/android/content/pm/PackageManager.html#GET_INTENT_FILTERS)
        pub const GET_INTENT_FILTERS : i32 = 32;

        /// public static final [GET_META_DATA](https://developer.android.com/reference/android/content/pm/PackageManager.html#GET_META_DATA)
        pub const GET_META_DATA : i32 = 128;

        /// public static final [GET_PERMISSIONS](https://developer.android.com/reference/android/content/pm/PackageManager.html#GET_PERMISSIONS)
        pub const GET_PERMISSIONS : i32 = 4096;

        /// public static final [GET_PROVIDERS](https://developer.android.com/reference/android/content/pm/PackageManager.html#GET_PROVIDERS)
        pub const GET_PROVIDERS : i32 = 8;

        /// public static final [GET_RECEIVERS](https://developer.android.com/reference/android/content/pm/PackageManager.html#GET_RECEIVERS)
        pub const GET_RECEIVERS : i32 = 2;

        /// public static final [GET_RESOLVED_FILTER](https://developer.android.com/reference/android/content/pm/PackageManager.html#GET_RESOLVED_FILTER)
        pub const GET_RESOLVED_FILTER : i32 = 64;

        /// public static final [GET_SERVICES](https://developer.android.com/reference/android/content/pm/PackageManager.html#GET_SERVICES)
        pub const GET_SERVICES : i32 = 4;

        /// public static final [GET_SHARED_LIBRARY_FILES](https://developer.android.com/reference/android/content/pm/PackageManager.html#GET_SHARED_LIBRARY_FILES)
        pub const GET_SHARED_LIBRARY_FILES : i32 = 1024;

        /// public static final [GET_SIGNATURES](https://developer.android.com/reference/android/content/pm/PackageManager.html#GET_SIGNATURES)
        #[deprecated] pub const GET_SIGNATURES : i32 = 64;

        /// public static final [GET_SIGNING_CERTIFICATES](https://developer.android.com/reference/android/content/pm/PackageManager.html#GET_SIGNING_CERTIFICATES)
        pub const GET_SIGNING_CERTIFICATES : i32 = 134217728;

        /// public static final [GET_UNINSTALLED_PACKAGES](https://developer.android.com/reference/android/content/pm/PackageManager.html#GET_UNINSTALLED_PACKAGES)
        #[deprecated] pub const GET_UNINSTALLED_PACKAGES : i32 = 8192;

        /// public static final [GET_URI_PERMISSION_PATTERNS](https://developer.android.com/reference/android/content/pm/PackageManager.html#GET_URI_PERMISSION_PATTERNS)
        pub const GET_URI_PERMISSION_PATTERNS : i32 = 2048;

        /// public static final [INSTALL_REASON_DEVICE_RESTORE](https://developer.android.com/reference/android/content/pm/PackageManager.html#INSTALL_REASON_DEVICE_RESTORE)
        pub const INSTALL_REASON_DEVICE_RESTORE : i32 = 2;

        /// public static final [INSTALL_REASON_DEVICE_SETUP](https://developer.android.com/reference/android/content/pm/PackageManager.html#INSTALL_REASON_DEVICE_SETUP)
        pub const INSTALL_REASON_DEVICE_SETUP : i32 = 3;

        /// public static final [INSTALL_REASON_POLICY](https://developer.android.com/reference/android/content/pm/PackageManager.html#INSTALL_REASON_POLICY)
        pub const INSTALL_REASON_POLICY : i32 = 1;

        /// public static final [INSTALL_REASON_UNKNOWN](https://developer.android.com/reference/android/content/pm/PackageManager.html#INSTALL_REASON_UNKNOWN)
        pub const INSTALL_REASON_UNKNOWN : i32 = 0;

        /// public static final [INSTALL_REASON_USER](https://developer.android.com/reference/android/content/pm/PackageManager.html#INSTALL_REASON_USER)
        pub const INSTALL_REASON_USER : i32 = 4;

        /// public static final [MATCH_ALL](https://developer.android.com/reference/android/content/pm/PackageManager.html#MATCH_ALL)
        pub const MATCH_ALL : i32 = 131072;

        /// public static final [MATCH_APEX](https://developer.android.com/reference/android/content/pm/PackageManager.html#MATCH_APEX)
        pub const MATCH_APEX : i32 = 1073741824;

        /// public static final [MATCH_DEFAULT_ONLY](https://developer.android.com/reference/android/content/pm/PackageManager.html#MATCH_DEFAULT_ONLY)
        pub const MATCH_DEFAULT_ONLY : i32 = 65536;

        /// public static final [MATCH_DIRECT_BOOT_AUTO](https://developer.android.com/reference/android/content/pm/PackageManager.html#MATCH_DIRECT_BOOT_AUTO)
        pub const MATCH_DIRECT_BOOT_AUTO : i32 = 268435456;

        /// public static final [MATCH_DIRECT_BOOT_AWARE](https://developer.android.com/reference/android/content/pm/PackageManager.html#MATCH_DIRECT_BOOT_AWARE)
        pub const MATCH_DIRECT_BOOT_AWARE : i32 = 524288;

        /// public static final [MATCH_DIRECT_BOOT_UNAWARE](https://developer.android.com/reference/android/content/pm/PackageManager.html#MATCH_DIRECT_BOOT_UNAWARE)
        pub const MATCH_DIRECT_BOOT_UNAWARE : i32 = 262144;

        /// public static final [MATCH_DISABLED_COMPONENTS](https://developer.android.com/reference/android/content/pm/PackageManager.html#MATCH_DISABLED_COMPONENTS)
        pub const MATCH_DISABLED_COMPONENTS : i32 = 512;

        /// public static final [MATCH_DISABLED_UNTIL_USED_COMPONENTS](https://developer.android.com/reference/android/content/pm/PackageManager.html#MATCH_DISABLED_UNTIL_USED_COMPONENTS)
        pub const MATCH_DISABLED_UNTIL_USED_COMPONENTS : i32 = 32768;

        /// public static final [MATCH_SYSTEM_ONLY](https://developer.android.com/reference/android/content/pm/PackageManager.html#MATCH_SYSTEM_ONLY)
        pub const MATCH_SYSTEM_ONLY : i32 = 1048576;

        /// public static final [MATCH_UNINSTALLED_PACKAGES](https://developer.android.com/reference/android/content/pm/PackageManager.html#MATCH_UNINSTALLED_PACKAGES)
        pub const MATCH_UNINSTALLED_PACKAGES : i32 = 8192;

        /// public static final [MAXIMUM_VERIFICATION_TIMEOUT](https://developer.android.com/reference/android/content/pm/PackageManager.html#MAXIMUM_VERIFICATION_TIMEOUT)
        pub const MAXIMUM_VERIFICATION_TIMEOUT : i64 = 3600000i64;

        /// public static final [PERMISSION_DENIED](https://developer.android.com/reference/android/content/pm/PackageManager.html#PERMISSION_DENIED)
        pub const PERMISSION_DENIED : i32 = -1;

        /// public static final [PERMISSION_GRANTED](https://developer.android.com/reference/android/content/pm/PackageManager.html#PERMISSION_GRANTED)
        pub const PERMISSION_GRANTED : i32 = 0;

        /// public static final [SIGNATURE_FIRST_NOT_SIGNED](https://developer.android.com/reference/android/content/pm/PackageManager.html#SIGNATURE_FIRST_NOT_SIGNED)
        pub const SIGNATURE_FIRST_NOT_SIGNED : i32 = -1;

        /// public static final [SIGNATURE_MATCH](https://developer.android.com/reference/android/content/pm/PackageManager.html#SIGNATURE_MATCH)
        pub const SIGNATURE_MATCH : i32 = 0;

        /// public static final [SIGNATURE_NEITHER_SIGNED](https://developer.android.com/reference/android/content/pm/PackageManager.html#SIGNATURE_NEITHER_SIGNED)
        pub const SIGNATURE_NEITHER_SIGNED : i32 = 1;

        /// public static final [SIGNATURE_NO_MATCH](https://developer.android.com/reference/android/content/pm/PackageManager.html#SIGNATURE_NO_MATCH)
        pub const SIGNATURE_NO_MATCH : i32 = -3;

        /// public static final [SIGNATURE_SECOND_NOT_SIGNED](https://developer.android.com/reference/android/content/pm/PackageManager.html#SIGNATURE_SECOND_NOT_SIGNED)
        pub const SIGNATURE_SECOND_NOT_SIGNED : i32 = -2;

        /// public static final [SIGNATURE_UNKNOWN_PACKAGE](https://developer.android.com/reference/android/content/pm/PackageManager.html#SIGNATURE_UNKNOWN_PACKAGE)
        pub const SIGNATURE_UNKNOWN_PACKAGE : i32 = -4;

        /// public static final [VERIFICATION_ALLOW](https://developer.android.com/reference/android/content/pm/PackageManager.html#VERIFICATION_ALLOW)
        pub const VERIFICATION_ALLOW : i32 = 1;

        /// public static final [VERIFICATION_REJECT](https://developer.android.com/reference/android/content/pm/PackageManager.html#VERIFICATION_REJECT)
        pub const VERIFICATION_REJECT : i32 = -1;

        /// public static final [VERSION_CODE_HIGHEST](https://developer.android.com/reference/android/content/pm/PackageManager.html#VERSION_CODE_HIGHEST)
        pub const VERSION_CODE_HIGHEST : i32 = -1;
    }
}
