// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-content-pm-ComponentInfo"))]
__jni_bindgen! {
    /// public class [ComponentInfo](https://developer.android.com/reference/android/content/pm/ComponentInfo.html)
    ///
    /// Required feature: android-content-pm-ComponentInfo
    public class ComponentInfo ("android/content/pm/ComponentInfo") extends crate::android::content::pm::PackageItemInfo {

        /// [ComponentInfo](https://developer.android.com/reference/android/content/pm/ComponentInfo.html#ComponentInfo())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::content::pm::ComponentInfo>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/ComponentInfo", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/ComponentInfo\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ComponentInfo](https://developer.android.com/reference/android/content/pm/ComponentInfo.html#ComponentInfo(android.content.pm.ComponentInfo))
        ///
        /// Required features: "android-content-pm-ComponentInfo"
        #[cfg(any(feature = "all", all(feature = "android-content-pm-ComponentInfo")))]
        pub fn new_ComponentInfo<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::pm::ComponentInfo>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::content::pm::ComponentInfo>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/ComponentInfo", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/content/pm/ComponentInfo;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/ComponentInfo\0", "<init>\0", "(Landroid/content/pm/ComponentInfo;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [ComponentInfo](https://developer.android.com/reference/android/content/pm/ComponentInfo.html#ComponentInfo(android.os.Parcel))
        // ///
        // /// Required features: "android-os-Parcel"
        // #[cfg(any(feature = "all", all(feature = "android-os-Parcel")))]
        // fn new_Parcel<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Parcel>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::content::pm::ComponentInfo>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/content/pm/ComponentInfo", java.flags == PROTECTED, .name == "<init>", .descriptor == "(Landroid/os/Parcel;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/ComponentInfo\0", "<init>\0", "(Landroid/os/Parcel;)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [isEnabled](https://developer.android.com/reference/android/content/pm/ComponentInfo.html#isEnabled())
        pub fn isEnabled<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/ComponentInfo", java.flags == PUBLIC, .name == "isEnabled", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/ComponentInfo\0", "isEnabled\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getIconResource](https://developer.android.com/reference/android/content/pm/ComponentInfo.html#getIconResource())
        pub fn getIconResource<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/ComponentInfo", java.flags == PUBLIC | FINAL, .name == "getIconResource", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/ComponentInfo\0", "getIconResource\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLogoResource](https://developer.android.com/reference/android/content/pm/ComponentInfo.html#getLogoResource())
        pub fn getLogoResource<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/ComponentInfo", java.flags == PUBLIC | FINAL, .name == "getLogoResource", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/ComponentInfo\0", "getLogoResource\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getBannerResource](https://developer.android.com/reference/android/content/pm/ComponentInfo.html#getBannerResource())
        pub fn getBannerResource<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/ComponentInfo", java.flags == PUBLIC | FINAL, .name == "getBannerResource", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/ComponentInfo\0", "getBannerResource\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [dumpFront](https://developer.android.com/reference/android/content/pm/ComponentInfo.html#dumpFront(android.util.Printer,%20java.lang.String))
        // ///
        // /// Required features: "android-util-Printer", "java-lang-String"
        // #[cfg(any(feature = "all", all(feature = "android-util-Printer", feature = "java-lang-String")))]
        // fn dumpFront<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::util::Printer>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/content/pm/ComponentInfo", java.flags == PROTECTED, .name == "dumpFront", .descriptor == "(Landroid/util/Printer;Ljava/lang/String;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/ComponentInfo\0", "dumpFront\0", "(Landroid/util/Printer;Ljava/lang/String;)V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [dumpBack](https://developer.android.com/reference/android/content/pm/ComponentInfo.html#dumpBack(android.util.Printer,%20java.lang.String))
        // ///
        // /// Required features: "android-util-Printer", "java-lang-String"
        // #[cfg(any(feature = "all", all(feature = "android-util-Printer", feature = "java-lang-String")))]
        // fn dumpBack<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::util::Printer>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/content/pm/ComponentInfo", java.flags == PROTECTED, .name == "dumpBack", .descriptor == "(Landroid/util/Printer;Ljava/lang/String;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/ComponentInfo\0", "dumpBack\0", "(Landroid/util/Printer;Ljava/lang/String;)V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [writeToParcel](https://developer.android.com/reference/android/content/pm/ComponentInfo.html#writeToParcel(android.os.Parcel,%20int))
        ///
        /// Required features: "android-os-Parcel"
        #[cfg(any(feature = "all", all(feature = "android-os-Parcel")))]
        pub fn writeToParcel<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Parcel>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/ComponentInfo", java.flags == PUBLIC, .name == "writeToParcel", .descriptor == "(Landroid/os/Parcel;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/ComponentInfo\0", "writeToParcel\0", "(Landroid/os/Parcel;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// **get** public [applicationInfo](https://developer.android.com/reference/android/content/pm/ComponentInfo.html#applicationInfo)
        ///
        /// Required feature: android-content-pm-ApplicationInfo
        #[cfg(any(feature = "all", feature = "android-content-pm-ApplicationInfo"))]
        pub fn applicationInfo<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::pm::ApplicationInfo>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ComponentInfo\0", "applicationInfo\0", "Landroid/content/pm/ApplicationInfo;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [applicationInfo](https://developer.android.com/reference/android/content/pm/ComponentInfo.html#applicationInfo)
        ///
        /// Required feature: android-content-pm-ApplicationInfo
        #[cfg(any(feature = "all", feature = "android-content-pm-ApplicationInfo"))]
        pub fn set_applicationInfo<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::android::content::pm::ApplicationInfo>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ComponentInfo\0", "applicationInfo\0", "Landroid/content/pm/ApplicationInfo;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [descriptionRes](https://developer.android.com/reference/android/content/pm/ComponentInfo.html#descriptionRes)
        pub fn descriptionRes<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ComponentInfo\0", "descriptionRes\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [descriptionRes](https://developer.android.com/reference/android/content/pm/ComponentInfo.html#descriptionRes)
        pub fn set_descriptionRes<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ComponentInfo\0", "descriptionRes\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [directBootAware](https://developer.android.com/reference/android/content/pm/ComponentInfo.html#directBootAware)
        pub fn directBootAware<'env>(&'env self) -> bool {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ComponentInfo\0", "directBootAware\0", "Z\0");
                env.get_boolean_field(class, field)
            }
        }

        /// **set** public [directBootAware](https://developer.android.com/reference/android/content/pm/ComponentInfo.html#directBootAware)
        pub fn set_directBootAware<'env>(&'env self, value: bool) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ComponentInfo\0", "directBootAware\0", "Z\0");
                env.set_boolean_field(class, field, value)
            }
        }

        /// **get** public [enabled](https://developer.android.com/reference/android/content/pm/ComponentInfo.html#enabled)
        pub fn enabled<'env>(&'env self) -> bool {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ComponentInfo\0", "enabled\0", "Z\0");
                env.get_boolean_field(class, field)
            }
        }

        /// **set** public [enabled](https://developer.android.com/reference/android/content/pm/ComponentInfo.html#enabled)
        pub fn set_enabled<'env>(&'env self, value: bool) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ComponentInfo\0", "enabled\0", "Z\0");
                env.set_boolean_field(class, field, value)
            }
        }

        /// **get** public [exported](https://developer.android.com/reference/android/content/pm/ComponentInfo.html#exported)
        pub fn exported<'env>(&'env self) -> bool {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ComponentInfo\0", "exported\0", "Z\0");
                env.get_boolean_field(class, field)
            }
        }

        /// **set** public [exported](https://developer.android.com/reference/android/content/pm/ComponentInfo.html#exported)
        pub fn set_exported<'env>(&'env self, value: bool) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ComponentInfo\0", "exported\0", "Z\0");
                env.set_boolean_field(class, field, value)
            }
        }

        /// **get** public [processName](https://developer.android.com/reference/android/content/pm/ComponentInfo.html#processName)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn processName<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ComponentInfo\0", "processName\0", "Ljava/lang/String;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [processName](https://developer.android.com/reference/android/content/pm/ComponentInfo.html#processName)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn set_processName<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::java::lang::String>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ComponentInfo\0", "processName\0", "Ljava/lang/String;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [splitName](https://developer.android.com/reference/android/content/pm/ComponentInfo.html#splitName)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn splitName<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ComponentInfo\0", "splitName\0", "Ljava/lang/String;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [splitName](https://developer.android.com/reference/android/content/pm/ComponentInfo.html#splitName)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn set_splitName<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::java::lang::String>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ComponentInfo\0", "splitName\0", "Ljava/lang/String;\0");
                env.set_object_field(class, field, value)
            }
        }
    }
}
