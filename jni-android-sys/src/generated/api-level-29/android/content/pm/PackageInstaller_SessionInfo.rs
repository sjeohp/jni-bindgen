// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-content-pm-PackageInstaller_SessionInfo"))]
__jni_bindgen! {
    /// public class [PackageInstaller.SessionInfo](https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html)
    ///
    /// Required feature: android-content-pm-PackageInstaller_SessionInfo
    public class PackageInstaller_SessionInfo ("android/content/pm/PackageInstaller$SessionInfo") extends crate::java::lang::Object, implements crate::android::os::Parcelable {

        // // Not emitting: Non-public method
        // /// [SessionInfo](https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#SessionInfo())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::content::pm::PackageInstaller_SessionInfo>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/content/pm/PackageInstaller$SessionInfo", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageInstaller$SessionInfo\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getSessionId](https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#getSessionId())
        pub fn getSessionId<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageInstaller$SessionInfo", java.flags == PUBLIC, .name == "getSessionId", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageInstaller$SessionInfo\0", "getSessionId\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getUser](https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#getUser())
        ///
        /// Required features: "android-os-UserHandle"
        #[cfg(any(feature = "all", all(feature = "android-os-UserHandle")))]
        pub fn getUser<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::UserHandle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageInstaller$SessionInfo", java.flags == PUBLIC, .name == "getUser", .descriptor == "()Landroid/os/UserHandle;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageInstaller$SessionInfo\0", "getUser\0", "()Landroid/os/UserHandle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInstallerPackageName](https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#getInstallerPackageName())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getInstallerPackageName<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageInstaller$SessionInfo", java.flags == PUBLIC, .name == "getInstallerPackageName", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageInstaller$SessionInfo\0", "getInstallerPackageName\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getProgress](https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#getProgress())
        pub fn getProgress<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageInstaller$SessionInfo", java.flags == PUBLIC, .name == "getProgress", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageInstaller$SessionInfo\0", "getProgress\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isActive](https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#isActive())
        pub fn isActive<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageInstaller$SessionInfo", java.flags == PUBLIC, .name == "isActive", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageInstaller$SessionInfo\0", "isActive\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isSealed](https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#isSealed())
        pub fn isSealed<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageInstaller$SessionInfo", java.flags == PUBLIC, .name == "isSealed", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageInstaller$SessionInfo\0", "isSealed\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInstallReason](https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#getInstallReason())
        pub fn getInstallReason<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageInstaller$SessionInfo", java.flags == PUBLIC, .name == "getInstallReason", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageInstaller$SessionInfo\0", "getInstallReason\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAppPackageName](https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#getAppPackageName())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getAppPackageName<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageInstaller$SessionInfo", java.flags == PUBLIC, .name == "getAppPackageName", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageInstaller$SessionInfo\0", "getAppPackageName\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAppIcon](https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#getAppIcon())
        ///
        /// Required features: "android-graphics-Bitmap"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Bitmap")))]
        pub fn getAppIcon<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Bitmap>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageInstaller$SessionInfo", java.flags == PUBLIC, .name == "getAppIcon", .descriptor == "()Landroid/graphics/Bitmap;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageInstaller$SessionInfo\0", "getAppIcon\0", "()Landroid/graphics/Bitmap;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAppLabel](https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#getAppLabel())
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn getAppLabel<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::CharSequence>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageInstaller$SessionInfo", java.flags == PUBLIC, .name == "getAppLabel", .descriptor == "()Ljava/lang/CharSequence;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageInstaller$SessionInfo\0", "getAppLabel\0", "()Ljava/lang/CharSequence;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createDetailsIntent](https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#createDetailsIntent())
        ///
        /// Required features: "android-content-Intent"
        #[cfg(any(feature = "all", all(feature = "android-content-Intent")))]
        pub fn createDetailsIntent<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::Intent>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageInstaller$SessionInfo", java.flags == PUBLIC, .name == "createDetailsIntent", .descriptor == "()Landroid/content/Intent;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageInstaller$SessionInfo\0", "createDetailsIntent\0", "()Landroid/content/Intent;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMode](https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#getMode())
        pub fn getMode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageInstaller$SessionInfo", java.flags == PUBLIC, .name == "getMode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageInstaller$SessionInfo\0", "getMode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInstallLocation](https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#getInstallLocation())
        pub fn getInstallLocation<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageInstaller$SessionInfo", java.flags == PUBLIC, .name == "getInstallLocation", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageInstaller$SessionInfo\0", "getInstallLocation\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSize](https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#getSize())
        pub fn getSize<'env>(&'env self) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageInstaller$SessionInfo", java.flags == PUBLIC, .name == "getSize", .descriptor == "()J"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageInstaller$SessionInfo\0", "getSize\0", "()J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getOriginatingUri](https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#getOriginatingUri())
        ///
        /// Required features: "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri")))]
        pub fn getOriginatingUri<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageInstaller$SessionInfo", java.flags == PUBLIC, .name == "getOriginatingUri", .descriptor == "()Landroid/net/Uri;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageInstaller$SessionInfo\0", "getOriginatingUri\0", "()Landroid/net/Uri;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getOriginatingUid](https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#getOriginatingUid())
        pub fn getOriginatingUid<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageInstaller$SessionInfo", java.flags == PUBLIC, .name == "getOriginatingUid", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageInstaller$SessionInfo\0", "getOriginatingUid\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getReferrerUri](https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#getReferrerUri())
        ///
        /// Required features: "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri")))]
        pub fn getReferrerUri<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageInstaller$SessionInfo", java.flags == PUBLIC, .name == "getReferrerUri", .descriptor == "()Landroid/net/Uri;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageInstaller$SessionInfo\0", "getReferrerUri\0", "()Landroid/net/Uri;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isMultiPackage](https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#isMultiPackage())
        pub fn isMultiPackage<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageInstaller$SessionInfo", java.flags == PUBLIC, .name == "isMultiPackage", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageInstaller$SessionInfo\0", "isMultiPackage\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isStaged](https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#isStaged())
        pub fn isStaged<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageInstaller$SessionInfo", java.flags == PUBLIC, .name == "isStaged", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageInstaller$SessionInfo\0", "isStaged\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getParentSessionId](https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#getParentSessionId())
        pub fn getParentSessionId<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageInstaller$SessionInfo", java.flags == PUBLIC, .name == "getParentSessionId", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageInstaller$SessionInfo\0", "getParentSessionId\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getChildSessionIds](https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#getChildSessionIds())
        pub fn getChildSessionIds<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::IntArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageInstaller$SessionInfo", java.flags == PUBLIC, .name == "getChildSessionIds", .descriptor == "()[I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageInstaller$SessionInfo\0", "getChildSessionIds\0", "()[I\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isStagedSessionApplied](https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#isStagedSessionApplied())
        pub fn isStagedSessionApplied<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageInstaller$SessionInfo", java.flags == PUBLIC, .name == "isStagedSessionApplied", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageInstaller$SessionInfo\0", "isStagedSessionApplied\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isStagedSessionReady](https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#isStagedSessionReady())
        pub fn isStagedSessionReady<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageInstaller$SessionInfo", java.flags == PUBLIC, .name == "isStagedSessionReady", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageInstaller$SessionInfo\0", "isStagedSessionReady\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isStagedSessionFailed](https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#isStagedSessionFailed())
        pub fn isStagedSessionFailed<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageInstaller$SessionInfo", java.flags == PUBLIC, .name == "isStagedSessionFailed", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageInstaller$SessionInfo\0", "isStagedSessionFailed\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getStagedSessionErrorCode](https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#getStagedSessionErrorCode())
        pub fn getStagedSessionErrorCode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageInstaller$SessionInfo", java.flags == PUBLIC, .name == "getStagedSessionErrorCode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageInstaller$SessionInfo\0", "getStagedSessionErrorCode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getStagedSessionErrorMessage](https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#getStagedSessionErrorMessage())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getStagedSessionErrorMessage<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageInstaller$SessionInfo", java.flags == PUBLIC, .name == "getStagedSessionErrorMessage", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageInstaller$SessionInfo\0", "getStagedSessionErrorMessage\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isCommitted](https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#isCommitted())
        pub fn isCommitted<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageInstaller$SessionInfo", java.flags == PUBLIC, .name == "isCommitted", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageInstaller$SessionInfo\0", "isCommitted\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getUpdatedMillis](https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#getUpdatedMillis())
        pub fn getUpdatedMillis<'env>(&'env self) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageInstaller$SessionInfo", java.flags == PUBLIC, .name == "getUpdatedMillis", .descriptor == "()J"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageInstaller$SessionInfo\0", "getUpdatedMillis\0", "()J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [describeContents](https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#describeContents())
        pub fn describeContents<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageInstaller$SessionInfo", java.flags == PUBLIC, .name == "describeContents", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageInstaller$SessionInfo\0", "describeContents\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [writeToParcel](https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#writeToParcel(android.os.Parcel,%20int))
        ///
        /// Required features: "android-os-Parcel"
        #[cfg(any(feature = "all", all(feature = "android-os-Parcel")))]
        pub fn writeToParcel<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Parcel>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/PackageInstaller$SessionInfo", java.flags == PUBLIC, .name == "writeToParcel", .descriptor == "(Landroid/os/Parcel;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/PackageInstaller$SessionInfo\0", "writeToParcel\0", "(Landroid/os/Parcel;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// **get** public static final [CREATOR](https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#CREATOR)
        ///
        /// Required feature: android-os-Parcelable_Creator
        #[cfg(any(feature = "all", feature = "android-os-Parcelable_Creator"))]
        pub fn CREATOR<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Parcelable_Creator>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/content/pm/PackageInstaller$SessionInfo\0", "CREATOR\0", "Landroid/os/Parcelable$Creator;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// public static final [INVALID_ID](https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#INVALID_ID)
        pub const INVALID_ID : i32 = -1;

        /// public static final [STAGED_SESSION_ACTIVATION_FAILED](https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#STAGED_SESSION_ACTIVATION_FAILED)
        pub const STAGED_SESSION_ACTIVATION_FAILED : i32 = 2;

        /// public static final [STAGED_SESSION_NO_ERROR](https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#STAGED_SESSION_NO_ERROR)
        pub const STAGED_SESSION_NO_ERROR : i32 = 0;

        /// public static final [STAGED_SESSION_UNKNOWN](https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#STAGED_SESSION_UNKNOWN)
        pub const STAGED_SESSION_UNKNOWN : i32 = 3;

        /// public static final [STAGED_SESSION_VERIFICATION_FAILED](https://developer.android.com/reference/android/content/pm/PackageInstaller.SessionInfo.html#STAGED_SESSION_VERIFICATION_FAILED)
        pub const STAGED_SESSION_VERIFICATION_FAILED : i32 = 1;
    }
}
