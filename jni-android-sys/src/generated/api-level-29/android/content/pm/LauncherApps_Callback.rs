// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-content-pm-LauncherApps_Callback"))]
__jni_bindgen! {
    /// public class [LauncherApps.Callback](https://developer.android.com/reference/android/content/pm/LauncherApps.Callback.html)
    ///
    /// Required feature: android-content-pm-LauncherApps_Callback
    public class LauncherApps_Callback ("android/content/pm/LauncherApps$Callback") extends crate::java::lang::Object {

        /// [Callback](https://developer.android.com/reference/android/content/pm/LauncherApps.Callback.html#Callback())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::content::pm::LauncherApps_Callback>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/LauncherApps$Callback", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/LauncherApps$Callback\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onPackageRemoved](https://developer.android.com/reference/android/content/pm/LauncherApps.Callback.html#onPackageRemoved(java.lang.String,%20android.os.UserHandle))
        ///
        /// Required features: "android-os-UserHandle", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-os-UserHandle", feature = "java-lang-String")))]
        pub fn onPackageRemoved<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::UserHandle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/LauncherApps$Callback", java.flags == PUBLIC | ABSTRACT, .name == "onPackageRemoved", .descriptor == "(Ljava/lang/String;Landroid/os/UserHandle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/LauncherApps$Callback\0", "onPackageRemoved\0", "(Ljava/lang/String;Landroid/os/UserHandle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onPackageAdded](https://developer.android.com/reference/android/content/pm/LauncherApps.Callback.html#onPackageAdded(java.lang.String,%20android.os.UserHandle))
        ///
        /// Required features: "android-os-UserHandle", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-os-UserHandle", feature = "java-lang-String")))]
        pub fn onPackageAdded<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::UserHandle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/LauncherApps$Callback", java.flags == PUBLIC | ABSTRACT, .name == "onPackageAdded", .descriptor == "(Ljava/lang/String;Landroid/os/UserHandle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/LauncherApps$Callback\0", "onPackageAdded\0", "(Ljava/lang/String;Landroid/os/UserHandle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onPackageChanged](https://developer.android.com/reference/android/content/pm/LauncherApps.Callback.html#onPackageChanged(java.lang.String,%20android.os.UserHandle))
        ///
        /// Required features: "android-os-UserHandle", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-os-UserHandle", feature = "java-lang-String")))]
        pub fn onPackageChanged<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::UserHandle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/LauncherApps$Callback", java.flags == PUBLIC | ABSTRACT, .name == "onPackageChanged", .descriptor == "(Ljava/lang/String;Landroid/os/UserHandle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/LauncherApps$Callback\0", "onPackageChanged\0", "(Ljava/lang/String;Landroid/os/UserHandle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onPackagesAvailable](https://developer.android.com/reference/android/content/pm/LauncherApps.Callback.html#onPackagesAvailable(java.lang.String%5B%5D,%20android.os.UserHandle,%20boolean))
        ///
        /// Required features: "android-os-UserHandle", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-os-UserHandle", feature = "java-lang-String")))]
        pub fn onPackagesAvailable<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::UserHandle>>, arg2: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/LauncherApps$Callback", java.flags == PUBLIC | ABSTRACT, .name == "onPackagesAvailable", .descriptor == "([Ljava/lang/String;Landroid/os/UserHandle;Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/LauncherApps$Callback\0", "onPackagesAvailable\0", "([Ljava/lang/String;Landroid/os/UserHandle;Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onPackagesUnavailable](https://developer.android.com/reference/android/content/pm/LauncherApps.Callback.html#onPackagesUnavailable(java.lang.String%5B%5D,%20android.os.UserHandle,%20boolean))
        ///
        /// Required features: "android-os-UserHandle", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-os-UserHandle", feature = "java-lang-String")))]
        pub fn onPackagesUnavailable<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::UserHandle>>, arg2: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/LauncherApps$Callback", java.flags == PUBLIC | ABSTRACT, .name == "onPackagesUnavailable", .descriptor == "([Ljava/lang/String;Landroid/os/UserHandle;Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/LauncherApps$Callback\0", "onPackagesUnavailable\0", "([Ljava/lang/String;Landroid/os/UserHandle;Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onPackagesSuspended](https://developer.android.com/reference/android/content/pm/LauncherApps.Callback.html#onPackagesSuspended(java.lang.String%5B%5D,%20android.os.UserHandle))
        ///
        /// Required features: "android-os-UserHandle", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-os-UserHandle", feature = "java-lang-String")))]
        pub fn onPackagesSuspended_String_array_UserHandle<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::UserHandle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/LauncherApps$Callback", java.flags == PUBLIC, .name == "onPackagesSuspended", .descriptor == "([Ljava/lang/String;Landroid/os/UserHandle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/LauncherApps$Callback\0", "onPackagesSuspended\0", "([Ljava/lang/String;Landroid/os/UserHandle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onPackagesSuspended](https://developer.android.com/reference/android/content/pm/LauncherApps.Callback.html#onPackagesSuspended(java.lang.String%5B%5D,%20android.os.UserHandle,%20android.os.Bundle))
        ///
        /// Required features: "android-os-Bundle", "android-os-UserHandle", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-os-Bundle", feature = "android-os-UserHandle", feature = "java-lang-String")))]
        pub fn onPackagesSuspended_String_array_UserHandle_Bundle<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::UserHandle>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/LauncherApps$Callback", java.flags == PUBLIC, .name == "onPackagesSuspended", .descriptor == "([Ljava/lang/String;Landroid/os/UserHandle;Landroid/os/Bundle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/LauncherApps$Callback\0", "onPackagesSuspended\0", "([Ljava/lang/String;Landroid/os/UserHandle;Landroid/os/Bundle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onPackagesUnsuspended](https://developer.android.com/reference/android/content/pm/LauncherApps.Callback.html#onPackagesUnsuspended(java.lang.String%5B%5D,%20android.os.UserHandle))
        ///
        /// Required features: "android-os-UserHandle", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-os-UserHandle", feature = "java-lang-String")))]
        pub fn onPackagesUnsuspended<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::UserHandle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/LauncherApps$Callback", java.flags == PUBLIC, .name == "onPackagesUnsuspended", .descriptor == "([Ljava/lang/String;Landroid/os/UserHandle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/LauncherApps$Callback\0", "onPackagesUnsuspended\0", "([Ljava/lang/String;Landroid/os/UserHandle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onShortcutsChanged](https://developer.android.com/reference/android/content/pm/LauncherApps.Callback.html#onShortcutsChanged(java.lang.String,%20java.util.List,%20android.os.UserHandle))
        ///
        /// Required features: "android-os-UserHandle", "java-lang-String", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "android-os-UserHandle", feature = "java-lang-String", feature = "java-util-List")))]
        pub fn onShortcutsChanged<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::UserHandle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/LauncherApps$Callback", java.flags == PUBLIC, .name == "onShortcutsChanged", .descriptor == "(Ljava/lang/String;Ljava/util/List;Landroid/os/UserHandle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/LauncherApps$Callback\0", "onShortcutsChanged\0", "(Ljava/lang/String;Ljava/util/List;Landroid/os/UserHandle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
