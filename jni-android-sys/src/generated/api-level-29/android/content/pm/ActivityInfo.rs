// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-content-pm-ActivityInfo"))]
__jni_bindgen! {
    /// public class [ActivityInfo](https://developer.android.com/reference/android/content/pm/ActivityInfo.html)
    ///
    /// Required feature: android-content-pm-ActivityInfo
    public class ActivityInfo ("android/content/pm/ActivityInfo") extends crate::android::content::pm::ComponentInfo, implements crate::android::os::Parcelable {

        /// [ActivityInfo](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#ActivityInfo())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::content::pm::ActivityInfo>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/ActivityInfo", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/ActivityInfo\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ActivityInfo](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#ActivityInfo(android.content.pm.ActivityInfo))
        ///
        /// Required features: "android-content-pm-ActivityInfo"
        #[cfg(any(feature = "all", all(feature = "android-content-pm-ActivityInfo")))]
        pub fn new_ActivityInfo<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::pm::ActivityInfo>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::content::pm::ActivityInfo>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/ActivityInfo", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/content/pm/ActivityInfo;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/ActivityInfo\0", "<init>\0", "(Landroid/content/pm/ActivityInfo;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getThemeResource](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#getThemeResource())
        pub fn getThemeResource<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/ActivityInfo", java.flags == PUBLIC | FINAL, .name == "getThemeResource", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/ActivityInfo\0", "getThemeResource\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dump](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#dump(android.util.Printer,%20java.lang.String))
        ///
        /// Required features: "android-util-Printer", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-util-Printer", feature = "java-lang-String")))]
        pub fn dump<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::util::Printer>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/ActivityInfo", java.flags == PUBLIC, .name == "dump", .descriptor == "(Landroid/util/Printer;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/ActivityInfo\0", "dump\0", "(Landroid/util/Printer;Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/ActivityInfo", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/ActivityInfo\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [describeContents](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#describeContents())
        pub fn describeContents<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/ActivityInfo", java.flags == PUBLIC, .name == "describeContents", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/ActivityInfo\0", "describeContents\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [writeToParcel](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#writeToParcel(android.os.Parcel,%20int))
        ///
        /// Required features: "android-os-Parcel"
        #[cfg(any(feature = "all", all(feature = "android-os-Parcel")))]
        pub fn writeToParcel<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Parcel>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/pm/ActivityInfo", java.flags == PUBLIC, .name == "writeToParcel", .descriptor == "(Landroid/os/Parcel;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/pm/ActivityInfo\0", "writeToParcel\0", "(Landroid/os/Parcel;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [COLOR_MODE_DEFAULT](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#COLOR_MODE_DEFAULT)
        pub const COLOR_MODE_DEFAULT : i32 = 0;

        /// public static final [COLOR_MODE_HDR](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#COLOR_MODE_HDR)
        pub const COLOR_MODE_HDR : i32 = 2;

        /// public static final [COLOR_MODE_WIDE_COLOR_GAMUT](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#COLOR_MODE_WIDE_COLOR_GAMUT)
        pub const COLOR_MODE_WIDE_COLOR_GAMUT : i32 = 1;

        /// public static final [CONFIG_COLOR_MODE](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#CONFIG_COLOR_MODE)
        pub const CONFIG_COLOR_MODE : i32 = 16384;

        /// public static final [CONFIG_DENSITY](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#CONFIG_DENSITY)
        pub const CONFIG_DENSITY : i32 = 4096;

        /// public static final [CONFIG_FONT_SCALE](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#CONFIG_FONT_SCALE)
        pub const CONFIG_FONT_SCALE : i32 = 1073741824;

        /// public static final [CONFIG_KEYBOARD](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#CONFIG_KEYBOARD)
        pub const CONFIG_KEYBOARD : i32 = 16;

        /// public static final [CONFIG_KEYBOARD_HIDDEN](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#CONFIG_KEYBOARD_HIDDEN)
        pub const CONFIG_KEYBOARD_HIDDEN : i32 = 32;

        /// public static final [CONFIG_LAYOUT_DIRECTION](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#CONFIG_LAYOUT_DIRECTION)
        pub const CONFIG_LAYOUT_DIRECTION : i32 = 8192;

        /// public static final [CONFIG_LOCALE](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#CONFIG_LOCALE)
        pub const CONFIG_LOCALE : i32 = 4;

        /// public static final [CONFIG_MCC](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#CONFIG_MCC)
        pub const CONFIG_MCC : i32 = 1;

        /// public static final [CONFIG_MNC](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#CONFIG_MNC)
        pub const CONFIG_MNC : i32 = 2;

        /// public static final [CONFIG_NAVIGATION](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#CONFIG_NAVIGATION)
        pub const CONFIG_NAVIGATION : i32 = 64;

        /// public static final [CONFIG_ORIENTATION](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#CONFIG_ORIENTATION)
        pub const CONFIG_ORIENTATION : i32 = 128;

        /// public static final [CONFIG_SCREEN_LAYOUT](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#CONFIG_SCREEN_LAYOUT)
        pub const CONFIG_SCREEN_LAYOUT : i32 = 256;

        /// public static final [CONFIG_SCREEN_SIZE](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#CONFIG_SCREEN_SIZE)
        pub const CONFIG_SCREEN_SIZE : i32 = 1024;

        /// public static final [CONFIG_SMALLEST_SCREEN_SIZE](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#CONFIG_SMALLEST_SCREEN_SIZE)
        pub const CONFIG_SMALLEST_SCREEN_SIZE : i32 = 2048;

        /// public static final [CONFIG_TOUCHSCREEN](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#CONFIG_TOUCHSCREEN)
        pub const CONFIG_TOUCHSCREEN : i32 = 8;

        /// public static final [CONFIG_UI_MODE](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#CONFIG_UI_MODE)
        pub const CONFIG_UI_MODE : i32 = 512;

        /// **get** public static final [CREATOR](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#CREATOR)
        ///
        /// Required feature: android-os-Parcelable_Creator
        #[cfg(any(feature = "all", feature = "android-os-Parcelable_Creator"))]
        pub fn CREATOR<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Parcelable_Creator>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/content/pm/ActivityInfo\0", "CREATOR\0", "Landroid/os/Parcelable$Creator;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// public static final [DOCUMENT_LAUNCH_ALWAYS](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#DOCUMENT_LAUNCH_ALWAYS)
        pub const DOCUMENT_LAUNCH_ALWAYS : i32 = 2;

        /// public static final [DOCUMENT_LAUNCH_INTO_EXISTING](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#DOCUMENT_LAUNCH_INTO_EXISTING)
        pub const DOCUMENT_LAUNCH_INTO_EXISTING : i32 = 1;

        /// public static final [DOCUMENT_LAUNCH_NEVER](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#DOCUMENT_LAUNCH_NEVER)
        pub const DOCUMENT_LAUNCH_NEVER : i32 = 3;

        /// public static final [DOCUMENT_LAUNCH_NONE](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#DOCUMENT_LAUNCH_NONE)
        pub const DOCUMENT_LAUNCH_NONE : i32 = 0;

        /// public static final [FLAG_ALLOW_TASK_REPARENTING](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#FLAG_ALLOW_TASK_REPARENTING)
        pub const FLAG_ALLOW_TASK_REPARENTING : i32 = 64;

        /// public static final [FLAG_ALWAYS_RETAIN_TASK_STATE](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#FLAG_ALWAYS_RETAIN_TASK_STATE)
        pub const FLAG_ALWAYS_RETAIN_TASK_STATE : i32 = 8;

        /// public static final [FLAG_AUTO_REMOVE_FROM_RECENTS](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#FLAG_AUTO_REMOVE_FROM_RECENTS)
        pub const FLAG_AUTO_REMOVE_FROM_RECENTS : i32 = 8192;

        /// public static final [FLAG_CLEAR_TASK_ON_LAUNCH](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#FLAG_CLEAR_TASK_ON_LAUNCH)
        pub const FLAG_CLEAR_TASK_ON_LAUNCH : i32 = 4;

        /// public static final [FLAG_ENABLE_VR_MODE](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#FLAG_ENABLE_VR_MODE)
        pub const FLAG_ENABLE_VR_MODE : i32 = 32768;

        /// public static final [FLAG_EXCLUDE_FROM_RECENTS](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#FLAG_EXCLUDE_FROM_RECENTS)
        pub const FLAG_EXCLUDE_FROM_RECENTS : i32 = 32;

        /// public static final [FLAG_FINISH_ON_CLOSE_SYSTEM_DIALOGS](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#FLAG_FINISH_ON_CLOSE_SYSTEM_DIALOGS)
        pub const FLAG_FINISH_ON_CLOSE_SYSTEM_DIALOGS : i32 = 256;

        /// public static final [FLAG_FINISH_ON_TASK_LAUNCH](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#FLAG_FINISH_ON_TASK_LAUNCH)
        pub const FLAG_FINISH_ON_TASK_LAUNCH : i32 = 2;

        /// public static final [FLAG_HARDWARE_ACCELERATED](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#FLAG_HARDWARE_ACCELERATED)
        pub const FLAG_HARDWARE_ACCELERATED : i32 = 512;

        /// public static final [FLAG_IMMERSIVE](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#FLAG_IMMERSIVE)
        pub const FLAG_IMMERSIVE : i32 = 2048;

        /// public static final [FLAG_MULTIPROCESS](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#FLAG_MULTIPROCESS)
        pub const FLAG_MULTIPROCESS : i32 = 1;

        /// public static final [FLAG_NO_HISTORY](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#FLAG_NO_HISTORY)
        pub const FLAG_NO_HISTORY : i32 = 128;

        /// public static final [FLAG_RELINQUISH_TASK_IDENTITY](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#FLAG_RELINQUISH_TASK_IDENTITY)
        pub const FLAG_RELINQUISH_TASK_IDENTITY : i32 = 4096;

        /// public static final [FLAG_RESUME_WHILE_PAUSING](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#FLAG_RESUME_WHILE_PAUSING)
        pub const FLAG_RESUME_WHILE_PAUSING : i32 = 16384;

        /// public static final [FLAG_SINGLE_USER](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#FLAG_SINGLE_USER)
        pub const FLAG_SINGLE_USER : i32 = 1073741824;

        /// public static final [FLAG_STATE_NOT_NEEDED](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#FLAG_STATE_NOT_NEEDED)
        pub const FLAG_STATE_NOT_NEEDED : i32 = 16;

        /// public static final [LAUNCH_MULTIPLE](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#LAUNCH_MULTIPLE)
        pub const LAUNCH_MULTIPLE : i32 = 0;

        /// public static final [LAUNCH_SINGLE_INSTANCE](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#LAUNCH_SINGLE_INSTANCE)
        pub const LAUNCH_SINGLE_INSTANCE : i32 = 3;

        /// public static final [LAUNCH_SINGLE_TASK](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#LAUNCH_SINGLE_TASK)
        pub const LAUNCH_SINGLE_TASK : i32 = 2;

        /// public static final [LAUNCH_SINGLE_TOP](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#LAUNCH_SINGLE_TOP)
        pub const LAUNCH_SINGLE_TOP : i32 = 1;

        /// public static final [PERSIST_ACROSS_REBOOTS](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#PERSIST_ACROSS_REBOOTS)
        pub const PERSIST_ACROSS_REBOOTS : i32 = 2;

        /// public static final [PERSIST_NEVER](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#PERSIST_NEVER)
        pub const PERSIST_NEVER : i32 = 1;

        /// public static final [PERSIST_ROOT_ONLY](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#PERSIST_ROOT_ONLY)
        pub const PERSIST_ROOT_ONLY : i32 = 0;

        /// public static final [SCREEN_ORIENTATION_BEHIND](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#SCREEN_ORIENTATION_BEHIND)
        pub const SCREEN_ORIENTATION_BEHIND : i32 = 3;

        /// public static final [SCREEN_ORIENTATION_FULL_SENSOR](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#SCREEN_ORIENTATION_FULL_SENSOR)
        pub const SCREEN_ORIENTATION_FULL_SENSOR : i32 = 10;

        /// public static final [SCREEN_ORIENTATION_FULL_USER](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#SCREEN_ORIENTATION_FULL_USER)
        pub const SCREEN_ORIENTATION_FULL_USER : i32 = 13;

        /// public static final [SCREEN_ORIENTATION_LANDSCAPE](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#SCREEN_ORIENTATION_LANDSCAPE)
        pub const SCREEN_ORIENTATION_LANDSCAPE : i32 = 0;

        /// public static final [SCREEN_ORIENTATION_LOCKED](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#SCREEN_ORIENTATION_LOCKED)
        pub const SCREEN_ORIENTATION_LOCKED : i32 = 14;

        /// public static final [SCREEN_ORIENTATION_NOSENSOR](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#SCREEN_ORIENTATION_NOSENSOR)
        pub const SCREEN_ORIENTATION_NOSENSOR : i32 = 5;

        /// public static final [SCREEN_ORIENTATION_PORTRAIT](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#SCREEN_ORIENTATION_PORTRAIT)
        pub const SCREEN_ORIENTATION_PORTRAIT : i32 = 1;

        /// public static final [SCREEN_ORIENTATION_REVERSE_LANDSCAPE](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#SCREEN_ORIENTATION_REVERSE_LANDSCAPE)
        pub const SCREEN_ORIENTATION_REVERSE_LANDSCAPE : i32 = 8;

        /// public static final [SCREEN_ORIENTATION_REVERSE_PORTRAIT](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#SCREEN_ORIENTATION_REVERSE_PORTRAIT)
        pub const SCREEN_ORIENTATION_REVERSE_PORTRAIT : i32 = 9;

        /// public static final [SCREEN_ORIENTATION_SENSOR](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#SCREEN_ORIENTATION_SENSOR)
        pub const SCREEN_ORIENTATION_SENSOR : i32 = 4;

        /// public static final [SCREEN_ORIENTATION_SENSOR_LANDSCAPE](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#SCREEN_ORIENTATION_SENSOR_LANDSCAPE)
        pub const SCREEN_ORIENTATION_SENSOR_LANDSCAPE : i32 = 6;

        /// public static final [SCREEN_ORIENTATION_SENSOR_PORTRAIT](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#SCREEN_ORIENTATION_SENSOR_PORTRAIT)
        pub const SCREEN_ORIENTATION_SENSOR_PORTRAIT : i32 = 7;

        /// public static final [SCREEN_ORIENTATION_UNSPECIFIED](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#SCREEN_ORIENTATION_UNSPECIFIED)
        pub const SCREEN_ORIENTATION_UNSPECIFIED : i32 = -1;

        /// public static final [SCREEN_ORIENTATION_USER](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#SCREEN_ORIENTATION_USER)
        pub const SCREEN_ORIENTATION_USER : i32 = 2;

        /// public static final [SCREEN_ORIENTATION_USER_LANDSCAPE](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#SCREEN_ORIENTATION_USER_LANDSCAPE)
        pub const SCREEN_ORIENTATION_USER_LANDSCAPE : i32 = 11;

        /// public static final [SCREEN_ORIENTATION_USER_PORTRAIT](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#SCREEN_ORIENTATION_USER_PORTRAIT)
        pub const SCREEN_ORIENTATION_USER_PORTRAIT : i32 = 12;

        /// public static final [UIOPTION_SPLIT_ACTION_BAR_WHEN_NARROW](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#UIOPTION_SPLIT_ACTION_BAR_WHEN_NARROW)
        pub const UIOPTION_SPLIT_ACTION_BAR_WHEN_NARROW : i32 = 1;

        /// **get** public [colorMode](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#colorMode)
        pub fn colorMode<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ActivityInfo\0", "colorMode\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [colorMode](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#colorMode)
        pub fn set_colorMode<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ActivityInfo\0", "colorMode\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [configChanges](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#configChanges)
        pub fn configChanges<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ActivityInfo\0", "configChanges\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [configChanges](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#configChanges)
        pub fn set_configChanges<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ActivityInfo\0", "configChanges\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [documentLaunchMode](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#documentLaunchMode)
        pub fn documentLaunchMode<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ActivityInfo\0", "documentLaunchMode\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [documentLaunchMode](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#documentLaunchMode)
        pub fn set_documentLaunchMode<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ActivityInfo\0", "documentLaunchMode\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [flags](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#flags)
        pub fn flags<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ActivityInfo\0", "flags\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [flags](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#flags)
        pub fn set_flags<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ActivityInfo\0", "flags\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [launchMode](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#launchMode)
        pub fn launchMode<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ActivityInfo\0", "launchMode\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [launchMode](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#launchMode)
        pub fn set_launchMode<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ActivityInfo\0", "launchMode\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [maxRecents](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#maxRecents)
        pub fn maxRecents<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ActivityInfo\0", "maxRecents\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [maxRecents](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#maxRecents)
        pub fn set_maxRecents<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ActivityInfo\0", "maxRecents\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [parentActivityName](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#parentActivityName)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn parentActivityName<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ActivityInfo\0", "parentActivityName\0", "Ljava/lang/String;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [parentActivityName](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#parentActivityName)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn set_parentActivityName<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::java::lang::String>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ActivityInfo\0", "parentActivityName\0", "Ljava/lang/String;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [permission](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#permission)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn permission<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ActivityInfo\0", "permission\0", "Ljava/lang/String;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [permission](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#permission)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn set_permission<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::java::lang::String>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ActivityInfo\0", "permission\0", "Ljava/lang/String;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [persistableMode](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#persistableMode)
        pub fn persistableMode<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ActivityInfo\0", "persistableMode\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [persistableMode](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#persistableMode)
        pub fn set_persistableMode<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ActivityInfo\0", "persistableMode\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [screenOrientation](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#screenOrientation)
        pub fn screenOrientation<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ActivityInfo\0", "screenOrientation\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [screenOrientation](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#screenOrientation)
        pub fn set_screenOrientation<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ActivityInfo\0", "screenOrientation\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [softInputMode](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#softInputMode)
        pub fn softInputMode<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ActivityInfo\0", "softInputMode\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [softInputMode](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#softInputMode)
        pub fn set_softInputMode<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ActivityInfo\0", "softInputMode\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [targetActivity](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#targetActivity)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn targetActivity<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ActivityInfo\0", "targetActivity\0", "Ljava/lang/String;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [targetActivity](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#targetActivity)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn set_targetActivity<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::java::lang::String>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ActivityInfo\0", "targetActivity\0", "Ljava/lang/String;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [taskAffinity](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#taskAffinity)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn taskAffinity<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ActivityInfo\0", "taskAffinity\0", "Ljava/lang/String;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [taskAffinity](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#taskAffinity)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn set_taskAffinity<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::java::lang::String>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ActivityInfo\0", "taskAffinity\0", "Ljava/lang/String;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [theme](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#theme)
        pub fn theme<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ActivityInfo\0", "theme\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [theme](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#theme)
        pub fn set_theme<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ActivityInfo\0", "theme\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [uiOptions](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#uiOptions)
        pub fn uiOptions<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ActivityInfo\0", "uiOptions\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [uiOptions](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#uiOptions)
        pub fn set_uiOptions<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ActivityInfo\0", "uiOptions\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [windowLayout](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#windowLayout)
        ///
        /// Required feature: android-content-pm-ActivityInfo_WindowLayout
        #[cfg(any(feature = "all", feature = "android-content-pm-ActivityInfo_WindowLayout"))]
        pub fn windowLayout<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::pm::ActivityInfo_WindowLayout>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ActivityInfo\0", "windowLayout\0", "Landroid/content/pm/ActivityInfo$WindowLayout;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [windowLayout](https://developer.android.com/reference/android/content/pm/ActivityInfo.html#windowLayout)
        ///
        /// Required feature: android-content-pm-ActivityInfo_WindowLayout
        #[cfg(any(feature = "all", feature = "android-content-pm-ActivityInfo_WindowLayout"))]
        pub fn set_windowLayout<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::android::content::pm::ActivityInfo_WindowLayout>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/pm/ActivityInfo\0", "windowLayout\0", "Landroid/content/pm/ActivityInfo$WindowLayout;\0");
                env.set_object_field(class, field, value)
            }
        }
    }
}
