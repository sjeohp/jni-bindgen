// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-content-ContentProviderOperation"))]
__jni_bindgen! {
    /// public class [ContentProviderOperation](https://developer.android.com/reference/android/content/ContentProviderOperation.html)
    ///
    /// Required feature: android-content-ContentProviderOperation
    public class ContentProviderOperation ("android/content/ContentProviderOperation") extends crate::java::lang::Object, implements crate::android::os::Parcelable {

        // // Not emitting: Non-public method
        // /// [ContentProviderOperation](https://developer.android.com/reference/android/content/ContentProviderOperation.html#ContentProviderOperation(android.content.ContentProviderOperation.Builder))
        // ///
        // /// Required features: "android-content-ContentProviderOperation_Builder"
        // #[cfg(any(feature = "all", all(feature = "android-content-ContentProviderOperation_Builder")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentProviderOperation_Builder>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::content::ContentProviderOperation>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/content/ContentProviderOperation", java.flags == (empty), .name == "<init>", .descriptor == "(Landroid/content/ContentProviderOperation$Builder;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentProviderOperation\0", "<init>\0", "(Landroid/content/ContentProviderOperation$Builder;)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [writeToParcel](https://developer.android.com/reference/android/content/ContentProviderOperation.html#writeToParcel(android.os.Parcel,%20int))
        ///
        /// Required features: "android-os-Parcel"
        #[cfg(any(feature = "all", all(feature = "android-os-Parcel")))]
        pub fn writeToParcel<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Parcel>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentProviderOperation", java.flags == PUBLIC, .name == "writeToParcel", .descriptor == "(Landroid/os/Parcel;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentProviderOperation\0", "writeToParcel\0", "(Landroid/os/Parcel;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newInsert](https://developer.android.com/reference/android/content/ContentProviderOperation.html#newInsert(android.net.Uri))
        ///
        /// Required features: "android-content-ContentProviderOperation_Builder", "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentProviderOperation_Builder", feature = "android-net-Uri")))]
        pub fn newInsert<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::ContentProviderOperation_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentProviderOperation", java.flags == PUBLIC | STATIC, .name == "newInsert", .descriptor == "(Landroid/net/Uri;)Landroid/content/ContentProviderOperation$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/content/ContentProviderOperation\0", "newInsert\0", "(Landroid/net/Uri;)Landroid/content/ContentProviderOperation$Builder;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newUpdate](https://developer.android.com/reference/android/content/ContentProviderOperation.html#newUpdate(android.net.Uri))
        ///
        /// Required features: "android-content-ContentProviderOperation_Builder", "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentProviderOperation_Builder", feature = "android-net-Uri")))]
        pub fn newUpdate<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::ContentProviderOperation_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentProviderOperation", java.flags == PUBLIC | STATIC, .name == "newUpdate", .descriptor == "(Landroid/net/Uri;)Landroid/content/ContentProviderOperation$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/content/ContentProviderOperation\0", "newUpdate\0", "(Landroid/net/Uri;)Landroid/content/ContentProviderOperation$Builder;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newDelete](https://developer.android.com/reference/android/content/ContentProviderOperation.html#newDelete(android.net.Uri))
        ///
        /// Required features: "android-content-ContentProviderOperation_Builder", "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentProviderOperation_Builder", feature = "android-net-Uri")))]
        pub fn newDelete<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::ContentProviderOperation_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentProviderOperation", java.flags == PUBLIC | STATIC, .name == "newDelete", .descriptor == "(Landroid/net/Uri;)Landroid/content/ContentProviderOperation$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/content/ContentProviderOperation\0", "newDelete\0", "(Landroid/net/Uri;)Landroid/content/ContentProviderOperation$Builder;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newAssertQuery](https://developer.android.com/reference/android/content/ContentProviderOperation.html#newAssertQuery(android.net.Uri))
        ///
        /// Required features: "android-content-ContentProviderOperation_Builder", "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentProviderOperation_Builder", feature = "android-net-Uri")))]
        pub fn newAssertQuery<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::ContentProviderOperation_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentProviderOperation", java.flags == PUBLIC | STATIC, .name == "newAssertQuery", .descriptor == "(Landroid/net/Uri;)Landroid/content/ContentProviderOperation$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/content/ContentProviderOperation\0", "newAssertQuery\0", "(Landroid/net/Uri;)Landroid/content/ContentProviderOperation$Builder;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getUri](https://developer.android.com/reference/android/content/ContentProviderOperation.html#getUri())
        ///
        /// Required features: "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri")))]
        pub fn getUri<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentProviderOperation", java.flags == PUBLIC, .name == "getUri", .descriptor == "()Landroid/net/Uri;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentProviderOperation\0", "getUri\0", "()Landroid/net/Uri;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isYieldAllowed](https://developer.android.com/reference/android/content/ContentProviderOperation.html#isYieldAllowed())
        pub fn isYieldAllowed<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentProviderOperation", java.flags == PUBLIC, .name == "isYieldAllowed", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentProviderOperation\0", "isYieldAllowed\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isInsert](https://developer.android.com/reference/android/content/ContentProviderOperation.html#isInsert())
        pub fn isInsert<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentProviderOperation", java.flags == PUBLIC, .name == "isInsert", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentProviderOperation\0", "isInsert\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isDelete](https://developer.android.com/reference/android/content/ContentProviderOperation.html#isDelete())
        pub fn isDelete<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentProviderOperation", java.flags == PUBLIC, .name == "isDelete", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentProviderOperation\0", "isDelete\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isUpdate](https://developer.android.com/reference/android/content/ContentProviderOperation.html#isUpdate())
        pub fn isUpdate<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentProviderOperation", java.flags == PUBLIC, .name == "isUpdate", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentProviderOperation\0", "isUpdate\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isAssertQuery](https://developer.android.com/reference/android/content/ContentProviderOperation.html#isAssertQuery())
        pub fn isAssertQuery<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentProviderOperation", java.flags == PUBLIC, .name == "isAssertQuery", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentProviderOperation\0", "isAssertQuery\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isWriteOperation](https://developer.android.com/reference/android/content/ContentProviderOperation.html#isWriteOperation())
        pub fn isWriteOperation<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentProviderOperation", java.flags == PUBLIC, .name == "isWriteOperation", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentProviderOperation\0", "isWriteOperation\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isReadOperation](https://developer.android.com/reference/android/content/ContentProviderOperation.html#isReadOperation())
        pub fn isReadOperation<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentProviderOperation", java.flags == PUBLIC, .name == "isReadOperation", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentProviderOperation\0", "isReadOperation\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [apply](https://developer.android.com/reference/android/content/ContentProviderOperation.html#apply(android.content.ContentProvider,%20android.content.ContentProviderResult%5B%5D,%20int))
        ///
        /// Required features: "android-content-ContentProvider", "android-content-ContentProviderResult"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentProvider", feature = "android-content-ContentProviderResult")))]
        pub fn apply<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentProvider>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::android::content::ContentProviderResult, crate::java::lang::Throwable>>>, arg2: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::ContentProviderResult>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentProviderOperation", java.flags == PUBLIC, .name == "apply", .descriptor == "(Landroid/content/ContentProvider;[Landroid/content/ContentProviderResult;I)Landroid/content/ContentProviderResult;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentProviderOperation\0", "apply\0", "(Landroid/content/ContentProvider;[Landroid/content/ContentProviderResult;I)Landroid/content/ContentProviderResult;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [resolveValueBackReferences](https://developer.android.com/reference/android/content/ContentProviderOperation.html#resolveValueBackReferences(android.content.ContentProviderResult%5B%5D,%20int))
        ///
        /// Required features: "android-content-ContentProviderResult", "android-content-ContentValues"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentProviderResult", feature = "android-content-ContentValues")))]
        pub fn resolveValueBackReferences<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::android::content::ContentProviderResult, crate::java::lang::Throwable>>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::ContentValues>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentProviderOperation", java.flags == PUBLIC, .name == "resolveValueBackReferences", .descriptor == "([Landroid/content/ContentProviderResult;I)Landroid/content/ContentValues;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentProviderOperation\0", "resolveValueBackReferences\0", "([Landroid/content/ContentProviderResult;I)Landroid/content/ContentValues;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [resolveSelectionArgsBackReferences](https://developer.android.com/reference/android/content/ContentProviderOperation.html#resolveSelectionArgsBackReferences(android.content.ContentProviderResult%5B%5D,%20int))
        ///
        /// Required features: "android-content-ContentProviderResult", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentProviderResult", feature = "java-lang-String")))]
        pub fn resolveSelectionArgsBackReferences<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::android::content::ContentProviderResult, crate::java::lang::Throwable>>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentProviderOperation", java.flags == PUBLIC, .name == "resolveSelectionArgsBackReferences", .descriptor == "([Landroid/content/ContentProviderResult;I)[Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentProviderOperation\0", "resolveSelectionArgsBackReferences\0", "([Landroid/content/ContentProviderResult;I)[Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/android/content/ContentProviderOperation.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentProviderOperation", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentProviderOperation\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [describeContents](https://developer.android.com/reference/android/content/ContentProviderOperation.html#describeContents())
        pub fn describeContents<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentProviderOperation", java.flags == PUBLIC, .name == "describeContents", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentProviderOperation\0", "describeContents\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// **get** public static final [CREATOR](https://developer.android.com/reference/android/content/ContentProviderOperation.html#CREATOR)
        ///
        /// Required feature: android-os-Parcelable_Creator
        #[cfg(any(feature = "all", feature = "android-os-Parcelable_Creator"))]
        pub fn CREATOR<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Parcelable_Creator>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/content/ContentProviderOperation\0", "CREATOR\0", "Landroid/os/Parcelable$Creator;\0");
                env.get_static_object_field(class, field)
            }
        }
    }
}
