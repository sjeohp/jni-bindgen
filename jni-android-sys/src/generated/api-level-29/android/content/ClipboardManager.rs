// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-content-ClipboardManager"))]
__jni_bindgen! {
    /// public class [ClipboardManager](https://developer.android.com/reference/android/content/ClipboardManager.html)
    ///
    /// Required feature: android-content-ClipboardManager
    public class ClipboardManager ("android/content/ClipboardManager") extends crate::android::text::ClipboardManager {

        // // Not emitting: Non-public method
        // /// [ClipboardManager](https://developer.android.com/reference/android/content/ClipboardManager.html#ClipboardManager())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::content::ClipboardManager>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/content/ClipboardManager", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ClipboardManager\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [setPrimaryClip](https://developer.android.com/reference/android/content/ClipboardManager.html#setPrimaryClip(android.content.ClipData))
        ///
        /// Required features: "android-content-ClipData"
        #[cfg(any(feature = "all", all(feature = "android-content-ClipData")))]
        pub fn setPrimaryClip<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ClipData>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ClipboardManager", java.flags == PUBLIC, .name == "setPrimaryClip", .descriptor == "(Landroid/content/ClipData;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ClipboardManager\0", "setPrimaryClip\0", "(Landroid/content/ClipData;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clearPrimaryClip](https://developer.android.com/reference/android/content/ClipboardManager.html#clearPrimaryClip())
        pub fn clearPrimaryClip<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ClipboardManager", java.flags == PUBLIC, .name == "clearPrimaryClip", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ClipboardManager\0", "clearPrimaryClip\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPrimaryClip](https://developer.android.com/reference/android/content/ClipboardManager.html#getPrimaryClip())
        ///
        /// Required features: "android-content-ClipData"
        #[cfg(any(feature = "all", all(feature = "android-content-ClipData")))]
        pub fn getPrimaryClip<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::ClipData>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ClipboardManager", java.flags == PUBLIC, .name == "getPrimaryClip", .descriptor == "()Landroid/content/ClipData;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ClipboardManager\0", "getPrimaryClip\0", "()Landroid/content/ClipData;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPrimaryClipDescription](https://developer.android.com/reference/android/content/ClipboardManager.html#getPrimaryClipDescription())
        ///
        /// Required features: "android-content-ClipDescription"
        #[cfg(any(feature = "all", all(feature = "android-content-ClipDescription")))]
        pub fn getPrimaryClipDescription<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::ClipDescription>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ClipboardManager", java.flags == PUBLIC, .name == "getPrimaryClipDescription", .descriptor == "()Landroid/content/ClipDescription;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ClipboardManager\0", "getPrimaryClipDescription\0", "()Landroid/content/ClipDescription;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasPrimaryClip](https://developer.android.com/reference/android/content/ClipboardManager.html#hasPrimaryClip())
        pub fn hasPrimaryClip<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ClipboardManager", java.flags == PUBLIC, .name == "hasPrimaryClip", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ClipboardManager\0", "hasPrimaryClip\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addPrimaryClipChangedListener](https://developer.android.com/reference/android/content/ClipboardManager.html#addPrimaryClipChangedListener(android.content.ClipboardManager.OnPrimaryClipChangedListener))
        ///
        /// Required features: "android-content-ClipboardManager_OnPrimaryClipChangedListener"
        #[cfg(any(feature = "all", all(feature = "android-content-ClipboardManager_OnPrimaryClipChangedListener")))]
        pub fn addPrimaryClipChangedListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ClipboardManager_OnPrimaryClipChangedListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ClipboardManager", java.flags == PUBLIC, .name == "addPrimaryClipChangedListener", .descriptor == "(Landroid/content/ClipboardManager$OnPrimaryClipChangedListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ClipboardManager\0", "addPrimaryClipChangedListener\0", "(Landroid/content/ClipboardManager$OnPrimaryClipChangedListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removePrimaryClipChangedListener](https://developer.android.com/reference/android/content/ClipboardManager.html#removePrimaryClipChangedListener(android.content.ClipboardManager.OnPrimaryClipChangedListener))
        ///
        /// Required features: "android-content-ClipboardManager_OnPrimaryClipChangedListener"
        #[cfg(any(feature = "all", all(feature = "android-content-ClipboardManager_OnPrimaryClipChangedListener")))]
        pub fn removePrimaryClipChangedListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ClipboardManager_OnPrimaryClipChangedListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ClipboardManager", java.flags == PUBLIC, .name == "removePrimaryClipChangedListener", .descriptor == "(Landroid/content/ClipboardManager$OnPrimaryClipChangedListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ClipboardManager\0", "removePrimaryClipChangedListener\0", "(Landroid/content/ClipboardManager$OnPrimaryClipChangedListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getText](https://developer.android.com/reference/android/content/ClipboardManager.html#getText())
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        #[deprecated] pub fn getText<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::CharSequence>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ClipboardManager", java.flags == PUBLIC, .name == "getText", .descriptor == "()Ljava/lang/CharSequence;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ClipboardManager\0", "getText\0", "()Ljava/lang/CharSequence;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setText](https://developer.android.com/reference/android/content/ClipboardManager.html#setText(java.lang.CharSequence))
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        #[deprecated] pub fn setText<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ClipboardManager", java.flags == PUBLIC, .name == "setText", .descriptor == "(Ljava/lang/CharSequence;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ClipboardManager\0", "setText\0", "(Ljava/lang/CharSequence;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasText](https://developer.android.com/reference/android/content/ClipboardManager.html#hasText())
        #[deprecated] pub fn hasText<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ClipboardManager", java.flags == PUBLIC, .name == "hasText", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ClipboardManager\0", "hasText\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
