// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-content-AsyncQueryHandler_WorkerHandler"))]
__jni_bindgen! {
    /// public class [AsyncQueryHandler.WorkerHandler](https://developer.android.com/reference/android/content/AsyncQueryHandler.WorkerHandler.html)
    ///
    /// Required feature: android-content-AsyncQueryHandler_WorkerHandler
    public class AsyncQueryHandler_WorkerHandler ("android/content/AsyncQueryHandler$WorkerHandler") extends crate::android::os::Handler {

        /// [WorkerHandler](https://developer.android.com/reference/android/content/AsyncQueryHandler.WorkerHandler.html#WorkerHandler(android.content.AsyncQueryHandler,%20android.os.Looper))
        ///
        /// Required features: "android-content-AsyncQueryHandler", "android-os-Looper"
        #[cfg(any(feature = "all", all(feature = "android-content-AsyncQueryHandler", feature = "android-os-Looper")))]
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::AsyncQueryHandler>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Looper>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::content::AsyncQueryHandler_WorkerHandler>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/AsyncQueryHandler$WorkerHandler", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/content/AsyncQueryHandler;Landroid/os/Looper;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/AsyncQueryHandler$WorkerHandler\0", "<init>\0", "(Landroid/content/AsyncQueryHandler;Landroid/os/Looper;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [handleMessage](https://developer.android.com/reference/android/content/AsyncQueryHandler.WorkerHandler.html#handleMessage(android.os.Message))
        ///
        /// Required features: "android-os-Message"
        #[cfg(any(feature = "all", all(feature = "android-os-Message")))]
        pub fn handleMessage<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Message>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/AsyncQueryHandler$WorkerHandler", java.flags == PUBLIC, .name == "handleMessage", .descriptor == "(Landroid/os/Message;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/AsyncQueryHandler$WorkerHandler\0", "handleMessage\0", "(Landroid/os/Message;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public field
        // // Not emitting: Failed to mangle field name: this$N outer class pointer
        // pub fn get_"this$0"<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::AsyncQueryHandler>> { ... }
    }
}
