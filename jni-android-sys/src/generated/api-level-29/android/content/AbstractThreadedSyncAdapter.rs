// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-content-AbstractThreadedSyncAdapter"))]
__jni_bindgen! {
    /// public class [AbstractThreadedSyncAdapter](https://developer.android.com/reference/android/content/AbstractThreadedSyncAdapter.html)
    ///
    /// Required feature: android-content-AbstractThreadedSyncAdapter
    public class AbstractThreadedSyncAdapter ("android/content/AbstractThreadedSyncAdapter") extends crate::java::lang::Object {

        /// [AbstractThreadedSyncAdapter](https://developer.android.com/reference/android/content/AbstractThreadedSyncAdapter.html#AbstractThreadedSyncAdapter(android.content.Context,%20boolean))
        ///
        /// Required features: "android-content-Context"
        #[cfg(any(feature = "all", all(feature = "android-content-Context")))]
        pub fn new_Context_boolean<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::content::AbstractThreadedSyncAdapter>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/AbstractThreadedSyncAdapter", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/content/Context;Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/AbstractThreadedSyncAdapter\0", "<init>\0", "(Landroid/content/Context;Z)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [AbstractThreadedSyncAdapter](https://developer.android.com/reference/android/content/AbstractThreadedSyncAdapter.html#AbstractThreadedSyncAdapter(android.content.Context,%20boolean,%20boolean))
        ///
        /// Required features: "android-content-Context"
        #[cfg(any(feature = "all", all(feature = "android-content-Context")))]
        pub fn new_Context_boolean_boolean<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: bool, arg2: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::content::AbstractThreadedSyncAdapter>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/AbstractThreadedSyncAdapter", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/content/Context;ZZ)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/AbstractThreadedSyncAdapter\0", "<init>\0", "(Landroid/content/Context;ZZ)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getContext](https://developer.android.com/reference/android/content/AbstractThreadedSyncAdapter.html#getContext())
        ///
        /// Required features: "android-content-Context"
        #[cfg(any(feature = "all", all(feature = "android-content-Context")))]
        pub fn getContext<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::Context>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/AbstractThreadedSyncAdapter", java.flags == PUBLIC, .name == "getContext", .descriptor == "()Landroid/content/Context;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/AbstractThreadedSyncAdapter\0", "getContext\0", "()Landroid/content/Context;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSyncAdapterBinder](https://developer.android.com/reference/android/content/AbstractThreadedSyncAdapter.html#getSyncAdapterBinder())
        ///
        /// Required features: "android-os-IBinder"
        #[cfg(any(feature = "all", all(feature = "android-os-IBinder")))]
        pub fn getSyncAdapterBinder<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::IBinder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/AbstractThreadedSyncAdapter", java.flags == PUBLIC | FINAL, .name == "getSyncAdapterBinder", .descriptor == "()Landroid/os/IBinder;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/AbstractThreadedSyncAdapter\0", "getSyncAdapterBinder\0", "()Landroid/os/IBinder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onUnsyncableAccount](https://developer.android.com/reference/android/content/AbstractThreadedSyncAdapter.html#onUnsyncableAccount())
        pub fn onUnsyncableAccount<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/AbstractThreadedSyncAdapter", java.flags == PUBLIC, .name == "onUnsyncableAccount", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/AbstractThreadedSyncAdapter\0", "onUnsyncableAccount\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onPerformSync](https://developer.android.com/reference/android/content/AbstractThreadedSyncAdapter.html#onPerformSync(android.accounts.Account,%20android.os.Bundle,%20java.lang.String,%20android.content.ContentProviderClient,%20android.content.SyncResult))
        ///
        /// Required features: "android-accounts-Account", "android-content-ContentProviderClient", "android-content-SyncResult", "android-os-Bundle", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-accounts-Account", feature = "android-content-ContentProviderClient", feature = "android-content-SyncResult", feature = "android-os-Bundle", feature = "java-lang-String")))]
        pub fn onPerformSync<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accounts::Account>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentProviderClient>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::SyncResult>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/AbstractThreadedSyncAdapter", java.flags == PUBLIC | ABSTRACT, .name == "onPerformSync", .descriptor == "(Landroid/accounts/Account;Landroid/os/Bundle;Ljava/lang/String;Landroid/content/ContentProviderClient;Landroid/content/SyncResult;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/AbstractThreadedSyncAdapter\0", "onPerformSync\0", "(Landroid/accounts/Account;Landroid/os/Bundle;Ljava/lang/String;Landroid/content/ContentProviderClient;Landroid/content/SyncResult;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onSecurityException](https://developer.android.com/reference/android/content/AbstractThreadedSyncAdapter.html#onSecurityException(android.accounts.Account,%20android.os.Bundle,%20java.lang.String,%20android.content.SyncResult))
        ///
        /// Required features: "android-accounts-Account", "android-content-SyncResult", "android-os-Bundle", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-accounts-Account", feature = "android-content-SyncResult", feature = "android-os-Bundle", feature = "java-lang-String")))]
        pub fn onSecurityException<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accounts::Account>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::SyncResult>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/AbstractThreadedSyncAdapter", java.flags == PUBLIC, .name == "onSecurityException", .descriptor == "(Landroid/accounts/Account;Landroid/os/Bundle;Ljava/lang/String;Landroid/content/SyncResult;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/AbstractThreadedSyncAdapter\0", "onSecurityException\0", "(Landroid/accounts/Account;Landroid/os/Bundle;Ljava/lang/String;Landroid/content/SyncResult;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onSyncCanceled](https://developer.android.com/reference/android/content/AbstractThreadedSyncAdapter.html#onSyncCanceled())
        pub fn onSyncCanceled<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/AbstractThreadedSyncAdapter", java.flags == PUBLIC, .name == "onSyncCanceled", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/AbstractThreadedSyncAdapter\0", "onSyncCanceled\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onSyncCanceled](https://developer.android.com/reference/android/content/AbstractThreadedSyncAdapter.html#onSyncCanceled(java.lang.Thread))
        ///
        /// Required features: "java-lang-Thread"
        #[cfg(any(feature = "all", all(feature = "java-lang-Thread")))]
        pub fn onSyncCanceled_Thread<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Thread>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/AbstractThreadedSyncAdapter", java.flags == PUBLIC, .name == "onSyncCanceled", .descriptor == "(Ljava/lang/Thread;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/AbstractThreadedSyncAdapter\0", "onSyncCanceled\0", "(Ljava/lang/Thread;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [LOG_SYNC_DETAILS](https://developer.android.com/reference/android/content/AbstractThreadedSyncAdapter.html#LOG_SYNC_DETAILS)
        #[deprecated] pub const LOG_SYNC_DETAILS : i32 = 2743;
    }
}
