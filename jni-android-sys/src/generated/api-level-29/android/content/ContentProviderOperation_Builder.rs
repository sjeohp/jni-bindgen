// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-content-ContentProviderOperation_Builder"))]
__jni_bindgen! {
    /// public class [ContentProviderOperation.Builder](https://developer.android.com/reference/android/content/ContentProviderOperation.Builder.html)
    ///
    /// Required feature: android-content-ContentProviderOperation_Builder
    public class ContentProviderOperation_Builder ("android/content/ContentProviderOperation$Builder") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [Builder](https://developer.android.com/reference/android/content/ContentProviderOperation.Builder.html#Builder(int,%20android.net.Uri))
        // ///
        // /// Required features: "android-net-Uri"
        // #[cfg(any(feature = "all", all(feature = "android-net-Uri")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::content::ContentProviderOperation_Builder>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/content/ContentProviderOperation$Builder", java.flags == (empty), .name == "<init>", .descriptor == "(ILandroid/net/Uri;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentProviderOperation$Builder\0", "<init>\0", "(ILandroid/net/Uri;)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [build](https://developer.android.com/reference/android/content/ContentProviderOperation.Builder.html#build())
        ///
        /// Required features: "android-content-ContentProviderOperation"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentProviderOperation")))]
        pub fn build<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::ContentProviderOperation>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentProviderOperation$Builder", java.flags == PUBLIC, .name == "build", .descriptor == "()Landroid/content/ContentProviderOperation;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentProviderOperation$Builder\0", "build\0", "()Landroid/content/ContentProviderOperation;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [withValueBackReferences](https://developer.android.com/reference/android/content/ContentProviderOperation.Builder.html#withValueBackReferences(android.content.ContentValues))
        ///
        /// Required features: "android-content-ContentProviderOperation_Builder", "android-content-ContentValues"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentProviderOperation_Builder", feature = "android-content-ContentValues")))]
        pub fn withValueBackReferences<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentValues>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::ContentProviderOperation_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentProviderOperation$Builder", java.flags == PUBLIC, .name == "withValueBackReferences", .descriptor == "(Landroid/content/ContentValues;)Landroid/content/ContentProviderOperation$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentProviderOperation$Builder\0", "withValueBackReferences\0", "(Landroid/content/ContentValues;)Landroid/content/ContentProviderOperation$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [withValueBackReference](https://developer.android.com/reference/android/content/ContentProviderOperation.Builder.html#withValueBackReference(java.lang.String,%20int))
        ///
        /// Required features: "android-content-ContentProviderOperation_Builder", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentProviderOperation_Builder", feature = "java-lang-String")))]
        pub fn withValueBackReference<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::ContentProviderOperation_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentProviderOperation$Builder", java.flags == PUBLIC, .name == "withValueBackReference", .descriptor == "(Ljava/lang/String;I)Landroid/content/ContentProviderOperation$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentProviderOperation$Builder\0", "withValueBackReference\0", "(Ljava/lang/String;I)Landroid/content/ContentProviderOperation$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [withSelectionBackReference](https://developer.android.com/reference/android/content/ContentProviderOperation.Builder.html#withSelectionBackReference(int,%20int))
        ///
        /// Required features: "android-content-ContentProviderOperation_Builder"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentProviderOperation_Builder")))]
        pub fn withSelectionBackReference<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::ContentProviderOperation_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentProviderOperation$Builder", java.flags == PUBLIC, .name == "withSelectionBackReference", .descriptor == "(II)Landroid/content/ContentProviderOperation$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentProviderOperation$Builder\0", "withSelectionBackReference\0", "(II)Landroid/content/ContentProviderOperation$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [withValues](https://developer.android.com/reference/android/content/ContentProviderOperation.Builder.html#withValues(android.content.ContentValues))
        ///
        /// Required features: "android-content-ContentProviderOperation_Builder", "android-content-ContentValues"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentProviderOperation_Builder", feature = "android-content-ContentValues")))]
        pub fn withValues<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentValues>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::ContentProviderOperation_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentProviderOperation$Builder", java.flags == PUBLIC, .name == "withValues", .descriptor == "(Landroid/content/ContentValues;)Landroid/content/ContentProviderOperation$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentProviderOperation$Builder\0", "withValues\0", "(Landroid/content/ContentValues;)Landroid/content/ContentProviderOperation$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [withValue](https://developer.android.com/reference/android/content/ContentProviderOperation.Builder.html#withValue(java.lang.String,%20java.lang.Object))
        ///
        /// Required features: "android-content-ContentProviderOperation_Builder", "java-lang-Object", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentProviderOperation_Builder", feature = "java-lang-Object", feature = "java-lang-String")))]
        pub fn withValue<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::ContentProviderOperation_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentProviderOperation$Builder", java.flags == PUBLIC, .name == "withValue", .descriptor == "(Ljava/lang/String;Ljava/lang/Object;)Landroid/content/ContentProviderOperation$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentProviderOperation$Builder\0", "withValue\0", "(Ljava/lang/String;Ljava/lang/Object;)Landroid/content/ContentProviderOperation$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [withSelection](https://developer.android.com/reference/android/content/ContentProviderOperation.Builder.html#withSelection(java.lang.String,%20java.lang.String%5B%5D))
        ///
        /// Required features: "android-content-ContentProviderOperation_Builder", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentProviderOperation_Builder", feature = "java-lang-String")))]
        pub fn withSelection<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::ContentProviderOperation_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentProviderOperation$Builder", java.flags == PUBLIC, .name == "withSelection", .descriptor == "(Ljava/lang/String;[Ljava/lang/String;)Landroid/content/ContentProviderOperation$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentProviderOperation$Builder\0", "withSelection\0", "(Ljava/lang/String;[Ljava/lang/String;)Landroid/content/ContentProviderOperation$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [withExpectedCount](https://developer.android.com/reference/android/content/ContentProviderOperation.Builder.html#withExpectedCount(int))
        ///
        /// Required features: "android-content-ContentProviderOperation_Builder"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentProviderOperation_Builder")))]
        pub fn withExpectedCount<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::ContentProviderOperation_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentProviderOperation$Builder", java.flags == PUBLIC, .name == "withExpectedCount", .descriptor == "(I)Landroid/content/ContentProviderOperation$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentProviderOperation$Builder\0", "withExpectedCount\0", "(I)Landroid/content/ContentProviderOperation$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [withYieldAllowed](https://developer.android.com/reference/android/content/ContentProviderOperation.Builder.html#withYieldAllowed(boolean))
        ///
        /// Required features: "android-content-ContentProviderOperation_Builder"
        #[cfg(any(feature = "all", all(feature = "android-content-ContentProviderOperation_Builder")))]
        pub fn withYieldAllowed<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::ContentProviderOperation_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentProviderOperation$Builder", java.flags == PUBLIC, .name == "withYieldAllowed", .descriptor == "(Z)Landroid/content/ContentProviderOperation$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentProviderOperation$Builder\0", "withYieldAllowed\0", "(Z)Landroid/content/ContentProviderOperation$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
