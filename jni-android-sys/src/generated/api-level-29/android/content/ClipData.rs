// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-content-ClipData"))]
__jni_bindgen! {
    /// public class [ClipData](https://developer.android.com/reference/android/content/ClipData.html)
    ///
    /// Required feature: android-content-ClipData
    public class ClipData ("android/content/ClipData") extends crate::java::lang::Object, implements crate::android::os::Parcelable {

        /// [ClipData](https://developer.android.com/reference/android/content/ClipData.html#ClipData(java.lang.CharSequence,%20java.lang.String%5B%5D,%20android.content.ClipData.Item))
        ///
        /// Required features: "android-content-ClipData_Item", "java-lang-CharSequence", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ClipData_Item", feature = "java-lang-CharSequence", feature = "java-lang-String")))]
        pub fn new_CharSequence_String_array_Item<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ClipData_Item>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::content::ClipData>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ClipData", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/lang/CharSequence;[Ljava/lang/String;Landroid/content/ClipData$Item;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ClipData\0", "<init>\0", "(Ljava/lang/CharSequence;[Ljava/lang/String;Landroid/content/ClipData$Item;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ClipData](https://developer.android.com/reference/android/content/ClipData.html#ClipData(android.content.ClipDescription,%20android.content.ClipData.Item))
        ///
        /// Required features: "android-content-ClipData_Item", "android-content-ClipDescription"
        #[cfg(any(feature = "all", all(feature = "android-content-ClipData_Item", feature = "android-content-ClipDescription")))]
        pub fn new_ClipDescription_Item<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ClipDescription>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ClipData_Item>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::content::ClipData>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ClipData", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/content/ClipDescription;Landroid/content/ClipData$Item;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ClipData\0", "<init>\0", "(Landroid/content/ClipDescription;Landroid/content/ClipData$Item;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ClipData](https://developer.android.com/reference/android/content/ClipData.html#ClipData(android.content.ClipData))
        ///
        /// Required features: "android-content-ClipData"
        #[cfg(any(feature = "all", all(feature = "android-content-ClipData")))]
        pub fn new_ClipData<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ClipData>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::content::ClipData>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ClipData", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/content/ClipData;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ClipData\0", "<init>\0", "(Landroid/content/ClipData;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newPlainText](https://developer.android.com/reference/android/content/ClipData.html#newPlainText(java.lang.CharSequence,%20java.lang.CharSequence))
        ///
        /// Required features: "android-content-ClipData", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-content-ClipData", feature = "java-lang-CharSequence")))]
        pub fn newPlainText<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::ClipData>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ClipData", java.flags == PUBLIC | STATIC, .name == "newPlainText", .descriptor == "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Landroid/content/ClipData;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/content/ClipData\0", "newPlainText\0", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Landroid/content/ClipData;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newHtmlText](https://developer.android.com/reference/android/content/ClipData.html#newHtmlText(java.lang.CharSequence,%20java.lang.CharSequence,%20java.lang.String))
        ///
        /// Required features: "android-content-ClipData", "java-lang-CharSequence", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ClipData", feature = "java-lang-CharSequence", feature = "java-lang-String")))]
        pub fn newHtmlText<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::ClipData>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ClipData", java.flags == PUBLIC | STATIC, .name == "newHtmlText", .descriptor == "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/String;)Landroid/content/ClipData;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/content/ClipData\0", "newHtmlText\0", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/String;)Landroid/content/ClipData;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newIntent](https://developer.android.com/reference/android/content/ClipData.html#newIntent(java.lang.CharSequence,%20android.content.Intent))
        ///
        /// Required features: "android-content-ClipData", "android-content-Intent", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-content-ClipData", feature = "android-content-Intent", feature = "java-lang-CharSequence")))]
        pub fn newIntent<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::ClipData>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ClipData", java.flags == PUBLIC | STATIC, .name == "newIntent", .descriptor == "(Ljava/lang/CharSequence;Landroid/content/Intent;)Landroid/content/ClipData;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/content/ClipData\0", "newIntent\0", "(Ljava/lang/CharSequence;Landroid/content/Intent;)Landroid/content/ClipData;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newUri](https://developer.android.com/reference/android/content/ClipData.html#newUri(android.content.ContentResolver,%20java.lang.CharSequence,%20android.net.Uri))
        ///
        /// Required features: "android-content-ClipData", "android-content-ContentResolver", "android-net-Uri", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-content-ClipData", feature = "android-content-ContentResolver", feature = "android-net-Uri", feature = "java-lang-CharSequence")))]
        pub fn newUri<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentResolver>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::ClipData>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ClipData", java.flags == PUBLIC | STATIC, .name == "newUri", .descriptor == "(Landroid/content/ContentResolver;Ljava/lang/CharSequence;Landroid/net/Uri;)Landroid/content/ClipData;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/content/ClipData\0", "newUri\0", "(Landroid/content/ContentResolver;Ljava/lang/CharSequence;Landroid/net/Uri;)Landroid/content/ClipData;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newRawUri](https://developer.android.com/reference/android/content/ClipData.html#newRawUri(java.lang.CharSequence,%20android.net.Uri))
        ///
        /// Required features: "android-content-ClipData", "android-net-Uri", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-content-ClipData", feature = "android-net-Uri", feature = "java-lang-CharSequence")))]
        pub fn newRawUri<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::ClipData>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ClipData", java.flags == PUBLIC | STATIC, .name == "newRawUri", .descriptor == "(Ljava/lang/CharSequence;Landroid/net/Uri;)Landroid/content/ClipData;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/content/ClipData\0", "newRawUri\0", "(Ljava/lang/CharSequence;Landroid/net/Uri;)Landroid/content/ClipData;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDescription](https://developer.android.com/reference/android/content/ClipData.html#getDescription())
        ///
        /// Required features: "android-content-ClipDescription"
        #[cfg(any(feature = "all", all(feature = "android-content-ClipDescription")))]
        pub fn getDescription<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::ClipDescription>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ClipData", java.flags == PUBLIC, .name == "getDescription", .descriptor == "()Landroid/content/ClipDescription;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ClipData\0", "getDescription\0", "()Landroid/content/ClipDescription;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addItem](https://developer.android.com/reference/android/content/ClipData.html#addItem(android.content.ClipData.Item))
        ///
        /// Required features: "android-content-ClipData_Item"
        #[cfg(any(feature = "all", all(feature = "android-content-ClipData_Item")))]
        pub fn addItem_Item<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ClipData_Item>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ClipData", java.flags == PUBLIC, .name == "addItem", .descriptor == "(Landroid/content/ClipData$Item;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ClipData\0", "addItem\0", "(Landroid/content/ClipData$Item;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addItem](https://developer.android.com/reference/android/content/ClipData.html#addItem(android.content.ContentResolver,%20android.content.ClipData.Item))
        ///
        /// Required features: "android-content-ClipData_Item", "android-content-ContentResolver"
        #[cfg(any(feature = "all", all(feature = "android-content-ClipData_Item", feature = "android-content-ContentResolver")))]
        pub fn addItem_ContentResolver_Item<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ContentResolver>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ClipData_Item>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ClipData", java.flags == PUBLIC, .name == "addItem", .descriptor == "(Landroid/content/ContentResolver;Landroid/content/ClipData$Item;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ClipData\0", "addItem\0", "(Landroid/content/ContentResolver;Landroid/content/ClipData$Item;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getItemCount](https://developer.android.com/reference/android/content/ClipData.html#getItemCount())
        pub fn getItemCount<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ClipData", java.flags == PUBLIC, .name == "getItemCount", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ClipData\0", "getItemCount\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getItemAt](https://developer.android.com/reference/android/content/ClipData.html#getItemAt(int))
        ///
        /// Required features: "android-content-ClipData_Item"
        #[cfg(any(feature = "all", all(feature = "android-content-ClipData_Item")))]
        pub fn getItemAt<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::ClipData_Item>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ClipData", java.flags == PUBLIC, .name == "getItemAt", .descriptor == "(I)Landroid/content/ClipData$Item;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ClipData\0", "getItemAt\0", "(I)Landroid/content/ClipData$Item;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/android/content/ClipData.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ClipData", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ClipData\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [describeContents](https://developer.android.com/reference/android/content/ClipData.html#describeContents())
        pub fn describeContents<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ClipData", java.flags == PUBLIC, .name == "describeContents", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ClipData\0", "describeContents\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [writeToParcel](https://developer.android.com/reference/android/content/ClipData.html#writeToParcel(android.os.Parcel,%20int))
        ///
        /// Required features: "android-os-Parcel"
        #[cfg(any(feature = "all", all(feature = "android-os-Parcel")))]
        pub fn writeToParcel<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Parcel>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ClipData", java.flags == PUBLIC, .name == "writeToParcel", .descriptor == "(Landroid/os/Parcel;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ClipData\0", "writeToParcel\0", "(Landroid/os/Parcel;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// **get** public static final [CREATOR](https://developer.android.com/reference/android/content/ClipData.html#CREATOR)
        ///
        /// Required feature: android-os-Parcelable_Creator
        #[cfg(any(feature = "all", feature = "android-os-Parcelable_Creator"))]
        pub fn CREATOR<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Parcelable_Creator>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/content/ClipData\0", "CREATOR\0", "Landroid/os/Parcelable$Creator;\0");
                env.get_static_object_field(class, field)
            }
        }
    }
}
