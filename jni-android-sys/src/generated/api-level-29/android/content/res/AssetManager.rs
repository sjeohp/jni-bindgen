// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-content-res-AssetManager"))]
__jni_bindgen! {
    /// public final class [AssetManager](https://developer.android.com/reference/android/content/res/AssetManager.html)
    ///
    /// Required feature: android-content-res-AssetManager
    public final class AssetManager ("android/content/res/AssetManager") extends crate::java::lang::Object, implements crate::java::lang::AutoCloseable {

        // // Not emitting: Non-public method
        // /// [AssetManager](https://developer.android.com/reference/android/content/res/AssetManager.html#AssetManager())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::content::res::AssetManager>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/content/res/AssetManager", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/AssetManager\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [close](https://developer.android.com/reference/android/content/res/AssetManager.html#close())
        pub fn close<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/AssetManager", java.flags == PUBLIC, .name == "close", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/AssetManager\0", "close\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [open](https://developer.android.com/reference/android/content/res/AssetManager.html#open(java.lang.String))
        ///
        /// Required features: "java-io-InputStream", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-io-InputStream", feature = "java-lang-String")))]
        pub fn open_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::io::InputStream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/AssetManager", java.flags == PUBLIC, .name == "open", .descriptor == "(Ljava/lang/String;)Ljava/io/InputStream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/AssetManager\0", "open\0", "(Ljava/lang/String;)Ljava/io/InputStream;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [open](https://developer.android.com/reference/android/content/res/AssetManager.html#open(java.lang.String,%20int))
        ///
        /// Required features: "java-io-InputStream", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-io-InputStream", feature = "java-lang-String")))]
        pub fn open_String_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::io::InputStream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/AssetManager", java.flags == PUBLIC, .name == "open", .descriptor == "(Ljava/lang/String;I)Ljava/io/InputStream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/AssetManager\0", "open\0", "(Ljava/lang/String;I)Ljava/io/InputStream;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [openFd](https://developer.android.com/reference/android/content/res/AssetManager.html#openFd(java.lang.String))
        ///
        /// Required features: "android-content-res-AssetFileDescriptor", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-res-AssetFileDescriptor", feature = "java-lang-String")))]
        pub fn openFd<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::res::AssetFileDescriptor>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/AssetManager", java.flags == PUBLIC, .name == "openFd", .descriptor == "(Ljava/lang/String;)Landroid/content/res/AssetFileDescriptor;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/AssetManager\0", "openFd\0", "(Ljava/lang/String;)Landroid/content/res/AssetFileDescriptor;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [list](https://developer.android.com/reference/android/content/res/AssetManager.html#list(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn list<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/AssetManager", java.flags == PUBLIC, .name == "list", .descriptor == "(Ljava/lang/String;)[Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/AssetManager\0", "list\0", "(Ljava/lang/String;)[Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [openNonAssetFd](https://developer.android.com/reference/android/content/res/AssetManager.html#openNonAssetFd(java.lang.String))
        ///
        /// Required features: "android-content-res-AssetFileDescriptor", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-res-AssetFileDescriptor", feature = "java-lang-String")))]
        pub fn openNonAssetFd_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::res::AssetFileDescriptor>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/AssetManager", java.flags == PUBLIC, .name == "openNonAssetFd", .descriptor == "(Ljava/lang/String;)Landroid/content/res/AssetFileDescriptor;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/AssetManager\0", "openNonAssetFd\0", "(Ljava/lang/String;)Landroid/content/res/AssetFileDescriptor;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [openNonAssetFd](https://developer.android.com/reference/android/content/res/AssetManager.html#openNonAssetFd(int,%20java.lang.String))
        ///
        /// Required features: "android-content-res-AssetFileDescriptor", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-res-AssetFileDescriptor", feature = "java-lang-String")))]
        pub fn openNonAssetFd_int_String<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::res::AssetFileDescriptor>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/AssetManager", java.flags == PUBLIC, .name == "openNonAssetFd", .descriptor == "(ILjava/lang/String;)Landroid/content/res/AssetFileDescriptor;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/AssetManager\0", "openNonAssetFd\0", "(ILjava/lang/String;)Landroid/content/res/AssetFileDescriptor;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [openXmlResourceParser](https://developer.android.com/reference/android/content/res/AssetManager.html#openXmlResourceParser(java.lang.String))
        ///
        /// Required features: "android-content-res-XmlResourceParser", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-res-XmlResourceParser", feature = "java-lang-String")))]
        pub fn openXmlResourceParser_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::res::XmlResourceParser>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/AssetManager", java.flags == PUBLIC, .name == "openXmlResourceParser", .descriptor == "(Ljava/lang/String;)Landroid/content/res/XmlResourceParser;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/AssetManager\0", "openXmlResourceParser\0", "(Ljava/lang/String;)Landroid/content/res/XmlResourceParser;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [openXmlResourceParser](https://developer.android.com/reference/android/content/res/AssetManager.html#openXmlResourceParser(int,%20java.lang.String))
        ///
        /// Required features: "android-content-res-XmlResourceParser", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-res-XmlResourceParser", feature = "java-lang-String")))]
        pub fn openXmlResourceParser_int_String<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::res::XmlResourceParser>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/AssetManager", java.flags == PUBLIC, .name == "openXmlResourceParser", .descriptor == "(ILjava/lang/String;)Landroid/content/res/XmlResourceParser;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/AssetManager\0", "openXmlResourceParser\0", "(ILjava/lang/String;)Landroid/content/res/XmlResourceParser;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [finalize](https://developer.android.com/reference/android/content/res/AssetManager.html#finalize())
        // fn finalize<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/content/res/AssetManager", java.flags == PROTECTED, .name == "finalize", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/AssetManager\0", "finalize\0", "()V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getLocales](https://developer.android.com/reference/android/content/res/AssetManager.html#getLocales())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getLocales<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/AssetManager", java.flags == PUBLIC, .name == "getLocales", .descriptor == "()[Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/AssetManager\0", "getLocales\0", "()[Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [ACCESS_BUFFER](https://developer.android.com/reference/android/content/res/AssetManager.html#ACCESS_BUFFER)
        pub const ACCESS_BUFFER : i32 = 3;

        /// public static final [ACCESS_RANDOM](https://developer.android.com/reference/android/content/res/AssetManager.html#ACCESS_RANDOM)
        pub const ACCESS_RANDOM : i32 = 1;

        /// public static final [ACCESS_STREAMING](https://developer.android.com/reference/android/content/res/AssetManager.html#ACCESS_STREAMING)
        pub const ACCESS_STREAMING : i32 = 2;

        /// public static final [ACCESS_UNKNOWN](https://developer.android.com/reference/android/content/res/AssetManager.html#ACCESS_UNKNOWN)
        pub const ACCESS_UNKNOWN : i32 = 0;
    }
}
