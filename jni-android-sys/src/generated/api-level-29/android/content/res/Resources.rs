// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-content-res-Resources"))]
__jni_bindgen! {
    /// public class [Resources](https://developer.android.com/reference/android/content/res/Resources.html)
    ///
    /// Required feature: android-content-res-Resources
    public class Resources ("android/content/res/Resources") extends crate::java::lang::Object {

        /// [Resources](https://developer.android.com/reference/android/content/res/Resources.html#Resources(android.content.res.AssetManager,%20android.util.DisplayMetrics,%20android.content.res.Configuration))
        ///
        /// Required features: "android-content-res-AssetManager", "android-content-res-Configuration", "android-util-DisplayMetrics"
        #[cfg(any(feature = "all", all(feature = "android-content-res-AssetManager", feature = "android-content-res-Configuration", feature = "android-util-DisplayMetrics")))]
        #[deprecated] pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::res::AssetManager>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::util::DisplayMetrics>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::res::Configuration>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::content::res::Resources>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Resources", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/content/res/AssetManager;Landroid/util/DisplayMetrics;Landroid/content/res/Configuration;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Resources\0", "<init>\0", "(Landroid/content/res/AssetManager;Landroid/util/DisplayMetrics;Landroid/content/res/Configuration;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSystem](https://developer.android.com/reference/android/content/res/Resources.html#getSystem())
        ///
        /// Required features: "android-content-res-Resources"
        #[cfg(any(feature = "all", all(feature = "android-content-res-Resources")))]
        pub fn getSystem<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::res::Resources>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Resources", java.flags == PUBLIC | STATIC, .name == "getSystem", .descriptor == "()Landroid/content/res/Resources;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/content/res/Resources\0", "getSystem\0", "()Landroid/content/res/Resources;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getText](https://developer.android.com/reference/android/content/res/Resources.html#getText(int))
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn getText_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::CharSequence>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Resources", java.flags == PUBLIC, .name == "getText", .descriptor == "(I)Ljava/lang/CharSequence;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Resources\0", "getText\0", "(I)Ljava/lang/CharSequence;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFont](https://developer.android.com/reference/android/content/res/Resources.html#getFont(int))
        ///
        /// Required features: "android-graphics-Typeface"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Typeface")))]
        pub fn getFont<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Typeface>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Resources", java.flags == PUBLIC, .name == "getFont", .descriptor == "(I)Landroid/graphics/Typeface;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Resources\0", "getFont\0", "(I)Landroid/graphics/Typeface;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getQuantityText](https://developer.android.com/reference/android/content/res/Resources.html#getQuantityText(int,%20int))
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn getQuantityText<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::CharSequence>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Resources", java.flags == PUBLIC, .name == "getQuantityText", .descriptor == "(II)Ljava/lang/CharSequence;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Resources\0", "getQuantityText\0", "(II)Ljava/lang/CharSequence;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getString](https://developer.android.com/reference/android/content/res/Resources.html#getString(int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getString_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Resources", java.flags == PUBLIC, .name == "getString", .descriptor == "(I)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Resources\0", "getString\0", "(I)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getString](https://developer.android.com/reference/android/content/res/Resources.html#getString(int,%20java.lang.Object...))
        ///
        /// Required features: "java-lang-Object", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-lang-String")))]
        pub fn getString_int_Object_array<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::Object, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Resources", java.flags == PUBLIC | VARARGS, .name == "getString", .descriptor == "(I[Ljava/lang/Object;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Resources\0", "getString\0", "(I[Ljava/lang/Object;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getQuantityString](https://developer.android.com/reference/android/content/res/Resources.html#getQuantityString(int,%20int,%20java.lang.Object...))
        ///
        /// Required features: "java-lang-Object", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-lang-String")))]
        pub fn getQuantityString_int_int_Object_array<'env>(&'env self, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::Object, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Resources", java.flags == PUBLIC | VARARGS, .name == "getQuantityString", .descriptor == "(II[Ljava/lang/Object;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Resources\0", "getQuantityString\0", "(II[Ljava/lang/Object;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getQuantityString](https://developer.android.com/reference/android/content/res/Resources.html#getQuantityString(int,%20int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getQuantityString_int_int<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Resources", java.flags == PUBLIC, .name == "getQuantityString", .descriptor == "(II)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Resources\0", "getQuantityString\0", "(II)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getText](https://developer.android.com/reference/android/content/res/Resources.html#getText(int,%20java.lang.CharSequence))
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn getText_int_CharSequence<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::CharSequence>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Resources", java.flags == PUBLIC, .name == "getText", .descriptor == "(ILjava/lang/CharSequence;)Ljava/lang/CharSequence;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Resources\0", "getText\0", "(ILjava/lang/CharSequence;)Ljava/lang/CharSequence;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTextArray](https://developer.android.com/reference/android/content/res/Resources.html#getTextArray(int))
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn getTextArray<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::CharSequence, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Resources", java.flags == PUBLIC, .name == "getTextArray", .descriptor == "(I)[Ljava/lang/CharSequence;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Resources\0", "getTextArray\0", "(I)[Ljava/lang/CharSequence;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getStringArray](https://developer.android.com/reference/android/content/res/Resources.html#getStringArray(int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getStringArray<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Resources", java.flags == PUBLIC, .name == "getStringArray", .descriptor == "(I)[Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Resources\0", "getStringArray\0", "(I)[Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getIntArray](https://developer.android.com/reference/android/content/res/Resources.html#getIntArray(int))
        pub fn getIntArray<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::IntArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Resources", java.flags == PUBLIC, .name == "getIntArray", .descriptor == "(I)[I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Resources\0", "getIntArray\0", "(I)[I\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [obtainTypedArray](https://developer.android.com/reference/android/content/res/Resources.html#obtainTypedArray(int))
        ///
        /// Required features: "android-content-res-TypedArray"
        #[cfg(any(feature = "all", all(feature = "android-content-res-TypedArray")))]
        pub fn obtainTypedArray<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::res::TypedArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Resources", java.flags == PUBLIC, .name == "obtainTypedArray", .descriptor == "(I)Landroid/content/res/TypedArray;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Resources\0", "obtainTypedArray\0", "(I)Landroid/content/res/TypedArray;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDimension](https://developer.android.com/reference/android/content/res/Resources.html#getDimension(int))
        pub fn getDimension<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Resources", java.flags == PUBLIC, .name == "getDimension", .descriptor == "(I)F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Resources\0", "getDimension\0", "(I)F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDimensionPixelOffset](https://developer.android.com/reference/android/content/res/Resources.html#getDimensionPixelOffset(int))
        pub fn getDimensionPixelOffset<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Resources", java.flags == PUBLIC, .name == "getDimensionPixelOffset", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Resources\0", "getDimensionPixelOffset\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDimensionPixelSize](https://developer.android.com/reference/android/content/res/Resources.html#getDimensionPixelSize(int))
        pub fn getDimensionPixelSize<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Resources", java.flags == PUBLIC, .name == "getDimensionPixelSize", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Resources\0", "getDimensionPixelSize\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFraction](https://developer.android.com/reference/android/content/res/Resources.html#getFraction(int,%20int,%20int))
        pub fn getFraction<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Resources", java.flags == PUBLIC, .name == "getFraction", .descriptor == "(III)F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Resources\0", "getFraction\0", "(III)F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDrawable](https://developer.android.com/reference/android/content/res/Resources.html#getDrawable(int))
        ///
        /// Required features: "android-graphics-drawable-Drawable"
        #[cfg(any(feature = "all", all(feature = "android-graphics-drawable-Drawable")))]
        #[deprecated] pub fn getDrawable_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::drawable::Drawable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Resources", java.flags == PUBLIC, .name == "getDrawable", .descriptor == "(I)Landroid/graphics/drawable/Drawable;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Resources\0", "getDrawable\0", "(I)Landroid/graphics/drawable/Drawable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDrawable](https://developer.android.com/reference/android/content/res/Resources.html#getDrawable(int,%20android.content.res.Resources.Theme))
        ///
        /// Required features: "android-content-res-Resources_Theme", "android-graphics-drawable-Drawable"
        #[cfg(any(feature = "all", all(feature = "android-content-res-Resources_Theme", feature = "android-graphics-drawable-Drawable")))]
        pub fn getDrawable_int_Theme<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::res::Resources_Theme>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::drawable::Drawable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Resources", java.flags == PUBLIC, .name == "getDrawable", .descriptor == "(ILandroid/content/res/Resources$Theme;)Landroid/graphics/drawable/Drawable;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Resources\0", "getDrawable\0", "(ILandroid/content/res/Resources$Theme;)Landroid/graphics/drawable/Drawable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDrawableForDensity](https://developer.android.com/reference/android/content/res/Resources.html#getDrawableForDensity(int,%20int))
        ///
        /// Required features: "android-graphics-drawable-Drawable"
        #[cfg(any(feature = "all", all(feature = "android-graphics-drawable-Drawable")))]
        #[deprecated] pub fn getDrawableForDensity_int_int<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::drawable::Drawable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Resources", java.flags == PUBLIC, .name == "getDrawableForDensity", .descriptor == "(II)Landroid/graphics/drawable/Drawable;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Resources\0", "getDrawableForDensity\0", "(II)Landroid/graphics/drawable/Drawable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDrawableForDensity](https://developer.android.com/reference/android/content/res/Resources.html#getDrawableForDensity(int,%20int,%20android.content.res.Resources.Theme))
        ///
        /// Required features: "android-content-res-Resources_Theme", "android-graphics-drawable-Drawable"
        #[cfg(any(feature = "all", all(feature = "android-content-res-Resources_Theme", feature = "android-graphics-drawable-Drawable")))]
        pub fn getDrawableForDensity_int_int_Theme<'env>(&'env self, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::res::Resources_Theme>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::drawable::Drawable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Resources", java.flags == PUBLIC, .name == "getDrawableForDensity", .descriptor == "(IILandroid/content/res/Resources$Theme;)Landroid/graphics/drawable/Drawable;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Resources\0", "getDrawableForDensity\0", "(IILandroid/content/res/Resources$Theme;)Landroid/graphics/drawable/Drawable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMovie](https://developer.android.com/reference/android/content/res/Resources.html#getMovie(int))
        ///
        /// Required features: "android-graphics-Movie"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Movie")))]
        #[deprecated] pub fn getMovie<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Movie>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Resources", java.flags == PUBLIC, .name == "getMovie", .descriptor == "(I)Landroid/graphics/Movie;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Resources\0", "getMovie\0", "(I)Landroid/graphics/Movie;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getColor](https://developer.android.com/reference/android/content/res/Resources.html#getColor(int))
        #[deprecated] pub fn getColor_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Resources", java.flags == PUBLIC, .name == "getColor", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Resources\0", "getColor\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getColor](https://developer.android.com/reference/android/content/res/Resources.html#getColor(int,%20android.content.res.Resources.Theme))
        ///
        /// Required features: "android-content-res-Resources_Theme"
        #[cfg(any(feature = "all", all(feature = "android-content-res-Resources_Theme")))]
        pub fn getColor_int_Theme<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::res::Resources_Theme>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Resources", java.flags == PUBLIC, .name == "getColor", .descriptor == "(ILandroid/content/res/Resources$Theme;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Resources\0", "getColor\0", "(ILandroid/content/res/Resources$Theme;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getColorStateList](https://developer.android.com/reference/android/content/res/Resources.html#getColorStateList(int))
        ///
        /// Required features: "android-content-res-ColorStateList"
        #[cfg(any(feature = "all", all(feature = "android-content-res-ColorStateList")))]
        #[deprecated] pub fn getColorStateList_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::res::ColorStateList>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Resources", java.flags == PUBLIC, .name == "getColorStateList", .descriptor == "(I)Landroid/content/res/ColorStateList;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Resources\0", "getColorStateList\0", "(I)Landroid/content/res/ColorStateList;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getColorStateList](https://developer.android.com/reference/android/content/res/Resources.html#getColorStateList(int,%20android.content.res.Resources.Theme))
        ///
        /// Required features: "android-content-res-ColorStateList", "android-content-res-Resources_Theme"
        #[cfg(any(feature = "all", all(feature = "android-content-res-ColorStateList", feature = "android-content-res-Resources_Theme")))]
        pub fn getColorStateList_int_Theme<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::res::Resources_Theme>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::res::ColorStateList>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Resources", java.flags == PUBLIC, .name == "getColorStateList", .descriptor == "(ILandroid/content/res/Resources$Theme;)Landroid/content/res/ColorStateList;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Resources\0", "getColorStateList\0", "(ILandroid/content/res/Resources$Theme;)Landroid/content/res/ColorStateList;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getBoolean](https://developer.android.com/reference/android/content/res/Resources.html#getBoolean(int))
        pub fn getBoolean<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Resources", java.flags == PUBLIC, .name == "getBoolean", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Resources\0", "getBoolean\0", "(I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInteger](https://developer.android.com/reference/android/content/res/Resources.html#getInteger(int))
        pub fn getInteger<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Resources", java.flags == PUBLIC, .name == "getInteger", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Resources\0", "getInteger\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFloat](https://developer.android.com/reference/android/content/res/Resources.html#getFloat(int))
        pub fn getFloat<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Resources", java.flags == PUBLIC, .name == "getFloat", .descriptor == "(I)F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Resources\0", "getFloat\0", "(I)F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLayout](https://developer.android.com/reference/android/content/res/Resources.html#getLayout(int))
        ///
        /// Required features: "android-content-res-XmlResourceParser"
        #[cfg(any(feature = "all", all(feature = "android-content-res-XmlResourceParser")))]
        pub fn getLayout<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::res::XmlResourceParser>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Resources", java.flags == PUBLIC, .name == "getLayout", .descriptor == "(I)Landroid/content/res/XmlResourceParser;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Resources\0", "getLayout\0", "(I)Landroid/content/res/XmlResourceParser;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAnimation](https://developer.android.com/reference/android/content/res/Resources.html#getAnimation(int))
        ///
        /// Required features: "android-content-res-XmlResourceParser"
        #[cfg(any(feature = "all", all(feature = "android-content-res-XmlResourceParser")))]
        pub fn getAnimation<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::res::XmlResourceParser>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Resources", java.flags == PUBLIC, .name == "getAnimation", .descriptor == "(I)Landroid/content/res/XmlResourceParser;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Resources\0", "getAnimation\0", "(I)Landroid/content/res/XmlResourceParser;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getXml](https://developer.android.com/reference/android/content/res/Resources.html#getXml(int))
        ///
        /// Required features: "android-content-res-XmlResourceParser"
        #[cfg(any(feature = "all", all(feature = "android-content-res-XmlResourceParser")))]
        pub fn getXml<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::res::XmlResourceParser>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Resources", java.flags == PUBLIC, .name == "getXml", .descriptor == "(I)Landroid/content/res/XmlResourceParser;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Resources\0", "getXml\0", "(I)Landroid/content/res/XmlResourceParser;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [openRawResource](https://developer.android.com/reference/android/content/res/Resources.html#openRawResource(int))
        ///
        /// Required features: "java-io-InputStream"
        #[cfg(any(feature = "all", all(feature = "java-io-InputStream")))]
        pub fn openRawResource_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::io::InputStream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Resources", java.flags == PUBLIC, .name == "openRawResource", .descriptor == "(I)Ljava/io/InputStream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Resources\0", "openRawResource\0", "(I)Ljava/io/InputStream;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [openRawResource](https://developer.android.com/reference/android/content/res/Resources.html#openRawResource(int,%20android.util.TypedValue))
        ///
        /// Required features: "android-util-TypedValue", "java-io-InputStream"
        #[cfg(any(feature = "all", all(feature = "android-util-TypedValue", feature = "java-io-InputStream")))]
        pub fn openRawResource_int_TypedValue<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::util::TypedValue>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::io::InputStream>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Resources", java.flags == PUBLIC, .name == "openRawResource", .descriptor == "(ILandroid/util/TypedValue;)Ljava/io/InputStream;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Resources\0", "openRawResource\0", "(ILandroid/util/TypedValue;)Ljava/io/InputStream;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [openRawResourceFd](https://developer.android.com/reference/android/content/res/Resources.html#openRawResourceFd(int))
        ///
        /// Required features: "android-content-res-AssetFileDescriptor"
        #[cfg(any(feature = "all", all(feature = "android-content-res-AssetFileDescriptor")))]
        pub fn openRawResourceFd<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::res::AssetFileDescriptor>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Resources", java.flags == PUBLIC, .name == "openRawResourceFd", .descriptor == "(I)Landroid/content/res/AssetFileDescriptor;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Resources\0", "openRawResourceFd\0", "(I)Landroid/content/res/AssetFileDescriptor;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getValue](https://developer.android.com/reference/android/content/res/Resources.html#getValue(int,%20android.util.TypedValue,%20boolean))
        ///
        /// Required features: "android-util-TypedValue"
        #[cfg(any(feature = "all", all(feature = "android-util-TypedValue")))]
        pub fn getValue_int_TypedValue_boolean<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::util::TypedValue>>, arg2: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Resources", java.flags == PUBLIC, .name == "getValue", .descriptor == "(ILandroid/util/TypedValue;Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Resources\0", "getValue\0", "(ILandroid/util/TypedValue;Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getValueForDensity](https://developer.android.com/reference/android/content/res/Resources.html#getValueForDensity(int,%20int,%20android.util.TypedValue,%20boolean))
        ///
        /// Required features: "android-util-TypedValue"
        #[cfg(any(feature = "all", all(feature = "android-util-TypedValue")))]
        pub fn getValueForDensity<'env>(&'env self, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::util::TypedValue>>, arg3: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Resources", java.flags == PUBLIC, .name == "getValueForDensity", .descriptor == "(IILandroid/util/TypedValue;Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Resources\0", "getValueForDensity\0", "(IILandroid/util/TypedValue;Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getValue](https://developer.android.com/reference/android/content/res/Resources.html#getValue(java.lang.String,%20android.util.TypedValue,%20boolean))
        ///
        /// Required features: "android-util-TypedValue", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-util-TypedValue", feature = "java-lang-String")))]
        pub fn getValue_String_TypedValue_boolean<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::util::TypedValue>>, arg2: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Resources", java.flags == PUBLIC, .name == "getValue", .descriptor == "(Ljava/lang/String;Landroid/util/TypedValue;Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Resources\0", "getValue\0", "(Ljava/lang/String;Landroid/util/TypedValue;Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAttributeSetSourceResId](https://developer.android.com/reference/android/content/res/Resources.html#getAttributeSetSourceResId(android.util.AttributeSet))
        ///
        /// Required features: "android-util-AttributeSet"
        #[cfg(any(feature = "all", all(feature = "android-util-AttributeSet")))]
        pub fn getAttributeSetSourceResId<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::util::AttributeSet>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Resources", java.flags == PUBLIC | STATIC, .name == "getAttributeSetSourceResId", .descriptor == "(Landroid/util/AttributeSet;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/content/res/Resources\0", "getAttributeSetSourceResId\0", "(Landroid/util/AttributeSet;)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newTheme](https://developer.android.com/reference/android/content/res/Resources.html#newTheme())
        ///
        /// Required features: "android-content-res-Resources_Theme"
        #[cfg(any(feature = "all", all(feature = "android-content-res-Resources_Theme")))]
        pub fn newTheme<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::res::Resources_Theme>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Resources", java.flags == PUBLIC | FINAL, .name == "newTheme", .descriptor == "()Landroid/content/res/Resources$Theme;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Resources\0", "newTheme\0", "()Landroid/content/res/Resources$Theme;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [obtainAttributes](https://developer.android.com/reference/android/content/res/Resources.html#obtainAttributes(android.util.AttributeSet,%20int%5B%5D))
        ///
        /// Required features: "android-content-res-TypedArray", "android-util-AttributeSet"
        #[cfg(any(feature = "all", all(feature = "android-content-res-TypedArray", feature = "android-util-AttributeSet")))]
        pub fn obtainAttributes<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::util::AttributeSet>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::res::TypedArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Resources", java.flags == PUBLIC, .name == "obtainAttributes", .descriptor == "(Landroid/util/AttributeSet;[I)Landroid/content/res/TypedArray;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Resources\0", "obtainAttributes\0", "(Landroid/util/AttributeSet;[I)Landroid/content/res/TypedArray;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateConfiguration](https://developer.android.com/reference/android/content/res/Resources.html#updateConfiguration(android.content.res.Configuration,%20android.util.DisplayMetrics))
        ///
        /// Required features: "android-content-res-Configuration", "android-util-DisplayMetrics"
        #[cfg(any(feature = "all", all(feature = "android-content-res-Configuration", feature = "android-util-DisplayMetrics")))]
        #[deprecated] pub fn updateConfiguration<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::res::Configuration>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::util::DisplayMetrics>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Resources", java.flags == PUBLIC, .name == "updateConfiguration", .descriptor == "(Landroid/content/res/Configuration;Landroid/util/DisplayMetrics;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Resources\0", "updateConfiguration\0", "(Landroid/content/res/Configuration;Landroid/util/DisplayMetrics;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDisplayMetrics](https://developer.android.com/reference/android/content/res/Resources.html#getDisplayMetrics())
        ///
        /// Required features: "android-util-DisplayMetrics"
        #[cfg(any(feature = "all", all(feature = "android-util-DisplayMetrics")))]
        pub fn getDisplayMetrics<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::util::DisplayMetrics>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Resources", java.flags == PUBLIC, .name == "getDisplayMetrics", .descriptor == "()Landroid/util/DisplayMetrics;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Resources\0", "getDisplayMetrics\0", "()Landroid/util/DisplayMetrics;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getConfiguration](https://developer.android.com/reference/android/content/res/Resources.html#getConfiguration())
        ///
        /// Required features: "android-content-res-Configuration"
        #[cfg(any(feature = "all", all(feature = "android-content-res-Configuration")))]
        pub fn getConfiguration<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::res::Configuration>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Resources", java.flags == PUBLIC, .name == "getConfiguration", .descriptor == "()Landroid/content/res/Configuration;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Resources\0", "getConfiguration\0", "()Landroid/content/res/Configuration;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getIdentifier](https://developer.android.com/reference/android/content/res/Resources.html#getIdentifier(java.lang.String,%20java.lang.String,%20java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getIdentifier<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Resources", java.flags == PUBLIC, .name == "getIdentifier", .descriptor == "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Resources\0", "getIdentifier\0", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getResourceName](https://developer.android.com/reference/android/content/res/Resources.html#getResourceName(int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getResourceName<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Resources", java.flags == PUBLIC, .name == "getResourceName", .descriptor == "(I)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Resources\0", "getResourceName\0", "(I)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getResourcePackageName](https://developer.android.com/reference/android/content/res/Resources.html#getResourcePackageName(int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getResourcePackageName<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Resources", java.flags == PUBLIC, .name == "getResourcePackageName", .descriptor == "(I)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Resources\0", "getResourcePackageName\0", "(I)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getResourceTypeName](https://developer.android.com/reference/android/content/res/Resources.html#getResourceTypeName(int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getResourceTypeName<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Resources", java.flags == PUBLIC, .name == "getResourceTypeName", .descriptor == "(I)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Resources\0", "getResourceTypeName\0", "(I)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getResourceEntryName](https://developer.android.com/reference/android/content/res/Resources.html#getResourceEntryName(int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getResourceEntryName<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Resources", java.flags == PUBLIC, .name == "getResourceEntryName", .descriptor == "(I)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Resources\0", "getResourceEntryName\0", "(I)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [parseBundleExtras](https://developer.android.com/reference/android/content/res/Resources.html#parseBundleExtras(android.content.res.XmlResourceParser,%20android.os.Bundle))
        ///
        /// Required features: "android-content-res-XmlResourceParser", "android-os-Bundle"
        #[cfg(any(feature = "all", all(feature = "android-content-res-XmlResourceParser", feature = "android-os-Bundle")))]
        pub fn parseBundleExtras<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::res::XmlResourceParser>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Resources", java.flags == PUBLIC, .name == "parseBundleExtras", .descriptor == "(Landroid/content/res/XmlResourceParser;Landroid/os/Bundle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Resources\0", "parseBundleExtras\0", "(Landroid/content/res/XmlResourceParser;Landroid/os/Bundle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [parseBundleExtra](https://developer.android.com/reference/android/content/res/Resources.html#parseBundleExtra(java.lang.String,%20android.util.AttributeSet,%20android.os.Bundle))
        ///
        /// Required features: "android-os-Bundle", "android-util-AttributeSet", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-os-Bundle", feature = "android-util-AttributeSet", feature = "java-lang-String")))]
        pub fn parseBundleExtra<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::util::AttributeSet>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Resources", java.flags == PUBLIC, .name == "parseBundleExtra", .descriptor == "(Ljava/lang/String;Landroid/util/AttributeSet;Landroid/os/Bundle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Resources\0", "parseBundleExtra\0", "(Ljava/lang/String;Landroid/util/AttributeSet;Landroid/os/Bundle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAssets](https://developer.android.com/reference/android/content/res/Resources.html#getAssets())
        ///
        /// Required features: "android-content-res-AssetManager"
        #[cfg(any(feature = "all", all(feature = "android-content-res-AssetManager")))]
        pub fn getAssets<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::res::AssetManager>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Resources", java.flags == PUBLIC | FINAL, .name == "getAssets", .descriptor == "()Landroid/content/res/AssetManager;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Resources\0", "getAssets\0", "()Landroid/content/res/AssetManager;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [flushLayoutCache](https://developer.android.com/reference/android/content/res/Resources.html#flushLayoutCache())
        pub fn flushLayoutCache<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Resources", java.flags == PUBLIC | FINAL, .name == "flushLayoutCache", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Resources\0", "flushLayoutCache\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [finishPreloading](https://developer.android.com/reference/android/content/res/Resources.html#finishPreloading())
        pub fn finishPreloading<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Resources", java.flags == PUBLIC | FINAL, .name == "finishPreloading", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Resources\0", "finishPreloading\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [ID_NULL](https://developer.android.com/reference/android/content/res/Resources.html#ID_NULL)
        pub const ID_NULL : i32 = 0;
    }
}
