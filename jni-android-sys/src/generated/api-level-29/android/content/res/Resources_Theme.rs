// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-content-res-Resources_Theme"))]
__jni_bindgen! {
    /// public final class [Resources.Theme](https://developer.android.com/reference/android/content/res/Resources.Theme.html)
    ///
    /// Required feature: android-content-res-Resources_Theme
    public final class Resources_Theme ("android/content/res/Resources$Theme") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [Theme](https://developer.android.com/reference/android/content/res/Resources.Theme.html#Theme(android.content.res.Resources))
        // ///
        // /// Required features: "android-content-res-Resources"
        // #[cfg(any(feature = "all", all(feature = "android-content-res-Resources")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::res::Resources>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::content::res::Resources_Theme>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/content/res/Resources$Theme", java.flags == (empty), .name == "<init>", .descriptor == "(Landroid/content/res/Resources;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Resources$Theme\0", "<init>\0", "(Landroid/content/res/Resources;)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [applyStyle](https://developer.android.com/reference/android/content/res/Resources.Theme.html#applyStyle(int,%20boolean))
        pub fn applyStyle<'env>(&'env self, arg0: i32, arg1: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Resources$Theme", java.flags == PUBLIC, .name == "applyStyle", .descriptor == "(IZ)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Resources$Theme\0", "applyStyle\0", "(IZ)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTo](https://developer.android.com/reference/android/content/res/Resources.Theme.html#setTo(android.content.res.Resources.Theme))
        ///
        /// Required features: "android-content-res-Resources_Theme"
        #[cfg(any(feature = "all", all(feature = "android-content-res-Resources_Theme")))]
        pub fn setTo<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::res::Resources_Theme>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Resources$Theme", java.flags == PUBLIC, .name == "setTo", .descriptor == "(Landroid/content/res/Resources$Theme;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Resources$Theme\0", "setTo\0", "(Landroid/content/res/Resources$Theme;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [obtainStyledAttributes](https://developer.android.com/reference/android/content/res/Resources.Theme.html#obtainStyledAttributes(int%5B%5D))
        ///
        /// Required features: "android-content-res-TypedArray"
        #[cfg(any(feature = "all", all(feature = "android-content-res-TypedArray")))]
        pub fn obtainStyledAttributes_int_array<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::res::TypedArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Resources$Theme", java.flags == PUBLIC, .name == "obtainStyledAttributes", .descriptor == "([I)Landroid/content/res/TypedArray;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Resources$Theme\0", "obtainStyledAttributes\0", "([I)Landroid/content/res/TypedArray;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [obtainStyledAttributes](https://developer.android.com/reference/android/content/res/Resources.Theme.html#obtainStyledAttributes(int,%20int%5B%5D))
        ///
        /// Required features: "android-content-res-TypedArray"
        #[cfg(any(feature = "all", all(feature = "android-content-res-TypedArray")))]
        pub fn obtainStyledAttributes_int_int_array<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::res::TypedArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Resources$Theme", java.flags == PUBLIC, .name == "obtainStyledAttributes", .descriptor == "(I[I)Landroid/content/res/TypedArray;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Resources$Theme\0", "obtainStyledAttributes\0", "(I[I)Landroid/content/res/TypedArray;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [obtainStyledAttributes](https://developer.android.com/reference/android/content/res/Resources.Theme.html#obtainStyledAttributes(android.util.AttributeSet,%20int%5B%5D,%20int,%20int))
        ///
        /// Required features: "android-content-res-TypedArray", "android-util-AttributeSet"
        #[cfg(any(feature = "all", all(feature = "android-content-res-TypedArray", feature = "android-util-AttributeSet")))]
        pub fn obtainStyledAttributes_AttributeSet_int_array_int_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::util::AttributeSet>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::res::TypedArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Resources$Theme", java.flags == PUBLIC, .name == "obtainStyledAttributes", .descriptor == "(Landroid/util/AttributeSet;[III)Landroid/content/res/TypedArray;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Resources$Theme\0", "obtainStyledAttributes\0", "(Landroid/util/AttributeSet;[III)Landroid/content/res/TypedArray;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [resolveAttribute](https://developer.android.com/reference/android/content/res/Resources.Theme.html#resolveAttribute(int,%20android.util.TypedValue,%20boolean))
        ///
        /// Required features: "android-util-TypedValue"
        #[cfg(any(feature = "all", all(feature = "android-util-TypedValue")))]
        pub fn resolveAttribute<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::util::TypedValue>>, arg2: bool) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Resources$Theme", java.flags == PUBLIC, .name == "resolveAttribute", .descriptor == "(ILandroid/util/TypedValue;Z)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Resources$Theme\0", "resolveAttribute\0", "(ILandroid/util/TypedValue;Z)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getResources](https://developer.android.com/reference/android/content/res/Resources.Theme.html#getResources())
        ///
        /// Required features: "android-content-res-Resources"
        #[cfg(any(feature = "all", all(feature = "android-content-res-Resources")))]
        pub fn getResources<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::res::Resources>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Resources$Theme", java.flags == PUBLIC, .name == "getResources", .descriptor == "()Landroid/content/res/Resources;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Resources$Theme\0", "getResources\0", "()Landroid/content/res/Resources;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDrawable](https://developer.android.com/reference/android/content/res/Resources.Theme.html#getDrawable(int))
        ///
        /// Required features: "android-graphics-drawable-Drawable"
        #[cfg(any(feature = "all", all(feature = "android-graphics-drawable-Drawable")))]
        pub fn getDrawable<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::drawable::Drawable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Resources$Theme", java.flags == PUBLIC, .name == "getDrawable", .descriptor == "(I)Landroid/graphics/drawable/Drawable;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Resources$Theme\0", "getDrawable\0", "(I)Landroid/graphics/drawable/Drawable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getChangingConfigurations](https://developer.android.com/reference/android/content/res/Resources.Theme.html#getChangingConfigurations())
        pub fn getChangingConfigurations<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Resources$Theme", java.flags == PUBLIC, .name == "getChangingConfigurations", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Resources$Theme\0", "getChangingConfigurations\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dump](https://developer.android.com/reference/android/content/res/Resources.Theme.html#dump(int,%20java.lang.String,%20java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn dump<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Resources$Theme", java.flags == PUBLIC, .name == "dump", .descriptor == "(ILjava/lang/String;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Resources$Theme\0", "dump\0", "(ILjava/lang/String;Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [rebase](https://developer.android.com/reference/android/content/res/Resources.Theme.html#rebase())
        pub fn rebase<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Resources$Theme", java.flags == PUBLIC, .name == "rebase", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Resources$Theme\0", "rebase\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getExplicitStyle](https://developer.android.com/reference/android/content/res/Resources.Theme.html#getExplicitStyle(android.util.AttributeSet))
        ///
        /// Required features: "android-util-AttributeSet"
        #[cfg(any(feature = "all", all(feature = "android-util-AttributeSet")))]
        pub fn getExplicitStyle<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::util::AttributeSet>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Resources$Theme", java.flags == PUBLIC, .name == "getExplicitStyle", .descriptor == "(Landroid/util/AttributeSet;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Resources$Theme\0", "getExplicitStyle\0", "(Landroid/util/AttributeSet;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAttributeResolutionStack](https://developer.android.com/reference/android/content/res/Resources.Theme.html#getAttributeResolutionStack(int,%20int,%20int))
        pub fn getAttributeResolutionStack<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::IntArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Resources$Theme", java.flags == PUBLIC, .name == "getAttributeResolutionStack", .descriptor == "(III)[I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Resources$Theme\0", "getAttributeResolutionStack\0", "(III)[I\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public field
        // // Not emitting: Failed to mangle field name: this$N outer class pointer
        // pub fn get_"this$0"<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::res::Resources>> { ... }
    }
}
