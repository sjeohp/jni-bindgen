// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-content-res-Configuration"))]
__jni_bindgen! {
    /// public final class [Configuration](https://developer.android.com/reference/android/content/res/Configuration.html)
    ///
    /// Required feature: android-content-res-Configuration
    public final class Configuration ("android/content/res/Configuration") extends crate::java::lang::Object, implements crate::android::os::Parcelable, crate::java::lang::Comparable {

        /// [Configuration](https://developer.android.com/reference/android/content/res/Configuration.html#Configuration())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::content::res::Configuration>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Configuration", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Configuration\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [Configuration](https://developer.android.com/reference/android/content/res/Configuration.html#Configuration(android.content.res.Configuration))
        ///
        /// Required features: "android-content-res-Configuration"
        #[cfg(any(feature = "all", all(feature = "android-content-res-Configuration")))]
        pub fn new_Configuration<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::res::Configuration>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::content::res::Configuration>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Configuration", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/content/res/Configuration;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Configuration\0", "<init>\0", "(Landroid/content/res/Configuration;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isLayoutSizeAtLeast](https://developer.android.com/reference/android/content/res/Configuration.html#isLayoutSizeAtLeast(int))
        pub fn isLayoutSizeAtLeast<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Configuration", java.flags == PUBLIC, .name == "isLayoutSizeAtLeast", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Configuration\0", "isLayoutSizeAtLeast\0", "(I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTo](https://developer.android.com/reference/android/content/res/Configuration.html#setTo(android.content.res.Configuration))
        ///
        /// Required features: "android-content-res-Configuration"
        #[cfg(any(feature = "all", all(feature = "android-content-res-Configuration")))]
        pub fn setTo<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::res::Configuration>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Configuration", java.flags == PUBLIC, .name == "setTo", .descriptor == "(Landroid/content/res/Configuration;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Configuration\0", "setTo\0", "(Landroid/content/res/Configuration;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/android/content/res/Configuration.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Configuration", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Configuration\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setToDefaults](https://developer.android.com/reference/android/content/res/Configuration.html#setToDefaults())
        pub fn setToDefaults<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Configuration", java.flags == PUBLIC, .name == "setToDefaults", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Configuration\0", "setToDefaults\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateFrom](https://developer.android.com/reference/android/content/res/Configuration.html#updateFrom(android.content.res.Configuration))
        ///
        /// Required features: "android-content-res-Configuration"
        #[cfg(any(feature = "all", all(feature = "android-content-res-Configuration")))]
        pub fn updateFrom<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::res::Configuration>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Configuration", java.flags == PUBLIC, .name == "updateFrom", .descriptor == "(Landroid/content/res/Configuration;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Configuration\0", "updateFrom\0", "(Landroid/content/res/Configuration;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [diff](https://developer.android.com/reference/android/content/res/Configuration.html#diff(android.content.res.Configuration))
        ///
        /// Required features: "android-content-res-Configuration"
        #[cfg(any(feature = "all", all(feature = "android-content-res-Configuration")))]
        pub fn diff<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::res::Configuration>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Configuration", java.flags == PUBLIC, .name == "diff", .descriptor == "(Landroid/content/res/Configuration;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Configuration\0", "diff\0", "(Landroid/content/res/Configuration;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [needNewResources](https://developer.android.com/reference/android/content/res/Configuration.html#needNewResources(int,%20int))
        pub fn needNewResources<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Configuration", java.flags == PUBLIC | STATIC, .name == "needNewResources", .descriptor == "(II)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/content/res/Configuration\0", "needNewResources\0", "(II)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [describeContents](https://developer.android.com/reference/android/content/res/Configuration.html#describeContents())
        pub fn describeContents<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Configuration", java.flags == PUBLIC, .name == "describeContents", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Configuration\0", "describeContents\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [writeToParcel](https://developer.android.com/reference/android/content/res/Configuration.html#writeToParcel(android.os.Parcel,%20int))
        ///
        /// Required features: "android-os-Parcel"
        #[cfg(any(feature = "all", all(feature = "android-os-Parcel")))]
        pub fn writeToParcel<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Parcel>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Configuration", java.flags == PUBLIC, .name == "writeToParcel", .descriptor == "(Landroid/os/Parcel;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Configuration\0", "writeToParcel\0", "(Landroid/os/Parcel;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [readFromParcel](https://developer.android.com/reference/android/content/res/Configuration.html#readFromParcel(android.os.Parcel))
        ///
        /// Required features: "android-os-Parcel"
        #[cfg(any(feature = "all", all(feature = "android-os-Parcel")))]
        pub fn readFromParcel<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Parcel>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Configuration", java.flags == PUBLIC, .name == "readFromParcel", .descriptor == "(Landroid/os/Parcel;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Configuration\0", "readFromParcel\0", "(Landroid/os/Parcel;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [compareTo](https://developer.android.com/reference/android/content/res/Configuration.html#compareTo(android.content.res.Configuration))
        ///
        /// Required features: "android-content-res-Configuration"
        #[cfg(any(feature = "all", all(feature = "android-content-res-Configuration")))]
        pub fn compareTo_Configuration<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::res::Configuration>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Configuration", java.flags == PUBLIC, .name == "compareTo", .descriptor == "(Landroid/content/res/Configuration;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Configuration\0", "compareTo\0", "(Landroid/content/res/Configuration;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [equals](https://developer.android.com/reference/android/content/res/Configuration.html#equals(android.content.res.Configuration))
        ///
        /// Required features: "android-content-res-Configuration"
        #[cfg(any(feature = "all", all(feature = "android-content-res-Configuration")))]
        pub fn equals_Configuration<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::res::Configuration>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Configuration", java.flags == PUBLIC, .name == "equals", .descriptor == "(Landroid/content/res/Configuration;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Configuration\0", "equals\0", "(Landroid/content/res/Configuration;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [equals](https://developer.android.com/reference/android/content/res/Configuration.html#equals(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn equals_Object<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Configuration", java.flags == PUBLIC, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Configuration\0", "equals\0", "(Ljava/lang/Object;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hashCode](https://developer.android.com/reference/android/content/res/Configuration.html#hashCode())
        pub fn hashCode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Configuration", java.flags == PUBLIC, .name == "hashCode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Configuration\0", "hashCode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLocales](https://developer.android.com/reference/android/content/res/Configuration.html#getLocales())
        ///
        /// Required features: "android-os-LocaleList"
        #[cfg(any(feature = "all", all(feature = "android-os-LocaleList")))]
        pub fn getLocales<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::LocaleList>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Configuration", java.flags == PUBLIC, .name == "getLocales", .descriptor == "()Landroid/os/LocaleList;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Configuration\0", "getLocales\0", "()Landroid/os/LocaleList;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setLocales](https://developer.android.com/reference/android/content/res/Configuration.html#setLocales(android.os.LocaleList))
        ///
        /// Required features: "android-os-LocaleList"
        #[cfg(any(feature = "all", all(feature = "android-os-LocaleList")))]
        pub fn setLocales<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::LocaleList>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Configuration", java.flags == PUBLIC, .name == "setLocales", .descriptor == "(Landroid/os/LocaleList;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Configuration\0", "setLocales\0", "(Landroid/os/LocaleList;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setLocale](https://developer.android.com/reference/android/content/res/Configuration.html#setLocale(java.util.Locale))
        ///
        /// Required features: "java-util-Locale"
        #[cfg(any(feature = "all", all(feature = "java-util-Locale")))]
        pub fn setLocale<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Locale>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Configuration", java.flags == PUBLIC, .name == "setLocale", .descriptor == "(Ljava/util/Locale;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Configuration\0", "setLocale\0", "(Ljava/util/Locale;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLayoutDirection](https://developer.android.com/reference/android/content/res/Configuration.html#getLayoutDirection())
        pub fn getLayoutDirection<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Configuration", java.flags == PUBLIC, .name == "getLayoutDirection", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Configuration\0", "getLayoutDirection\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setLayoutDirection](https://developer.android.com/reference/android/content/res/Configuration.html#setLayoutDirection(java.util.Locale))
        ///
        /// Required features: "java-util-Locale"
        #[cfg(any(feature = "all", all(feature = "java-util-Locale")))]
        pub fn setLayoutDirection<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Locale>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Configuration", java.flags == PUBLIC, .name == "setLayoutDirection", .descriptor == "(Ljava/util/Locale;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Configuration\0", "setLayoutDirection\0", "(Ljava/util/Locale;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isScreenRound](https://developer.android.com/reference/android/content/res/Configuration.html#isScreenRound())
        pub fn isScreenRound<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Configuration", java.flags == PUBLIC, .name == "isScreenRound", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Configuration\0", "isScreenRound\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isScreenWideColorGamut](https://developer.android.com/reference/android/content/res/Configuration.html#isScreenWideColorGamut())
        pub fn isScreenWideColorGamut<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Configuration", java.flags == PUBLIC, .name == "isScreenWideColorGamut", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Configuration\0", "isScreenWideColorGamut\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isScreenHdr](https://developer.android.com/reference/android/content/res/Configuration.html#isScreenHdr())
        pub fn isScreenHdr<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/res/Configuration", java.flags == PUBLIC, .name == "isScreenHdr", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Configuration\0", "isScreenHdr\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Bridge method - type erasure
        // /// [compareTo](https://developer.android.com/reference/android/content/res/Configuration.html#compareTo(java.lang.Object))
        // ///
        // /// Required features: "java-lang-Object"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        // pub fn compareTo_Object<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/content/res/Configuration", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "compareTo", .descriptor == "(Ljava/lang/Object;)I"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/res/Configuration\0", "compareTo\0", "(Ljava/lang/Object;)I\0");
        //         __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// public static final [COLOR_MODE_HDR_MASK](https://developer.android.com/reference/android/content/res/Configuration.html#COLOR_MODE_HDR_MASK)
        pub const COLOR_MODE_HDR_MASK : i32 = 12;

        /// public static final [COLOR_MODE_HDR_NO](https://developer.android.com/reference/android/content/res/Configuration.html#COLOR_MODE_HDR_NO)
        pub const COLOR_MODE_HDR_NO : i32 = 4;

        /// public static final [COLOR_MODE_HDR_SHIFT](https://developer.android.com/reference/android/content/res/Configuration.html#COLOR_MODE_HDR_SHIFT)
        pub const COLOR_MODE_HDR_SHIFT : i32 = 2;

        /// public static final [COLOR_MODE_HDR_UNDEFINED](https://developer.android.com/reference/android/content/res/Configuration.html#COLOR_MODE_HDR_UNDEFINED)
        pub const COLOR_MODE_HDR_UNDEFINED : i32 = 0;

        /// public static final [COLOR_MODE_HDR_YES](https://developer.android.com/reference/android/content/res/Configuration.html#COLOR_MODE_HDR_YES)
        pub const COLOR_MODE_HDR_YES : i32 = 8;

        /// public static final [COLOR_MODE_UNDEFINED](https://developer.android.com/reference/android/content/res/Configuration.html#COLOR_MODE_UNDEFINED)
        pub const COLOR_MODE_UNDEFINED : i32 = 0;

        /// public static final [COLOR_MODE_WIDE_COLOR_GAMUT_MASK](https://developer.android.com/reference/android/content/res/Configuration.html#COLOR_MODE_WIDE_COLOR_GAMUT_MASK)
        pub const COLOR_MODE_WIDE_COLOR_GAMUT_MASK : i32 = 3;

        /// public static final [COLOR_MODE_WIDE_COLOR_GAMUT_NO](https://developer.android.com/reference/android/content/res/Configuration.html#COLOR_MODE_WIDE_COLOR_GAMUT_NO)
        pub const COLOR_MODE_WIDE_COLOR_GAMUT_NO : i32 = 1;

        /// public static final [COLOR_MODE_WIDE_COLOR_GAMUT_UNDEFINED](https://developer.android.com/reference/android/content/res/Configuration.html#COLOR_MODE_WIDE_COLOR_GAMUT_UNDEFINED)
        pub const COLOR_MODE_WIDE_COLOR_GAMUT_UNDEFINED : i32 = 0;

        /// public static final [COLOR_MODE_WIDE_COLOR_GAMUT_YES](https://developer.android.com/reference/android/content/res/Configuration.html#COLOR_MODE_WIDE_COLOR_GAMUT_YES)
        pub const COLOR_MODE_WIDE_COLOR_GAMUT_YES : i32 = 2;

        /// **get** public static final [CREATOR](https://developer.android.com/reference/android/content/res/Configuration.html#CREATOR)
        ///
        /// Required feature: android-os-Parcelable_Creator
        #[cfg(any(feature = "all", feature = "android-os-Parcelable_Creator"))]
        pub fn CREATOR<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Parcelable_Creator>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/content/res/Configuration\0", "CREATOR\0", "Landroid/os/Parcelable$Creator;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// public static final [DENSITY_DPI_UNDEFINED](https://developer.android.com/reference/android/content/res/Configuration.html#DENSITY_DPI_UNDEFINED)
        pub const DENSITY_DPI_UNDEFINED : i32 = 0;

        /// public static final [HARDKEYBOARDHIDDEN_NO](https://developer.android.com/reference/android/content/res/Configuration.html#HARDKEYBOARDHIDDEN_NO)
        pub const HARDKEYBOARDHIDDEN_NO : i32 = 1;

        /// public static final [HARDKEYBOARDHIDDEN_UNDEFINED](https://developer.android.com/reference/android/content/res/Configuration.html#HARDKEYBOARDHIDDEN_UNDEFINED)
        pub const HARDKEYBOARDHIDDEN_UNDEFINED : i32 = 0;

        /// public static final [HARDKEYBOARDHIDDEN_YES](https://developer.android.com/reference/android/content/res/Configuration.html#HARDKEYBOARDHIDDEN_YES)
        pub const HARDKEYBOARDHIDDEN_YES : i32 = 2;

        /// public static final [KEYBOARDHIDDEN_NO](https://developer.android.com/reference/android/content/res/Configuration.html#KEYBOARDHIDDEN_NO)
        pub const KEYBOARDHIDDEN_NO : i32 = 1;

        /// public static final [KEYBOARDHIDDEN_UNDEFINED](https://developer.android.com/reference/android/content/res/Configuration.html#KEYBOARDHIDDEN_UNDEFINED)
        pub const KEYBOARDHIDDEN_UNDEFINED : i32 = 0;

        /// public static final [KEYBOARDHIDDEN_YES](https://developer.android.com/reference/android/content/res/Configuration.html#KEYBOARDHIDDEN_YES)
        pub const KEYBOARDHIDDEN_YES : i32 = 2;

        /// public static final [KEYBOARD_12KEY](https://developer.android.com/reference/android/content/res/Configuration.html#KEYBOARD_12KEY)
        pub const KEYBOARD_12KEY : i32 = 3;

        /// public static final [KEYBOARD_NOKEYS](https://developer.android.com/reference/android/content/res/Configuration.html#KEYBOARD_NOKEYS)
        pub const KEYBOARD_NOKEYS : i32 = 1;

        /// public static final [KEYBOARD_QWERTY](https://developer.android.com/reference/android/content/res/Configuration.html#KEYBOARD_QWERTY)
        pub const KEYBOARD_QWERTY : i32 = 2;

        /// public static final [KEYBOARD_UNDEFINED](https://developer.android.com/reference/android/content/res/Configuration.html#KEYBOARD_UNDEFINED)
        pub const KEYBOARD_UNDEFINED : i32 = 0;

        /// public static final [MNC_ZERO](https://developer.android.com/reference/android/content/res/Configuration.html#MNC_ZERO)
        pub const MNC_ZERO : i32 = 65535;

        /// public static final [NAVIGATIONHIDDEN_NO](https://developer.android.com/reference/android/content/res/Configuration.html#NAVIGATIONHIDDEN_NO)
        pub const NAVIGATIONHIDDEN_NO : i32 = 1;

        /// public static final [NAVIGATIONHIDDEN_UNDEFINED](https://developer.android.com/reference/android/content/res/Configuration.html#NAVIGATIONHIDDEN_UNDEFINED)
        pub const NAVIGATIONHIDDEN_UNDEFINED : i32 = 0;

        /// public static final [NAVIGATIONHIDDEN_YES](https://developer.android.com/reference/android/content/res/Configuration.html#NAVIGATIONHIDDEN_YES)
        pub const NAVIGATIONHIDDEN_YES : i32 = 2;

        /// public static final [NAVIGATION_DPAD](https://developer.android.com/reference/android/content/res/Configuration.html#NAVIGATION_DPAD)
        pub const NAVIGATION_DPAD : i32 = 2;

        /// public static final [NAVIGATION_NONAV](https://developer.android.com/reference/android/content/res/Configuration.html#NAVIGATION_NONAV)
        pub const NAVIGATION_NONAV : i32 = 1;

        /// public static final [NAVIGATION_TRACKBALL](https://developer.android.com/reference/android/content/res/Configuration.html#NAVIGATION_TRACKBALL)
        pub const NAVIGATION_TRACKBALL : i32 = 3;

        /// public static final [NAVIGATION_UNDEFINED](https://developer.android.com/reference/android/content/res/Configuration.html#NAVIGATION_UNDEFINED)
        pub const NAVIGATION_UNDEFINED : i32 = 0;

        /// public static final [NAVIGATION_WHEEL](https://developer.android.com/reference/android/content/res/Configuration.html#NAVIGATION_WHEEL)
        pub const NAVIGATION_WHEEL : i32 = 4;

        /// public static final [ORIENTATION_LANDSCAPE](https://developer.android.com/reference/android/content/res/Configuration.html#ORIENTATION_LANDSCAPE)
        pub const ORIENTATION_LANDSCAPE : i32 = 2;

        /// public static final [ORIENTATION_PORTRAIT](https://developer.android.com/reference/android/content/res/Configuration.html#ORIENTATION_PORTRAIT)
        pub const ORIENTATION_PORTRAIT : i32 = 1;

        /// public static final [ORIENTATION_SQUARE](https://developer.android.com/reference/android/content/res/Configuration.html#ORIENTATION_SQUARE)
        #[deprecated] pub const ORIENTATION_SQUARE : i32 = 3;

        /// public static final [ORIENTATION_UNDEFINED](https://developer.android.com/reference/android/content/res/Configuration.html#ORIENTATION_UNDEFINED)
        pub const ORIENTATION_UNDEFINED : i32 = 0;

        /// public static final [SCREENLAYOUT_LAYOUTDIR_LTR](https://developer.android.com/reference/android/content/res/Configuration.html#SCREENLAYOUT_LAYOUTDIR_LTR)
        pub const SCREENLAYOUT_LAYOUTDIR_LTR : i32 = 64;

        /// public static final [SCREENLAYOUT_LAYOUTDIR_MASK](https://developer.android.com/reference/android/content/res/Configuration.html#SCREENLAYOUT_LAYOUTDIR_MASK)
        pub const SCREENLAYOUT_LAYOUTDIR_MASK : i32 = 192;

        /// public static final [SCREENLAYOUT_LAYOUTDIR_RTL](https://developer.android.com/reference/android/content/res/Configuration.html#SCREENLAYOUT_LAYOUTDIR_RTL)
        pub const SCREENLAYOUT_LAYOUTDIR_RTL : i32 = 128;

        /// public static final [SCREENLAYOUT_LAYOUTDIR_SHIFT](https://developer.android.com/reference/android/content/res/Configuration.html#SCREENLAYOUT_LAYOUTDIR_SHIFT)
        pub const SCREENLAYOUT_LAYOUTDIR_SHIFT : i32 = 6;

        /// public static final [SCREENLAYOUT_LAYOUTDIR_UNDEFINED](https://developer.android.com/reference/android/content/res/Configuration.html#SCREENLAYOUT_LAYOUTDIR_UNDEFINED)
        pub const SCREENLAYOUT_LAYOUTDIR_UNDEFINED : i32 = 0;

        /// public static final [SCREENLAYOUT_LONG_MASK](https://developer.android.com/reference/android/content/res/Configuration.html#SCREENLAYOUT_LONG_MASK)
        pub const SCREENLAYOUT_LONG_MASK : i32 = 48;

        /// public static final [SCREENLAYOUT_LONG_NO](https://developer.android.com/reference/android/content/res/Configuration.html#SCREENLAYOUT_LONG_NO)
        pub const SCREENLAYOUT_LONG_NO : i32 = 16;

        /// public static final [SCREENLAYOUT_LONG_UNDEFINED](https://developer.android.com/reference/android/content/res/Configuration.html#SCREENLAYOUT_LONG_UNDEFINED)
        pub const SCREENLAYOUT_LONG_UNDEFINED : i32 = 0;

        /// public static final [SCREENLAYOUT_LONG_YES](https://developer.android.com/reference/android/content/res/Configuration.html#SCREENLAYOUT_LONG_YES)
        pub const SCREENLAYOUT_LONG_YES : i32 = 32;

        /// public static final [SCREENLAYOUT_ROUND_MASK](https://developer.android.com/reference/android/content/res/Configuration.html#SCREENLAYOUT_ROUND_MASK)
        pub const SCREENLAYOUT_ROUND_MASK : i32 = 768;

        /// public static final [SCREENLAYOUT_ROUND_NO](https://developer.android.com/reference/android/content/res/Configuration.html#SCREENLAYOUT_ROUND_NO)
        pub const SCREENLAYOUT_ROUND_NO : i32 = 256;

        /// public static final [SCREENLAYOUT_ROUND_UNDEFINED](https://developer.android.com/reference/android/content/res/Configuration.html#SCREENLAYOUT_ROUND_UNDEFINED)
        pub const SCREENLAYOUT_ROUND_UNDEFINED : i32 = 0;

        /// public static final [SCREENLAYOUT_ROUND_YES](https://developer.android.com/reference/android/content/res/Configuration.html#SCREENLAYOUT_ROUND_YES)
        pub const SCREENLAYOUT_ROUND_YES : i32 = 512;

        /// public static final [SCREENLAYOUT_SIZE_LARGE](https://developer.android.com/reference/android/content/res/Configuration.html#SCREENLAYOUT_SIZE_LARGE)
        pub const SCREENLAYOUT_SIZE_LARGE : i32 = 3;

        /// public static final [SCREENLAYOUT_SIZE_MASK](https://developer.android.com/reference/android/content/res/Configuration.html#SCREENLAYOUT_SIZE_MASK)
        pub const SCREENLAYOUT_SIZE_MASK : i32 = 15;

        /// public static final [SCREENLAYOUT_SIZE_NORMAL](https://developer.android.com/reference/android/content/res/Configuration.html#SCREENLAYOUT_SIZE_NORMAL)
        pub const SCREENLAYOUT_SIZE_NORMAL : i32 = 2;

        /// public static final [SCREENLAYOUT_SIZE_SMALL](https://developer.android.com/reference/android/content/res/Configuration.html#SCREENLAYOUT_SIZE_SMALL)
        pub const SCREENLAYOUT_SIZE_SMALL : i32 = 1;

        /// public static final [SCREENLAYOUT_SIZE_UNDEFINED](https://developer.android.com/reference/android/content/res/Configuration.html#SCREENLAYOUT_SIZE_UNDEFINED)
        pub const SCREENLAYOUT_SIZE_UNDEFINED : i32 = 0;

        /// public static final [SCREENLAYOUT_SIZE_XLARGE](https://developer.android.com/reference/android/content/res/Configuration.html#SCREENLAYOUT_SIZE_XLARGE)
        pub const SCREENLAYOUT_SIZE_XLARGE : i32 = 4;

        /// public static final [SCREENLAYOUT_UNDEFINED](https://developer.android.com/reference/android/content/res/Configuration.html#SCREENLAYOUT_UNDEFINED)
        pub const SCREENLAYOUT_UNDEFINED : i32 = 0;

        /// public static final [SCREEN_HEIGHT_DP_UNDEFINED](https://developer.android.com/reference/android/content/res/Configuration.html#SCREEN_HEIGHT_DP_UNDEFINED)
        pub const SCREEN_HEIGHT_DP_UNDEFINED : i32 = 0;

        /// public static final [SCREEN_WIDTH_DP_UNDEFINED](https://developer.android.com/reference/android/content/res/Configuration.html#SCREEN_WIDTH_DP_UNDEFINED)
        pub const SCREEN_WIDTH_DP_UNDEFINED : i32 = 0;

        /// public static final [SMALLEST_SCREEN_WIDTH_DP_UNDEFINED](https://developer.android.com/reference/android/content/res/Configuration.html#SMALLEST_SCREEN_WIDTH_DP_UNDEFINED)
        pub const SMALLEST_SCREEN_WIDTH_DP_UNDEFINED : i32 = 0;

        /// public static final [TOUCHSCREEN_FINGER](https://developer.android.com/reference/android/content/res/Configuration.html#TOUCHSCREEN_FINGER)
        pub const TOUCHSCREEN_FINGER : i32 = 3;

        /// public static final [TOUCHSCREEN_NOTOUCH](https://developer.android.com/reference/android/content/res/Configuration.html#TOUCHSCREEN_NOTOUCH)
        pub const TOUCHSCREEN_NOTOUCH : i32 = 1;

        /// public static final [TOUCHSCREEN_STYLUS](https://developer.android.com/reference/android/content/res/Configuration.html#TOUCHSCREEN_STYLUS)
        #[deprecated] pub const TOUCHSCREEN_STYLUS : i32 = 2;

        /// public static final [TOUCHSCREEN_UNDEFINED](https://developer.android.com/reference/android/content/res/Configuration.html#TOUCHSCREEN_UNDEFINED)
        pub const TOUCHSCREEN_UNDEFINED : i32 = 0;

        /// public static final [UI_MODE_NIGHT_MASK](https://developer.android.com/reference/android/content/res/Configuration.html#UI_MODE_NIGHT_MASK)
        pub const UI_MODE_NIGHT_MASK : i32 = 48;

        /// public static final [UI_MODE_NIGHT_NO](https://developer.android.com/reference/android/content/res/Configuration.html#UI_MODE_NIGHT_NO)
        pub const UI_MODE_NIGHT_NO : i32 = 16;

        /// public static final [UI_MODE_NIGHT_UNDEFINED](https://developer.android.com/reference/android/content/res/Configuration.html#UI_MODE_NIGHT_UNDEFINED)
        pub const UI_MODE_NIGHT_UNDEFINED : i32 = 0;

        /// public static final [UI_MODE_NIGHT_YES](https://developer.android.com/reference/android/content/res/Configuration.html#UI_MODE_NIGHT_YES)
        pub const UI_MODE_NIGHT_YES : i32 = 32;

        /// public static final [UI_MODE_TYPE_APPLIANCE](https://developer.android.com/reference/android/content/res/Configuration.html#UI_MODE_TYPE_APPLIANCE)
        pub const UI_MODE_TYPE_APPLIANCE : i32 = 5;

        /// public static final [UI_MODE_TYPE_CAR](https://developer.android.com/reference/android/content/res/Configuration.html#UI_MODE_TYPE_CAR)
        pub const UI_MODE_TYPE_CAR : i32 = 3;

        /// public static final [UI_MODE_TYPE_DESK](https://developer.android.com/reference/android/content/res/Configuration.html#UI_MODE_TYPE_DESK)
        pub const UI_MODE_TYPE_DESK : i32 = 2;

        /// public static final [UI_MODE_TYPE_MASK](https://developer.android.com/reference/android/content/res/Configuration.html#UI_MODE_TYPE_MASK)
        pub const UI_MODE_TYPE_MASK : i32 = 15;

        /// public static final [UI_MODE_TYPE_NORMAL](https://developer.android.com/reference/android/content/res/Configuration.html#UI_MODE_TYPE_NORMAL)
        pub const UI_MODE_TYPE_NORMAL : i32 = 1;

        /// public static final [UI_MODE_TYPE_TELEVISION](https://developer.android.com/reference/android/content/res/Configuration.html#UI_MODE_TYPE_TELEVISION)
        pub const UI_MODE_TYPE_TELEVISION : i32 = 4;

        /// public static final [UI_MODE_TYPE_UNDEFINED](https://developer.android.com/reference/android/content/res/Configuration.html#UI_MODE_TYPE_UNDEFINED)
        pub const UI_MODE_TYPE_UNDEFINED : i32 = 0;

        /// public static final [UI_MODE_TYPE_VR_HEADSET](https://developer.android.com/reference/android/content/res/Configuration.html#UI_MODE_TYPE_VR_HEADSET)
        pub const UI_MODE_TYPE_VR_HEADSET : i32 = 7;

        /// public static final [UI_MODE_TYPE_WATCH](https://developer.android.com/reference/android/content/res/Configuration.html#UI_MODE_TYPE_WATCH)
        pub const UI_MODE_TYPE_WATCH : i32 = 6;

        /// **get** public [colorMode](https://developer.android.com/reference/android/content/res/Configuration.html#colorMode)
        pub fn colorMode<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/res/Configuration\0", "colorMode\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [colorMode](https://developer.android.com/reference/android/content/res/Configuration.html#colorMode)
        pub fn set_colorMode<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/res/Configuration\0", "colorMode\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [densityDpi](https://developer.android.com/reference/android/content/res/Configuration.html#densityDpi)
        pub fn densityDpi<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/res/Configuration\0", "densityDpi\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [densityDpi](https://developer.android.com/reference/android/content/res/Configuration.html#densityDpi)
        pub fn set_densityDpi<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/res/Configuration\0", "densityDpi\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [fontScale](https://developer.android.com/reference/android/content/res/Configuration.html#fontScale)
        pub fn fontScale<'env>(&'env self) -> f32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/res/Configuration\0", "fontScale\0", "F\0");
                env.get_float_field(class, field)
            }
        }

        /// **set** public [fontScale](https://developer.android.com/reference/android/content/res/Configuration.html#fontScale)
        pub fn set_fontScale<'env>(&'env self, value: f32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/res/Configuration\0", "fontScale\0", "F\0");
                env.set_float_field(class, field, value)
            }
        }

        /// **get** public [hardKeyboardHidden](https://developer.android.com/reference/android/content/res/Configuration.html#hardKeyboardHidden)
        pub fn hardKeyboardHidden<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/res/Configuration\0", "hardKeyboardHidden\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [hardKeyboardHidden](https://developer.android.com/reference/android/content/res/Configuration.html#hardKeyboardHidden)
        pub fn set_hardKeyboardHidden<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/res/Configuration\0", "hardKeyboardHidden\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [keyboard](https://developer.android.com/reference/android/content/res/Configuration.html#keyboard)
        pub fn keyboard<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/res/Configuration\0", "keyboard\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [keyboard](https://developer.android.com/reference/android/content/res/Configuration.html#keyboard)
        pub fn set_keyboard<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/res/Configuration\0", "keyboard\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [keyboardHidden](https://developer.android.com/reference/android/content/res/Configuration.html#keyboardHidden)
        pub fn keyboardHidden<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/res/Configuration\0", "keyboardHidden\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [keyboardHidden](https://developer.android.com/reference/android/content/res/Configuration.html#keyboardHidden)
        pub fn set_keyboardHidden<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/res/Configuration\0", "keyboardHidden\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [locale](https://developer.android.com/reference/android/content/res/Configuration.html#locale)
        ///
        /// Required feature: java-util-Locale
        #[cfg(any(feature = "all", feature = "java-util-Locale"))]
        #[deprecated] pub fn locale<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Locale>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/res/Configuration\0", "locale\0", "Ljava/util/Locale;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [locale](https://developer.android.com/reference/android/content/res/Configuration.html#locale)
        ///
        /// Required feature: java-util-Locale
        #[cfg(any(feature = "all", feature = "java-util-Locale"))]
        #[deprecated] pub fn set_locale<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::java::util::Locale>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/res/Configuration\0", "locale\0", "Ljava/util/Locale;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [mcc](https://developer.android.com/reference/android/content/res/Configuration.html#mcc)
        pub fn mcc<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/res/Configuration\0", "mcc\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [mcc](https://developer.android.com/reference/android/content/res/Configuration.html#mcc)
        pub fn set_mcc<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/res/Configuration\0", "mcc\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [mnc](https://developer.android.com/reference/android/content/res/Configuration.html#mnc)
        pub fn mnc<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/res/Configuration\0", "mnc\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [mnc](https://developer.android.com/reference/android/content/res/Configuration.html#mnc)
        pub fn set_mnc<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/res/Configuration\0", "mnc\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [navigation](https://developer.android.com/reference/android/content/res/Configuration.html#navigation)
        pub fn navigation<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/res/Configuration\0", "navigation\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [navigation](https://developer.android.com/reference/android/content/res/Configuration.html#navigation)
        pub fn set_navigation<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/res/Configuration\0", "navigation\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [navigationHidden](https://developer.android.com/reference/android/content/res/Configuration.html#navigationHidden)
        pub fn navigationHidden<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/res/Configuration\0", "navigationHidden\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [navigationHidden](https://developer.android.com/reference/android/content/res/Configuration.html#navigationHidden)
        pub fn set_navigationHidden<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/res/Configuration\0", "navigationHidden\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [orientation](https://developer.android.com/reference/android/content/res/Configuration.html#orientation)
        pub fn orientation<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/res/Configuration\0", "orientation\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [orientation](https://developer.android.com/reference/android/content/res/Configuration.html#orientation)
        pub fn set_orientation<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/res/Configuration\0", "orientation\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [screenHeightDp](https://developer.android.com/reference/android/content/res/Configuration.html#screenHeightDp)
        pub fn screenHeightDp<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/res/Configuration\0", "screenHeightDp\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [screenHeightDp](https://developer.android.com/reference/android/content/res/Configuration.html#screenHeightDp)
        pub fn set_screenHeightDp<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/res/Configuration\0", "screenHeightDp\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [screenLayout](https://developer.android.com/reference/android/content/res/Configuration.html#screenLayout)
        pub fn screenLayout<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/res/Configuration\0", "screenLayout\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [screenLayout](https://developer.android.com/reference/android/content/res/Configuration.html#screenLayout)
        pub fn set_screenLayout<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/res/Configuration\0", "screenLayout\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [screenWidthDp](https://developer.android.com/reference/android/content/res/Configuration.html#screenWidthDp)
        pub fn screenWidthDp<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/res/Configuration\0", "screenWidthDp\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [screenWidthDp](https://developer.android.com/reference/android/content/res/Configuration.html#screenWidthDp)
        pub fn set_screenWidthDp<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/res/Configuration\0", "screenWidthDp\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [smallestScreenWidthDp](https://developer.android.com/reference/android/content/res/Configuration.html#smallestScreenWidthDp)
        pub fn smallestScreenWidthDp<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/res/Configuration\0", "smallestScreenWidthDp\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [smallestScreenWidthDp](https://developer.android.com/reference/android/content/res/Configuration.html#smallestScreenWidthDp)
        pub fn set_smallestScreenWidthDp<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/res/Configuration\0", "smallestScreenWidthDp\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [touchscreen](https://developer.android.com/reference/android/content/res/Configuration.html#touchscreen)
        pub fn touchscreen<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/res/Configuration\0", "touchscreen\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [touchscreen](https://developer.android.com/reference/android/content/res/Configuration.html#touchscreen)
        pub fn set_touchscreen<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/res/Configuration\0", "touchscreen\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [uiMode](https://developer.android.com/reference/android/content/res/Configuration.html#uiMode)
        pub fn uiMode<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/res/Configuration\0", "uiMode\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [uiMode](https://developer.android.com/reference/android/content/res/Configuration.html#uiMode)
        pub fn set_uiMode<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/content/res/Configuration\0", "uiMode\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }
    }
}
