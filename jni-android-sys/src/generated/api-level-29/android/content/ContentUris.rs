// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-content-ContentUris"))]
__jni_bindgen! {
    /// public class [ContentUris](https://developer.android.com/reference/android/content/ContentUris.html)
    ///
    /// Required feature: android-content-ContentUris
    public class ContentUris ("android/content/ContentUris") extends crate::java::lang::Object {

        /// [ContentUris](https://developer.android.com/reference/android/content/ContentUris.html#ContentUris())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::content::ContentUris>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentUris", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/content/ContentUris\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [parseId](https://developer.android.com/reference/android/content/ContentUris.html#parseId(android.net.Uri))
        ///
        /// Required features: "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri")))]
        pub fn parseId<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentUris", java.flags == PUBLIC | STATIC, .name == "parseId", .descriptor == "(Landroid/net/Uri;)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/content/ContentUris\0", "parseId\0", "(Landroid/net/Uri;)J\0");
                __jni_env.call_static_long_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [appendId](https://developer.android.com/reference/android/content/ContentUris.html#appendId(android.net.Uri.Builder,%20long))
        ///
        /// Required features: "android-net-Uri_Builder"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri_Builder")))]
        pub fn appendId<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri_Builder>>, arg1: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentUris", java.flags == PUBLIC | STATIC, .name == "appendId", .descriptor == "(Landroid/net/Uri$Builder;J)Landroid/net/Uri$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/content/ContentUris\0", "appendId\0", "(Landroid/net/Uri$Builder;J)Landroid/net/Uri$Builder;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [withAppendedId](https://developer.android.com/reference/android/content/ContentUris.html#withAppendedId(android.net.Uri,%20long))
        ///
        /// Required features: "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri")))]
        pub fn withAppendedId<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>, arg1: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentUris", java.flags == PUBLIC | STATIC, .name == "withAppendedId", .descriptor == "(Landroid/net/Uri;J)Landroid/net/Uri;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/content/ContentUris\0", "withAppendedId\0", "(Landroid/net/Uri;J)Landroid/net/Uri;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeId](https://developer.android.com/reference/android/content/ContentUris.html#removeId(android.net.Uri))
        ///
        /// Required features: "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri")))]
        pub fn removeId<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::net::Uri>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/content/ContentUris", java.flags == PUBLIC | STATIC, .name == "removeId", .descriptor == "(Landroid/net/Uri;)Landroid/net/Uri;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/content/ContentUris\0", "removeId\0", "(Landroid/net/Uri;)Landroid/net/Uri;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
