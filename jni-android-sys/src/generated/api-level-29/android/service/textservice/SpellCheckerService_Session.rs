// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-service-textservice-SpellCheckerService_Session"))]
__jni_bindgen! {
    /// public class [SpellCheckerService.Session](https://developer.android.com/reference/android/service/textservice/SpellCheckerService.Session.html)
    ///
    /// Required feature: android-service-textservice-SpellCheckerService_Session
    public class SpellCheckerService_Session ("android/service/textservice/SpellCheckerService$Session") extends crate::java::lang::Object {

        /// [Session](https://developer.android.com/reference/android/service/textservice/SpellCheckerService.Session.html#Session())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::service::textservice::SpellCheckerService_Session>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/textservice/SpellCheckerService$Session", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/textservice/SpellCheckerService$Session\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onCreate](https://developer.android.com/reference/android/service/textservice/SpellCheckerService.Session.html#onCreate())
        pub fn onCreate<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/textservice/SpellCheckerService$Session", java.flags == PUBLIC | ABSTRACT, .name == "onCreate", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/textservice/SpellCheckerService$Session\0", "onCreate\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onGetSuggestions](https://developer.android.com/reference/android/service/textservice/SpellCheckerService.Session.html#onGetSuggestions(android.view.textservice.TextInfo,%20int))
        ///
        /// Required features: "android-view-textservice-SuggestionsInfo", "android-view-textservice-TextInfo"
        #[cfg(any(feature = "all", all(feature = "android-view-textservice-SuggestionsInfo", feature = "android-view-textservice-TextInfo")))]
        pub fn onGetSuggestions<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::textservice::TextInfo>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::textservice::SuggestionsInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/textservice/SpellCheckerService$Session", java.flags == PUBLIC | ABSTRACT, .name == "onGetSuggestions", .descriptor == "(Landroid/view/textservice/TextInfo;I)Landroid/view/textservice/SuggestionsInfo;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/textservice/SpellCheckerService$Session\0", "onGetSuggestions\0", "(Landroid/view/textservice/TextInfo;I)Landroid/view/textservice/SuggestionsInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onGetSuggestionsMultiple](https://developer.android.com/reference/android/service/textservice/SpellCheckerService.Session.html#onGetSuggestionsMultiple(android.view.textservice.TextInfo%5B%5D,%20int,%20boolean))
        ///
        /// Required features: "android-view-textservice-SuggestionsInfo", "android-view-textservice-TextInfo"
        #[cfg(any(feature = "all", all(feature = "android-view-textservice-SuggestionsInfo", feature = "android-view-textservice-TextInfo")))]
        pub fn onGetSuggestionsMultiple<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::android::view::textservice::TextInfo, crate::java::lang::Throwable>>>, arg1: i32, arg2: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::android::view::textservice::SuggestionsInfo, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/textservice/SpellCheckerService$Session", java.flags == PUBLIC, .name == "onGetSuggestionsMultiple", .descriptor == "([Landroid/view/textservice/TextInfo;IZ)[Landroid/view/textservice/SuggestionsInfo;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/textservice/SpellCheckerService$Session\0", "onGetSuggestionsMultiple\0", "([Landroid/view/textservice/TextInfo;IZ)[Landroid/view/textservice/SuggestionsInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onGetSentenceSuggestionsMultiple](https://developer.android.com/reference/android/service/textservice/SpellCheckerService.Session.html#onGetSentenceSuggestionsMultiple(android.view.textservice.TextInfo%5B%5D,%20int))
        ///
        /// Required features: "android-view-textservice-SentenceSuggestionsInfo", "android-view-textservice-TextInfo"
        #[cfg(any(feature = "all", all(feature = "android-view-textservice-SentenceSuggestionsInfo", feature = "android-view-textservice-TextInfo")))]
        pub fn onGetSentenceSuggestionsMultiple<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::android::view::textservice::TextInfo, crate::java::lang::Throwable>>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::android::view::textservice::SentenceSuggestionsInfo, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/textservice/SpellCheckerService$Session", java.flags == PUBLIC, .name == "onGetSentenceSuggestionsMultiple", .descriptor == "([Landroid/view/textservice/TextInfo;I)[Landroid/view/textservice/SentenceSuggestionsInfo;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/textservice/SpellCheckerService$Session\0", "onGetSentenceSuggestionsMultiple\0", "([Landroid/view/textservice/TextInfo;I)[Landroid/view/textservice/SentenceSuggestionsInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onCancel](https://developer.android.com/reference/android/service/textservice/SpellCheckerService.Session.html#onCancel())
        pub fn onCancel<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/textservice/SpellCheckerService$Session", java.flags == PUBLIC, .name == "onCancel", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/textservice/SpellCheckerService$Session\0", "onCancel\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onClose](https://developer.android.com/reference/android/service/textservice/SpellCheckerService.Session.html#onClose())
        pub fn onClose<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/textservice/SpellCheckerService$Session", java.flags == PUBLIC, .name == "onClose", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/textservice/SpellCheckerService$Session\0", "onClose\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLocale](https://developer.android.com/reference/android/service/textservice/SpellCheckerService.Session.html#getLocale())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getLocale<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/textservice/SpellCheckerService$Session", java.flags == PUBLIC, .name == "getLocale", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/textservice/SpellCheckerService$Session\0", "getLocale\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getBundle](https://developer.android.com/reference/android/service/textservice/SpellCheckerService.Session.html#getBundle())
        ///
        /// Required features: "android-os-Bundle"
        #[cfg(any(feature = "all", all(feature = "android-os-Bundle")))]
        pub fn getBundle<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Bundle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/textservice/SpellCheckerService$Session", java.flags == PUBLIC, .name == "getBundle", .descriptor == "()Landroid/os/Bundle;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/textservice/SpellCheckerService$Session\0", "getBundle\0", "()Landroid/os/Bundle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
