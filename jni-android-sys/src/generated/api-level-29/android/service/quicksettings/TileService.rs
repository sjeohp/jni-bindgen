// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-service-quicksettings-TileService"))]
__jni_bindgen! {
    /// public class [TileService](https://developer.android.com/reference/android/service/quicksettings/TileService.html)
    ///
    /// Required feature: android-service-quicksettings-TileService
    public class TileService ("android/service/quicksettings/TileService") extends crate::android::app::Service {

        /// [TileService](https://developer.android.com/reference/android/service/quicksettings/TileService.html#TileService())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::service::quicksettings::TileService>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/quicksettings/TileService", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/quicksettings/TileService\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onDestroy](https://developer.android.com/reference/android/service/quicksettings/TileService.html#onDestroy())
        pub fn onDestroy<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/quicksettings/TileService", java.flags == PUBLIC, .name == "onDestroy", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/quicksettings/TileService\0", "onDestroy\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onTileAdded](https://developer.android.com/reference/android/service/quicksettings/TileService.html#onTileAdded())
        pub fn onTileAdded<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/quicksettings/TileService", java.flags == PUBLIC, .name == "onTileAdded", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/quicksettings/TileService\0", "onTileAdded\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onTileRemoved](https://developer.android.com/reference/android/service/quicksettings/TileService.html#onTileRemoved())
        pub fn onTileRemoved<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/quicksettings/TileService", java.flags == PUBLIC, .name == "onTileRemoved", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/quicksettings/TileService\0", "onTileRemoved\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onStartListening](https://developer.android.com/reference/android/service/quicksettings/TileService.html#onStartListening())
        pub fn onStartListening<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/quicksettings/TileService", java.flags == PUBLIC, .name == "onStartListening", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/quicksettings/TileService\0", "onStartListening\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onStopListening](https://developer.android.com/reference/android/service/quicksettings/TileService.html#onStopListening())
        pub fn onStopListening<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/quicksettings/TileService", java.flags == PUBLIC, .name == "onStopListening", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/quicksettings/TileService\0", "onStopListening\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onClick](https://developer.android.com/reference/android/service/quicksettings/TileService.html#onClick())
        pub fn onClick<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/quicksettings/TileService", java.flags == PUBLIC, .name == "onClick", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/quicksettings/TileService\0", "onClick\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [showDialog](https://developer.android.com/reference/android/service/quicksettings/TileService.html#showDialog(android.app.Dialog))
        ///
        /// Required features: "android-app-Dialog"
        #[cfg(any(feature = "all", all(feature = "android-app-Dialog")))]
        pub fn showDialog<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Dialog>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/quicksettings/TileService", java.flags == PUBLIC | FINAL, .name == "showDialog", .descriptor == "(Landroid/app/Dialog;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/quicksettings/TileService\0", "showDialog\0", "(Landroid/app/Dialog;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unlockAndRun](https://developer.android.com/reference/android/service/quicksettings/TileService.html#unlockAndRun(java.lang.Runnable))
        ///
        /// Required features: "java-lang-Runnable"
        #[cfg(any(feature = "all", all(feature = "java-lang-Runnable")))]
        pub fn unlockAndRun<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Runnable>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/quicksettings/TileService", java.flags == PUBLIC | FINAL, .name == "unlockAndRun", .descriptor == "(Ljava/lang/Runnable;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/quicksettings/TileService\0", "unlockAndRun\0", "(Ljava/lang/Runnable;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isSecure](https://developer.android.com/reference/android/service/quicksettings/TileService.html#isSecure())
        pub fn isSecure<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/quicksettings/TileService", java.flags == PUBLIC | FINAL, .name == "isSecure", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/quicksettings/TileService\0", "isSecure\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isLocked](https://developer.android.com/reference/android/service/quicksettings/TileService.html#isLocked())
        pub fn isLocked<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/quicksettings/TileService", java.flags == PUBLIC | FINAL, .name == "isLocked", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/quicksettings/TileService\0", "isLocked\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [startActivityAndCollapse](https://developer.android.com/reference/android/service/quicksettings/TileService.html#startActivityAndCollapse(android.content.Intent))
        ///
        /// Required features: "android-content-Intent"
        #[cfg(any(feature = "all", all(feature = "android-content-Intent")))]
        pub fn startActivityAndCollapse<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/quicksettings/TileService", java.flags == PUBLIC | FINAL, .name == "startActivityAndCollapse", .descriptor == "(Landroid/content/Intent;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/quicksettings/TileService\0", "startActivityAndCollapse\0", "(Landroid/content/Intent;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getQsTile](https://developer.android.com/reference/android/service/quicksettings/TileService.html#getQsTile())
        ///
        /// Required features: "android-service-quicksettings-Tile"
        #[cfg(any(feature = "all", all(feature = "android-service-quicksettings-Tile")))]
        pub fn getQsTile<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::service::quicksettings::Tile>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/quicksettings/TileService", java.flags == PUBLIC | FINAL, .name == "getQsTile", .descriptor == "()Landroid/service/quicksettings/Tile;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/quicksettings/TileService\0", "getQsTile\0", "()Landroid/service/quicksettings/Tile;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onBind](https://developer.android.com/reference/android/service/quicksettings/TileService.html#onBind(android.content.Intent))
        ///
        /// Required features: "android-content-Intent", "android-os-IBinder"
        #[cfg(any(feature = "all", all(feature = "android-content-Intent", feature = "android-os-IBinder")))]
        pub fn onBind<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::IBinder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/quicksettings/TileService", java.flags == PUBLIC, .name == "onBind", .descriptor == "(Landroid/content/Intent;)Landroid/os/IBinder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/quicksettings/TileService\0", "onBind\0", "(Landroid/content/Intent;)Landroid/os/IBinder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [requestListeningState](https://developer.android.com/reference/android/service/quicksettings/TileService.html#requestListeningState(android.content.Context,%20android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName", "android-content-Context"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "android-content-Context")))]
        pub fn requestListeningState<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/quicksettings/TileService", java.flags == PUBLIC | STATIC | FINAL, .name == "requestListeningState", .descriptor == "(Landroid/content/Context;Landroid/content/ComponentName;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/service/quicksettings/TileService\0", "requestListeningState\0", "(Landroid/content/Context;Landroid/content/ComponentName;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [ACTION_QS_TILE](https://developer.android.com/reference/android/service/quicksettings/TileService.html#ACTION_QS_TILE)
        pub const ACTION_QS_TILE : &'static str = "android.service.quicksettings.action.QS_TILE";

        /// public static final [ACTION_QS_TILE_PREFERENCES](https://developer.android.com/reference/android/service/quicksettings/TileService.html#ACTION_QS_TILE_PREFERENCES)
        pub const ACTION_QS_TILE_PREFERENCES : &'static str = "android.service.quicksettings.action.QS_TILE_PREFERENCES";

        /// public static final [META_DATA_ACTIVE_TILE](https://developer.android.com/reference/android/service/quicksettings/TileService.html#META_DATA_ACTIVE_TILE)
        pub const META_DATA_ACTIVE_TILE : &'static str = "android.service.quicksettings.ACTIVE_TILE";
    }
}
