// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-service-notification-NotificationListenerService"))]
__jni_bindgen! {
    /// public class [NotificationListenerService](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html)
    ///
    /// Required feature: android-service-notification-NotificationListenerService
    public class NotificationListenerService ("android/service/notification/NotificationListenerService") extends crate::android::app::Service {

        /// [NotificationListenerService](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#NotificationListenerService())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::service::notification::NotificationListenerService>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/notification/NotificationListenerService", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/notification/NotificationListenerService\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [attachBaseContext](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#attachBaseContext(android.content.Context))
        // ///
        // /// Required features: "android-content-Context"
        // #[cfg(any(feature = "all", all(feature = "android-content-Context")))]
        // fn attachBaseContext<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/service/notification/NotificationListenerService", java.flags == PROTECTED, .name == "attachBaseContext", .descriptor == "(Landroid/content/Context;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/notification/NotificationListenerService\0", "attachBaseContext\0", "(Landroid/content/Context;)V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [onNotificationPosted](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#onNotificationPosted(android.service.notification.StatusBarNotification))
        ///
        /// Required features: "android-service-notification-StatusBarNotification"
        #[cfg(any(feature = "all", all(feature = "android-service-notification-StatusBarNotification")))]
        pub fn onNotificationPosted_StatusBarNotification<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::service::notification::StatusBarNotification>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/notification/NotificationListenerService", java.flags == PUBLIC, .name == "onNotificationPosted", .descriptor == "(Landroid/service/notification/StatusBarNotification;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/notification/NotificationListenerService\0", "onNotificationPosted\0", "(Landroid/service/notification/StatusBarNotification;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onNotificationPosted](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#onNotificationPosted(android.service.notification.StatusBarNotification,%20android.service.notification.NotificationListenerService.RankingMap))
        ///
        /// Required features: "android-service-notification-NotificationListenerService_RankingMap", "android-service-notification-StatusBarNotification"
        #[cfg(any(feature = "all", all(feature = "android-service-notification-NotificationListenerService_RankingMap", feature = "android-service-notification-StatusBarNotification")))]
        pub fn onNotificationPosted_StatusBarNotification_RankingMap<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::service::notification::StatusBarNotification>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::service::notification::NotificationListenerService_RankingMap>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/notification/NotificationListenerService", java.flags == PUBLIC, .name == "onNotificationPosted", .descriptor == "(Landroid/service/notification/StatusBarNotification;Landroid/service/notification/NotificationListenerService$RankingMap;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/notification/NotificationListenerService\0", "onNotificationPosted\0", "(Landroid/service/notification/StatusBarNotification;Landroid/service/notification/NotificationListenerService$RankingMap;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onNotificationRemoved](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#onNotificationRemoved(android.service.notification.StatusBarNotification))
        ///
        /// Required features: "android-service-notification-StatusBarNotification"
        #[cfg(any(feature = "all", all(feature = "android-service-notification-StatusBarNotification")))]
        pub fn onNotificationRemoved_StatusBarNotification<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::service::notification::StatusBarNotification>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/notification/NotificationListenerService", java.flags == PUBLIC, .name == "onNotificationRemoved", .descriptor == "(Landroid/service/notification/StatusBarNotification;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/notification/NotificationListenerService\0", "onNotificationRemoved\0", "(Landroid/service/notification/StatusBarNotification;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onNotificationRemoved](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#onNotificationRemoved(android.service.notification.StatusBarNotification,%20android.service.notification.NotificationListenerService.RankingMap))
        ///
        /// Required features: "android-service-notification-NotificationListenerService_RankingMap", "android-service-notification-StatusBarNotification"
        #[cfg(any(feature = "all", all(feature = "android-service-notification-NotificationListenerService_RankingMap", feature = "android-service-notification-StatusBarNotification")))]
        pub fn onNotificationRemoved_StatusBarNotification_RankingMap<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::service::notification::StatusBarNotification>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::service::notification::NotificationListenerService_RankingMap>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/notification/NotificationListenerService", java.flags == PUBLIC, .name == "onNotificationRemoved", .descriptor == "(Landroid/service/notification/StatusBarNotification;Landroid/service/notification/NotificationListenerService$RankingMap;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/notification/NotificationListenerService\0", "onNotificationRemoved\0", "(Landroid/service/notification/StatusBarNotification;Landroid/service/notification/NotificationListenerService$RankingMap;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onNotificationRemoved](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#onNotificationRemoved(android.service.notification.StatusBarNotification,%20android.service.notification.NotificationListenerService.RankingMap,%20int))
        ///
        /// Required features: "android-service-notification-NotificationListenerService_RankingMap", "android-service-notification-StatusBarNotification"
        #[cfg(any(feature = "all", all(feature = "android-service-notification-NotificationListenerService_RankingMap", feature = "android-service-notification-StatusBarNotification")))]
        pub fn onNotificationRemoved_StatusBarNotification_RankingMap_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::service::notification::StatusBarNotification>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::service::notification::NotificationListenerService_RankingMap>>, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/notification/NotificationListenerService", java.flags == PUBLIC, .name == "onNotificationRemoved", .descriptor == "(Landroid/service/notification/StatusBarNotification;Landroid/service/notification/NotificationListenerService$RankingMap;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/notification/NotificationListenerService\0", "onNotificationRemoved\0", "(Landroid/service/notification/StatusBarNotification;Landroid/service/notification/NotificationListenerService$RankingMap;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onListenerConnected](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#onListenerConnected())
        pub fn onListenerConnected<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/notification/NotificationListenerService", java.flags == PUBLIC, .name == "onListenerConnected", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/notification/NotificationListenerService\0", "onListenerConnected\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onListenerDisconnected](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#onListenerDisconnected())
        pub fn onListenerDisconnected<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/notification/NotificationListenerService", java.flags == PUBLIC, .name == "onListenerDisconnected", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/notification/NotificationListenerService\0", "onListenerDisconnected\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onNotificationRankingUpdate](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#onNotificationRankingUpdate(android.service.notification.NotificationListenerService.RankingMap))
        ///
        /// Required features: "android-service-notification-NotificationListenerService_RankingMap"
        #[cfg(any(feature = "all", all(feature = "android-service-notification-NotificationListenerService_RankingMap")))]
        pub fn onNotificationRankingUpdate<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::service::notification::NotificationListenerService_RankingMap>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/notification/NotificationListenerService", java.flags == PUBLIC, .name == "onNotificationRankingUpdate", .descriptor == "(Landroid/service/notification/NotificationListenerService$RankingMap;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/notification/NotificationListenerService\0", "onNotificationRankingUpdate\0", "(Landroid/service/notification/NotificationListenerService$RankingMap;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onListenerHintsChanged](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#onListenerHintsChanged(int))
        pub fn onListenerHintsChanged<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/notification/NotificationListenerService", java.flags == PUBLIC, .name == "onListenerHintsChanged", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/notification/NotificationListenerService\0", "onListenerHintsChanged\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onSilentStatusBarIconsVisibilityChanged](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#onSilentStatusBarIconsVisibilityChanged(boolean))
        pub fn onSilentStatusBarIconsVisibilityChanged<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/notification/NotificationListenerService", java.flags == PUBLIC, .name == "onSilentStatusBarIconsVisibilityChanged", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/notification/NotificationListenerService\0", "onSilentStatusBarIconsVisibilityChanged\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onNotificationChannelModified](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#onNotificationChannelModified(java.lang.String,%20android.os.UserHandle,%20android.app.NotificationChannel,%20int))
        ///
        /// Required features: "android-app-NotificationChannel", "android-os-UserHandle", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-app-NotificationChannel", feature = "android-os-UserHandle", feature = "java-lang-String")))]
        pub fn onNotificationChannelModified<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::UserHandle>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::NotificationChannel>>, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/notification/NotificationListenerService", java.flags == PUBLIC, .name == "onNotificationChannelModified", .descriptor == "(Ljava/lang/String;Landroid/os/UserHandle;Landroid/app/NotificationChannel;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/notification/NotificationListenerService\0", "onNotificationChannelModified\0", "(Ljava/lang/String;Landroid/os/UserHandle;Landroid/app/NotificationChannel;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onNotificationChannelGroupModified](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#onNotificationChannelGroupModified(java.lang.String,%20android.os.UserHandle,%20android.app.NotificationChannelGroup,%20int))
        ///
        /// Required features: "android-app-NotificationChannelGroup", "android-os-UserHandle", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-app-NotificationChannelGroup", feature = "android-os-UserHandle", feature = "java-lang-String")))]
        pub fn onNotificationChannelGroupModified<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::UserHandle>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::NotificationChannelGroup>>, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/notification/NotificationListenerService", java.flags == PUBLIC, .name == "onNotificationChannelGroupModified", .descriptor == "(Ljava/lang/String;Landroid/os/UserHandle;Landroid/app/NotificationChannelGroup;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/notification/NotificationListenerService\0", "onNotificationChannelGroupModified\0", "(Ljava/lang/String;Landroid/os/UserHandle;Landroid/app/NotificationChannelGroup;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onInterruptionFilterChanged](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#onInterruptionFilterChanged(int))
        pub fn onInterruptionFilterChanged<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/notification/NotificationListenerService", java.flags == PUBLIC, .name == "onInterruptionFilterChanged", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/notification/NotificationListenerService\0", "onInterruptionFilterChanged\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [cancelNotification](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#cancelNotification(java.lang.String,%20java.lang.String,%20int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        #[deprecated] pub fn cancelNotification_String_String_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/notification/NotificationListenerService", java.flags == PUBLIC | FINAL, .name == "cancelNotification", .descriptor == "(Ljava/lang/String;Ljava/lang/String;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/notification/NotificationListenerService\0", "cancelNotification\0", "(Ljava/lang/String;Ljava/lang/String;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [cancelNotification](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#cancelNotification(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn cancelNotification_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/notification/NotificationListenerService", java.flags == PUBLIC | FINAL, .name == "cancelNotification", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/notification/NotificationListenerService\0", "cancelNotification\0", "(Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [cancelAllNotifications](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#cancelAllNotifications())
        pub fn cancelAllNotifications<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/notification/NotificationListenerService", java.flags == PUBLIC | FINAL, .name == "cancelAllNotifications", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/notification/NotificationListenerService\0", "cancelAllNotifications\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [cancelNotifications](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#cancelNotifications(java.lang.String%5B%5D))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn cancelNotifications<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/notification/NotificationListenerService", java.flags == PUBLIC | FINAL, .name == "cancelNotifications", .descriptor == "([Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/notification/NotificationListenerService\0", "cancelNotifications\0", "([Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [snoozeNotification](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#snoozeNotification(java.lang.String,%20long))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn snoozeNotification<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i64) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/notification/NotificationListenerService", java.flags == PUBLIC | FINAL, .name == "snoozeNotification", .descriptor == "(Ljava/lang/String;J)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/notification/NotificationListenerService\0", "snoozeNotification\0", "(Ljava/lang/String;J)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setNotificationsShown](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#setNotificationsShown(java.lang.String%5B%5D))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn setNotificationsShown<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/notification/NotificationListenerService", java.flags == PUBLIC | FINAL, .name == "setNotificationsShown", .descriptor == "([Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/notification/NotificationListenerService\0", "setNotificationsShown\0", "([Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateNotificationChannel](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#updateNotificationChannel(java.lang.String,%20android.os.UserHandle,%20android.app.NotificationChannel))
        ///
        /// Required features: "android-app-NotificationChannel", "android-os-UserHandle", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-app-NotificationChannel", feature = "android-os-UserHandle", feature = "java-lang-String")))]
        pub fn updateNotificationChannel<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::UserHandle>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::NotificationChannel>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/notification/NotificationListenerService", java.flags == PUBLIC | FINAL, .name == "updateNotificationChannel", .descriptor == "(Ljava/lang/String;Landroid/os/UserHandle;Landroid/app/NotificationChannel;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/notification/NotificationListenerService\0", "updateNotificationChannel\0", "(Ljava/lang/String;Landroid/os/UserHandle;Landroid/app/NotificationChannel;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNotificationChannels](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#getNotificationChannels(java.lang.String,%20android.os.UserHandle))
        ///
        /// Required features: "android-os-UserHandle", "java-lang-String", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "android-os-UserHandle", feature = "java-lang-String", feature = "java-util-List")))]
        pub fn getNotificationChannels<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::UserHandle>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/notification/NotificationListenerService", java.flags == PUBLIC | FINAL, .name == "getNotificationChannels", .descriptor == "(Ljava/lang/String;Landroid/os/UserHandle;)Ljava/util/List;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/notification/NotificationListenerService\0", "getNotificationChannels\0", "(Ljava/lang/String;Landroid/os/UserHandle;)Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNotificationChannelGroups](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#getNotificationChannelGroups(java.lang.String,%20android.os.UserHandle))
        ///
        /// Required features: "android-os-UserHandle", "java-lang-String", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "android-os-UserHandle", feature = "java-lang-String", feature = "java-util-List")))]
        pub fn getNotificationChannelGroups<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::UserHandle>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/notification/NotificationListenerService", java.flags == PUBLIC | FINAL, .name == "getNotificationChannelGroups", .descriptor == "(Ljava/lang/String;Landroid/os/UserHandle;)Ljava/util/List;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/notification/NotificationListenerService\0", "getNotificationChannelGroups\0", "(Ljava/lang/String;Landroid/os/UserHandle;)Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getActiveNotifications](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#getActiveNotifications())
        ///
        /// Required features: "android-service-notification-StatusBarNotification"
        #[cfg(any(feature = "all", all(feature = "android-service-notification-StatusBarNotification")))]
        pub fn getActiveNotifications<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::android::service::notification::StatusBarNotification, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/notification/NotificationListenerService", java.flags == PUBLIC, .name == "getActiveNotifications", .descriptor == "()[Landroid/service/notification/StatusBarNotification;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/notification/NotificationListenerService\0", "getActiveNotifications\0", "()[Landroid/service/notification/StatusBarNotification;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSnoozedNotifications](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#getSnoozedNotifications())
        ///
        /// Required features: "android-service-notification-StatusBarNotification"
        #[cfg(any(feature = "all", all(feature = "android-service-notification-StatusBarNotification")))]
        pub fn getSnoozedNotifications<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::android::service::notification::StatusBarNotification, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/notification/NotificationListenerService", java.flags == PUBLIC | FINAL, .name == "getSnoozedNotifications", .descriptor == "()[Landroid/service/notification/StatusBarNotification;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/notification/NotificationListenerService\0", "getSnoozedNotifications\0", "()[Landroid/service/notification/StatusBarNotification;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getActiveNotifications](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#getActiveNotifications(java.lang.String%5B%5D))
        ///
        /// Required features: "android-service-notification-StatusBarNotification", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-service-notification-StatusBarNotification", feature = "java-lang-String")))]
        pub fn getActiveNotifications_String_array<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::android::service::notification::StatusBarNotification, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/notification/NotificationListenerService", java.flags == PUBLIC, .name == "getActiveNotifications", .descriptor == "([Ljava/lang/String;)[Landroid/service/notification/StatusBarNotification;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/notification/NotificationListenerService\0", "getActiveNotifications\0", "([Ljava/lang/String;)[Landroid/service/notification/StatusBarNotification;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCurrentListenerHints](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#getCurrentListenerHints())
        pub fn getCurrentListenerHints<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/notification/NotificationListenerService", java.flags == PUBLIC | FINAL, .name == "getCurrentListenerHints", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/notification/NotificationListenerService\0", "getCurrentListenerHints\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCurrentInterruptionFilter](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#getCurrentInterruptionFilter())
        pub fn getCurrentInterruptionFilter<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/notification/NotificationListenerService", java.flags == PUBLIC | FINAL, .name == "getCurrentInterruptionFilter", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/notification/NotificationListenerService\0", "getCurrentInterruptionFilter\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clearRequestedListenerHints](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#clearRequestedListenerHints())
        pub fn clearRequestedListenerHints<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/notification/NotificationListenerService", java.flags == PUBLIC | FINAL, .name == "clearRequestedListenerHints", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/notification/NotificationListenerService\0", "clearRequestedListenerHints\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [requestListenerHints](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#requestListenerHints(int))
        pub fn requestListenerHints<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/notification/NotificationListenerService", java.flags == PUBLIC | FINAL, .name == "requestListenerHints", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/notification/NotificationListenerService\0", "requestListenerHints\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [requestInterruptionFilter](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#requestInterruptionFilter(int))
        pub fn requestInterruptionFilter<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/notification/NotificationListenerService", java.flags == PUBLIC | FINAL, .name == "requestInterruptionFilter", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/notification/NotificationListenerService\0", "requestInterruptionFilter\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCurrentRanking](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#getCurrentRanking())
        ///
        /// Required features: "android-service-notification-NotificationListenerService_RankingMap"
        #[cfg(any(feature = "all", all(feature = "android-service-notification-NotificationListenerService_RankingMap")))]
        pub fn getCurrentRanking<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::service::notification::NotificationListenerService_RankingMap>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/notification/NotificationListenerService", java.flags == PUBLIC, .name == "getCurrentRanking", .descriptor == "()Landroid/service/notification/NotificationListenerService$RankingMap;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/notification/NotificationListenerService\0", "getCurrentRanking\0", "()Landroid/service/notification/NotificationListenerService$RankingMap;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onBind](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#onBind(android.content.Intent))
        ///
        /// Required features: "android-content-Intent", "android-os-IBinder"
        #[cfg(any(feature = "all", all(feature = "android-content-Intent", feature = "android-os-IBinder")))]
        pub fn onBind<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::IBinder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/notification/NotificationListenerService", java.flags == PUBLIC, .name == "onBind", .descriptor == "(Landroid/content/Intent;)Landroid/os/IBinder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/notification/NotificationListenerService\0", "onBind\0", "(Landroid/content/Intent;)Landroid/os/IBinder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onDestroy](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#onDestroy())
        pub fn onDestroy<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/notification/NotificationListenerService", java.flags == PUBLIC, .name == "onDestroy", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/notification/NotificationListenerService\0", "onDestroy\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [requestRebind](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#requestRebind(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn requestRebind<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/notification/NotificationListenerService", java.flags == PUBLIC | STATIC, .name == "requestRebind", .descriptor == "(Landroid/content/ComponentName;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/service/notification/NotificationListenerService\0", "requestRebind\0", "(Landroid/content/ComponentName;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [requestUnbind](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#requestUnbind())
        pub fn requestUnbind<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/notification/NotificationListenerService", java.flags == PUBLIC | FINAL, .name == "requestUnbind", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/notification/NotificationListenerService\0", "requestUnbind\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [HINT_HOST_DISABLE_CALL_EFFECTS](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#HINT_HOST_DISABLE_CALL_EFFECTS)
        pub const HINT_HOST_DISABLE_CALL_EFFECTS : i32 = 4;

        /// public static final [HINT_HOST_DISABLE_EFFECTS](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#HINT_HOST_DISABLE_EFFECTS)
        pub const HINT_HOST_DISABLE_EFFECTS : i32 = 1;

        /// public static final [HINT_HOST_DISABLE_NOTIFICATION_EFFECTS](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#HINT_HOST_DISABLE_NOTIFICATION_EFFECTS)
        pub const HINT_HOST_DISABLE_NOTIFICATION_EFFECTS : i32 = 2;

        /// public static final [INTERRUPTION_FILTER_ALARMS](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#INTERRUPTION_FILTER_ALARMS)
        pub const INTERRUPTION_FILTER_ALARMS : i32 = 4;

        /// public static final [INTERRUPTION_FILTER_ALL](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#INTERRUPTION_FILTER_ALL)
        pub const INTERRUPTION_FILTER_ALL : i32 = 1;

        /// public static final [INTERRUPTION_FILTER_NONE](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#INTERRUPTION_FILTER_NONE)
        pub const INTERRUPTION_FILTER_NONE : i32 = 3;

        /// public static final [INTERRUPTION_FILTER_PRIORITY](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#INTERRUPTION_FILTER_PRIORITY)
        pub const INTERRUPTION_FILTER_PRIORITY : i32 = 2;

        /// public static final [INTERRUPTION_FILTER_UNKNOWN](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#INTERRUPTION_FILTER_UNKNOWN)
        pub const INTERRUPTION_FILTER_UNKNOWN : i32 = 0;

        /// public static final [NOTIFICATION_CHANNEL_OR_GROUP_ADDED](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#NOTIFICATION_CHANNEL_OR_GROUP_ADDED)
        pub const NOTIFICATION_CHANNEL_OR_GROUP_ADDED : i32 = 1;

        /// public static final [NOTIFICATION_CHANNEL_OR_GROUP_DELETED](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#NOTIFICATION_CHANNEL_OR_GROUP_DELETED)
        pub const NOTIFICATION_CHANNEL_OR_GROUP_DELETED : i32 = 3;

        /// public static final [NOTIFICATION_CHANNEL_OR_GROUP_UPDATED](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#NOTIFICATION_CHANNEL_OR_GROUP_UPDATED)
        pub const NOTIFICATION_CHANNEL_OR_GROUP_UPDATED : i32 = 2;

        /// public static final [REASON_APP_CANCEL](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#REASON_APP_CANCEL)
        pub const REASON_APP_CANCEL : i32 = 8;

        /// public static final [REASON_APP_CANCEL_ALL](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#REASON_APP_CANCEL_ALL)
        pub const REASON_APP_CANCEL_ALL : i32 = 9;

        /// public static final [REASON_CANCEL](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#REASON_CANCEL)
        pub const REASON_CANCEL : i32 = 2;

        /// public static final [REASON_CANCEL_ALL](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#REASON_CANCEL_ALL)
        pub const REASON_CANCEL_ALL : i32 = 3;

        /// public static final [REASON_CHANNEL_BANNED](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#REASON_CHANNEL_BANNED)
        pub const REASON_CHANNEL_BANNED : i32 = 17;

        /// public static final [REASON_CLICK](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#REASON_CLICK)
        pub const REASON_CLICK : i32 = 1;

        /// public static final [REASON_ERROR](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#REASON_ERROR)
        pub const REASON_ERROR : i32 = 4;

        /// public static final [REASON_GROUP_OPTIMIZATION](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#REASON_GROUP_OPTIMIZATION)
        pub const REASON_GROUP_OPTIMIZATION : i32 = 13;

        /// public static final [REASON_GROUP_SUMMARY_CANCELED](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#REASON_GROUP_SUMMARY_CANCELED)
        pub const REASON_GROUP_SUMMARY_CANCELED : i32 = 12;

        /// public static final [REASON_LISTENER_CANCEL](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#REASON_LISTENER_CANCEL)
        pub const REASON_LISTENER_CANCEL : i32 = 10;

        /// public static final [REASON_LISTENER_CANCEL_ALL](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#REASON_LISTENER_CANCEL_ALL)
        pub const REASON_LISTENER_CANCEL_ALL : i32 = 11;

        /// public static final [REASON_PACKAGE_BANNED](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#REASON_PACKAGE_BANNED)
        pub const REASON_PACKAGE_BANNED : i32 = 7;

        /// public static final [REASON_PACKAGE_CHANGED](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#REASON_PACKAGE_CHANGED)
        pub const REASON_PACKAGE_CHANGED : i32 = 5;

        /// public static final [REASON_PACKAGE_SUSPENDED](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#REASON_PACKAGE_SUSPENDED)
        pub const REASON_PACKAGE_SUSPENDED : i32 = 14;

        /// public static final [REASON_PROFILE_TURNED_OFF](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#REASON_PROFILE_TURNED_OFF)
        pub const REASON_PROFILE_TURNED_OFF : i32 = 15;

        /// public static final [REASON_SNOOZED](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#REASON_SNOOZED)
        pub const REASON_SNOOZED : i32 = 18;

        /// public static final [REASON_TIMEOUT](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#REASON_TIMEOUT)
        pub const REASON_TIMEOUT : i32 = 19;

        /// public static final [REASON_UNAUTOBUNDLED](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#REASON_UNAUTOBUNDLED)
        pub const REASON_UNAUTOBUNDLED : i32 = 16;

        /// public static final [REASON_USER_STOPPED](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#REASON_USER_STOPPED)
        pub const REASON_USER_STOPPED : i32 = 6;

        /// public static final [SERVICE_INTERFACE](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#SERVICE_INTERFACE)
        pub const SERVICE_INTERFACE : &'static str = "android.service.notification.NotificationListenerService";

        /// public static final [SUPPRESSED_EFFECT_SCREEN_OFF](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#SUPPRESSED_EFFECT_SCREEN_OFF)
        #[deprecated] pub const SUPPRESSED_EFFECT_SCREEN_OFF : i32 = 1;

        /// public static final [SUPPRESSED_EFFECT_SCREEN_ON](https://developer.android.com/reference/android/service/notification/NotificationListenerService.html#SUPPRESSED_EFFECT_SCREEN_ON)
        #[deprecated] pub const SUPPRESSED_EFFECT_SCREEN_ON : i32 = 2;
    }
}
