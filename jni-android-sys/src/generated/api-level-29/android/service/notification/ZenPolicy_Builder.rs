// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-service-notification-ZenPolicy_Builder"))]
__jni_bindgen! {
    /// public final class [ZenPolicy.Builder](https://developer.android.com/reference/android/service/notification/ZenPolicy.Builder.html)
    ///
    /// Required feature: android-service-notification-ZenPolicy_Builder
    public final class ZenPolicy_Builder ("android/service/notification/ZenPolicy$Builder") extends crate::java::lang::Object {

        /// [Builder](https://developer.android.com/reference/android/service/notification/ZenPolicy.Builder.html#Builder())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::service::notification::ZenPolicy_Builder>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/notification/ZenPolicy$Builder", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/notification/ZenPolicy$Builder\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [build](https://developer.android.com/reference/android/service/notification/ZenPolicy.Builder.html#build())
        ///
        /// Required features: "android-service-notification-ZenPolicy"
        #[cfg(any(feature = "all", all(feature = "android-service-notification-ZenPolicy")))]
        pub fn build<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::service::notification::ZenPolicy>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/notification/ZenPolicy$Builder", java.flags == PUBLIC, .name == "build", .descriptor == "()Landroid/service/notification/ZenPolicy;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/notification/ZenPolicy$Builder\0", "build\0", "()Landroid/service/notification/ZenPolicy;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [allowAllSounds](https://developer.android.com/reference/android/service/notification/ZenPolicy.Builder.html#allowAllSounds())
        ///
        /// Required features: "android-service-notification-ZenPolicy_Builder"
        #[cfg(any(feature = "all", all(feature = "android-service-notification-ZenPolicy_Builder")))]
        pub fn allowAllSounds<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::service::notification::ZenPolicy_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/notification/ZenPolicy$Builder", java.flags == PUBLIC, .name == "allowAllSounds", .descriptor == "()Landroid/service/notification/ZenPolicy$Builder;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/notification/ZenPolicy$Builder\0", "allowAllSounds\0", "()Landroid/service/notification/ZenPolicy$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [disallowAllSounds](https://developer.android.com/reference/android/service/notification/ZenPolicy.Builder.html#disallowAllSounds())
        ///
        /// Required features: "android-service-notification-ZenPolicy_Builder"
        #[cfg(any(feature = "all", all(feature = "android-service-notification-ZenPolicy_Builder")))]
        pub fn disallowAllSounds<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::service::notification::ZenPolicy_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/notification/ZenPolicy$Builder", java.flags == PUBLIC, .name == "disallowAllSounds", .descriptor == "()Landroid/service/notification/ZenPolicy$Builder;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/notification/ZenPolicy$Builder\0", "disallowAllSounds\0", "()Landroid/service/notification/ZenPolicy$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [showAllVisualEffects](https://developer.android.com/reference/android/service/notification/ZenPolicy.Builder.html#showAllVisualEffects())
        ///
        /// Required features: "android-service-notification-ZenPolicy_Builder"
        #[cfg(any(feature = "all", all(feature = "android-service-notification-ZenPolicy_Builder")))]
        pub fn showAllVisualEffects<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::service::notification::ZenPolicy_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/notification/ZenPolicy$Builder", java.flags == PUBLIC, .name == "showAllVisualEffects", .descriptor == "()Landroid/service/notification/ZenPolicy$Builder;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/notification/ZenPolicy$Builder\0", "showAllVisualEffects\0", "()Landroid/service/notification/ZenPolicy$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hideAllVisualEffects](https://developer.android.com/reference/android/service/notification/ZenPolicy.Builder.html#hideAllVisualEffects())
        ///
        /// Required features: "android-service-notification-ZenPolicy_Builder"
        #[cfg(any(feature = "all", all(feature = "android-service-notification-ZenPolicy_Builder")))]
        pub fn hideAllVisualEffects<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::service::notification::ZenPolicy_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/notification/ZenPolicy$Builder", java.flags == PUBLIC, .name == "hideAllVisualEffects", .descriptor == "()Landroid/service/notification/ZenPolicy$Builder;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/notification/ZenPolicy$Builder\0", "hideAllVisualEffects\0", "()Landroid/service/notification/ZenPolicy$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [allowReminders](https://developer.android.com/reference/android/service/notification/ZenPolicy.Builder.html#allowReminders(boolean))
        ///
        /// Required features: "android-service-notification-ZenPolicy_Builder"
        #[cfg(any(feature = "all", all(feature = "android-service-notification-ZenPolicy_Builder")))]
        pub fn allowReminders<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::service::notification::ZenPolicy_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/notification/ZenPolicy$Builder", java.flags == PUBLIC, .name == "allowReminders", .descriptor == "(Z)Landroid/service/notification/ZenPolicy$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/notification/ZenPolicy$Builder\0", "allowReminders\0", "(Z)Landroid/service/notification/ZenPolicy$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [allowEvents](https://developer.android.com/reference/android/service/notification/ZenPolicy.Builder.html#allowEvents(boolean))
        ///
        /// Required features: "android-service-notification-ZenPolicy_Builder"
        #[cfg(any(feature = "all", all(feature = "android-service-notification-ZenPolicy_Builder")))]
        pub fn allowEvents<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::service::notification::ZenPolicy_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/notification/ZenPolicy$Builder", java.flags == PUBLIC, .name == "allowEvents", .descriptor == "(Z)Landroid/service/notification/ZenPolicy$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/notification/ZenPolicy$Builder\0", "allowEvents\0", "(Z)Landroid/service/notification/ZenPolicy$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [allowMessages](https://developer.android.com/reference/android/service/notification/ZenPolicy.Builder.html#allowMessages(int))
        ///
        /// Required features: "android-service-notification-ZenPolicy_Builder"
        #[cfg(any(feature = "all", all(feature = "android-service-notification-ZenPolicy_Builder")))]
        pub fn allowMessages<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::service::notification::ZenPolicy_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/notification/ZenPolicy$Builder", java.flags == PUBLIC, .name == "allowMessages", .descriptor == "(I)Landroid/service/notification/ZenPolicy$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/notification/ZenPolicy$Builder\0", "allowMessages\0", "(I)Landroid/service/notification/ZenPolicy$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [allowCalls](https://developer.android.com/reference/android/service/notification/ZenPolicy.Builder.html#allowCalls(int))
        ///
        /// Required features: "android-service-notification-ZenPolicy_Builder"
        #[cfg(any(feature = "all", all(feature = "android-service-notification-ZenPolicy_Builder")))]
        pub fn allowCalls<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::service::notification::ZenPolicy_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/notification/ZenPolicy$Builder", java.flags == PUBLIC, .name == "allowCalls", .descriptor == "(I)Landroid/service/notification/ZenPolicy$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/notification/ZenPolicy$Builder\0", "allowCalls\0", "(I)Landroid/service/notification/ZenPolicy$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [allowRepeatCallers](https://developer.android.com/reference/android/service/notification/ZenPolicy.Builder.html#allowRepeatCallers(boolean))
        ///
        /// Required features: "android-service-notification-ZenPolicy_Builder"
        #[cfg(any(feature = "all", all(feature = "android-service-notification-ZenPolicy_Builder")))]
        pub fn allowRepeatCallers<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::service::notification::ZenPolicy_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/notification/ZenPolicy$Builder", java.flags == PUBLIC, .name == "allowRepeatCallers", .descriptor == "(Z)Landroid/service/notification/ZenPolicy$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/notification/ZenPolicy$Builder\0", "allowRepeatCallers\0", "(Z)Landroid/service/notification/ZenPolicy$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [allowAlarms](https://developer.android.com/reference/android/service/notification/ZenPolicy.Builder.html#allowAlarms(boolean))
        ///
        /// Required features: "android-service-notification-ZenPolicy_Builder"
        #[cfg(any(feature = "all", all(feature = "android-service-notification-ZenPolicy_Builder")))]
        pub fn allowAlarms<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::service::notification::ZenPolicy_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/notification/ZenPolicy$Builder", java.flags == PUBLIC, .name == "allowAlarms", .descriptor == "(Z)Landroid/service/notification/ZenPolicy$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/notification/ZenPolicy$Builder\0", "allowAlarms\0", "(Z)Landroid/service/notification/ZenPolicy$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [allowMedia](https://developer.android.com/reference/android/service/notification/ZenPolicy.Builder.html#allowMedia(boolean))
        ///
        /// Required features: "android-service-notification-ZenPolicy_Builder"
        #[cfg(any(feature = "all", all(feature = "android-service-notification-ZenPolicy_Builder")))]
        pub fn allowMedia<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::service::notification::ZenPolicy_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/notification/ZenPolicy$Builder", java.flags == PUBLIC, .name == "allowMedia", .descriptor == "(Z)Landroid/service/notification/ZenPolicy$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/notification/ZenPolicy$Builder\0", "allowMedia\0", "(Z)Landroid/service/notification/ZenPolicy$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [allowSystem](https://developer.android.com/reference/android/service/notification/ZenPolicy.Builder.html#allowSystem(boolean))
        ///
        /// Required features: "android-service-notification-ZenPolicy_Builder"
        #[cfg(any(feature = "all", all(feature = "android-service-notification-ZenPolicy_Builder")))]
        pub fn allowSystem<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::service::notification::ZenPolicy_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/notification/ZenPolicy$Builder", java.flags == PUBLIC, .name == "allowSystem", .descriptor == "(Z)Landroid/service/notification/ZenPolicy$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/notification/ZenPolicy$Builder\0", "allowSystem\0", "(Z)Landroid/service/notification/ZenPolicy$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [showFullScreenIntent](https://developer.android.com/reference/android/service/notification/ZenPolicy.Builder.html#showFullScreenIntent(boolean))
        ///
        /// Required features: "android-service-notification-ZenPolicy_Builder"
        #[cfg(any(feature = "all", all(feature = "android-service-notification-ZenPolicy_Builder")))]
        pub fn showFullScreenIntent<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::service::notification::ZenPolicy_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/notification/ZenPolicy$Builder", java.flags == PUBLIC, .name == "showFullScreenIntent", .descriptor == "(Z)Landroid/service/notification/ZenPolicy$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/notification/ZenPolicy$Builder\0", "showFullScreenIntent\0", "(Z)Landroid/service/notification/ZenPolicy$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [showLights](https://developer.android.com/reference/android/service/notification/ZenPolicy.Builder.html#showLights(boolean))
        ///
        /// Required features: "android-service-notification-ZenPolicy_Builder"
        #[cfg(any(feature = "all", all(feature = "android-service-notification-ZenPolicy_Builder")))]
        pub fn showLights<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::service::notification::ZenPolicy_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/notification/ZenPolicy$Builder", java.flags == PUBLIC, .name == "showLights", .descriptor == "(Z)Landroid/service/notification/ZenPolicy$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/notification/ZenPolicy$Builder\0", "showLights\0", "(Z)Landroid/service/notification/ZenPolicy$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [showPeeking](https://developer.android.com/reference/android/service/notification/ZenPolicy.Builder.html#showPeeking(boolean))
        ///
        /// Required features: "android-service-notification-ZenPolicy_Builder"
        #[cfg(any(feature = "all", all(feature = "android-service-notification-ZenPolicy_Builder")))]
        pub fn showPeeking<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::service::notification::ZenPolicy_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/notification/ZenPolicy$Builder", java.flags == PUBLIC, .name == "showPeeking", .descriptor == "(Z)Landroid/service/notification/ZenPolicy$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/notification/ZenPolicy$Builder\0", "showPeeking\0", "(Z)Landroid/service/notification/ZenPolicy$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [showStatusBarIcons](https://developer.android.com/reference/android/service/notification/ZenPolicy.Builder.html#showStatusBarIcons(boolean))
        ///
        /// Required features: "android-service-notification-ZenPolicy_Builder"
        #[cfg(any(feature = "all", all(feature = "android-service-notification-ZenPolicy_Builder")))]
        pub fn showStatusBarIcons<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::service::notification::ZenPolicy_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/notification/ZenPolicy$Builder", java.flags == PUBLIC, .name == "showStatusBarIcons", .descriptor == "(Z)Landroid/service/notification/ZenPolicy$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/notification/ZenPolicy$Builder\0", "showStatusBarIcons\0", "(Z)Landroid/service/notification/ZenPolicy$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [showBadges](https://developer.android.com/reference/android/service/notification/ZenPolicy.Builder.html#showBadges(boolean))
        ///
        /// Required features: "android-service-notification-ZenPolicy_Builder"
        #[cfg(any(feature = "all", all(feature = "android-service-notification-ZenPolicy_Builder")))]
        pub fn showBadges<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::service::notification::ZenPolicy_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/notification/ZenPolicy$Builder", java.flags == PUBLIC, .name == "showBadges", .descriptor == "(Z)Landroid/service/notification/ZenPolicy$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/notification/ZenPolicy$Builder\0", "showBadges\0", "(Z)Landroid/service/notification/ZenPolicy$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [showInAmbientDisplay](https://developer.android.com/reference/android/service/notification/ZenPolicy.Builder.html#showInAmbientDisplay(boolean))
        ///
        /// Required features: "android-service-notification-ZenPolicy_Builder"
        #[cfg(any(feature = "all", all(feature = "android-service-notification-ZenPolicy_Builder")))]
        pub fn showInAmbientDisplay<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::service::notification::ZenPolicy_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/notification/ZenPolicy$Builder", java.flags == PUBLIC, .name == "showInAmbientDisplay", .descriptor == "(Z)Landroid/service/notification/ZenPolicy$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/notification/ZenPolicy$Builder\0", "showInAmbientDisplay\0", "(Z)Landroid/service/notification/ZenPolicy$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [showInNotificationList](https://developer.android.com/reference/android/service/notification/ZenPolicy.Builder.html#showInNotificationList(boolean))
        ///
        /// Required features: "android-service-notification-ZenPolicy_Builder"
        #[cfg(any(feature = "all", all(feature = "android-service-notification-ZenPolicy_Builder")))]
        pub fn showInNotificationList<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::service::notification::ZenPolicy_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/notification/ZenPolicy$Builder", java.flags == PUBLIC, .name == "showInNotificationList", .descriptor == "(Z)Landroid/service/notification/ZenPolicy$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/notification/ZenPolicy$Builder\0", "showInNotificationList\0", "(Z)Landroid/service/notification/ZenPolicy$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
