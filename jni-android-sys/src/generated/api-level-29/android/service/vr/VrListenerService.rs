// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-service-vr-VrListenerService"))]
__jni_bindgen! {
    /// public class [VrListenerService](https://developer.android.com/reference/android/service/vr/VrListenerService.html)
    ///
    /// Required feature: android-service-vr-VrListenerService
    public class VrListenerService ("android/service/vr/VrListenerService") extends crate::android::app::Service {

        /// [VrListenerService](https://developer.android.com/reference/android/service/vr/VrListenerService.html#VrListenerService())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::service::vr::VrListenerService>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/vr/VrListenerService", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/vr/VrListenerService\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onBind](https://developer.android.com/reference/android/service/vr/VrListenerService.html#onBind(android.content.Intent))
        ///
        /// Required features: "android-content-Intent", "android-os-IBinder"
        #[cfg(any(feature = "all", all(feature = "android-content-Intent", feature = "android-os-IBinder")))]
        pub fn onBind<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::IBinder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/vr/VrListenerService", java.flags == PUBLIC, .name == "onBind", .descriptor == "(Landroid/content/Intent;)Landroid/os/IBinder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/vr/VrListenerService\0", "onBind\0", "(Landroid/content/Intent;)Landroid/os/IBinder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onCurrentVrActivityChanged](https://developer.android.com/reference/android/service/vr/VrListenerService.html#onCurrentVrActivityChanged(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn onCurrentVrActivityChanged<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/vr/VrListenerService", java.flags == PUBLIC, .name == "onCurrentVrActivityChanged", .descriptor == "(Landroid/content/ComponentName;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/vr/VrListenerService\0", "onCurrentVrActivityChanged\0", "(Landroid/content/ComponentName;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isVrModePackageEnabled](https://developer.android.com/reference/android/service/vr/VrListenerService.html#isVrModePackageEnabled(android.content.Context,%20android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName", "android-content-Context"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "android-content-Context")))]
        pub fn isVrModePackageEnabled<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/vr/VrListenerService", java.flags == PUBLIC | STATIC | FINAL, .name == "isVrModePackageEnabled", .descriptor == "(Landroid/content/Context;Landroid/content/ComponentName;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/service/vr/VrListenerService\0", "isVrModePackageEnabled\0", "(Landroid/content/Context;Landroid/content/ComponentName;)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [SERVICE_INTERFACE](https://developer.android.com/reference/android/service/vr/VrListenerService.html#SERVICE_INTERFACE)
        pub const SERVICE_INTERFACE : &'static str = "android.service.vr.VrListenerService";
    }
}
