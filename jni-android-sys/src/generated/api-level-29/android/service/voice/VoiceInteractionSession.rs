// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-service-voice-VoiceInteractionSession"))]
__jni_bindgen! {
    /// public class [VoiceInteractionSession](https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.html)
    ///
    /// Required feature: android-service-voice-VoiceInteractionSession
    public class VoiceInteractionSession ("android/service/voice/VoiceInteractionSession") extends crate::java::lang::Object, implements crate::android::view::KeyEvent_Callback, crate::android::content::ComponentCallbacks2 {

        /// [VoiceInteractionSession](https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.html#VoiceInteractionSession(android.content.Context))
        ///
        /// Required features: "android-content-Context"
        #[cfg(any(feature = "all", all(feature = "android-content-Context")))]
        pub fn new_Context<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::service::voice::VoiceInteractionSession>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/voice/VoiceInteractionSession", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/content/Context;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/voice/VoiceInteractionSession\0", "<init>\0", "(Landroid/content/Context;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [VoiceInteractionSession](https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.html#VoiceInteractionSession(android.content.Context,%20android.os.Handler))
        ///
        /// Required features: "android-content-Context", "android-os-Handler"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-os-Handler")))]
        pub fn new_Context_Handler<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::service::voice::VoiceInteractionSession>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/voice/VoiceInteractionSession", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/content/Context;Landroid/os/Handler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/voice/VoiceInteractionSession\0", "<init>\0", "(Landroid/content/Context;Landroid/os/Handler;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getContext](https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.html#getContext())
        ///
        /// Required features: "android-content-Context"
        #[cfg(any(feature = "all", all(feature = "android-content-Context")))]
        pub fn getContext<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::Context>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/voice/VoiceInteractionSession", java.flags == PUBLIC, .name == "getContext", .descriptor == "()Landroid/content/Context;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/voice/VoiceInteractionSession\0", "getContext\0", "()Landroid/content/Context;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDisabledShowContext](https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.html#setDisabledShowContext(int))
        pub fn setDisabledShowContext<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/voice/VoiceInteractionSession", java.flags == PUBLIC, .name == "setDisabledShowContext", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/voice/VoiceInteractionSession\0", "setDisabledShowContext\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDisabledShowContext](https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.html#getDisabledShowContext())
        pub fn getDisabledShowContext<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/voice/VoiceInteractionSession", java.flags == PUBLIC, .name == "getDisabledShowContext", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/voice/VoiceInteractionSession\0", "getDisabledShowContext\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getUserDisabledShowContext](https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.html#getUserDisabledShowContext())
        pub fn getUserDisabledShowContext<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/voice/VoiceInteractionSession", java.flags == PUBLIC, .name == "getUserDisabledShowContext", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/voice/VoiceInteractionSession\0", "getUserDisabledShowContext\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [show](https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.html#show(android.os.Bundle,%20int))
        ///
        /// Required features: "android-os-Bundle"
        #[cfg(any(feature = "all", all(feature = "android-os-Bundle")))]
        pub fn show<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/voice/VoiceInteractionSession", java.flags == PUBLIC, .name == "show", .descriptor == "(Landroid/os/Bundle;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/voice/VoiceInteractionSession\0", "show\0", "(Landroid/os/Bundle;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hide](https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.html#hide())
        pub fn hide<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/voice/VoiceInteractionSession", java.flags == PUBLIC, .name == "hide", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/voice/VoiceInteractionSession\0", "hide\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setUiEnabled](https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.html#setUiEnabled(boolean))
        pub fn setUiEnabled<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/voice/VoiceInteractionSession", java.flags == PUBLIC, .name == "setUiEnabled", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/voice/VoiceInteractionSession\0", "setUiEnabled\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTheme](https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.html#setTheme(int))
        pub fn setTheme<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/voice/VoiceInteractionSession", java.flags == PUBLIC, .name == "setTheme", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/voice/VoiceInteractionSession\0", "setTheme\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [startVoiceActivity](https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.html#startVoiceActivity(android.content.Intent))
        ///
        /// Required features: "android-content-Intent"
        #[cfg(any(feature = "all", all(feature = "android-content-Intent")))]
        pub fn startVoiceActivity<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/voice/VoiceInteractionSession", java.flags == PUBLIC, .name == "startVoiceActivity", .descriptor == "(Landroid/content/Intent;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/voice/VoiceInteractionSession\0", "startVoiceActivity\0", "(Landroid/content/Intent;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [startAssistantActivity](https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.html#startAssistantActivity(android.content.Intent))
        ///
        /// Required features: "android-content-Intent"
        #[cfg(any(feature = "all", all(feature = "android-content-Intent")))]
        pub fn startAssistantActivity<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/voice/VoiceInteractionSession", java.flags == PUBLIC, .name == "startAssistantActivity", .descriptor == "(Landroid/content/Intent;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/voice/VoiceInteractionSession\0", "startAssistantActivity\0", "(Landroid/content/Intent;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [requestDirectActions](https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.html#requestDirectActions(android.service.voice.VoiceInteractionSession.ActivityId,%20android.os.CancellationSignal,%20java.util.concurrent.Executor,%20java.util.function.Consumer))
        ///
        /// Required features: "android-os-CancellationSignal", "android-service-voice-VoiceInteractionSession_ActivityId", "java-util-concurrent-Executor", "java-util-function-Consumer"
        #[cfg(any(feature = "all", all(feature = "android-os-CancellationSignal", feature = "android-service-voice-VoiceInteractionSession_ActivityId", feature = "java-util-concurrent-Executor", feature = "java-util-function-Consumer")))]
        pub fn requestDirectActions<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::service::voice::VoiceInteractionSession_ActivityId>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::CancellationSignal>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Consumer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/voice/VoiceInteractionSession", java.flags == PUBLIC | FINAL, .name == "requestDirectActions", .descriptor == "(Landroid/service/voice/VoiceInteractionSession$ActivityId;Landroid/os/CancellationSignal;Ljava/util/concurrent/Executor;Ljava/util/function/Consumer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/voice/VoiceInteractionSession\0", "requestDirectActions\0", "(Landroid/service/voice/VoiceInteractionSession$ActivityId;Landroid/os/CancellationSignal;Ljava/util/concurrent/Executor;Ljava/util/function/Consumer;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onDirectActionsInvalidated](https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.html#onDirectActionsInvalidated(android.service.voice.VoiceInteractionSession.ActivityId))
        ///
        /// Required features: "android-service-voice-VoiceInteractionSession_ActivityId"
        #[cfg(any(feature = "all", all(feature = "android-service-voice-VoiceInteractionSession_ActivityId")))]
        pub fn onDirectActionsInvalidated<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::service::voice::VoiceInteractionSession_ActivityId>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/voice/VoiceInteractionSession", java.flags == PUBLIC, .name == "onDirectActionsInvalidated", .descriptor == "(Landroid/service/voice/VoiceInteractionSession$ActivityId;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/voice/VoiceInteractionSession\0", "onDirectActionsInvalidated\0", "(Landroid/service/voice/VoiceInteractionSession$ActivityId;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [performDirectAction](https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.html#performDirectAction(android.app.DirectAction,%20android.os.Bundle,%20android.os.CancellationSignal,%20java.util.concurrent.Executor,%20java.util.function.Consumer))
        ///
        /// Required features: "android-app-DirectAction", "android-os-Bundle", "android-os-CancellationSignal", "java-util-concurrent-Executor", "java-util-function-Consumer"
        #[cfg(any(feature = "all", all(feature = "android-app-DirectAction", feature = "android-os-Bundle", feature = "android-os-CancellationSignal", feature = "java-util-concurrent-Executor", feature = "java-util-function-Consumer")))]
        pub fn performDirectAction<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::DirectAction>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::CancellationSignal>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Consumer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/voice/VoiceInteractionSession", java.flags == PUBLIC | FINAL, .name == "performDirectAction", .descriptor == "(Landroid/app/DirectAction;Landroid/os/Bundle;Landroid/os/CancellationSignal;Ljava/util/concurrent/Executor;Ljava/util/function/Consumer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/voice/VoiceInteractionSession\0", "performDirectAction\0", "(Landroid/app/DirectAction;Landroid/os/Bundle;Landroid/os/CancellationSignal;Ljava/util/concurrent/Executor;Ljava/util/function/Consumer;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setKeepAwake](https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.html#setKeepAwake(boolean))
        pub fn setKeepAwake<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/voice/VoiceInteractionSession", java.flags == PUBLIC, .name == "setKeepAwake", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/voice/VoiceInteractionSession\0", "setKeepAwake\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [closeSystemDialogs](https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.html#closeSystemDialogs())
        pub fn closeSystemDialogs<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/voice/VoiceInteractionSession", java.flags == PUBLIC, .name == "closeSystemDialogs", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/voice/VoiceInteractionSession\0", "closeSystemDialogs\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLayoutInflater](https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.html#getLayoutInflater())
        ///
        /// Required features: "android-view-LayoutInflater"
        #[cfg(any(feature = "all", all(feature = "android-view-LayoutInflater")))]
        pub fn getLayoutInflater<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::LayoutInflater>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/voice/VoiceInteractionSession", java.flags == PUBLIC, .name == "getLayoutInflater", .descriptor == "()Landroid/view/LayoutInflater;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/voice/VoiceInteractionSession\0", "getLayoutInflater\0", "()Landroid/view/LayoutInflater;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getWindow](https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.html#getWindow())
        ///
        /// Required features: "android-app-Dialog"
        #[cfg(any(feature = "all", all(feature = "android-app-Dialog")))]
        pub fn getWindow<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::app::Dialog>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/voice/VoiceInteractionSession", java.flags == PUBLIC, .name == "getWindow", .descriptor == "()Landroid/app/Dialog;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/voice/VoiceInteractionSession\0", "getWindow\0", "()Landroid/app/Dialog;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [finish](https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.html#finish())
        pub fn finish<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/voice/VoiceInteractionSession", java.flags == PUBLIC, .name == "finish", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/voice/VoiceInteractionSession\0", "finish\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onCreate](https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.html#onCreate())
        pub fn onCreate<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/voice/VoiceInteractionSession", java.flags == PUBLIC, .name == "onCreate", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/voice/VoiceInteractionSession\0", "onCreate\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onPrepareShow](https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.html#onPrepareShow(android.os.Bundle,%20int))
        ///
        /// Required features: "android-os-Bundle"
        #[cfg(any(feature = "all", all(feature = "android-os-Bundle")))]
        pub fn onPrepareShow<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/voice/VoiceInteractionSession", java.flags == PUBLIC, .name == "onPrepareShow", .descriptor == "(Landroid/os/Bundle;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/voice/VoiceInteractionSession\0", "onPrepareShow\0", "(Landroid/os/Bundle;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onShow](https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.html#onShow(android.os.Bundle,%20int))
        ///
        /// Required features: "android-os-Bundle"
        #[cfg(any(feature = "all", all(feature = "android-os-Bundle")))]
        pub fn onShow<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/voice/VoiceInteractionSession", java.flags == PUBLIC, .name == "onShow", .descriptor == "(Landroid/os/Bundle;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/voice/VoiceInteractionSession\0", "onShow\0", "(Landroid/os/Bundle;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onHide](https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.html#onHide())
        pub fn onHide<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/voice/VoiceInteractionSession", java.flags == PUBLIC, .name == "onHide", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/voice/VoiceInteractionSession\0", "onHide\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onDestroy](https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.html#onDestroy())
        pub fn onDestroy<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/voice/VoiceInteractionSession", java.flags == PUBLIC, .name == "onDestroy", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/voice/VoiceInteractionSession\0", "onDestroy\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onCreateContentView](https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.html#onCreateContentView())
        ///
        /// Required features: "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-view-View")))]
        pub fn onCreateContentView<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::View>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/voice/VoiceInteractionSession", java.flags == PUBLIC, .name == "onCreateContentView", .descriptor == "()Landroid/view/View;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/voice/VoiceInteractionSession\0", "onCreateContentView\0", "()Landroid/view/View;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setContentView](https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.html#setContentView(android.view.View))
        ///
        /// Required features: "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-view-View")))]
        pub fn setContentView<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/voice/VoiceInteractionSession", java.flags == PUBLIC, .name == "setContentView", .descriptor == "(Landroid/view/View;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/voice/VoiceInteractionSession\0", "setContentView\0", "(Landroid/view/View;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onAssistStructureFailure](https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.html#onAssistStructureFailure(java.lang.Throwable))
        ///
        /// Required features: "java-lang-Throwable"
        #[cfg(any(feature = "all", all(feature = "java-lang-Throwable")))]
        pub fn onAssistStructureFailure<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Throwable>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/voice/VoiceInteractionSession", java.flags == PUBLIC, .name == "onAssistStructureFailure", .descriptor == "(Ljava/lang/Throwable;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/voice/VoiceInteractionSession\0", "onAssistStructureFailure\0", "(Ljava/lang/Throwable;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onHandleAssist](https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.html#onHandleAssist(android.os.Bundle,%20android.app.assist.AssistStructure,%20android.app.assist.AssistContent))
        ///
        /// Required features: "android-app-assist-AssistContent", "android-app-assist-AssistStructure", "android-os-Bundle"
        #[cfg(any(feature = "all", all(feature = "android-app-assist-AssistContent", feature = "android-app-assist-AssistStructure", feature = "android-os-Bundle")))]
        #[deprecated] pub fn onHandleAssist_Bundle_AssistStructure_AssistContent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::assist::AssistStructure>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::assist::AssistContent>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/voice/VoiceInteractionSession", java.flags == PUBLIC, .name == "onHandleAssist", .descriptor == "(Landroid/os/Bundle;Landroid/app/assist/AssistStructure;Landroid/app/assist/AssistContent;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/voice/VoiceInteractionSession\0", "onHandleAssist\0", "(Landroid/os/Bundle;Landroid/app/assist/AssistStructure;Landroid/app/assist/AssistContent;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onHandleAssist](https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.html#onHandleAssist(android.service.voice.VoiceInteractionSession.AssistState))
        ///
        /// Required features: "android-service-voice-VoiceInteractionSession_AssistState"
        #[cfg(any(feature = "all", all(feature = "android-service-voice-VoiceInteractionSession_AssistState")))]
        pub fn onHandleAssist_AssistState<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::service::voice::VoiceInteractionSession_AssistState>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/voice/VoiceInteractionSession", java.flags == PUBLIC, .name == "onHandleAssist", .descriptor == "(Landroid/service/voice/VoiceInteractionSession$AssistState;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/voice/VoiceInteractionSession\0", "onHandleAssist\0", "(Landroid/service/voice/VoiceInteractionSession$AssistState;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onHandleAssistSecondary](https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.html#onHandleAssistSecondary(android.os.Bundle,%20android.app.assist.AssistStructure,%20android.app.assist.AssistContent,%20int,%20int))
        ///
        /// Required features: "android-app-assist-AssistContent", "android-app-assist-AssistStructure", "android-os-Bundle"
        #[cfg(any(feature = "all", all(feature = "android-app-assist-AssistContent", feature = "android-app-assist-AssistStructure", feature = "android-os-Bundle")))]
        #[deprecated] pub fn onHandleAssistSecondary<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::assist::AssistStructure>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::assist::AssistContent>>, arg3: i32, arg4: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/voice/VoiceInteractionSession", java.flags == PUBLIC, .name == "onHandleAssistSecondary", .descriptor == "(Landroid/os/Bundle;Landroid/app/assist/AssistStructure;Landroid/app/assist/AssistContent;II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/voice/VoiceInteractionSession\0", "onHandleAssistSecondary\0", "(Landroid/os/Bundle;Landroid/app/assist/AssistStructure;Landroid/app/assist/AssistContent;II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onHandleScreenshot](https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.html#onHandleScreenshot(android.graphics.Bitmap))
        ///
        /// Required features: "android-graphics-Bitmap"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Bitmap")))]
        pub fn onHandleScreenshot<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Bitmap>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/voice/VoiceInteractionSession", java.flags == PUBLIC, .name == "onHandleScreenshot", .descriptor == "(Landroid/graphics/Bitmap;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/voice/VoiceInteractionSession\0", "onHandleScreenshot\0", "(Landroid/graphics/Bitmap;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onKeyDown](https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.html#onKeyDown(int,%20android.view.KeyEvent))
        ///
        /// Required features: "android-view-KeyEvent"
        #[cfg(any(feature = "all", all(feature = "android-view-KeyEvent")))]
        pub fn onKeyDown<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::KeyEvent>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/voice/VoiceInteractionSession", java.flags == PUBLIC, .name == "onKeyDown", .descriptor == "(ILandroid/view/KeyEvent;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/voice/VoiceInteractionSession\0", "onKeyDown\0", "(ILandroid/view/KeyEvent;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onKeyLongPress](https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.html#onKeyLongPress(int,%20android.view.KeyEvent))
        ///
        /// Required features: "android-view-KeyEvent"
        #[cfg(any(feature = "all", all(feature = "android-view-KeyEvent")))]
        pub fn onKeyLongPress<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::KeyEvent>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/voice/VoiceInteractionSession", java.flags == PUBLIC, .name == "onKeyLongPress", .descriptor == "(ILandroid/view/KeyEvent;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/voice/VoiceInteractionSession\0", "onKeyLongPress\0", "(ILandroid/view/KeyEvent;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onKeyUp](https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.html#onKeyUp(int,%20android.view.KeyEvent))
        ///
        /// Required features: "android-view-KeyEvent"
        #[cfg(any(feature = "all", all(feature = "android-view-KeyEvent")))]
        pub fn onKeyUp<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::KeyEvent>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/voice/VoiceInteractionSession", java.flags == PUBLIC, .name == "onKeyUp", .descriptor == "(ILandroid/view/KeyEvent;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/voice/VoiceInteractionSession\0", "onKeyUp\0", "(ILandroid/view/KeyEvent;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onKeyMultiple](https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.html#onKeyMultiple(int,%20int,%20android.view.KeyEvent))
        ///
        /// Required features: "android-view-KeyEvent"
        #[cfg(any(feature = "all", all(feature = "android-view-KeyEvent")))]
        pub fn onKeyMultiple<'env>(&'env self, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::KeyEvent>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/voice/VoiceInteractionSession", java.flags == PUBLIC, .name == "onKeyMultiple", .descriptor == "(IILandroid/view/KeyEvent;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/voice/VoiceInteractionSession\0", "onKeyMultiple\0", "(IILandroid/view/KeyEvent;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onBackPressed](https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.html#onBackPressed())
        pub fn onBackPressed<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/voice/VoiceInteractionSession", java.flags == PUBLIC, .name == "onBackPressed", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/voice/VoiceInteractionSession\0", "onBackPressed\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onCloseSystemDialogs](https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.html#onCloseSystemDialogs())
        pub fn onCloseSystemDialogs<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/voice/VoiceInteractionSession", java.flags == PUBLIC, .name == "onCloseSystemDialogs", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/voice/VoiceInteractionSession\0", "onCloseSystemDialogs\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onLockscreenShown](https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.html#onLockscreenShown())
        pub fn onLockscreenShown<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/voice/VoiceInteractionSession", java.flags == PUBLIC, .name == "onLockscreenShown", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/voice/VoiceInteractionSession\0", "onLockscreenShown\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onConfigurationChanged](https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.html#onConfigurationChanged(android.content.res.Configuration))
        ///
        /// Required features: "android-content-res-Configuration"
        #[cfg(any(feature = "all", all(feature = "android-content-res-Configuration")))]
        pub fn onConfigurationChanged<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::res::Configuration>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/voice/VoiceInteractionSession", java.flags == PUBLIC, .name == "onConfigurationChanged", .descriptor == "(Landroid/content/res/Configuration;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/voice/VoiceInteractionSession\0", "onConfigurationChanged\0", "(Landroid/content/res/Configuration;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onLowMemory](https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.html#onLowMemory())
        pub fn onLowMemory<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/voice/VoiceInteractionSession", java.flags == PUBLIC, .name == "onLowMemory", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/voice/VoiceInteractionSession\0", "onLowMemory\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onTrimMemory](https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.html#onTrimMemory(int))
        pub fn onTrimMemory<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/voice/VoiceInteractionSession", java.flags == PUBLIC, .name == "onTrimMemory", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/voice/VoiceInteractionSession\0", "onTrimMemory\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onComputeInsets](https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.html#onComputeInsets(android.service.voice.VoiceInteractionSession.Insets))
        ///
        /// Required features: "android-service-voice-VoiceInteractionSession_Insets"
        #[cfg(any(feature = "all", all(feature = "android-service-voice-VoiceInteractionSession_Insets")))]
        pub fn onComputeInsets<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::service::voice::VoiceInteractionSession_Insets>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/voice/VoiceInteractionSession", java.flags == PUBLIC, .name == "onComputeInsets", .descriptor == "(Landroid/service/voice/VoiceInteractionSession$Insets;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/voice/VoiceInteractionSession\0", "onComputeInsets\0", "(Landroid/service/voice/VoiceInteractionSession$Insets;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onTaskStarted](https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.html#onTaskStarted(android.content.Intent,%20int))
        ///
        /// Required features: "android-content-Intent"
        #[cfg(any(feature = "all", all(feature = "android-content-Intent")))]
        pub fn onTaskStarted<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/voice/VoiceInteractionSession", java.flags == PUBLIC, .name == "onTaskStarted", .descriptor == "(Landroid/content/Intent;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/voice/VoiceInteractionSession\0", "onTaskStarted\0", "(Landroid/content/Intent;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onTaskFinished](https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.html#onTaskFinished(android.content.Intent,%20int))
        ///
        /// Required features: "android-content-Intent"
        #[cfg(any(feature = "all", all(feature = "android-content-Intent")))]
        pub fn onTaskFinished<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/voice/VoiceInteractionSession", java.flags == PUBLIC, .name == "onTaskFinished", .descriptor == "(Landroid/content/Intent;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/voice/VoiceInteractionSession\0", "onTaskFinished\0", "(Landroid/content/Intent;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onGetSupportedCommands](https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.html#onGetSupportedCommands(java.lang.String%5B%5D))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn onGetSupportedCommands<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::BooleanArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/voice/VoiceInteractionSession", java.flags == PUBLIC, .name == "onGetSupportedCommands", .descriptor == "([Ljava/lang/String;)[Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/voice/VoiceInteractionSession\0", "onGetSupportedCommands\0", "([Ljava/lang/String;)[Z\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onRequestConfirmation](https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.html#onRequestConfirmation(android.service.voice.VoiceInteractionSession.ConfirmationRequest))
        ///
        /// Required features: "android-service-voice-VoiceInteractionSession_ConfirmationRequest"
        #[cfg(any(feature = "all", all(feature = "android-service-voice-VoiceInteractionSession_ConfirmationRequest")))]
        pub fn onRequestConfirmation<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::service::voice::VoiceInteractionSession_ConfirmationRequest>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/voice/VoiceInteractionSession", java.flags == PUBLIC, .name == "onRequestConfirmation", .descriptor == "(Landroid/service/voice/VoiceInteractionSession$ConfirmationRequest;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/voice/VoiceInteractionSession\0", "onRequestConfirmation\0", "(Landroid/service/voice/VoiceInteractionSession$ConfirmationRequest;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onRequestPickOption](https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.html#onRequestPickOption(android.service.voice.VoiceInteractionSession.PickOptionRequest))
        ///
        /// Required features: "android-service-voice-VoiceInteractionSession_PickOptionRequest"
        #[cfg(any(feature = "all", all(feature = "android-service-voice-VoiceInteractionSession_PickOptionRequest")))]
        pub fn onRequestPickOption<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::service::voice::VoiceInteractionSession_PickOptionRequest>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/voice/VoiceInteractionSession", java.flags == PUBLIC, .name == "onRequestPickOption", .descriptor == "(Landroid/service/voice/VoiceInteractionSession$PickOptionRequest;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/voice/VoiceInteractionSession\0", "onRequestPickOption\0", "(Landroid/service/voice/VoiceInteractionSession$PickOptionRequest;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onRequestCompleteVoice](https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.html#onRequestCompleteVoice(android.service.voice.VoiceInteractionSession.CompleteVoiceRequest))
        ///
        /// Required features: "android-service-voice-VoiceInteractionSession_CompleteVoiceRequest"
        #[cfg(any(feature = "all", all(feature = "android-service-voice-VoiceInteractionSession_CompleteVoiceRequest")))]
        pub fn onRequestCompleteVoice<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::service::voice::VoiceInteractionSession_CompleteVoiceRequest>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/voice/VoiceInteractionSession", java.flags == PUBLIC, .name == "onRequestCompleteVoice", .descriptor == "(Landroid/service/voice/VoiceInteractionSession$CompleteVoiceRequest;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/voice/VoiceInteractionSession\0", "onRequestCompleteVoice\0", "(Landroid/service/voice/VoiceInteractionSession$CompleteVoiceRequest;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onRequestAbortVoice](https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.html#onRequestAbortVoice(android.service.voice.VoiceInteractionSession.AbortVoiceRequest))
        ///
        /// Required features: "android-service-voice-VoiceInteractionSession_AbortVoiceRequest"
        #[cfg(any(feature = "all", all(feature = "android-service-voice-VoiceInteractionSession_AbortVoiceRequest")))]
        pub fn onRequestAbortVoice<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::service::voice::VoiceInteractionSession_AbortVoiceRequest>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/voice/VoiceInteractionSession", java.flags == PUBLIC, .name == "onRequestAbortVoice", .descriptor == "(Landroid/service/voice/VoiceInteractionSession$AbortVoiceRequest;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/voice/VoiceInteractionSession\0", "onRequestAbortVoice\0", "(Landroid/service/voice/VoiceInteractionSession$AbortVoiceRequest;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onRequestCommand](https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.html#onRequestCommand(android.service.voice.VoiceInteractionSession.CommandRequest))
        ///
        /// Required features: "android-service-voice-VoiceInteractionSession_CommandRequest"
        #[cfg(any(feature = "all", all(feature = "android-service-voice-VoiceInteractionSession_CommandRequest")))]
        pub fn onRequestCommand<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::service::voice::VoiceInteractionSession_CommandRequest>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/voice/VoiceInteractionSession", java.flags == PUBLIC, .name == "onRequestCommand", .descriptor == "(Landroid/service/voice/VoiceInteractionSession$CommandRequest;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/voice/VoiceInteractionSession\0", "onRequestCommand\0", "(Landroid/service/voice/VoiceInteractionSession$CommandRequest;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onCancelRequest](https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.html#onCancelRequest(android.service.voice.VoiceInteractionSession.Request))
        ///
        /// Required features: "android-service-voice-VoiceInteractionSession_Request"
        #[cfg(any(feature = "all", all(feature = "android-service-voice-VoiceInteractionSession_Request")))]
        pub fn onCancelRequest<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::service::voice::VoiceInteractionSession_Request>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/voice/VoiceInteractionSession", java.flags == PUBLIC, .name == "onCancelRequest", .descriptor == "(Landroid/service/voice/VoiceInteractionSession$Request;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/voice/VoiceInteractionSession\0", "onCancelRequest\0", "(Landroid/service/voice/VoiceInteractionSession$Request;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dump](https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.html#dump(java.lang.String,%20java.io.FileDescriptor,%20java.io.PrintWriter,%20java.lang.String%5B%5D))
        ///
        /// Required features: "java-io-FileDescriptor", "java-io-PrintWriter", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-io-FileDescriptor", feature = "java-io-PrintWriter", feature = "java-lang-String")))]
        pub fn dump<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::FileDescriptor>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::PrintWriter>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/voice/VoiceInteractionSession", java.flags == PUBLIC, .name == "dump", .descriptor == "(Ljava/lang/String;Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/voice/VoiceInteractionSession\0", "dump\0", "(Ljava/lang/String;Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [SHOW_SOURCE_ACTIVITY](https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.html#SHOW_SOURCE_ACTIVITY)
        pub const SHOW_SOURCE_ACTIVITY : i32 = 16;

        /// public static final [SHOW_SOURCE_APPLICATION](https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.html#SHOW_SOURCE_APPLICATION)
        pub const SHOW_SOURCE_APPLICATION : i32 = 8;

        /// public static final [SHOW_SOURCE_ASSIST_GESTURE](https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.html#SHOW_SOURCE_ASSIST_GESTURE)
        pub const SHOW_SOURCE_ASSIST_GESTURE : i32 = 4;

        /// public static final [SHOW_SOURCE_AUTOMOTIVE_SYSTEM_UI](https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.html#SHOW_SOURCE_AUTOMOTIVE_SYSTEM_UI)
        pub const SHOW_SOURCE_AUTOMOTIVE_SYSTEM_UI : i32 = 128;

        /// public static final [SHOW_SOURCE_NOTIFICATION](https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.html#SHOW_SOURCE_NOTIFICATION)
        pub const SHOW_SOURCE_NOTIFICATION : i32 = 64;

        /// public static final [SHOW_SOURCE_PUSH_TO_TALK](https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.html#SHOW_SOURCE_PUSH_TO_TALK)
        pub const SHOW_SOURCE_PUSH_TO_TALK : i32 = 32;

        /// public static final [SHOW_WITH_ASSIST](https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.html#SHOW_WITH_ASSIST)
        pub const SHOW_WITH_ASSIST : i32 = 1;

        /// public static final [SHOW_WITH_SCREENSHOT](https://developer.android.com/reference/android/service/voice/VoiceInteractionSession.html#SHOW_WITH_SCREENSHOT)
        pub const SHOW_WITH_SCREENSHOT : i32 = 2;
    }
}
