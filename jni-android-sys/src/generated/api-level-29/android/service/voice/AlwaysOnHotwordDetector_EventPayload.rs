// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-service-voice-AlwaysOnHotwordDetector_EventPayload"))]
__jni_bindgen! {
    /// public class [AlwaysOnHotwordDetector.EventPayload](https://developer.android.com/reference/android/service/voice/AlwaysOnHotwordDetector.EventPayload.html)
    ///
    /// Required feature: android-service-voice-AlwaysOnHotwordDetector_EventPayload
    public class AlwaysOnHotwordDetector_EventPayload ("android/service/voice/AlwaysOnHotwordDetector$EventPayload") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [EventPayload](https://developer.android.com/reference/android/service/voice/AlwaysOnHotwordDetector.EventPayload.html#EventPayload(boolean,%20boolean,%20android.media.AudioFormat,%20int,%20byte%5B%5D))
        // ///
        // /// Required features: "android-media-AudioFormat"
        // #[cfg(any(feature = "all", all(feature = "android-media-AudioFormat")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: bool, arg1: bool, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::AudioFormat>>, arg3: i32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::service::voice::AlwaysOnHotwordDetector_EventPayload>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/service/voice/AlwaysOnHotwordDetector$EventPayload", java.flags == (empty), .name == "<init>", .descriptor == "(ZZLandroid/media/AudioFormat;I[B)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into())];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/voice/AlwaysOnHotwordDetector$EventPayload\0", "<init>\0", "(ZZLandroid/media/AudioFormat;I[B)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getCaptureAudioFormat](https://developer.android.com/reference/android/service/voice/AlwaysOnHotwordDetector.EventPayload.html#getCaptureAudioFormat())
        ///
        /// Required features: "android-media-AudioFormat"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioFormat")))]
        pub fn getCaptureAudioFormat<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::AudioFormat>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/voice/AlwaysOnHotwordDetector$EventPayload", java.flags == PUBLIC, .name == "getCaptureAudioFormat", .descriptor == "()Landroid/media/AudioFormat;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/voice/AlwaysOnHotwordDetector$EventPayload\0", "getCaptureAudioFormat\0", "()Landroid/media/AudioFormat;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTriggerAudio](https://developer.android.com/reference/android/service/voice/AlwaysOnHotwordDetector.EventPayload.html#getTriggerAudio())
        pub fn getTriggerAudio<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ByteArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/service/voice/AlwaysOnHotwordDetector$EventPayload", java.flags == PUBLIC, .name == "getTriggerAudio", .descriptor == "()[B"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/service/voice/AlwaysOnHotwordDetector$EventPayload\0", "getTriggerAudio\0", "()[B\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
