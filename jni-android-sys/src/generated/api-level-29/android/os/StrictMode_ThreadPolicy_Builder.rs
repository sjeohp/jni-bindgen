// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-os-StrictMode_ThreadPolicy_Builder"))]
__jni_bindgen! {
    /// public final class [StrictMode.ThreadPolicy.Builder](https://developer.android.com/reference/android/os/StrictMode.ThreadPolicy.Builder.html)
    ///
    /// Required feature: android-os-StrictMode_ThreadPolicy_Builder
    public final class StrictMode_ThreadPolicy_Builder ("android/os/StrictMode$ThreadPolicy$Builder") extends crate::java::lang::Object {

        /// [Builder](https://developer.android.com/reference/android/os/StrictMode.ThreadPolicy.Builder.html#Builder())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::os::StrictMode_ThreadPolicy_Builder>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/StrictMode$ThreadPolicy$Builder", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/StrictMode$ThreadPolicy$Builder\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [Builder](https://developer.android.com/reference/android/os/StrictMode.ThreadPolicy.Builder.html#Builder(android.os.StrictMode.ThreadPolicy))
        ///
        /// Required features: "android-os-StrictMode_ThreadPolicy"
        #[cfg(any(feature = "all", all(feature = "android-os-StrictMode_ThreadPolicy")))]
        pub fn new_ThreadPolicy<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::StrictMode_ThreadPolicy>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::os::StrictMode_ThreadPolicy_Builder>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/StrictMode$ThreadPolicy$Builder", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/os/StrictMode$ThreadPolicy;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/StrictMode$ThreadPolicy$Builder\0", "<init>\0", "(Landroid/os/StrictMode$ThreadPolicy;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [detectAll](https://developer.android.com/reference/android/os/StrictMode.ThreadPolicy.Builder.html#detectAll())
        ///
        /// Required features: "android-os-StrictMode_ThreadPolicy_Builder"
        #[cfg(any(feature = "all", all(feature = "android-os-StrictMode_ThreadPolicy_Builder")))]
        pub fn detectAll<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::StrictMode_ThreadPolicy_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/StrictMode$ThreadPolicy$Builder", java.flags == PUBLIC, .name == "detectAll", .descriptor == "()Landroid/os/StrictMode$ThreadPolicy$Builder;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/StrictMode$ThreadPolicy$Builder\0", "detectAll\0", "()Landroid/os/StrictMode$ThreadPolicy$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [permitAll](https://developer.android.com/reference/android/os/StrictMode.ThreadPolicy.Builder.html#permitAll())
        ///
        /// Required features: "android-os-StrictMode_ThreadPolicy_Builder"
        #[cfg(any(feature = "all", all(feature = "android-os-StrictMode_ThreadPolicy_Builder")))]
        pub fn permitAll<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::StrictMode_ThreadPolicy_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/StrictMode$ThreadPolicy$Builder", java.flags == PUBLIC, .name == "permitAll", .descriptor == "()Landroid/os/StrictMode$ThreadPolicy$Builder;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/StrictMode$ThreadPolicy$Builder\0", "permitAll\0", "()Landroid/os/StrictMode$ThreadPolicy$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [detectNetwork](https://developer.android.com/reference/android/os/StrictMode.ThreadPolicy.Builder.html#detectNetwork())
        ///
        /// Required features: "android-os-StrictMode_ThreadPolicy_Builder"
        #[cfg(any(feature = "all", all(feature = "android-os-StrictMode_ThreadPolicy_Builder")))]
        pub fn detectNetwork<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::StrictMode_ThreadPolicy_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/StrictMode$ThreadPolicy$Builder", java.flags == PUBLIC, .name == "detectNetwork", .descriptor == "()Landroid/os/StrictMode$ThreadPolicy$Builder;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/StrictMode$ThreadPolicy$Builder\0", "detectNetwork\0", "()Landroid/os/StrictMode$ThreadPolicy$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [permitNetwork](https://developer.android.com/reference/android/os/StrictMode.ThreadPolicy.Builder.html#permitNetwork())
        ///
        /// Required features: "android-os-StrictMode_ThreadPolicy_Builder"
        #[cfg(any(feature = "all", all(feature = "android-os-StrictMode_ThreadPolicy_Builder")))]
        pub fn permitNetwork<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::StrictMode_ThreadPolicy_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/StrictMode$ThreadPolicy$Builder", java.flags == PUBLIC, .name == "permitNetwork", .descriptor == "()Landroid/os/StrictMode$ThreadPolicy$Builder;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/StrictMode$ThreadPolicy$Builder\0", "permitNetwork\0", "()Landroid/os/StrictMode$ThreadPolicy$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [detectDiskReads](https://developer.android.com/reference/android/os/StrictMode.ThreadPolicy.Builder.html#detectDiskReads())
        ///
        /// Required features: "android-os-StrictMode_ThreadPolicy_Builder"
        #[cfg(any(feature = "all", all(feature = "android-os-StrictMode_ThreadPolicy_Builder")))]
        pub fn detectDiskReads<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::StrictMode_ThreadPolicy_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/StrictMode$ThreadPolicy$Builder", java.flags == PUBLIC, .name == "detectDiskReads", .descriptor == "()Landroid/os/StrictMode$ThreadPolicy$Builder;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/StrictMode$ThreadPolicy$Builder\0", "detectDiskReads\0", "()Landroid/os/StrictMode$ThreadPolicy$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [permitDiskReads](https://developer.android.com/reference/android/os/StrictMode.ThreadPolicy.Builder.html#permitDiskReads())
        ///
        /// Required features: "android-os-StrictMode_ThreadPolicy_Builder"
        #[cfg(any(feature = "all", all(feature = "android-os-StrictMode_ThreadPolicy_Builder")))]
        pub fn permitDiskReads<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::StrictMode_ThreadPolicy_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/StrictMode$ThreadPolicy$Builder", java.flags == PUBLIC, .name == "permitDiskReads", .descriptor == "()Landroid/os/StrictMode$ThreadPolicy$Builder;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/StrictMode$ThreadPolicy$Builder\0", "permitDiskReads\0", "()Landroid/os/StrictMode$ThreadPolicy$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [detectCustomSlowCalls](https://developer.android.com/reference/android/os/StrictMode.ThreadPolicy.Builder.html#detectCustomSlowCalls())
        ///
        /// Required features: "android-os-StrictMode_ThreadPolicy_Builder"
        #[cfg(any(feature = "all", all(feature = "android-os-StrictMode_ThreadPolicy_Builder")))]
        pub fn detectCustomSlowCalls<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::StrictMode_ThreadPolicy_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/StrictMode$ThreadPolicy$Builder", java.flags == PUBLIC, .name == "detectCustomSlowCalls", .descriptor == "()Landroid/os/StrictMode$ThreadPolicy$Builder;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/StrictMode$ThreadPolicy$Builder\0", "detectCustomSlowCalls\0", "()Landroid/os/StrictMode$ThreadPolicy$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [permitCustomSlowCalls](https://developer.android.com/reference/android/os/StrictMode.ThreadPolicy.Builder.html#permitCustomSlowCalls())
        ///
        /// Required features: "android-os-StrictMode_ThreadPolicy_Builder"
        #[cfg(any(feature = "all", all(feature = "android-os-StrictMode_ThreadPolicy_Builder")))]
        pub fn permitCustomSlowCalls<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::StrictMode_ThreadPolicy_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/StrictMode$ThreadPolicy$Builder", java.flags == PUBLIC, .name == "permitCustomSlowCalls", .descriptor == "()Landroid/os/StrictMode$ThreadPolicy$Builder;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/StrictMode$ThreadPolicy$Builder\0", "permitCustomSlowCalls\0", "()Landroid/os/StrictMode$ThreadPolicy$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [permitResourceMismatches](https://developer.android.com/reference/android/os/StrictMode.ThreadPolicy.Builder.html#permitResourceMismatches())
        ///
        /// Required features: "android-os-StrictMode_ThreadPolicy_Builder"
        #[cfg(any(feature = "all", all(feature = "android-os-StrictMode_ThreadPolicy_Builder")))]
        pub fn permitResourceMismatches<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::StrictMode_ThreadPolicy_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/StrictMode$ThreadPolicy$Builder", java.flags == PUBLIC, .name == "permitResourceMismatches", .descriptor == "()Landroid/os/StrictMode$ThreadPolicy$Builder;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/StrictMode$ThreadPolicy$Builder\0", "permitResourceMismatches\0", "()Landroid/os/StrictMode$ThreadPolicy$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [detectUnbufferedIo](https://developer.android.com/reference/android/os/StrictMode.ThreadPolicy.Builder.html#detectUnbufferedIo())
        ///
        /// Required features: "android-os-StrictMode_ThreadPolicy_Builder"
        #[cfg(any(feature = "all", all(feature = "android-os-StrictMode_ThreadPolicy_Builder")))]
        pub fn detectUnbufferedIo<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::StrictMode_ThreadPolicy_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/StrictMode$ThreadPolicy$Builder", java.flags == PUBLIC, .name == "detectUnbufferedIo", .descriptor == "()Landroid/os/StrictMode$ThreadPolicy$Builder;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/StrictMode$ThreadPolicy$Builder\0", "detectUnbufferedIo\0", "()Landroid/os/StrictMode$ThreadPolicy$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [permitUnbufferedIo](https://developer.android.com/reference/android/os/StrictMode.ThreadPolicy.Builder.html#permitUnbufferedIo())
        ///
        /// Required features: "android-os-StrictMode_ThreadPolicy_Builder"
        #[cfg(any(feature = "all", all(feature = "android-os-StrictMode_ThreadPolicy_Builder")))]
        pub fn permitUnbufferedIo<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::StrictMode_ThreadPolicy_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/StrictMode$ThreadPolicy$Builder", java.flags == PUBLIC, .name == "permitUnbufferedIo", .descriptor == "()Landroid/os/StrictMode$ThreadPolicy$Builder;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/StrictMode$ThreadPolicy$Builder\0", "permitUnbufferedIo\0", "()Landroid/os/StrictMode$ThreadPolicy$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [detectResourceMismatches](https://developer.android.com/reference/android/os/StrictMode.ThreadPolicy.Builder.html#detectResourceMismatches())
        ///
        /// Required features: "android-os-StrictMode_ThreadPolicy_Builder"
        #[cfg(any(feature = "all", all(feature = "android-os-StrictMode_ThreadPolicy_Builder")))]
        pub fn detectResourceMismatches<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::StrictMode_ThreadPolicy_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/StrictMode$ThreadPolicy$Builder", java.flags == PUBLIC, .name == "detectResourceMismatches", .descriptor == "()Landroid/os/StrictMode$ThreadPolicy$Builder;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/StrictMode$ThreadPolicy$Builder\0", "detectResourceMismatches\0", "()Landroid/os/StrictMode$ThreadPolicy$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [detectDiskWrites](https://developer.android.com/reference/android/os/StrictMode.ThreadPolicy.Builder.html#detectDiskWrites())
        ///
        /// Required features: "android-os-StrictMode_ThreadPolicy_Builder"
        #[cfg(any(feature = "all", all(feature = "android-os-StrictMode_ThreadPolicy_Builder")))]
        pub fn detectDiskWrites<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::StrictMode_ThreadPolicy_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/StrictMode$ThreadPolicy$Builder", java.flags == PUBLIC, .name == "detectDiskWrites", .descriptor == "()Landroid/os/StrictMode$ThreadPolicy$Builder;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/StrictMode$ThreadPolicy$Builder\0", "detectDiskWrites\0", "()Landroid/os/StrictMode$ThreadPolicy$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [permitDiskWrites](https://developer.android.com/reference/android/os/StrictMode.ThreadPolicy.Builder.html#permitDiskWrites())
        ///
        /// Required features: "android-os-StrictMode_ThreadPolicy_Builder"
        #[cfg(any(feature = "all", all(feature = "android-os-StrictMode_ThreadPolicy_Builder")))]
        pub fn permitDiskWrites<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::StrictMode_ThreadPolicy_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/StrictMode$ThreadPolicy$Builder", java.flags == PUBLIC, .name == "permitDiskWrites", .descriptor == "()Landroid/os/StrictMode$ThreadPolicy$Builder;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/StrictMode$ThreadPolicy$Builder\0", "permitDiskWrites\0", "()Landroid/os/StrictMode$ThreadPolicy$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [penaltyDialog](https://developer.android.com/reference/android/os/StrictMode.ThreadPolicy.Builder.html#penaltyDialog())
        ///
        /// Required features: "android-os-StrictMode_ThreadPolicy_Builder"
        #[cfg(any(feature = "all", all(feature = "android-os-StrictMode_ThreadPolicy_Builder")))]
        pub fn penaltyDialog<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::StrictMode_ThreadPolicy_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/StrictMode$ThreadPolicy$Builder", java.flags == PUBLIC, .name == "penaltyDialog", .descriptor == "()Landroid/os/StrictMode$ThreadPolicy$Builder;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/StrictMode$ThreadPolicy$Builder\0", "penaltyDialog\0", "()Landroid/os/StrictMode$ThreadPolicy$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [penaltyDeath](https://developer.android.com/reference/android/os/StrictMode.ThreadPolicy.Builder.html#penaltyDeath())
        ///
        /// Required features: "android-os-StrictMode_ThreadPolicy_Builder"
        #[cfg(any(feature = "all", all(feature = "android-os-StrictMode_ThreadPolicy_Builder")))]
        pub fn penaltyDeath<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::StrictMode_ThreadPolicy_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/StrictMode$ThreadPolicy$Builder", java.flags == PUBLIC, .name == "penaltyDeath", .descriptor == "()Landroid/os/StrictMode$ThreadPolicy$Builder;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/StrictMode$ThreadPolicy$Builder\0", "penaltyDeath\0", "()Landroid/os/StrictMode$ThreadPolicy$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [penaltyDeathOnNetwork](https://developer.android.com/reference/android/os/StrictMode.ThreadPolicy.Builder.html#penaltyDeathOnNetwork())
        ///
        /// Required features: "android-os-StrictMode_ThreadPolicy_Builder"
        #[cfg(any(feature = "all", all(feature = "android-os-StrictMode_ThreadPolicy_Builder")))]
        pub fn penaltyDeathOnNetwork<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::StrictMode_ThreadPolicy_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/StrictMode$ThreadPolicy$Builder", java.flags == PUBLIC, .name == "penaltyDeathOnNetwork", .descriptor == "()Landroid/os/StrictMode$ThreadPolicy$Builder;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/StrictMode$ThreadPolicy$Builder\0", "penaltyDeathOnNetwork\0", "()Landroid/os/StrictMode$ThreadPolicy$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [penaltyFlashScreen](https://developer.android.com/reference/android/os/StrictMode.ThreadPolicy.Builder.html#penaltyFlashScreen())
        ///
        /// Required features: "android-os-StrictMode_ThreadPolicy_Builder"
        #[cfg(any(feature = "all", all(feature = "android-os-StrictMode_ThreadPolicy_Builder")))]
        pub fn penaltyFlashScreen<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::StrictMode_ThreadPolicy_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/StrictMode$ThreadPolicy$Builder", java.flags == PUBLIC, .name == "penaltyFlashScreen", .descriptor == "()Landroid/os/StrictMode$ThreadPolicy$Builder;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/StrictMode$ThreadPolicy$Builder\0", "penaltyFlashScreen\0", "()Landroid/os/StrictMode$ThreadPolicy$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [penaltyLog](https://developer.android.com/reference/android/os/StrictMode.ThreadPolicy.Builder.html#penaltyLog())
        ///
        /// Required features: "android-os-StrictMode_ThreadPolicy_Builder"
        #[cfg(any(feature = "all", all(feature = "android-os-StrictMode_ThreadPolicy_Builder")))]
        pub fn penaltyLog<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::StrictMode_ThreadPolicy_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/StrictMode$ThreadPolicy$Builder", java.flags == PUBLIC, .name == "penaltyLog", .descriptor == "()Landroid/os/StrictMode$ThreadPolicy$Builder;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/StrictMode$ThreadPolicy$Builder\0", "penaltyLog\0", "()Landroid/os/StrictMode$ThreadPolicy$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [penaltyDropBox](https://developer.android.com/reference/android/os/StrictMode.ThreadPolicy.Builder.html#penaltyDropBox())
        ///
        /// Required features: "android-os-StrictMode_ThreadPolicy_Builder"
        #[cfg(any(feature = "all", all(feature = "android-os-StrictMode_ThreadPolicy_Builder")))]
        pub fn penaltyDropBox<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::StrictMode_ThreadPolicy_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/StrictMode$ThreadPolicy$Builder", java.flags == PUBLIC, .name == "penaltyDropBox", .descriptor == "()Landroid/os/StrictMode$ThreadPolicy$Builder;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/StrictMode$ThreadPolicy$Builder\0", "penaltyDropBox\0", "()Landroid/os/StrictMode$ThreadPolicy$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [penaltyListener](https://developer.android.com/reference/android/os/StrictMode.ThreadPolicy.Builder.html#penaltyListener(java.util.concurrent.Executor,%20android.os.StrictMode.OnThreadViolationListener))
        ///
        /// Required features: "android-os-StrictMode_OnThreadViolationListener", "android-os-StrictMode_ThreadPolicy_Builder", "java-util-concurrent-Executor"
        #[cfg(any(feature = "all", all(feature = "android-os-StrictMode_OnThreadViolationListener", feature = "android-os-StrictMode_ThreadPolicy_Builder", feature = "java-util-concurrent-Executor")))]
        pub fn penaltyListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::StrictMode_OnThreadViolationListener>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::StrictMode_ThreadPolicy_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/StrictMode$ThreadPolicy$Builder", java.flags == PUBLIC, .name == "penaltyListener", .descriptor == "(Ljava/util/concurrent/Executor;Landroid/os/StrictMode$OnThreadViolationListener;)Landroid/os/StrictMode$ThreadPolicy$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/StrictMode$ThreadPolicy$Builder\0", "penaltyListener\0", "(Ljava/util/concurrent/Executor;Landroid/os/StrictMode$OnThreadViolationListener;)Landroid/os/StrictMode$ThreadPolicy$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [build](https://developer.android.com/reference/android/os/StrictMode.ThreadPolicy.Builder.html#build())
        ///
        /// Required features: "android-os-StrictMode_ThreadPolicy"
        #[cfg(any(feature = "all", all(feature = "android-os-StrictMode_ThreadPolicy")))]
        pub fn build<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::StrictMode_ThreadPolicy>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/StrictMode$ThreadPolicy$Builder", java.flags == PUBLIC, .name == "build", .descriptor == "()Landroid/os/StrictMode$ThreadPolicy;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/StrictMode$ThreadPolicy$Builder\0", "build\0", "()Landroid/os/StrictMode$ThreadPolicy;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
