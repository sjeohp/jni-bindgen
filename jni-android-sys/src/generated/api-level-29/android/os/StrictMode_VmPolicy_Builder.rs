// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-os-StrictMode_VmPolicy_Builder"))]
__jni_bindgen! {
    /// public final class [StrictMode.VmPolicy.Builder](https://developer.android.com/reference/android/os/StrictMode.VmPolicy.Builder.html)
    ///
    /// Required feature: android-os-StrictMode_VmPolicy_Builder
    public final class StrictMode_VmPolicy_Builder ("android/os/StrictMode$VmPolicy$Builder") extends crate::java::lang::Object {

        /// [Builder](https://developer.android.com/reference/android/os/StrictMode.VmPolicy.Builder.html#Builder())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::os::StrictMode_VmPolicy_Builder>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/StrictMode$VmPolicy$Builder", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/StrictMode$VmPolicy$Builder\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [Builder](https://developer.android.com/reference/android/os/StrictMode.VmPolicy.Builder.html#Builder(android.os.StrictMode.VmPolicy))
        ///
        /// Required features: "android-os-StrictMode_VmPolicy"
        #[cfg(any(feature = "all", all(feature = "android-os-StrictMode_VmPolicy")))]
        pub fn new_VmPolicy<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::StrictMode_VmPolicy>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::os::StrictMode_VmPolicy_Builder>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/StrictMode$VmPolicy$Builder", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/os/StrictMode$VmPolicy;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/StrictMode$VmPolicy$Builder\0", "<init>\0", "(Landroid/os/StrictMode$VmPolicy;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setClassInstanceLimit](https://developer.android.com/reference/android/os/StrictMode.VmPolicy.Builder.html#setClassInstanceLimit(java.lang.Class,%20int))
        ///
        /// Required features: "android-os-StrictMode_VmPolicy_Builder", "java-lang-Class"
        #[cfg(any(feature = "all", all(feature = "android-os-StrictMode_VmPolicy_Builder", feature = "java-lang-Class")))]
        pub fn setClassInstanceLimit<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::StrictMode_VmPolicy_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/StrictMode$VmPolicy$Builder", java.flags == PUBLIC, .name == "setClassInstanceLimit", .descriptor == "(Ljava/lang/Class;I)Landroid/os/StrictMode$VmPolicy$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/StrictMode$VmPolicy$Builder\0", "setClassInstanceLimit\0", "(Ljava/lang/Class;I)Landroid/os/StrictMode$VmPolicy$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [detectActivityLeaks](https://developer.android.com/reference/android/os/StrictMode.VmPolicy.Builder.html#detectActivityLeaks())
        ///
        /// Required features: "android-os-StrictMode_VmPolicy_Builder"
        #[cfg(any(feature = "all", all(feature = "android-os-StrictMode_VmPolicy_Builder")))]
        pub fn detectActivityLeaks<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::StrictMode_VmPolicy_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/StrictMode$VmPolicy$Builder", java.flags == PUBLIC, .name == "detectActivityLeaks", .descriptor == "()Landroid/os/StrictMode$VmPolicy$Builder;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/StrictMode$VmPolicy$Builder\0", "detectActivityLeaks\0", "()Landroid/os/StrictMode$VmPolicy$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [detectNonSdkApiUsage](https://developer.android.com/reference/android/os/StrictMode.VmPolicy.Builder.html#detectNonSdkApiUsage())
        ///
        /// Required features: "android-os-StrictMode_VmPolicy_Builder"
        #[cfg(any(feature = "all", all(feature = "android-os-StrictMode_VmPolicy_Builder")))]
        pub fn detectNonSdkApiUsage<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::StrictMode_VmPolicy_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/StrictMode$VmPolicy$Builder", java.flags == PUBLIC, .name == "detectNonSdkApiUsage", .descriptor == "()Landroid/os/StrictMode$VmPolicy$Builder;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/StrictMode$VmPolicy$Builder\0", "detectNonSdkApiUsage\0", "()Landroid/os/StrictMode$VmPolicy$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [permitNonSdkApiUsage](https://developer.android.com/reference/android/os/StrictMode.VmPolicy.Builder.html#permitNonSdkApiUsage())
        ///
        /// Required features: "android-os-StrictMode_VmPolicy_Builder"
        #[cfg(any(feature = "all", all(feature = "android-os-StrictMode_VmPolicy_Builder")))]
        pub fn permitNonSdkApiUsage<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::StrictMode_VmPolicy_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/StrictMode$VmPolicy$Builder", java.flags == PUBLIC, .name == "permitNonSdkApiUsage", .descriptor == "()Landroid/os/StrictMode$VmPolicy$Builder;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/StrictMode$VmPolicy$Builder\0", "permitNonSdkApiUsage\0", "()Landroid/os/StrictMode$VmPolicy$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [detectAll](https://developer.android.com/reference/android/os/StrictMode.VmPolicy.Builder.html#detectAll())
        ///
        /// Required features: "android-os-StrictMode_VmPolicy_Builder"
        #[cfg(any(feature = "all", all(feature = "android-os-StrictMode_VmPolicy_Builder")))]
        pub fn detectAll<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::StrictMode_VmPolicy_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/StrictMode$VmPolicy$Builder", java.flags == PUBLIC, .name == "detectAll", .descriptor == "()Landroid/os/StrictMode$VmPolicy$Builder;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/StrictMode$VmPolicy$Builder\0", "detectAll\0", "()Landroid/os/StrictMode$VmPolicy$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [detectLeakedSqlLiteObjects](https://developer.android.com/reference/android/os/StrictMode.VmPolicy.Builder.html#detectLeakedSqlLiteObjects())
        ///
        /// Required features: "android-os-StrictMode_VmPolicy_Builder"
        #[cfg(any(feature = "all", all(feature = "android-os-StrictMode_VmPolicy_Builder")))]
        pub fn detectLeakedSqlLiteObjects<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::StrictMode_VmPolicy_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/StrictMode$VmPolicy$Builder", java.flags == PUBLIC, .name == "detectLeakedSqlLiteObjects", .descriptor == "()Landroid/os/StrictMode$VmPolicy$Builder;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/StrictMode$VmPolicy$Builder\0", "detectLeakedSqlLiteObjects\0", "()Landroid/os/StrictMode$VmPolicy$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [detectLeakedClosableObjects](https://developer.android.com/reference/android/os/StrictMode.VmPolicy.Builder.html#detectLeakedClosableObjects())
        ///
        /// Required features: "android-os-StrictMode_VmPolicy_Builder"
        #[cfg(any(feature = "all", all(feature = "android-os-StrictMode_VmPolicy_Builder")))]
        pub fn detectLeakedClosableObjects<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::StrictMode_VmPolicy_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/StrictMode$VmPolicy$Builder", java.flags == PUBLIC, .name == "detectLeakedClosableObjects", .descriptor == "()Landroid/os/StrictMode$VmPolicy$Builder;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/StrictMode$VmPolicy$Builder\0", "detectLeakedClosableObjects\0", "()Landroid/os/StrictMode$VmPolicy$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [detectLeakedRegistrationObjects](https://developer.android.com/reference/android/os/StrictMode.VmPolicy.Builder.html#detectLeakedRegistrationObjects())
        ///
        /// Required features: "android-os-StrictMode_VmPolicy_Builder"
        #[cfg(any(feature = "all", all(feature = "android-os-StrictMode_VmPolicy_Builder")))]
        pub fn detectLeakedRegistrationObjects<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::StrictMode_VmPolicy_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/StrictMode$VmPolicy$Builder", java.flags == PUBLIC, .name == "detectLeakedRegistrationObjects", .descriptor == "()Landroid/os/StrictMode$VmPolicy$Builder;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/StrictMode$VmPolicy$Builder\0", "detectLeakedRegistrationObjects\0", "()Landroid/os/StrictMode$VmPolicy$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [detectFileUriExposure](https://developer.android.com/reference/android/os/StrictMode.VmPolicy.Builder.html#detectFileUriExposure())
        ///
        /// Required features: "android-os-StrictMode_VmPolicy_Builder"
        #[cfg(any(feature = "all", all(feature = "android-os-StrictMode_VmPolicy_Builder")))]
        pub fn detectFileUriExposure<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::StrictMode_VmPolicy_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/StrictMode$VmPolicy$Builder", java.flags == PUBLIC, .name == "detectFileUriExposure", .descriptor == "()Landroid/os/StrictMode$VmPolicy$Builder;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/StrictMode$VmPolicy$Builder\0", "detectFileUriExposure\0", "()Landroid/os/StrictMode$VmPolicy$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [detectCleartextNetwork](https://developer.android.com/reference/android/os/StrictMode.VmPolicy.Builder.html#detectCleartextNetwork())
        ///
        /// Required features: "android-os-StrictMode_VmPolicy_Builder"
        #[cfg(any(feature = "all", all(feature = "android-os-StrictMode_VmPolicy_Builder")))]
        pub fn detectCleartextNetwork<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::StrictMode_VmPolicy_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/StrictMode$VmPolicy$Builder", java.flags == PUBLIC, .name == "detectCleartextNetwork", .descriptor == "()Landroid/os/StrictMode$VmPolicy$Builder;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/StrictMode$VmPolicy$Builder\0", "detectCleartextNetwork\0", "()Landroid/os/StrictMode$VmPolicy$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [detectContentUriWithoutPermission](https://developer.android.com/reference/android/os/StrictMode.VmPolicy.Builder.html#detectContentUriWithoutPermission())
        ///
        /// Required features: "android-os-StrictMode_VmPolicy_Builder"
        #[cfg(any(feature = "all", all(feature = "android-os-StrictMode_VmPolicy_Builder")))]
        pub fn detectContentUriWithoutPermission<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::StrictMode_VmPolicy_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/StrictMode$VmPolicy$Builder", java.flags == PUBLIC, .name == "detectContentUriWithoutPermission", .descriptor == "()Landroid/os/StrictMode$VmPolicy$Builder;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/StrictMode$VmPolicy$Builder\0", "detectContentUriWithoutPermission\0", "()Landroid/os/StrictMode$VmPolicy$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [detectUntaggedSockets](https://developer.android.com/reference/android/os/StrictMode.VmPolicy.Builder.html#detectUntaggedSockets())
        ///
        /// Required features: "android-os-StrictMode_VmPolicy_Builder"
        #[cfg(any(feature = "all", all(feature = "android-os-StrictMode_VmPolicy_Builder")))]
        pub fn detectUntaggedSockets<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::StrictMode_VmPolicy_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/StrictMode$VmPolicy$Builder", java.flags == PUBLIC, .name == "detectUntaggedSockets", .descriptor == "()Landroid/os/StrictMode$VmPolicy$Builder;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/StrictMode$VmPolicy$Builder\0", "detectUntaggedSockets\0", "()Landroid/os/StrictMode$VmPolicy$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [detectImplicitDirectBoot](https://developer.android.com/reference/android/os/StrictMode.VmPolicy.Builder.html#detectImplicitDirectBoot())
        ///
        /// Required features: "android-os-StrictMode_VmPolicy_Builder"
        #[cfg(any(feature = "all", all(feature = "android-os-StrictMode_VmPolicy_Builder")))]
        pub fn detectImplicitDirectBoot<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::StrictMode_VmPolicy_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/StrictMode$VmPolicy$Builder", java.flags == PUBLIC, .name == "detectImplicitDirectBoot", .descriptor == "()Landroid/os/StrictMode$VmPolicy$Builder;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/StrictMode$VmPolicy$Builder\0", "detectImplicitDirectBoot\0", "()Landroid/os/StrictMode$VmPolicy$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [detectCredentialProtectedWhileLocked](https://developer.android.com/reference/android/os/StrictMode.VmPolicy.Builder.html#detectCredentialProtectedWhileLocked())
        ///
        /// Required features: "android-os-StrictMode_VmPolicy_Builder"
        #[cfg(any(feature = "all", all(feature = "android-os-StrictMode_VmPolicy_Builder")))]
        pub fn detectCredentialProtectedWhileLocked<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::StrictMode_VmPolicy_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/StrictMode$VmPolicy$Builder", java.flags == PUBLIC, .name == "detectCredentialProtectedWhileLocked", .descriptor == "()Landroid/os/StrictMode$VmPolicy$Builder;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/StrictMode$VmPolicy$Builder\0", "detectCredentialProtectedWhileLocked\0", "()Landroid/os/StrictMode$VmPolicy$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [penaltyDeath](https://developer.android.com/reference/android/os/StrictMode.VmPolicy.Builder.html#penaltyDeath())
        ///
        /// Required features: "android-os-StrictMode_VmPolicy_Builder"
        #[cfg(any(feature = "all", all(feature = "android-os-StrictMode_VmPolicy_Builder")))]
        pub fn penaltyDeath<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::StrictMode_VmPolicy_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/StrictMode$VmPolicy$Builder", java.flags == PUBLIC, .name == "penaltyDeath", .descriptor == "()Landroid/os/StrictMode$VmPolicy$Builder;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/StrictMode$VmPolicy$Builder\0", "penaltyDeath\0", "()Landroid/os/StrictMode$VmPolicy$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [penaltyDeathOnCleartextNetwork](https://developer.android.com/reference/android/os/StrictMode.VmPolicy.Builder.html#penaltyDeathOnCleartextNetwork())
        ///
        /// Required features: "android-os-StrictMode_VmPolicy_Builder"
        #[cfg(any(feature = "all", all(feature = "android-os-StrictMode_VmPolicy_Builder")))]
        pub fn penaltyDeathOnCleartextNetwork<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::StrictMode_VmPolicy_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/StrictMode$VmPolicy$Builder", java.flags == PUBLIC, .name == "penaltyDeathOnCleartextNetwork", .descriptor == "()Landroid/os/StrictMode$VmPolicy$Builder;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/StrictMode$VmPolicy$Builder\0", "penaltyDeathOnCleartextNetwork\0", "()Landroid/os/StrictMode$VmPolicy$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [penaltyDeathOnFileUriExposure](https://developer.android.com/reference/android/os/StrictMode.VmPolicy.Builder.html#penaltyDeathOnFileUriExposure())
        ///
        /// Required features: "android-os-StrictMode_VmPolicy_Builder"
        #[cfg(any(feature = "all", all(feature = "android-os-StrictMode_VmPolicy_Builder")))]
        pub fn penaltyDeathOnFileUriExposure<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::StrictMode_VmPolicy_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/StrictMode$VmPolicy$Builder", java.flags == PUBLIC, .name == "penaltyDeathOnFileUriExposure", .descriptor == "()Landroid/os/StrictMode$VmPolicy$Builder;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/StrictMode$VmPolicy$Builder\0", "penaltyDeathOnFileUriExposure\0", "()Landroid/os/StrictMode$VmPolicy$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [penaltyLog](https://developer.android.com/reference/android/os/StrictMode.VmPolicy.Builder.html#penaltyLog())
        ///
        /// Required features: "android-os-StrictMode_VmPolicy_Builder"
        #[cfg(any(feature = "all", all(feature = "android-os-StrictMode_VmPolicy_Builder")))]
        pub fn penaltyLog<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::StrictMode_VmPolicy_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/StrictMode$VmPolicy$Builder", java.flags == PUBLIC, .name == "penaltyLog", .descriptor == "()Landroid/os/StrictMode$VmPolicy$Builder;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/StrictMode$VmPolicy$Builder\0", "penaltyLog\0", "()Landroid/os/StrictMode$VmPolicy$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [penaltyDropBox](https://developer.android.com/reference/android/os/StrictMode.VmPolicy.Builder.html#penaltyDropBox())
        ///
        /// Required features: "android-os-StrictMode_VmPolicy_Builder"
        #[cfg(any(feature = "all", all(feature = "android-os-StrictMode_VmPolicy_Builder")))]
        pub fn penaltyDropBox<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::StrictMode_VmPolicy_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/StrictMode$VmPolicy$Builder", java.flags == PUBLIC, .name == "penaltyDropBox", .descriptor == "()Landroid/os/StrictMode$VmPolicy$Builder;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/StrictMode$VmPolicy$Builder\0", "penaltyDropBox\0", "()Landroid/os/StrictMode$VmPolicy$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [penaltyListener](https://developer.android.com/reference/android/os/StrictMode.VmPolicy.Builder.html#penaltyListener(java.util.concurrent.Executor,%20android.os.StrictMode.OnVmViolationListener))
        ///
        /// Required features: "android-os-StrictMode_OnVmViolationListener", "android-os-StrictMode_VmPolicy_Builder", "java-util-concurrent-Executor"
        #[cfg(any(feature = "all", all(feature = "android-os-StrictMode_OnVmViolationListener", feature = "android-os-StrictMode_VmPolicy_Builder", feature = "java-util-concurrent-Executor")))]
        pub fn penaltyListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::StrictMode_OnVmViolationListener>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::StrictMode_VmPolicy_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/StrictMode$VmPolicy$Builder", java.flags == PUBLIC, .name == "penaltyListener", .descriptor == "(Ljava/util/concurrent/Executor;Landroid/os/StrictMode$OnVmViolationListener;)Landroid/os/StrictMode$VmPolicy$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/StrictMode$VmPolicy$Builder\0", "penaltyListener\0", "(Ljava/util/concurrent/Executor;Landroid/os/StrictMode$OnVmViolationListener;)Landroid/os/StrictMode$VmPolicy$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [build](https://developer.android.com/reference/android/os/StrictMode.VmPolicy.Builder.html#build())
        ///
        /// Required features: "android-os-StrictMode_VmPolicy"
        #[cfg(any(feature = "all", all(feature = "android-os-StrictMode_VmPolicy")))]
        pub fn build<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::StrictMode_VmPolicy>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/StrictMode$VmPolicy$Builder", java.flags == PUBLIC, .name == "build", .descriptor == "()Landroid/os/StrictMode$VmPolicy;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/StrictMode$VmPolicy$Builder\0", "build\0", "()Landroid/os/StrictMode$VmPolicy;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
