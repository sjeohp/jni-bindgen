// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-os-Message"))]
__jni_bindgen! {
    /// public final class [Message](https://developer.android.com/reference/android/os/Message.html)
    ///
    /// Required feature: android-os-Message
    public final class Message ("android/os/Message") extends crate::java::lang::Object, implements crate::android::os::Parcelable {

        /// [Message](https://developer.android.com/reference/android/os/Message.html#Message())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::os::Message>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/Message", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/Message\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [obtain](https://developer.android.com/reference/android/os/Message.html#obtain())
        ///
        /// Required features: "android-os-Message"
        #[cfg(any(feature = "all", all(feature = "android-os-Message")))]
        pub fn obtain<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Message>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/Message", java.flags == PUBLIC | STATIC, .name == "obtain", .descriptor == "()Landroid/os/Message;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/os/Message\0", "obtain\0", "()Landroid/os/Message;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [obtain](https://developer.android.com/reference/android/os/Message.html#obtain(android.os.Message))
        ///
        /// Required features: "android-os-Message"
        #[cfg(any(feature = "all", all(feature = "android-os-Message")))]
        pub fn obtain_Message<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Message>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Message>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/Message", java.flags == PUBLIC | STATIC, .name == "obtain", .descriptor == "(Landroid/os/Message;)Landroid/os/Message;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/os/Message\0", "obtain\0", "(Landroid/os/Message;)Landroid/os/Message;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [obtain](https://developer.android.com/reference/android/os/Message.html#obtain(android.os.Handler))
        ///
        /// Required features: "android-os-Handler", "android-os-Message"
        #[cfg(any(feature = "all", all(feature = "android-os-Handler", feature = "android-os-Message")))]
        pub fn obtain_Handler<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Message>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/Message", java.flags == PUBLIC | STATIC, .name == "obtain", .descriptor == "(Landroid/os/Handler;)Landroid/os/Message;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/os/Message\0", "obtain\0", "(Landroid/os/Handler;)Landroid/os/Message;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [obtain](https://developer.android.com/reference/android/os/Message.html#obtain(android.os.Handler,%20java.lang.Runnable))
        ///
        /// Required features: "android-os-Handler", "android-os-Message", "java-lang-Runnable"
        #[cfg(any(feature = "all", all(feature = "android-os-Handler", feature = "android-os-Message", feature = "java-lang-Runnable")))]
        pub fn obtain_Handler_Runnable<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Runnable>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Message>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/Message", java.flags == PUBLIC | STATIC, .name == "obtain", .descriptor == "(Landroid/os/Handler;Ljava/lang/Runnable;)Landroid/os/Message;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/os/Message\0", "obtain\0", "(Landroid/os/Handler;Ljava/lang/Runnable;)Landroid/os/Message;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [obtain](https://developer.android.com/reference/android/os/Message.html#obtain(android.os.Handler,%20int))
        ///
        /// Required features: "android-os-Handler", "android-os-Message"
        #[cfg(any(feature = "all", all(feature = "android-os-Handler", feature = "android-os-Message")))]
        pub fn obtain_Handler_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Message>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/Message", java.flags == PUBLIC | STATIC, .name == "obtain", .descriptor == "(Landroid/os/Handler;I)Landroid/os/Message;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/os/Message\0", "obtain\0", "(Landroid/os/Handler;I)Landroid/os/Message;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [obtain](https://developer.android.com/reference/android/os/Message.html#obtain(android.os.Handler,%20int,%20java.lang.Object))
        ///
        /// Required features: "android-os-Handler", "android-os-Message", "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "android-os-Handler", feature = "android-os-Message", feature = "java-lang-Object")))]
        pub fn obtain_Handler_int_Object<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Message>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/Message", java.flags == PUBLIC | STATIC, .name == "obtain", .descriptor == "(Landroid/os/Handler;ILjava/lang/Object;)Landroid/os/Message;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/os/Message\0", "obtain\0", "(Landroid/os/Handler;ILjava/lang/Object;)Landroid/os/Message;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [obtain](https://developer.android.com/reference/android/os/Message.html#obtain(android.os.Handler,%20int,%20int,%20int))
        ///
        /// Required features: "android-os-Handler", "android-os-Message"
        #[cfg(any(feature = "all", all(feature = "android-os-Handler", feature = "android-os-Message")))]
        pub fn obtain_Handler_int_int_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>, arg1: i32, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Message>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/Message", java.flags == PUBLIC | STATIC, .name == "obtain", .descriptor == "(Landroid/os/Handler;III)Landroid/os/Message;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/os/Message\0", "obtain\0", "(Landroid/os/Handler;III)Landroid/os/Message;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [obtain](https://developer.android.com/reference/android/os/Message.html#obtain(android.os.Handler,%20int,%20int,%20int,%20java.lang.Object))
        ///
        /// Required features: "android-os-Handler", "android-os-Message", "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "android-os-Handler", feature = "android-os-Message", feature = "java-lang-Object")))]
        pub fn obtain_Handler_int_int_int_Object<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>, arg1: i32, arg2: i32, arg3: i32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Message>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/Message", java.flags == PUBLIC | STATIC, .name == "obtain", .descriptor == "(Landroid/os/Handler;IIILjava/lang/Object;)Landroid/os/Message;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/os/Message\0", "obtain\0", "(Landroid/os/Handler;IIILjava/lang/Object;)Landroid/os/Message;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [recycle](https://developer.android.com/reference/android/os/Message.html#recycle())
        pub fn recycle<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/Message", java.flags == PUBLIC, .name == "recycle", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/Message\0", "recycle\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [copyFrom](https://developer.android.com/reference/android/os/Message.html#copyFrom(android.os.Message))
        ///
        /// Required features: "android-os-Message"
        #[cfg(any(feature = "all", all(feature = "android-os-Message")))]
        pub fn copyFrom<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Message>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/Message", java.flags == PUBLIC, .name == "copyFrom", .descriptor == "(Landroid/os/Message;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/Message\0", "copyFrom\0", "(Landroid/os/Message;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getWhen](https://developer.android.com/reference/android/os/Message.html#getWhen())
        pub fn getWhen<'env>(&'env self) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/Message", java.flags == PUBLIC, .name == "getWhen", .descriptor == "()J"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/Message\0", "getWhen\0", "()J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTarget](https://developer.android.com/reference/android/os/Message.html#setTarget(android.os.Handler))
        ///
        /// Required features: "android-os-Handler"
        #[cfg(any(feature = "all", all(feature = "android-os-Handler")))]
        pub fn setTarget<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/Message", java.flags == PUBLIC, .name == "setTarget", .descriptor == "(Landroid/os/Handler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/Message\0", "setTarget\0", "(Landroid/os/Handler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTarget](https://developer.android.com/reference/android/os/Message.html#getTarget())
        ///
        /// Required features: "android-os-Handler"
        #[cfg(any(feature = "all", all(feature = "android-os-Handler")))]
        pub fn getTarget<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Handler>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/Message", java.flags == PUBLIC, .name == "getTarget", .descriptor == "()Landroid/os/Handler;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/Message\0", "getTarget\0", "()Landroid/os/Handler;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCallback](https://developer.android.com/reference/android/os/Message.html#getCallback())
        ///
        /// Required features: "java-lang-Runnable"
        #[cfg(any(feature = "all", all(feature = "java-lang-Runnable")))]
        pub fn getCallback<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Runnable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/Message", java.flags == PUBLIC, .name == "getCallback", .descriptor == "()Ljava/lang/Runnable;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/Message\0", "getCallback\0", "()Ljava/lang/Runnable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getData](https://developer.android.com/reference/android/os/Message.html#getData())
        ///
        /// Required features: "android-os-Bundle"
        #[cfg(any(feature = "all", all(feature = "android-os-Bundle")))]
        pub fn getData<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Bundle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/Message", java.flags == PUBLIC, .name == "getData", .descriptor == "()Landroid/os/Bundle;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/Message\0", "getData\0", "()Landroid/os/Bundle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [peekData](https://developer.android.com/reference/android/os/Message.html#peekData())
        ///
        /// Required features: "android-os-Bundle"
        #[cfg(any(feature = "all", all(feature = "android-os-Bundle")))]
        pub fn peekData<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Bundle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/Message", java.flags == PUBLIC, .name == "peekData", .descriptor == "()Landroid/os/Bundle;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/Message\0", "peekData\0", "()Landroid/os/Bundle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setData](https://developer.android.com/reference/android/os/Message.html#setData(android.os.Bundle))
        ///
        /// Required features: "android-os-Bundle"
        #[cfg(any(feature = "all", all(feature = "android-os-Bundle")))]
        pub fn setData<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/Message", java.flags == PUBLIC, .name == "setData", .descriptor == "(Landroid/os/Bundle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/Message\0", "setData\0", "(Landroid/os/Bundle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [sendToTarget](https://developer.android.com/reference/android/os/Message.html#sendToTarget())
        pub fn sendToTarget<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/Message", java.flags == PUBLIC, .name == "sendToTarget", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/Message\0", "sendToTarget\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isAsynchronous](https://developer.android.com/reference/android/os/Message.html#isAsynchronous())
        pub fn isAsynchronous<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/Message", java.flags == PUBLIC, .name == "isAsynchronous", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/Message\0", "isAsynchronous\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAsynchronous](https://developer.android.com/reference/android/os/Message.html#setAsynchronous(boolean))
        pub fn setAsynchronous<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/Message", java.flags == PUBLIC, .name == "setAsynchronous", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/Message\0", "setAsynchronous\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/android/os/Message.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/Message", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/Message\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [describeContents](https://developer.android.com/reference/android/os/Message.html#describeContents())
        pub fn describeContents<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/Message", java.flags == PUBLIC, .name == "describeContents", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/Message\0", "describeContents\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [writeToParcel](https://developer.android.com/reference/android/os/Message.html#writeToParcel(android.os.Parcel,%20int))
        ///
        /// Required features: "android-os-Parcel"
        #[cfg(any(feature = "all", all(feature = "android-os-Parcel")))]
        pub fn writeToParcel<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Parcel>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/Message", java.flags == PUBLIC, .name == "writeToParcel", .descriptor == "(Landroid/os/Parcel;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/Message\0", "writeToParcel\0", "(Landroid/os/Parcel;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// **get** public static final [CREATOR](https://developer.android.com/reference/android/os/Message.html#CREATOR)
        ///
        /// Required feature: android-os-Parcelable_Creator
        #[cfg(any(feature = "all", feature = "android-os-Parcelable_Creator"))]
        pub fn CREATOR<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Parcelable_Creator>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/os/Message\0", "CREATOR\0", "Landroid/os/Parcelable$Creator;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public [arg1](https://developer.android.com/reference/android/os/Message.html#arg1)
        pub fn arg1<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/os/Message\0", "arg1\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [arg1](https://developer.android.com/reference/android/os/Message.html#arg1)
        pub fn set_arg1<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/os/Message\0", "arg1\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [arg2](https://developer.android.com/reference/android/os/Message.html#arg2)
        pub fn arg2<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/os/Message\0", "arg2\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [arg2](https://developer.android.com/reference/android/os/Message.html#arg2)
        pub fn set_arg2<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/os/Message\0", "arg2\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [obj](https://developer.android.com/reference/android/os/Message.html#obj)
        ///
        /// Required feature: java-lang-Object
        #[cfg(any(feature = "all", feature = "java-lang-Object"))]
        pub fn obj<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/os/Message\0", "obj\0", "Ljava/lang/Object;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [obj](https://developer.android.com/reference/android/os/Message.html#obj)
        ///
        /// Required feature: java-lang-Object
        #[cfg(any(feature = "all", feature = "java-lang-Object"))]
        pub fn set_obj<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::java::lang::Object>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/os/Message\0", "obj\0", "Ljava/lang/Object;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [replyTo](https://developer.android.com/reference/android/os/Message.html#replyTo)
        ///
        /// Required feature: android-os-Messenger
        #[cfg(any(feature = "all", feature = "android-os-Messenger"))]
        pub fn replyTo<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Messenger>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/os/Message\0", "replyTo\0", "Landroid/os/Messenger;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [replyTo](https://developer.android.com/reference/android/os/Message.html#replyTo)
        ///
        /// Required feature: android-os-Messenger
        #[cfg(any(feature = "all", feature = "android-os-Messenger"))]
        pub fn set_replyTo<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::android::os::Messenger>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/os/Message\0", "replyTo\0", "Landroid/os/Messenger;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [sendingUid](https://developer.android.com/reference/android/os/Message.html#sendingUid)
        pub fn sendingUid<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/os/Message\0", "sendingUid\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [sendingUid](https://developer.android.com/reference/android/os/Message.html#sendingUid)
        pub fn set_sendingUid<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/os/Message\0", "sendingUid\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [what](https://developer.android.com/reference/android/os/Message.html#what)
        pub fn what<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/os/Message\0", "what\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [what](https://developer.android.com/reference/android/os/Message.html#what)
        pub fn set_what<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/os/Message\0", "what\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }
    }
}
