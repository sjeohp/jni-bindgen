// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-os-Looper"))]
__jni_bindgen! {
    /// public final class [Looper](https://developer.android.com/reference/android/os/Looper.html)
    ///
    /// Required feature: android-os-Looper
    public final class Looper ("android/os/Looper") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [Looper](https://developer.android.com/reference/android/os/Looper.html#Looper(boolean))
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::os::Looper>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/os/Looper", java.flags == (empty), .name == "<init>", .descriptor == "(Z)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/Looper\0", "<init>\0", "(Z)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [prepare](https://developer.android.com/reference/android/os/Looper.html#prepare())
        pub fn prepare<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/Looper", java.flags == PUBLIC | STATIC, .name == "prepare", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/os/Looper\0", "prepare\0", "()V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [prepareMainLooper](https://developer.android.com/reference/android/os/Looper.html#prepareMainLooper())
        pub fn prepareMainLooper<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/Looper", java.flags == PUBLIC | STATIC, .name == "prepareMainLooper", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/os/Looper\0", "prepareMainLooper\0", "()V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMainLooper](https://developer.android.com/reference/android/os/Looper.html#getMainLooper())
        ///
        /// Required features: "android-os-Looper"
        #[cfg(any(feature = "all", all(feature = "android-os-Looper")))]
        pub fn getMainLooper<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Looper>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/Looper", java.flags == PUBLIC | STATIC, .name == "getMainLooper", .descriptor == "()Landroid/os/Looper;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/os/Looper\0", "getMainLooper\0", "()Landroid/os/Looper;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [loop](https://developer.android.com/reference/android/os/Looper.html#loop())
        pub fn r#loop<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/Looper", java.flags == PUBLIC | STATIC, .name == "loop", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/os/Looper\0", "loop\0", "()V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [myLooper](https://developer.android.com/reference/android/os/Looper.html#myLooper())
        ///
        /// Required features: "android-os-Looper"
        #[cfg(any(feature = "all", all(feature = "android-os-Looper")))]
        pub fn myLooper<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Looper>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/Looper", java.flags == PUBLIC | STATIC, .name == "myLooper", .descriptor == "()Landroid/os/Looper;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/os/Looper\0", "myLooper\0", "()Landroid/os/Looper;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [myQueue](https://developer.android.com/reference/android/os/Looper.html#myQueue())
        ///
        /// Required features: "android-os-MessageQueue"
        #[cfg(any(feature = "all", all(feature = "android-os-MessageQueue")))]
        pub fn myQueue<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::MessageQueue>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/Looper", java.flags == PUBLIC | STATIC, .name == "myQueue", .descriptor == "()Landroid/os/MessageQueue;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/os/Looper\0", "myQueue\0", "()Landroid/os/MessageQueue;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isCurrentThread](https://developer.android.com/reference/android/os/Looper.html#isCurrentThread())
        pub fn isCurrentThread<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/Looper", java.flags == PUBLIC, .name == "isCurrentThread", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/Looper\0", "isCurrentThread\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setMessageLogging](https://developer.android.com/reference/android/os/Looper.html#setMessageLogging(android.util.Printer))
        ///
        /// Required features: "android-util-Printer"
        #[cfg(any(feature = "all", all(feature = "android-util-Printer")))]
        pub fn setMessageLogging<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::util::Printer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/Looper", java.flags == PUBLIC, .name == "setMessageLogging", .descriptor == "(Landroid/util/Printer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/Looper\0", "setMessageLogging\0", "(Landroid/util/Printer;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [quit](https://developer.android.com/reference/android/os/Looper.html#quit())
        pub fn quit<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/Looper", java.flags == PUBLIC, .name == "quit", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/Looper\0", "quit\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [quitSafely](https://developer.android.com/reference/android/os/Looper.html#quitSafely())
        pub fn quitSafely<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/Looper", java.flags == PUBLIC, .name == "quitSafely", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/Looper\0", "quitSafely\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getThread](https://developer.android.com/reference/android/os/Looper.html#getThread())
        ///
        /// Required features: "java-lang-Thread"
        #[cfg(any(feature = "all", all(feature = "java-lang-Thread")))]
        pub fn getThread<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Thread>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/Looper", java.flags == PUBLIC, .name == "getThread", .descriptor == "()Ljava/lang/Thread;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/Looper\0", "getThread\0", "()Ljava/lang/Thread;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getQueue](https://developer.android.com/reference/android/os/Looper.html#getQueue())
        ///
        /// Required features: "android-os-MessageQueue"
        #[cfg(any(feature = "all", all(feature = "android-os-MessageQueue")))]
        pub fn getQueue<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::MessageQueue>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/Looper", java.flags == PUBLIC, .name == "getQueue", .descriptor == "()Landroid/os/MessageQueue;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/Looper\0", "getQueue\0", "()Landroid/os/MessageQueue;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dump](https://developer.android.com/reference/android/os/Looper.html#dump(android.util.Printer,%20java.lang.String))
        ///
        /// Required features: "android-util-Printer", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-util-Printer", feature = "java-lang-String")))]
        pub fn dump<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::util::Printer>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/Looper", java.flags == PUBLIC, .name == "dump", .descriptor == "(Landroid/util/Printer;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/Looper\0", "dump\0", "(Landroid/util/Printer;Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/android/os/Looper.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/Looper", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/Looper\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
