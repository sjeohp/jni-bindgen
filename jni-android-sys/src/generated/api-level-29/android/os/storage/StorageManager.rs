// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-os-storage-StorageManager"))]
__jni_bindgen! {
    /// public class [StorageManager](https://developer.android.com/reference/android/os/storage/StorageManager.html)
    ///
    /// Required feature: android-os-storage-StorageManager
    public class StorageManager ("android/os/storage/StorageManager") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [StorageManager](https://developer.android.com/reference/android/os/storage/StorageManager.html#StorageManager())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::os::storage::StorageManager>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/os/storage/StorageManager", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/storage/StorageManager\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [mountObb](https://developer.android.com/reference/android/os/storage/StorageManager.html#mountObb(java.lang.String,%20java.lang.String,%20android.os.storage.OnObbStateChangeListener))
        ///
        /// Required features: "android-os-storage-OnObbStateChangeListener", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-os-storage-OnObbStateChangeListener", feature = "java-lang-String")))]
        pub fn mountObb<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::storage::OnObbStateChangeListener>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/storage/StorageManager", java.flags == PUBLIC, .name == "mountObb", .descriptor == "(Ljava/lang/String;Ljava/lang/String;Landroid/os/storage/OnObbStateChangeListener;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/storage/StorageManager\0", "mountObb\0", "(Ljava/lang/String;Ljava/lang/String;Landroid/os/storage/OnObbStateChangeListener;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unmountObb](https://developer.android.com/reference/android/os/storage/StorageManager.html#unmountObb(java.lang.String,%20boolean,%20android.os.storage.OnObbStateChangeListener))
        ///
        /// Required features: "android-os-storage-OnObbStateChangeListener", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-os-storage-OnObbStateChangeListener", feature = "java-lang-String")))]
        pub fn unmountObb<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: bool, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::storage::OnObbStateChangeListener>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/storage/StorageManager", java.flags == PUBLIC, .name == "unmountObb", .descriptor == "(Ljava/lang/String;ZLandroid/os/storage/OnObbStateChangeListener;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/storage/StorageManager\0", "unmountObb\0", "(Ljava/lang/String;ZLandroid/os/storage/OnObbStateChangeListener;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isObbMounted](https://developer.android.com/reference/android/os/storage/StorageManager.html#isObbMounted(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn isObbMounted<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/storage/StorageManager", java.flags == PUBLIC, .name == "isObbMounted", .descriptor == "(Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/storage/StorageManager\0", "isObbMounted\0", "(Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMountedObbPath](https://developer.android.com/reference/android/os/storage/StorageManager.html#getMountedObbPath(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getMountedObbPath<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/storage/StorageManager", java.flags == PUBLIC, .name == "getMountedObbPath", .descriptor == "(Ljava/lang/String;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/storage/StorageManager\0", "getMountedObbPath\0", "(Ljava/lang/String;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getUuidForPath](https://developer.android.com/reference/android/os/storage/StorageManager.html#getUuidForPath(java.io.File))
        ///
        /// Required features: "java-io-File", "java-util-UUID"
        #[cfg(any(feature = "all", all(feature = "java-io-File", feature = "java-util-UUID")))]
        pub fn getUuidForPath<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::File>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::UUID>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/storage/StorageManager", java.flags == PUBLIC, .name == "getUuidForPath", .descriptor == "(Ljava/io/File;)Ljava/util/UUID;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/storage/StorageManager\0", "getUuidForPath\0", "(Ljava/io/File;)Ljava/util/UUID;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isAllocationSupported](https://developer.android.com/reference/android/os/storage/StorageManager.html#isAllocationSupported(java.io.FileDescriptor))
        ///
        /// Required features: "java-io-FileDescriptor"
        #[cfg(any(feature = "all", all(feature = "java-io-FileDescriptor")))]
        pub fn isAllocationSupported<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::FileDescriptor>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/storage/StorageManager", java.flags == PUBLIC, .name == "isAllocationSupported", .descriptor == "(Ljava/io/FileDescriptor;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/storage/StorageManager\0", "isAllocationSupported\0", "(Ljava/io/FileDescriptor;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getStorageVolume](https://developer.android.com/reference/android/os/storage/StorageManager.html#getStorageVolume(java.io.File))
        ///
        /// Required features: "android-os-storage-StorageVolume", "java-io-File"
        #[cfg(any(feature = "all", all(feature = "android-os-storage-StorageVolume", feature = "java-io-File")))]
        pub fn getStorageVolume_File<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::File>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::storage::StorageVolume>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/storage/StorageManager", java.flags == PUBLIC, .name == "getStorageVolume", .descriptor == "(Ljava/io/File;)Landroid/os/storage/StorageVolume;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/storage/StorageManager\0", "getStorageVolume\0", "(Ljava/io/File;)Landroid/os/storage/StorageVolume;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getStorageVolume](https://developer.android.com/reference/android/os/storage/StorageManager.html#getStorageVolume(android.net.Uri))
        ///
        /// Required features: "android-net-Uri", "android-os-storage-StorageVolume"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri", feature = "android-os-storage-StorageVolume")))]
        pub fn getStorageVolume_Uri<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::storage::StorageVolume>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/storage/StorageManager", java.flags == PUBLIC, .name == "getStorageVolume", .descriptor == "(Landroid/net/Uri;)Landroid/os/storage/StorageVolume;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/storage/StorageManager\0", "getStorageVolume\0", "(Landroid/net/Uri;)Landroid/os/storage/StorageVolume;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getStorageVolumes](https://developer.android.com/reference/android/os/storage/StorageManager.html#getStorageVolumes())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getStorageVolumes<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/storage/StorageManager", java.flags == PUBLIC, .name == "getStorageVolumes", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/storage/StorageManager\0", "getStorageVolumes\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPrimaryStorageVolume](https://developer.android.com/reference/android/os/storage/StorageManager.html#getPrimaryStorageVolume())
        ///
        /// Required features: "android-os-storage-StorageVolume"
        #[cfg(any(feature = "all", all(feature = "android-os-storage-StorageVolume")))]
        pub fn getPrimaryStorageVolume<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::storage::StorageVolume>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/storage/StorageManager", java.flags == PUBLIC, .name == "getPrimaryStorageVolume", .descriptor == "()Landroid/os/storage/StorageVolume;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/storage/StorageManager\0", "getPrimaryStorageVolume\0", "()Landroid/os/storage/StorageVolume;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isEncrypted](https://developer.android.com/reference/android/os/storage/StorageManager.html#isEncrypted(java.io.File))
        ///
        /// Required features: "java-io-File"
        #[cfg(any(feature = "all", all(feature = "java-io-File")))]
        pub fn isEncrypted<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::File>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/storage/StorageManager", java.flags == PUBLIC, .name == "isEncrypted", .descriptor == "(Ljava/io/File;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/storage/StorageManager\0", "isEncrypted\0", "(Ljava/io/File;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [openProxyFileDescriptor](https://developer.android.com/reference/android/os/storage/StorageManager.html#openProxyFileDescriptor(int,%20android.os.ProxyFileDescriptorCallback,%20android.os.Handler))
        ///
        /// Required features: "android-os-Handler", "android-os-ParcelFileDescriptor", "android-os-ProxyFileDescriptorCallback"
        #[cfg(any(feature = "all", all(feature = "android-os-Handler", feature = "android-os-ParcelFileDescriptor", feature = "android-os-ProxyFileDescriptorCallback")))]
        pub fn openProxyFileDescriptor<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::ProxyFileDescriptorCallback>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::ParcelFileDescriptor>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/storage/StorageManager", java.flags == PUBLIC, .name == "openProxyFileDescriptor", .descriptor == "(ILandroid/os/ProxyFileDescriptorCallback;Landroid/os/Handler;)Landroid/os/ParcelFileDescriptor;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/storage/StorageManager\0", "openProxyFileDescriptor\0", "(ILandroid/os/ProxyFileDescriptorCallback;Landroid/os/Handler;)Landroid/os/ParcelFileDescriptor;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCacheQuotaBytes](https://developer.android.com/reference/android/os/storage/StorageManager.html#getCacheQuotaBytes(java.util.UUID))
        ///
        /// Required features: "java-util-UUID"
        #[cfg(any(feature = "all", all(feature = "java-util-UUID")))]
        pub fn getCacheQuotaBytes<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::UUID>>) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/storage/StorageManager", java.flags == PUBLIC, .name == "getCacheQuotaBytes", .descriptor == "(Ljava/util/UUID;)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/storage/StorageManager\0", "getCacheQuotaBytes\0", "(Ljava/util/UUID;)J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCacheSizeBytes](https://developer.android.com/reference/android/os/storage/StorageManager.html#getCacheSizeBytes(java.util.UUID))
        ///
        /// Required features: "java-util-UUID"
        #[cfg(any(feature = "all", all(feature = "java-util-UUID")))]
        pub fn getCacheSizeBytes<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::UUID>>) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/storage/StorageManager", java.flags == PUBLIC, .name == "getCacheSizeBytes", .descriptor == "(Ljava/util/UUID;)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/storage/StorageManager\0", "getCacheSizeBytes\0", "(Ljava/util/UUID;)J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAllocatableBytes](https://developer.android.com/reference/android/os/storage/StorageManager.html#getAllocatableBytes(java.util.UUID))
        ///
        /// Required features: "java-util-UUID"
        #[cfg(any(feature = "all", all(feature = "java-util-UUID")))]
        pub fn getAllocatableBytes<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::UUID>>) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/storage/StorageManager", java.flags == PUBLIC, .name == "getAllocatableBytes", .descriptor == "(Ljava/util/UUID;)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/storage/StorageManager\0", "getAllocatableBytes\0", "(Ljava/util/UUID;)J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [allocateBytes](https://developer.android.com/reference/android/os/storage/StorageManager.html#allocateBytes(java.util.UUID,%20long))
        ///
        /// Required features: "java-util-UUID"
        #[cfg(any(feature = "all", all(feature = "java-util-UUID")))]
        pub fn allocateBytes_UUID_long<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::UUID>>, arg1: i64) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/storage/StorageManager", java.flags == PUBLIC, .name == "allocateBytes", .descriptor == "(Ljava/util/UUID;J)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/storage/StorageManager\0", "allocateBytes\0", "(Ljava/util/UUID;J)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [allocateBytes](https://developer.android.com/reference/android/os/storage/StorageManager.html#allocateBytes(java.io.FileDescriptor,%20long))
        ///
        /// Required features: "java-io-FileDescriptor"
        #[cfg(any(feature = "all", all(feature = "java-io-FileDescriptor")))]
        pub fn allocateBytes_FileDescriptor_long<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::FileDescriptor>>, arg1: i64) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/storage/StorageManager", java.flags == PUBLIC, .name == "allocateBytes", .descriptor == "(Ljava/io/FileDescriptor;J)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/storage/StorageManager\0", "allocateBytes\0", "(Ljava/io/FileDescriptor;J)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setCacheBehaviorGroup](https://developer.android.com/reference/android/os/storage/StorageManager.html#setCacheBehaviorGroup(java.io.File,%20boolean))
        ///
        /// Required features: "java-io-File"
        #[cfg(any(feature = "all", all(feature = "java-io-File")))]
        pub fn setCacheBehaviorGroup<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::File>>, arg1: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/storage/StorageManager", java.flags == PUBLIC, .name == "setCacheBehaviorGroup", .descriptor == "(Ljava/io/File;Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/storage/StorageManager\0", "setCacheBehaviorGroup\0", "(Ljava/io/File;Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isCacheBehaviorGroup](https://developer.android.com/reference/android/os/storage/StorageManager.html#isCacheBehaviorGroup(java.io.File))
        ///
        /// Required features: "java-io-File"
        #[cfg(any(feature = "all", all(feature = "java-io-File")))]
        pub fn isCacheBehaviorGroup<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::File>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/storage/StorageManager", java.flags == PUBLIC, .name == "isCacheBehaviorGroup", .descriptor == "(Ljava/io/File;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/storage/StorageManager\0", "isCacheBehaviorGroup\0", "(Ljava/io/File;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setCacheBehaviorTombstone](https://developer.android.com/reference/android/os/storage/StorageManager.html#setCacheBehaviorTombstone(java.io.File,%20boolean))
        ///
        /// Required features: "java-io-File"
        #[cfg(any(feature = "all", all(feature = "java-io-File")))]
        pub fn setCacheBehaviorTombstone<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::File>>, arg1: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/storage/StorageManager", java.flags == PUBLIC, .name == "setCacheBehaviorTombstone", .descriptor == "(Ljava/io/File;Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/storage/StorageManager\0", "setCacheBehaviorTombstone\0", "(Ljava/io/File;Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isCacheBehaviorTombstone](https://developer.android.com/reference/android/os/storage/StorageManager.html#isCacheBehaviorTombstone(java.io.File))
        ///
        /// Required features: "java-io-File"
        #[cfg(any(feature = "all", all(feature = "java-io-File")))]
        pub fn isCacheBehaviorTombstone<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::File>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/storage/StorageManager", java.flags == PUBLIC, .name == "isCacheBehaviorTombstone", .descriptor == "(Ljava/io/File;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/storage/StorageManager\0", "isCacheBehaviorTombstone\0", "(Ljava/io/File;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [ACTION_MANAGE_STORAGE](https://developer.android.com/reference/android/os/storage/StorageManager.html#ACTION_MANAGE_STORAGE)
        pub const ACTION_MANAGE_STORAGE : &'static str = "android.os.storage.action.MANAGE_STORAGE";

        /// public static final [EXTRA_REQUESTED_BYTES](https://developer.android.com/reference/android/os/storage/StorageManager.html#EXTRA_REQUESTED_BYTES)
        pub const EXTRA_REQUESTED_BYTES : &'static str = "android.os.storage.extra.REQUESTED_BYTES";

        /// public static final [EXTRA_UUID](https://developer.android.com/reference/android/os/storage/StorageManager.html#EXTRA_UUID)
        pub const EXTRA_UUID : &'static str = "android.os.storage.extra.UUID";

        /// **get** public static final [UUID_DEFAULT](https://developer.android.com/reference/android/os/storage/StorageManager.html#UUID_DEFAULT)
        ///
        /// Required feature: java-util-UUID
        #[cfg(any(feature = "all", feature = "java-util-UUID"))]
        pub fn UUID_DEFAULT<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::UUID>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/os/storage/StorageManager\0", "UUID_DEFAULT\0", "Ljava/util/UUID;\0");
                env.get_static_object_field(class, field)
            }
        }
    }
}
