// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-os-StrictMode_ThreadPolicy"))]
__jni_bindgen! {
    /// public final class [StrictMode.ThreadPolicy](https://developer.android.com/reference/android/os/StrictMode.ThreadPolicy.html)
    ///
    /// Required feature: android-os-StrictMode_ThreadPolicy
    public final class StrictMode_ThreadPolicy ("android/os/StrictMode$ThreadPolicy") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [ThreadPolicy](https://developer.android.com/reference/android/os/StrictMode.ThreadPolicy.html#ThreadPolicy(int,%20android.os.StrictMode.OnThreadViolationListener,%20java.util.concurrent.Executor))
        // ///
        // /// Required features: "android-os-StrictMode_OnThreadViolationListener", "java-util-concurrent-Executor"
        // #[cfg(any(feature = "all", all(feature = "android-os-StrictMode_OnThreadViolationListener", feature = "java-util-concurrent-Executor")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::StrictMode_OnThreadViolationListener>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::os::StrictMode_ThreadPolicy>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/os/StrictMode$ThreadPolicy", java.flags == (empty), .name == "<init>", .descriptor == "(ILandroid/os/StrictMode$OnThreadViolationListener;Ljava/util/concurrent/Executor;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/StrictMode$ThreadPolicy\0", "<init>\0", "(ILandroid/os/StrictMode$OnThreadViolationListener;Ljava/util/concurrent/Executor;)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [toString](https://developer.android.com/reference/android/os/StrictMode.ThreadPolicy.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/StrictMode$ThreadPolicy", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/StrictMode$ThreadPolicy\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// **get** public static final [LAX](https://developer.android.com/reference/android/os/StrictMode.ThreadPolicy.html#LAX)
        ///
        /// Required feature: android-os-StrictMode_ThreadPolicy
        #[cfg(any(feature = "all", feature = "android-os-StrictMode_ThreadPolicy"))]
        pub fn LAX<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::StrictMode_ThreadPolicy>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/os/StrictMode$ThreadPolicy\0", "LAX\0", "Landroid/os/StrictMode$ThreadPolicy;\0");
                env.get_static_object_field(class, field)
            }
        }
    }
}
