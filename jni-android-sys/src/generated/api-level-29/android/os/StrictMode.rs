// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-os-StrictMode"))]
__jni_bindgen! {
    /// public final class [StrictMode](https://developer.android.com/reference/android/os/StrictMode.html)
    ///
    /// Required feature: android-os-StrictMode
    public final class StrictMode ("android/os/StrictMode") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [StrictMode](https://developer.android.com/reference/android/os/StrictMode.html#StrictMode())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::os::StrictMode>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/os/StrictMode", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/StrictMode\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [setThreadPolicy](https://developer.android.com/reference/android/os/StrictMode.html#setThreadPolicy(android.os.StrictMode.ThreadPolicy))
        ///
        /// Required features: "android-os-StrictMode_ThreadPolicy"
        #[cfg(any(feature = "all", all(feature = "android-os-StrictMode_ThreadPolicy")))]
        pub fn setThreadPolicy<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::StrictMode_ThreadPolicy>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/StrictMode", java.flags == PUBLIC | STATIC, .name == "setThreadPolicy", .descriptor == "(Landroid/os/StrictMode$ThreadPolicy;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/os/StrictMode\0", "setThreadPolicy\0", "(Landroid/os/StrictMode$ThreadPolicy;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getThreadPolicy](https://developer.android.com/reference/android/os/StrictMode.html#getThreadPolicy())
        ///
        /// Required features: "android-os-StrictMode_ThreadPolicy"
        #[cfg(any(feature = "all", all(feature = "android-os-StrictMode_ThreadPolicy")))]
        pub fn getThreadPolicy<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::StrictMode_ThreadPolicy>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/StrictMode", java.flags == PUBLIC | STATIC, .name == "getThreadPolicy", .descriptor == "()Landroid/os/StrictMode$ThreadPolicy;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/os/StrictMode\0", "getThreadPolicy\0", "()Landroid/os/StrictMode$ThreadPolicy;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [allowThreadDiskWrites](https://developer.android.com/reference/android/os/StrictMode.html#allowThreadDiskWrites())
        ///
        /// Required features: "android-os-StrictMode_ThreadPolicy"
        #[cfg(any(feature = "all", all(feature = "android-os-StrictMode_ThreadPolicy")))]
        pub fn allowThreadDiskWrites<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::StrictMode_ThreadPolicy>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/StrictMode", java.flags == PUBLIC | STATIC, .name == "allowThreadDiskWrites", .descriptor == "()Landroid/os/StrictMode$ThreadPolicy;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/os/StrictMode\0", "allowThreadDiskWrites\0", "()Landroid/os/StrictMode$ThreadPolicy;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [allowThreadDiskReads](https://developer.android.com/reference/android/os/StrictMode.html#allowThreadDiskReads())
        ///
        /// Required features: "android-os-StrictMode_ThreadPolicy"
        #[cfg(any(feature = "all", all(feature = "android-os-StrictMode_ThreadPolicy")))]
        pub fn allowThreadDiskReads<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::StrictMode_ThreadPolicy>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/StrictMode", java.flags == PUBLIC | STATIC, .name == "allowThreadDiskReads", .descriptor == "()Landroid/os/StrictMode$ThreadPolicy;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/os/StrictMode\0", "allowThreadDiskReads\0", "()Landroid/os/StrictMode$ThreadPolicy;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setVmPolicy](https://developer.android.com/reference/android/os/StrictMode.html#setVmPolicy(android.os.StrictMode.VmPolicy))
        ///
        /// Required features: "android-os-StrictMode_VmPolicy"
        #[cfg(any(feature = "all", all(feature = "android-os-StrictMode_VmPolicy")))]
        pub fn setVmPolicy<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::StrictMode_VmPolicy>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/StrictMode", java.flags == PUBLIC | STATIC, .name == "setVmPolicy", .descriptor == "(Landroid/os/StrictMode$VmPolicy;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/os/StrictMode\0", "setVmPolicy\0", "(Landroid/os/StrictMode$VmPolicy;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getVmPolicy](https://developer.android.com/reference/android/os/StrictMode.html#getVmPolicy())
        ///
        /// Required features: "android-os-StrictMode_VmPolicy"
        #[cfg(any(feature = "all", all(feature = "android-os-StrictMode_VmPolicy")))]
        pub fn getVmPolicy<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::StrictMode_VmPolicy>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/StrictMode", java.flags == PUBLIC | STATIC, .name == "getVmPolicy", .descriptor == "()Landroid/os/StrictMode$VmPolicy;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/os/StrictMode\0", "getVmPolicy\0", "()Landroid/os/StrictMode$VmPolicy;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [enableDefaults](https://developer.android.com/reference/android/os/StrictMode.html#enableDefaults())
        pub fn enableDefaults<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/StrictMode", java.flags == PUBLIC | STATIC, .name == "enableDefaults", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/os/StrictMode\0", "enableDefaults\0", "()V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [noteSlowCall](https://developer.android.com/reference/android/os/StrictMode.html#noteSlowCall(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn noteSlowCall<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/StrictMode", java.flags == PUBLIC | STATIC, .name == "noteSlowCall", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/os/StrictMode\0", "noteSlowCall\0", "(Ljava/lang/String;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
