// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-os-Debug_MemoryInfo"))]
__jni_bindgen! {
    /// public class [Debug.MemoryInfo](https://developer.android.com/reference/android/os/Debug.MemoryInfo.html)
    ///
    /// Required feature: android-os-Debug_MemoryInfo
    public class Debug_MemoryInfo ("android/os/Debug$MemoryInfo") extends crate::java::lang::Object, implements crate::android::os::Parcelable {

        /// [MemoryInfo](https://developer.android.com/reference/android/os/Debug.MemoryInfo.html#MemoryInfo())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::os::Debug_MemoryInfo>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/Debug$MemoryInfo", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/Debug$MemoryInfo\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTotalPss](https://developer.android.com/reference/android/os/Debug.MemoryInfo.html#getTotalPss())
        pub fn getTotalPss<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/Debug$MemoryInfo", java.flags == PUBLIC, .name == "getTotalPss", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/Debug$MemoryInfo\0", "getTotalPss\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTotalSwappablePss](https://developer.android.com/reference/android/os/Debug.MemoryInfo.html#getTotalSwappablePss())
        pub fn getTotalSwappablePss<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/Debug$MemoryInfo", java.flags == PUBLIC, .name == "getTotalSwappablePss", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/Debug$MemoryInfo\0", "getTotalSwappablePss\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTotalPrivateDirty](https://developer.android.com/reference/android/os/Debug.MemoryInfo.html#getTotalPrivateDirty())
        pub fn getTotalPrivateDirty<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/Debug$MemoryInfo", java.flags == PUBLIC, .name == "getTotalPrivateDirty", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/Debug$MemoryInfo\0", "getTotalPrivateDirty\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTotalSharedDirty](https://developer.android.com/reference/android/os/Debug.MemoryInfo.html#getTotalSharedDirty())
        pub fn getTotalSharedDirty<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/Debug$MemoryInfo", java.flags == PUBLIC, .name == "getTotalSharedDirty", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/Debug$MemoryInfo\0", "getTotalSharedDirty\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTotalPrivateClean](https://developer.android.com/reference/android/os/Debug.MemoryInfo.html#getTotalPrivateClean())
        pub fn getTotalPrivateClean<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/Debug$MemoryInfo", java.flags == PUBLIC, .name == "getTotalPrivateClean", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/Debug$MemoryInfo\0", "getTotalPrivateClean\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTotalSharedClean](https://developer.android.com/reference/android/os/Debug.MemoryInfo.html#getTotalSharedClean())
        pub fn getTotalSharedClean<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/Debug$MemoryInfo", java.flags == PUBLIC, .name == "getTotalSharedClean", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/Debug$MemoryInfo\0", "getTotalSharedClean\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMemoryStat](https://developer.android.com/reference/android/os/Debug.MemoryInfo.html#getMemoryStat(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getMemoryStat<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/Debug$MemoryInfo", java.flags == PUBLIC, .name == "getMemoryStat", .descriptor == "(Ljava/lang/String;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/Debug$MemoryInfo\0", "getMemoryStat\0", "(Ljava/lang/String;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMemoryStats](https://developer.android.com/reference/android/os/Debug.MemoryInfo.html#getMemoryStats())
        ///
        /// Required features: "java-util-Map"
        #[cfg(any(feature = "all", all(feature = "java-util-Map")))]
        pub fn getMemoryStats<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Map>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/Debug$MemoryInfo", java.flags == PUBLIC, .name == "getMemoryStats", .descriptor == "()Ljava/util/Map;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/Debug$MemoryInfo\0", "getMemoryStats\0", "()Ljava/util/Map;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [describeContents](https://developer.android.com/reference/android/os/Debug.MemoryInfo.html#describeContents())
        pub fn describeContents<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/Debug$MemoryInfo", java.flags == PUBLIC, .name == "describeContents", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/Debug$MemoryInfo\0", "describeContents\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [writeToParcel](https://developer.android.com/reference/android/os/Debug.MemoryInfo.html#writeToParcel(android.os.Parcel,%20int))
        ///
        /// Required features: "android-os-Parcel"
        #[cfg(any(feature = "all", all(feature = "android-os-Parcel")))]
        pub fn writeToParcel<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Parcel>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/Debug$MemoryInfo", java.flags == PUBLIC, .name == "writeToParcel", .descriptor == "(Landroid/os/Parcel;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/Debug$MemoryInfo\0", "writeToParcel\0", "(Landroid/os/Parcel;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [readFromParcel](https://developer.android.com/reference/android/os/Debug.MemoryInfo.html#readFromParcel(android.os.Parcel))
        ///
        /// Required features: "android-os-Parcel"
        #[cfg(any(feature = "all", all(feature = "android-os-Parcel")))]
        pub fn readFromParcel<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Parcel>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/Debug$MemoryInfo", java.flags == PUBLIC, .name == "readFromParcel", .descriptor == "(Landroid/os/Parcel;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/Debug$MemoryInfo\0", "readFromParcel\0", "(Landroid/os/Parcel;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// **get** public static final [CREATOR](https://developer.android.com/reference/android/os/Debug.MemoryInfo.html#CREATOR)
        ///
        /// Required feature: android-os-Parcelable_Creator
        #[cfg(any(feature = "all", feature = "android-os-Parcelable_Creator"))]
        pub fn CREATOR<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Parcelable_Creator>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/os/Debug$MemoryInfo\0", "CREATOR\0", "Landroid/os/Parcelable$Creator;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public [dalvikPrivateDirty](https://developer.android.com/reference/android/os/Debug.MemoryInfo.html#dalvikPrivateDirty)
        pub fn dalvikPrivateDirty<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/os/Debug$MemoryInfo\0", "dalvikPrivateDirty\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [dalvikPrivateDirty](https://developer.android.com/reference/android/os/Debug.MemoryInfo.html#dalvikPrivateDirty)
        pub fn set_dalvikPrivateDirty<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/os/Debug$MemoryInfo\0", "dalvikPrivateDirty\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [dalvikPss](https://developer.android.com/reference/android/os/Debug.MemoryInfo.html#dalvikPss)
        pub fn dalvikPss<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/os/Debug$MemoryInfo\0", "dalvikPss\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [dalvikPss](https://developer.android.com/reference/android/os/Debug.MemoryInfo.html#dalvikPss)
        pub fn set_dalvikPss<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/os/Debug$MemoryInfo\0", "dalvikPss\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [dalvikSharedDirty](https://developer.android.com/reference/android/os/Debug.MemoryInfo.html#dalvikSharedDirty)
        pub fn dalvikSharedDirty<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/os/Debug$MemoryInfo\0", "dalvikSharedDirty\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [dalvikSharedDirty](https://developer.android.com/reference/android/os/Debug.MemoryInfo.html#dalvikSharedDirty)
        pub fn set_dalvikSharedDirty<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/os/Debug$MemoryInfo\0", "dalvikSharedDirty\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [nativePrivateDirty](https://developer.android.com/reference/android/os/Debug.MemoryInfo.html#nativePrivateDirty)
        pub fn nativePrivateDirty<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/os/Debug$MemoryInfo\0", "nativePrivateDirty\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [nativePrivateDirty](https://developer.android.com/reference/android/os/Debug.MemoryInfo.html#nativePrivateDirty)
        pub fn set_nativePrivateDirty<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/os/Debug$MemoryInfo\0", "nativePrivateDirty\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [nativePss](https://developer.android.com/reference/android/os/Debug.MemoryInfo.html#nativePss)
        pub fn nativePss<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/os/Debug$MemoryInfo\0", "nativePss\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [nativePss](https://developer.android.com/reference/android/os/Debug.MemoryInfo.html#nativePss)
        pub fn set_nativePss<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/os/Debug$MemoryInfo\0", "nativePss\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [nativeSharedDirty](https://developer.android.com/reference/android/os/Debug.MemoryInfo.html#nativeSharedDirty)
        pub fn nativeSharedDirty<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/os/Debug$MemoryInfo\0", "nativeSharedDirty\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [nativeSharedDirty](https://developer.android.com/reference/android/os/Debug.MemoryInfo.html#nativeSharedDirty)
        pub fn set_nativeSharedDirty<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/os/Debug$MemoryInfo\0", "nativeSharedDirty\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [otherPrivateDirty](https://developer.android.com/reference/android/os/Debug.MemoryInfo.html#otherPrivateDirty)
        pub fn otherPrivateDirty<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/os/Debug$MemoryInfo\0", "otherPrivateDirty\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [otherPrivateDirty](https://developer.android.com/reference/android/os/Debug.MemoryInfo.html#otherPrivateDirty)
        pub fn set_otherPrivateDirty<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/os/Debug$MemoryInfo\0", "otherPrivateDirty\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [otherPss](https://developer.android.com/reference/android/os/Debug.MemoryInfo.html#otherPss)
        pub fn otherPss<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/os/Debug$MemoryInfo\0", "otherPss\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [otherPss](https://developer.android.com/reference/android/os/Debug.MemoryInfo.html#otherPss)
        pub fn set_otherPss<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/os/Debug$MemoryInfo\0", "otherPss\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [otherSharedDirty](https://developer.android.com/reference/android/os/Debug.MemoryInfo.html#otherSharedDirty)
        pub fn otherSharedDirty<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/os/Debug$MemoryInfo\0", "otherSharedDirty\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [otherSharedDirty](https://developer.android.com/reference/android/os/Debug.MemoryInfo.html#otherSharedDirty)
        pub fn set_otherSharedDirty<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/os/Debug$MemoryInfo\0", "otherSharedDirty\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }
    }
}
