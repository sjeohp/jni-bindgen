// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-os-health-SystemHealthManager"))]
__jni_bindgen! {
    /// public class [SystemHealthManager](https://developer.android.com/reference/android/os/health/SystemHealthManager.html)
    ///
    /// Required feature: android-os-health-SystemHealthManager
    public class SystemHealthManager ("android/os/health/SystemHealthManager") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [SystemHealthManager](https://developer.android.com/reference/android/os/health/SystemHealthManager.html#SystemHealthManager())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::os::health::SystemHealthManager>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/os/health/SystemHealthManager", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/health/SystemHealthManager\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [takeUidSnapshot](https://developer.android.com/reference/android/os/health/SystemHealthManager.html#takeUidSnapshot(int))
        ///
        /// Required features: "android-os-health-HealthStats"
        #[cfg(any(feature = "all", all(feature = "android-os-health-HealthStats")))]
        pub fn takeUidSnapshot<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::health::HealthStats>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/health/SystemHealthManager", java.flags == PUBLIC, .name == "takeUidSnapshot", .descriptor == "(I)Landroid/os/health/HealthStats;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/health/SystemHealthManager\0", "takeUidSnapshot\0", "(I)Landroid/os/health/HealthStats;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [takeMyUidSnapshot](https://developer.android.com/reference/android/os/health/SystemHealthManager.html#takeMyUidSnapshot())
        ///
        /// Required features: "android-os-health-HealthStats"
        #[cfg(any(feature = "all", all(feature = "android-os-health-HealthStats")))]
        pub fn takeMyUidSnapshot<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::health::HealthStats>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/health/SystemHealthManager", java.flags == PUBLIC, .name == "takeMyUidSnapshot", .descriptor == "()Landroid/os/health/HealthStats;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/health/SystemHealthManager\0", "takeMyUidSnapshot\0", "()Landroid/os/health/HealthStats;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [takeUidSnapshots](https://developer.android.com/reference/android/os/health/SystemHealthManager.html#takeUidSnapshots(int%5B%5D))
        ///
        /// Required features: "android-os-health-HealthStats"
        #[cfg(any(feature = "all", all(feature = "android-os-health-HealthStats")))]
        pub fn takeUidSnapshots<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::android::os::health::HealthStats, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/health/SystemHealthManager", java.flags == PUBLIC, .name == "takeUidSnapshots", .descriptor == "([I)[Landroid/os/health/HealthStats;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/health/SystemHealthManager\0", "takeUidSnapshots\0", "([I)[Landroid/os/health/HealthStats;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
