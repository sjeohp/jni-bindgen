// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-os-PowerManager"))]
__jni_bindgen! {
    /// public final class [PowerManager](https://developer.android.com/reference/android/os/PowerManager.html)
    ///
    /// Required feature: android-os-PowerManager
    public final class PowerManager ("android/os/PowerManager") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [PowerManager](https://developer.android.com/reference/android/os/PowerManager.html#PowerManager())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::os::PowerManager>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/os/PowerManager", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/PowerManager\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [newWakeLock](https://developer.android.com/reference/android/os/PowerManager.html#newWakeLock(int,%20java.lang.String))
        ///
        /// Required features: "android-os-PowerManager_WakeLock", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-os-PowerManager_WakeLock", feature = "java-lang-String")))]
        pub fn newWakeLock<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::PowerManager_WakeLock>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/PowerManager", java.flags == PUBLIC, .name == "newWakeLock", .descriptor == "(ILjava/lang/String;)Landroid/os/PowerManager$WakeLock;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/PowerManager\0", "newWakeLock\0", "(ILjava/lang/String;)Landroid/os/PowerManager$WakeLock;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isWakeLockLevelSupported](https://developer.android.com/reference/android/os/PowerManager.html#isWakeLockLevelSupported(int))
        pub fn isWakeLockLevelSupported<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/PowerManager", java.flags == PUBLIC, .name == "isWakeLockLevelSupported", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/PowerManager\0", "isWakeLockLevelSupported\0", "(I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isScreenOn](https://developer.android.com/reference/android/os/PowerManager.html#isScreenOn())
        #[deprecated] pub fn isScreenOn<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/PowerManager", java.flags == PUBLIC, .name == "isScreenOn", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/PowerManager\0", "isScreenOn\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isInteractive](https://developer.android.com/reference/android/os/PowerManager.html#isInteractive())
        pub fn isInteractive<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/PowerManager", java.flags == PUBLIC, .name == "isInteractive", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/PowerManager\0", "isInteractive\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [reboot](https://developer.android.com/reference/android/os/PowerManager.html#reboot(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn reboot<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/PowerManager", java.flags == PUBLIC, .name == "reboot", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/PowerManager\0", "reboot\0", "(Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isPowerSaveMode](https://developer.android.com/reference/android/os/PowerManager.html#isPowerSaveMode())
        pub fn isPowerSaveMode<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/PowerManager", java.flags == PUBLIC, .name == "isPowerSaveMode", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/PowerManager\0", "isPowerSaveMode\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLocationPowerSaveMode](https://developer.android.com/reference/android/os/PowerManager.html#getLocationPowerSaveMode())
        pub fn getLocationPowerSaveMode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/PowerManager", java.flags == PUBLIC, .name == "getLocationPowerSaveMode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/PowerManager\0", "getLocationPowerSaveMode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isDeviceIdleMode](https://developer.android.com/reference/android/os/PowerManager.html#isDeviceIdleMode())
        pub fn isDeviceIdleMode<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/PowerManager", java.flags == PUBLIC, .name == "isDeviceIdleMode", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/PowerManager\0", "isDeviceIdleMode\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isIgnoringBatteryOptimizations](https://developer.android.com/reference/android/os/PowerManager.html#isIgnoringBatteryOptimizations(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn isIgnoringBatteryOptimizations<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/PowerManager", java.flags == PUBLIC, .name == "isIgnoringBatteryOptimizations", .descriptor == "(Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/PowerManager\0", "isIgnoringBatteryOptimizations\0", "(Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isSustainedPerformanceModeSupported](https://developer.android.com/reference/android/os/PowerManager.html#isSustainedPerformanceModeSupported())
        pub fn isSustainedPerformanceModeSupported<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/PowerManager", java.flags == PUBLIC, .name == "isSustainedPerformanceModeSupported", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/PowerManager\0", "isSustainedPerformanceModeSupported\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCurrentThermalStatus](https://developer.android.com/reference/android/os/PowerManager.html#getCurrentThermalStatus())
        pub fn getCurrentThermalStatus<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/PowerManager", java.flags == PUBLIC, .name == "getCurrentThermalStatus", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/PowerManager\0", "getCurrentThermalStatus\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addThermalStatusListener](https://developer.android.com/reference/android/os/PowerManager.html#addThermalStatusListener(android.os.PowerManager.OnThermalStatusChangedListener))
        ///
        /// Required features: "android-os-PowerManager_OnThermalStatusChangedListener"
        #[cfg(any(feature = "all", all(feature = "android-os-PowerManager_OnThermalStatusChangedListener")))]
        pub fn addThermalStatusListener_OnThermalStatusChangedListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::PowerManager_OnThermalStatusChangedListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/PowerManager", java.flags == PUBLIC, .name == "addThermalStatusListener", .descriptor == "(Landroid/os/PowerManager$OnThermalStatusChangedListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/PowerManager\0", "addThermalStatusListener\0", "(Landroid/os/PowerManager$OnThermalStatusChangedListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addThermalStatusListener](https://developer.android.com/reference/android/os/PowerManager.html#addThermalStatusListener(java.util.concurrent.Executor,%20android.os.PowerManager.OnThermalStatusChangedListener))
        ///
        /// Required features: "android-os-PowerManager_OnThermalStatusChangedListener", "java-util-concurrent-Executor"
        #[cfg(any(feature = "all", all(feature = "android-os-PowerManager_OnThermalStatusChangedListener", feature = "java-util-concurrent-Executor")))]
        pub fn addThermalStatusListener_Executor_OnThermalStatusChangedListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::PowerManager_OnThermalStatusChangedListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/PowerManager", java.flags == PUBLIC, .name == "addThermalStatusListener", .descriptor == "(Ljava/util/concurrent/Executor;Landroid/os/PowerManager$OnThermalStatusChangedListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/PowerManager\0", "addThermalStatusListener\0", "(Ljava/util/concurrent/Executor;Landroid/os/PowerManager$OnThermalStatusChangedListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeThermalStatusListener](https://developer.android.com/reference/android/os/PowerManager.html#removeThermalStatusListener(android.os.PowerManager.OnThermalStatusChangedListener))
        ///
        /// Required features: "android-os-PowerManager_OnThermalStatusChangedListener"
        #[cfg(any(feature = "all", all(feature = "android-os-PowerManager_OnThermalStatusChangedListener")))]
        pub fn removeThermalStatusListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::PowerManager_OnThermalStatusChangedListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/PowerManager", java.flags == PUBLIC, .name == "removeThermalStatusListener", .descriptor == "(Landroid/os/PowerManager$OnThermalStatusChangedListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/PowerManager\0", "removeThermalStatusListener\0", "(Landroid/os/PowerManager$OnThermalStatusChangedListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [ACQUIRE_CAUSES_WAKEUP](https://developer.android.com/reference/android/os/PowerManager.html#ACQUIRE_CAUSES_WAKEUP)
        pub const ACQUIRE_CAUSES_WAKEUP : i32 = 268435456;

        /// public static final [ACTION_DEVICE_IDLE_MODE_CHANGED](https://developer.android.com/reference/android/os/PowerManager.html#ACTION_DEVICE_IDLE_MODE_CHANGED)
        pub const ACTION_DEVICE_IDLE_MODE_CHANGED : &'static str = "android.os.action.DEVICE_IDLE_MODE_CHANGED";

        /// public static final [ACTION_POWER_SAVE_MODE_CHANGED](https://developer.android.com/reference/android/os/PowerManager.html#ACTION_POWER_SAVE_MODE_CHANGED)
        pub const ACTION_POWER_SAVE_MODE_CHANGED : &'static str = "android.os.action.POWER_SAVE_MODE_CHANGED";

        /// public static final [FULL_WAKE_LOCK](https://developer.android.com/reference/android/os/PowerManager.html#FULL_WAKE_LOCK)
        #[deprecated] pub const FULL_WAKE_LOCK : i32 = 26;

        /// public static final [LOCATION_MODE_ALL_DISABLED_WHEN_SCREEN_OFF](https://developer.android.com/reference/android/os/PowerManager.html#LOCATION_MODE_ALL_DISABLED_WHEN_SCREEN_OFF)
        pub const LOCATION_MODE_ALL_DISABLED_WHEN_SCREEN_OFF : i32 = 2;

        /// public static final [LOCATION_MODE_FOREGROUND_ONLY](https://developer.android.com/reference/android/os/PowerManager.html#LOCATION_MODE_FOREGROUND_ONLY)
        pub const LOCATION_MODE_FOREGROUND_ONLY : i32 = 3;

        /// public static final [LOCATION_MODE_GPS_DISABLED_WHEN_SCREEN_OFF](https://developer.android.com/reference/android/os/PowerManager.html#LOCATION_MODE_GPS_DISABLED_WHEN_SCREEN_OFF)
        pub const LOCATION_MODE_GPS_DISABLED_WHEN_SCREEN_OFF : i32 = 1;

        /// public static final [LOCATION_MODE_NO_CHANGE](https://developer.android.com/reference/android/os/PowerManager.html#LOCATION_MODE_NO_CHANGE)
        pub const LOCATION_MODE_NO_CHANGE : i32 = 0;

        /// public static final [LOCATION_MODE_THROTTLE_REQUESTS_WHEN_SCREEN_OFF](https://developer.android.com/reference/android/os/PowerManager.html#LOCATION_MODE_THROTTLE_REQUESTS_WHEN_SCREEN_OFF)
        pub const LOCATION_MODE_THROTTLE_REQUESTS_WHEN_SCREEN_OFF : i32 = 4;

        /// public static final [ON_AFTER_RELEASE](https://developer.android.com/reference/android/os/PowerManager.html#ON_AFTER_RELEASE)
        pub const ON_AFTER_RELEASE : i32 = 536870912;

        /// public static final [PARTIAL_WAKE_LOCK](https://developer.android.com/reference/android/os/PowerManager.html#PARTIAL_WAKE_LOCK)
        pub const PARTIAL_WAKE_LOCK : i32 = 1;

        /// public static final [PROXIMITY_SCREEN_OFF_WAKE_LOCK](https://developer.android.com/reference/android/os/PowerManager.html#PROXIMITY_SCREEN_OFF_WAKE_LOCK)
        pub const PROXIMITY_SCREEN_OFF_WAKE_LOCK : i32 = 32;

        /// public static final [RELEASE_FLAG_WAIT_FOR_NO_PROXIMITY](https://developer.android.com/reference/android/os/PowerManager.html#RELEASE_FLAG_WAIT_FOR_NO_PROXIMITY)
        pub const RELEASE_FLAG_WAIT_FOR_NO_PROXIMITY : i32 = 1;

        /// public static final [SCREEN_BRIGHT_WAKE_LOCK](https://developer.android.com/reference/android/os/PowerManager.html#SCREEN_BRIGHT_WAKE_LOCK)
        #[deprecated] pub const SCREEN_BRIGHT_WAKE_LOCK : i32 = 10;

        /// public static final [SCREEN_DIM_WAKE_LOCK](https://developer.android.com/reference/android/os/PowerManager.html#SCREEN_DIM_WAKE_LOCK)
        #[deprecated] pub const SCREEN_DIM_WAKE_LOCK : i32 = 6;

        /// public static final [THERMAL_STATUS_CRITICAL](https://developer.android.com/reference/android/os/PowerManager.html#THERMAL_STATUS_CRITICAL)
        pub const THERMAL_STATUS_CRITICAL : i32 = 4;

        /// public static final [THERMAL_STATUS_EMERGENCY](https://developer.android.com/reference/android/os/PowerManager.html#THERMAL_STATUS_EMERGENCY)
        pub const THERMAL_STATUS_EMERGENCY : i32 = 5;

        /// public static final [THERMAL_STATUS_LIGHT](https://developer.android.com/reference/android/os/PowerManager.html#THERMAL_STATUS_LIGHT)
        pub const THERMAL_STATUS_LIGHT : i32 = 1;

        /// public static final [THERMAL_STATUS_MODERATE](https://developer.android.com/reference/android/os/PowerManager.html#THERMAL_STATUS_MODERATE)
        pub const THERMAL_STATUS_MODERATE : i32 = 2;

        /// public static final [THERMAL_STATUS_NONE](https://developer.android.com/reference/android/os/PowerManager.html#THERMAL_STATUS_NONE)
        pub const THERMAL_STATUS_NONE : i32 = 0;

        /// public static final [THERMAL_STATUS_SEVERE](https://developer.android.com/reference/android/os/PowerManager.html#THERMAL_STATUS_SEVERE)
        pub const THERMAL_STATUS_SEVERE : i32 = 3;

        /// public static final [THERMAL_STATUS_SHUTDOWN](https://developer.android.com/reference/android/os/PowerManager.html#THERMAL_STATUS_SHUTDOWN)
        pub const THERMAL_STATUS_SHUTDOWN : i32 = 6;
    }
}
