// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-os-UserManager"))]
__jni_bindgen! {
    /// public class [UserManager](https://developer.android.com/reference/android/os/UserManager.html)
    ///
    /// Required feature: android-os-UserManager
    public class UserManager ("android/os/UserManager") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [UserManager](https://developer.android.com/reference/android/os/UserManager.html#UserManager())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::os::UserManager>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/os/UserManager", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/UserManager\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [supportsMultipleUsers](https://developer.android.com/reference/android/os/UserManager.html#supportsMultipleUsers())
        pub fn supportsMultipleUsers<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/UserManager", java.flags == PUBLIC | STATIC, .name == "supportsMultipleUsers", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/os/UserManager\0", "supportsMultipleUsers\0", "()Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getUserName](https://developer.android.com/reference/android/os/UserManager.html#getUserName())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getUserName<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/UserManager", java.flags == PUBLIC, .name == "getUserName", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/UserManager\0", "getUserName\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isUserAGoat](https://developer.android.com/reference/android/os/UserManager.html#isUserAGoat())
        pub fn isUserAGoat<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/UserManager", java.flags == PUBLIC, .name == "isUserAGoat", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/UserManager\0", "isUserAGoat\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isSystemUser](https://developer.android.com/reference/android/os/UserManager.html#isSystemUser())
        pub fn isSystemUser<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/UserManager", java.flags == PUBLIC, .name == "isSystemUser", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/UserManager\0", "isSystemUser\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isDemoUser](https://developer.android.com/reference/android/os/UserManager.html#isDemoUser())
        pub fn isDemoUser<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/UserManager", java.flags == PUBLIC, .name == "isDemoUser", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/UserManager\0", "isDemoUser\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isUserRunning](https://developer.android.com/reference/android/os/UserManager.html#isUserRunning(android.os.UserHandle))
        ///
        /// Required features: "android-os-UserHandle"
        #[cfg(any(feature = "all", all(feature = "android-os-UserHandle")))]
        pub fn isUserRunning<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::UserHandle>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/UserManager", java.flags == PUBLIC, .name == "isUserRunning", .descriptor == "(Landroid/os/UserHandle;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/UserManager\0", "isUserRunning\0", "(Landroid/os/UserHandle;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isUserRunningOrStopping](https://developer.android.com/reference/android/os/UserManager.html#isUserRunningOrStopping(android.os.UserHandle))
        ///
        /// Required features: "android-os-UserHandle"
        #[cfg(any(feature = "all", all(feature = "android-os-UserHandle")))]
        pub fn isUserRunningOrStopping<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::UserHandle>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/UserManager", java.flags == PUBLIC, .name == "isUserRunningOrStopping", .descriptor == "(Landroid/os/UserHandle;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/UserManager\0", "isUserRunningOrStopping\0", "(Landroid/os/UserHandle;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isUserUnlocked](https://developer.android.com/reference/android/os/UserManager.html#isUserUnlocked())
        pub fn isUserUnlocked<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/UserManager", java.flags == PUBLIC, .name == "isUserUnlocked", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/UserManager\0", "isUserUnlocked\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isUserUnlocked](https://developer.android.com/reference/android/os/UserManager.html#isUserUnlocked(android.os.UserHandle))
        ///
        /// Required features: "android-os-UserHandle"
        #[cfg(any(feature = "all", all(feature = "android-os-UserHandle")))]
        pub fn isUserUnlocked_UserHandle<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::UserHandle>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/UserManager", java.flags == PUBLIC, .name == "isUserUnlocked", .descriptor == "(Landroid/os/UserHandle;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/UserManager\0", "isUserUnlocked\0", "(Landroid/os/UserHandle;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getUserRestrictions](https://developer.android.com/reference/android/os/UserManager.html#getUserRestrictions())
        ///
        /// Required features: "android-os-Bundle"
        #[cfg(any(feature = "all", all(feature = "android-os-Bundle")))]
        pub fn getUserRestrictions<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Bundle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/UserManager", java.flags == PUBLIC, .name == "getUserRestrictions", .descriptor == "()Landroid/os/Bundle;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/UserManager\0", "getUserRestrictions\0", "()Landroid/os/Bundle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getUserRestrictions](https://developer.android.com/reference/android/os/UserManager.html#getUserRestrictions(android.os.UserHandle))
        ///
        /// Required features: "android-os-Bundle", "android-os-UserHandle"
        #[cfg(any(feature = "all", all(feature = "android-os-Bundle", feature = "android-os-UserHandle")))]
        pub fn getUserRestrictions_UserHandle<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::UserHandle>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Bundle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/UserManager", java.flags == PUBLIC, .name == "getUserRestrictions", .descriptor == "(Landroid/os/UserHandle;)Landroid/os/Bundle;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/UserManager\0", "getUserRestrictions\0", "(Landroid/os/UserHandle;)Landroid/os/Bundle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setUserRestrictions](https://developer.android.com/reference/android/os/UserManager.html#setUserRestrictions(android.os.Bundle))
        ///
        /// Required features: "android-os-Bundle"
        #[cfg(any(feature = "all", all(feature = "android-os-Bundle")))]
        #[deprecated] pub fn setUserRestrictions_Bundle<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/UserManager", java.flags == PUBLIC, .name == "setUserRestrictions", .descriptor == "(Landroid/os/Bundle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/UserManager\0", "setUserRestrictions\0", "(Landroid/os/Bundle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setUserRestrictions](https://developer.android.com/reference/android/os/UserManager.html#setUserRestrictions(android.os.Bundle,%20android.os.UserHandle))
        ///
        /// Required features: "android-os-Bundle", "android-os-UserHandle"
        #[cfg(any(feature = "all", all(feature = "android-os-Bundle", feature = "android-os-UserHandle")))]
        #[deprecated] pub fn setUserRestrictions_Bundle_UserHandle<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::UserHandle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/UserManager", java.flags == PUBLIC, .name == "setUserRestrictions", .descriptor == "(Landroid/os/Bundle;Landroid/os/UserHandle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/UserManager\0", "setUserRestrictions\0", "(Landroid/os/Bundle;Landroid/os/UserHandle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setUserRestriction](https://developer.android.com/reference/android/os/UserManager.html#setUserRestriction(java.lang.String,%20boolean))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        #[deprecated] pub fn setUserRestriction<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/UserManager", java.flags == PUBLIC, .name == "setUserRestriction", .descriptor == "(Ljava/lang/String;Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/UserManager\0", "setUserRestriction\0", "(Ljava/lang/String;Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasUserRestriction](https://developer.android.com/reference/android/os/UserManager.html#hasUserRestriction(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn hasUserRestriction<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/UserManager", java.flags == PUBLIC, .name == "hasUserRestriction", .descriptor == "(Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/UserManager\0", "hasUserRestriction\0", "(Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSerialNumberForUser](https://developer.android.com/reference/android/os/UserManager.html#getSerialNumberForUser(android.os.UserHandle))
        ///
        /// Required features: "android-os-UserHandle"
        #[cfg(any(feature = "all", all(feature = "android-os-UserHandle")))]
        pub fn getSerialNumberForUser<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::UserHandle>>) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/UserManager", java.flags == PUBLIC, .name == "getSerialNumberForUser", .descriptor == "(Landroid/os/UserHandle;)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/UserManager\0", "getSerialNumberForUser\0", "(Landroid/os/UserHandle;)J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getUserForSerialNumber](https://developer.android.com/reference/android/os/UserManager.html#getUserForSerialNumber(long))
        ///
        /// Required features: "android-os-UserHandle"
        #[cfg(any(feature = "all", all(feature = "android-os-UserHandle")))]
        pub fn getUserForSerialNumber<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::UserHandle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/UserManager", java.flags == PUBLIC, .name == "getUserForSerialNumber", .descriptor == "(J)Landroid/os/UserHandle;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/UserManager\0", "getUserForSerialNumber\0", "(J)Landroid/os/UserHandle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createUserCreationIntent](https://developer.android.com/reference/android/os/UserManager.html#createUserCreationIntent(java.lang.String,%20java.lang.String,%20java.lang.String,%20android.os.PersistableBundle))
        ///
        /// Required features: "android-content-Intent", "android-os-PersistableBundle", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-Intent", feature = "android-os-PersistableBundle", feature = "java-lang-String")))]
        pub fn createUserCreationIntent<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::PersistableBundle>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::Intent>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/UserManager", java.flags == PUBLIC | STATIC, .name == "createUserCreationIntent", .descriptor == "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/os/PersistableBundle;)Landroid/content/Intent;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/os/UserManager\0", "createUserCreationIntent\0", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/os/PersistableBundle;)Landroid/content/Intent;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getUserCount](https://developer.android.com/reference/android/os/UserManager.html#getUserCount())
        pub fn getUserCount<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/UserManager", java.flags == PUBLIC, .name == "getUserCount", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/UserManager\0", "getUserCount\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getUserProfiles](https://developer.android.com/reference/android/os/UserManager.html#getUserProfiles())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getUserProfiles<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/UserManager", java.flags == PUBLIC, .name == "getUserProfiles", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/UserManager\0", "getUserProfiles\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [requestQuietModeEnabled](https://developer.android.com/reference/android/os/UserManager.html#requestQuietModeEnabled(boolean,%20android.os.UserHandle))
        ///
        /// Required features: "android-os-UserHandle"
        #[cfg(any(feature = "all", all(feature = "android-os-UserHandle")))]
        pub fn requestQuietModeEnabled<'env>(&'env self, arg0: bool, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::UserHandle>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/UserManager", java.flags == PUBLIC, .name == "requestQuietModeEnabled", .descriptor == "(ZLandroid/os/UserHandle;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/UserManager\0", "requestQuietModeEnabled\0", "(ZLandroid/os/UserHandle;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isQuietModeEnabled](https://developer.android.com/reference/android/os/UserManager.html#isQuietModeEnabled(android.os.UserHandle))
        ///
        /// Required features: "android-os-UserHandle"
        #[cfg(any(feature = "all", all(feature = "android-os-UserHandle")))]
        pub fn isQuietModeEnabled<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::UserHandle>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/UserManager", java.flags == PUBLIC, .name == "isQuietModeEnabled", .descriptor == "(Landroid/os/UserHandle;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/UserManager\0", "isQuietModeEnabled\0", "(Landroid/os/UserHandle;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getApplicationRestrictions](https://developer.android.com/reference/android/os/UserManager.html#getApplicationRestrictions(java.lang.String))
        ///
        /// Required features: "android-os-Bundle", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-os-Bundle", feature = "java-lang-String")))]
        pub fn getApplicationRestrictions<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Bundle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/UserManager", java.flags == PUBLIC, .name == "getApplicationRestrictions", .descriptor == "(Ljava/lang/String;)Landroid/os/Bundle;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/UserManager\0", "getApplicationRestrictions\0", "(Ljava/lang/String;)Landroid/os/Bundle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setRestrictionsChallenge](https://developer.android.com/reference/android/os/UserManager.html#setRestrictionsChallenge(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        #[deprecated] pub fn setRestrictionsChallenge<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/UserManager", java.flags == PUBLIC, .name == "setRestrictionsChallenge", .descriptor == "(Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/UserManager\0", "setRestrictionsChallenge\0", "(Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getUserCreationTime](https://developer.android.com/reference/android/os/UserManager.html#getUserCreationTime(android.os.UserHandle))
        ///
        /// Required features: "android-os-UserHandle"
        #[cfg(any(feature = "all", all(feature = "android-os-UserHandle")))]
        pub fn getUserCreationTime<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::UserHandle>>) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/UserManager", java.flags == PUBLIC, .name == "getUserCreationTime", .descriptor == "(Landroid/os/UserHandle;)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/UserManager\0", "getUserCreationTime\0", "(Landroid/os/UserHandle;)J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [ALLOW_PARENT_PROFILE_APP_LINKING](https://developer.android.com/reference/android/os/UserManager.html#ALLOW_PARENT_PROFILE_APP_LINKING)
        pub const ALLOW_PARENT_PROFILE_APP_LINKING : &'static str = "allow_parent_profile_app_linking";

        /// public static final [DISALLOW_ADD_MANAGED_PROFILE](https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_ADD_MANAGED_PROFILE)
        pub const DISALLOW_ADD_MANAGED_PROFILE : &'static str = "no_add_managed_profile";

        /// public static final [DISALLOW_ADD_USER](https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_ADD_USER)
        pub const DISALLOW_ADD_USER : &'static str = "no_add_user";

        /// public static final [DISALLOW_ADJUST_VOLUME](https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_ADJUST_VOLUME)
        pub const DISALLOW_ADJUST_VOLUME : &'static str = "no_adjust_volume";

        /// public static final [DISALLOW_AIRPLANE_MODE](https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_AIRPLANE_MODE)
        pub const DISALLOW_AIRPLANE_MODE : &'static str = "no_airplane_mode";

        /// public static final [DISALLOW_AMBIENT_DISPLAY](https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_AMBIENT_DISPLAY)
        pub const DISALLOW_AMBIENT_DISPLAY : &'static str = "no_ambient_display";

        /// public static final [DISALLOW_APPS_CONTROL](https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_APPS_CONTROL)
        pub const DISALLOW_APPS_CONTROL : &'static str = "no_control_apps";

        /// public static final [DISALLOW_AUTOFILL](https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_AUTOFILL)
        pub const DISALLOW_AUTOFILL : &'static str = "no_autofill";

        /// public static final [DISALLOW_BLUETOOTH](https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_BLUETOOTH)
        pub const DISALLOW_BLUETOOTH : &'static str = "no_bluetooth";

        /// public static final [DISALLOW_BLUETOOTH_SHARING](https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_BLUETOOTH_SHARING)
        pub const DISALLOW_BLUETOOTH_SHARING : &'static str = "no_bluetooth_sharing";

        /// public static final [DISALLOW_CONFIG_BLUETOOTH](https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_CONFIG_BLUETOOTH)
        pub const DISALLOW_CONFIG_BLUETOOTH : &'static str = "no_config_bluetooth";

        /// public static final [DISALLOW_CONFIG_BRIGHTNESS](https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_CONFIG_BRIGHTNESS)
        pub const DISALLOW_CONFIG_BRIGHTNESS : &'static str = "no_config_brightness";

        /// public static final [DISALLOW_CONFIG_CELL_BROADCASTS](https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_CONFIG_CELL_BROADCASTS)
        pub const DISALLOW_CONFIG_CELL_BROADCASTS : &'static str = "no_config_cell_broadcasts";

        /// public static final [DISALLOW_CONFIG_CREDENTIALS](https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_CONFIG_CREDENTIALS)
        pub const DISALLOW_CONFIG_CREDENTIALS : &'static str = "no_config_credentials";

        /// public static final [DISALLOW_CONFIG_DATE_TIME](https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_CONFIG_DATE_TIME)
        pub const DISALLOW_CONFIG_DATE_TIME : &'static str = "no_config_date_time";

        /// public static final [DISALLOW_CONFIG_LOCALE](https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_CONFIG_LOCALE)
        pub const DISALLOW_CONFIG_LOCALE : &'static str = "no_config_locale";

        /// public static final [DISALLOW_CONFIG_LOCATION](https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_CONFIG_LOCATION)
        pub const DISALLOW_CONFIG_LOCATION : &'static str = "no_config_location";

        /// public static final [DISALLOW_CONFIG_MOBILE_NETWORKS](https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_CONFIG_MOBILE_NETWORKS)
        pub const DISALLOW_CONFIG_MOBILE_NETWORKS : &'static str = "no_config_mobile_networks";

        /// public static final [DISALLOW_CONFIG_PRIVATE_DNS](https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_CONFIG_PRIVATE_DNS)
        pub const DISALLOW_CONFIG_PRIVATE_DNS : &'static str = "disallow_config_private_dns";

        /// public static final [DISALLOW_CONFIG_SCREEN_TIMEOUT](https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_CONFIG_SCREEN_TIMEOUT)
        pub const DISALLOW_CONFIG_SCREEN_TIMEOUT : &'static str = "no_config_screen_timeout";

        /// public static final [DISALLOW_CONFIG_TETHERING](https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_CONFIG_TETHERING)
        pub const DISALLOW_CONFIG_TETHERING : &'static str = "no_config_tethering";

        /// public static final [DISALLOW_CONFIG_VPN](https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_CONFIG_VPN)
        pub const DISALLOW_CONFIG_VPN : &'static str = "no_config_vpn";

        /// public static final [DISALLOW_CONFIG_WIFI](https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_CONFIG_WIFI)
        pub const DISALLOW_CONFIG_WIFI : &'static str = "no_config_wifi";

        /// public static final [DISALLOW_CONTENT_CAPTURE](https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_CONTENT_CAPTURE)
        pub const DISALLOW_CONTENT_CAPTURE : &'static str = "no_content_capture";

        /// public static final [DISALLOW_CONTENT_SUGGESTIONS](https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_CONTENT_SUGGESTIONS)
        pub const DISALLOW_CONTENT_SUGGESTIONS : &'static str = "no_content_suggestions";

        /// public static final [DISALLOW_CREATE_WINDOWS](https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_CREATE_WINDOWS)
        pub const DISALLOW_CREATE_WINDOWS : &'static str = "no_create_windows";

        /// public static final [DISALLOW_CROSS_PROFILE_COPY_PASTE](https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_CROSS_PROFILE_COPY_PASTE)
        pub const DISALLOW_CROSS_PROFILE_COPY_PASTE : &'static str = "no_cross_profile_copy_paste";

        /// public static final [DISALLOW_DATA_ROAMING](https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_DATA_ROAMING)
        pub const DISALLOW_DATA_ROAMING : &'static str = "no_data_roaming";

        /// public static final [DISALLOW_DEBUGGING_FEATURES](https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_DEBUGGING_FEATURES)
        pub const DISALLOW_DEBUGGING_FEATURES : &'static str = "no_debugging_features";

        /// public static final [DISALLOW_FACTORY_RESET](https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_FACTORY_RESET)
        pub const DISALLOW_FACTORY_RESET : &'static str = "no_factory_reset";

        /// public static final [DISALLOW_FUN](https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_FUN)
        pub const DISALLOW_FUN : &'static str = "no_fun";

        /// public static final [DISALLOW_INSTALL_APPS](https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_INSTALL_APPS)
        pub const DISALLOW_INSTALL_APPS : &'static str = "no_install_apps";

        /// public static final [DISALLOW_INSTALL_UNKNOWN_SOURCES](https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_INSTALL_UNKNOWN_SOURCES)
        pub const DISALLOW_INSTALL_UNKNOWN_SOURCES : &'static str = "no_install_unknown_sources";

        /// public static final [DISALLOW_INSTALL_UNKNOWN_SOURCES_GLOBALLY](https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_INSTALL_UNKNOWN_SOURCES_GLOBALLY)
        pub const DISALLOW_INSTALL_UNKNOWN_SOURCES_GLOBALLY : &'static str = "no_install_unknown_sources_globally";

        /// public static final [DISALLOW_MODIFY_ACCOUNTS](https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_MODIFY_ACCOUNTS)
        pub const DISALLOW_MODIFY_ACCOUNTS : &'static str = "no_modify_accounts";

        /// public static final [DISALLOW_MOUNT_PHYSICAL_MEDIA](https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_MOUNT_PHYSICAL_MEDIA)
        pub const DISALLOW_MOUNT_PHYSICAL_MEDIA : &'static str = "no_physical_media";

        /// public static final [DISALLOW_NETWORK_RESET](https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_NETWORK_RESET)
        pub const DISALLOW_NETWORK_RESET : &'static str = "no_network_reset";

        /// public static final [DISALLOW_OUTGOING_BEAM](https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_OUTGOING_BEAM)
        pub const DISALLOW_OUTGOING_BEAM : &'static str = "no_outgoing_beam";

        /// public static final [DISALLOW_OUTGOING_CALLS](https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_OUTGOING_CALLS)
        pub const DISALLOW_OUTGOING_CALLS : &'static str = "no_outgoing_calls";

        /// public static final [DISALLOW_PRINTING](https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_PRINTING)
        pub const DISALLOW_PRINTING : &'static str = "no_printing";

        /// public static final [DISALLOW_REMOVE_MANAGED_PROFILE](https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_REMOVE_MANAGED_PROFILE)
        pub const DISALLOW_REMOVE_MANAGED_PROFILE : &'static str = "no_remove_managed_profile";

        /// public static final [DISALLOW_REMOVE_USER](https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_REMOVE_USER)
        pub const DISALLOW_REMOVE_USER : &'static str = "no_remove_user";

        /// public static final [DISALLOW_SAFE_BOOT](https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_SAFE_BOOT)
        pub const DISALLOW_SAFE_BOOT : &'static str = "no_safe_boot";

        /// public static final [DISALLOW_SET_USER_ICON](https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_SET_USER_ICON)
        pub const DISALLOW_SET_USER_ICON : &'static str = "no_set_user_icon";

        /// public static final [DISALLOW_SET_WALLPAPER](https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_SET_WALLPAPER)
        pub const DISALLOW_SET_WALLPAPER : &'static str = "no_set_wallpaper";

        /// public static final [DISALLOW_SHARE_INTO_MANAGED_PROFILE](https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_SHARE_INTO_MANAGED_PROFILE)
        pub const DISALLOW_SHARE_INTO_MANAGED_PROFILE : &'static str = "no_sharing_into_profile";

        /// public static final [DISALLOW_SHARE_LOCATION](https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_SHARE_LOCATION)
        pub const DISALLOW_SHARE_LOCATION : &'static str = "no_share_location";

        /// public static final [DISALLOW_SMS](https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_SMS)
        pub const DISALLOW_SMS : &'static str = "no_sms";

        /// public static final [DISALLOW_SYSTEM_ERROR_DIALOGS](https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_SYSTEM_ERROR_DIALOGS)
        pub const DISALLOW_SYSTEM_ERROR_DIALOGS : &'static str = "no_system_error_dialogs";

        /// public static final [DISALLOW_UNIFIED_PASSWORD](https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_UNIFIED_PASSWORD)
        pub const DISALLOW_UNIFIED_PASSWORD : &'static str = "no_unified_password";

        /// public static final [DISALLOW_UNINSTALL_APPS](https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_UNINSTALL_APPS)
        pub const DISALLOW_UNINSTALL_APPS : &'static str = "no_uninstall_apps";

        /// public static final [DISALLOW_UNMUTE_MICROPHONE](https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_UNMUTE_MICROPHONE)
        pub const DISALLOW_UNMUTE_MICROPHONE : &'static str = "no_unmute_microphone";

        /// public static final [DISALLOW_USB_FILE_TRANSFER](https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_USB_FILE_TRANSFER)
        pub const DISALLOW_USB_FILE_TRANSFER : &'static str = "no_usb_file_transfer";

        /// public static final [DISALLOW_USER_SWITCH](https://developer.android.com/reference/android/os/UserManager.html#DISALLOW_USER_SWITCH)
        pub const DISALLOW_USER_SWITCH : &'static str = "no_user_switch";

        /// public static final [ENSURE_VERIFY_APPS](https://developer.android.com/reference/android/os/UserManager.html#ENSURE_VERIFY_APPS)
        pub const ENSURE_VERIFY_APPS : &'static str = "ensure_verify_apps";

        /// public static final [KEY_RESTRICTIONS_PENDING](https://developer.android.com/reference/android/os/UserManager.html#KEY_RESTRICTIONS_PENDING)
        pub const KEY_RESTRICTIONS_PENDING : &'static str = "restrictions_pending";

        /// public static final [USER_CREATION_FAILED_NOT_PERMITTED](https://developer.android.com/reference/android/os/UserManager.html#USER_CREATION_FAILED_NOT_PERMITTED)
        pub const USER_CREATION_FAILED_NOT_PERMITTED : i32 = 1;

        /// public static final [USER_CREATION_FAILED_NO_MORE_USERS](https://developer.android.com/reference/android/os/UserManager.html#USER_CREATION_FAILED_NO_MORE_USERS)
        pub const USER_CREATION_FAILED_NO_MORE_USERS : i32 = 2;

        /// public static final [USER_OPERATION_ERROR_CURRENT_USER](https://developer.android.com/reference/android/os/UserManager.html#USER_OPERATION_ERROR_CURRENT_USER)
        pub const USER_OPERATION_ERROR_CURRENT_USER : i32 = 4;

        /// public static final [USER_OPERATION_ERROR_LOW_STORAGE](https://developer.android.com/reference/android/os/UserManager.html#USER_OPERATION_ERROR_LOW_STORAGE)
        pub const USER_OPERATION_ERROR_LOW_STORAGE : i32 = 5;

        /// public static final [USER_OPERATION_ERROR_MANAGED_PROFILE](https://developer.android.com/reference/android/os/UserManager.html#USER_OPERATION_ERROR_MANAGED_PROFILE)
        pub const USER_OPERATION_ERROR_MANAGED_PROFILE : i32 = 2;

        /// public static final [USER_OPERATION_ERROR_MAX_RUNNING_USERS](https://developer.android.com/reference/android/os/UserManager.html#USER_OPERATION_ERROR_MAX_RUNNING_USERS)
        pub const USER_OPERATION_ERROR_MAX_RUNNING_USERS : i32 = 3;

        /// public static final [USER_OPERATION_ERROR_MAX_USERS](https://developer.android.com/reference/android/os/UserManager.html#USER_OPERATION_ERROR_MAX_USERS)
        pub const USER_OPERATION_ERROR_MAX_USERS : i32 = 6;

        /// public static final [USER_OPERATION_ERROR_UNKNOWN](https://developer.android.com/reference/android/os/UserManager.html#USER_OPERATION_ERROR_UNKNOWN)
        pub const USER_OPERATION_ERROR_UNKNOWN : i32 = 1;

        /// public static final [USER_OPERATION_SUCCESS](https://developer.android.com/reference/android/os/UserManager.html#USER_OPERATION_SUCCESS)
        pub const USER_OPERATION_SUCCESS : i32 = 0;
    }
}
