// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-os-FileUtils"))]
__jni_bindgen! {
    /// public final class [FileUtils](https://developer.android.com/reference/android/os/FileUtils.html)
    ///
    /// Required feature: android-os-FileUtils
    public final class FileUtils ("android/os/FileUtils") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [FileUtils](https://developer.android.com/reference/android/os/FileUtils.html#FileUtils())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::os::FileUtils>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/os/FileUtils", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/os/FileUtils\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [copy](https://developer.android.com/reference/android/os/FileUtils.html#copy(java.io.InputStream,%20java.io.OutputStream))
        ///
        /// Required features: "java-io-InputStream", "java-io-OutputStream"
        #[cfg(any(feature = "all", all(feature = "java-io-InputStream", feature = "java-io-OutputStream")))]
        pub fn copy_InputStream_OutputStream<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::InputStream>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::OutputStream>>) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/FileUtils", java.flags == PUBLIC | STATIC, .name == "copy", .descriptor == "(Ljava/io/InputStream;Ljava/io/OutputStream;)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/os/FileUtils\0", "copy\0", "(Ljava/io/InputStream;Ljava/io/OutputStream;)J\0");
                __jni_env.call_static_long_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [copy](https://developer.android.com/reference/android/os/FileUtils.html#copy(java.io.InputStream,%20java.io.OutputStream,%20android.os.CancellationSignal,%20java.util.concurrent.Executor,%20android.os.FileUtils.ProgressListener))
        ///
        /// Required features: "android-os-CancellationSignal", "android-os-FileUtils_ProgressListener", "java-io-InputStream", "java-io-OutputStream", "java-util-concurrent-Executor"
        #[cfg(any(feature = "all", all(feature = "android-os-CancellationSignal", feature = "android-os-FileUtils_ProgressListener", feature = "java-io-InputStream", feature = "java-io-OutputStream", feature = "java-util-concurrent-Executor")))]
        pub fn copy_InputStream_OutputStream_CancellationSignal_Executor_ProgressListener<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::InputStream>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::OutputStream>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::CancellationSignal>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::FileUtils_ProgressListener>>) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/FileUtils", java.flags == PUBLIC | STATIC, .name == "copy", .descriptor == "(Ljava/io/InputStream;Ljava/io/OutputStream;Landroid/os/CancellationSignal;Ljava/util/concurrent/Executor;Landroid/os/FileUtils$ProgressListener;)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/os/FileUtils\0", "copy\0", "(Ljava/io/InputStream;Ljava/io/OutputStream;Landroid/os/CancellationSignal;Ljava/util/concurrent/Executor;Landroid/os/FileUtils$ProgressListener;)J\0");
                __jni_env.call_static_long_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [copy](https://developer.android.com/reference/android/os/FileUtils.html#copy(java.io.FileDescriptor,%20java.io.FileDescriptor))
        ///
        /// Required features: "java-io-FileDescriptor"
        #[cfg(any(feature = "all", all(feature = "java-io-FileDescriptor")))]
        pub fn copy_FileDescriptor_FileDescriptor<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::FileDescriptor>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::FileDescriptor>>) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/FileUtils", java.flags == PUBLIC | STATIC, .name == "copy", .descriptor == "(Ljava/io/FileDescriptor;Ljava/io/FileDescriptor;)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/os/FileUtils\0", "copy\0", "(Ljava/io/FileDescriptor;Ljava/io/FileDescriptor;)J\0");
                __jni_env.call_static_long_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [copy](https://developer.android.com/reference/android/os/FileUtils.html#copy(java.io.FileDescriptor,%20java.io.FileDescriptor,%20android.os.CancellationSignal,%20java.util.concurrent.Executor,%20android.os.FileUtils.ProgressListener))
        ///
        /// Required features: "android-os-CancellationSignal", "android-os-FileUtils_ProgressListener", "java-io-FileDescriptor", "java-util-concurrent-Executor"
        #[cfg(any(feature = "all", all(feature = "android-os-CancellationSignal", feature = "android-os-FileUtils_ProgressListener", feature = "java-io-FileDescriptor", feature = "java-util-concurrent-Executor")))]
        pub fn copy_FileDescriptor_FileDescriptor_CancellationSignal_Executor_ProgressListener<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::FileDescriptor>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::FileDescriptor>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::CancellationSignal>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::FileUtils_ProgressListener>>) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/FileUtils", java.flags == PUBLIC | STATIC, .name == "copy", .descriptor == "(Ljava/io/FileDescriptor;Ljava/io/FileDescriptor;Landroid/os/CancellationSignal;Ljava/util/concurrent/Executor;Landroid/os/FileUtils$ProgressListener;)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/os/FileUtils\0", "copy\0", "(Ljava/io/FileDescriptor;Ljava/io/FileDescriptor;Landroid/os/CancellationSignal;Ljava/util/concurrent/Executor;Landroid/os/FileUtils$ProgressListener;)J\0");
                __jni_env.call_static_long_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [closeQuietly](https://developer.android.com/reference/android/os/FileUtils.html#closeQuietly(java.lang.AutoCloseable))
        ///
        /// Required features: "java-lang-AutoCloseable"
        #[cfg(any(feature = "all", all(feature = "java-lang-AutoCloseable")))]
        pub fn closeQuietly_AutoCloseable<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::AutoCloseable>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/FileUtils", java.flags == PUBLIC | STATIC, .name == "closeQuietly", .descriptor == "(Ljava/lang/AutoCloseable;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/os/FileUtils\0", "closeQuietly\0", "(Ljava/lang/AutoCloseable;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [closeQuietly](https://developer.android.com/reference/android/os/FileUtils.html#closeQuietly(java.io.FileDescriptor))
        ///
        /// Required features: "java-io-FileDescriptor"
        #[cfg(any(feature = "all", all(feature = "java-io-FileDescriptor")))]
        pub fn closeQuietly_FileDescriptor<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::FileDescriptor>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/os/FileUtils", java.flags == PUBLIC | STATIC, .name == "closeQuietly", .descriptor == "(Ljava/io/FileDescriptor;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/os/FileUtils\0", "closeQuietly\0", "(Ljava/io/FileDescriptor;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
