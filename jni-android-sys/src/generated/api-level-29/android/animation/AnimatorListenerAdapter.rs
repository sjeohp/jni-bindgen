// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-animation-AnimatorListenerAdapter"))]
__jni_bindgen! {
    /// public class [AnimatorListenerAdapter](https://developer.android.com/reference/android/animation/AnimatorListenerAdapter.html)
    ///
    /// Required feature: android-animation-AnimatorListenerAdapter
    public class AnimatorListenerAdapter ("android/animation/AnimatorListenerAdapter") extends crate::java::lang::Object, implements crate::android::animation::Animator_AnimatorListener, crate::android::animation::Animator_AnimatorPauseListener {

        /// [AnimatorListenerAdapter](https://developer.android.com/reference/android/animation/AnimatorListenerAdapter.html#AnimatorListenerAdapter())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::animation::AnimatorListenerAdapter>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/AnimatorListenerAdapter", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/AnimatorListenerAdapter\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onAnimationCancel](https://developer.android.com/reference/android/animation/AnimatorListenerAdapter.html#onAnimationCancel(android.animation.Animator))
        ///
        /// Required features: "android-animation-Animator"
        #[cfg(any(feature = "all", all(feature = "android-animation-Animator")))]
        pub fn onAnimationCancel<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::animation::Animator>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/AnimatorListenerAdapter", java.flags == PUBLIC, .name == "onAnimationCancel", .descriptor == "(Landroid/animation/Animator;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/AnimatorListenerAdapter\0", "onAnimationCancel\0", "(Landroid/animation/Animator;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onAnimationEnd](https://developer.android.com/reference/android/animation/AnimatorListenerAdapter.html#onAnimationEnd(android.animation.Animator))
        ///
        /// Required features: "android-animation-Animator"
        #[cfg(any(feature = "all", all(feature = "android-animation-Animator")))]
        pub fn onAnimationEnd<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::animation::Animator>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/AnimatorListenerAdapter", java.flags == PUBLIC, .name == "onAnimationEnd", .descriptor == "(Landroid/animation/Animator;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/AnimatorListenerAdapter\0", "onAnimationEnd\0", "(Landroid/animation/Animator;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onAnimationRepeat](https://developer.android.com/reference/android/animation/AnimatorListenerAdapter.html#onAnimationRepeat(android.animation.Animator))
        ///
        /// Required features: "android-animation-Animator"
        #[cfg(any(feature = "all", all(feature = "android-animation-Animator")))]
        pub fn onAnimationRepeat<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::animation::Animator>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/AnimatorListenerAdapter", java.flags == PUBLIC, .name == "onAnimationRepeat", .descriptor == "(Landroid/animation/Animator;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/AnimatorListenerAdapter\0", "onAnimationRepeat\0", "(Landroid/animation/Animator;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onAnimationStart](https://developer.android.com/reference/android/animation/AnimatorListenerAdapter.html#onAnimationStart(android.animation.Animator))
        ///
        /// Required features: "android-animation-Animator"
        #[cfg(any(feature = "all", all(feature = "android-animation-Animator")))]
        pub fn onAnimationStart<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::animation::Animator>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/AnimatorListenerAdapter", java.flags == PUBLIC, .name == "onAnimationStart", .descriptor == "(Landroid/animation/Animator;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/AnimatorListenerAdapter\0", "onAnimationStart\0", "(Landroid/animation/Animator;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onAnimationPause](https://developer.android.com/reference/android/animation/AnimatorListenerAdapter.html#onAnimationPause(android.animation.Animator))
        ///
        /// Required features: "android-animation-Animator"
        #[cfg(any(feature = "all", all(feature = "android-animation-Animator")))]
        pub fn onAnimationPause<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::animation::Animator>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/AnimatorListenerAdapter", java.flags == PUBLIC, .name == "onAnimationPause", .descriptor == "(Landroid/animation/Animator;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/AnimatorListenerAdapter\0", "onAnimationPause\0", "(Landroid/animation/Animator;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onAnimationResume](https://developer.android.com/reference/android/animation/AnimatorListenerAdapter.html#onAnimationResume(android.animation.Animator))
        ///
        /// Required features: "android-animation-Animator"
        #[cfg(any(feature = "all", all(feature = "android-animation-Animator")))]
        pub fn onAnimationResume<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::animation::Animator>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/AnimatorListenerAdapter", java.flags == PUBLIC, .name == "onAnimationResume", .descriptor == "(Landroid/animation/Animator;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/AnimatorListenerAdapter\0", "onAnimationResume\0", "(Landroid/animation/Animator;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
