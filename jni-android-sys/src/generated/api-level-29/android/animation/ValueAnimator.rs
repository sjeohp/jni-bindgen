// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-animation-ValueAnimator"))]
__jni_bindgen! {
    /// public class [ValueAnimator](https://developer.android.com/reference/android/animation/ValueAnimator.html)
    ///
    /// Required feature: android-animation-ValueAnimator
    public class ValueAnimator ("android/animation/ValueAnimator") extends crate::android::animation::Animator {

        /// [ValueAnimator](https://developer.android.com/reference/android/animation/ValueAnimator.html#ValueAnimator())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::animation::ValueAnimator>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/ValueAnimator", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/ValueAnimator\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [areAnimatorsEnabled](https://developer.android.com/reference/android/animation/ValueAnimator.html#areAnimatorsEnabled())
        pub fn areAnimatorsEnabled<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/ValueAnimator", java.flags == PUBLIC | STATIC, .name == "areAnimatorsEnabled", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/animation/ValueAnimator\0", "areAnimatorsEnabled\0", "()Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ofInt](https://developer.android.com/reference/android/animation/ValueAnimator.html#ofInt(int...))
        ///
        /// Required features: "android-animation-ValueAnimator"
        #[cfg(any(feature = "all", all(feature = "android-animation-ValueAnimator")))]
        pub fn ofInt<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::animation::ValueAnimator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/ValueAnimator", java.flags == PUBLIC | STATIC | VARARGS, .name == "ofInt", .descriptor == "([I)Landroid/animation/ValueAnimator;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/animation/ValueAnimator\0", "ofInt\0", "([I)Landroid/animation/ValueAnimator;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ofArgb](https://developer.android.com/reference/android/animation/ValueAnimator.html#ofArgb(int...))
        ///
        /// Required features: "android-animation-ValueAnimator"
        #[cfg(any(feature = "all", all(feature = "android-animation-ValueAnimator")))]
        pub fn ofArgb<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::animation::ValueAnimator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/ValueAnimator", java.flags == PUBLIC | STATIC | VARARGS, .name == "ofArgb", .descriptor == "([I)Landroid/animation/ValueAnimator;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/animation/ValueAnimator\0", "ofArgb\0", "([I)Landroid/animation/ValueAnimator;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ofFloat](https://developer.android.com/reference/android/animation/ValueAnimator.html#ofFloat(float...))
        ///
        /// Required features: "android-animation-ValueAnimator"
        #[cfg(any(feature = "all", all(feature = "android-animation-ValueAnimator")))]
        pub fn ofFloat<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::animation::ValueAnimator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/ValueAnimator", java.flags == PUBLIC | STATIC | VARARGS, .name == "ofFloat", .descriptor == "([F)Landroid/animation/ValueAnimator;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/animation/ValueAnimator\0", "ofFloat\0", "([F)Landroid/animation/ValueAnimator;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ofPropertyValuesHolder](https://developer.android.com/reference/android/animation/ValueAnimator.html#ofPropertyValuesHolder(android.animation.PropertyValuesHolder...))
        ///
        /// Required features: "android-animation-PropertyValuesHolder", "android-animation-ValueAnimator"
        #[cfg(any(feature = "all", all(feature = "android-animation-PropertyValuesHolder", feature = "android-animation-ValueAnimator")))]
        pub fn ofPropertyValuesHolder<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::android::animation::PropertyValuesHolder, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::animation::ValueAnimator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/ValueAnimator", java.flags == PUBLIC | STATIC | VARARGS, .name == "ofPropertyValuesHolder", .descriptor == "([Landroid/animation/PropertyValuesHolder;)Landroid/animation/ValueAnimator;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/animation/ValueAnimator\0", "ofPropertyValuesHolder\0", "([Landroid/animation/PropertyValuesHolder;)Landroid/animation/ValueAnimator;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ofObject](https://developer.android.com/reference/android/animation/ValueAnimator.html#ofObject(android.animation.TypeEvaluator,%20java.lang.Object...))
        ///
        /// Required features: "android-animation-TypeEvaluator", "android-animation-ValueAnimator", "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "android-animation-TypeEvaluator", feature = "android-animation-ValueAnimator", feature = "java-lang-Object")))]
        pub fn ofObject<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::animation::TypeEvaluator>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::Object, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::animation::ValueAnimator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/ValueAnimator", java.flags == PUBLIC | STATIC | VARARGS, .name == "ofObject", .descriptor == "(Landroid/animation/TypeEvaluator;[Ljava/lang/Object;)Landroid/animation/ValueAnimator;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/animation/ValueAnimator\0", "ofObject\0", "(Landroid/animation/TypeEvaluator;[Ljava/lang/Object;)Landroid/animation/ValueAnimator;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setIntValues](https://developer.android.com/reference/android/animation/ValueAnimator.html#setIntValues(int...))
        pub fn setIntValues<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/ValueAnimator", java.flags == PUBLIC | VARARGS, .name == "setIntValues", .descriptor == "([I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/ValueAnimator\0", "setIntValues\0", "([I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setFloatValues](https://developer.android.com/reference/android/animation/ValueAnimator.html#setFloatValues(float...))
        pub fn setFloatValues<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/ValueAnimator", java.flags == PUBLIC | VARARGS, .name == "setFloatValues", .descriptor == "([F)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/ValueAnimator\0", "setFloatValues\0", "([F)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setObjectValues](https://developer.android.com/reference/android/animation/ValueAnimator.html#setObjectValues(java.lang.Object...))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn setObjectValues<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::Object, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/ValueAnimator", java.flags == PUBLIC | VARARGS, .name == "setObjectValues", .descriptor == "([Ljava/lang/Object;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/ValueAnimator\0", "setObjectValues\0", "([Ljava/lang/Object;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setValues](https://developer.android.com/reference/android/animation/ValueAnimator.html#setValues(android.animation.PropertyValuesHolder...))
        ///
        /// Required features: "android-animation-PropertyValuesHolder"
        #[cfg(any(feature = "all", all(feature = "android-animation-PropertyValuesHolder")))]
        pub fn setValues<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::android::animation::PropertyValuesHolder, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/ValueAnimator", java.flags == PUBLIC | VARARGS, .name == "setValues", .descriptor == "([Landroid/animation/PropertyValuesHolder;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/ValueAnimator\0", "setValues\0", "([Landroid/animation/PropertyValuesHolder;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getValues](https://developer.android.com/reference/android/animation/ValueAnimator.html#getValues())
        ///
        /// Required features: "android-animation-PropertyValuesHolder"
        #[cfg(any(feature = "all", all(feature = "android-animation-PropertyValuesHolder")))]
        pub fn getValues<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::android::animation::PropertyValuesHolder, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/ValueAnimator", java.flags == PUBLIC, .name == "getValues", .descriptor == "()[Landroid/animation/PropertyValuesHolder;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/ValueAnimator\0", "getValues\0", "()[Landroid/animation/PropertyValuesHolder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDuration](https://developer.android.com/reference/android/animation/ValueAnimator.html#setDuration(long))
        ///
        /// Required features: "android-animation-ValueAnimator"
        #[cfg(any(feature = "all", all(feature = "android-animation-ValueAnimator")))]
        pub fn setDuration_long<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::animation::ValueAnimator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/ValueAnimator", java.flags == PUBLIC, .name == "setDuration", .descriptor == "(J)Landroid/animation/ValueAnimator;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/ValueAnimator\0", "setDuration\0", "(J)Landroid/animation/ValueAnimator;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDuration](https://developer.android.com/reference/android/animation/ValueAnimator.html#getDuration())
        pub fn getDuration<'env>(&'env self) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/ValueAnimator", java.flags == PUBLIC, .name == "getDuration", .descriptor == "()J"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/ValueAnimator\0", "getDuration\0", "()J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTotalDuration](https://developer.android.com/reference/android/animation/ValueAnimator.html#getTotalDuration())
        pub fn getTotalDuration<'env>(&'env self) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/ValueAnimator", java.flags == PUBLIC, .name == "getTotalDuration", .descriptor == "()J"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/ValueAnimator\0", "getTotalDuration\0", "()J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setCurrentPlayTime](https://developer.android.com/reference/android/animation/ValueAnimator.html#setCurrentPlayTime(long))
        pub fn setCurrentPlayTime<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/ValueAnimator", java.flags == PUBLIC, .name == "setCurrentPlayTime", .descriptor == "(J)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/ValueAnimator\0", "setCurrentPlayTime\0", "(J)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setCurrentFraction](https://developer.android.com/reference/android/animation/ValueAnimator.html#setCurrentFraction(float))
        pub fn setCurrentFraction<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/ValueAnimator", java.flags == PUBLIC, .name == "setCurrentFraction", .descriptor == "(F)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/ValueAnimator\0", "setCurrentFraction\0", "(F)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCurrentPlayTime](https://developer.android.com/reference/android/animation/ValueAnimator.html#getCurrentPlayTime())
        pub fn getCurrentPlayTime<'env>(&'env self) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/ValueAnimator", java.flags == PUBLIC, .name == "getCurrentPlayTime", .descriptor == "()J"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/ValueAnimator\0", "getCurrentPlayTime\0", "()J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getStartDelay](https://developer.android.com/reference/android/animation/ValueAnimator.html#getStartDelay())
        pub fn getStartDelay<'env>(&'env self) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/ValueAnimator", java.flags == PUBLIC, .name == "getStartDelay", .descriptor == "()J"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/ValueAnimator\0", "getStartDelay\0", "()J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setStartDelay](https://developer.android.com/reference/android/animation/ValueAnimator.html#setStartDelay(long))
        pub fn setStartDelay<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/ValueAnimator", java.flags == PUBLIC, .name == "setStartDelay", .descriptor == "(J)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/ValueAnimator\0", "setStartDelay\0", "(J)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFrameDelay](https://developer.android.com/reference/android/animation/ValueAnimator.html#getFrameDelay())
        pub fn getFrameDelay<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/ValueAnimator", java.flags == PUBLIC | STATIC, .name == "getFrameDelay", .descriptor == "()J"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/animation/ValueAnimator\0", "getFrameDelay\0", "()J\0");
                __jni_env.call_static_long_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setFrameDelay](https://developer.android.com/reference/android/animation/ValueAnimator.html#setFrameDelay(long))
        pub fn setFrameDelay<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i64) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/ValueAnimator", java.flags == PUBLIC | STATIC, .name == "setFrameDelay", .descriptor == "(J)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/animation/ValueAnimator\0", "setFrameDelay\0", "(J)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAnimatedValue](https://developer.android.com/reference/android/animation/ValueAnimator.html#getAnimatedValue())
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn getAnimatedValue<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/ValueAnimator", java.flags == PUBLIC, .name == "getAnimatedValue", .descriptor == "()Ljava/lang/Object;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/ValueAnimator\0", "getAnimatedValue\0", "()Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAnimatedValue](https://developer.android.com/reference/android/animation/ValueAnimator.html#getAnimatedValue(java.lang.String))
        ///
        /// Required features: "java-lang-Object", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-lang-String")))]
        pub fn getAnimatedValue_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/ValueAnimator", java.flags == PUBLIC, .name == "getAnimatedValue", .descriptor == "(Ljava/lang/String;)Ljava/lang/Object;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/ValueAnimator\0", "getAnimatedValue\0", "(Ljava/lang/String;)Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setRepeatCount](https://developer.android.com/reference/android/animation/ValueAnimator.html#setRepeatCount(int))
        pub fn setRepeatCount<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/ValueAnimator", java.flags == PUBLIC, .name == "setRepeatCount", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/ValueAnimator\0", "setRepeatCount\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRepeatCount](https://developer.android.com/reference/android/animation/ValueAnimator.html#getRepeatCount())
        pub fn getRepeatCount<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/ValueAnimator", java.flags == PUBLIC, .name == "getRepeatCount", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/ValueAnimator\0", "getRepeatCount\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setRepeatMode](https://developer.android.com/reference/android/animation/ValueAnimator.html#setRepeatMode(int))
        pub fn setRepeatMode<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/ValueAnimator", java.flags == PUBLIC, .name == "setRepeatMode", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/ValueAnimator\0", "setRepeatMode\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRepeatMode](https://developer.android.com/reference/android/animation/ValueAnimator.html#getRepeatMode())
        pub fn getRepeatMode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/ValueAnimator", java.flags == PUBLIC, .name == "getRepeatMode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/ValueAnimator\0", "getRepeatMode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addUpdateListener](https://developer.android.com/reference/android/animation/ValueAnimator.html#addUpdateListener(android.animation.ValueAnimator.AnimatorUpdateListener))
        ///
        /// Required features: "android-animation-ValueAnimator_AnimatorUpdateListener"
        #[cfg(any(feature = "all", all(feature = "android-animation-ValueAnimator_AnimatorUpdateListener")))]
        pub fn addUpdateListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::animation::ValueAnimator_AnimatorUpdateListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/ValueAnimator", java.flags == PUBLIC, .name == "addUpdateListener", .descriptor == "(Landroid/animation/ValueAnimator$AnimatorUpdateListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/ValueAnimator\0", "addUpdateListener\0", "(Landroid/animation/ValueAnimator$AnimatorUpdateListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeAllUpdateListeners](https://developer.android.com/reference/android/animation/ValueAnimator.html#removeAllUpdateListeners())
        pub fn removeAllUpdateListeners<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/ValueAnimator", java.flags == PUBLIC, .name == "removeAllUpdateListeners", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/ValueAnimator\0", "removeAllUpdateListeners\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeUpdateListener](https://developer.android.com/reference/android/animation/ValueAnimator.html#removeUpdateListener(android.animation.ValueAnimator.AnimatorUpdateListener))
        ///
        /// Required features: "android-animation-ValueAnimator_AnimatorUpdateListener"
        #[cfg(any(feature = "all", all(feature = "android-animation-ValueAnimator_AnimatorUpdateListener")))]
        pub fn removeUpdateListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::animation::ValueAnimator_AnimatorUpdateListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/ValueAnimator", java.flags == PUBLIC, .name == "removeUpdateListener", .descriptor == "(Landroid/animation/ValueAnimator$AnimatorUpdateListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/ValueAnimator\0", "removeUpdateListener\0", "(Landroid/animation/ValueAnimator$AnimatorUpdateListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setInterpolator](https://developer.android.com/reference/android/animation/ValueAnimator.html#setInterpolator(android.animation.TimeInterpolator))
        ///
        /// Required features: "android-animation-TimeInterpolator"
        #[cfg(any(feature = "all", all(feature = "android-animation-TimeInterpolator")))]
        pub fn setInterpolator<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::animation::TimeInterpolator>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/ValueAnimator", java.flags == PUBLIC, .name == "setInterpolator", .descriptor == "(Landroid/animation/TimeInterpolator;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/ValueAnimator\0", "setInterpolator\0", "(Landroid/animation/TimeInterpolator;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInterpolator](https://developer.android.com/reference/android/animation/ValueAnimator.html#getInterpolator())
        ///
        /// Required features: "android-animation-TimeInterpolator"
        #[cfg(any(feature = "all", all(feature = "android-animation-TimeInterpolator")))]
        pub fn getInterpolator<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::animation::TimeInterpolator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/ValueAnimator", java.flags == PUBLIC, .name == "getInterpolator", .descriptor == "()Landroid/animation/TimeInterpolator;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/ValueAnimator\0", "getInterpolator\0", "()Landroid/animation/TimeInterpolator;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setEvaluator](https://developer.android.com/reference/android/animation/ValueAnimator.html#setEvaluator(android.animation.TypeEvaluator))
        ///
        /// Required features: "android-animation-TypeEvaluator"
        #[cfg(any(feature = "all", all(feature = "android-animation-TypeEvaluator")))]
        pub fn setEvaluator<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::animation::TypeEvaluator>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/ValueAnimator", java.flags == PUBLIC, .name == "setEvaluator", .descriptor == "(Landroid/animation/TypeEvaluator;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/ValueAnimator\0", "setEvaluator\0", "(Landroid/animation/TypeEvaluator;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [start](https://developer.android.com/reference/android/animation/ValueAnimator.html#start())
        pub fn start<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/ValueAnimator", java.flags == PUBLIC, .name == "start", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/ValueAnimator\0", "start\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [cancel](https://developer.android.com/reference/android/animation/ValueAnimator.html#cancel())
        pub fn cancel<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/ValueAnimator", java.flags == PUBLIC, .name == "cancel", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/ValueAnimator\0", "cancel\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [end](https://developer.android.com/reference/android/animation/ValueAnimator.html#end())
        pub fn end<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/ValueAnimator", java.flags == PUBLIC, .name == "end", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/ValueAnimator\0", "end\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [resume](https://developer.android.com/reference/android/animation/ValueAnimator.html#resume())
        pub fn resume<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/ValueAnimator", java.flags == PUBLIC, .name == "resume", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/ValueAnimator\0", "resume\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [pause](https://developer.android.com/reference/android/animation/ValueAnimator.html#pause())
        pub fn pause<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/ValueAnimator", java.flags == PUBLIC, .name == "pause", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/ValueAnimator\0", "pause\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isRunning](https://developer.android.com/reference/android/animation/ValueAnimator.html#isRunning())
        pub fn isRunning<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/ValueAnimator", java.flags == PUBLIC, .name == "isRunning", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/ValueAnimator\0", "isRunning\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isStarted](https://developer.android.com/reference/android/animation/ValueAnimator.html#isStarted())
        pub fn isStarted<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/ValueAnimator", java.flags == PUBLIC, .name == "isStarted", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/ValueAnimator\0", "isStarted\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [reverse](https://developer.android.com/reference/android/animation/ValueAnimator.html#reverse())
        pub fn reverse<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/ValueAnimator", java.flags == PUBLIC, .name == "reverse", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/ValueAnimator\0", "reverse\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAnimatedFraction](https://developer.android.com/reference/android/animation/ValueAnimator.html#getAnimatedFraction())
        pub fn getAnimatedFraction<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/ValueAnimator", java.flags == PUBLIC, .name == "getAnimatedFraction", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/ValueAnimator\0", "getAnimatedFraction\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clone](https://developer.android.com/reference/android/animation/ValueAnimator.html#clone())
        ///
        /// Required features: "android-animation-ValueAnimator"
        #[cfg(any(feature = "all", all(feature = "android-animation-ValueAnimator")))]
        pub fn clone<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::animation::ValueAnimator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/ValueAnimator", java.flags == PUBLIC, .name == "clone", .descriptor == "()Landroid/animation/ValueAnimator;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/ValueAnimator\0", "clone\0", "()Landroid/animation/ValueAnimator;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/android/animation/ValueAnimator.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/ValueAnimator", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/ValueAnimator\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Bridge method - type erasure
        // /// [clone](https://developer.android.com/reference/android/animation/ValueAnimator.html#clone())
        // ///
        // /// Required features: "android-animation-Animator"
        // #[cfg(any(feature = "all", all(feature = "android-animation-Animator")))]
        // pub fn clone<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::animation::Animator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/animation/ValueAnimator", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "clone", .descriptor == "()Landroid/animation/Animator;"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/ValueAnimator\0", "clone\0", "()Landroid/animation/Animator;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [setDuration](https://developer.android.com/reference/android/animation/ValueAnimator.html#setDuration(long))
        // ///
        // /// Required features: "android-animation-Animator"
        // #[cfg(any(feature = "all", all(feature = "android-animation-Animator")))]
        // pub fn setDuration_long<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::animation::Animator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/animation/ValueAnimator", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "setDuration", .descriptor == "(J)Landroid/animation/Animator;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/ValueAnimator\0", "setDuration\0", "(J)Landroid/animation/Animator;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [clone](https://developer.android.com/reference/android/animation/ValueAnimator.html#clone())
        // ///
        // /// Required features: "java-lang-Object"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        // pub fn clone<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/animation/ValueAnimator", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "clone", .descriptor == "()Ljava/lang/Object;"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/ValueAnimator\0", "clone\0", "()Ljava/lang/Object;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// public static final [INFINITE](https://developer.android.com/reference/android/animation/ValueAnimator.html#INFINITE)
        pub const INFINITE : i32 = -1;

        /// public static final [RESTART](https://developer.android.com/reference/android/animation/ValueAnimator.html#RESTART)
        pub const RESTART : i32 = 1;

        /// public static final [REVERSE](https://developer.android.com/reference/android/animation/ValueAnimator.html#REVERSE)
        pub const REVERSE : i32 = 2;
    }
}
