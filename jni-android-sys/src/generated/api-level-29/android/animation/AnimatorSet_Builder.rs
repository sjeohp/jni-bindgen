// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-animation-AnimatorSet_Builder"))]
__jni_bindgen! {
    /// public class [AnimatorSet.Builder](https://developer.android.com/reference/android/animation/AnimatorSet.Builder.html)
    ///
    /// Required feature: android-animation-AnimatorSet_Builder
    public class AnimatorSet_Builder ("android/animation/AnimatorSet$Builder") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [Builder](https://developer.android.com/reference/android/animation/AnimatorSet.Builder.html#Builder(android.animation.AnimatorSet,%20android.animation.Animator))
        // ///
        // /// Required features: "android-animation-Animator", "android-animation-AnimatorSet"
        // #[cfg(any(feature = "all", all(feature = "android-animation-Animator", feature = "android-animation-AnimatorSet")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::animation::AnimatorSet>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::animation::Animator>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::animation::AnimatorSet_Builder>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/animation/AnimatorSet$Builder", java.flags == (empty), .name == "<init>", .descriptor == "(Landroid/animation/AnimatorSet;Landroid/animation/Animator;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/AnimatorSet$Builder\0", "<init>\0", "(Landroid/animation/AnimatorSet;Landroid/animation/Animator;)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [with](https://developer.android.com/reference/android/animation/AnimatorSet.Builder.html#with(android.animation.Animator))
        ///
        /// Required features: "android-animation-Animator", "android-animation-AnimatorSet_Builder"
        #[cfg(any(feature = "all", all(feature = "android-animation-Animator", feature = "android-animation-AnimatorSet_Builder")))]
        pub fn with<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::animation::Animator>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::animation::AnimatorSet_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/AnimatorSet$Builder", java.flags == PUBLIC, .name == "with", .descriptor == "(Landroid/animation/Animator;)Landroid/animation/AnimatorSet$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/AnimatorSet$Builder\0", "with\0", "(Landroid/animation/Animator;)Landroid/animation/AnimatorSet$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [before](https://developer.android.com/reference/android/animation/AnimatorSet.Builder.html#before(android.animation.Animator))
        ///
        /// Required features: "android-animation-Animator", "android-animation-AnimatorSet_Builder"
        #[cfg(any(feature = "all", all(feature = "android-animation-Animator", feature = "android-animation-AnimatorSet_Builder")))]
        pub fn before<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::animation::Animator>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::animation::AnimatorSet_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/AnimatorSet$Builder", java.flags == PUBLIC, .name == "before", .descriptor == "(Landroid/animation/Animator;)Landroid/animation/AnimatorSet$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/AnimatorSet$Builder\0", "before\0", "(Landroid/animation/Animator;)Landroid/animation/AnimatorSet$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [after](https://developer.android.com/reference/android/animation/AnimatorSet.Builder.html#after(android.animation.Animator))
        ///
        /// Required features: "android-animation-Animator", "android-animation-AnimatorSet_Builder"
        #[cfg(any(feature = "all", all(feature = "android-animation-Animator", feature = "android-animation-AnimatorSet_Builder")))]
        pub fn after_Animator<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::animation::Animator>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::animation::AnimatorSet_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/AnimatorSet$Builder", java.flags == PUBLIC, .name == "after", .descriptor == "(Landroid/animation/Animator;)Landroid/animation/AnimatorSet$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/AnimatorSet$Builder\0", "after\0", "(Landroid/animation/Animator;)Landroid/animation/AnimatorSet$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [after](https://developer.android.com/reference/android/animation/AnimatorSet.Builder.html#after(long))
        ///
        /// Required features: "android-animation-AnimatorSet_Builder"
        #[cfg(any(feature = "all", all(feature = "android-animation-AnimatorSet_Builder")))]
        pub fn after_long<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::animation::AnimatorSet_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/AnimatorSet$Builder", java.flags == PUBLIC, .name == "after", .descriptor == "(J)Landroid/animation/AnimatorSet$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/AnimatorSet$Builder\0", "after\0", "(J)Landroid/animation/AnimatorSet$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public field
        // // Not emitting: Failed to mangle field name: this$N outer class pointer
        // pub fn get_"this$0"<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::animation::AnimatorSet>> { ... }
    }
}
