// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-animation-Animator_AnimatorListener"))]
__jni_bindgen! {
    /// public interface [Animator.AnimatorListener](https://developer.android.com/reference/android/animation/Animator.AnimatorListener.html)
    ///
    /// Required feature: android-animation-Animator_AnimatorListener
    public interface Animator_AnimatorListener ("android/animation/Animator$AnimatorListener") extends crate::java::lang::Object {

        /// [onAnimationStart](https://developer.android.com/reference/android/animation/Animator.AnimatorListener.html#onAnimationStart(android.animation.Animator,%20boolean))
        ///
        /// Required features: "android-animation-Animator"
        #[cfg(any(feature = "all", all(feature = "android-animation-Animator")))]
        pub fn onAnimationStart_Animator_boolean<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::animation::Animator>>, arg1: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/Animator$AnimatorListener", java.flags == PUBLIC, .name == "onAnimationStart", .descriptor == "(Landroid/animation/Animator;Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/Animator$AnimatorListener\0", "onAnimationStart\0", "(Landroid/animation/Animator;Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onAnimationEnd](https://developer.android.com/reference/android/animation/Animator.AnimatorListener.html#onAnimationEnd(android.animation.Animator,%20boolean))
        ///
        /// Required features: "android-animation-Animator"
        #[cfg(any(feature = "all", all(feature = "android-animation-Animator")))]
        pub fn onAnimationEnd_Animator_boolean<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::animation::Animator>>, arg1: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/Animator$AnimatorListener", java.flags == PUBLIC, .name == "onAnimationEnd", .descriptor == "(Landroid/animation/Animator;Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/Animator$AnimatorListener\0", "onAnimationEnd\0", "(Landroid/animation/Animator;Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onAnimationStart](https://developer.android.com/reference/android/animation/Animator.AnimatorListener.html#onAnimationStart(android.animation.Animator))
        ///
        /// Required features: "android-animation-Animator"
        #[cfg(any(feature = "all", all(feature = "android-animation-Animator")))]
        pub fn onAnimationStart_Animator<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::animation::Animator>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/Animator$AnimatorListener", java.flags == PUBLIC | ABSTRACT, .name == "onAnimationStart", .descriptor == "(Landroid/animation/Animator;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/Animator$AnimatorListener\0", "onAnimationStart\0", "(Landroid/animation/Animator;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onAnimationEnd](https://developer.android.com/reference/android/animation/Animator.AnimatorListener.html#onAnimationEnd(android.animation.Animator))
        ///
        /// Required features: "android-animation-Animator"
        #[cfg(any(feature = "all", all(feature = "android-animation-Animator")))]
        pub fn onAnimationEnd_Animator<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::animation::Animator>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/Animator$AnimatorListener", java.flags == PUBLIC | ABSTRACT, .name == "onAnimationEnd", .descriptor == "(Landroid/animation/Animator;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/Animator$AnimatorListener\0", "onAnimationEnd\0", "(Landroid/animation/Animator;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onAnimationCancel](https://developer.android.com/reference/android/animation/Animator.AnimatorListener.html#onAnimationCancel(android.animation.Animator))
        ///
        /// Required features: "android-animation-Animator"
        #[cfg(any(feature = "all", all(feature = "android-animation-Animator")))]
        pub fn onAnimationCancel<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::animation::Animator>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/Animator$AnimatorListener", java.flags == PUBLIC | ABSTRACT, .name == "onAnimationCancel", .descriptor == "(Landroid/animation/Animator;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/Animator$AnimatorListener\0", "onAnimationCancel\0", "(Landroid/animation/Animator;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onAnimationRepeat](https://developer.android.com/reference/android/animation/Animator.AnimatorListener.html#onAnimationRepeat(android.animation.Animator))
        ///
        /// Required features: "android-animation-Animator"
        #[cfg(any(feature = "all", all(feature = "android-animation-Animator")))]
        pub fn onAnimationRepeat<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::animation::Animator>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/Animator$AnimatorListener", java.flags == PUBLIC | ABSTRACT, .name == "onAnimationRepeat", .descriptor == "(Landroid/animation/Animator;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/Animator$AnimatorListener\0", "onAnimationRepeat\0", "(Landroid/animation/Animator;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
