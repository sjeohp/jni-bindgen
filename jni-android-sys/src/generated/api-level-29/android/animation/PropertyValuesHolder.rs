// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-animation-PropertyValuesHolder"))]
__jni_bindgen! {
    /// public class [PropertyValuesHolder](https://developer.android.com/reference/android/animation/PropertyValuesHolder.html)
    ///
    /// Required feature: android-animation-PropertyValuesHolder
    public class PropertyValuesHolder ("android/animation/PropertyValuesHolder") extends crate::java::lang::Object, implements crate::java::lang::Cloneable {

        // // Not emitting: Non-public method
        // /// [PropertyValuesHolder](https://developer.android.com/reference/android/animation/PropertyValuesHolder.html#PropertyValuesHolder(java.lang.String))
        // ///
        // /// Required features: "java-lang-String"
        // #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::animation::PropertyValuesHolder>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/animation/PropertyValuesHolder", java.flags == (empty), .name == "<init>", .descriptor == "(Ljava/lang/String;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/PropertyValuesHolder\0", "<init>\0", "(Ljava/lang/String;)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [ofInt](https://developer.android.com/reference/android/animation/PropertyValuesHolder.html#ofInt(java.lang.String,%20int...))
        ///
        /// Required features: "android-animation-PropertyValuesHolder", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-animation-PropertyValuesHolder", feature = "java-lang-String")))]
        pub fn ofInt_String_int_array<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::animation::PropertyValuesHolder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/PropertyValuesHolder", java.flags == PUBLIC | STATIC | VARARGS, .name == "ofInt", .descriptor == "(Ljava/lang/String;[I)Landroid/animation/PropertyValuesHolder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/animation/PropertyValuesHolder\0", "ofInt\0", "(Ljava/lang/String;[I)Landroid/animation/PropertyValuesHolder;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ofInt](https://developer.android.com/reference/android/animation/PropertyValuesHolder.html#ofInt(android.util.Property,%20int...))
        ///
        /// Required features: "android-animation-PropertyValuesHolder", "android-util-Property"
        #[cfg(any(feature = "all", all(feature = "android-animation-PropertyValuesHolder", feature = "android-util-Property")))]
        pub fn ofInt_Property_int_array<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::util::Property>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::animation::PropertyValuesHolder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/PropertyValuesHolder", java.flags == PUBLIC | STATIC | VARARGS, .name == "ofInt", .descriptor == "(Landroid/util/Property;[I)Landroid/animation/PropertyValuesHolder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/animation/PropertyValuesHolder\0", "ofInt\0", "(Landroid/util/Property;[I)Landroid/animation/PropertyValuesHolder;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ofMultiInt](https://developer.android.com/reference/android/animation/PropertyValuesHolder.html#ofMultiInt(java.lang.String,%20int%5B%5D%5B%5D))
        ///
        /// Required features: "android-animation-PropertyValuesHolder", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-animation-PropertyValuesHolder", feature = "java-lang-String")))]
        pub fn ofMultiInt_String_int_array_array<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<__jni_bindgen::IntArray, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::animation::PropertyValuesHolder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/PropertyValuesHolder", java.flags == PUBLIC | STATIC, .name == "ofMultiInt", .descriptor == "(Ljava/lang/String;[[I)Landroid/animation/PropertyValuesHolder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/animation/PropertyValuesHolder\0", "ofMultiInt\0", "(Ljava/lang/String;[[I)Landroid/animation/PropertyValuesHolder;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ofMultiInt](https://developer.android.com/reference/android/animation/PropertyValuesHolder.html#ofMultiInt(java.lang.String,%20android.graphics.Path))
        ///
        /// Required features: "android-animation-PropertyValuesHolder", "android-graphics-Path", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-animation-PropertyValuesHolder", feature = "android-graphics-Path", feature = "java-lang-String")))]
        pub fn ofMultiInt_String_Path<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Path>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::animation::PropertyValuesHolder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/PropertyValuesHolder", java.flags == PUBLIC | STATIC, .name == "ofMultiInt", .descriptor == "(Ljava/lang/String;Landroid/graphics/Path;)Landroid/animation/PropertyValuesHolder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/animation/PropertyValuesHolder\0", "ofMultiInt\0", "(Ljava/lang/String;Landroid/graphics/Path;)Landroid/animation/PropertyValuesHolder;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ofMultiInt](https://developer.android.com/reference/android/animation/PropertyValuesHolder.html#ofMultiInt(java.lang.String,%20android.animation.TypeConverter,%20android.animation.TypeEvaluator,%20java.lang.Object...))
        ///
        /// Required features: "android-animation-PropertyValuesHolder", "android-animation-TypeConverter", "android-animation-TypeEvaluator", "java-lang-Object", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-animation-PropertyValuesHolder", feature = "android-animation-TypeConverter", feature = "android-animation-TypeEvaluator", feature = "java-lang-Object", feature = "java-lang-String")))]
        pub fn ofMultiInt_String_TypeConverter_TypeEvaluator_Object_array<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::animation::TypeConverter>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::animation::TypeEvaluator>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::Object, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::animation::PropertyValuesHolder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/PropertyValuesHolder", java.flags == PUBLIC | STATIC | VARARGS, .name == "ofMultiInt", .descriptor == "(Ljava/lang/String;Landroid/animation/TypeConverter;Landroid/animation/TypeEvaluator;[Ljava/lang/Object;)Landroid/animation/PropertyValuesHolder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/animation/PropertyValuesHolder\0", "ofMultiInt\0", "(Ljava/lang/String;Landroid/animation/TypeConverter;Landroid/animation/TypeEvaluator;[Ljava/lang/Object;)Landroid/animation/PropertyValuesHolder;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ofMultiInt](https://developer.android.com/reference/android/animation/PropertyValuesHolder.html#ofMultiInt(java.lang.String,%20android.animation.TypeConverter,%20android.animation.TypeEvaluator,%20android.animation.Keyframe...))
        ///
        /// Required features: "android-animation-Keyframe", "android-animation-PropertyValuesHolder", "android-animation-TypeConverter", "android-animation-TypeEvaluator", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-animation-Keyframe", feature = "android-animation-PropertyValuesHolder", feature = "android-animation-TypeConverter", feature = "android-animation-TypeEvaluator", feature = "java-lang-String")))]
        pub fn ofMultiInt_String_TypeConverter_TypeEvaluator_Keyframe_array<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::animation::TypeConverter>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::animation::TypeEvaluator>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::android::animation::Keyframe, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::animation::PropertyValuesHolder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/PropertyValuesHolder", java.flags == PUBLIC | STATIC | VARARGS, .name == "ofMultiInt", .descriptor == "(Ljava/lang/String;Landroid/animation/TypeConverter;Landroid/animation/TypeEvaluator;[Landroid/animation/Keyframe;)Landroid/animation/PropertyValuesHolder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/animation/PropertyValuesHolder\0", "ofMultiInt\0", "(Ljava/lang/String;Landroid/animation/TypeConverter;Landroid/animation/TypeEvaluator;[Landroid/animation/Keyframe;)Landroid/animation/PropertyValuesHolder;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ofFloat](https://developer.android.com/reference/android/animation/PropertyValuesHolder.html#ofFloat(java.lang.String,%20float...))
        ///
        /// Required features: "android-animation-PropertyValuesHolder", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-animation-PropertyValuesHolder", feature = "java-lang-String")))]
        pub fn ofFloat_String_float_array<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::animation::PropertyValuesHolder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/PropertyValuesHolder", java.flags == PUBLIC | STATIC | VARARGS, .name == "ofFloat", .descriptor == "(Ljava/lang/String;[F)Landroid/animation/PropertyValuesHolder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/animation/PropertyValuesHolder\0", "ofFloat\0", "(Ljava/lang/String;[F)Landroid/animation/PropertyValuesHolder;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ofFloat](https://developer.android.com/reference/android/animation/PropertyValuesHolder.html#ofFloat(android.util.Property,%20float...))
        ///
        /// Required features: "android-animation-PropertyValuesHolder", "android-util-Property"
        #[cfg(any(feature = "all", all(feature = "android-animation-PropertyValuesHolder", feature = "android-util-Property")))]
        pub fn ofFloat_Property_float_array<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::util::Property>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::animation::PropertyValuesHolder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/PropertyValuesHolder", java.flags == PUBLIC | STATIC | VARARGS, .name == "ofFloat", .descriptor == "(Landroid/util/Property;[F)Landroid/animation/PropertyValuesHolder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/animation/PropertyValuesHolder\0", "ofFloat\0", "(Landroid/util/Property;[F)Landroid/animation/PropertyValuesHolder;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ofMultiFloat](https://developer.android.com/reference/android/animation/PropertyValuesHolder.html#ofMultiFloat(java.lang.String,%20float%5B%5D%5B%5D))
        ///
        /// Required features: "android-animation-PropertyValuesHolder", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-animation-PropertyValuesHolder", feature = "java-lang-String")))]
        pub fn ofMultiFloat_String_float_array_array<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<__jni_bindgen::FloatArray, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::animation::PropertyValuesHolder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/PropertyValuesHolder", java.flags == PUBLIC | STATIC, .name == "ofMultiFloat", .descriptor == "(Ljava/lang/String;[[F)Landroid/animation/PropertyValuesHolder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/animation/PropertyValuesHolder\0", "ofMultiFloat\0", "(Ljava/lang/String;[[F)Landroid/animation/PropertyValuesHolder;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ofMultiFloat](https://developer.android.com/reference/android/animation/PropertyValuesHolder.html#ofMultiFloat(java.lang.String,%20android.graphics.Path))
        ///
        /// Required features: "android-animation-PropertyValuesHolder", "android-graphics-Path", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-animation-PropertyValuesHolder", feature = "android-graphics-Path", feature = "java-lang-String")))]
        pub fn ofMultiFloat_String_Path<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Path>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::animation::PropertyValuesHolder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/PropertyValuesHolder", java.flags == PUBLIC | STATIC, .name == "ofMultiFloat", .descriptor == "(Ljava/lang/String;Landroid/graphics/Path;)Landroid/animation/PropertyValuesHolder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/animation/PropertyValuesHolder\0", "ofMultiFloat\0", "(Ljava/lang/String;Landroid/graphics/Path;)Landroid/animation/PropertyValuesHolder;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ofMultiFloat](https://developer.android.com/reference/android/animation/PropertyValuesHolder.html#ofMultiFloat(java.lang.String,%20android.animation.TypeConverter,%20android.animation.TypeEvaluator,%20java.lang.Object...))
        ///
        /// Required features: "android-animation-PropertyValuesHolder", "android-animation-TypeConverter", "android-animation-TypeEvaluator", "java-lang-Object", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-animation-PropertyValuesHolder", feature = "android-animation-TypeConverter", feature = "android-animation-TypeEvaluator", feature = "java-lang-Object", feature = "java-lang-String")))]
        pub fn ofMultiFloat_String_TypeConverter_TypeEvaluator_Object_array<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::animation::TypeConverter>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::animation::TypeEvaluator>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::Object, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::animation::PropertyValuesHolder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/PropertyValuesHolder", java.flags == PUBLIC | STATIC | VARARGS, .name == "ofMultiFloat", .descriptor == "(Ljava/lang/String;Landroid/animation/TypeConverter;Landroid/animation/TypeEvaluator;[Ljava/lang/Object;)Landroid/animation/PropertyValuesHolder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/animation/PropertyValuesHolder\0", "ofMultiFloat\0", "(Ljava/lang/String;Landroid/animation/TypeConverter;Landroid/animation/TypeEvaluator;[Ljava/lang/Object;)Landroid/animation/PropertyValuesHolder;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ofMultiFloat](https://developer.android.com/reference/android/animation/PropertyValuesHolder.html#ofMultiFloat(java.lang.String,%20android.animation.TypeConverter,%20android.animation.TypeEvaluator,%20android.animation.Keyframe...))
        ///
        /// Required features: "android-animation-Keyframe", "android-animation-PropertyValuesHolder", "android-animation-TypeConverter", "android-animation-TypeEvaluator", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-animation-Keyframe", feature = "android-animation-PropertyValuesHolder", feature = "android-animation-TypeConverter", feature = "android-animation-TypeEvaluator", feature = "java-lang-String")))]
        pub fn ofMultiFloat_String_TypeConverter_TypeEvaluator_Keyframe_array<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::animation::TypeConverter>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::animation::TypeEvaluator>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::android::animation::Keyframe, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::animation::PropertyValuesHolder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/PropertyValuesHolder", java.flags == PUBLIC | STATIC | VARARGS, .name == "ofMultiFloat", .descriptor == "(Ljava/lang/String;Landroid/animation/TypeConverter;Landroid/animation/TypeEvaluator;[Landroid/animation/Keyframe;)Landroid/animation/PropertyValuesHolder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/animation/PropertyValuesHolder\0", "ofMultiFloat\0", "(Ljava/lang/String;Landroid/animation/TypeConverter;Landroid/animation/TypeEvaluator;[Landroid/animation/Keyframe;)Landroid/animation/PropertyValuesHolder;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ofObject](https://developer.android.com/reference/android/animation/PropertyValuesHolder.html#ofObject(java.lang.String,%20android.animation.TypeEvaluator,%20java.lang.Object...))
        ///
        /// Required features: "android-animation-PropertyValuesHolder", "android-animation-TypeEvaluator", "java-lang-Object", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-animation-PropertyValuesHolder", feature = "android-animation-TypeEvaluator", feature = "java-lang-Object", feature = "java-lang-String")))]
        pub fn ofObject_String_TypeEvaluator_Object_array<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::animation::TypeEvaluator>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::Object, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::animation::PropertyValuesHolder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/PropertyValuesHolder", java.flags == PUBLIC | STATIC | VARARGS, .name == "ofObject", .descriptor == "(Ljava/lang/String;Landroid/animation/TypeEvaluator;[Ljava/lang/Object;)Landroid/animation/PropertyValuesHolder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/animation/PropertyValuesHolder\0", "ofObject\0", "(Ljava/lang/String;Landroid/animation/TypeEvaluator;[Ljava/lang/Object;)Landroid/animation/PropertyValuesHolder;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ofObject](https://developer.android.com/reference/android/animation/PropertyValuesHolder.html#ofObject(java.lang.String,%20android.animation.TypeConverter,%20android.graphics.Path))
        ///
        /// Required features: "android-animation-PropertyValuesHolder", "android-animation-TypeConverter", "android-graphics-Path", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-animation-PropertyValuesHolder", feature = "android-animation-TypeConverter", feature = "android-graphics-Path", feature = "java-lang-String")))]
        pub fn ofObject_String_TypeConverter_Path<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::animation::TypeConverter>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Path>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::animation::PropertyValuesHolder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/PropertyValuesHolder", java.flags == PUBLIC | STATIC, .name == "ofObject", .descriptor == "(Ljava/lang/String;Landroid/animation/TypeConverter;Landroid/graphics/Path;)Landroid/animation/PropertyValuesHolder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/animation/PropertyValuesHolder\0", "ofObject\0", "(Ljava/lang/String;Landroid/animation/TypeConverter;Landroid/graphics/Path;)Landroid/animation/PropertyValuesHolder;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ofObject](https://developer.android.com/reference/android/animation/PropertyValuesHolder.html#ofObject(android.util.Property,%20android.animation.TypeEvaluator,%20java.lang.Object...))
        ///
        /// Required features: "android-animation-PropertyValuesHolder", "android-animation-TypeEvaluator", "android-util-Property", "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "android-animation-PropertyValuesHolder", feature = "android-animation-TypeEvaluator", feature = "android-util-Property", feature = "java-lang-Object")))]
        pub fn ofObject_Property_TypeEvaluator_Object_array<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::util::Property>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::animation::TypeEvaluator>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::Object, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::animation::PropertyValuesHolder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/PropertyValuesHolder", java.flags == PUBLIC | STATIC | VARARGS, .name == "ofObject", .descriptor == "(Landroid/util/Property;Landroid/animation/TypeEvaluator;[Ljava/lang/Object;)Landroid/animation/PropertyValuesHolder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/animation/PropertyValuesHolder\0", "ofObject\0", "(Landroid/util/Property;Landroid/animation/TypeEvaluator;[Ljava/lang/Object;)Landroid/animation/PropertyValuesHolder;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ofObject](https://developer.android.com/reference/android/animation/PropertyValuesHolder.html#ofObject(android.util.Property,%20android.animation.TypeConverter,%20android.animation.TypeEvaluator,%20java.lang.Object...))
        ///
        /// Required features: "android-animation-PropertyValuesHolder", "android-animation-TypeConverter", "android-animation-TypeEvaluator", "android-util-Property", "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "android-animation-PropertyValuesHolder", feature = "android-animation-TypeConverter", feature = "android-animation-TypeEvaluator", feature = "android-util-Property", feature = "java-lang-Object")))]
        pub fn ofObject_Property_TypeConverter_TypeEvaluator_Object_array<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::util::Property>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::animation::TypeConverter>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::animation::TypeEvaluator>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::Object, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::animation::PropertyValuesHolder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/PropertyValuesHolder", java.flags == PUBLIC | STATIC | VARARGS, .name == "ofObject", .descriptor == "(Landroid/util/Property;Landroid/animation/TypeConverter;Landroid/animation/TypeEvaluator;[Ljava/lang/Object;)Landroid/animation/PropertyValuesHolder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/animation/PropertyValuesHolder\0", "ofObject\0", "(Landroid/util/Property;Landroid/animation/TypeConverter;Landroid/animation/TypeEvaluator;[Ljava/lang/Object;)Landroid/animation/PropertyValuesHolder;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ofObject](https://developer.android.com/reference/android/animation/PropertyValuesHolder.html#ofObject(android.util.Property,%20android.animation.TypeConverter,%20android.graphics.Path))
        ///
        /// Required features: "android-animation-PropertyValuesHolder", "android-animation-TypeConverter", "android-graphics-Path", "android-util-Property"
        #[cfg(any(feature = "all", all(feature = "android-animation-PropertyValuesHolder", feature = "android-animation-TypeConverter", feature = "android-graphics-Path", feature = "android-util-Property")))]
        pub fn ofObject_Property_TypeConverter_Path<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::util::Property>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::animation::TypeConverter>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Path>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::animation::PropertyValuesHolder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/PropertyValuesHolder", java.flags == PUBLIC | STATIC, .name == "ofObject", .descriptor == "(Landroid/util/Property;Landroid/animation/TypeConverter;Landroid/graphics/Path;)Landroid/animation/PropertyValuesHolder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/animation/PropertyValuesHolder\0", "ofObject\0", "(Landroid/util/Property;Landroid/animation/TypeConverter;Landroid/graphics/Path;)Landroid/animation/PropertyValuesHolder;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ofKeyframe](https://developer.android.com/reference/android/animation/PropertyValuesHolder.html#ofKeyframe(java.lang.String,%20android.animation.Keyframe...))
        ///
        /// Required features: "android-animation-Keyframe", "android-animation-PropertyValuesHolder", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-animation-Keyframe", feature = "android-animation-PropertyValuesHolder", feature = "java-lang-String")))]
        pub fn ofKeyframe_String_Keyframe_array<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::android::animation::Keyframe, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::animation::PropertyValuesHolder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/PropertyValuesHolder", java.flags == PUBLIC | STATIC | VARARGS, .name == "ofKeyframe", .descriptor == "(Ljava/lang/String;[Landroid/animation/Keyframe;)Landroid/animation/PropertyValuesHolder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/animation/PropertyValuesHolder\0", "ofKeyframe\0", "(Ljava/lang/String;[Landroid/animation/Keyframe;)Landroid/animation/PropertyValuesHolder;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ofKeyframe](https://developer.android.com/reference/android/animation/PropertyValuesHolder.html#ofKeyframe(android.util.Property,%20android.animation.Keyframe...))
        ///
        /// Required features: "android-animation-Keyframe", "android-animation-PropertyValuesHolder", "android-util-Property"
        #[cfg(any(feature = "all", all(feature = "android-animation-Keyframe", feature = "android-animation-PropertyValuesHolder", feature = "android-util-Property")))]
        pub fn ofKeyframe_Property_Keyframe_array<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::util::Property>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::android::animation::Keyframe, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::animation::PropertyValuesHolder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/PropertyValuesHolder", java.flags == PUBLIC | STATIC | VARARGS, .name == "ofKeyframe", .descriptor == "(Landroid/util/Property;[Landroid/animation/Keyframe;)Landroid/animation/PropertyValuesHolder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/animation/PropertyValuesHolder\0", "ofKeyframe\0", "(Landroid/util/Property;[Landroid/animation/Keyframe;)Landroid/animation/PropertyValuesHolder;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setIntValues](https://developer.android.com/reference/android/animation/PropertyValuesHolder.html#setIntValues(int...))
        pub fn setIntValues<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/PropertyValuesHolder", java.flags == PUBLIC | VARARGS, .name == "setIntValues", .descriptor == "([I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/PropertyValuesHolder\0", "setIntValues\0", "([I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setFloatValues](https://developer.android.com/reference/android/animation/PropertyValuesHolder.html#setFloatValues(float...))
        pub fn setFloatValues<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/PropertyValuesHolder", java.flags == PUBLIC | VARARGS, .name == "setFloatValues", .descriptor == "([F)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/PropertyValuesHolder\0", "setFloatValues\0", "([F)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setKeyframes](https://developer.android.com/reference/android/animation/PropertyValuesHolder.html#setKeyframes(android.animation.Keyframe...))
        ///
        /// Required features: "android-animation-Keyframe"
        #[cfg(any(feature = "all", all(feature = "android-animation-Keyframe")))]
        pub fn setKeyframes<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::android::animation::Keyframe, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/PropertyValuesHolder", java.flags == PUBLIC | VARARGS, .name == "setKeyframes", .descriptor == "([Landroid/animation/Keyframe;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/PropertyValuesHolder\0", "setKeyframes\0", "([Landroid/animation/Keyframe;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setObjectValues](https://developer.android.com/reference/android/animation/PropertyValuesHolder.html#setObjectValues(java.lang.Object...))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn setObjectValues<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::Object, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/PropertyValuesHolder", java.flags == PUBLIC | VARARGS, .name == "setObjectValues", .descriptor == "([Ljava/lang/Object;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/PropertyValuesHolder\0", "setObjectValues\0", "([Ljava/lang/Object;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setConverter](https://developer.android.com/reference/android/animation/PropertyValuesHolder.html#setConverter(android.animation.TypeConverter))
        ///
        /// Required features: "android-animation-TypeConverter"
        #[cfg(any(feature = "all", all(feature = "android-animation-TypeConverter")))]
        pub fn setConverter<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::animation::TypeConverter>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/PropertyValuesHolder", java.flags == PUBLIC, .name == "setConverter", .descriptor == "(Landroid/animation/TypeConverter;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/PropertyValuesHolder\0", "setConverter\0", "(Landroid/animation/TypeConverter;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clone](https://developer.android.com/reference/android/animation/PropertyValuesHolder.html#clone())
        ///
        /// Required features: "android-animation-PropertyValuesHolder"
        #[cfg(any(feature = "all", all(feature = "android-animation-PropertyValuesHolder")))]
        pub fn clone<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::animation::PropertyValuesHolder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/PropertyValuesHolder", java.flags == PUBLIC, .name == "clone", .descriptor == "()Landroid/animation/PropertyValuesHolder;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/PropertyValuesHolder\0", "clone\0", "()Landroid/animation/PropertyValuesHolder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setEvaluator](https://developer.android.com/reference/android/animation/PropertyValuesHolder.html#setEvaluator(android.animation.TypeEvaluator))
        ///
        /// Required features: "android-animation-TypeEvaluator"
        #[cfg(any(feature = "all", all(feature = "android-animation-TypeEvaluator")))]
        pub fn setEvaluator<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::animation::TypeEvaluator>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/PropertyValuesHolder", java.flags == PUBLIC, .name == "setEvaluator", .descriptor == "(Landroid/animation/TypeEvaluator;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/PropertyValuesHolder\0", "setEvaluator\0", "(Landroid/animation/TypeEvaluator;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPropertyName](https://developer.android.com/reference/android/animation/PropertyValuesHolder.html#setPropertyName(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn setPropertyName<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/PropertyValuesHolder", java.flags == PUBLIC, .name == "setPropertyName", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/PropertyValuesHolder\0", "setPropertyName\0", "(Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setProperty](https://developer.android.com/reference/android/animation/PropertyValuesHolder.html#setProperty(android.util.Property))
        ///
        /// Required features: "android-util-Property"
        #[cfg(any(feature = "all", all(feature = "android-util-Property")))]
        pub fn setProperty<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::util::Property>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/PropertyValuesHolder", java.flags == PUBLIC, .name == "setProperty", .descriptor == "(Landroid/util/Property;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/PropertyValuesHolder\0", "setProperty\0", "(Landroid/util/Property;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPropertyName](https://developer.android.com/reference/android/animation/PropertyValuesHolder.html#getPropertyName())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getPropertyName<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/PropertyValuesHolder", java.flags == PUBLIC, .name == "getPropertyName", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/PropertyValuesHolder\0", "getPropertyName\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/android/animation/PropertyValuesHolder.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/animation/PropertyValuesHolder", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/PropertyValuesHolder\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Bridge method - type erasure
        // /// [clone](https://developer.android.com/reference/android/animation/PropertyValuesHolder.html#clone())
        // ///
        // /// Required features: "java-lang-Object"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        // pub fn clone<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/animation/PropertyValuesHolder", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "clone", .descriptor == "()Ljava/lang/Object;"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/animation/PropertyValuesHolder\0", "clone\0", "()Ljava/lang/Object;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }
    }
}
