// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-speech-tts-TextToSpeech"))]
__jni_bindgen! {
    /// public class [TextToSpeech](https://developer.android.com/reference/android/speech/tts/TextToSpeech.html)
    ///
    /// Required feature: android-speech-tts-TextToSpeech
    public class TextToSpeech ("android/speech/tts/TextToSpeech") extends crate::java::lang::Object {

        /// [TextToSpeech](https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#TextToSpeech(android.content.Context,%20android.speech.tts.TextToSpeech.OnInitListener))
        ///
        /// Required features: "android-content-Context", "android-speech-tts-TextToSpeech_OnInitListener"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-speech-tts-TextToSpeech_OnInitListener")))]
        pub fn new_Context_OnInitListener<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::speech::tts::TextToSpeech_OnInitListener>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::speech::tts::TextToSpeech>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/speech/tts/TextToSpeech", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/content/Context;Landroid/speech/tts/TextToSpeech$OnInitListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/speech/tts/TextToSpeech\0", "<init>\0", "(Landroid/content/Context;Landroid/speech/tts/TextToSpeech$OnInitListener;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [TextToSpeech](https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#TextToSpeech(android.content.Context,%20android.speech.tts.TextToSpeech.OnInitListener,%20java.lang.String))
        ///
        /// Required features: "android-content-Context", "android-speech-tts-TextToSpeech_OnInitListener", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-speech-tts-TextToSpeech_OnInitListener", feature = "java-lang-String")))]
        pub fn new_Context_OnInitListener_String<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::speech::tts::TextToSpeech_OnInitListener>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::speech::tts::TextToSpeech>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/speech/tts/TextToSpeech", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/content/Context;Landroid/speech/tts/TextToSpeech$OnInitListener;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/speech/tts/TextToSpeech\0", "<init>\0", "(Landroid/content/Context;Landroid/speech/tts/TextToSpeech$OnInitListener;Ljava/lang/String;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [shutdown](https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#shutdown())
        pub fn shutdown<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/speech/tts/TextToSpeech", java.flags == PUBLIC, .name == "shutdown", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/speech/tts/TextToSpeech\0", "shutdown\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addSpeech](https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#addSpeech(java.lang.String,%20java.lang.String,%20int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn addSpeech_String_String_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/speech/tts/TextToSpeech", java.flags == PUBLIC, .name == "addSpeech", .descriptor == "(Ljava/lang/String;Ljava/lang/String;I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/speech/tts/TextToSpeech\0", "addSpeech\0", "(Ljava/lang/String;Ljava/lang/String;I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addSpeech](https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#addSpeech(java.lang.CharSequence,%20java.lang.String,%20int))
        ///
        /// Required features: "java-lang-CharSequence", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence", feature = "java-lang-String")))]
        pub fn addSpeech_CharSequence_String_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/speech/tts/TextToSpeech", java.flags == PUBLIC, .name == "addSpeech", .descriptor == "(Ljava/lang/CharSequence;Ljava/lang/String;I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/speech/tts/TextToSpeech\0", "addSpeech\0", "(Ljava/lang/CharSequence;Ljava/lang/String;I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addSpeech](https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#addSpeech(java.lang.String,%20java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn addSpeech_String_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/speech/tts/TextToSpeech", java.flags == PUBLIC, .name == "addSpeech", .descriptor == "(Ljava/lang/String;Ljava/lang/String;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/speech/tts/TextToSpeech\0", "addSpeech\0", "(Ljava/lang/String;Ljava/lang/String;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addSpeech](https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#addSpeech(java.lang.CharSequence,%20java.io.File))
        ///
        /// Required features: "java-io-File", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-io-File", feature = "java-lang-CharSequence")))]
        pub fn addSpeech_CharSequence_File<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::File>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/speech/tts/TextToSpeech", java.flags == PUBLIC, .name == "addSpeech", .descriptor == "(Ljava/lang/CharSequence;Ljava/io/File;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/speech/tts/TextToSpeech\0", "addSpeech\0", "(Ljava/lang/CharSequence;Ljava/io/File;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addEarcon](https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#addEarcon(java.lang.String,%20java.lang.String,%20int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn addEarcon_String_String_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/speech/tts/TextToSpeech", java.flags == PUBLIC, .name == "addEarcon", .descriptor == "(Ljava/lang/String;Ljava/lang/String;I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/speech/tts/TextToSpeech\0", "addEarcon\0", "(Ljava/lang/String;Ljava/lang/String;I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addEarcon](https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#addEarcon(java.lang.String,%20java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        #[deprecated] pub fn addEarcon_String_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/speech/tts/TextToSpeech", java.flags == PUBLIC, .name == "addEarcon", .descriptor == "(Ljava/lang/String;Ljava/lang/String;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/speech/tts/TextToSpeech\0", "addEarcon\0", "(Ljava/lang/String;Ljava/lang/String;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addEarcon](https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#addEarcon(java.lang.String,%20java.io.File))
        ///
        /// Required features: "java-io-File", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-io-File", feature = "java-lang-String")))]
        pub fn addEarcon_String_File<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::File>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/speech/tts/TextToSpeech", java.flags == PUBLIC, .name == "addEarcon", .descriptor == "(Ljava/lang/String;Ljava/io/File;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/speech/tts/TextToSpeech\0", "addEarcon\0", "(Ljava/lang/String;Ljava/io/File;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [speak](https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#speak(java.lang.CharSequence,%20int,%20android.os.Bundle,%20java.lang.String))
        ///
        /// Required features: "android-os-Bundle", "java-lang-CharSequence", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-os-Bundle", feature = "java-lang-CharSequence", feature = "java-lang-String")))]
        pub fn speak_CharSequence_int_Bundle_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/speech/tts/TextToSpeech", java.flags == PUBLIC, .name == "speak", .descriptor == "(Ljava/lang/CharSequence;ILandroid/os/Bundle;Ljava/lang/String;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/speech/tts/TextToSpeech\0", "speak\0", "(Ljava/lang/CharSequence;ILandroid/os/Bundle;Ljava/lang/String;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [speak](https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#speak(java.lang.String,%20int,%20java.util.HashMap))
        ///
        /// Required features: "java-lang-String", "java-util-HashMap"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-util-HashMap")))]
        #[deprecated] pub fn speak_String_int_HashMap<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::HashMap>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/speech/tts/TextToSpeech", java.flags == PUBLIC, .name == "speak", .descriptor == "(Ljava/lang/String;ILjava/util/HashMap;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/speech/tts/TextToSpeech\0", "speak\0", "(Ljava/lang/String;ILjava/util/HashMap;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [playEarcon](https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#playEarcon(java.lang.String,%20int,%20android.os.Bundle,%20java.lang.String))
        ///
        /// Required features: "android-os-Bundle", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-os-Bundle", feature = "java-lang-String")))]
        pub fn playEarcon_String_int_Bundle_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/speech/tts/TextToSpeech", java.flags == PUBLIC, .name == "playEarcon", .descriptor == "(Ljava/lang/String;ILandroid/os/Bundle;Ljava/lang/String;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/speech/tts/TextToSpeech\0", "playEarcon\0", "(Ljava/lang/String;ILandroid/os/Bundle;Ljava/lang/String;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [playEarcon](https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#playEarcon(java.lang.String,%20int,%20java.util.HashMap))
        ///
        /// Required features: "java-lang-String", "java-util-HashMap"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-util-HashMap")))]
        #[deprecated] pub fn playEarcon_String_int_HashMap<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::HashMap>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/speech/tts/TextToSpeech", java.flags == PUBLIC, .name == "playEarcon", .descriptor == "(Ljava/lang/String;ILjava/util/HashMap;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/speech/tts/TextToSpeech\0", "playEarcon\0", "(Ljava/lang/String;ILjava/util/HashMap;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [playSilentUtterance](https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#playSilentUtterance(long,%20int,%20java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn playSilentUtterance<'env>(&'env self, arg0: i64, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/speech/tts/TextToSpeech", java.flags == PUBLIC, .name == "playSilentUtterance", .descriptor == "(JILjava/lang/String;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/speech/tts/TextToSpeech\0", "playSilentUtterance\0", "(JILjava/lang/String;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [playSilence](https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#playSilence(long,%20int,%20java.util.HashMap))
        ///
        /// Required features: "java-util-HashMap"
        #[cfg(any(feature = "all", all(feature = "java-util-HashMap")))]
        #[deprecated] pub fn playSilence<'env>(&'env self, arg0: i64, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::HashMap>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/speech/tts/TextToSpeech", java.flags == PUBLIC, .name == "playSilence", .descriptor == "(JILjava/util/HashMap;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/speech/tts/TextToSpeech\0", "playSilence\0", "(JILjava/util/HashMap;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFeatures](https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#getFeatures(java.util.Locale))
        ///
        /// Required features: "java-util-Locale", "java-util-Set"
        #[cfg(any(feature = "all", all(feature = "java-util-Locale", feature = "java-util-Set")))]
        #[deprecated] pub fn getFeatures<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Locale>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Set>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/speech/tts/TextToSpeech", java.flags == PUBLIC, .name == "getFeatures", .descriptor == "(Ljava/util/Locale;)Ljava/util/Set;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/speech/tts/TextToSpeech\0", "getFeatures\0", "(Ljava/util/Locale;)Ljava/util/Set;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isSpeaking](https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#isSpeaking())
        pub fn isSpeaking<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/speech/tts/TextToSpeech", java.flags == PUBLIC, .name == "isSpeaking", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/speech/tts/TextToSpeech\0", "isSpeaking\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [stop](https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#stop())
        pub fn stop<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/speech/tts/TextToSpeech", java.flags == PUBLIC, .name == "stop", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/speech/tts/TextToSpeech\0", "stop\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setSpeechRate](https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#setSpeechRate(float))
        pub fn setSpeechRate<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/speech/tts/TextToSpeech", java.flags == PUBLIC, .name == "setSpeechRate", .descriptor == "(F)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/speech/tts/TextToSpeech\0", "setSpeechRate\0", "(F)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPitch](https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#setPitch(float))
        pub fn setPitch<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/speech/tts/TextToSpeech", java.flags == PUBLIC, .name == "setPitch", .descriptor == "(F)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/speech/tts/TextToSpeech\0", "setPitch\0", "(F)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAudioAttributes](https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#setAudioAttributes(android.media.AudioAttributes))
        ///
        /// Required features: "android-media-AudioAttributes"
        #[cfg(any(feature = "all", all(feature = "android-media-AudioAttributes")))]
        pub fn setAudioAttributes<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::AudioAttributes>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/speech/tts/TextToSpeech", java.flags == PUBLIC, .name == "setAudioAttributes", .descriptor == "(Landroid/media/AudioAttributes;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/speech/tts/TextToSpeech\0", "setAudioAttributes\0", "(Landroid/media/AudioAttributes;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDefaultLanguage](https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#getDefaultLanguage())
        ///
        /// Required features: "java-util-Locale"
        #[cfg(any(feature = "all", all(feature = "java-util-Locale")))]
        #[deprecated] pub fn getDefaultLanguage<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Locale>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/speech/tts/TextToSpeech", java.flags == PUBLIC, .name == "getDefaultLanguage", .descriptor == "()Ljava/util/Locale;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/speech/tts/TextToSpeech\0", "getDefaultLanguage\0", "()Ljava/util/Locale;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setLanguage](https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#setLanguage(java.util.Locale))
        ///
        /// Required features: "java-util-Locale"
        #[cfg(any(feature = "all", all(feature = "java-util-Locale")))]
        pub fn setLanguage<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Locale>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/speech/tts/TextToSpeech", java.flags == PUBLIC, .name == "setLanguage", .descriptor == "(Ljava/util/Locale;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/speech/tts/TextToSpeech\0", "setLanguage\0", "(Ljava/util/Locale;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLanguage](https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#getLanguage())
        ///
        /// Required features: "java-util-Locale"
        #[cfg(any(feature = "all", all(feature = "java-util-Locale")))]
        #[deprecated] pub fn getLanguage<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Locale>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/speech/tts/TextToSpeech", java.flags == PUBLIC, .name == "getLanguage", .descriptor == "()Ljava/util/Locale;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/speech/tts/TextToSpeech\0", "getLanguage\0", "()Ljava/util/Locale;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAvailableLanguages](https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#getAvailableLanguages())
        ///
        /// Required features: "java-util-Set"
        #[cfg(any(feature = "all", all(feature = "java-util-Set")))]
        pub fn getAvailableLanguages<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Set>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/speech/tts/TextToSpeech", java.flags == PUBLIC, .name == "getAvailableLanguages", .descriptor == "()Ljava/util/Set;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/speech/tts/TextToSpeech\0", "getAvailableLanguages\0", "()Ljava/util/Set;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getVoices](https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#getVoices())
        ///
        /// Required features: "java-util-Set"
        #[cfg(any(feature = "all", all(feature = "java-util-Set")))]
        pub fn getVoices<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Set>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/speech/tts/TextToSpeech", java.flags == PUBLIC, .name == "getVoices", .descriptor == "()Ljava/util/Set;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/speech/tts/TextToSpeech\0", "getVoices\0", "()Ljava/util/Set;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setVoice](https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#setVoice(android.speech.tts.Voice))
        ///
        /// Required features: "android-speech-tts-Voice"
        #[cfg(any(feature = "all", all(feature = "android-speech-tts-Voice")))]
        pub fn setVoice<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::speech::tts::Voice>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/speech/tts/TextToSpeech", java.flags == PUBLIC, .name == "setVoice", .descriptor == "(Landroid/speech/tts/Voice;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/speech/tts/TextToSpeech\0", "setVoice\0", "(Landroid/speech/tts/Voice;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getVoice](https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#getVoice())
        ///
        /// Required features: "android-speech-tts-Voice"
        #[cfg(any(feature = "all", all(feature = "android-speech-tts-Voice")))]
        pub fn getVoice<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::speech::tts::Voice>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/speech/tts/TextToSpeech", java.flags == PUBLIC, .name == "getVoice", .descriptor == "()Landroid/speech/tts/Voice;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/speech/tts/TextToSpeech\0", "getVoice\0", "()Landroid/speech/tts/Voice;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDefaultVoice](https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#getDefaultVoice())
        ///
        /// Required features: "android-speech-tts-Voice"
        #[cfg(any(feature = "all", all(feature = "android-speech-tts-Voice")))]
        pub fn getDefaultVoice<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::speech::tts::Voice>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/speech/tts/TextToSpeech", java.flags == PUBLIC, .name == "getDefaultVoice", .descriptor == "()Landroid/speech/tts/Voice;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/speech/tts/TextToSpeech\0", "getDefaultVoice\0", "()Landroid/speech/tts/Voice;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isLanguageAvailable](https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#isLanguageAvailable(java.util.Locale))
        ///
        /// Required features: "java-util-Locale"
        #[cfg(any(feature = "all", all(feature = "java-util-Locale")))]
        pub fn isLanguageAvailable<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Locale>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/speech/tts/TextToSpeech", java.flags == PUBLIC, .name == "isLanguageAvailable", .descriptor == "(Ljava/util/Locale;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/speech/tts/TextToSpeech\0", "isLanguageAvailable\0", "(Ljava/util/Locale;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [synthesizeToFile](https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#synthesizeToFile(java.lang.CharSequence,%20android.os.Bundle,%20java.io.File,%20java.lang.String))
        ///
        /// Required features: "android-os-Bundle", "java-io-File", "java-lang-CharSequence", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-os-Bundle", feature = "java-io-File", feature = "java-lang-CharSequence", feature = "java-lang-String")))]
        pub fn synthesizeToFile_CharSequence_Bundle_File_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::File>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/speech/tts/TextToSpeech", java.flags == PUBLIC, .name == "synthesizeToFile", .descriptor == "(Ljava/lang/CharSequence;Landroid/os/Bundle;Ljava/io/File;Ljava/lang/String;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/speech/tts/TextToSpeech\0", "synthesizeToFile\0", "(Ljava/lang/CharSequence;Landroid/os/Bundle;Ljava/io/File;Ljava/lang/String;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [synthesizeToFile](https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#synthesizeToFile(java.lang.String,%20java.util.HashMap,%20java.lang.String))
        ///
        /// Required features: "java-lang-String", "java-util-HashMap"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-util-HashMap")))]
        #[deprecated] pub fn synthesizeToFile_String_HashMap_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::HashMap>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/speech/tts/TextToSpeech", java.flags == PUBLIC, .name == "synthesizeToFile", .descriptor == "(Ljava/lang/String;Ljava/util/HashMap;Ljava/lang/String;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/speech/tts/TextToSpeech\0", "synthesizeToFile\0", "(Ljava/lang/String;Ljava/util/HashMap;Ljava/lang/String;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOnUtteranceCompletedListener](https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#setOnUtteranceCompletedListener(android.speech.tts.TextToSpeech.OnUtteranceCompletedListener))
        ///
        /// Required features: "android-speech-tts-TextToSpeech_OnUtteranceCompletedListener"
        #[cfg(any(feature = "all", all(feature = "android-speech-tts-TextToSpeech_OnUtteranceCompletedListener")))]
        #[deprecated] pub fn setOnUtteranceCompletedListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::speech::tts::TextToSpeech_OnUtteranceCompletedListener>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/speech/tts/TextToSpeech", java.flags == PUBLIC, .name == "setOnUtteranceCompletedListener", .descriptor == "(Landroid/speech/tts/TextToSpeech$OnUtteranceCompletedListener;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/speech/tts/TextToSpeech\0", "setOnUtteranceCompletedListener\0", "(Landroid/speech/tts/TextToSpeech$OnUtteranceCompletedListener;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOnUtteranceProgressListener](https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#setOnUtteranceProgressListener(android.speech.tts.UtteranceProgressListener))
        ///
        /// Required features: "android-speech-tts-UtteranceProgressListener"
        #[cfg(any(feature = "all", all(feature = "android-speech-tts-UtteranceProgressListener")))]
        pub fn setOnUtteranceProgressListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::speech::tts::UtteranceProgressListener>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/speech/tts/TextToSpeech", java.flags == PUBLIC, .name == "setOnUtteranceProgressListener", .descriptor == "(Landroid/speech/tts/UtteranceProgressListener;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/speech/tts/TextToSpeech\0", "setOnUtteranceProgressListener\0", "(Landroid/speech/tts/UtteranceProgressListener;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setEngineByPackageName](https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#setEngineByPackageName(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        #[deprecated] pub fn setEngineByPackageName<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/speech/tts/TextToSpeech", java.flags == PUBLIC, .name == "setEngineByPackageName", .descriptor == "(Ljava/lang/String;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/speech/tts/TextToSpeech\0", "setEngineByPackageName\0", "(Ljava/lang/String;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDefaultEngine](https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#getDefaultEngine())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getDefaultEngine<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/speech/tts/TextToSpeech", java.flags == PUBLIC, .name == "getDefaultEngine", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/speech/tts/TextToSpeech\0", "getDefaultEngine\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [areDefaultsEnforced](https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#areDefaultsEnforced())
        #[deprecated] pub fn areDefaultsEnforced<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/speech/tts/TextToSpeech", java.flags == PUBLIC, .name == "areDefaultsEnforced", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/speech/tts/TextToSpeech\0", "areDefaultsEnforced\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getEngines](https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#getEngines())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getEngines<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/speech/tts/TextToSpeech", java.flags == PUBLIC, .name == "getEngines", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/speech/tts/TextToSpeech\0", "getEngines\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMaxSpeechInputLength](https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#getMaxSpeechInputLength())
        pub fn getMaxSpeechInputLength<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/speech/tts/TextToSpeech", java.flags == PUBLIC | STATIC, .name == "getMaxSpeechInputLength", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/speech/tts/TextToSpeech\0", "getMaxSpeechInputLength\0", "()I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [ACTION_TTS_QUEUE_PROCESSING_COMPLETED](https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#ACTION_TTS_QUEUE_PROCESSING_COMPLETED)
        pub const ACTION_TTS_QUEUE_PROCESSING_COMPLETED : &'static str = "android.speech.tts.TTS_QUEUE_PROCESSING_COMPLETED";

        /// public static final [ERROR](https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#ERROR)
        pub const ERROR : i32 = -1;

        /// public static final [ERROR_INVALID_REQUEST](https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#ERROR_INVALID_REQUEST)
        pub const ERROR_INVALID_REQUEST : i32 = -8;

        /// public static final [ERROR_NETWORK](https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#ERROR_NETWORK)
        pub const ERROR_NETWORK : i32 = -6;

        /// public static final [ERROR_NETWORK_TIMEOUT](https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#ERROR_NETWORK_TIMEOUT)
        pub const ERROR_NETWORK_TIMEOUT : i32 = -7;

        /// public static final [ERROR_NOT_INSTALLED_YET](https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#ERROR_NOT_INSTALLED_YET)
        pub const ERROR_NOT_INSTALLED_YET : i32 = -9;

        /// public static final [ERROR_OUTPUT](https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#ERROR_OUTPUT)
        pub const ERROR_OUTPUT : i32 = -5;

        /// public static final [ERROR_SERVICE](https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#ERROR_SERVICE)
        pub const ERROR_SERVICE : i32 = -4;

        /// public static final [ERROR_SYNTHESIS](https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#ERROR_SYNTHESIS)
        pub const ERROR_SYNTHESIS : i32 = -3;

        /// public static final [LANG_AVAILABLE](https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#LANG_AVAILABLE)
        pub const LANG_AVAILABLE : i32 = 0;

        /// public static final [LANG_COUNTRY_AVAILABLE](https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#LANG_COUNTRY_AVAILABLE)
        pub const LANG_COUNTRY_AVAILABLE : i32 = 1;

        /// public static final [LANG_COUNTRY_VAR_AVAILABLE](https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#LANG_COUNTRY_VAR_AVAILABLE)
        pub const LANG_COUNTRY_VAR_AVAILABLE : i32 = 2;

        /// public static final [LANG_MISSING_DATA](https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#LANG_MISSING_DATA)
        pub const LANG_MISSING_DATA : i32 = -1;

        /// public static final [LANG_NOT_SUPPORTED](https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#LANG_NOT_SUPPORTED)
        pub const LANG_NOT_SUPPORTED : i32 = -2;

        /// public static final [QUEUE_ADD](https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#QUEUE_ADD)
        pub const QUEUE_ADD : i32 = 1;

        /// public static final [QUEUE_FLUSH](https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#QUEUE_FLUSH)
        pub const QUEUE_FLUSH : i32 = 0;

        /// public static final [STOPPED](https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#STOPPED)
        pub const STOPPED : i32 = -2;

        /// public static final [SUCCESS](https://developer.android.com/reference/android/speech/tts/TextToSpeech.html#SUCCESS)
        pub const SUCCESS : i32 = 0;
    }
}
