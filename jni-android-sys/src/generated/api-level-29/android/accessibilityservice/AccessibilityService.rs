// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-accessibilityservice-AccessibilityService"))]
__jni_bindgen! {
    /// public class [AccessibilityService](https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html)
    ///
    /// Required feature: android-accessibilityservice-AccessibilityService
    public class AccessibilityService ("android/accessibilityservice/AccessibilityService") extends crate::android::app::Service {

        /// [AccessibilityService](https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#AccessibilityService())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::accessibilityservice::AccessibilityService>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accessibilityservice/AccessibilityService", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accessibilityservice/AccessibilityService\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onAccessibilityEvent](https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#onAccessibilityEvent(android.view.accessibility.AccessibilityEvent))
        ///
        /// Required features: "android-view-accessibility-AccessibilityEvent"
        #[cfg(any(feature = "all", all(feature = "android-view-accessibility-AccessibilityEvent")))]
        pub fn onAccessibilityEvent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::accessibility::AccessibilityEvent>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accessibilityservice/AccessibilityService", java.flags == PUBLIC | ABSTRACT, .name == "onAccessibilityEvent", .descriptor == "(Landroid/view/accessibility/AccessibilityEvent;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accessibilityservice/AccessibilityService\0", "onAccessibilityEvent\0", "(Landroid/view/accessibility/AccessibilityEvent;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onInterrupt](https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#onInterrupt())
        pub fn onInterrupt<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accessibilityservice/AccessibilityService", java.flags == PUBLIC | ABSTRACT, .name == "onInterrupt", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accessibilityservice/AccessibilityService\0", "onInterrupt\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [onServiceConnected](https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#onServiceConnected())
        // fn onServiceConnected<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/accessibilityservice/AccessibilityService", java.flags == PROTECTED, .name == "onServiceConnected", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accessibilityservice/AccessibilityService\0", "onServiceConnected\0", "()V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [onGesture](https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#onGesture(int))
        // fn onGesture<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/accessibilityservice/AccessibilityService", java.flags == PROTECTED, .name == "onGesture", .descriptor == "(I)Z"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accessibilityservice/AccessibilityService\0", "onGesture\0", "(I)Z\0");
        //         __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [onKeyEvent](https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#onKeyEvent(android.view.KeyEvent))
        // ///
        // /// Required features: "android-view-KeyEvent"
        // #[cfg(any(feature = "all", all(feature = "android-view-KeyEvent")))]
        // fn onKeyEvent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::KeyEvent>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/accessibilityservice/AccessibilityService", java.flags == PROTECTED, .name == "onKeyEvent", .descriptor == "(Landroid/view/KeyEvent;)Z"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accessibilityservice/AccessibilityService\0", "onKeyEvent\0", "(Landroid/view/KeyEvent;)Z\0");
        //         __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getWindows](https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#getWindows())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getWindows<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accessibilityservice/AccessibilityService", java.flags == PUBLIC, .name == "getWindows", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accessibilityservice/AccessibilityService\0", "getWindows\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRootInActiveWindow](https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#getRootInActiveWindow())
        ///
        /// Required features: "android-view-accessibility-AccessibilityNodeInfo"
        #[cfg(any(feature = "all", all(feature = "android-view-accessibility-AccessibilityNodeInfo")))]
        pub fn getRootInActiveWindow<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::accessibility::AccessibilityNodeInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accessibilityservice/AccessibilityService", java.flags == PUBLIC, .name == "getRootInActiveWindow", .descriptor == "()Landroid/view/accessibility/AccessibilityNodeInfo;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accessibilityservice/AccessibilityService\0", "getRootInActiveWindow\0", "()Landroid/view/accessibility/AccessibilityNodeInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [disableSelf](https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#disableSelf())
        pub fn disableSelf<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accessibilityservice/AccessibilityService", java.flags == PUBLIC | FINAL, .name == "disableSelf", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accessibilityservice/AccessibilityService\0", "disableSelf\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMagnificationController](https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#getMagnificationController())
        ///
        /// Required features: "android-accessibilityservice-AccessibilityService_MagnificationController"
        #[cfg(any(feature = "all", all(feature = "android-accessibilityservice-AccessibilityService_MagnificationController")))]
        pub fn getMagnificationController<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::accessibilityservice::AccessibilityService_MagnificationController>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accessibilityservice/AccessibilityService", java.flags == PUBLIC | FINAL, .name == "getMagnificationController", .descriptor == "()Landroid/accessibilityservice/AccessibilityService$MagnificationController;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accessibilityservice/AccessibilityService\0", "getMagnificationController\0", "()Landroid/accessibilityservice/AccessibilityService$MagnificationController;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFingerprintGestureController](https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#getFingerprintGestureController())
        ///
        /// Required features: "android-accessibilityservice-FingerprintGestureController"
        #[cfg(any(feature = "all", all(feature = "android-accessibilityservice-FingerprintGestureController")))]
        pub fn getFingerprintGestureController<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::accessibilityservice::FingerprintGestureController>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accessibilityservice/AccessibilityService", java.flags == PUBLIC | FINAL, .name == "getFingerprintGestureController", .descriptor == "()Landroid/accessibilityservice/FingerprintGestureController;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accessibilityservice/AccessibilityService\0", "getFingerprintGestureController\0", "()Landroid/accessibilityservice/FingerprintGestureController;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dispatchGesture](https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#dispatchGesture(android.accessibilityservice.GestureDescription,%20android.accessibilityservice.AccessibilityService.GestureResultCallback,%20android.os.Handler))
        ///
        /// Required features: "android-accessibilityservice-AccessibilityService_GestureResultCallback", "android-accessibilityservice-GestureDescription", "android-os-Handler"
        #[cfg(any(feature = "all", all(feature = "android-accessibilityservice-AccessibilityService_GestureResultCallback", feature = "android-accessibilityservice-GestureDescription", feature = "android-os-Handler")))]
        pub fn dispatchGesture<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accessibilityservice::GestureDescription>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accessibilityservice::AccessibilityService_GestureResultCallback>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accessibilityservice/AccessibilityService", java.flags == PUBLIC | FINAL, .name == "dispatchGesture", .descriptor == "(Landroid/accessibilityservice/GestureDescription;Landroid/accessibilityservice/AccessibilityService$GestureResultCallback;Landroid/os/Handler;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accessibilityservice/AccessibilityService\0", "dispatchGesture\0", "(Landroid/accessibilityservice/GestureDescription;Landroid/accessibilityservice/AccessibilityService$GestureResultCallback;Landroid/os/Handler;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSoftKeyboardController](https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#getSoftKeyboardController())
        ///
        /// Required features: "android-accessibilityservice-AccessibilityService_SoftKeyboardController"
        #[cfg(any(feature = "all", all(feature = "android-accessibilityservice-AccessibilityService_SoftKeyboardController")))]
        pub fn getSoftKeyboardController<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::accessibilityservice::AccessibilityService_SoftKeyboardController>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accessibilityservice/AccessibilityService", java.flags == PUBLIC | FINAL, .name == "getSoftKeyboardController", .descriptor == "()Landroid/accessibilityservice/AccessibilityService$SoftKeyboardController;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accessibilityservice/AccessibilityService\0", "getSoftKeyboardController\0", "()Landroid/accessibilityservice/AccessibilityService$SoftKeyboardController;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAccessibilityButtonController](https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#getAccessibilityButtonController())
        ///
        /// Required features: "android-accessibilityservice-AccessibilityButtonController"
        #[cfg(any(feature = "all", all(feature = "android-accessibilityservice-AccessibilityButtonController")))]
        pub fn getAccessibilityButtonController<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::accessibilityservice::AccessibilityButtonController>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accessibilityservice/AccessibilityService", java.flags == PUBLIC | FINAL, .name == "getAccessibilityButtonController", .descriptor == "()Landroid/accessibilityservice/AccessibilityButtonController;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accessibilityservice/AccessibilityService\0", "getAccessibilityButtonController\0", "()Landroid/accessibilityservice/AccessibilityButtonController;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [performGlobalAction](https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#performGlobalAction(int))
        pub fn performGlobalAction<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accessibilityservice/AccessibilityService", java.flags == PUBLIC | FINAL, .name == "performGlobalAction", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accessibilityservice/AccessibilityService\0", "performGlobalAction\0", "(I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [findFocus](https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#findFocus(int))
        ///
        /// Required features: "android-view-accessibility-AccessibilityNodeInfo"
        #[cfg(any(feature = "all", all(feature = "android-view-accessibility-AccessibilityNodeInfo")))]
        pub fn findFocus<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::accessibility::AccessibilityNodeInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accessibilityservice/AccessibilityService", java.flags == PUBLIC, .name == "findFocus", .descriptor == "(I)Landroid/view/accessibility/AccessibilityNodeInfo;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accessibilityservice/AccessibilityService\0", "findFocus\0", "(I)Landroid/view/accessibility/AccessibilityNodeInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getServiceInfo](https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#getServiceInfo())
        ///
        /// Required features: "android-accessibilityservice-AccessibilityServiceInfo"
        #[cfg(any(feature = "all", all(feature = "android-accessibilityservice-AccessibilityServiceInfo")))]
        pub fn getServiceInfo<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::accessibilityservice::AccessibilityServiceInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accessibilityservice/AccessibilityService", java.flags == PUBLIC | FINAL, .name == "getServiceInfo", .descriptor == "()Landroid/accessibilityservice/AccessibilityServiceInfo;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accessibilityservice/AccessibilityService\0", "getServiceInfo\0", "()Landroid/accessibilityservice/AccessibilityServiceInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setServiceInfo](https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo))
        ///
        /// Required features: "android-accessibilityservice-AccessibilityServiceInfo"
        #[cfg(any(feature = "all", all(feature = "android-accessibilityservice-AccessibilityServiceInfo")))]
        pub fn setServiceInfo<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accessibilityservice::AccessibilityServiceInfo>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accessibilityservice/AccessibilityService", java.flags == PUBLIC | FINAL, .name == "setServiceInfo", .descriptor == "(Landroid/accessibilityservice/AccessibilityServiceInfo;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accessibilityservice/AccessibilityService\0", "setServiceInfo\0", "(Landroid/accessibilityservice/AccessibilityServiceInfo;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSystemService](https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#getSystemService(java.lang.String))
        ///
        /// Required features: "java-lang-Object", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object", feature = "java-lang-String")))]
        pub fn getSystemService<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accessibilityservice/AccessibilityService", java.flags == PUBLIC, .name == "getSystemService", .descriptor == "(Ljava/lang/String;)Ljava/lang/Object;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accessibilityservice/AccessibilityService\0", "getSystemService\0", "(Ljava/lang/String;)Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onBind](https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#onBind(android.content.Intent))
        ///
        /// Required features: "android-content-Intent", "android-os-IBinder"
        #[cfg(any(feature = "all", all(feature = "android-content-Intent", feature = "android-os-IBinder")))]
        pub fn onBind<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::IBinder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accessibilityservice/AccessibilityService", java.flags == PUBLIC | FINAL, .name == "onBind", .descriptor == "(Landroid/content/Intent;)Landroid/os/IBinder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accessibilityservice/AccessibilityService\0", "onBind\0", "(Landroid/content/Intent;)Landroid/os/IBinder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [GESTURE_SWIPE_DOWN](https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GESTURE_SWIPE_DOWN)
        pub const GESTURE_SWIPE_DOWN : i32 = 2;

        /// public static final [GESTURE_SWIPE_DOWN_AND_LEFT](https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GESTURE_SWIPE_DOWN_AND_LEFT)
        pub const GESTURE_SWIPE_DOWN_AND_LEFT : i32 = 15;

        /// public static final [GESTURE_SWIPE_DOWN_AND_RIGHT](https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GESTURE_SWIPE_DOWN_AND_RIGHT)
        pub const GESTURE_SWIPE_DOWN_AND_RIGHT : i32 = 16;

        /// public static final [GESTURE_SWIPE_DOWN_AND_UP](https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GESTURE_SWIPE_DOWN_AND_UP)
        pub const GESTURE_SWIPE_DOWN_AND_UP : i32 = 8;

        /// public static final [GESTURE_SWIPE_LEFT](https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GESTURE_SWIPE_LEFT)
        pub const GESTURE_SWIPE_LEFT : i32 = 3;

        /// public static final [GESTURE_SWIPE_LEFT_AND_DOWN](https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GESTURE_SWIPE_LEFT_AND_DOWN)
        pub const GESTURE_SWIPE_LEFT_AND_DOWN : i32 = 10;

        /// public static final [GESTURE_SWIPE_LEFT_AND_RIGHT](https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GESTURE_SWIPE_LEFT_AND_RIGHT)
        pub const GESTURE_SWIPE_LEFT_AND_RIGHT : i32 = 5;

        /// public static final [GESTURE_SWIPE_LEFT_AND_UP](https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GESTURE_SWIPE_LEFT_AND_UP)
        pub const GESTURE_SWIPE_LEFT_AND_UP : i32 = 9;

        /// public static final [GESTURE_SWIPE_RIGHT](https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GESTURE_SWIPE_RIGHT)
        pub const GESTURE_SWIPE_RIGHT : i32 = 4;

        /// public static final [GESTURE_SWIPE_RIGHT_AND_DOWN](https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GESTURE_SWIPE_RIGHT_AND_DOWN)
        pub const GESTURE_SWIPE_RIGHT_AND_DOWN : i32 = 12;

        /// public static final [GESTURE_SWIPE_RIGHT_AND_LEFT](https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GESTURE_SWIPE_RIGHT_AND_LEFT)
        pub const GESTURE_SWIPE_RIGHT_AND_LEFT : i32 = 6;

        /// public static final [GESTURE_SWIPE_RIGHT_AND_UP](https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GESTURE_SWIPE_RIGHT_AND_UP)
        pub const GESTURE_SWIPE_RIGHT_AND_UP : i32 = 11;

        /// public static final [GESTURE_SWIPE_UP](https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GESTURE_SWIPE_UP)
        pub const GESTURE_SWIPE_UP : i32 = 1;

        /// public static final [GESTURE_SWIPE_UP_AND_DOWN](https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GESTURE_SWIPE_UP_AND_DOWN)
        pub const GESTURE_SWIPE_UP_AND_DOWN : i32 = 7;

        /// public static final [GESTURE_SWIPE_UP_AND_LEFT](https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GESTURE_SWIPE_UP_AND_LEFT)
        pub const GESTURE_SWIPE_UP_AND_LEFT : i32 = 13;

        /// public static final [GESTURE_SWIPE_UP_AND_RIGHT](https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GESTURE_SWIPE_UP_AND_RIGHT)
        pub const GESTURE_SWIPE_UP_AND_RIGHT : i32 = 14;

        /// public static final [GLOBAL_ACTION_BACK](https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GLOBAL_ACTION_BACK)
        pub const GLOBAL_ACTION_BACK : i32 = 1;

        /// public static final [GLOBAL_ACTION_HOME](https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GLOBAL_ACTION_HOME)
        pub const GLOBAL_ACTION_HOME : i32 = 2;

        /// public static final [GLOBAL_ACTION_LOCK_SCREEN](https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GLOBAL_ACTION_LOCK_SCREEN)
        pub const GLOBAL_ACTION_LOCK_SCREEN : i32 = 8;

        /// public static final [GLOBAL_ACTION_NOTIFICATIONS](https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GLOBAL_ACTION_NOTIFICATIONS)
        pub const GLOBAL_ACTION_NOTIFICATIONS : i32 = 4;

        /// public static final [GLOBAL_ACTION_POWER_DIALOG](https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GLOBAL_ACTION_POWER_DIALOG)
        pub const GLOBAL_ACTION_POWER_DIALOG : i32 = 6;

        /// public static final [GLOBAL_ACTION_QUICK_SETTINGS](https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GLOBAL_ACTION_QUICK_SETTINGS)
        pub const GLOBAL_ACTION_QUICK_SETTINGS : i32 = 5;

        /// public static final [GLOBAL_ACTION_RECENTS](https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GLOBAL_ACTION_RECENTS)
        pub const GLOBAL_ACTION_RECENTS : i32 = 3;

        /// public static final [GLOBAL_ACTION_TAKE_SCREENSHOT](https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GLOBAL_ACTION_TAKE_SCREENSHOT)
        pub const GLOBAL_ACTION_TAKE_SCREENSHOT : i32 = 9;

        /// public static final [GLOBAL_ACTION_TOGGLE_SPLIT_SCREEN](https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#GLOBAL_ACTION_TOGGLE_SPLIT_SCREEN)
        pub const GLOBAL_ACTION_TOGGLE_SPLIT_SCREEN : i32 = 7;

        /// public static final [SERVICE_INTERFACE](https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#SERVICE_INTERFACE)
        pub const SERVICE_INTERFACE : &'static str = "android.accessibilityservice.AccessibilityService";

        /// public static final [SERVICE_META_DATA](https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#SERVICE_META_DATA)
        pub const SERVICE_META_DATA : &'static str = "android.accessibilityservice";

        /// public static final [SHOW_MODE_AUTO](https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#SHOW_MODE_AUTO)
        pub const SHOW_MODE_AUTO : i32 = 0;

        /// public static final [SHOW_MODE_HIDDEN](https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#SHOW_MODE_HIDDEN)
        pub const SHOW_MODE_HIDDEN : i32 = 1;

        /// public static final [SHOW_MODE_IGNORE_HARD_KEYBOARD](https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.html#SHOW_MODE_IGNORE_HARD_KEYBOARD)
        pub const SHOW_MODE_IGNORE_HARD_KEYBOARD : i32 = 2;
    }
}
