// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-accessibilityservice-GestureDescription_StrokeDescription"))]
__jni_bindgen! {
    /// public class [GestureDescription.StrokeDescription](https://developer.android.com/reference/android/accessibilityservice/GestureDescription.StrokeDescription.html)
    ///
    /// Required feature: android-accessibilityservice-GestureDescription_StrokeDescription
    public class GestureDescription_StrokeDescription ("android/accessibilityservice/GestureDescription$StrokeDescription") extends crate::java::lang::Object {

        /// [StrokeDescription](https://developer.android.com/reference/android/accessibilityservice/GestureDescription.StrokeDescription.html#StrokeDescription(android.graphics.Path,%20long,%20long))
        ///
        /// Required features: "android-graphics-Path"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Path")))]
        pub fn new_Path_long_long<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Path>>, arg1: i64, arg2: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::accessibilityservice::GestureDescription_StrokeDescription>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accessibilityservice/GestureDescription$StrokeDescription", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/graphics/Path;JJ)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accessibilityservice/GestureDescription$StrokeDescription\0", "<init>\0", "(Landroid/graphics/Path;JJ)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [StrokeDescription](https://developer.android.com/reference/android/accessibilityservice/GestureDescription.StrokeDescription.html#StrokeDescription(android.graphics.Path,%20long,%20long,%20boolean))
        ///
        /// Required features: "android-graphics-Path"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Path")))]
        pub fn new_Path_long_long_boolean<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Path>>, arg1: i64, arg2: i64, arg3: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::accessibilityservice::GestureDescription_StrokeDescription>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accessibilityservice/GestureDescription$StrokeDescription", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/graphics/Path;JJZ)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accessibilityservice/GestureDescription$StrokeDescription\0", "<init>\0", "(Landroid/graphics/Path;JJZ)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPath](https://developer.android.com/reference/android/accessibilityservice/GestureDescription.StrokeDescription.html#getPath())
        ///
        /// Required features: "android-graphics-Path"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Path")))]
        pub fn getPath<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Path>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accessibilityservice/GestureDescription$StrokeDescription", java.flags == PUBLIC, .name == "getPath", .descriptor == "()Landroid/graphics/Path;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accessibilityservice/GestureDescription$StrokeDescription\0", "getPath\0", "()Landroid/graphics/Path;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getStartTime](https://developer.android.com/reference/android/accessibilityservice/GestureDescription.StrokeDescription.html#getStartTime())
        pub fn getStartTime<'env>(&'env self) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accessibilityservice/GestureDescription$StrokeDescription", java.flags == PUBLIC, .name == "getStartTime", .descriptor == "()J"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accessibilityservice/GestureDescription$StrokeDescription\0", "getStartTime\0", "()J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDuration](https://developer.android.com/reference/android/accessibilityservice/GestureDescription.StrokeDescription.html#getDuration())
        pub fn getDuration<'env>(&'env self) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accessibilityservice/GestureDescription$StrokeDescription", java.flags == PUBLIC, .name == "getDuration", .descriptor == "()J"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accessibilityservice/GestureDescription$StrokeDescription\0", "getDuration\0", "()J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [continueStroke](https://developer.android.com/reference/android/accessibilityservice/GestureDescription.StrokeDescription.html#continueStroke(android.graphics.Path,%20long,%20long,%20boolean))
        ///
        /// Required features: "android-accessibilityservice-GestureDescription_StrokeDescription", "android-graphics-Path"
        #[cfg(any(feature = "all", all(feature = "android-accessibilityservice-GestureDescription_StrokeDescription", feature = "android-graphics-Path")))]
        pub fn continueStroke<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Path>>, arg1: i64, arg2: i64, arg3: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::accessibilityservice::GestureDescription_StrokeDescription>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accessibilityservice/GestureDescription$StrokeDescription", java.flags == PUBLIC, .name == "continueStroke", .descriptor == "(Landroid/graphics/Path;JJZ)Landroid/accessibilityservice/GestureDescription$StrokeDescription;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accessibilityservice/GestureDescription$StrokeDescription\0", "continueStroke\0", "(Landroid/graphics/Path;JJZ)Landroid/accessibilityservice/GestureDescription$StrokeDescription;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [willContinue](https://developer.android.com/reference/android/accessibilityservice/GestureDescription.StrokeDescription.html#willContinue())
        pub fn willContinue<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accessibilityservice/GestureDescription$StrokeDescription", java.flags == PUBLIC, .name == "willContinue", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accessibilityservice/GestureDescription$StrokeDescription\0", "willContinue\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
