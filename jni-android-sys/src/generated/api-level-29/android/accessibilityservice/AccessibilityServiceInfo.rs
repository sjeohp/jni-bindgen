// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-accessibilityservice-AccessibilityServiceInfo"))]
__jni_bindgen! {
    /// public class [AccessibilityServiceInfo](https://developer.android.com/reference/android/accessibilityservice/AccessibilityServiceInfo.html)
    ///
    /// Required feature: android-accessibilityservice-AccessibilityServiceInfo
    public class AccessibilityServiceInfo ("android/accessibilityservice/AccessibilityServiceInfo") extends crate::java::lang::Object, implements crate::android::os::Parcelable {

        /// [AccessibilityServiceInfo](https://developer.android.com/reference/android/accessibilityservice/AccessibilityServiceInfo.html#AccessibilityServiceInfo())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::accessibilityservice::AccessibilityServiceInfo>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accessibilityservice/AccessibilityServiceInfo", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accessibilityservice/AccessibilityServiceInfo\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getId](https://developer.android.com/reference/android/accessibilityservice/AccessibilityServiceInfo.html#getId())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getId<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accessibilityservice/AccessibilityServiceInfo", java.flags == PUBLIC, .name == "getId", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accessibilityservice/AccessibilityServiceInfo\0", "getId\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getResolveInfo](https://developer.android.com/reference/android/accessibilityservice/AccessibilityServiceInfo.html#getResolveInfo())
        ///
        /// Required features: "android-content-pm-ResolveInfo"
        #[cfg(any(feature = "all", all(feature = "android-content-pm-ResolveInfo")))]
        pub fn getResolveInfo<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::pm::ResolveInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accessibilityservice/AccessibilityServiceInfo", java.flags == PUBLIC, .name == "getResolveInfo", .descriptor == "()Landroid/content/pm/ResolveInfo;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accessibilityservice/AccessibilityServiceInfo\0", "getResolveInfo\0", "()Landroid/content/pm/ResolveInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSettingsActivityName](https://developer.android.com/reference/android/accessibilityservice/AccessibilityServiceInfo.html#getSettingsActivityName())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getSettingsActivityName<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accessibilityservice/AccessibilityServiceInfo", java.flags == PUBLIC, .name == "getSettingsActivityName", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accessibilityservice/AccessibilityServiceInfo\0", "getSettingsActivityName\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCanRetrieveWindowContent](https://developer.android.com/reference/android/accessibilityservice/AccessibilityServiceInfo.html#getCanRetrieveWindowContent())
        #[deprecated] pub fn getCanRetrieveWindowContent<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accessibilityservice/AccessibilityServiceInfo", java.flags == PUBLIC, .name == "getCanRetrieveWindowContent", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accessibilityservice/AccessibilityServiceInfo\0", "getCanRetrieveWindowContent\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCapabilities](https://developer.android.com/reference/android/accessibilityservice/AccessibilityServiceInfo.html#getCapabilities())
        pub fn getCapabilities<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accessibilityservice/AccessibilityServiceInfo", java.flags == PUBLIC, .name == "getCapabilities", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accessibilityservice/AccessibilityServiceInfo\0", "getCapabilities\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [loadSummary](https://developer.android.com/reference/android/accessibilityservice/AccessibilityServiceInfo.html#loadSummary(android.content.pm.PackageManager))
        ///
        /// Required features: "android-content-pm-PackageManager", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-content-pm-PackageManager", feature = "java-lang-CharSequence")))]
        pub fn loadSummary<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::pm::PackageManager>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::CharSequence>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accessibilityservice/AccessibilityServiceInfo", java.flags == PUBLIC, .name == "loadSummary", .descriptor == "(Landroid/content/pm/PackageManager;)Ljava/lang/CharSequence;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accessibilityservice/AccessibilityServiceInfo\0", "loadSummary\0", "(Landroid/content/pm/PackageManager;)Ljava/lang/CharSequence;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDescription](https://developer.android.com/reference/android/accessibilityservice/AccessibilityServiceInfo.html#getDescription())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        #[deprecated] pub fn getDescription<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accessibilityservice/AccessibilityServiceInfo", java.flags == PUBLIC, .name == "getDescription", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accessibilityservice/AccessibilityServiceInfo\0", "getDescription\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [loadDescription](https://developer.android.com/reference/android/accessibilityservice/AccessibilityServiceInfo.html#loadDescription(android.content.pm.PackageManager))
        ///
        /// Required features: "android-content-pm-PackageManager", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-pm-PackageManager", feature = "java-lang-String")))]
        pub fn loadDescription<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::pm::PackageManager>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accessibilityservice/AccessibilityServiceInfo", java.flags == PUBLIC, .name == "loadDescription", .descriptor == "(Landroid/content/pm/PackageManager;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accessibilityservice/AccessibilityServiceInfo\0", "loadDescription\0", "(Landroid/content/pm/PackageManager;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setNonInteractiveUiTimeoutMillis](https://developer.android.com/reference/android/accessibilityservice/AccessibilityServiceInfo.html#setNonInteractiveUiTimeoutMillis(int))
        pub fn setNonInteractiveUiTimeoutMillis<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accessibilityservice/AccessibilityServiceInfo", java.flags == PUBLIC, .name == "setNonInteractiveUiTimeoutMillis", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accessibilityservice/AccessibilityServiceInfo\0", "setNonInteractiveUiTimeoutMillis\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNonInteractiveUiTimeoutMillis](https://developer.android.com/reference/android/accessibilityservice/AccessibilityServiceInfo.html#getNonInteractiveUiTimeoutMillis())
        pub fn getNonInteractiveUiTimeoutMillis<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accessibilityservice/AccessibilityServiceInfo", java.flags == PUBLIC, .name == "getNonInteractiveUiTimeoutMillis", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accessibilityservice/AccessibilityServiceInfo\0", "getNonInteractiveUiTimeoutMillis\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setInteractiveUiTimeoutMillis](https://developer.android.com/reference/android/accessibilityservice/AccessibilityServiceInfo.html#setInteractiveUiTimeoutMillis(int))
        pub fn setInteractiveUiTimeoutMillis<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accessibilityservice/AccessibilityServiceInfo", java.flags == PUBLIC, .name == "setInteractiveUiTimeoutMillis", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accessibilityservice/AccessibilityServiceInfo\0", "setInteractiveUiTimeoutMillis\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInteractiveUiTimeoutMillis](https://developer.android.com/reference/android/accessibilityservice/AccessibilityServiceInfo.html#getInteractiveUiTimeoutMillis())
        pub fn getInteractiveUiTimeoutMillis<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accessibilityservice/AccessibilityServiceInfo", java.flags == PUBLIC, .name == "getInteractiveUiTimeoutMillis", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accessibilityservice/AccessibilityServiceInfo\0", "getInteractiveUiTimeoutMillis\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [describeContents](https://developer.android.com/reference/android/accessibilityservice/AccessibilityServiceInfo.html#describeContents())
        pub fn describeContents<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accessibilityservice/AccessibilityServiceInfo", java.flags == PUBLIC, .name == "describeContents", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accessibilityservice/AccessibilityServiceInfo\0", "describeContents\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [writeToParcel](https://developer.android.com/reference/android/accessibilityservice/AccessibilityServiceInfo.html#writeToParcel(android.os.Parcel,%20int))
        ///
        /// Required features: "android-os-Parcel"
        #[cfg(any(feature = "all", all(feature = "android-os-Parcel")))]
        pub fn writeToParcel<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Parcel>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accessibilityservice/AccessibilityServiceInfo", java.flags == PUBLIC, .name == "writeToParcel", .descriptor == "(Landroid/os/Parcel;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accessibilityservice/AccessibilityServiceInfo\0", "writeToParcel\0", "(Landroid/os/Parcel;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hashCode](https://developer.android.com/reference/android/accessibilityservice/AccessibilityServiceInfo.html#hashCode())
        pub fn hashCode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accessibilityservice/AccessibilityServiceInfo", java.flags == PUBLIC, .name == "hashCode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accessibilityservice/AccessibilityServiceInfo\0", "hashCode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [equals](https://developer.android.com/reference/android/accessibilityservice/AccessibilityServiceInfo.html#equals(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn equals<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accessibilityservice/AccessibilityServiceInfo", java.flags == PUBLIC, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accessibilityservice/AccessibilityServiceInfo\0", "equals\0", "(Ljava/lang/Object;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/android/accessibilityservice/AccessibilityServiceInfo.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accessibilityservice/AccessibilityServiceInfo", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accessibilityservice/AccessibilityServiceInfo\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [feedbackTypeToString](https://developer.android.com/reference/android/accessibilityservice/AccessibilityServiceInfo.html#feedbackTypeToString(int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn feedbackTypeToString<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accessibilityservice/AccessibilityServiceInfo", java.flags == PUBLIC | STATIC, .name == "feedbackTypeToString", .descriptor == "(I)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/accessibilityservice/AccessibilityServiceInfo\0", "feedbackTypeToString\0", "(I)Ljava/lang/String;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [flagToString](https://developer.android.com/reference/android/accessibilityservice/AccessibilityServiceInfo.html#flagToString(int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn flagToString<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accessibilityservice/AccessibilityServiceInfo", java.flags == PUBLIC | STATIC, .name == "flagToString", .descriptor == "(I)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/accessibilityservice/AccessibilityServiceInfo\0", "flagToString\0", "(I)Ljava/lang/String;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [capabilityToString](https://developer.android.com/reference/android/accessibilityservice/AccessibilityServiceInfo.html#capabilityToString(int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn capabilityToString<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accessibilityservice/AccessibilityServiceInfo", java.flags == PUBLIC | STATIC, .name == "capabilityToString", .descriptor == "(I)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/accessibilityservice/AccessibilityServiceInfo\0", "capabilityToString\0", "(I)Ljava/lang/String;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [CAPABILITY_CAN_CONTROL_MAGNIFICATION](https://developer.android.com/reference/android/accessibilityservice/AccessibilityServiceInfo.html#CAPABILITY_CAN_CONTROL_MAGNIFICATION)
        pub const CAPABILITY_CAN_CONTROL_MAGNIFICATION : i32 = 16;

        /// public static final [CAPABILITY_CAN_PERFORM_GESTURES](https://developer.android.com/reference/android/accessibilityservice/AccessibilityServiceInfo.html#CAPABILITY_CAN_PERFORM_GESTURES)
        pub const CAPABILITY_CAN_PERFORM_GESTURES : i32 = 32;

        /// public static final [CAPABILITY_CAN_REQUEST_ENHANCED_WEB_ACCESSIBILITY](https://developer.android.com/reference/android/accessibilityservice/AccessibilityServiceInfo.html#CAPABILITY_CAN_REQUEST_ENHANCED_WEB_ACCESSIBILITY)
        #[deprecated] pub const CAPABILITY_CAN_REQUEST_ENHANCED_WEB_ACCESSIBILITY : i32 = 4;

        /// public static final [CAPABILITY_CAN_REQUEST_FILTER_KEY_EVENTS](https://developer.android.com/reference/android/accessibilityservice/AccessibilityServiceInfo.html#CAPABILITY_CAN_REQUEST_FILTER_KEY_EVENTS)
        pub const CAPABILITY_CAN_REQUEST_FILTER_KEY_EVENTS : i32 = 8;

        /// public static final [CAPABILITY_CAN_REQUEST_FINGERPRINT_GESTURES](https://developer.android.com/reference/android/accessibilityservice/AccessibilityServiceInfo.html#CAPABILITY_CAN_REQUEST_FINGERPRINT_GESTURES)
        pub const CAPABILITY_CAN_REQUEST_FINGERPRINT_GESTURES : i32 = 64;

        /// public static final [CAPABILITY_CAN_REQUEST_TOUCH_EXPLORATION](https://developer.android.com/reference/android/accessibilityservice/AccessibilityServiceInfo.html#CAPABILITY_CAN_REQUEST_TOUCH_EXPLORATION)
        pub const CAPABILITY_CAN_REQUEST_TOUCH_EXPLORATION : i32 = 2;

        /// public static final [CAPABILITY_CAN_RETRIEVE_WINDOW_CONTENT](https://developer.android.com/reference/android/accessibilityservice/AccessibilityServiceInfo.html#CAPABILITY_CAN_RETRIEVE_WINDOW_CONTENT)
        pub const CAPABILITY_CAN_RETRIEVE_WINDOW_CONTENT : i32 = 1;

        /// **get** public static final [CREATOR](https://developer.android.com/reference/android/accessibilityservice/AccessibilityServiceInfo.html#CREATOR)
        ///
        /// Required feature: android-os-Parcelable_Creator
        #[cfg(any(feature = "all", feature = "android-os-Parcelable_Creator"))]
        pub fn CREATOR<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Parcelable_Creator>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/accessibilityservice/AccessibilityServiceInfo\0", "CREATOR\0", "Landroid/os/Parcelable$Creator;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// public static final [DEFAULT](https://developer.android.com/reference/android/accessibilityservice/AccessibilityServiceInfo.html#DEFAULT)
        pub const DEFAULT : i32 = 1;

        /// public static final [FEEDBACK_ALL_MASK](https://developer.android.com/reference/android/accessibilityservice/AccessibilityServiceInfo.html#FEEDBACK_ALL_MASK)
        pub const FEEDBACK_ALL_MASK : i32 = -1;

        /// public static final [FEEDBACK_AUDIBLE](https://developer.android.com/reference/android/accessibilityservice/AccessibilityServiceInfo.html#FEEDBACK_AUDIBLE)
        pub const FEEDBACK_AUDIBLE : i32 = 4;

        /// public static final [FEEDBACK_BRAILLE](https://developer.android.com/reference/android/accessibilityservice/AccessibilityServiceInfo.html#FEEDBACK_BRAILLE)
        pub const FEEDBACK_BRAILLE : i32 = 32;

        /// public static final [FEEDBACK_GENERIC](https://developer.android.com/reference/android/accessibilityservice/AccessibilityServiceInfo.html#FEEDBACK_GENERIC)
        pub const FEEDBACK_GENERIC : i32 = 16;

        /// public static final [FEEDBACK_HAPTIC](https://developer.android.com/reference/android/accessibilityservice/AccessibilityServiceInfo.html#FEEDBACK_HAPTIC)
        pub const FEEDBACK_HAPTIC : i32 = 2;

        /// public static final [FEEDBACK_SPOKEN](https://developer.android.com/reference/android/accessibilityservice/AccessibilityServiceInfo.html#FEEDBACK_SPOKEN)
        pub const FEEDBACK_SPOKEN : i32 = 1;

        /// public static final [FEEDBACK_VISUAL](https://developer.android.com/reference/android/accessibilityservice/AccessibilityServiceInfo.html#FEEDBACK_VISUAL)
        pub const FEEDBACK_VISUAL : i32 = 8;

        /// public static final [FLAG_ENABLE_ACCESSIBILITY_VOLUME](https://developer.android.com/reference/android/accessibilityservice/AccessibilityServiceInfo.html#FLAG_ENABLE_ACCESSIBILITY_VOLUME)
        pub const FLAG_ENABLE_ACCESSIBILITY_VOLUME : i32 = 128;

        /// public static final [FLAG_INCLUDE_NOT_IMPORTANT_VIEWS](https://developer.android.com/reference/android/accessibilityservice/AccessibilityServiceInfo.html#FLAG_INCLUDE_NOT_IMPORTANT_VIEWS)
        pub const FLAG_INCLUDE_NOT_IMPORTANT_VIEWS : i32 = 2;

        /// public static final [FLAG_REPORT_VIEW_IDS](https://developer.android.com/reference/android/accessibilityservice/AccessibilityServiceInfo.html#FLAG_REPORT_VIEW_IDS)
        pub const FLAG_REPORT_VIEW_IDS : i32 = 16;

        /// public static final [FLAG_REQUEST_ACCESSIBILITY_BUTTON](https://developer.android.com/reference/android/accessibilityservice/AccessibilityServiceInfo.html#FLAG_REQUEST_ACCESSIBILITY_BUTTON)
        pub const FLAG_REQUEST_ACCESSIBILITY_BUTTON : i32 = 256;

        /// public static final [FLAG_REQUEST_ENHANCED_WEB_ACCESSIBILITY](https://developer.android.com/reference/android/accessibilityservice/AccessibilityServiceInfo.html#FLAG_REQUEST_ENHANCED_WEB_ACCESSIBILITY)
        #[deprecated] pub const FLAG_REQUEST_ENHANCED_WEB_ACCESSIBILITY : i32 = 8;

        /// public static final [FLAG_REQUEST_FILTER_KEY_EVENTS](https://developer.android.com/reference/android/accessibilityservice/AccessibilityServiceInfo.html#FLAG_REQUEST_FILTER_KEY_EVENTS)
        pub const FLAG_REQUEST_FILTER_KEY_EVENTS : i32 = 32;

        /// public static final [FLAG_REQUEST_FINGERPRINT_GESTURES](https://developer.android.com/reference/android/accessibilityservice/AccessibilityServiceInfo.html#FLAG_REQUEST_FINGERPRINT_GESTURES)
        pub const FLAG_REQUEST_FINGERPRINT_GESTURES : i32 = 512;

        /// public static final [FLAG_REQUEST_SHORTCUT_WARNING_DIALOG_SPOKEN_FEEDBACK](https://developer.android.com/reference/android/accessibilityservice/AccessibilityServiceInfo.html#FLAG_REQUEST_SHORTCUT_WARNING_DIALOG_SPOKEN_FEEDBACK)
        pub const FLAG_REQUEST_SHORTCUT_WARNING_DIALOG_SPOKEN_FEEDBACK : i32 = 1024;

        /// public static final [FLAG_REQUEST_TOUCH_EXPLORATION_MODE](https://developer.android.com/reference/android/accessibilityservice/AccessibilityServiceInfo.html#FLAG_REQUEST_TOUCH_EXPLORATION_MODE)
        pub const FLAG_REQUEST_TOUCH_EXPLORATION_MODE : i32 = 4;

        /// public static final [FLAG_RETRIEVE_INTERACTIVE_WINDOWS](https://developer.android.com/reference/android/accessibilityservice/AccessibilityServiceInfo.html#FLAG_RETRIEVE_INTERACTIVE_WINDOWS)
        pub const FLAG_RETRIEVE_INTERACTIVE_WINDOWS : i32 = 64;

        /// **get** public [eventTypes](https://developer.android.com/reference/android/accessibilityservice/AccessibilityServiceInfo.html#eventTypes)
        pub fn eventTypes<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/accessibilityservice/AccessibilityServiceInfo\0", "eventTypes\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [eventTypes](https://developer.android.com/reference/android/accessibilityservice/AccessibilityServiceInfo.html#eventTypes)
        pub fn set_eventTypes<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/accessibilityservice/AccessibilityServiceInfo\0", "eventTypes\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [feedbackType](https://developer.android.com/reference/android/accessibilityservice/AccessibilityServiceInfo.html#feedbackType)
        pub fn feedbackType<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/accessibilityservice/AccessibilityServiceInfo\0", "feedbackType\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [feedbackType](https://developer.android.com/reference/android/accessibilityservice/AccessibilityServiceInfo.html#feedbackType)
        pub fn set_feedbackType<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/accessibilityservice/AccessibilityServiceInfo\0", "feedbackType\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [flags](https://developer.android.com/reference/android/accessibilityservice/AccessibilityServiceInfo.html#flags)
        pub fn flags<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/accessibilityservice/AccessibilityServiceInfo\0", "flags\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [flags](https://developer.android.com/reference/android/accessibilityservice/AccessibilityServiceInfo.html#flags)
        pub fn set_flags<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/accessibilityservice/AccessibilityServiceInfo\0", "flags\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [notificationTimeout](https://developer.android.com/reference/android/accessibilityservice/AccessibilityServiceInfo.html#notificationTimeout)
        pub fn notificationTimeout<'env>(&'env self) -> i64 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/accessibilityservice/AccessibilityServiceInfo\0", "notificationTimeout\0", "J\0");
                env.get_long_field(class, field)
            }
        }

        /// **set** public [notificationTimeout](https://developer.android.com/reference/android/accessibilityservice/AccessibilityServiceInfo.html#notificationTimeout)
        pub fn set_notificationTimeout<'env>(&'env self, value: i64) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/accessibilityservice/AccessibilityServiceInfo\0", "notificationTimeout\0", "J\0");
                env.set_long_field(class, field, value)
            }
        }

        /// **get** public [packageNames](https://developer.android.com/reference/android/accessibilityservice/AccessibilityServiceInfo.html#packageNames)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn packageNames<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/accessibilityservice/AccessibilityServiceInfo\0", "packageNames\0", "[Ljava/lang/String;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [packageNames](https://developer.android.com/reference/android/accessibilityservice/AccessibilityServiceInfo.html#packageNames)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn set_packageNames<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/accessibilityservice/AccessibilityServiceInfo\0", "packageNames\0", "[Ljava/lang/String;\0");
                env.set_object_field(class, field, value)
            }
        }
    }
}
