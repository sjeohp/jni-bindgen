// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-accessibilityservice-AccessibilityService_MagnificationController"))]
__jni_bindgen! {
    /// public final class [AccessibilityService.MagnificationController](https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.MagnificationController.html)
    ///
    /// Required feature: android-accessibilityservice-AccessibilityService_MagnificationController
    public final class AccessibilityService_MagnificationController ("android/accessibilityservice/AccessibilityService$MagnificationController") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [MagnificationController](https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.MagnificationController.html#MagnificationController(android.accessibilityservice.AccessibilityService,%20java.lang.Object,%20int))
        // ///
        // /// Required features: "android-accessibilityservice-AccessibilityService", "java-lang-Object"
        // #[cfg(any(feature = "all", all(feature = "android-accessibilityservice-AccessibilityService", feature = "java-lang-Object")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accessibilityservice::AccessibilityService>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>, arg2: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::accessibilityservice::AccessibilityService_MagnificationController>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/accessibilityservice/AccessibilityService$MagnificationController", java.flags == (empty), .name == "<init>", .descriptor == "(Landroid/accessibilityservice/AccessibilityService;Ljava/lang/Object;I)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accessibilityservice/AccessibilityService$MagnificationController\0", "<init>\0", "(Landroid/accessibilityservice/AccessibilityService;Ljava/lang/Object;I)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [addListener](https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.MagnificationController.html#addListener(android.accessibilityservice.AccessibilityService.MagnificationController.OnMagnificationChangedListener))
        ///
        /// Required features: "android-accessibilityservice-AccessibilityService_MagnificationController_OnMagnificationChangedListener"
        #[cfg(any(feature = "all", all(feature = "android-accessibilityservice-AccessibilityService_MagnificationController_OnMagnificationChangedListener")))]
        pub fn addListener_OnMagnificationChangedListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accessibilityservice::AccessibilityService_MagnificationController_OnMagnificationChangedListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accessibilityservice/AccessibilityService$MagnificationController", java.flags == PUBLIC, .name == "addListener", .descriptor == "(Landroid/accessibilityservice/AccessibilityService$MagnificationController$OnMagnificationChangedListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accessibilityservice/AccessibilityService$MagnificationController\0", "addListener\0", "(Landroid/accessibilityservice/AccessibilityService$MagnificationController$OnMagnificationChangedListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addListener](https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.MagnificationController.html#addListener(android.accessibilityservice.AccessibilityService.MagnificationController.OnMagnificationChangedListener,%20android.os.Handler))
        ///
        /// Required features: "android-accessibilityservice-AccessibilityService_MagnificationController_OnMagnificationChangedListener", "android-os-Handler"
        #[cfg(any(feature = "all", all(feature = "android-accessibilityservice-AccessibilityService_MagnificationController_OnMagnificationChangedListener", feature = "android-os-Handler")))]
        pub fn addListener_OnMagnificationChangedListener_Handler<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accessibilityservice::AccessibilityService_MagnificationController_OnMagnificationChangedListener>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accessibilityservice/AccessibilityService$MagnificationController", java.flags == PUBLIC, .name == "addListener", .descriptor == "(Landroid/accessibilityservice/AccessibilityService$MagnificationController$OnMagnificationChangedListener;Landroid/os/Handler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accessibilityservice/AccessibilityService$MagnificationController\0", "addListener\0", "(Landroid/accessibilityservice/AccessibilityService$MagnificationController$OnMagnificationChangedListener;Landroid/os/Handler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeListener](https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.MagnificationController.html#removeListener(android.accessibilityservice.AccessibilityService.MagnificationController.OnMagnificationChangedListener))
        ///
        /// Required features: "android-accessibilityservice-AccessibilityService_MagnificationController_OnMagnificationChangedListener"
        #[cfg(any(feature = "all", all(feature = "android-accessibilityservice-AccessibilityService_MagnificationController_OnMagnificationChangedListener")))]
        pub fn removeListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accessibilityservice::AccessibilityService_MagnificationController_OnMagnificationChangedListener>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accessibilityservice/AccessibilityService$MagnificationController", java.flags == PUBLIC, .name == "removeListener", .descriptor == "(Landroid/accessibilityservice/AccessibilityService$MagnificationController$OnMagnificationChangedListener;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accessibilityservice/AccessibilityService$MagnificationController\0", "removeListener\0", "(Landroid/accessibilityservice/AccessibilityService$MagnificationController$OnMagnificationChangedListener;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getScale](https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.MagnificationController.html#getScale())
        pub fn getScale<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accessibilityservice/AccessibilityService$MagnificationController", java.flags == PUBLIC, .name == "getScale", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accessibilityservice/AccessibilityService$MagnificationController\0", "getScale\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCenterX](https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.MagnificationController.html#getCenterX())
        pub fn getCenterX<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accessibilityservice/AccessibilityService$MagnificationController", java.flags == PUBLIC, .name == "getCenterX", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accessibilityservice/AccessibilityService$MagnificationController\0", "getCenterX\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCenterY](https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.MagnificationController.html#getCenterY())
        pub fn getCenterY<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accessibilityservice/AccessibilityService$MagnificationController", java.flags == PUBLIC, .name == "getCenterY", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accessibilityservice/AccessibilityService$MagnificationController\0", "getCenterY\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMagnificationRegion](https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.MagnificationController.html#getMagnificationRegion())
        ///
        /// Required features: "android-graphics-Region"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Region")))]
        pub fn getMagnificationRegion<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Region>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accessibilityservice/AccessibilityService$MagnificationController", java.flags == PUBLIC, .name == "getMagnificationRegion", .descriptor == "()Landroid/graphics/Region;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accessibilityservice/AccessibilityService$MagnificationController\0", "getMagnificationRegion\0", "()Landroid/graphics/Region;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [reset](https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.MagnificationController.html#reset(boolean))
        pub fn reset<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accessibilityservice/AccessibilityService$MagnificationController", java.flags == PUBLIC, .name == "reset", .descriptor == "(Z)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accessibilityservice/AccessibilityService$MagnificationController\0", "reset\0", "(Z)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setScale](https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.MagnificationController.html#setScale(float,%20boolean))
        pub fn setScale<'env>(&'env self, arg0: f32, arg1: bool) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accessibilityservice/AccessibilityService$MagnificationController", java.flags == PUBLIC, .name == "setScale", .descriptor == "(FZ)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accessibilityservice/AccessibilityService$MagnificationController\0", "setScale\0", "(FZ)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setCenter](https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.MagnificationController.html#setCenter(float,%20float,%20boolean))
        pub fn setCenter<'env>(&'env self, arg0: f32, arg1: f32, arg2: bool) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accessibilityservice/AccessibilityService$MagnificationController", java.flags == PUBLIC, .name == "setCenter", .descriptor == "(FFZ)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accessibilityservice/AccessibilityService$MagnificationController\0", "setCenter\0", "(FFZ)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
