// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-accessibilityservice-FingerprintGestureController"))]
__jni_bindgen! {
    /// public final class [FingerprintGestureController](https://developer.android.com/reference/android/accessibilityservice/FingerprintGestureController.html)
    ///
    /// Required feature: android-accessibilityservice-FingerprintGestureController
    public final class FingerprintGestureController ("android/accessibilityservice/FingerprintGestureController") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [FingerprintGestureController](https://developer.android.com/reference/android/accessibilityservice/FingerprintGestureController.html#FingerprintGestureController())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::accessibilityservice::FingerprintGestureController>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/accessibilityservice/FingerprintGestureController", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accessibilityservice/FingerprintGestureController\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [isGestureDetectionAvailable](https://developer.android.com/reference/android/accessibilityservice/FingerprintGestureController.html#isGestureDetectionAvailable())
        pub fn isGestureDetectionAvailable<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accessibilityservice/FingerprintGestureController", java.flags == PUBLIC, .name == "isGestureDetectionAvailable", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accessibilityservice/FingerprintGestureController\0", "isGestureDetectionAvailable\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [registerFingerprintGestureCallback](https://developer.android.com/reference/android/accessibilityservice/FingerprintGestureController.html#registerFingerprintGestureCallback(android.accessibilityservice.FingerprintGestureController.FingerprintGestureCallback,%20android.os.Handler))
        ///
        /// Required features: "android-accessibilityservice-FingerprintGestureController_FingerprintGestureCallback", "android-os-Handler"
        #[cfg(any(feature = "all", all(feature = "android-accessibilityservice-FingerprintGestureController_FingerprintGestureCallback", feature = "android-os-Handler")))]
        pub fn registerFingerprintGestureCallback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accessibilityservice::FingerprintGestureController_FingerprintGestureCallback>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accessibilityservice/FingerprintGestureController", java.flags == PUBLIC, .name == "registerFingerprintGestureCallback", .descriptor == "(Landroid/accessibilityservice/FingerprintGestureController$FingerprintGestureCallback;Landroid/os/Handler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accessibilityservice/FingerprintGestureController\0", "registerFingerprintGestureCallback\0", "(Landroid/accessibilityservice/FingerprintGestureController$FingerprintGestureCallback;Landroid/os/Handler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unregisterFingerprintGestureCallback](https://developer.android.com/reference/android/accessibilityservice/FingerprintGestureController.html#unregisterFingerprintGestureCallback(android.accessibilityservice.FingerprintGestureController.FingerprintGestureCallback))
        ///
        /// Required features: "android-accessibilityservice-FingerprintGestureController_FingerprintGestureCallback"
        #[cfg(any(feature = "all", all(feature = "android-accessibilityservice-FingerprintGestureController_FingerprintGestureCallback")))]
        pub fn unregisterFingerprintGestureCallback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accessibilityservice::FingerprintGestureController_FingerprintGestureCallback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accessibilityservice/FingerprintGestureController", java.flags == PUBLIC, .name == "unregisterFingerprintGestureCallback", .descriptor == "(Landroid/accessibilityservice/FingerprintGestureController$FingerprintGestureCallback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accessibilityservice/FingerprintGestureController\0", "unregisterFingerprintGestureCallback\0", "(Landroid/accessibilityservice/FingerprintGestureController$FingerprintGestureCallback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [FINGERPRINT_GESTURE_SWIPE_DOWN](https://developer.android.com/reference/android/accessibilityservice/FingerprintGestureController.html#FINGERPRINT_GESTURE_SWIPE_DOWN)
        pub const FINGERPRINT_GESTURE_SWIPE_DOWN : i32 = 8;

        /// public static final [FINGERPRINT_GESTURE_SWIPE_LEFT](https://developer.android.com/reference/android/accessibilityservice/FingerprintGestureController.html#FINGERPRINT_GESTURE_SWIPE_LEFT)
        pub const FINGERPRINT_GESTURE_SWIPE_LEFT : i32 = 2;

        /// public static final [FINGERPRINT_GESTURE_SWIPE_RIGHT](https://developer.android.com/reference/android/accessibilityservice/FingerprintGestureController.html#FINGERPRINT_GESTURE_SWIPE_RIGHT)
        pub const FINGERPRINT_GESTURE_SWIPE_RIGHT : i32 = 1;

        /// public static final [FINGERPRINT_GESTURE_SWIPE_UP](https://developer.android.com/reference/android/accessibilityservice/FingerprintGestureController.html#FINGERPRINT_GESTURE_SWIPE_UP)
        pub const FINGERPRINT_GESTURE_SWIPE_UP : i32 = 4;
    }
}
