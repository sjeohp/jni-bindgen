// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-hardware-biometrics-BiometricPrompt_Builder"))]
__jni_bindgen! {
    /// public class [BiometricPrompt.Builder](https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.Builder.html)
    ///
    /// Required feature: android-hardware-biometrics-BiometricPrompt_Builder
    public class BiometricPrompt_Builder ("android/hardware/biometrics/BiometricPrompt$Builder") extends crate::java::lang::Object {

        /// [Builder](https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.Builder.html#Builder(android.content.Context))
        ///
        /// Required features: "android-content-Context"
        #[cfg(any(feature = "all", all(feature = "android-content-Context")))]
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::hardware::biometrics::BiometricPrompt_Builder>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/biometrics/BiometricPrompt$Builder", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/content/Context;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/biometrics/BiometricPrompt$Builder\0", "<init>\0", "(Landroid/content/Context;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTitle](https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.Builder.html#setTitle(java.lang.CharSequence))
        ///
        /// Required features: "android-hardware-biometrics-BiometricPrompt_Builder", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-hardware-biometrics-BiometricPrompt_Builder", feature = "java-lang-CharSequence")))]
        pub fn setTitle<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::hardware::biometrics::BiometricPrompt_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/biometrics/BiometricPrompt$Builder", java.flags == PUBLIC, .name == "setTitle", .descriptor == "(Ljava/lang/CharSequence;)Landroid/hardware/biometrics/BiometricPrompt$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/biometrics/BiometricPrompt$Builder\0", "setTitle\0", "(Ljava/lang/CharSequence;)Landroid/hardware/biometrics/BiometricPrompt$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setSubtitle](https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.Builder.html#setSubtitle(java.lang.CharSequence))
        ///
        /// Required features: "android-hardware-biometrics-BiometricPrompt_Builder", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-hardware-biometrics-BiometricPrompt_Builder", feature = "java-lang-CharSequence")))]
        pub fn setSubtitle<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::hardware::biometrics::BiometricPrompt_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/biometrics/BiometricPrompt$Builder", java.flags == PUBLIC, .name == "setSubtitle", .descriptor == "(Ljava/lang/CharSequence;)Landroid/hardware/biometrics/BiometricPrompt$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/biometrics/BiometricPrompt$Builder\0", "setSubtitle\0", "(Ljava/lang/CharSequence;)Landroid/hardware/biometrics/BiometricPrompt$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDescription](https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.Builder.html#setDescription(java.lang.CharSequence))
        ///
        /// Required features: "android-hardware-biometrics-BiometricPrompt_Builder", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-hardware-biometrics-BiometricPrompt_Builder", feature = "java-lang-CharSequence")))]
        pub fn setDescription<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::hardware::biometrics::BiometricPrompt_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/biometrics/BiometricPrompt$Builder", java.flags == PUBLIC, .name == "setDescription", .descriptor == "(Ljava/lang/CharSequence;)Landroid/hardware/biometrics/BiometricPrompt$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/biometrics/BiometricPrompt$Builder\0", "setDescription\0", "(Ljava/lang/CharSequence;)Landroid/hardware/biometrics/BiometricPrompt$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setNegativeButton](https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.Builder.html#setNegativeButton(java.lang.CharSequence,%20java.util.concurrent.Executor,%20android.content.DialogInterface.OnClickListener))
        ///
        /// Required features: "android-content-DialogInterface_OnClickListener", "android-hardware-biometrics-BiometricPrompt_Builder", "java-lang-CharSequence", "java-util-concurrent-Executor"
        #[cfg(any(feature = "all", all(feature = "android-content-DialogInterface_OnClickListener", feature = "android-hardware-biometrics-BiometricPrompt_Builder", feature = "java-lang-CharSequence", feature = "java-util-concurrent-Executor")))]
        pub fn setNegativeButton<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::DialogInterface_OnClickListener>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::hardware::biometrics::BiometricPrompt_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/biometrics/BiometricPrompt$Builder", java.flags == PUBLIC, .name == "setNegativeButton", .descriptor == "(Ljava/lang/CharSequence;Ljava/util/concurrent/Executor;Landroid/content/DialogInterface$OnClickListener;)Landroid/hardware/biometrics/BiometricPrompt$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/biometrics/BiometricPrompt$Builder\0", "setNegativeButton\0", "(Ljava/lang/CharSequence;Ljava/util/concurrent/Executor;Landroid/content/DialogInterface$OnClickListener;)Landroid/hardware/biometrics/BiometricPrompt$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setConfirmationRequired](https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.Builder.html#setConfirmationRequired(boolean))
        ///
        /// Required features: "android-hardware-biometrics-BiometricPrompt_Builder"
        #[cfg(any(feature = "all", all(feature = "android-hardware-biometrics-BiometricPrompt_Builder")))]
        pub fn setConfirmationRequired<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::hardware::biometrics::BiometricPrompt_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/biometrics/BiometricPrompt$Builder", java.flags == PUBLIC, .name == "setConfirmationRequired", .descriptor == "(Z)Landroid/hardware/biometrics/BiometricPrompt$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/biometrics/BiometricPrompt$Builder\0", "setConfirmationRequired\0", "(Z)Landroid/hardware/biometrics/BiometricPrompt$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDeviceCredentialAllowed](https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.Builder.html#setDeviceCredentialAllowed(boolean))
        ///
        /// Required features: "android-hardware-biometrics-BiometricPrompt_Builder"
        #[cfg(any(feature = "all", all(feature = "android-hardware-biometrics-BiometricPrompt_Builder")))]
        pub fn setDeviceCredentialAllowed<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::hardware::biometrics::BiometricPrompt_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/biometrics/BiometricPrompt$Builder", java.flags == PUBLIC, .name == "setDeviceCredentialAllowed", .descriptor == "(Z)Landroid/hardware/biometrics/BiometricPrompt$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/biometrics/BiometricPrompt$Builder\0", "setDeviceCredentialAllowed\0", "(Z)Landroid/hardware/biometrics/BiometricPrompt$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [build](https://developer.android.com/reference/android/hardware/biometrics/BiometricPrompt.Builder.html#build())
        ///
        /// Required features: "android-hardware-biometrics-BiometricPrompt"
        #[cfg(any(feature = "all", all(feature = "android-hardware-biometrics-BiometricPrompt")))]
        pub fn build<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::hardware::biometrics::BiometricPrompt>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/biometrics/BiometricPrompt$Builder", java.flags == PUBLIC, .name == "build", .descriptor == "()Landroid/hardware/biometrics/BiometricPrompt;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/biometrics/BiometricPrompt$Builder\0", "build\0", "()Landroid/hardware/biometrics/BiometricPrompt;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
