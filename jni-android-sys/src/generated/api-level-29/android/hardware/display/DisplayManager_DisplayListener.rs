// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-hardware-display-DisplayManager_DisplayListener"))]
__jni_bindgen! {
    /// public interface [DisplayManager.DisplayListener](https://developer.android.com/reference/android/hardware/display/DisplayManager.DisplayListener.html)
    ///
    /// Required feature: android-hardware-display-DisplayManager_DisplayListener
    public interface DisplayManager_DisplayListener ("android/hardware/display/DisplayManager$DisplayListener") extends crate::java::lang::Object {

        /// [onDisplayAdded](https://developer.android.com/reference/android/hardware/display/DisplayManager.DisplayListener.html#onDisplayAdded(int))
        pub fn onDisplayAdded<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/display/DisplayManager$DisplayListener", java.flags == PUBLIC | ABSTRACT, .name == "onDisplayAdded", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/display/DisplayManager$DisplayListener\0", "onDisplayAdded\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onDisplayRemoved](https://developer.android.com/reference/android/hardware/display/DisplayManager.DisplayListener.html#onDisplayRemoved(int))
        pub fn onDisplayRemoved<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/display/DisplayManager$DisplayListener", java.flags == PUBLIC | ABSTRACT, .name == "onDisplayRemoved", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/display/DisplayManager$DisplayListener\0", "onDisplayRemoved\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onDisplayChanged](https://developer.android.com/reference/android/hardware/display/DisplayManager.DisplayListener.html#onDisplayChanged(int))
        pub fn onDisplayChanged<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/display/DisplayManager$DisplayListener", java.flags == PUBLIC | ABSTRACT, .name == "onDisplayChanged", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/display/DisplayManager$DisplayListener\0", "onDisplayChanged\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
