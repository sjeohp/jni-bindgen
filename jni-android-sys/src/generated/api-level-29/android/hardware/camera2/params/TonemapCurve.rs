// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-hardware-camera2-params-TonemapCurve"))]
__jni_bindgen! {
    /// public final class [TonemapCurve](https://developer.android.com/reference/android/hardware/camera2/params/TonemapCurve.html)
    ///
    /// Required feature: android-hardware-camera2-params-TonemapCurve
    public final class TonemapCurve ("android/hardware/camera2/params/TonemapCurve") extends crate::java::lang::Object {

        /// [TonemapCurve](https://developer.android.com/reference/android/hardware/camera2/params/TonemapCurve.html#TonemapCurve(float%5B%5D,%20float%5B%5D,%20float%5B%5D))
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::hardware::camera2::params::TonemapCurve>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/camera2/params/TonemapCurve", java.flags == PUBLIC, .name == "<init>", .descriptor == "([F[F[F)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/params/TonemapCurve\0", "<init>\0", "([F[F[F)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPointCount](https://developer.android.com/reference/android/hardware/camera2/params/TonemapCurve.html#getPointCount(int))
        pub fn getPointCount<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/camera2/params/TonemapCurve", java.flags == PUBLIC, .name == "getPointCount", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/params/TonemapCurve\0", "getPointCount\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPoint](https://developer.android.com/reference/android/hardware/camera2/params/TonemapCurve.html#getPoint(int,%20int))
        ///
        /// Required features: "android-graphics-PointF"
        #[cfg(any(feature = "all", all(feature = "android-graphics-PointF")))]
        pub fn getPoint<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::PointF>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/camera2/params/TonemapCurve", java.flags == PUBLIC, .name == "getPoint", .descriptor == "(II)Landroid/graphics/PointF;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/params/TonemapCurve\0", "getPoint\0", "(II)Landroid/graphics/PointF;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [copyColorCurve](https://developer.android.com/reference/android/hardware/camera2/params/TonemapCurve.html#copyColorCurve(int,%20float%5B%5D,%20int))
        pub fn copyColorCurve<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/camera2/params/TonemapCurve", java.flags == PUBLIC, .name == "copyColorCurve", .descriptor == "(I[FI)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/params/TonemapCurve\0", "copyColorCurve\0", "(I[FI)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [equals](https://developer.android.com/reference/android/hardware/camera2/params/TonemapCurve.html#equals(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn equals<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/camera2/params/TonemapCurve", java.flags == PUBLIC, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/params/TonemapCurve\0", "equals\0", "(Ljava/lang/Object;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hashCode](https://developer.android.com/reference/android/hardware/camera2/params/TonemapCurve.html#hashCode())
        pub fn hashCode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/camera2/params/TonemapCurve", java.flags == PUBLIC, .name == "hashCode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/params/TonemapCurve\0", "hashCode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/android/hardware/camera2/params/TonemapCurve.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/camera2/params/TonemapCurve", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/params/TonemapCurve\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [CHANNEL_BLUE](https://developer.android.com/reference/android/hardware/camera2/params/TonemapCurve.html#CHANNEL_BLUE)
        pub const CHANNEL_BLUE : i32 = 2;

        /// public static final [CHANNEL_GREEN](https://developer.android.com/reference/android/hardware/camera2/params/TonemapCurve.html#CHANNEL_GREEN)
        pub const CHANNEL_GREEN : i32 = 1;

        /// public static final [CHANNEL_RED](https://developer.android.com/reference/android/hardware/camera2/params/TonemapCurve.html#CHANNEL_RED)
        pub const CHANNEL_RED : i32 = 0;

        /// public static final [LEVEL_BLACK](https://developer.android.com/reference/android/hardware/camera2/params/TonemapCurve.html#LEVEL_BLACK)
        pub const LEVEL_BLACK : f32 = 0f32;

        /// public static final [LEVEL_WHITE](https://developer.android.com/reference/android/hardware/camera2/params/TonemapCurve.html#LEVEL_WHITE)
        pub const LEVEL_WHITE : f32 = 1f32;

        /// public static final [POINT_SIZE](https://developer.android.com/reference/android/hardware/camera2/params/TonemapCurve.html#POINT_SIZE)
        pub const POINT_SIZE : i32 = 2;
    }
}
