// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-hardware-camera2-params-RecommendedStreamConfigurationMap"))]
__jni_bindgen! {
    /// public final class [RecommendedStreamConfigurationMap](https://developer.android.com/reference/android/hardware/camera2/params/RecommendedStreamConfigurationMap.html)
    ///
    /// Required feature: android-hardware-camera2-params-RecommendedStreamConfigurationMap
    public final class RecommendedStreamConfigurationMap ("android/hardware/camera2/params/RecommendedStreamConfigurationMap") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [RecommendedStreamConfigurationMap](https://developer.android.com/reference/android/hardware/camera2/params/RecommendedStreamConfigurationMap.html#RecommendedStreamConfigurationMap(android.hardware.camera2.params.StreamConfigurationMap,%20int,%20boolean))
        // ///
        // /// Required features: "android-hardware-camera2-params-StreamConfigurationMap"
        // #[cfg(any(feature = "all", all(feature = "android-hardware-camera2-params-StreamConfigurationMap")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::hardware::camera2::params::StreamConfigurationMap>>, arg1: i32, arg2: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::hardware::camera2::params::RecommendedStreamConfigurationMap>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/hardware/camera2/params/RecommendedStreamConfigurationMap", java.flags == (empty), .name == "<init>", .descriptor == "(Landroid/hardware/camera2/params/StreamConfigurationMap;IZ)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/params/RecommendedStreamConfigurationMap\0", "<init>\0", "(Landroid/hardware/camera2/params/StreamConfigurationMap;IZ)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getRecommendedUseCase](https://developer.android.com/reference/android/hardware/camera2/params/RecommendedStreamConfigurationMap.html#getRecommendedUseCase())
        pub fn getRecommendedUseCase<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/camera2/params/RecommendedStreamConfigurationMap", java.flags == PUBLIC, .name == "getRecommendedUseCase", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/params/RecommendedStreamConfigurationMap\0", "getRecommendedUseCase\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getOutputFormats](https://developer.android.com/reference/android/hardware/camera2/params/RecommendedStreamConfigurationMap.html#getOutputFormats())
        ///
        /// Required features: "java-util-Set"
        #[cfg(any(feature = "all", all(feature = "java-util-Set")))]
        pub fn getOutputFormats<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Set>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/camera2/params/RecommendedStreamConfigurationMap", java.flags == PUBLIC, .name == "getOutputFormats", .descriptor == "()Ljava/util/Set;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/params/RecommendedStreamConfigurationMap\0", "getOutputFormats\0", "()Ljava/util/Set;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getValidOutputFormatsForInput](https://developer.android.com/reference/android/hardware/camera2/params/RecommendedStreamConfigurationMap.html#getValidOutputFormatsForInput(int))
        ///
        /// Required features: "java-util-Set"
        #[cfg(any(feature = "all", all(feature = "java-util-Set")))]
        pub fn getValidOutputFormatsForInput<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Set>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/camera2/params/RecommendedStreamConfigurationMap", java.flags == PUBLIC, .name == "getValidOutputFormatsForInput", .descriptor == "(I)Ljava/util/Set;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/params/RecommendedStreamConfigurationMap\0", "getValidOutputFormatsForInput\0", "(I)Ljava/util/Set;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInputFormats](https://developer.android.com/reference/android/hardware/camera2/params/RecommendedStreamConfigurationMap.html#getInputFormats())
        ///
        /// Required features: "java-util-Set"
        #[cfg(any(feature = "all", all(feature = "java-util-Set")))]
        pub fn getInputFormats<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Set>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/camera2/params/RecommendedStreamConfigurationMap", java.flags == PUBLIC, .name == "getInputFormats", .descriptor == "()Ljava/util/Set;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/params/RecommendedStreamConfigurationMap\0", "getInputFormats\0", "()Ljava/util/Set;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInputSizes](https://developer.android.com/reference/android/hardware/camera2/params/RecommendedStreamConfigurationMap.html#getInputSizes(int))
        ///
        /// Required features: "java-util-Set"
        #[cfg(any(feature = "all", all(feature = "java-util-Set")))]
        pub fn getInputSizes<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Set>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/camera2/params/RecommendedStreamConfigurationMap", java.flags == PUBLIC, .name == "getInputSizes", .descriptor == "(I)Ljava/util/Set;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/params/RecommendedStreamConfigurationMap\0", "getInputSizes\0", "(I)Ljava/util/Set;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isOutputSupportedFor](https://developer.android.com/reference/android/hardware/camera2/params/RecommendedStreamConfigurationMap.html#isOutputSupportedFor(int))
        pub fn isOutputSupportedFor_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/camera2/params/RecommendedStreamConfigurationMap", java.flags == PUBLIC, .name == "isOutputSupportedFor", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/params/RecommendedStreamConfigurationMap\0", "isOutputSupportedFor\0", "(I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getOutputSizes](https://developer.android.com/reference/android/hardware/camera2/params/RecommendedStreamConfigurationMap.html#getOutputSizes(int))
        ///
        /// Required features: "java-util-Set"
        #[cfg(any(feature = "all", all(feature = "java-util-Set")))]
        pub fn getOutputSizes_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Set>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/camera2/params/RecommendedStreamConfigurationMap", java.flags == PUBLIC, .name == "getOutputSizes", .descriptor == "(I)Ljava/util/Set;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/params/RecommendedStreamConfigurationMap\0", "getOutputSizes\0", "(I)Ljava/util/Set;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getHighSpeedVideoSizes](https://developer.android.com/reference/android/hardware/camera2/params/RecommendedStreamConfigurationMap.html#getHighSpeedVideoSizes())
        ///
        /// Required features: "java-util-Set"
        #[cfg(any(feature = "all", all(feature = "java-util-Set")))]
        pub fn getHighSpeedVideoSizes<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Set>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/camera2/params/RecommendedStreamConfigurationMap", java.flags == PUBLIC, .name == "getHighSpeedVideoSizes", .descriptor == "()Ljava/util/Set;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/params/RecommendedStreamConfigurationMap\0", "getHighSpeedVideoSizes\0", "()Ljava/util/Set;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getHighSpeedVideoFpsRangesFor](https://developer.android.com/reference/android/hardware/camera2/params/RecommendedStreamConfigurationMap.html#getHighSpeedVideoFpsRangesFor(android.util.Size))
        ///
        /// Required features: "android-util-Size", "java-util-Set"
        #[cfg(any(feature = "all", all(feature = "android-util-Size", feature = "java-util-Set")))]
        pub fn getHighSpeedVideoFpsRangesFor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::util::Size>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Set>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/camera2/params/RecommendedStreamConfigurationMap", java.flags == PUBLIC, .name == "getHighSpeedVideoFpsRangesFor", .descriptor == "(Landroid/util/Size;)Ljava/util/Set;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/params/RecommendedStreamConfigurationMap\0", "getHighSpeedVideoFpsRangesFor\0", "(Landroid/util/Size;)Ljava/util/Set;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getHighSpeedVideoFpsRanges](https://developer.android.com/reference/android/hardware/camera2/params/RecommendedStreamConfigurationMap.html#getHighSpeedVideoFpsRanges())
        ///
        /// Required features: "java-util-Set"
        #[cfg(any(feature = "all", all(feature = "java-util-Set")))]
        pub fn getHighSpeedVideoFpsRanges<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Set>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/camera2/params/RecommendedStreamConfigurationMap", java.flags == PUBLIC, .name == "getHighSpeedVideoFpsRanges", .descriptor == "()Ljava/util/Set;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/params/RecommendedStreamConfigurationMap\0", "getHighSpeedVideoFpsRanges\0", "()Ljava/util/Set;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getHighSpeedVideoSizesFor](https://developer.android.com/reference/android/hardware/camera2/params/RecommendedStreamConfigurationMap.html#getHighSpeedVideoSizesFor(android.util.Range))
        ///
        /// Required features: "android-util-Range", "java-util-Set"
        #[cfg(any(feature = "all", all(feature = "android-util-Range", feature = "java-util-Set")))]
        pub fn getHighSpeedVideoSizesFor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::util::Range>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Set>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/camera2/params/RecommendedStreamConfigurationMap", java.flags == PUBLIC, .name == "getHighSpeedVideoSizesFor", .descriptor == "(Landroid/util/Range;)Ljava/util/Set;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/params/RecommendedStreamConfigurationMap\0", "getHighSpeedVideoSizesFor\0", "(Landroid/util/Range;)Ljava/util/Set;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getHighResolutionOutputSizes](https://developer.android.com/reference/android/hardware/camera2/params/RecommendedStreamConfigurationMap.html#getHighResolutionOutputSizes(int))
        ///
        /// Required features: "java-util-Set"
        #[cfg(any(feature = "all", all(feature = "java-util-Set")))]
        pub fn getHighResolutionOutputSizes<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Set>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/camera2/params/RecommendedStreamConfigurationMap", java.flags == PUBLIC, .name == "getHighResolutionOutputSizes", .descriptor == "(I)Ljava/util/Set;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/params/RecommendedStreamConfigurationMap\0", "getHighResolutionOutputSizes\0", "(I)Ljava/util/Set;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getOutputMinFrameDuration](https://developer.android.com/reference/android/hardware/camera2/params/RecommendedStreamConfigurationMap.html#getOutputMinFrameDuration(int,%20android.util.Size))
        ///
        /// Required features: "android-util-Size"
        #[cfg(any(feature = "all", all(feature = "android-util-Size")))]
        pub fn getOutputMinFrameDuration_int_Size<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::util::Size>>) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/camera2/params/RecommendedStreamConfigurationMap", java.flags == PUBLIC, .name == "getOutputMinFrameDuration", .descriptor == "(ILandroid/util/Size;)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/params/RecommendedStreamConfigurationMap\0", "getOutputMinFrameDuration\0", "(ILandroid/util/Size;)J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getOutputStallDuration](https://developer.android.com/reference/android/hardware/camera2/params/RecommendedStreamConfigurationMap.html#getOutputStallDuration(int,%20android.util.Size))
        ///
        /// Required features: "android-util-Size"
        #[cfg(any(feature = "all", all(feature = "android-util-Size")))]
        pub fn getOutputStallDuration_int_Size<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::util::Size>>) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/camera2/params/RecommendedStreamConfigurationMap", java.flags == PUBLIC, .name == "getOutputStallDuration", .descriptor == "(ILandroid/util/Size;)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/params/RecommendedStreamConfigurationMap\0", "getOutputStallDuration\0", "(ILandroid/util/Size;)J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getOutputSizes](https://developer.android.com/reference/android/hardware/camera2/params/RecommendedStreamConfigurationMap.html#getOutputSizes(java.lang.Class))
        ///
        /// Required features: "java-lang-Class", "java-util-Set"
        #[cfg(any(feature = "all", all(feature = "java-lang-Class", feature = "java-util-Set")))]
        pub fn getOutputSizes_Class<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Set>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/camera2/params/RecommendedStreamConfigurationMap", java.flags == PUBLIC, .name == "getOutputSizes", .descriptor == "(Ljava/lang/Class;)Ljava/util/Set;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/params/RecommendedStreamConfigurationMap\0", "getOutputSizes\0", "(Ljava/lang/Class;)Ljava/util/Set;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getOutputMinFrameDuration](https://developer.android.com/reference/android/hardware/camera2/params/RecommendedStreamConfigurationMap.html#getOutputMinFrameDuration(java.lang.Class,%20android.util.Size))
        ///
        /// Required features: "android-util-Size", "java-lang-Class"
        #[cfg(any(feature = "all", all(feature = "android-util-Size", feature = "java-lang-Class")))]
        pub fn getOutputMinFrameDuration_Class_Size<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::util::Size>>) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/camera2/params/RecommendedStreamConfigurationMap", java.flags == PUBLIC, .name == "getOutputMinFrameDuration", .descriptor == "(Ljava/lang/Class;Landroid/util/Size;)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/params/RecommendedStreamConfigurationMap\0", "getOutputMinFrameDuration\0", "(Ljava/lang/Class;Landroid/util/Size;)J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getOutputStallDuration](https://developer.android.com/reference/android/hardware/camera2/params/RecommendedStreamConfigurationMap.html#getOutputStallDuration(java.lang.Class,%20android.util.Size))
        ///
        /// Required features: "android-util-Size", "java-lang-Class"
        #[cfg(any(feature = "all", all(feature = "android-util-Size", feature = "java-lang-Class")))]
        pub fn getOutputStallDuration_Class_Size<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::util::Size>>) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/camera2/params/RecommendedStreamConfigurationMap", java.flags == PUBLIC, .name == "getOutputStallDuration", .descriptor == "(Ljava/lang/Class;Landroid/util/Size;)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/params/RecommendedStreamConfigurationMap\0", "getOutputStallDuration\0", "(Ljava/lang/Class;Landroid/util/Size;)J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isOutputSupportedFor](https://developer.android.com/reference/android/hardware/camera2/params/RecommendedStreamConfigurationMap.html#isOutputSupportedFor(android.view.Surface))
        ///
        /// Required features: "android-view-Surface"
        #[cfg(any(feature = "all", all(feature = "android-view-Surface")))]
        pub fn isOutputSupportedFor_Surface<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::Surface>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/camera2/params/RecommendedStreamConfigurationMap", java.flags == PUBLIC, .name == "isOutputSupportedFor", .descriptor == "(Landroid/view/Surface;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/params/RecommendedStreamConfigurationMap\0", "isOutputSupportedFor\0", "(Landroid/view/Surface;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [USECASE_LOW_LATENCY_SNAPSHOT](https://developer.android.com/reference/android/hardware/camera2/params/RecommendedStreamConfigurationMap.html#USECASE_LOW_LATENCY_SNAPSHOT)
        pub const USECASE_LOW_LATENCY_SNAPSHOT : i32 = 6;

        /// public static final [USECASE_PREVIEW](https://developer.android.com/reference/android/hardware/camera2/params/RecommendedStreamConfigurationMap.html#USECASE_PREVIEW)
        pub const USECASE_PREVIEW : i32 = 0;

        /// public static final [USECASE_RAW](https://developer.android.com/reference/android/hardware/camera2/params/RecommendedStreamConfigurationMap.html#USECASE_RAW)
        pub const USECASE_RAW : i32 = 5;

        /// public static final [USECASE_RECORD](https://developer.android.com/reference/android/hardware/camera2/params/RecommendedStreamConfigurationMap.html#USECASE_RECORD)
        pub const USECASE_RECORD : i32 = 1;

        /// public static final [USECASE_SNAPSHOT](https://developer.android.com/reference/android/hardware/camera2/params/RecommendedStreamConfigurationMap.html#USECASE_SNAPSHOT)
        pub const USECASE_SNAPSHOT : i32 = 3;

        /// public static final [USECASE_VIDEO_SNAPSHOT](https://developer.android.com/reference/android/hardware/camera2/params/RecommendedStreamConfigurationMap.html#USECASE_VIDEO_SNAPSHOT)
        pub const USECASE_VIDEO_SNAPSHOT : i32 = 2;

        /// public static final [USECASE_ZSL](https://developer.android.com/reference/android/hardware/camera2/params/RecommendedStreamConfigurationMap.html#USECASE_ZSL)
        pub const USECASE_ZSL : i32 = 4;
    }
}
