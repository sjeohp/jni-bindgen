// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-hardware-camera2-params-SessionConfiguration"))]
__jni_bindgen! {
    /// public final class [SessionConfiguration](https://developer.android.com/reference/android/hardware/camera2/params/SessionConfiguration.html)
    ///
    /// Required feature: android-hardware-camera2-params-SessionConfiguration
    public final class SessionConfiguration ("android/hardware/camera2/params/SessionConfiguration") extends crate::java::lang::Object, implements crate::android::os::Parcelable {

        /// [SessionConfiguration](https://developer.android.com/reference/android/hardware/camera2/params/SessionConfiguration.html#SessionConfiguration(int,%20java.util.List,%20java.util.concurrent.Executor,%20android.hardware.camera2.CameraCaptureSession.StateCallback))
        ///
        /// Required features: "android-hardware-camera2-CameraCaptureSession_StateCallback", "java-util-List", "java-util-concurrent-Executor"
        #[cfg(any(feature = "all", all(feature = "android-hardware-camera2-CameraCaptureSession_StateCallback", feature = "java-util-List", feature = "java-util-concurrent-Executor")))]
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::hardware::camera2::CameraCaptureSession_StateCallback>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::hardware::camera2::params::SessionConfiguration>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/camera2/params/SessionConfiguration", java.flags == PUBLIC, .name == "<init>", .descriptor == "(ILjava/util/List;Ljava/util/concurrent/Executor;Landroid/hardware/camera2/CameraCaptureSession$StateCallback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/params/SessionConfiguration\0", "<init>\0", "(ILjava/util/List;Ljava/util/concurrent/Executor;Landroid/hardware/camera2/CameraCaptureSession$StateCallback;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [writeToParcel](https://developer.android.com/reference/android/hardware/camera2/params/SessionConfiguration.html#writeToParcel(android.os.Parcel,%20int))
        ///
        /// Required features: "android-os-Parcel"
        #[cfg(any(feature = "all", all(feature = "android-os-Parcel")))]
        pub fn writeToParcel<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Parcel>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/camera2/params/SessionConfiguration", java.flags == PUBLIC, .name == "writeToParcel", .descriptor == "(Landroid/os/Parcel;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/params/SessionConfiguration\0", "writeToParcel\0", "(Landroid/os/Parcel;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [describeContents](https://developer.android.com/reference/android/hardware/camera2/params/SessionConfiguration.html#describeContents())
        pub fn describeContents<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/camera2/params/SessionConfiguration", java.flags == PUBLIC, .name == "describeContents", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/params/SessionConfiguration\0", "describeContents\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [equals](https://developer.android.com/reference/android/hardware/camera2/params/SessionConfiguration.html#equals(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn equals<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/camera2/params/SessionConfiguration", java.flags == PUBLIC, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/params/SessionConfiguration\0", "equals\0", "(Ljava/lang/Object;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hashCode](https://developer.android.com/reference/android/hardware/camera2/params/SessionConfiguration.html#hashCode())
        pub fn hashCode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/camera2/params/SessionConfiguration", java.flags == PUBLIC, .name == "hashCode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/params/SessionConfiguration\0", "hashCode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSessionType](https://developer.android.com/reference/android/hardware/camera2/params/SessionConfiguration.html#getSessionType())
        pub fn getSessionType<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/camera2/params/SessionConfiguration", java.flags == PUBLIC, .name == "getSessionType", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/params/SessionConfiguration\0", "getSessionType\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getOutputConfigurations](https://developer.android.com/reference/android/hardware/camera2/params/SessionConfiguration.html#getOutputConfigurations())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getOutputConfigurations<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/camera2/params/SessionConfiguration", java.flags == PUBLIC, .name == "getOutputConfigurations", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/params/SessionConfiguration\0", "getOutputConfigurations\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getStateCallback](https://developer.android.com/reference/android/hardware/camera2/params/SessionConfiguration.html#getStateCallback())
        ///
        /// Required features: "android-hardware-camera2-CameraCaptureSession_StateCallback"
        #[cfg(any(feature = "all", all(feature = "android-hardware-camera2-CameraCaptureSession_StateCallback")))]
        pub fn getStateCallback<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::hardware::camera2::CameraCaptureSession_StateCallback>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/camera2/params/SessionConfiguration", java.flags == PUBLIC, .name == "getStateCallback", .descriptor == "()Landroid/hardware/camera2/CameraCaptureSession$StateCallback;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/params/SessionConfiguration\0", "getStateCallback\0", "()Landroid/hardware/camera2/CameraCaptureSession$StateCallback;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getExecutor](https://developer.android.com/reference/android/hardware/camera2/params/SessionConfiguration.html#getExecutor())
        ///
        /// Required features: "java-util-concurrent-Executor"
        #[cfg(any(feature = "all", all(feature = "java-util-concurrent-Executor")))]
        pub fn getExecutor<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::concurrent::Executor>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/camera2/params/SessionConfiguration", java.flags == PUBLIC, .name == "getExecutor", .descriptor == "()Ljava/util/concurrent/Executor;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/params/SessionConfiguration\0", "getExecutor\0", "()Ljava/util/concurrent/Executor;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setInputConfiguration](https://developer.android.com/reference/android/hardware/camera2/params/SessionConfiguration.html#setInputConfiguration(android.hardware.camera2.params.InputConfiguration))
        ///
        /// Required features: "android-hardware-camera2-params-InputConfiguration"
        #[cfg(any(feature = "all", all(feature = "android-hardware-camera2-params-InputConfiguration")))]
        pub fn setInputConfiguration<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::hardware::camera2::params::InputConfiguration>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/camera2/params/SessionConfiguration", java.flags == PUBLIC, .name == "setInputConfiguration", .descriptor == "(Landroid/hardware/camera2/params/InputConfiguration;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/params/SessionConfiguration\0", "setInputConfiguration\0", "(Landroid/hardware/camera2/params/InputConfiguration;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInputConfiguration](https://developer.android.com/reference/android/hardware/camera2/params/SessionConfiguration.html#getInputConfiguration())
        ///
        /// Required features: "android-hardware-camera2-params-InputConfiguration"
        #[cfg(any(feature = "all", all(feature = "android-hardware-camera2-params-InputConfiguration")))]
        pub fn getInputConfiguration<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::hardware::camera2::params::InputConfiguration>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/camera2/params/SessionConfiguration", java.flags == PUBLIC, .name == "getInputConfiguration", .descriptor == "()Landroid/hardware/camera2/params/InputConfiguration;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/params/SessionConfiguration\0", "getInputConfiguration\0", "()Landroid/hardware/camera2/params/InputConfiguration;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setSessionParameters](https://developer.android.com/reference/android/hardware/camera2/params/SessionConfiguration.html#setSessionParameters(android.hardware.camera2.CaptureRequest))
        ///
        /// Required features: "android-hardware-camera2-CaptureRequest"
        #[cfg(any(feature = "all", all(feature = "android-hardware-camera2-CaptureRequest")))]
        pub fn setSessionParameters<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::hardware::camera2::CaptureRequest>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/camera2/params/SessionConfiguration", java.flags == PUBLIC, .name == "setSessionParameters", .descriptor == "(Landroid/hardware/camera2/CaptureRequest;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/params/SessionConfiguration\0", "setSessionParameters\0", "(Landroid/hardware/camera2/CaptureRequest;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSessionParameters](https://developer.android.com/reference/android/hardware/camera2/params/SessionConfiguration.html#getSessionParameters())
        ///
        /// Required features: "android-hardware-camera2-CaptureRequest"
        #[cfg(any(feature = "all", all(feature = "android-hardware-camera2-CaptureRequest")))]
        pub fn getSessionParameters<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::hardware::camera2::CaptureRequest>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/camera2/params/SessionConfiguration", java.flags == PUBLIC, .name == "getSessionParameters", .descriptor == "()Landroid/hardware/camera2/CaptureRequest;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/params/SessionConfiguration\0", "getSessionParameters\0", "()Landroid/hardware/camera2/CaptureRequest;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// **get** public static final [CREATOR](https://developer.android.com/reference/android/hardware/camera2/params/SessionConfiguration.html#CREATOR)
        ///
        /// Required feature: android-os-Parcelable_Creator
        #[cfg(any(feature = "all", feature = "android-os-Parcelable_Creator"))]
        pub fn CREATOR<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Parcelable_Creator>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/hardware/camera2/params/SessionConfiguration\0", "CREATOR\0", "Landroid/os/Parcelable$Creator;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// public static final [SESSION_HIGH_SPEED](https://developer.android.com/reference/android/hardware/camera2/params/SessionConfiguration.html#SESSION_HIGH_SPEED)
        pub const SESSION_HIGH_SPEED : i32 = 1;

        /// public static final [SESSION_REGULAR](https://developer.android.com/reference/android/hardware/camera2/params/SessionConfiguration.html#SESSION_REGULAR)
        pub const SESSION_REGULAR : i32 = 0;
    }
}
