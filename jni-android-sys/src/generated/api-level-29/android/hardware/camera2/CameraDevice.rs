// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-hardware-camera2-CameraDevice"))]
__jni_bindgen! {
    /// public class [CameraDevice](https://developer.android.com/reference/android/hardware/camera2/CameraDevice.html)
    ///
    /// Required feature: android-hardware-camera2-CameraDevice
    public class CameraDevice ("android/hardware/camera2/CameraDevice") extends crate::java::lang::Object, implements crate::java::lang::AutoCloseable {

        // // Not emitting: Non-public method
        // /// [CameraDevice](https://developer.android.com/reference/android/hardware/camera2/CameraDevice.html#CameraDevice())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::hardware::camera2::CameraDevice>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/hardware/camera2/CameraDevice", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/CameraDevice\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getId](https://developer.android.com/reference/android/hardware/camera2/CameraDevice.html#getId())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getId<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/camera2/CameraDevice", java.flags == PUBLIC | ABSTRACT, .name == "getId", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/CameraDevice\0", "getId\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createCaptureSession](https://developer.android.com/reference/android/hardware/camera2/CameraDevice.html#createCaptureSession(java.util.List,%20android.hardware.camera2.CameraCaptureSession.StateCallback,%20android.os.Handler))
        ///
        /// Required features: "android-hardware-camera2-CameraCaptureSession_StateCallback", "android-os-Handler", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "android-hardware-camera2-CameraCaptureSession_StateCallback", feature = "android-os-Handler", feature = "java-util-List")))]
        pub fn createCaptureSession_List_StateCallback_Handler<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::hardware::camera2::CameraCaptureSession_StateCallback>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/camera2/CameraDevice", java.flags == PUBLIC | ABSTRACT, .name == "createCaptureSession", .descriptor == "(Ljava/util/List;Landroid/hardware/camera2/CameraCaptureSession$StateCallback;Landroid/os/Handler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/CameraDevice\0", "createCaptureSession\0", "(Ljava/util/List;Landroid/hardware/camera2/CameraCaptureSession$StateCallback;Landroid/os/Handler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createCaptureSessionByOutputConfigurations](https://developer.android.com/reference/android/hardware/camera2/CameraDevice.html#createCaptureSessionByOutputConfigurations(java.util.List,%20android.hardware.camera2.CameraCaptureSession.StateCallback,%20android.os.Handler))
        ///
        /// Required features: "android-hardware-camera2-CameraCaptureSession_StateCallback", "android-os-Handler", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "android-hardware-camera2-CameraCaptureSession_StateCallback", feature = "android-os-Handler", feature = "java-util-List")))]
        pub fn createCaptureSessionByOutputConfigurations<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::hardware::camera2::CameraCaptureSession_StateCallback>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/camera2/CameraDevice", java.flags == PUBLIC | ABSTRACT, .name == "createCaptureSessionByOutputConfigurations", .descriptor == "(Ljava/util/List;Landroid/hardware/camera2/CameraCaptureSession$StateCallback;Landroid/os/Handler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/CameraDevice\0", "createCaptureSessionByOutputConfigurations\0", "(Ljava/util/List;Landroid/hardware/camera2/CameraCaptureSession$StateCallback;Landroid/os/Handler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createReprocessableCaptureSession](https://developer.android.com/reference/android/hardware/camera2/CameraDevice.html#createReprocessableCaptureSession(android.hardware.camera2.params.InputConfiguration,%20java.util.List,%20android.hardware.camera2.CameraCaptureSession.StateCallback,%20android.os.Handler))
        ///
        /// Required features: "android-hardware-camera2-CameraCaptureSession_StateCallback", "android-hardware-camera2-params-InputConfiguration", "android-os-Handler", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "android-hardware-camera2-CameraCaptureSession_StateCallback", feature = "android-hardware-camera2-params-InputConfiguration", feature = "android-os-Handler", feature = "java-util-List")))]
        pub fn createReprocessableCaptureSession<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::hardware::camera2::params::InputConfiguration>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::hardware::camera2::CameraCaptureSession_StateCallback>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/camera2/CameraDevice", java.flags == PUBLIC | ABSTRACT, .name == "createReprocessableCaptureSession", .descriptor == "(Landroid/hardware/camera2/params/InputConfiguration;Ljava/util/List;Landroid/hardware/camera2/CameraCaptureSession$StateCallback;Landroid/os/Handler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/CameraDevice\0", "createReprocessableCaptureSession\0", "(Landroid/hardware/camera2/params/InputConfiguration;Ljava/util/List;Landroid/hardware/camera2/CameraCaptureSession$StateCallback;Landroid/os/Handler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createReprocessableCaptureSessionByConfigurations](https://developer.android.com/reference/android/hardware/camera2/CameraDevice.html#createReprocessableCaptureSessionByConfigurations(android.hardware.camera2.params.InputConfiguration,%20java.util.List,%20android.hardware.camera2.CameraCaptureSession.StateCallback,%20android.os.Handler))
        ///
        /// Required features: "android-hardware-camera2-CameraCaptureSession_StateCallback", "android-hardware-camera2-params-InputConfiguration", "android-os-Handler", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "android-hardware-camera2-CameraCaptureSession_StateCallback", feature = "android-hardware-camera2-params-InputConfiguration", feature = "android-os-Handler", feature = "java-util-List")))]
        pub fn createReprocessableCaptureSessionByConfigurations<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::hardware::camera2::params::InputConfiguration>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::hardware::camera2::CameraCaptureSession_StateCallback>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/camera2/CameraDevice", java.flags == PUBLIC | ABSTRACT, .name == "createReprocessableCaptureSessionByConfigurations", .descriptor == "(Landroid/hardware/camera2/params/InputConfiguration;Ljava/util/List;Landroid/hardware/camera2/CameraCaptureSession$StateCallback;Landroid/os/Handler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/CameraDevice\0", "createReprocessableCaptureSessionByConfigurations\0", "(Landroid/hardware/camera2/params/InputConfiguration;Ljava/util/List;Landroid/hardware/camera2/CameraCaptureSession$StateCallback;Landroid/os/Handler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createConstrainedHighSpeedCaptureSession](https://developer.android.com/reference/android/hardware/camera2/CameraDevice.html#createConstrainedHighSpeedCaptureSession(java.util.List,%20android.hardware.camera2.CameraCaptureSession.StateCallback,%20android.os.Handler))
        ///
        /// Required features: "android-hardware-camera2-CameraCaptureSession_StateCallback", "android-os-Handler", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "android-hardware-camera2-CameraCaptureSession_StateCallback", feature = "android-os-Handler", feature = "java-util-List")))]
        pub fn createConstrainedHighSpeedCaptureSession<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::hardware::camera2::CameraCaptureSession_StateCallback>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/camera2/CameraDevice", java.flags == PUBLIC | ABSTRACT, .name == "createConstrainedHighSpeedCaptureSession", .descriptor == "(Ljava/util/List;Landroid/hardware/camera2/CameraCaptureSession$StateCallback;Landroid/os/Handler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/CameraDevice\0", "createConstrainedHighSpeedCaptureSession\0", "(Ljava/util/List;Landroid/hardware/camera2/CameraCaptureSession$StateCallback;Landroid/os/Handler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createCaptureSession](https://developer.android.com/reference/android/hardware/camera2/CameraDevice.html#createCaptureSession(android.hardware.camera2.params.SessionConfiguration))
        ///
        /// Required features: "android-hardware-camera2-params-SessionConfiguration"
        #[cfg(any(feature = "all", all(feature = "android-hardware-camera2-params-SessionConfiguration")))]
        pub fn createCaptureSession_SessionConfiguration<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::hardware::camera2::params::SessionConfiguration>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/camera2/CameraDevice", java.flags == PUBLIC, .name == "createCaptureSession", .descriptor == "(Landroid/hardware/camera2/params/SessionConfiguration;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/CameraDevice\0", "createCaptureSession\0", "(Landroid/hardware/camera2/params/SessionConfiguration;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createCaptureRequest](https://developer.android.com/reference/android/hardware/camera2/CameraDevice.html#createCaptureRequest(int))
        ///
        /// Required features: "android-hardware-camera2-CaptureRequest_Builder"
        #[cfg(any(feature = "all", all(feature = "android-hardware-camera2-CaptureRequest_Builder")))]
        pub fn createCaptureRequest_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::hardware::camera2::CaptureRequest_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/camera2/CameraDevice", java.flags == PUBLIC | ABSTRACT, .name == "createCaptureRequest", .descriptor == "(I)Landroid/hardware/camera2/CaptureRequest$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/CameraDevice\0", "createCaptureRequest\0", "(I)Landroid/hardware/camera2/CaptureRequest$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createCaptureRequest](https://developer.android.com/reference/android/hardware/camera2/CameraDevice.html#createCaptureRequest(int,%20java.util.Set))
        ///
        /// Required features: "android-hardware-camera2-CaptureRequest_Builder", "java-util-Set"
        #[cfg(any(feature = "all", all(feature = "android-hardware-camera2-CaptureRequest_Builder", feature = "java-util-Set")))]
        pub fn createCaptureRequest_int_Set<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Set>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::hardware::camera2::CaptureRequest_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/camera2/CameraDevice", java.flags == PUBLIC, .name == "createCaptureRequest", .descriptor == "(ILjava/util/Set;)Landroid/hardware/camera2/CaptureRequest$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/CameraDevice\0", "createCaptureRequest\0", "(ILjava/util/Set;)Landroid/hardware/camera2/CaptureRequest$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createReprocessCaptureRequest](https://developer.android.com/reference/android/hardware/camera2/CameraDevice.html#createReprocessCaptureRequest(android.hardware.camera2.TotalCaptureResult))
        ///
        /// Required features: "android-hardware-camera2-CaptureRequest_Builder", "android-hardware-camera2-TotalCaptureResult"
        #[cfg(any(feature = "all", all(feature = "android-hardware-camera2-CaptureRequest_Builder", feature = "android-hardware-camera2-TotalCaptureResult")))]
        pub fn createReprocessCaptureRequest<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::hardware::camera2::TotalCaptureResult>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::hardware::camera2::CaptureRequest_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/camera2/CameraDevice", java.flags == PUBLIC | ABSTRACT, .name == "createReprocessCaptureRequest", .descriptor == "(Landroid/hardware/camera2/TotalCaptureResult;)Landroid/hardware/camera2/CaptureRequest$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/CameraDevice\0", "createReprocessCaptureRequest\0", "(Landroid/hardware/camera2/TotalCaptureResult;)Landroid/hardware/camera2/CaptureRequest$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [close](https://developer.android.com/reference/android/hardware/camera2/CameraDevice.html#close())
        pub fn close<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/camera2/CameraDevice", java.flags == PUBLIC | ABSTRACT, .name == "close", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/CameraDevice\0", "close\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isSessionConfigurationSupported](https://developer.android.com/reference/android/hardware/camera2/CameraDevice.html#isSessionConfigurationSupported(android.hardware.camera2.params.SessionConfiguration))
        ///
        /// Required features: "android-hardware-camera2-params-SessionConfiguration"
        #[cfg(any(feature = "all", all(feature = "android-hardware-camera2-params-SessionConfiguration")))]
        pub fn isSessionConfigurationSupported<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::hardware::camera2::params::SessionConfiguration>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/camera2/CameraDevice", java.flags == PUBLIC, .name == "isSessionConfigurationSupported", .descriptor == "(Landroid/hardware/camera2/params/SessionConfiguration;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/CameraDevice\0", "isSessionConfigurationSupported\0", "(Landroid/hardware/camera2/params/SessionConfiguration;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [TEMPLATE_MANUAL](https://developer.android.com/reference/android/hardware/camera2/CameraDevice.html#TEMPLATE_MANUAL)
        pub const TEMPLATE_MANUAL : i32 = 6;

        /// public static final [TEMPLATE_PREVIEW](https://developer.android.com/reference/android/hardware/camera2/CameraDevice.html#TEMPLATE_PREVIEW)
        pub const TEMPLATE_PREVIEW : i32 = 1;

        /// public static final [TEMPLATE_RECORD](https://developer.android.com/reference/android/hardware/camera2/CameraDevice.html#TEMPLATE_RECORD)
        pub const TEMPLATE_RECORD : i32 = 3;

        /// public static final [TEMPLATE_STILL_CAPTURE](https://developer.android.com/reference/android/hardware/camera2/CameraDevice.html#TEMPLATE_STILL_CAPTURE)
        pub const TEMPLATE_STILL_CAPTURE : i32 = 2;

        /// public static final [TEMPLATE_VIDEO_SNAPSHOT](https://developer.android.com/reference/android/hardware/camera2/CameraDevice.html#TEMPLATE_VIDEO_SNAPSHOT)
        pub const TEMPLATE_VIDEO_SNAPSHOT : i32 = 4;

        /// public static final [TEMPLATE_ZERO_SHUTTER_LAG](https://developer.android.com/reference/android/hardware/camera2/CameraDevice.html#TEMPLATE_ZERO_SHUTTER_LAG)
        pub const TEMPLATE_ZERO_SHUTTER_LAG : i32 = 5;
    }
}
