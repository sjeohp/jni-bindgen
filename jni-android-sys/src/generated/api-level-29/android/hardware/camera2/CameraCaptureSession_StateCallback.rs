// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-hardware-camera2-CameraCaptureSession_StateCallback"))]
__jni_bindgen! {
    /// public class [CameraCaptureSession.StateCallback](https://developer.android.com/reference/android/hardware/camera2/CameraCaptureSession.StateCallback.html)
    ///
    /// Required feature: android-hardware-camera2-CameraCaptureSession_StateCallback
    public class CameraCaptureSession_StateCallback ("android/hardware/camera2/CameraCaptureSession$StateCallback") extends crate::java::lang::Object {

        /// [StateCallback](https://developer.android.com/reference/android/hardware/camera2/CameraCaptureSession.StateCallback.html#StateCallback())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::hardware::camera2::CameraCaptureSession_StateCallback>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/camera2/CameraCaptureSession$StateCallback", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/CameraCaptureSession$StateCallback\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onConfigured](https://developer.android.com/reference/android/hardware/camera2/CameraCaptureSession.StateCallback.html#onConfigured(android.hardware.camera2.CameraCaptureSession))
        ///
        /// Required features: "android-hardware-camera2-CameraCaptureSession"
        #[cfg(any(feature = "all", all(feature = "android-hardware-camera2-CameraCaptureSession")))]
        pub fn onConfigured<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::hardware::camera2::CameraCaptureSession>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/camera2/CameraCaptureSession$StateCallback", java.flags == PUBLIC | ABSTRACT, .name == "onConfigured", .descriptor == "(Landroid/hardware/camera2/CameraCaptureSession;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/CameraCaptureSession$StateCallback\0", "onConfigured\0", "(Landroid/hardware/camera2/CameraCaptureSession;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onConfigureFailed](https://developer.android.com/reference/android/hardware/camera2/CameraCaptureSession.StateCallback.html#onConfigureFailed(android.hardware.camera2.CameraCaptureSession))
        ///
        /// Required features: "android-hardware-camera2-CameraCaptureSession"
        #[cfg(any(feature = "all", all(feature = "android-hardware-camera2-CameraCaptureSession")))]
        pub fn onConfigureFailed<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::hardware::camera2::CameraCaptureSession>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/camera2/CameraCaptureSession$StateCallback", java.flags == PUBLIC | ABSTRACT, .name == "onConfigureFailed", .descriptor == "(Landroid/hardware/camera2/CameraCaptureSession;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/CameraCaptureSession$StateCallback\0", "onConfigureFailed\0", "(Landroid/hardware/camera2/CameraCaptureSession;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onReady](https://developer.android.com/reference/android/hardware/camera2/CameraCaptureSession.StateCallback.html#onReady(android.hardware.camera2.CameraCaptureSession))
        ///
        /// Required features: "android-hardware-camera2-CameraCaptureSession"
        #[cfg(any(feature = "all", all(feature = "android-hardware-camera2-CameraCaptureSession")))]
        pub fn onReady<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::hardware::camera2::CameraCaptureSession>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/camera2/CameraCaptureSession$StateCallback", java.flags == PUBLIC, .name == "onReady", .descriptor == "(Landroid/hardware/camera2/CameraCaptureSession;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/CameraCaptureSession$StateCallback\0", "onReady\0", "(Landroid/hardware/camera2/CameraCaptureSession;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onActive](https://developer.android.com/reference/android/hardware/camera2/CameraCaptureSession.StateCallback.html#onActive(android.hardware.camera2.CameraCaptureSession))
        ///
        /// Required features: "android-hardware-camera2-CameraCaptureSession"
        #[cfg(any(feature = "all", all(feature = "android-hardware-camera2-CameraCaptureSession")))]
        pub fn onActive<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::hardware::camera2::CameraCaptureSession>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/camera2/CameraCaptureSession$StateCallback", java.flags == PUBLIC, .name == "onActive", .descriptor == "(Landroid/hardware/camera2/CameraCaptureSession;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/CameraCaptureSession$StateCallback\0", "onActive\0", "(Landroid/hardware/camera2/CameraCaptureSession;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onCaptureQueueEmpty](https://developer.android.com/reference/android/hardware/camera2/CameraCaptureSession.StateCallback.html#onCaptureQueueEmpty(android.hardware.camera2.CameraCaptureSession))
        ///
        /// Required features: "android-hardware-camera2-CameraCaptureSession"
        #[cfg(any(feature = "all", all(feature = "android-hardware-camera2-CameraCaptureSession")))]
        pub fn onCaptureQueueEmpty<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::hardware::camera2::CameraCaptureSession>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/camera2/CameraCaptureSession$StateCallback", java.flags == PUBLIC, .name == "onCaptureQueueEmpty", .descriptor == "(Landroid/hardware/camera2/CameraCaptureSession;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/CameraCaptureSession$StateCallback\0", "onCaptureQueueEmpty\0", "(Landroid/hardware/camera2/CameraCaptureSession;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onClosed](https://developer.android.com/reference/android/hardware/camera2/CameraCaptureSession.StateCallback.html#onClosed(android.hardware.camera2.CameraCaptureSession))
        ///
        /// Required features: "android-hardware-camera2-CameraCaptureSession"
        #[cfg(any(feature = "all", all(feature = "android-hardware-camera2-CameraCaptureSession")))]
        pub fn onClosed<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::hardware::camera2::CameraCaptureSession>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/camera2/CameraCaptureSession$StateCallback", java.flags == PUBLIC, .name == "onClosed", .descriptor == "(Landroid/hardware/camera2/CameraCaptureSession;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/CameraCaptureSession$StateCallback\0", "onClosed\0", "(Landroid/hardware/camera2/CameraCaptureSession;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onSurfacePrepared](https://developer.android.com/reference/android/hardware/camera2/CameraCaptureSession.StateCallback.html#onSurfacePrepared(android.hardware.camera2.CameraCaptureSession,%20android.view.Surface))
        ///
        /// Required features: "android-hardware-camera2-CameraCaptureSession", "android-view-Surface"
        #[cfg(any(feature = "all", all(feature = "android-hardware-camera2-CameraCaptureSession", feature = "android-view-Surface")))]
        pub fn onSurfacePrepared<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::hardware::camera2::CameraCaptureSession>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::Surface>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/camera2/CameraCaptureSession$StateCallback", java.flags == PUBLIC, .name == "onSurfacePrepared", .descriptor == "(Landroid/hardware/camera2/CameraCaptureSession;Landroid/view/Surface;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/CameraCaptureSession$StateCallback\0", "onSurfacePrepared\0", "(Landroid/hardware/camera2/CameraCaptureSession;Landroid/view/Surface;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
