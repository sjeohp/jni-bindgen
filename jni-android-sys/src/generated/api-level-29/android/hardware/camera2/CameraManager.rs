// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-hardware-camera2-CameraManager"))]
__jni_bindgen! {
    /// public final class [CameraManager](https://developer.android.com/reference/android/hardware/camera2/CameraManager.html)
    ///
    /// Required feature: android-hardware-camera2-CameraManager
    public final class CameraManager ("android/hardware/camera2/CameraManager") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [CameraManager](https://developer.android.com/reference/android/hardware/camera2/CameraManager.html#CameraManager(android.content.Context))
        // ///
        // /// Required features: "android-content-Context"
        // #[cfg(any(feature = "all", all(feature = "android-content-Context")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::hardware::camera2::CameraManager>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/hardware/camera2/CameraManager", java.flags == (empty), .name == "<init>", .descriptor == "(Landroid/content/Context;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/CameraManager\0", "<init>\0", "(Landroid/content/Context;)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getCameraIdList](https://developer.android.com/reference/android/hardware/camera2/CameraManager.html#getCameraIdList())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getCameraIdList<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/camera2/CameraManager", java.flags == PUBLIC, .name == "getCameraIdList", .descriptor == "()[Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/CameraManager\0", "getCameraIdList\0", "()[Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [registerAvailabilityCallback](https://developer.android.com/reference/android/hardware/camera2/CameraManager.html#registerAvailabilityCallback(android.hardware.camera2.CameraManager.AvailabilityCallback,%20android.os.Handler))
        ///
        /// Required features: "android-hardware-camera2-CameraManager_AvailabilityCallback", "android-os-Handler"
        #[cfg(any(feature = "all", all(feature = "android-hardware-camera2-CameraManager_AvailabilityCallback", feature = "android-os-Handler")))]
        pub fn registerAvailabilityCallback_AvailabilityCallback_Handler<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::hardware::camera2::CameraManager_AvailabilityCallback>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/camera2/CameraManager", java.flags == PUBLIC, .name == "registerAvailabilityCallback", .descriptor == "(Landroid/hardware/camera2/CameraManager$AvailabilityCallback;Landroid/os/Handler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/CameraManager\0", "registerAvailabilityCallback\0", "(Landroid/hardware/camera2/CameraManager$AvailabilityCallback;Landroid/os/Handler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [registerAvailabilityCallback](https://developer.android.com/reference/android/hardware/camera2/CameraManager.html#registerAvailabilityCallback(java.util.concurrent.Executor,%20android.hardware.camera2.CameraManager.AvailabilityCallback))
        ///
        /// Required features: "android-hardware-camera2-CameraManager_AvailabilityCallback", "java-util-concurrent-Executor"
        #[cfg(any(feature = "all", all(feature = "android-hardware-camera2-CameraManager_AvailabilityCallback", feature = "java-util-concurrent-Executor")))]
        pub fn registerAvailabilityCallback_Executor_AvailabilityCallback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::hardware::camera2::CameraManager_AvailabilityCallback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/camera2/CameraManager", java.flags == PUBLIC, .name == "registerAvailabilityCallback", .descriptor == "(Ljava/util/concurrent/Executor;Landroid/hardware/camera2/CameraManager$AvailabilityCallback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/CameraManager\0", "registerAvailabilityCallback\0", "(Ljava/util/concurrent/Executor;Landroid/hardware/camera2/CameraManager$AvailabilityCallback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unregisterAvailabilityCallback](https://developer.android.com/reference/android/hardware/camera2/CameraManager.html#unregisterAvailabilityCallback(android.hardware.camera2.CameraManager.AvailabilityCallback))
        ///
        /// Required features: "android-hardware-camera2-CameraManager_AvailabilityCallback"
        #[cfg(any(feature = "all", all(feature = "android-hardware-camera2-CameraManager_AvailabilityCallback")))]
        pub fn unregisterAvailabilityCallback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::hardware::camera2::CameraManager_AvailabilityCallback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/camera2/CameraManager", java.flags == PUBLIC, .name == "unregisterAvailabilityCallback", .descriptor == "(Landroid/hardware/camera2/CameraManager$AvailabilityCallback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/CameraManager\0", "unregisterAvailabilityCallback\0", "(Landroid/hardware/camera2/CameraManager$AvailabilityCallback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [registerTorchCallback](https://developer.android.com/reference/android/hardware/camera2/CameraManager.html#registerTorchCallback(android.hardware.camera2.CameraManager.TorchCallback,%20android.os.Handler))
        ///
        /// Required features: "android-hardware-camera2-CameraManager_TorchCallback", "android-os-Handler"
        #[cfg(any(feature = "all", all(feature = "android-hardware-camera2-CameraManager_TorchCallback", feature = "android-os-Handler")))]
        pub fn registerTorchCallback_TorchCallback_Handler<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::hardware::camera2::CameraManager_TorchCallback>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/camera2/CameraManager", java.flags == PUBLIC, .name == "registerTorchCallback", .descriptor == "(Landroid/hardware/camera2/CameraManager$TorchCallback;Landroid/os/Handler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/CameraManager\0", "registerTorchCallback\0", "(Landroid/hardware/camera2/CameraManager$TorchCallback;Landroid/os/Handler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [registerTorchCallback](https://developer.android.com/reference/android/hardware/camera2/CameraManager.html#registerTorchCallback(java.util.concurrent.Executor,%20android.hardware.camera2.CameraManager.TorchCallback))
        ///
        /// Required features: "android-hardware-camera2-CameraManager_TorchCallback", "java-util-concurrent-Executor"
        #[cfg(any(feature = "all", all(feature = "android-hardware-camera2-CameraManager_TorchCallback", feature = "java-util-concurrent-Executor")))]
        pub fn registerTorchCallback_Executor_TorchCallback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::hardware::camera2::CameraManager_TorchCallback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/camera2/CameraManager", java.flags == PUBLIC, .name == "registerTorchCallback", .descriptor == "(Ljava/util/concurrent/Executor;Landroid/hardware/camera2/CameraManager$TorchCallback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/CameraManager\0", "registerTorchCallback\0", "(Ljava/util/concurrent/Executor;Landroid/hardware/camera2/CameraManager$TorchCallback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unregisterTorchCallback](https://developer.android.com/reference/android/hardware/camera2/CameraManager.html#unregisterTorchCallback(android.hardware.camera2.CameraManager.TorchCallback))
        ///
        /// Required features: "android-hardware-camera2-CameraManager_TorchCallback"
        #[cfg(any(feature = "all", all(feature = "android-hardware-camera2-CameraManager_TorchCallback")))]
        pub fn unregisterTorchCallback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::hardware::camera2::CameraManager_TorchCallback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/camera2/CameraManager", java.flags == PUBLIC, .name == "unregisterTorchCallback", .descriptor == "(Landroid/hardware/camera2/CameraManager$TorchCallback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/CameraManager\0", "unregisterTorchCallback\0", "(Landroid/hardware/camera2/CameraManager$TorchCallback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCameraCharacteristics](https://developer.android.com/reference/android/hardware/camera2/CameraManager.html#getCameraCharacteristics(java.lang.String))
        ///
        /// Required features: "android-hardware-camera2-CameraCharacteristics", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-hardware-camera2-CameraCharacteristics", feature = "java-lang-String")))]
        pub fn getCameraCharacteristics<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::hardware::camera2::CameraCharacteristics>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/camera2/CameraManager", java.flags == PUBLIC, .name == "getCameraCharacteristics", .descriptor == "(Ljava/lang/String;)Landroid/hardware/camera2/CameraCharacteristics;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/CameraManager\0", "getCameraCharacteristics\0", "(Ljava/lang/String;)Landroid/hardware/camera2/CameraCharacteristics;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [openCamera](https://developer.android.com/reference/android/hardware/camera2/CameraManager.html#openCamera(java.lang.String,%20android.hardware.camera2.CameraDevice.StateCallback,%20android.os.Handler))
        ///
        /// Required features: "android-hardware-camera2-CameraDevice_StateCallback", "android-os-Handler", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-hardware-camera2-CameraDevice_StateCallback", feature = "android-os-Handler", feature = "java-lang-String")))]
        pub fn openCamera_String_StateCallback_Handler<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::hardware::camera2::CameraDevice_StateCallback>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/camera2/CameraManager", java.flags == PUBLIC, .name == "openCamera", .descriptor == "(Ljava/lang/String;Landroid/hardware/camera2/CameraDevice$StateCallback;Landroid/os/Handler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/CameraManager\0", "openCamera\0", "(Ljava/lang/String;Landroid/hardware/camera2/CameraDevice$StateCallback;Landroid/os/Handler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [openCamera](https://developer.android.com/reference/android/hardware/camera2/CameraManager.html#openCamera(java.lang.String,%20java.util.concurrent.Executor,%20android.hardware.camera2.CameraDevice.StateCallback))
        ///
        /// Required features: "android-hardware-camera2-CameraDevice_StateCallback", "java-lang-String", "java-util-concurrent-Executor"
        #[cfg(any(feature = "all", all(feature = "android-hardware-camera2-CameraDevice_StateCallback", feature = "java-lang-String", feature = "java-util-concurrent-Executor")))]
        pub fn openCamera_String_Executor_StateCallback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::hardware::camera2::CameraDevice_StateCallback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/camera2/CameraManager", java.flags == PUBLIC, .name == "openCamera", .descriptor == "(Ljava/lang/String;Ljava/util/concurrent/Executor;Landroid/hardware/camera2/CameraDevice$StateCallback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/CameraManager\0", "openCamera\0", "(Ljava/lang/String;Ljava/util/concurrent/Executor;Landroid/hardware/camera2/CameraDevice$StateCallback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTorchMode](https://developer.android.com/reference/android/hardware/camera2/CameraManager.html#setTorchMode(java.lang.String,%20boolean))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn setTorchMode<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/camera2/CameraManager", java.flags == PUBLIC, .name == "setTorchMode", .descriptor == "(Ljava/lang/String;Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/camera2/CameraManager\0", "setTorchMode\0", "(Ljava/lang/String;Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
