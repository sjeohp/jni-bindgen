// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-hardware-ConsumerIrManager"))]
__jni_bindgen! {
    /// public final class [ConsumerIrManager](https://developer.android.com/reference/android/hardware/ConsumerIrManager.html)
    ///
    /// Required feature: android-hardware-ConsumerIrManager
    public final class ConsumerIrManager ("android/hardware/ConsumerIrManager") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [ConsumerIrManager](https://developer.android.com/reference/android/hardware/ConsumerIrManager.html#ConsumerIrManager())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::hardware::ConsumerIrManager>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/hardware/ConsumerIrManager", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/ConsumerIrManager\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [hasIrEmitter](https://developer.android.com/reference/android/hardware/ConsumerIrManager.html#hasIrEmitter())
        pub fn hasIrEmitter<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/ConsumerIrManager", java.flags == PUBLIC, .name == "hasIrEmitter", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/ConsumerIrManager\0", "hasIrEmitter\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [transmit](https://developer.android.com/reference/android/hardware/ConsumerIrManager.html#transmit(int,%20int%5B%5D))
        pub fn transmit<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/ConsumerIrManager", java.flags == PUBLIC, .name == "transmit", .descriptor == "(I[I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/ConsumerIrManager\0", "transmit\0", "(I[I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCarrierFrequencies](https://developer.android.com/reference/android/hardware/ConsumerIrManager.html#getCarrierFrequencies())
        ///
        /// Required features: "android-hardware-ConsumerIrManager_CarrierFrequencyRange"
        #[cfg(any(feature = "all", all(feature = "android-hardware-ConsumerIrManager_CarrierFrequencyRange")))]
        pub fn getCarrierFrequencies<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::android::hardware::ConsumerIrManager_CarrierFrequencyRange, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/ConsumerIrManager", java.flags == PUBLIC, .name == "getCarrierFrequencies", .descriptor == "()[Landroid/hardware/ConsumerIrManager$CarrierFrequencyRange;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/ConsumerIrManager\0", "getCarrierFrequencies\0", "()[Landroid/hardware/ConsumerIrManager$CarrierFrequencyRange;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
