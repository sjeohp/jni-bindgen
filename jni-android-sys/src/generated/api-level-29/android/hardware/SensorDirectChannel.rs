// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-hardware-SensorDirectChannel"))]
__jni_bindgen! {
    /// public final class [SensorDirectChannel](https://developer.android.com/reference/android/hardware/SensorDirectChannel.html)
    ///
    /// Required feature: android-hardware-SensorDirectChannel
    public final class SensorDirectChannel ("android/hardware/SensorDirectChannel") extends crate::java::lang::Object, implements crate::java::nio::channels::Channel {

        // // Not emitting: Non-public method
        // /// [SensorDirectChannel](https://developer.android.com/reference/android/hardware/SensorDirectChannel.html#SensorDirectChannel(android.hardware.SensorManager,%20int,%20int,%20long))
        // ///
        // /// Required features: "android-hardware-SensorManager"
        // #[cfg(any(feature = "all", all(feature = "android-hardware-SensorManager")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::hardware::SensorManager>>, arg1: i32, arg2: i32, arg3: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::hardware::SensorDirectChannel>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/hardware/SensorDirectChannel", java.flags == (empty), .name == "<init>", .descriptor == "(Landroid/hardware/SensorManager;IIJ)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/SensorDirectChannel\0", "<init>\0", "(Landroid/hardware/SensorManager;IIJ)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [isOpen](https://developer.android.com/reference/android/hardware/SensorDirectChannel.html#isOpen())
        pub fn isOpen<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/SensorDirectChannel", java.flags == PUBLIC, .name == "isOpen", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/SensorDirectChannel\0", "isOpen\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [close](https://developer.android.com/reference/android/hardware/SensorDirectChannel.html#close())
        pub fn close<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/SensorDirectChannel", java.flags == PUBLIC, .name == "close", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/SensorDirectChannel\0", "close\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [configure](https://developer.android.com/reference/android/hardware/SensorDirectChannel.html#configure(android.hardware.Sensor,%20int))
        ///
        /// Required features: "android-hardware-Sensor"
        #[cfg(any(feature = "all", all(feature = "android-hardware-Sensor")))]
        pub fn configure<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::hardware::Sensor>>, arg1: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/SensorDirectChannel", java.flags == PUBLIC, .name == "configure", .descriptor == "(Landroid/hardware/Sensor;I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/SensorDirectChannel\0", "configure\0", "(Landroid/hardware/Sensor;I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [finalize](https://developer.android.com/reference/android/hardware/SensorDirectChannel.html#finalize())
        // fn finalize<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/hardware/SensorDirectChannel", java.flags == PROTECTED, .name == "finalize", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/SensorDirectChannel\0", "finalize\0", "()V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// public static final [RATE_FAST](https://developer.android.com/reference/android/hardware/SensorDirectChannel.html#RATE_FAST)
        pub const RATE_FAST : i32 = 2;

        /// public static final [RATE_NORMAL](https://developer.android.com/reference/android/hardware/SensorDirectChannel.html#RATE_NORMAL)
        pub const RATE_NORMAL : i32 = 1;

        /// public static final [RATE_STOP](https://developer.android.com/reference/android/hardware/SensorDirectChannel.html#RATE_STOP)
        pub const RATE_STOP : i32 = 0;

        /// public static final [RATE_VERY_FAST](https://developer.android.com/reference/android/hardware/SensorDirectChannel.html#RATE_VERY_FAST)
        pub const RATE_VERY_FAST : i32 = 3;

        /// public static final [TYPE_HARDWARE_BUFFER](https://developer.android.com/reference/android/hardware/SensorDirectChannel.html#TYPE_HARDWARE_BUFFER)
        pub const TYPE_HARDWARE_BUFFER : i32 = 2;

        /// public static final [TYPE_MEMORY_FILE](https://developer.android.com/reference/android/hardware/SensorDirectChannel.html#TYPE_MEMORY_FILE)
        pub const TYPE_MEMORY_FILE : i32 = 1;
    }
}
