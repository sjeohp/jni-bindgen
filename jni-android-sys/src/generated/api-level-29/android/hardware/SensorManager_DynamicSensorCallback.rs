// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-hardware-SensorManager_DynamicSensorCallback"))]
__jni_bindgen! {
    /// public class [SensorManager.DynamicSensorCallback](https://developer.android.com/reference/android/hardware/SensorManager.DynamicSensorCallback.html)
    ///
    /// Required feature: android-hardware-SensorManager_DynamicSensorCallback
    public class SensorManager_DynamicSensorCallback ("android/hardware/SensorManager$DynamicSensorCallback") extends crate::java::lang::Object {

        /// [DynamicSensorCallback](https://developer.android.com/reference/android/hardware/SensorManager.DynamicSensorCallback.html#DynamicSensorCallback())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::hardware::SensorManager_DynamicSensorCallback>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/SensorManager$DynamicSensorCallback", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/SensorManager$DynamicSensorCallback\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onDynamicSensorConnected](https://developer.android.com/reference/android/hardware/SensorManager.DynamicSensorCallback.html#onDynamicSensorConnected(android.hardware.Sensor))
        ///
        /// Required features: "android-hardware-Sensor"
        #[cfg(any(feature = "all", all(feature = "android-hardware-Sensor")))]
        pub fn onDynamicSensorConnected<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::hardware::Sensor>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/SensorManager$DynamicSensorCallback", java.flags == PUBLIC, .name == "onDynamicSensorConnected", .descriptor == "(Landroid/hardware/Sensor;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/SensorManager$DynamicSensorCallback\0", "onDynamicSensorConnected\0", "(Landroid/hardware/Sensor;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onDynamicSensorDisconnected](https://developer.android.com/reference/android/hardware/SensorManager.DynamicSensorCallback.html#onDynamicSensorDisconnected(android.hardware.Sensor))
        ///
        /// Required features: "android-hardware-Sensor"
        #[cfg(any(feature = "all", all(feature = "android-hardware-Sensor")))]
        pub fn onDynamicSensorDisconnected<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::hardware::Sensor>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/SensorManager$DynamicSensorCallback", java.flags == PUBLIC, .name == "onDynamicSensorDisconnected", .descriptor == "(Landroid/hardware/Sensor;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/SensorManager$DynamicSensorCallback\0", "onDynamicSensorDisconnected\0", "(Landroid/hardware/Sensor;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
