// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-hardware-input-InputManager"))]
__jni_bindgen! {
    /// public final class [InputManager](https://developer.android.com/reference/android/hardware/input/InputManager.html)
    ///
    /// Required feature: android-hardware-input-InputManager
    public final class InputManager ("android/hardware/input/InputManager") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [InputManager](https://developer.android.com/reference/android/hardware/input/InputManager.html#InputManager())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::hardware::input::InputManager>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/hardware/input/InputManager", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/input/InputManager\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getInputDevice](https://developer.android.com/reference/android/hardware/input/InputManager.html#getInputDevice(int))
        ///
        /// Required features: "android-view-InputDevice"
        #[cfg(any(feature = "all", all(feature = "android-view-InputDevice")))]
        pub fn getInputDevice<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::InputDevice>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/input/InputManager", java.flags == PUBLIC, .name == "getInputDevice", .descriptor == "(I)Landroid/view/InputDevice;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/input/InputManager\0", "getInputDevice\0", "(I)Landroid/view/InputDevice;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInputDeviceIds](https://developer.android.com/reference/android/hardware/input/InputManager.html#getInputDeviceIds())
        pub fn getInputDeviceIds<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::IntArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/input/InputManager", java.flags == PUBLIC, .name == "getInputDeviceIds", .descriptor == "()[I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/input/InputManager\0", "getInputDeviceIds\0", "()[I\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [registerInputDeviceListener](https://developer.android.com/reference/android/hardware/input/InputManager.html#registerInputDeviceListener(android.hardware.input.InputManager.InputDeviceListener,%20android.os.Handler))
        ///
        /// Required features: "android-hardware-input-InputManager_InputDeviceListener", "android-os-Handler"
        #[cfg(any(feature = "all", all(feature = "android-hardware-input-InputManager_InputDeviceListener", feature = "android-os-Handler")))]
        pub fn registerInputDeviceListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::hardware::input::InputManager_InputDeviceListener>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/input/InputManager", java.flags == PUBLIC, .name == "registerInputDeviceListener", .descriptor == "(Landroid/hardware/input/InputManager$InputDeviceListener;Landroid/os/Handler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/input/InputManager\0", "registerInputDeviceListener\0", "(Landroid/hardware/input/InputManager$InputDeviceListener;Landroid/os/Handler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unregisterInputDeviceListener](https://developer.android.com/reference/android/hardware/input/InputManager.html#unregisterInputDeviceListener(android.hardware.input.InputManager.InputDeviceListener))
        ///
        /// Required features: "android-hardware-input-InputManager_InputDeviceListener"
        #[cfg(any(feature = "all", all(feature = "android-hardware-input-InputManager_InputDeviceListener")))]
        pub fn unregisterInputDeviceListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::hardware::input::InputManager_InputDeviceListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/input/InputManager", java.flags == PUBLIC, .name == "unregisterInputDeviceListener", .descriptor == "(Landroid/hardware/input/InputManager$InputDeviceListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/input/InputManager\0", "unregisterInputDeviceListener\0", "(Landroid/hardware/input/InputManager$InputDeviceListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [ACTION_QUERY_KEYBOARD_LAYOUTS](https://developer.android.com/reference/android/hardware/input/InputManager.html#ACTION_QUERY_KEYBOARD_LAYOUTS)
        pub const ACTION_QUERY_KEYBOARD_LAYOUTS : &'static str = "android.hardware.input.action.QUERY_KEYBOARD_LAYOUTS";

        /// public static final [META_DATA_KEYBOARD_LAYOUTS](https://developer.android.com/reference/android/hardware/input/InputManager.html#META_DATA_KEYBOARD_LAYOUTS)
        pub const META_DATA_KEYBOARD_LAYOUTS : &'static str = "android.hardware.input.metadata.KEYBOARD_LAYOUTS";
    }
}
