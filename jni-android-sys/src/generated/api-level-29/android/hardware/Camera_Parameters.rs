// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-hardware-Camera_Parameters"))]
__jni_bindgen! {
    /// public class [Camera.Parameters](https://developer.android.com/reference/android/hardware/Camera.Parameters.html)
    ///
    /// Required feature: android-hardware-Camera_Parameters
    #[deprecated] public class Camera_Parameters ("android/hardware/Camera$Parameters") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [Parameters](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#Parameters(android.hardware.Camera))
        // ///
        // /// Required features: "android-hardware-Camera"
        // #[cfg(any(feature = "all", all(feature = "android-hardware-Camera")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::hardware::Camera>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::hardware::Camera_Parameters>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/hardware/Camera$Parameters", java.flags == (empty), .name == "<init>", .descriptor == "(Landroid/hardware/Camera;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "<init>\0", "(Landroid/hardware/Camera;)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [flatten](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#flatten())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        #[deprecated] pub fn flatten<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "flatten", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "flatten\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unflatten](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#unflatten(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        #[deprecated] pub fn unflatten<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "unflatten", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "unflatten\0", "(Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [remove](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#remove(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        #[deprecated] pub fn remove<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "remove", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "remove\0", "(Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [set](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#set(java.lang.String,%20java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        #[deprecated] pub fn set_String_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "set", .descriptor == "(Ljava/lang/String;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "set\0", "(Ljava/lang/String;Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [set](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#set(java.lang.String,%20int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        #[deprecated] pub fn set_String_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "set", .descriptor == "(Ljava/lang/String;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "set\0", "(Ljava/lang/String;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [get](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#get(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        #[deprecated] pub fn get<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "get", .descriptor == "(Ljava/lang/String;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "get\0", "(Ljava/lang/String;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInt](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#getInt(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        #[deprecated] pub fn getInt<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "getInt", .descriptor == "(Ljava/lang/String;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "getInt\0", "(Ljava/lang/String;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPreviewSize](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#setPreviewSize(int,%20int))
        #[deprecated] pub fn setPreviewSize<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "setPreviewSize", .descriptor == "(II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "setPreviewSize\0", "(II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPreviewSize](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#getPreviewSize())
        ///
        /// Required features: "android-hardware-Camera_Size"
        #[cfg(any(feature = "all", all(feature = "android-hardware-Camera_Size")))]
        #[deprecated] pub fn getPreviewSize<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::hardware::Camera_Size>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "getPreviewSize", .descriptor == "()Landroid/hardware/Camera$Size;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "getPreviewSize\0", "()Landroid/hardware/Camera$Size;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSupportedPreviewSizes](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#getSupportedPreviewSizes())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        #[deprecated] pub fn getSupportedPreviewSizes<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "getSupportedPreviewSizes", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "getSupportedPreviewSizes\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSupportedVideoSizes](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#getSupportedVideoSizes())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        #[deprecated] pub fn getSupportedVideoSizes<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "getSupportedVideoSizes", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "getSupportedVideoSizes\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPreferredPreviewSizeForVideo](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#getPreferredPreviewSizeForVideo())
        ///
        /// Required features: "android-hardware-Camera_Size"
        #[cfg(any(feature = "all", all(feature = "android-hardware-Camera_Size")))]
        #[deprecated] pub fn getPreferredPreviewSizeForVideo<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::hardware::Camera_Size>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "getPreferredPreviewSizeForVideo", .descriptor == "()Landroid/hardware/Camera$Size;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "getPreferredPreviewSizeForVideo\0", "()Landroid/hardware/Camera$Size;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setJpegThumbnailSize](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#setJpegThumbnailSize(int,%20int))
        #[deprecated] pub fn setJpegThumbnailSize<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "setJpegThumbnailSize", .descriptor == "(II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "setJpegThumbnailSize\0", "(II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getJpegThumbnailSize](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#getJpegThumbnailSize())
        ///
        /// Required features: "android-hardware-Camera_Size"
        #[cfg(any(feature = "all", all(feature = "android-hardware-Camera_Size")))]
        #[deprecated] pub fn getJpegThumbnailSize<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::hardware::Camera_Size>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "getJpegThumbnailSize", .descriptor == "()Landroid/hardware/Camera$Size;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "getJpegThumbnailSize\0", "()Landroid/hardware/Camera$Size;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSupportedJpegThumbnailSizes](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#getSupportedJpegThumbnailSizes())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        #[deprecated] pub fn getSupportedJpegThumbnailSizes<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "getSupportedJpegThumbnailSizes", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "getSupportedJpegThumbnailSizes\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setJpegThumbnailQuality](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#setJpegThumbnailQuality(int))
        #[deprecated] pub fn setJpegThumbnailQuality<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "setJpegThumbnailQuality", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "setJpegThumbnailQuality\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getJpegThumbnailQuality](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#getJpegThumbnailQuality())
        #[deprecated] pub fn getJpegThumbnailQuality<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "getJpegThumbnailQuality", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "getJpegThumbnailQuality\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setJpegQuality](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#setJpegQuality(int))
        #[deprecated] pub fn setJpegQuality<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "setJpegQuality", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "setJpegQuality\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getJpegQuality](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#getJpegQuality())
        #[deprecated] pub fn getJpegQuality<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "getJpegQuality", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "getJpegQuality\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPreviewFrameRate](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#setPreviewFrameRate(int))
        #[deprecated] pub fn setPreviewFrameRate<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "setPreviewFrameRate", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "setPreviewFrameRate\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPreviewFrameRate](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#getPreviewFrameRate())
        #[deprecated] pub fn getPreviewFrameRate<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "getPreviewFrameRate", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "getPreviewFrameRate\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSupportedPreviewFrameRates](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#getSupportedPreviewFrameRates())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        #[deprecated] pub fn getSupportedPreviewFrameRates<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "getSupportedPreviewFrameRates", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "getSupportedPreviewFrameRates\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPreviewFpsRange](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#setPreviewFpsRange(int,%20int))
        #[deprecated] pub fn setPreviewFpsRange<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "setPreviewFpsRange", .descriptor == "(II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "setPreviewFpsRange\0", "(II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPreviewFpsRange](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#getPreviewFpsRange(int%5B%5D))
        #[deprecated] pub fn getPreviewFpsRange<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "getPreviewFpsRange", .descriptor == "([I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "getPreviewFpsRange\0", "([I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSupportedPreviewFpsRange](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#getSupportedPreviewFpsRange())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        #[deprecated] pub fn getSupportedPreviewFpsRange<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "getSupportedPreviewFpsRange", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "getSupportedPreviewFpsRange\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPreviewFormat](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#setPreviewFormat(int))
        #[deprecated] pub fn setPreviewFormat<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "setPreviewFormat", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "setPreviewFormat\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPreviewFormat](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#getPreviewFormat())
        #[deprecated] pub fn getPreviewFormat<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "getPreviewFormat", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "getPreviewFormat\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSupportedPreviewFormats](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#getSupportedPreviewFormats())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        #[deprecated] pub fn getSupportedPreviewFormats<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "getSupportedPreviewFormats", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "getSupportedPreviewFormats\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPictureSize](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#setPictureSize(int,%20int))
        #[deprecated] pub fn setPictureSize<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "setPictureSize", .descriptor == "(II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "setPictureSize\0", "(II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPictureSize](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#getPictureSize())
        ///
        /// Required features: "android-hardware-Camera_Size"
        #[cfg(any(feature = "all", all(feature = "android-hardware-Camera_Size")))]
        #[deprecated] pub fn getPictureSize<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::hardware::Camera_Size>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "getPictureSize", .descriptor == "()Landroid/hardware/Camera$Size;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "getPictureSize\0", "()Landroid/hardware/Camera$Size;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSupportedPictureSizes](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#getSupportedPictureSizes())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        #[deprecated] pub fn getSupportedPictureSizes<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "getSupportedPictureSizes", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "getSupportedPictureSizes\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPictureFormat](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#setPictureFormat(int))
        #[deprecated] pub fn setPictureFormat<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "setPictureFormat", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "setPictureFormat\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPictureFormat](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#getPictureFormat())
        #[deprecated] pub fn getPictureFormat<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "getPictureFormat", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "getPictureFormat\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSupportedPictureFormats](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#getSupportedPictureFormats())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        #[deprecated] pub fn getSupportedPictureFormats<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "getSupportedPictureFormats", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "getSupportedPictureFormats\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setRotation](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#setRotation(int))
        #[deprecated] pub fn setRotation<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "setRotation", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "setRotation\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setGpsLatitude](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#setGpsLatitude(double))
        #[deprecated] pub fn setGpsLatitude<'env>(&'env self, arg0: f64) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "setGpsLatitude", .descriptor == "(D)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "setGpsLatitude\0", "(D)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setGpsLongitude](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#setGpsLongitude(double))
        #[deprecated] pub fn setGpsLongitude<'env>(&'env self, arg0: f64) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "setGpsLongitude", .descriptor == "(D)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "setGpsLongitude\0", "(D)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setGpsAltitude](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#setGpsAltitude(double))
        #[deprecated] pub fn setGpsAltitude<'env>(&'env self, arg0: f64) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "setGpsAltitude", .descriptor == "(D)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "setGpsAltitude\0", "(D)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setGpsTimestamp](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#setGpsTimestamp(long))
        #[deprecated] pub fn setGpsTimestamp<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "setGpsTimestamp", .descriptor == "(J)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "setGpsTimestamp\0", "(J)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setGpsProcessingMethod](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#setGpsProcessingMethod(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        #[deprecated] pub fn setGpsProcessingMethod<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "setGpsProcessingMethod", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "setGpsProcessingMethod\0", "(Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeGpsData](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#removeGpsData())
        #[deprecated] pub fn removeGpsData<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "removeGpsData", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "removeGpsData\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getWhiteBalance](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#getWhiteBalance())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        #[deprecated] pub fn getWhiteBalance<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "getWhiteBalance", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "getWhiteBalance\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setWhiteBalance](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#setWhiteBalance(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        #[deprecated] pub fn setWhiteBalance<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "setWhiteBalance", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "setWhiteBalance\0", "(Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSupportedWhiteBalance](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#getSupportedWhiteBalance())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        #[deprecated] pub fn getSupportedWhiteBalance<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "getSupportedWhiteBalance", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "getSupportedWhiteBalance\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getColorEffect](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#getColorEffect())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        #[deprecated] pub fn getColorEffect<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "getColorEffect", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "getColorEffect\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setColorEffect](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#setColorEffect(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        #[deprecated] pub fn setColorEffect<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "setColorEffect", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "setColorEffect\0", "(Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSupportedColorEffects](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#getSupportedColorEffects())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        #[deprecated] pub fn getSupportedColorEffects<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "getSupportedColorEffects", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "getSupportedColorEffects\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAntibanding](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#getAntibanding())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        #[deprecated] pub fn getAntibanding<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "getAntibanding", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "getAntibanding\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAntibanding](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#setAntibanding(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        #[deprecated] pub fn setAntibanding<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "setAntibanding", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "setAntibanding\0", "(Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSupportedAntibanding](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#getSupportedAntibanding())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        #[deprecated] pub fn getSupportedAntibanding<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "getSupportedAntibanding", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "getSupportedAntibanding\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSceneMode](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#getSceneMode())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        #[deprecated] pub fn getSceneMode<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "getSceneMode", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "getSceneMode\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setSceneMode](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#setSceneMode(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        #[deprecated] pub fn setSceneMode<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "setSceneMode", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "setSceneMode\0", "(Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSupportedSceneModes](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#getSupportedSceneModes())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        #[deprecated] pub fn getSupportedSceneModes<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "getSupportedSceneModes", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "getSupportedSceneModes\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFlashMode](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#getFlashMode())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        #[deprecated] pub fn getFlashMode<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "getFlashMode", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "getFlashMode\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setFlashMode](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#setFlashMode(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        #[deprecated] pub fn setFlashMode<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "setFlashMode", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "setFlashMode\0", "(Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSupportedFlashModes](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#getSupportedFlashModes())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        #[deprecated] pub fn getSupportedFlashModes<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "getSupportedFlashModes", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "getSupportedFlashModes\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFocusMode](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#getFocusMode())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        #[deprecated] pub fn getFocusMode<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "getFocusMode", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "getFocusMode\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setFocusMode](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#setFocusMode(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        #[deprecated] pub fn setFocusMode<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "setFocusMode", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "setFocusMode\0", "(Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSupportedFocusModes](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#getSupportedFocusModes())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        #[deprecated] pub fn getSupportedFocusModes<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "getSupportedFocusModes", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "getSupportedFocusModes\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFocalLength](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#getFocalLength())
        #[deprecated] pub fn getFocalLength<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "getFocalLength", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "getFocalLength\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getHorizontalViewAngle](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#getHorizontalViewAngle())
        #[deprecated] pub fn getHorizontalViewAngle<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "getHorizontalViewAngle", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "getHorizontalViewAngle\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getVerticalViewAngle](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#getVerticalViewAngle())
        #[deprecated] pub fn getVerticalViewAngle<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "getVerticalViewAngle", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "getVerticalViewAngle\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getExposureCompensation](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#getExposureCompensation())
        #[deprecated] pub fn getExposureCompensation<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "getExposureCompensation", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "getExposureCompensation\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setExposureCompensation](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#setExposureCompensation(int))
        #[deprecated] pub fn setExposureCompensation<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "setExposureCompensation", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "setExposureCompensation\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMaxExposureCompensation](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#getMaxExposureCompensation())
        #[deprecated] pub fn getMaxExposureCompensation<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "getMaxExposureCompensation", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "getMaxExposureCompensation\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMinExposureCompensation](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#getMinExposureCompensation())
        #[deprecated] pub fn getMinExposureCompensation<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "getMinExposureCompensation", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "getMinExposureCompensation\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getExposureCompensationStep](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#getExposureCompensationStep())
        #[deprecated] pub fn getExposureCompensationStep<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "getExposureCompensationStep", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "getExposureCompensationStep\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAutoExposureLock](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#setAutoExposureLock(boolean))
        #[deprecated] pub fn setAutoExposureLock<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "setAutoExposureLock", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "setAutoExposureLock\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAutoExposureLock](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#getAutoExposureLock())
        #[deprecated] pub fn getAutoExposureLock<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "getAutoExposureLock", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "getAutoExposureLock\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isAutoExposureLockSupported](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#isAutoExposureLockSupported())
        #[deprecated] pub fn isAutoExposureLockSupported<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "isAutoExposureLockSupported", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "isAutoExposureLockSupported\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAutoWhiteBalanceLock](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#setAutoWhiteBalanceLock(boolean))
        #[deprecated] pub fn setAutoWhiteBalanceLock<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "setAutoWhiteBalanceLock", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "setAutoWhiteBalanceLock\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAutoWhiteBalanceLock](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#getAutoWhiteBalanceLock())
        #[deprecated] pub fn getAutoWhiteBalanceLock<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "getAutoWhiteBalanceLock", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "getAutoWhiteBalanceLock\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isAutoWhiteBalanceLockSupported](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#isAutoWhiteBalanceLockSupported())
        #[deprecated] pub fn isAutoWhiteBalanceLockSupported<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "isAutoWhiteBalanceLockSupported", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "isAutoWhiteBalanceLockSupported\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getZoom](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#getZoom())
        #[deprecated] pub fn getZoom<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "getZoom", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "getZoom\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setZoom](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#setZoom(int))
        #[deprecated] pub fn setZoom<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "setZoom", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "setZoom\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isZoomSupported](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#isZoomSupported())
        #[deprecated] pub fn isZoomSupported<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "isZoomSupported", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "isZoomSupported\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMaxZoom](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#getMaxZoom())
        #[deprecated] pub fn getMaxZoom<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "getMaxZoom", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "getMaxZoom\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getZoomRatios](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#getZoomRatios())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        #[deprecated] pub fn getZoomRatios<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "getZoomRatios", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "getZoomRatios\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isSmoothZoomSupported](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#isSmoothZoomSupported())
        #[deprecated] pub fn isSmoothZoomSupported<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "isSmoothZoomSupported", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "isSmoothZoomSupported\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFocusDistances](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#getFocusDistances(float%5B%5D))
        #[deprecated] pub fn getFocusDistances<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "getFocusDistances", .descriptor == "([F)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "getFocusDistances\0", "([F)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMaxNumFocusAreas](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#getMaxNumFocusAreas())
        #[deprecated] pub fn getMaxNumFocusAreas<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "getMaxNumFocusAreas", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "getMaxNumFocusAreas\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFocusAreas](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#getFocusAreas())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        #[deprecated] pub fn getFocusAreas<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "getFocusAreas", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "getFocusAreas\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setFocusAreas](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#setFocusAreas(java.util.List))
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        #[deprecated] pub fn setFocusAreas<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "setFocusAreas", .descriptor == "(Ljava/util/List;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "setFocusAreas\0", "(Ljava/util/List;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMaxNumMeteringAreas](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#getMaxNumMeteringAreas())
        #[deprecated] pub fn getMaxNumMeteringAreas<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "getMaxNumMeteringAreas", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "getMaxNumMeteringAreas\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMeteringAreas](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#getMeteringAreas())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        #[deprecated] pub fn getMeteringAreas<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "getMeteringAreas", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "getMeteringAreas\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setMeteringAreas](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#setMeteringAreas(java.util.List))
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        #[deprecated] pub fn setMeteringAreas<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "setMeteringAreas", .descriptor == "(Ljava/util/List;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "setMeteringAreas\0", "(Ljava/util/List;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMaxNumDetectedFaces](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#getMaxNumDetectedFaces())
        #[deprecated] pub fn getMaxNumDetectedFaces<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "getMaxNumDetectedFaces", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "getMaxNumDetectedFaces\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setRecordingHint](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#setRecordingHint(boolean))
        #[deprecated] pub fn setRecordingHint<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "setRecordingHint", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "setRecordingHint\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isVideoSnapshotSupported](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#isVideoSnapshotSupported())
        #[deprecated] pub fn isVideoSnapshotSupported<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "isVideoSnapshotSupported", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "isVideoSnapshotSupported\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setVideoStabilization](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#setVideoStabilization(boolean))
        #[deprecated] pub fn setVideoStabilization<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "setVideoStabilization", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "setVideoStabilization\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getVideoStabilization](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#getVideoStabilization())
        #[deprecated] pub fn getVideoStabilization<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "getVideoStabilization", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "getVideoStabilization\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isVideoStabilizationSupported](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#isVideoStabilizationSupported())
        #[deprecated] pub fn isVideoStabilizationSupported<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera$Parameters", java.flags == PUBLIC, .name == "isVideoStabilizationSupported", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera$Parameters\0", "isVideoStabilizationSupported\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [ANTIBANDING_50HZ](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#ANTIBANDING_50HZ)
        #[deprecated] pub const ANTIBANDING_50HZ : &'static str = "50hz";

        /// public static final [ANTIBANDING_60HZ](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#ANTIBANDING_60HZ)
        #[deprecated] pub const ANTIBANDING_60HZ : &'static str = "60hz";

        /// public static final [ANTIBANDING_AUTO](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#ANTIBANDING_AUTO)
        #[deprecated] pub const ANTIBANDING_AUTO : &'static str = "auto";

        /// public static final [ANTIBANDING_OFF](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#ANTIBANDING_OFF)
        #[deprecated] pub const ANTIBANDING_OFF : &'static str = "off";

        /// public static final [EFFECT_AQUA](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#EFFECT_AQUA)
        #[deprecated] pub const EFFECT_AQUA : &'static str = "aqua";

        /// public static final [EFFECT_BLACKBOARD](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#EFFECT_BLACKBOARD)
        #[deprecated] pub const EFFECT_BLACKBOARD : &'static str = "blackboard";

        /// public static final [EFFECT_MONO](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#EFFECT_MONO)
        #[deprecated] pub const EFFECT_MONO : &'static str = "mono";

        /// public static final [EFFECT_NEGATIVE](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#EFFECT_NEGATIVE)
        #[deprecated] pub const EFFECT_NEGATIVE : &'static str = "negative";

        /// public static final [EFFECT_NONE](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#EFFECT_NONE)
        #[deprecated] pub const EFFECT_NONE : &'static str = "none";

        /// public static final [EFFECT_POSTERIZE](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#EFFECT_POSTERIZE)
        #[deprecated] pub const EFFECT_POSTERIZE : &'static str = "posterize";

        /// public static final [EFFECT_SEPIA](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#EFFECT_SEPIA)
        #[deprecated] pub const EFFECT_SEPIA : &'static str = "sepia";

        /// public static final [EFFECT_SOLARIZE](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#EFFECT_SOLARIZE)
        #[deprecated] pub const EFFECT_SOLARIZE : &'static str = "solarize";

        /// public static final [EFFECT_WHITEBOARD](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#EFFECT_WHITEBOARD)
        #[deprecated] pub const EFFECT_WHITEBOARD : &'static str = "whiteboard";

        /// public static final [FLASH_MODE_AUTO](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#FLASH_MODE_AUTO)
        #[deprecated] pub const FLASH_MODE_AUTO : &'static str = "auto";

        /// public static final [FLASH_MODE_OFF](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#FLASH_MODE_OFF)
        #[deprecated] pub const FLASH_MODE_OFF : &'static str = "off";

        /// public static final [FLASH_MODE_ON](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#FLASH_MODE_ON)
        #[deprecated] pub const FLASH_MODE_ON : &'static str = "on";

        /// public static final [FLASH_MODE_RED_EYE](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#FLASH_MODE_RED_EYE)
        #[deprecated] pub const FLASH_MODE_RED_EYE : &'static str = "red-eye";

        /// public static final [FLASH_MODE_TORCH](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#FLASH_MODE_TORCH)
        #[deprecated] pub const FLASH_MODE_TORCH : &'static str = "torch";

        /// public static final [FOCUS_DISTANCE_FAR_INDEX](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#FOCUS_DISTANCE_FAR_INDEX)
        #[deprecated] pub const FOCUS_DISTANCE_FAR_INDEX : i32 = 2;

        /// public static final [FOCUS_DISTANCE_NEAR_INDEX](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#FOCUS_DISTANCE_NEAR_INDEX)
        #[deprecated] pub const FOCUS_DISTANCE_NEAR_INDEX : i32 = 0;

        /// public static final [FOCUS_DISTANCE_OPTIMAL_INDEX](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#FOCUS_DISTANCE_OPTIMAL_INDEX)
        #[deprecated] pub const FOCUS_DISTANCE_OPTIMAL_INDEX : i32 = 1;

        /// public static final [FOCUS_MODE_AUTO](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#FOCUS_MODE_AUTO)
        #[deprecated] pub const FOCUS_MODE_AUTO : &'static str = "auto";

        /// public static final [FOCUS_MODE_CONTINUOUS_PICTURE](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#FOCUS_MODE_CONTINUOUS_PICTURE)
        #[deprecated] pub const FOCUS_MODE_CONTINUOUS_PICTURE : &'static str = "continuous-picture";

        /// public static final [FOCUS_MODE_CONTINUOUS_VIDEO](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#FOCUS_MODE_CONTINUOUS_VIDEO)
        #[deprecated] pub const FOCUS_MODE_CONTINUOUS_VIDEO : &'static str = "continuous-video";

        /// public static final [FOCUS_MODE_EDOF](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#FOCUS_MODE_EDOF)
        #[deprecated] pub const FOCUS_MODE_EDOF : &'static str = "edof";

        /// public static final [FOCUS_MODE_FIXED](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#FOCUS_MODE_FIXED)
        #[deprecated] pub const FOCUS_MODE_FIXED : &'static str = "fixed";

        /// public static final [FOCUS_MODE_INFINITY](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#FOCUS_MODE_INFINITY)
        #[deprecated] pub const FOCUS_MODE_INFINITY : &'static str = "infinity";

        /// public static final [FOCUS_MODE_MACRO](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#FOCUS_MODE_MACRO)
        #[deprecated] pub const FOCUS_MODE_MACRO : &'static str = "macro";

        /// public static final [PREVIEW_FPS_MAX_INDEX](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#PREVIEW_FPS_MAX_INDEX)
        #[deprecated] pub const PREVIEW_FPS_MAX_INDEX : i32 = 1;

        /// public static final [PREVIEW_FPS_MIN_INDEX](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#PREVIEW_FPS_MIN_INDEX)
        #[deprecated] pub const PREVIEW_FPS_MIN_INDEX : i32 = 0;

        /// public static final [SCENE_MODE_ACTION](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#SCENE_MODE_ACTION)
        #[deprecated] pub const SCENE_MODE_ACTION : &'static str = "action";

        /// public static final [SCENE_MODE_AUTO](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#SCENE_MODE_AUTO)
        #[deprecated] pub const SCENE_MODE_AUTO : &'static str = "auto";

        /// public static final [SCENE_MODE_BARCODE](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#SCENE_MODE_BARCODE)
        #[deprecated] pub const SCENE_MODE_BARCODE : &'static str = "barcode";

        /// public static final [SCENE_MODE_BEACH](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#SCENE_MODE_BEACH)
        #[deprecated] pub const SCENE_MODE_BEACH : &'static str = "beach";

        /// public static final [SCENE_MODE_CANDLELIGHT](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#SCENE_MODE_CANDLELIGHT)
        #[deprecated] pub const SCENE_MODE_CANDLELIGHT : &'static str = "candlelight";

        /// public static final [SCENE_MODE_FIREWORKS](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#SCENE_MODE_FIREWORKS)
        #[deprecated] pub const SCENE_MODE_FIREWORKS : &'static str = "fireworks";

        /// public static final [SCENE_MODE_HDR](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#SCENE_MODE_HDR)
        #[deprecated] pub const SCENE_MODE_HDR : &'static str = "hdr";

        /// public static final [SCENE_MODE_LANDSCAPE](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#SCENE_MODE_LANDSCAPE)
        #[deprecated] pub const SCENE_MODE_LANDSCAPE : &'static str = "landscape";

        /// public static final [SCENE_MODE_NIGHT](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#SCENE_MODE_NIGHT)
        #[deprecated] pub const SCENE_MODE_NIGHT : &'static str = "night";

        /// public static final [SCENE_MODE_NIGHT_PORTRAIT](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#SCENE_MODE_NIGHT_PORTRAIT)
        #[deprecated] pub const SCENE_MODE_NIGHT_PORTRAIT : &'static str = "night-portrait";

        /// public static final [SCENE_MODE_PARTY](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#SCENE_MODE_PARTY)
        #[deprecated] pub const SCENE_MODE_PARTY : &'static str = "party";

        /// public static final [SCENE_MODE_PORTRAIT](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#SCENE_MODE_PORTRAIT)
        #[deprecated] pub const SCENE_MODE_PORTRAIT : &'static str = "portrait";

        /// public static final [SCENE_MODE_SNOW](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#SCENE_MODE_SNOW)
        #[deprecated] pub const SCENE_MODE_SNOW : &'static str = "snow";

        /// public static final [SCENE_MODE_SPORTS](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#SCENE_MODE_SPORTS)
        #[deprecated] pub const SCENE_MODE_SPORTS : &'static str = "sports";

        /// public static final [SCENE_MODE_STEADYPHOTO](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#SCENE_MODE_STEADYPHOTO)
        #[deprecated] pub const SCENE_MODE_STEADYPHOTO : &'static str = "steadyphoto";

        /// public static final [SCENE_MODE_SUNSET](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#SCENE_MODE_SUNSET)
        #[deprecated] pub const SCENE_MODE_SUNSET : &'static str = "sunset";

        /// public static final [SCENE_MODE_THEATRE](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#SCENE_MODE_THEATRE)
        #[deprecated] pub const SCENE_MODE_THEATRE : &'static str = "theatre";

        /// public static final [WHITE_BALANCE_AUTO](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#WHITE_BALANCE_AUTO)
        #[deprecated] pub const WHITE_BALANCE_AUTO : &'static str = "auto";

        /// public static final [WHITE_BALANCE_CLOUDY_DAYLIGHT](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#WHITE_BALANCE_CLOUDY_DAYLIGHT)
        #[deprecated] pub const WHITE_BALANCE_CLOUDY_DAYLIGHT : &'static str = "cloudy-daylight";

        /// public static final [WHITE_BALANCE_DAYLIGHT](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#WHITE_BALANCE_DAYLIGHT)
        #[deprecated] pub const WHITE_BALANCE_DAYLIGHT : &'static str = "daylight";

        /// public static final [WHITE_BALANCE_FLUORESCENT](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#WHITE_BALANCE_FLUORESCENT)
        #[deprecated] pub const WHITE_BALANCE_FLUORESCENT : &'static str = "fluorescent";

        /// public static final [WHITE_BALANCE_INCANDESCENT](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#WHITE_BALANCE_INCANDESCENT)
        #[deprecated] pub const WHITE_BALANCE_INCANDESCENT : &'static str = "incandescent";

        /// public static final [WHITE_BALANCE_SHADE](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#WHITE_BALANCE_SHADE)
        #[deprecated] pub const WHITE_BALANCE_SHADE : &'static str = "shade";

        /// public static final [WHITE_BALANCE_TWILIGHT](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#WHITE_BALANCE_TWILIGHT)
        #[deprecated] pub const WHITE_BALANCE_TWILIGHT : &'static str = "twilight";

        /// public static final [WHITE_BALANCE_WARM_FLUORESCENT](https://developer.android.com/reference/android/hardware/Camera.Parameters.html#WHITE_BALANCE_WARM_FLUORESCENT)
        #[deprecated] pub const WHITE_BALANCE_WARM_FLUORESCENT : &'static str = "warm-fluorescent";

        // // Not emitting: Non-public field
        // // Not emitting: Failed to mangle field name: this$N outer class pointer
        // pub fn get_"this$0"<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::hardware::Camera>> { ... }
    }
}
