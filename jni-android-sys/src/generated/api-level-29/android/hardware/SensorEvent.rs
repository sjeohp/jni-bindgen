// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-hardware-SensorEvent"))]
__jni_bindgen! {
    /// public class [SensorEvent](https://developer.android.com/reference/android/hardware/SensorEvent.html)
    ///
    /// Required feature: android-hardware-SensorEvent
    public class SensorEvent ("android/hardware/SensorEvent") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [SensorEvent](https://developer.android.com/reference/android/hardware/SensorEvent.html#SensorEvent(int))
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::hardware::SensorEvent>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/hardware/SensorEvent", java.flags == (empty), .name == "<init>", .descriptor == "(I)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/SensorEvent\0", "<init>\0", "(I)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// **get** public [accuracy](https://developer.android.com/reference/android/hardware/SensorEvent.html#accuracy)
        pub fn accuracy<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/hardware/SensorEvent\0", "accuracy\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [accuracy](https://developer.android.com/reference/android/hardware/SensorEvent.html#accuracy)
        pub fn set_accuracy<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/hardware/SensorEvent\0", "accuracy\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [sensor](https://developer.android.com/reference/android/hardware/SensorEvent.html#sensor)
        ///
        /// Required feature: android-hardware-Sensor
        #[cfg(any(feature = "all", feature = "android-hardware-Sensor"))]
        pub fn sensor<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::hardware::Sensor>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/hardware/SensorEvent\0", "sensor\0", "Landroid/hardware/Sensor;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [sensor](https://developer.android.com/reference/android/hardware/SensorEvent.html#sensor)
        ///
        /// Required feature: android-hardware-Sensor
        #[cfg(any(feature = "all", feature = "android-hardware-Sensor"))]
        pub fn set_sensor<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::android::hardware::Sensor>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/hardware/SensorEvent\0", "sensor\0", "Landroid/hardware/Sensor;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [timestamp](https://developer.android.com/reference/android/hardware/SensorEvent.html#timestamp)
        pub fn timestamp<'env>(&'env self) -> i64 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/hardware/SensorEvent\0", "timestamp\0", "J\0");
                env.get_long_field(class, field)
            }
        }

        /// **set** public [timestamp](https://developer.android.com/reference/android/hardware/SensorEvent.html#timestamp)
        pub fn set_timestamp<'env>(&'env self, value: i64) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/hardware/SensorEvent\0", "timestamp\0", "J\0");
                env.set_long_field(class, field, value)
            }
        }

        /// **get** public final [values](https://developer.android.com/reference/android/hardware/SensorEvent.html#values)
        pub fn values<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::FloatArray>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/hardware/SensorEvent\0", "values\0", "[F\0");
                env.get_object_field(class, field)
            }
        }
    }
}
