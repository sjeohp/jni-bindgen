// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-hardware-Camera"))]
__jni_bindgen! {
    /// public class [Camera](https://developer.android.com/reference/android/hardware/Camera.html)
    ///
    /// Required feature: android-hardware-Camera
    #[deprecated] public class Camera ("android/hardware/Camera") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [Camera](https://developer.android.com/reference/android/hardware/Camera.html#Camera())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::hardware::Camera>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/hardware/Camera", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getNumberOfCameras](https://developer.android.com/reference/android/hardware/Camera.html#getNumberOfCameras())
        #[deprecated] pub fn getNumberOfCameras<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera", java.flags == PUBLIC | STATIC | NATIVE, .name == "getNumberOfCameras", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/hardware/Camera\0", "getNumberOfCameras\0", "()I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCameraInfo](https://developer.android.com/reference/android/hardware/Camera.html#getCameraInfo(int,%20android.hardware.Camera.CameraInfo))
        ///
        /// Required features: "android-hardware-Camera_CameraInfo"
        #[cfg(any(feature = "all", all(feature = "android-hardware-Camera_CameraInfo")))]
        #[deprecated] pub fn getCameraInfo<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::hardware::Camera_CameraInfo>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera", java.flags == PUBLIC | STATIC, .name == "getCameraInfo", .descriptor == "(ILandroid/hardware/Camera$CameraInfo;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/hardware/Camera\0", "getCameraInfo\0", "(ILandroid/hardware/Camera$CameraInfo;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [open](https://developer.android.com/reference/android/hardware/Camera.html#open(int))
        ///
        /// Required features: "android-hardware-Camera"
        #[cfg(any(feature = "all", all(feature = "android-hardware-Camera")))]
        #[deprecated] pub fn open_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::hardware::Camera>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera", java.flags == PUBLIC | STATIC, .name == "open", .descriptor == "(I)Landroid/hardware/Camera;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/hardware/Camera\0", "open\0", "(I)Landroid/hardware/Camera;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [open](https://developer.android.com/reference/android/hardware/Camera.html#open())
        ///
        /// Required features: "android-hardware-Camera"
        #[cfg(any(feature = "all", all(feature = "android-hardware-Camera")))]
        #[deprecated] pub fn open<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::hardware::Camera>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera", java.flags == PUBLIC | STATIC, .name == "open", .descriptor == "()Landroid/hardware/Camera;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/hardware/Camera\0", "open\0", "()Landroid/hardware/Camera;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [finalize](https://developer.android.com/reference/android/hardware/Camera.html#finalize())
        // #[deprecated] fn finalize<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/hardware/Camera", java.flags == PROTECTED, .name == "finalize", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera\0", "finalize\0", "()V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [release](https://developer.android.com/reference/android/hardware/Camera.html#release())
        #[deprecated] pub fn release<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera", java.flags == PUBLIC | FINAL, .name == "release", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera\0", "release\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unlock](https://developer.android.com/reference/android/hardware/Camera.html#unlock())
        #[deprecated] pub fn unlock<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera", java.flags == PUBLIC | FINAL | NATIVE, .name == "unlock", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera\0", "unlock\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [lock](https://developer.android.com/reference/android/hardware/Camera.html#lock())
        #[deprecated] pub fn lock<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera", java.flags == PUBLIC | FINAL | NATIVE, .name == "lock", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera\0", "lock\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [reconnect](https://developer.android.com/reference/android/hardware/Camera.html#reconnect())
        #[deprecated] pub fn reconnect<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera", java.flags == PUBLIC | FINAL | NATIVE, .name == "reconnect", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera\0", "reconnect\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPreviewDisplay](https://developer.android.com/reference/android/hardware/Camera.html#setPreviewDisplay(android.view.SurfaceHolder))
        ///
        /// Required features: "android-view-SurfaceHolder"
        #[cfg(any(feature = "all", all(feature = "android-view-SurfaceHolder")))]
        #[deprecated] pub fn setPreviewDisplay<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::SurfaceHolder>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera", java.flags == PUBLIC | FINAL, .name == "setPreviewDisplay", .descriptor == "(Landroid/view/SurfaceHolder;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera\0", "setPreviewDisplay\0", "(Landroid/view/SurfaceHolder;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPreviewTexture](https://developer.android.com/reference/android/hardware/Camera.html#setPreviewTexture(android.graphics.SurfaceTexture))
        ///
        /// Required features: "android-graphics-SurfaceTexture"
        #[cfg(any(feature = "all", all(feature = "android-graphics-SurfaceTexture")))]
        #[deprecated] pub fn setPreviewTexture<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::SurfaceTexture>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera", java.flags == PUBLIC | FINAL | NATIVE, .name == "setPreviewTexture", .descriptor == "(Landroid/graphics/SurfaceTexture;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera\0", "setPreviewTexture\0", "(Landroid/graphics/SurfaceTexture;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [startPreview](https://developer.android.com/reference/android/hardware/Camera.html#startPreview())
        #[deprecated] pub fn startPreview<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera", java.flags == PUBLIC | FINAL | NATIVE, .name == "startPreview", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera\0", "startPreview\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [stopPreview](https://developer.android.com/reference/android/hardware/Camera.html#stopPreview())
        #[deprecated] pub fn stopPreview<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera", java.flags == PUBLIC | FINAL, .name == "stopPreview", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera\0", "stopPreview\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPreviewCallback](https://developer.android.com/reference/android/hardware/Camera.html#setPreviewCallback(android.hardware.Camera.PreviewCallback))
        ///
        /// Required features: "android-hardware-Camera_PreviewCallback"
        #[cfg(any(feature = "all", all(feature = "android-hardware-Camera_PreviewCallback")))]
        #[deprecated] pub fn setPreviewCallback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::hardware::Camera_PreviewCallback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera", java.flags == PUBLIC | FINAL, .name == "setPreviewCallback", .descriptor == "(Landroid/hardware/Camera$PreviewCallback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera\0", "setPreviewCallback\0", "(Landroid/hardware/Camera$PreviewCallback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOneShotPreviewCallback](https://developer.android.com/reference/android/hardware/Camera.html#setOneShotPreviewCallback(android.hardware.Camera.PreviewCallback))
        ///
        /// Required features: "android-hardware-Camera_PreviewCallback"
        #[cfg(any(feature = "all", all(feature = "android-hardware-Camera_PreviewCallback")))]
        #[deprecated] pub fn setOneShotPreviewCallback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::hardware::Camera_PreviewCallback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera", java.flags == PUBLIC | FINAL, .name == "setOneShotPreviewCallback", .descriptor == "(Landroid/hardware/Camera$PreviewCallback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera\0", "setOneShotPreviewCallback\0", "(Landroid/hardware/Camera$PreviewCallback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPreviewCallbackWithBuffer](https://developer.android.com/reference/android/hardware/Camera.html#setPreviewCallbackWithBuffer(android.hardware.Camera.PreviewCallback))
        ///
        /// Required features: "android-hardware-Camera_PreviewCallback"
        #[cfg(any(feature = "all", all(feature = "android-hardware-Camera_PreviewCallback")))]
        #[deprecated] pub fn setPreviewCallbackWithBuffer<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::hardware::Camera_PreviewCallback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera", java.flags == PUBLIC | FINAL, .name == "setPreviewCallbackWithBuffer", .descriptor == "(Landroid/hardware/Camera$PreviewCallback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera\0", "setPreviewCallbackWithBuffer\0", "(Landroid/hardware/Camera$PreviewCallback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addCallbackBuffer](https://developer.android.com/reference/android/hardware/Camera.html#addCallbackBuffer(byte%5B%5D))
        #[deprecated] pub fn addCallbackBuffer<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera", java.flags == PUBLIC | FINAL, .name == "addCallbackBuffer", .descriptor == "([B)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera\0", "addCallbackBuffer\0", "([B)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [autoFocus](https://developer.android.com/reference/android/hardware/Camera.html#autoFocus(android.hardware.Camera.AutoFocusCallback))
        ///
        /// Required features: "android-hardware-Camera_AutoFocusCallback"
        #[cfg(any(feature = "all", all(feature = "android-hardware-Camera_AutoFocusCallback")))]
        #[deprecated] pub fn autoFocus<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::hardware::Camera_AutoFocusCallback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera", java.flags == PUBLIC | FINAL, .name == "autoFocus", .descriptor == "(Landroid/hardware/Camera$AutoFocusCallback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera\0", "autoFocus\0", "(Landroid/hardware/Camera$AutoFocusCallback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [cancelAutoFocus](https://developer.android.com/reference/android/hardware/Camera.html#cancelAutoFocus())
        #[deprecated] pub fn cancelAutoFocus<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera", java.flags == PUBLIC | FINAL, .name == "cancelAutoFocus", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera\0", "cancelAutoFocus\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAutoFocusMoveCallback](https://developer.android.com/reference/android/hardware/Camera.html#setAutoFocusMoveCallback(android.hardware.Camera.AutoFocusMoveCallback))
        ///
        /// Required features: "android-hardware-Camera_AutoFocusMoveCallback"
        #[cfg(any(feature = "all", all(feature = "android-hardware-Camera_AutoFocusMoveCallback")))]
        #[deprecated] pub fn setAutoFocusMoveCallback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::hardware::Camera_AutoFocusMoveCallback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera", java.flags == PUBLIC, .name == "setAutoFocusMoveCallback", .descriptor == "(Landroid/hardware/Camera$AutoFocusMoveCallback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera\0", "setAutoFocusMoveCallback\0", "(Landroid/hardware/Camera$AutoFocusMoveCallback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [takePicture](https://developer.android.com/reference/android/hardware/Camera.html#takePicture(android.hardware.Camera.ShutterCallback,%20android.hardware.Camera.PictureCallback,%20android.hardware.Camera.PictureCallback))
        ///
        /// Required features: "android-hardware-Camera_PictureCallback", "android-hardware-Camera_ShutterCallback"
        #[cfg(any(feature = "all", all(feature = "android-hardware-Camera_PictureCallback", feature = "android-hardware-Camera_ShutterCallback")))]
        #[deprecated] pub fn takePicture_ShutterCallback_PictureCallback_PictureCallback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::hardware::Camera_ShutterCallback>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::hardware::Camera_PictureCallback>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::hardware::Camera_PictureCallback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera", java.flags == PUBLIC | FINAL, .name == "takePicture", .descriptor == "(Landroid/hardware/Camera$ShutterCallback;Landroid/hardware/Camera$PictureCallback;Landroid/hardware/Camera$PictureCallback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera\0", "takePicture\0", "(Landroid/hardware/Camera$ShutterCallback;Landroid/hardware/Camera$PictureCallback;Landroid/hardware/Camera$PictureCallback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [takePicture](https://developer.android.com/reference/android/hardware/Camera.html#takePicture(android.hardware.Camera.ShutterCallback,%20android.hardware.Camera.PictureCallback,%20android.hardware.Camera.PictureCallback,%20android.hardware.Camera.PictureCallback))
        ///
        /// Required features: "android-hardware-Camera_PictureCallback", "android-hardware-Camera_ShutterCallback"
        #[cfg(any(feature = "all", all(feature = "android-hardware-Camera_PictureCallback", feature = "android-hardware-Camera_ShutterCallback")))]
        #[deprecated] pub fn takePicture_ShutterCallback_PictureCallback_PictureCallback_PictureCallback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::hardware::Camera_ShutterCallback>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::hardware::Camera_PictureCallback>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::hardware::Camera_PictureCallback>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::hardware::Camera_PictureCallback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera", java.flags == PUBLIC | FINAL, .name == "takePicture", .descriptor == "(Landroid/hardware/Camera$ShutterCallback;Landroid/hardware/Camera$PictureCallback;Landroid/hardware/Camera$PictureCallback;Landroid/hardware/Camera$PictureCallback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera\0", "takePicture\0", "(Landroid/hardware/Camera$ShutterCallback;Landroid/hardware/Camera$PictureCallback;Landroid/hardware/Camera$PictureCallback;Landroid/hardware/Camera$PictureCallback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [startSmoothZoom](https://developer.android.com/reference/android/hardware/Camera.html#startSmoothZoom(int))
        #[deprecated] pub fn startSmoothZoom<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera", java.flags == PUBLIC | FINAL | NATIVE, .name == "startSmoothZoom", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera\0", "startSmoothZoom\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [stopSmoothZoom](https://developer.android.com/reference/android/hardware/Camera.html#stopSmoothZoom())
        #[deprecated] pub fn stopSmoothZoom<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera", java.flags == PUBLIC | FINAL | NATIVE, .name == "stopSmoothZoom", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera\0", "stopSmoothZoom\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDisplayOrientation](https://developer.android.com/reference/android/hardware/Camera.html#setDisplayOrientation(int))
        #[deprecated] pub fn setDisplayOrientation<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera", java.flags == PUBLIC | FINAL | NATIVE, .name == "setDisplayOrientation", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera\0", "setDisplayOrientation\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [enableShutterSound](https://developer.android.com/reference/android/hardware/Camera.html#enableShutterSound(boolean))
        #[deprecated] pub fn enableShutterSound<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera", java.flags == PUBLIC | FINAL, .name == "enableShutterSound", .descriptor == "(Z)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera\0", "enableShutterSound\0", "(Z)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setZoomChangeListener](https://developer.android.com/reference/android/hardware/Camera.html#setZoomChangeListener(android.hardware.Camera.OnZoomChangeListener))
        ///
        /// Required features: "android-hardware-Camera_OnZoomChangeListener"
        #[cfg(any(feature = "all", all(feature = "android-hardware-Camera_OnZoomChangeListener")))]
        #[deprecated] pub fn setZoomChangeListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::hardware::Camera_OnZoomChangeListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera", java.flags == PUBLIC | FINAL, .name == "setZoomChangeListener", .descriptor == "(Landroid/hardware/Camera$OnZoomChangeListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera\0", "setZoomChangeListener\0", "(Landroid/hardware/Camera$OnZoomChangeListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setFaceDetectionListener](https://developer.android.com/reference/android/hardware/Camera.html#setFaceDetectionListener(android.hardware.Camera.FaceDetectionListener))
        ///
        /// Required features: "android-hardware-Camera_FaceDetectionListener"
        #[cfg(any(feature = "all", all(feature = "android-hardware-Camera_FaceDetectionListener")))]
        #[deprecated] pub fn setFaceDetectionListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::hardware::Camera_FaceDetectionListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera", java.flags == PUBLIC | FINAL, .name == "setFaceDetectionListener", .descriptor == "(Landroid/hardware/Camera$FaceDetectionListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera\0", "setFaceDetectionListener\0", "(Landroid/hardware/Camera$FaceDetectionListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [startFaceDetection](https://developer.android.com/reference/android/hardware/Camera.html#startFaceDetection())
        #[deprecated] pub fn startFaceDetection<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera", java.flags == PUBLIC | FINAL, .name == "startFaceDetection", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera\0", "startFaceDetection\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [stopFaceDetection](https://developer.android.com/reference/android/hardware/Camera.html#stopFaceDetection())
        #[deprecated] pub fn stopFaceDetection<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera", java.flags == PUBLIC | FINAL, .name == "stopFaceDetection", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera\0", "stopFaceDetection\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setErrorCallback](https://developer.android.com/reference/android/hardware/Camera.html#setErrorCallback(android.hardware.Camera.ErrorCallback))
        ///
        /// Required features: "android-hardware-Camera_ErrorCallback"
        #[cfg(any(feature = "all", all(feature = "android-hardware-Camera_ErrorCallback")))]
        #[deprecated] pub fn setErrorCallback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::hardware::Camera_ErrorCallback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera", java.flags == PUBLIC | FINAL, .name == "setErrorCallback", .descriptor == "(Landroid/hardware/Camera$ErrorCallback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera\0", "setErrorCallback\0", "(Landroid/hardware/Camera$ErrorCallback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setParameters](https://developer.android.com/reference/android/hardware/Camera.html#setParameters(android.hardware.Camera.Parameters))
        ///
        /// Required features: "android-hardware-Camera_Parameters"
        #[cfg(any(feature = "all", all(feature = "android-hardware-Camera_Parameters")))]
        #[deprecated] pub fn setParameters<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::hardware::Camera_Parameters>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera", java.flags == PUBLIC, .name == "setParameters", .descriptor == "(Landroid/hardware/Camera$Parameters;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera\0", "setParameters\0", "(Landroid/hardware/Camera$Parameters;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getParameters](https://developer.android.com/reference/android/hardware/Camera.html#getParameters())
        ///
        /// Required features: "android-hardware-Camera_Parameters"
        #[cfg(any(feature = "all", all(feature = "android-hardware-Camera_Parameters")))]
        #[deprecated] pub fn getParameters<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::hardware::Camera_Parameters>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Camera", java.flags == PUBLIC, .name == "getParameters", .descriptor == "()Landroid/hardware/Camera$Parameters;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Camera\0", "getParameters\0", "()Landroid/hardware/Camera$Parameters;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [ACTION_NEW_PICTURE](https://developer.android.com/reference/android/hardware/Camera.html#ACTION_NEW_PICTURE)
        #[deprecated] pub const ACTION_NEW_PICTURE : &'static str = "android.hardware.action.NEW_PICTURE";

        /// public static final [ACTION_NEW_VIDEO](https://developer.android.com/reference/android/hardware/Camera.html#ACTION_NEW_VIDEO)
        #[deprecated] pub const ACTION_NEW_VIDEO : &'static str = "android.hardware.action.NEW_VIDEO";

        /// public static final [CAMERA_ERROR_EVICTED](https://developer.android.com/reference/android/hardware/Camera.html#CAMERA_ERROR_EVICTED)
        #[deprecated] pub const CAMERA_ERROR_EVICTED : i32 = 2;

        /// public static final [CAMERA_ERROR_SERVER_DIED](https://developer.android.com/reference/android/hardware/Camera.html#CAMERA_ERROR_SERVER_DIED)
        #[deprecated] pub const CAMERA_ERROR_SERVER_DIED : i32 = 100;

        /// public static final [CAMERA_ERROR_UNKNOWN](https://developer.android.com/reference/android/hardware/Camera.html#CAMERA_ERROR_UNKNOWN)
        #[deprecated] pub const CAMERA_ERROR_UNKNOWN : i32 = 1;
    }
}
