// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-hardware-Sensor"))]
__jni_bindgen! {
    /// public final class [Sensor](https://developer.android.com/reference/android/hardware/Sensor.html)
    ///
    /// Required feature: android-hardware-Sensor
    public final class Sensor ("android/hardware/Sensor") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [Sensor](https://developer.android.com/reference/android/hardware/Sensor.html#Sensor())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::hardware::Sensor>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/hardware/Sensor", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Sensor\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getReportingMode](https://developer.android.com/reference/android/hardware/Sensor.html#getReportingMode())
        pub fn getReportingMode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Sensor", java.flags == PUBLIC, .name == "getReportingMode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Sensor\0", "getReportingMode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getHighestDirectReportRateLevel](https://developer.android.com/reference/android/hardware/Sensor.html#getHighestDirectReportRateLevel())
        pub fn getHighestDirectReportRateLevel<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Sensor", java.flags == PUBLIC, .name == "getHighestDirectReportRateLevel", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Sensor\0", "getHighestDirectReportRateLevel\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isDirectChannelTypeSupported](https://developer.android.com/reference/android/hardware/Sensor.html#isDirectChannelTypeSupported(int))
        pub fn isDirectChannelTypeSupported<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Sensor", java.flags == PUBLIC, .name == "isDirectChannelTypeSupported", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Sensor\0", "isDirectChannelTypeSupported\0", "(I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getName](https://developer.android.com/reference/android/hardware/Sensor.html#getName())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getName<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Sensor", java.flags == PUBLIC, .name == "getName", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Sensor\0", "getName\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getVendor](https://developer.android.com/reference/android/hardware/Sensor.html#getVendor())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getVendor<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Sensor", java.flags == PUBLIC, .name == "getVendor", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Sensor\0", "getVendor\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getType](https://developer.android.com/reference/android/hardware/Sensor.html#getType())
        pub fn getType<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Sensor", java.flags == PUBLIC, .name == "getType", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Sensor\0", "getType\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getVersion](https://developer.android.com/reference/android/hardware/Sensor.html#getVersion())
        pub fn getVersion<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Sensor", java.flags == PUBLIC, .name == "getVersion", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Sensor\0", "getVersion\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMaximumRange](https://developer.android.com/reference/android/hardware/Sensor.html#getMaximumRange())
        pub fn getMaximumRange<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Sensor", java.flags == PUBLIC, .name == "getMaximumRange", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Sensor\0", "getMaximumRange\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getResolution](https://developer.android.com/reference/android/hardware/Sensor.html#getResolution())
        pub fn getResolution<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Sensor", java.flags == PUBLIC, .name == "getResolution", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Sensor\0", "getResolution\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPower](https://developer.android.com/reference/android/hardware/Sensor.html#getPower())
        pub fn getPower<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Sensor", java.flags == PUBLIC, .name == "getPower", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Sensor\0", "getPower\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMinDelay](https://developer.android.com/reference/android/hardware/Sensor.html#getMinDelay())
        pub fn getMinDelay<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Sensor", java.flags == PUBLIC, .name == "getMinDelay", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Sensor\0", "getMinDelay\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFifoReservedEventCount](https://developer.android.com/reference/android/hardware/Sensor.html#getFifoReservedEventCount())
        pub fn getFifoReservedEventCount<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Sensor", java.flags == PUBLIC, .name == "getFifoReservedEventCount", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Sensor\0", "getFifoReservedEventCount\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFifoMaxEventCount](https://developer.android.com/reference/android/hardware/Sensor.html#getFifoMaxEventCount())
        pub fn getFifoMaxEventCount<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Sensor", java.flags == PUBLIC, .name == "getFifoMaxEventCount", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Sensor\0", "getFifoMaxEventCount\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getStringType](https://developer.android.com/reference/android/hardware/Sensor.html#getStringType())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getStringType<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Sensor", java.flags == PUBLIC, .name == "getStringType", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Sensor\0", "getStringType\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getId](https://developer.android.com/reference/android/hardware/Sensor.html#getId())
        pub fn getId<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Sensor", java.flags == PUBLIC, .name == "getId", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Sensor\0", "getId\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMaxDelay](https://developer.android.com/reference/android/hardware/Sensor.html#getMaxDelay())
        pub fn getMaxDelay<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Sensor", java.flags == PUBLIC, .name == "getMaxDelay", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Sensor\0", "getMaxDelay\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isWakeUpSensor](https://developer.android.com/reference/android/hardware/Sensor.html#isWakeUpSensor())
        pub fn isWakeUpSensor<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Sensor", java.flags == PUBLIC, .name == "isWakeUpSensor", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Sensor\0", "isWakeUpSensor\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isDynamicSensor](https://developer.android.com/reference/android/hardware/Sensor.html#isDynamicSensor())
        pub fn isDynamicSensor<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Sensor", java.flags == PUBLIC, .name == "isDynamicSensor", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Sensor\0", "isDynamicSensor\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isAdditionalInfoSupported](https://developer.android.com/reference/android/hardware/Sensor.html#isAdditionalInfoSupported())
        pub fn isAdditionalInfoSupported<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Sensor", java.flags == PUBLIC, .name == "isAdditionalInfoSupported", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Sensor\0", "isAdditionalInfoSupported\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/android/hardware/Sensor.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/hardware/Sensor", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/hardware/Sensor\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [REPORTING_MODE_CONTINUOUS](https://developer.android.com/reference/android/hardware/Sensor.html#REPORTING_MODE_CONTINUOUS)
        pub const REPORTING_MODE_CONTINUOUS : i32 = 0;

        /// public static final [REPORTING_MODE_ONE_SHOT](https://developer.android.com/reference/android/hardware/Sensor.html#REPORTING_MODE_ONE_SHOT)
        pub const REPORTING_MODE_ONE_SHOT : i32 = 2;

        /// public static final [REPORTING_MODE_ON_CHANGE](https://developer.android.com/reference/android/hardware/Sensor.html#REPORTING_MODE_ON_CHANGE)
        pub const REPORTING_MODE_ON_CHANGE : i32 = 1;

        /// public static final [REPORTING_MODE_SPECIAL_TRIGGER](https://developer.android.com/reference/android/hardware/Sensor.html#REPORTING_MODE_SPECIAL_TRIGGER)
        pub const REPORTING_MODE_SPECIAL_TRIGGER : i32 = 3;

        /// public static final [STRING_TYPE_ACCELEROMETER](https://developer.android.com/reference/android/hardware/Sensor.html#STRING_TYPE_ACCELEROMETER)
        pub const STRING_TYPE_ACCELEROMETER : &'static str = "android.sensor.accelerometer";

        /// public static final [STRING_TYPE_ACCELEROMETER_UNCALIBRATED](https://developer.android.com/reference/android/hardware/Sensor.html#STRING_TYPE_ACCELEROMETER_UNCALIBRATED)
        pub const STRING_TYPE_ACCELEROMETER_UNCALIBRATED : &'static str = "android.sensor.accelerometer_uncalibrated";

        /// public static final [STRING_TYPE_AMBIENT_TEMPERATURE](https://developer.android.com/reference/android/hardware/Sensor.html#STRING_TYPE_AMBIENT_TEMPERATURE)
        pub const STRING_TYPE_AMBIENT_TEMPERATURE : &'static str = "android.sensor.ambient_temperature";

        /// public static final [STRING_TYPE_GAME_ROTATION_VECTOR](https://developer.android.com/reference/android/hardware/Sensor.html#STRING_TYPE_GAME_ROTATION_VECTOR)
        pub const STRING_TYPE_GAME_ROTATION_VECTOR : &'static str = "android.sensor.game_rotation_vector";

        /// public static final [STRING_TYPE_GEOMAGNETIC_ROTATION_VECTOR](https://developer.android.com/reference/android/hardware/Sensor.html#STRING_TYPE_GEOMAGNETIC_ROTATION_VECTOR)
        pub const STRING_TYPE_GEOMAGNETIC_ROTATION_VECTOR : &'static str = "android.sensor.geomagnetic_rotation_vector";

        /// public static final [STRING_TYPE_GRAVITY](https://developer.android.com/reference/android/hardware/Sensor.html#STRING_TYPE_GRAVITY)
        pub const STRING_TYPE_GRAVITY : &'static str = "android.sensor.gravity";

        /// public static final [STRING_TYPE_GYROSCOPE](https://developer.android.com/reference/android/hardware/Sensor.html#STRING_TYPE_GYROSCOPE)
        pub const STRING_TYPE_GYROSCOPE : &'static str = "android.sensor.gyroscope";

        /// public static final [STRING_TYPE_GYROSCOPE_UNCALIBRATED](https://developer.android.com/reference/android/hardware/Sensor.html#STRING_TYPE_GYROSCOPE_UNCALIBRATED)
        pub const STRING_TYPE_GYROSCOPE_UNCALIBRATED : &'static str = "android.sensor.gyroscope_uncalibrated";

        /// public static final [STRING_TYPE_HEART_BEAT](https://developer.android.com/reference/android/hardware/Sensor.html#STRING_TYPE_HEART_BEAT)
        pub const STRING_TYPE_HEART_BEAT : &'static str = "android.sensor.heart_beat";

        /// public static final [STRING_TYPE_HEART_RATE](https://developer.android.com/reference/android/hardware/Sensor.html#STRING_TYPE_HEART_RATE)
        pub const STRING_TYPE_HEART_RATE : &'static str = "android.sensor.heart_rate";

        /// public static final [STRING_TYPE_LIGHT](https://developer.android.com/reference/android/hardware/Sensor.html#STRING_TYPE_LIGHT)
        pub const STRING_TYPE_LIGHT : &'static str = "android.sensor.light";

        /// public static final [STRING_TYPE_LINEAR_ACCELERATION](https://developer.android.com/reference/android/hardware/Sensor.html#STRING_TYPE_LINEAR_ACCELERATION)
        pub const STRING_TYPE_LINEAR_ACCELERATION : &'static str = "android.sensor.linear_acceleration";

        /// public static final [STRING_TYPE_LOW_LATENCY_OFFBODY_DETECT](https://developer.android.com/reference/android/hardware/Sensor.html#STRING_TYPE_LOW_LATENCY_OFFBODY_DETECT)
        pub const STRING_TYPE_LOW_LATENCY_OFFBODY_DETECT : &'static str = "android.sensor.low_latency_offbody_detect";

        /// public static final [STRING_TYPE_MAGNETIC_FIELD](https://developer.android.com/reference/android/hardware/Sensor.html#STRING_TYPE_MAGNETIC_FIELD)
        pub const STRING_TYPE_MAGNETIC_FIELD : &'static str = "android.sensor.magnetic_field";

        /// public static final [STRING_TYPE_MAGNETIC_FIELD_UNCALIBRATED](https://developer.android.com/reference/android/hardware/Sensor.html#STRING_TYPE_MAGNETIC_FIELD_UNCALIBRATED)
        pub const STRING_TYPE_MAGNETIC_FIELD_UNCALIBRATED : &'static str = "android.sensor.magnetic_field_uncalibrated";

        /// public static final [STRING_TYPE_MOTION_DETECT](https://developer.android.com/reference/android/hardware/Sensor.html#STRING_TYPE_MOTION_DETECT)
        pub const STRING_TYPE_MOTION_DETECT : &'static str = "android.sensor.motion_detect";

        /// public static final [STRING_TYPE_ORIENTATION](https://developer.android.com/reference/android/hardware/Sensor.html#STRING_TYPE_ORIENTATION)
        #[deprecated] pub const STRING_TYPE_ORIENTATION : &'static str = "android.sensor.orientation";

        /// public static final [STRING_TYPE_POSE_6DOF](https://developer.android.com/reference/android/hardware/Sensor.html#STRING_TYPE_POSE_6DOF)
        pub const STRING_TYPE_POSE_6DOF : &'static str = "android.sensor.pose_6dof";

        /// public static final [STRING_TYPE_PRESSURE](https://developer.android.com/reference/android/hardware/Sensor.html#STRING_TYPE_PRESSURE)
        pub const STRING_TYPE_PRESSURE : &'static str = "android.sensor.pressure";

        /// public static final [STRING_TYPE_PROXIMITY](https://developer.android.com/reference/android/hardware/Sensor.html#STRING_TYPE_PROXIMITY)
        pub const STRING_TYPE_PROXIMITY : &'static str = "android.sensor.proximity";

        /// public static final [STRING_TYPE_RELATIVE_HUMIDITY](https://developer.android.com/reference/android/hardware/Sensor.html#STRING_TYPE_RELATIVE_HUMIDITY)
        pub const STRING_TYPE_RELATIVE_HUMIDITY : &'static str = "android.sensor.relative_humidity";

        /// public static final [STRING_TYPE_ROTATION_VECTOR](https://developer.android.com/reference/android/hardware/Sensor.html#STRING_TYPE_ROTATION_VECTOR)
        pub const STRING_TYPE_ROTATION_VECTOR : &'static str = "android.sensor.rotation_vector";

        /// public static final [STRING_TYPE_SIGNIFICANT_MOTION](https://developer.android.com/reference/android/hardware/Sensor.html#STRING_TYPE_SIGNIFICANT_MOTION)
        pub const STRING_TYPE_SIGNIFICANT_MOTION : &'static str = "android.sensor.significant_motion";

        /// public static final [STRING_TYPE_STATIONARY_DETECT](https://developer.android.com/reference/android/hardware/Sensor.html#STRING_TYPE_STATIONARY_DETECT)
        pub const STRING_TYPE_STATIONARY_DETECT : &'static str = "android.sensor.stationary_detect";

        /// public static final [STRING_TYPE_STEP_COUNTER](https://developer.android.com/reference/android/hardware/Sensor.html#STRING_TYPE_STEP_COUNTER)
        pub const STRING_TYPE_STEP_COUNTER : &'static str = "android.sensor.step_counter";

        /// public static final [STRING_TYPE_STEP_DETECTOR](https://developer.android.com/reference/android/hardware/Sensor.html#STRING_TYPE_STEP_DETECTOR)
        pub const STRING_TYPE_STEP_DETECTOR : &'static str = "android.sensor.step_detector";

        /// public static final [STRING_TYPE_TEMPERATURE](https://developer.android.com/reference/android/hardware/Sensor.html#STRING_TYPE_TEMPERATURE)
        #[deprecated] pub const STRING_TYPE_TEMPERATURE : &'static str = "android.sensor.temperature";

        /// public static final [TYPE_ACCELEROMETER](https://developer.android.com/reference/android/hardware/Sensor.html#TYPE_ACCELEROMETER)
        pub const TYPE_ACCELEROMETER : i32 = 1;

        /// public static final [TYPE_ACCELEROMETER_UNCALIBRATED](https://developer.android.com/reference/android/hardware/Sensor.html#TYPE_ACCELEROMETER_UNCALIBRATED)
        pub const TYPE_ACCELEROMETER_UNCALIBRATED : i32 = 35;

        /// public static final [TYPE_ALL](https://developer.android.com/reference/android/hardware/Sensor.html#TYPE_ALL)
        pub const TYPE_ALL : i32 = -1;

        /// public static final [TYPE_AMBIENT_TEMPERATURE](https://developer.android.com/reference/android/hardware/Sensor.html#TYPE_AMBIENT_TEMPERATURE)
        pub const TYPE_AMBIENT_TEMPERATURE : i32 = 13;

        /// public static final [TYPE_DEVICE_PRIVATE_BASE](https://developer.android.com/reference/android/hardware/Sensor.html#TYPE_DEVICE_PRIVATE_BASE)
        pub const TYPE_DEVICE_PRIVATE_BASE : i32 = 65536;

        /// public static final [TYPE_GAME_ROTATION_VECTOR](https://developer.android.com/reference/android/hardware/Sensor.html#TYPE_GAME_ROTATION_VECTOR)
        pub const TYPE_GAME_ROTATION_VECTOR : i32 = 15;

        /// public static final [TYPE_GEOMAGNETIC_ROTATION_VECTOR](https://developer.android.com/reference/android/hardware/Sensor.html#TYPE_GEOMAGNETIC_ROTATION_VECTOR)
        pub const TYPE_GEOMAGNETIC_ROTATION_VECTOR : i32 = 20;

        /// public static final [TYPE_GRAVITY](https://developer.android.com/reference/android/hardware/Sensor.html#TYPE_GRAVITY)
        pub const TYPE_GRAVITY : i32 = 9;

        /// public static final [TYPE_GYROSCOPE](https://developer.android.com/reference/android/hardware/Sensor.html#TYPE_GYROSCOPE)
        pub const TYPE_GYROSCOPE : i32 = 4;

        /// public static final [TYPE_GYROSCOPE_UNCALIBRATED](https://developer.android.com/reference/android/hardware/Sensor.html#TYPE_GYROSCOPE_UNCALIBRATED)
        pub const TYPE_GYROSCOPE_UNCALIBRATED : i32 = 16;

        /// public static final [TYPE_HEART_BEAT](https://developer.android.com/reference/android/hardware/Sensor.html#TYPE_HEART_BEAT)
        pub const TYPE_HEART_BEAT : i32 = 31;

        /// public static final [TYPE_HEART_RATE](https://developer.android.com/reference/android/hardware/Sensor.html#TYPE_HEART_RATE)
        pub const TYPE_HEART_RATE : i32 = 21;

        /// public static final [TYPE_LIGHT](https://developer.android.com/reference/android/hardware/Sensor.html#TYPE_LIGHT)
        pub const TYPE_LIGHT : i32 = 5;

        /// public static final [TYPE_LINEAR_ACCELERATION](https://developer.android.com/reference/android/hardware/Sensor.html#TYPE_LINEAR_ACCELERATION)
        pub const TYPE_LINEAR_ACCELERATION : i32 = 10;

        /// public static final [TYPE_LOW_LATENCY_OFFBODY_DETECT](https://developer.android.com/reference/android/hardware/Sensor.html#TYPE_LOW_LATENCY_OFFBODY_DETECT)
        pub const TYPE_LOW_LATENCY_OFFBODY_DETECT : i32 = 34;

        /// public static final [TYPE_MAGNETIC_FIELD](https://developer.android.com/reference/android/hardware/Sensor.html#TYPE_MAGNETIC_FIELD)
        pub const TYPE_MAGNETIC_FIELD : i32 = 2;

        /// public static final [TYPE_MAGNETIC_FIELD_UNCALIBRATED](https://developer.android.com/reference/android/hardware/Sensor.html#TYPE_MAGNETIC_FIELD_UNCALIBRATED)
        pub const TYPE_MAGNETIC_FIELD_UNCALIBRATED : i32 = 14;

        /// public static final [TYPE_MOTION_DETECT](https://developer.android.com/reference/android/hardware/Sensor.html#TYPE_MOTION_DETECT)
        pub const TYPE_MOTION_DETECT : i32 = 30;

        /// public static final [TYPE_ORIENTATION](https://developer.android.com/reference/android/hardware/Sensor.html#TYPE_ORIENTATION)
        #[deprecated] pub const TYPE_ORIENTATION : i32 = 3;

        /// public static final [TYPE_POSE_6DOF](https://developer.android.com/reference/android/hardware/Sensor.html#TYPE_POSE_6DOF)
        pub const TYPE_POSE_6DOF : i32 = 28;

        /// public static final [TYPE_PRESSURE](https://developer.android.com/reference/android/hardware/Sensor.html#TYPE_PRESSURE)
        pub const TYPE_PRESSURE : i32 = 6;

        /// public static final [TYPE_PROXIMITY](https://developer.android.com/reference/android/hardware/Sensor.html#TYPE_PROXIMITY)
        pub const TYPE_PROXIMITY : i32 = 8;

        /// public static final [TYPE_RELATIVE_HUMIDITY](https://developer.android.com/reference/android/hardware/Sensor.html#TYPE_RELATIVE_HUMIDITY)
        pub const TYPE_RELATIVE_HUMIDITY : i32 = 12;

        /// public static final [TYPE_ROTATION_VECTOR](https://developer.android.com/reference/android/hardware/Sensor.html#TYPE_ROTATION_VECTOR)
        pub const TYPE_ROTATION_VECTOR : i32 = 11;

        /// public static final [TYPE_SIGNIFICANT_MOTION](https://developer.android.com/reference/android/hardware/Sensor.html#TYPE_SIGNIFICANT_MOTION)
        pub const TYPE_SIGNIFICANT_MOTION : i32 = 17;

        /// public static final [TYPE_STATIONARY_DETECT](https://developer.android.com/reference/android/hardware/Sensor.html#TYPE_STATIONARY_DETECT)
        pub const TYPE_STATIONARY_DETECT : i32 = 29;

        /// public static final [TYPE_STEP_COUNTER](https://developer.android.com/reference/android/hardware/Sensor.html#TYPE_STEP_COUNTER)
        pub const TYPE_STEP_COUNTER : i32 = 19;

        /// public static final [TYPE_STEP_DETECTOR](https://developer.android.com/reference/android/hardware/Sensor.html#TYPE_STEP_DETECTOR)
        pub const TYPE_STEP_DETECTOR : i32 = 18;

        /// public static final [TYPE_TEMPERATURE](https://developer.android.com/reference/android/hardware/Sensor.html#TYPE_TEMPERATURE)
        #[deprecated] pub const TYPE_TEMPERATURE : i32 = 7;
    }
}
