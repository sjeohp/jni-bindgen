// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-opengl-GLES32"))]
__jni_bindgen! {
    /// public class [GLES32](https://developer.android.com/reference/android/opengl/GLES32.html)
    ///
    /// Required feature: android-opengl-GLES32
    public class GLES32 ("android/opengl/GLES32") extends crate::android::opengl::GLES31 {

        // // Not emitting: Non-public method
        // /// [GLES32](https://developer.android.com/reference/android/opengl/GLES32.html#GLES32())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::opengl::GLES32>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/opengl/GLES32", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/opengl/GLES32\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [glBlendBarrier](https://developer.android.com/reference/android/opengl/GLES32.html#glBlendBarrier())
        pub fn glBlendBarrier<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES32", java.flags == PUBLIC | STATIC | NATIVE, .name == "glBlendBarrier", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES32\0", "glBlendBarrier\0", "()V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glCopyImageSubData](https://developer.android.com/reference/android/opengl/GLES32.html#glCopyImageSubData(int,%20int,%20int,%20int,%20int,%20int,%20int,%20int,%20int,%20int,%20int,%20int,%20int,%20int,%20int))
        pub fn glCopyImageSubData<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32, arg3: i32, arg4: i32, arg5: i32, arg6: i32, arg7: i32, arg8: i32, arg9: i32, arg10: i32, arg11: i32, arg12: i32, arg13: i32, arg14: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES32", java.flags == PUBLIC | STATIC | NATIVE, .name == "glCopyImageSubData", .descriptor == "(IIIIIIIIIIIIIII)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6), __jni_bindgen::AsJValue::as_jvalue(&arg7), __jni_bindgen::AsJValue::as_jvalue(&arg8), __jni_bindgen::AsJValue::as_jvalue(&arg9), __jni_bindgen::AsJValue::as_jvalue(&arg10), __jni_bindgen::AsJValue::as_jvalue(&arg11), __jni_bindgen::AsJValue::as_jvalue(&arg12), __jni_bindgen::AsJValue::as_jvalue(&arg13), __jni_bindgen::AsJValue::as_jvalue(&arg14)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES32\0", "glCopyImageSubData\0", "(IIIIIIIIIIIIIII)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glDebugMessageControl](https://developer.android.com/reference/android/opengl/GLES32.html#glDebugMessageControl(int,%20int,%20int,%20int,%20int%5B%5D,%20int,%20boolean))
        pub fn glDebugMessageControl_int_int_int_int_int_array_int_boolean<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32, arg3: i32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg5: i32, arg6: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES32", java.flags == PUBLIC | STATIC | NATIVE, .name == "glDebugMessageControl", .descriptor == "(IIII[IIZ)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES32\0", "glDebugMessageControl\0", "(IIII[IIZ)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glDebugMessageControl](https://developer.android.com/reference/android/opengl/GLES32.html#glDebugMessageControl(int,%20int,%20int,%20int,%20java.nio.IntBuffer,%20boolean))
        ///
        /// Required features: "java-nio-IntBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-IntBuffer")))]
        pub fn glDebugMessageControl_int_int_int_int_IntBuffer_boolean<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32, arg3: i32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>, arg5: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES32", java.flags == PUBLIC | STATIC | NATIVE, .name == "glDebugMessageControl", .descriptor == "(IIIILjava/nio/IntBuffer;Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES32\0", "glDebugMessageControl\0", "(IIIILjava/nio/IntBuffer;Z)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glDebugMessageInsert](https://developer.android.com/reference/android/opengl/GLES32.html#glDebugMessageInsert(int,%20int,%20int,%20int,%20int,%20java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn glDebugMessageInsert<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32, arg3: i32, arg4: i32, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES32", java.flags == PUBLIC | STATIC | NATIVE, .name == "glDebugMessageInsert", .descriptor == "(IIIIILjava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES32\0", "glDebugMessageInsert\0", "(IIIIILjava/lang/String;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glDebugMessageCallback](https://developer.android.com/reference/android/opengl/GLES32.html#glDebugMessageCallback(android.opengl.GLES32.DebugProc))
        ///
        /// Required features: "android-opengl-GLES32_DebugProc"
        #[cfg(any(feature = "all", all(feature = "android-opengl-GLES32_DebugProc")))]
        pub fn glDebugMessageCallback<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::opengl::GLES32_DebugProc>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES32", java.flags == PUBLIC | STATIC | NATIVE, .name == "glDebugMessageCallback", .descriptor == "(Landroid/opengl/GLES32$DebugProc;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES32\0", "glDebugMessageCallback\0", "(Landroid/opengl/GLES32$DebugProc;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetDebugMessageLog](https://developer.android.com/reference/android/opengl/GLES32.html#glGetDebugMessageLog(int,%20int,%20int%5B%5D,%20int,%20int%5B%5D,%20int,%20int%5B%5D,%20int,%20int%5B%5D,%20int,%20int%5B%5D,%20int,%20byte%5B%5D,%20int))
        pub fn glGetDebugMessageLog_int_int_int_array_int_int_array_int_int_array_int_int_array_int_int_array_int_byte_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg3: i32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg5: i32, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg7: i32, arg8: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg9: i32, arg10: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg11: i32, arg12: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>, arg13: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES32", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetDebugMessageLog", .descriptor == "(II[II[II[II[II[II[BI)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6.into()), __jni_bindgen::AsJValue::as_jvalue(&arg7), __jni_bindgen::AsJValue::as_jvalue(&arg8.into()), __jni_bindgen::AsJValue::as_jvalue(&arg9), __jni_bindgen::AsJValue::as_jvalue(&arg10.into()), __jni_bindgen::AsJValue::as_jvalue(&arg11), __jni_bindgen::AsJValue::as_jvalue(&arg12.into()), __jni_bindgen::AsJValue::as_jvalue(&arg13)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES32\0", "glGetDebugMessageLog\0", "(II[II[II[II[II[II[BI)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetDebugMessageLog](https://developer.android.com/reference/android/opengl/GLES32.html#glGetDebugMessageLog(int,%20java.nio.IntBuffer,%20java.nio.IntBuffer,%20java.nio.IntBuffer,%20java.nio.IntBuffer,%20java.nio.IntBuffer,%20java.nio.ByteBuffer))
        ///
        /// Required features: "java-nio-ByteBuffer", "java-nio-IntBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-ByteBuffer", feature = "java-nio-IntBuffer")))]
        pub fn glGetDebugMessageLog_int_IntBuffer_IntBuffer_IntBuffer_IntBuffer_IntBuffer_ByteBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::ByteBuffer>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES32", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetDebugMessageLog", .descriptor == "(ILjava/nio/IntBuffer;Ljava/nio/IntBuffer;Ljava/nio/IntBuffer;Ljava/nio/IntBuffer;Ljava/nio/IntBuffer;Ljava/nio/ByteBuffer;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5.into()), __jni_bindgen::AsJValue::as_jvalue(&arg6.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES32\0", "glGetDebugMessageLog\0", "(ILjava/nio/IntBuffer;Ljava/nio/IntBuffer;Ljava/nio/IntBuffer;Ljava/nio/IntBuffer;Ljava/nio/IntBuffer;Ljava/nio/ByteBuffer;)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetDebugMessageLog](https://developer.android.com/reference/android/opengl/GLES32.html#glGetDebugMessageLog(int,%20int%5B%5D,%20int,%20int%5B%5D,%20int,%20int%5B%5D,%20int,%20int%5B%5D,%20int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn glGetDebugMessageLog_int_int_array_int_int_array_int_int_array_int_int_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg4: i32, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg6: i32, arg7: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg8: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES32", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetDebugMessageLog", .descriptor == "(I[II[II[II[II)[Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5.into()), __jni_bindgen::AsJValue::as_jvalue(&arg6), __jni_bindgen::AsJValue::as_jvalue(&arg7.into()), __jni_bindgen::AsJValue::as_jvalue(&arg8)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES32\0", "glGetDebugMessageLog\0", "(I[II[II[II[II)[Ljava/lang/String;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetDebugMessageLog](https://developer.android.com/reference/android/opengl/GLES32.html#glGetDebugMessageLog(int,%20java.nio.IntBuffer,%20java.nio.IntBuffer,%20java.nio.IntBuffer,%20java.nio.IntBuffer))
        ///
        /// Required features: "java-lang-String", "java-nio-IntBuffer"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-nio-IntBuffer")))]
        pub fn glGetDebugMessageLog_int_IntBuffer_IntBuffer_IntBuffer_IntBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES32", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetDebugMessageLog", .descriptor == "(ILjava/nio/IntBuffer;Ljava/nio/IntBuffer;Ljava/nio/IntBuffer;Ljava/nio/IntBuffer;)[Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES32\0", "glGetDebugMessageLog\0", "(ILjava/nio/IntBuffer;Ljava/nio/IntBuffer;Ljava/nio/IntBuffer;Ljava/nio/IntBuffer;)[Ljava/lang/String;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glPushDebugGroup](https://developer.android.com/reference/android/opengl/GLES32.html#glPushDebugGroup(int,%20int,%20int,%20java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn glPushDebugGroup<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES32", java.flags == PUBLIC | STATIC | NATIVE, .name == "glPushDebugGroup", .descriptor == "(IIILjava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES32\0", "glPushDebugGroup\0", "(IIILjava/lang/String;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glPopDebugGroup](https://developer.android.com/reference/android/opengl/GLES32.html#glPopDebugGroup())
        pub fn glPopDebugGroup<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES32", java.flags == PUBLIC | STATIC | NATIVE, .name == "glPopDebugGroup", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES32\0", "glPopDebugGroup\0", "()V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glObjectLabel](https://developer.android.com/reference/android/opengl/GLES32.html#glObjectLabel(int,%20int,%20int,%20java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn glObjectLabel<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES32", java.flags == PUBLIC | STATIC | NATIVE, .name == "glObjectLabel", .descriptor == "(IIILjava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES32\0", "glObjectLabel\0", "(IIILjava/lang/String;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetObjectLabel](https://developer.android.com/reference/android/opengl/GLES32.html#glGetObjectLabel(int,%20int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn glGetObjectLabel<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES32", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetObjectLabel", .descriptor == "(II)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES32\0", "glGetObjectLabel\0", "(II)Ljava/lang/String;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glObjectPtrLabel](https://developer.android.com/reference/android/opengl/GLES32.html#glObjectPtrLabel(long,%20java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn glObjectPtrLabel<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i64, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES32", java.flags == PUBLIC | STATIC | NATIVE, .name == "glObjectPtrLabel", .descriptor == "(JLjava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES32\0", "glObjectPtrLabel\0", "(JLjava/lang/String;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetObjectPtrLabel](https://developer.android.com/reference/android/opengl/GLES32.html#glGetObjectPtrLabel(long))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn glGetObjectPtrLabel<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES32", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetObjectPtrLabel", .descriptor == "(J)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES32\0", "glGetObjectPtrLabel\0", "(J)Ljava/lang/String;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetPointerv](https://developer.android.com/reference/android/opengl/GLES32.html#glGetPointerv(int))
        pub fn glGetPointerv<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES32", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetPointerv", .descriptor == "(I)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES32\0", "glGetPointerv\0", "(I)J\0");
                __jni_env.call_static_long_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glEnablei](https://developer.android.com/reference/android/opengl/GLES32.html#glEnablei(int,%20int))
        pub fn glEnablei<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES32", java.flags == PUBLIC | STATIC | NATIVE, .name == "glEnablei", .descriptor == "(II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES32\0", "glEnablei\0", "(II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glDisablei](https://developer.android.com/reference/android/opengl/GLES32.html#glDisablei(int,%20int))
        pub fn glDisablei<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES32", java.flags == PUBLIC | STATIC | NATIVE, .name == "glDisablei", .descriptor == "(II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES32\0", "glDisablei\0", "(II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glBlendEquationi](https://developer.android.com/reference/android/opengl/GLES32.html#glBlendEquationi(int,%20int))
        pub fn glBlendEquationi<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES32", java.flags == PUBLIC | STATIC | NATIVE, .name == "glBlendEquationi", .descriptor == "(II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES32\0", "glBlendEquationi\0", "(II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glBlendEquationSeparatei](https://developer.android.com/reference/android/opengl/GLES32.html#glBlendEquationSeparatei(int,%20int,%20int))
        pub fn glBlendEquationSeparatei<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES32", java.flags == PUBLIC | STATIC | NATIVE, .name == "glBlendEquationSeparatei", .descriptor == "(III)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES32\0", "glBlendEquationSeparatei\0", "(III)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glBlendFunci](https://developer.android.com/reference/android/opengl/GLES32.html#glBlendFunci(int,%20int,%20int))
        pub fn glBlendFunci<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES32", java.flags == PUBLIC | STATIC | NATIVE, .name == "glBlendFunci", .descriptor == "(III)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES32\0", "glBlendFunci\0", "(III)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glBlendFuncSeparatei](https://developer.android.com/reference/android/opengl/GLES32.html#glBlendFuncSeparatei(int,%20int,%20int,%20int,%20int))
        pub fn glBlendFuncSeparatei<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32, arg3: i32, arg4: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES32", java.flags == PUBLIC | STATIC | NATIVE, .name == "glBlendFuncSeparatei", .descriptor == "(IIIII)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES32\0", "glBlendFuncSeparatei\0", "(IIIII)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glColorMaski](https://developer.android.com/reference/android/opengl/GLES32.html#glColorMaski(int,%20boolean,%20boolean,%20boolean,%20boolean))
        pub fn glColorMaski<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: bool, arg2: bool, arg3: bool, arg4: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES32", java.flags == PUBLIC | STATIC | NATIVE, .name == "glColorMaski", .descriptor == "(IZZZZ)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES32\0", "glColorMaski\0", "(IZZZZ)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glIsEnabledi](https://developer.android.com/reference/android/opengl/GLES32.html#glIsEnabledi(int,%20int))
        pub fn glIsEnabledi<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES32", java.flags == PUBLIC | STATIC | NATIVE, .name == "glIsEnabledi", .descriptor == "(II)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES32\0", "glIsEnabledi\0", "(II)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glDrawElementsBaseVertex](https://developer.android.com/reference/android/opengl/GLES32.html#glDrawElementsBaseVertex(int,%20int,%20int,%20java.nio.Buffer,%20int))
        ///
        /// Required features: "java-nio-Buffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-Buffer")))]
        pub fn glDrawElementsBaseVertex<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::Buffer>>, arg4: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES32", java.flags == PUBLIC | STATIC | NATIVE, .name == "glDrawElementsBaseVertex", .descriptor == "(IIILjava/nio/Buffer;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES32\0", "glDrawElementsBaseVertex\0", "(IIILjava/nio/Buffer;I)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glDrawRangeElementsBaseVertex](https://developer.android.com/reference/android/opengl/GLES32.html#glDrawRangeElementsBaseVertex(int,%20int,%20int,%20int,%20int,%20java.nio.Buffer,%20int))
        ///
        /// Required features: "java-nio-Buffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-Buffer")))]
        pub fn glDrawRangeElementsBaseVertex<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32, arg3: i32, arg4: i32, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::Buffer>>, arg6: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES32", java.flags == PUBLIC | STATIC | NATIVE, .name == "glDrawRangeElementsBaseVertex", .descriptor == "(IIIIILjava/nio/Buffer;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5.into()), __jni_bindgen::AsJValue::as_jvalue(&arg6)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES32\0", "glDrawRangeElementsBaseVertex\0", "(IIIIILjava/nio/Buffer;I)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glDrawElementsInstancedBaseVertex](https://developer.android.com/reference/android/opengl/GLES32.html#glDrawElementsInstancedBaseVertex(int,%20int,%20int,%20java.nio.Buffer,%20int,%20int))
        ///
        /// Required features: "java-nio-Buffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-Buffer")))]
        pub fn glDrawElementsInstancedBaseVertex_int_int_int_Buffer_int_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::Buffer>>, arg4: i32, arg5: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES32", java.flags == PUBLIC | STATIC | NATIVE, .name == "glDrawElementsInstancedBaseVertex", .descriptor == "(IIILjava/nio/Buffer;II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES32\0", "glDrawElementsInstancedBaseVertex\0", "(IIILjava/nio/Buffer;II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glDrawElementsInstancedBaseVertex](https://developer.android.com/reference/android/opengl/GLES32.html#glDrawElementsInstancedBaseVertex(int,%20int,%20int,%20int,%20int,%20int))
        pub fn glDrawElementsInstancedBaseVertex_int_int_int_int_int_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32, arg3: i32, arg4: i32, arg5: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES32", java.flags == PUBLIC | STATIC | NATIVE, .name == "glDrawElementsInstancedBaseVertex", .descriptor == "(IIIIII)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES32\0", "glDrawElementsInstancedBaseVertex\0", "(IIIIII)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glFramebufferTexture](https://developer.android.com/reference/android/opengl/GLES32.html#glFramebufferTexture(int,%20int,%20int,%20int))
        pub fn glFramebufferTexture<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES32", java.flags == PUBLIC | STATIC | NATIVE, .name == "glFramebufferTexture", .descriptor == "(IIII)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES32\0", "glFramebufferTexture\0", "(IIII)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glPrimitiveBoundingBox](https://developer.android.com/reference/android/opengl/GLES32.html#glPrimitiveBoundingBox(float,%20float,%20float,%20float,%20float,%20float,%20float,%20float))
        pub fn glPrimitiveBoundingBox<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f32, arg1: f32, arg2: f32, arg3: f32, arg4: f32, arg5: f32, arg6: f32, arg7: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES32", java.flags == PUBLIC | STATIC | NATIVE, .name == "glPrimitiveBoundingBox", .descriptor == "(FFFFFFFF)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6), __jni_bindgen::AsJValue::as_jvalue(&arg7)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES32\0", "glPrimitiveBoundingBox\0", "(FFFFFFFF)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetGraphicsResetStatus](https://developer.android.com/reference/android/opengl/GLES32.html#glGetGraphicsResetStatus())
        pub fn glGetGraphicsResetStatus<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES32", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetGraphicsResetStatus", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES32\0", "glGetGraphicsResetStatus\0", "()I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glReadnPixels](https://developer.android.com/reference/android/opengl/GLES32.html#glReadnPixels(int,%20int,%20int,%20int,%20int,%20int,%20int,%20java.nio.Buffer))
        ///
        /// Required features: "java-nio-Buffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-Buffer")))]
        pub fn glReadnPixels<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32, arg3: i32, arg4: i32, arg5: i32, arg6: i32, arg7: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::Buffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES32", java.flags == PUBLIC | STATIC | NATIVE, .name == "glReadnPixels", .descriptor == "(IIIIIIILjava/nio/Buffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6), __jni_bindgen::AsJValue::as_jvalue(&arg7.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES32\0", "glReadnPixels\0", "(IIIIIIILjava/nio/Buffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetnUniformfv](https://developer.android.com/reference/android/opengl/GLES32.html#glGetnUniformfv(int,%20int,%20int,%20float%5B%5D,%20int))
        pub fn glGetnUniformfv_int_int_int_float_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>, arg4: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES32", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetnUniformfv", .descriptor == "(III[FI)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES32\0", "glGetnUniformfv\0", "(III[FI)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetnUniformfv](https://developer.android.com/reference/android/opengl/GLES32.html#glGetnUniformfv(int,%20int,%20int,%20java.nio.FloatBuffer))
        ///
        /// Required features: "java-nio-FloatBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-FloatBuffer")))]
        pub fn glGetnUniformfv_int_int_int_FloatBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::FloatBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES32", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetnUniformfv", .descriptor == "(IIILjava/nio/FloatBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES32\0", "glGetnUniformfv\0", "(IIILjava/nio/FloatBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetnUniformiv](https://developer.android.com/reference/android/opengl/GLES32.html#glGetnUniformiv(int,%20int,%20int,%20int%5B%5D,%20int))
        pub fn glGetnUniformiv_int_int_int_int_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg4: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES32", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetnUniformiv", .descriptor == "(III[II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES32\0", "glGetnUniformiv\0", "(III[II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetnUniformiv](https://developer.android.com/reference/android/opengl/GLES32.html#glGetnUniformiv(int,%20int,%20int,%20java.nio.IntBuffer))
        ///
        /// Required features: "java-nio-IntBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-IntBuffer")))]
        pub fn glGetnUniformiv_int_int_int_IntBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES32", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetnUniformiv", .descriptor == "(IIILjava/nio/IntBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES32\0", "glGetnUniformiv\0", "(IIILjava/nio/IntBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetnUniformuiv](https://developer.android.com/reference/android/opengl/GLES32.html#glGetnUniformuiv(int,%20int,%20int,%20int%5B%5D,%20int))
        pub fn glGetnUniformuiv_int_int_int_int_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg4: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES32", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetnUniformuiv", .descriptor == "(III[II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES32\0", "glGetnUniformuiv\0", "(III[II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetnUniformuiv](https://developer.android.com/reference/android/opengl/GLES32.html#glGetnUniformuiv(int,%20int,%20int,%20java.nio.IntBuffer))
        ///
        /// Required features: "java-nio-IntBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-IntBuffer")))]
        pub fn glGetnUniformuiv_int_int_int_IntBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES32", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetnUniformuiv", .descriptor == "(IIILjava/nio/IntBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES32\0", "glGetnUniformuiv\0", "(IIILjava/nio/IntBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glMinSampleShading](https://developer.android.com/reference/android/opengl/GLES32.html#glMinSampleShading(float))
        pub fn glMinSampleShading<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES32", java.flags == PUBLIC | STATIC | NATIVE, .name == "glMinSampleShading", .descriptor == "(F)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES32\0", "glMinSampleShading\0", "(F)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glPatchParameteri](https://developer.android.com/reference/android/opengl/GLES32.html#glPatchParameteri(int,%20int))
        pub fn glPatchParameteri<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES32", java.flags == PUBLIC | STATIC | NATIVE, .name == "glPatchParameteri", .descriptor == "(II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES32\0", "glPatchParameteri\0", "(II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glTexParameterIiv](https://developer.android.com/reference/android/opengl/GLES32.html#glTexParameterIiv(int,%20int,%20int%5B%5D,%20int))
        pub fn glTexParameterIiv_int_int_int_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES32", java.flags == PUBLIC | STATIC | NATIVE, .name == "glTexParameterIiv", .descriptor == "(II[II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES32\0", "glTexParameterIiv\0", "(II[II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glTexParameterIiv](https://developer.android.com/reference/android/opengl/GLES32.html#glTexParameterIiv(int,%20int,%20java.nio.IntBuffer))
        ///
        /// Required features: "java-nio-IntBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-IntBuffer")))]
        pub fn glTexParameterIiv_int_int_IntBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES32", java.flags == PUBLIC | STATIC | NATIVE, .name == "glTexParameterIiv", .descriptor == "(IILjava/nio/IntBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES32\0", "glTexParameterIiv\0", "(IILjava/nio/IntBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glTexParameterIuiv](https://developer.android.com/reference/android/opengl/GLES32.html#glTexParameterIuiv(int,%20int,%20int%5B%5D,%20int))
        pub fn glTexParameterIuiv_int_int_int_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES32", java.flags == PUBLIC | STATIC | NATIVE, .name == "glTexParameterIuiv", .descriptor == "(II[II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES32\0", "glTexParameterIuiv\0", "(II[II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glTexParameterIuiv](https://developer.android.com/reference/android/opengl/GLES32.html#glTexParameterIuiv(int,%20int,%20java.nio.IntBuffer))
        ///
        /// Required features: "java-nio-IntBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-IntBuffer")))]
        pub fn glTexParameterIuiv_int_int_IntBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES32", java.flags == PUBLIC | STATIC | NATIVE, .name == "glTexParameterIuiv", .descriptor == "(IILjava/nio/IntBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES32\0", "glTexParameterIuiv\0", "(IILjava/nio/IntBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetTexParameterIiv](https://developer.android.com/reference/android/opengl/GLES32.html#glGetTexParameterIiv(int,%20int,%20int%5B%5D,%20int))
        pub fn glGetTexParameterIiv_int_int_int_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES32", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetTexParameterIiv", .descriptor == "(II[II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES32\0", "glGetTexParameterIiv\0", "(II[II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetTexParameterIiv](https://developer.android.com/reference/android/opengl/GLES32.html#glGetTexParameterIiv(int,%20int,%20java.nio.IntBuffer))
        ///
        /// Required features: "java-nio-IntBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-IntBuffer")))]
        pub fn glGetTexParameterIiv_int_int_IntBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES32", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetTexParameterIiv", .descriptor == "(IILjava/nio/IntBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES32\0", "glGetTexParameterIiv\0", "(IILjava/nio/IntBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetTexParameterIuiv](https://developer.android.com/reference/android/opengl/GLES32.html#glGetTexParameterIuiv(int,%20int,%20int%5B%5D,%20int))
        pub fn glGetTexParameterIuiv_int_int_int_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES32", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetTexParameterIuiv", .descriptor == "(II[II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES32\0", "glGetTexParameterIuiv\0", "(II[II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetTexParameterIuiv](https://developer.android.com/reference/android/opengl/GLES32.html#glGetTexParameterIuiv(int,%20int,%20java.nio.IntBuffer))
        ///
        /// Required features: "java-nio-IntBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-IntBuffer")))]
        pub fn glGetTexParameterIuiv_int_int_IntBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES32", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetTexParameterIuiv", .descriptor == "(IILjava/nio/IntBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES32\0", "glGetTexParameterIuiv\0", "(IILjava/nio/IntBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glSamplerParameterIiv](https://developer.android.com/reference/android/opengl/GLES32.html#glSamplerParameterIiv(int,%20int,%20int%5B%5D,%20int))
        pub fn glSamplerParameterIiv_int_int_int_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES32", java.flags == PUBLIC | STATIC | NATIVE, .name == "glSamplerParameterIiv", .descriptor == "(II[II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES32\0", "glSamplerParameterIiv\0", "(II[II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glSamplerParameterIiv](https://developer.android.com/reference/android/opengl/GLES32.html#glSamplerParameterIiv(int,%20int,%20java.nio.IntBuffer))
        ///
        /// Required features: "java-nio-IntBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-IntBuffer")))]
        pub fn glSamplerParameterIiv_int_int_IntBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES32", java.flags == PUBLIC | STATIC | NATIVE, .name == "glSamplerParameterIiv", .descriptor == "(IILjava/nio/IntBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES32\0", "glSamplerParameterIiv\0", "(IILjava/nio/IntBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glSamplerParameterIuiv](https://developer.android.com/reference/android/opengl/GLES32.html#glSamplerParameterIuiv(int,%20int,%20int%5B%5D,%20int))
        pub fn glSamplerParameterIuiv_int_int_int_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES32", java.flags == PUBLIC | STATIC | NATIVE, .name == "glSamplerParameterIuiv", .descriptor == "(II[II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES32\0", "glSamplerParameterIuiv\0", "(II[II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glSamplerParameterIuiv](https://developer.android.com/reference/android/opengl/GLES32.html#glSamplerParameterIuiv(int,%20int,%20java.nio.IntBuffer))
        ///
        /// Required features: "java-nio-IntBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-IntBuffer")))]
        pub fn glSamplerParameterIuiv_int_int_IntBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES32", java.flags == PUBLIC | STATIC | NATIVE, .name == "glSamplerParameterIuiv", .descriptor == "(IILjava/nio/IntBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES32\0", "glSamplerParameterIuiv\0", "(IILjava/nio/IntBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetSamplerParameterIiv](https://developer.android.com/reference/android/opengl/GLES32.html#glGetSamplerParameterIiv(int,%20int,%20int%5B%5D,%20int))
        pub fn glGetSamplerParameterIiv_int_int_int_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES32", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetSamplerParameterIiv", .descriptor == "(II[II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES32\0", "glGetSamplerParameterIiv\0", "(II[II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetSamplerParameterIiv](https://developer.android.com/reference/android/opengl/GLES32.html#glGetSamplerParameterIiv(int,%20int,%20java.nio.IntBuffer))
        ///
        /// Required features: "java-nio-IntBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-IntBuffer")))]
        pub fn glGetSamplerParameterIiv_int_int_IntBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES32", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetSamplerParameterIiv", .descriptor == "(IILjava/nio/IntBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES32\0", "glGetSamplerParameterIiv\0", "(IILjava/nio/IntBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetSamplerParameterIuiv](https://developer.android.com/reference/android/opengl/GLES32.html#glGetSamplerParameterIuiv(int,%20int,%20int%5B%5D,%20int))
        pub fn glGetSamplerParameterIuiv_int_int_int_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES32", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetSamplerParameterIuiv", .descriptor == "(II[II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES32\0", "glGetSamplerParameterIuiv\0", "(II[II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetSamplerParameterIuiv](https://developer.android.com/reference/android/opengl/GLES32.html#glGetSamplerParameterIuiv(int,%20int,%20java.nio.IntBuffer))
        ///
        /// Required features: "java-nio-IntBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-IntBuffer")))]
        pub fn glGetSamplerParameterIuiv_int_int_IntBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES32", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetSamplerParameterIuiv", .descriptor == "(IILjava/nio/IntBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES32\0", "glGetSamplerParameterIuiv\0", "(IILjava/nio/IntBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glTexBuffer](https://developer.android.com/reference/android/opengl/GLES32.html#glTexBuffer(int,%20int,%20int))
        pub fn glTexBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES32", java.flags == PUBLIC | STATIC | NATIVE, .name == "glTexBuffer", .descriptor == "(III)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES32\0", "glTexBuffer\0", "(III)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glTexBufferRange](https://developer.android.com/reference/android/opengl/GLES32.html#glTexBufferRange(int,%20int,%20int,%20int,%20int))
        pub fn glTexBufferRange<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32, arg3: i32, arg4: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES32", java.flags == PUBLIC | STATIC | NATIVE, .name == "glTexBufferRange", .descriptor == "(IIIII)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES32\0", "glTexBufferRange\0", "(IIIII)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glTexStorage3DMultisample](https://developer.android.com/reference/android/opengl/GLES32.html#glTexStorage3DMultisample(int,%20int,%20int,%20int,%20int,%20int,%20boolean))
        pub fn glTexStorage3DMultisample<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32, arg3: i32, arg4: i32, arg5: i32, arg6: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES32", java.flags == PUBLIC | STATIC | NATIVE, .name == "glTexStorage3DMultisample", .descriptor == "(IIIIIIZ)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES32\0", "glTexStorage3DMultisample\0", "(IIIIIIZ)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [GL_BUFFER](https://developer.android.com/reference/android/opengl/GLES32.html#GL_BUFFER)
        pub const GL_BUFFER : i32 = 33504;

        /// public static final [GL_CLAMP_TO_BORDER](https://developer.android.com/reference/android/opengl/GLES32.html#GL_CLAMP_TO_BORDER)
        pub const GL_CLAMP_TO_BORDER : i32 = 33069;

        /// public static final [GL_COLORBURN](https://developer.android.com/reference/android/opengl/GLES32.html#GL_COLORBURN)
        pub const GL_COLORBURN : i32 = 37530;

        /// public static final [GL_COLORDODGE](https://developer.android.com/reference/android/opengl/GLES32.html#GL_COLORDODGE)
        pub const GL_COLORDODGE : i32 = 37529;

        /// public static final [GL_COMPRESSED_RGBA_ASTC_10x10](https://developer.android.com/reference/android/opengl/GLES32.html#GL_COMPRESSED_RGBA_ASTC_10x10)
        pub const GL_COMPRESSED_RGBA_ASTC_10x10 : i32 = 37819;

        /// public static final [GL_COMPRESSED_RGBA_ASTC_10x5](https://developer.android.com/reference/android/opengl/GLES32.html#GL_COMPRESSED_RGBA_ASTC_10x5)
        pub const GL_COMPRESSED_RGBA_ASTC_10x5 : i32 = 37816;

        /// public static final [GL_COMPRESSED_RGBA_ASTC_10x6](https://developer.android.com/reference/android/opengl/GLES32.html#GL_COMPRESSED_RGBA_ASTC_10x6)
        pub const GL_COMPRESSED_RGBA_ASTC_10x6 : i32 = 37817;

        /// public static final [GL_COMPRESSED_RGBA_ASTC_10x8](https://developer.android.com/reference/android/opengl/GLES32.html#GL_COMPRESSED_RGBA_ASTC_10x8)
        pub const GL_COMPRESSED_RGBA_ASTC_10x8 : i32 = 37818;

        /// public static final [GL_COMPRESSED_RGBA_ASTC_12x10](https://developer.android.com/reference/android/opengl/GLES32.html#GL_COMPRESSED_RGBA_ASTC_12x10)
        pub const GL_COMPRESSED_RGBA_ASTC_12x10 : i32 = 37820;

        /// public static final [GL_COMPRESSED_RGBA_ASTC_12x12](https://developer.android.com/reference/android/opengl/GLES32.html#GL_COMPRESSED_RGBA_ASTC_12x12)
        pub const GL_COMPRESSED_RGBA_ASTC_12x12 : i32 = 37821;

        /// public static final [GL_COMPRESSED_RGBA_ASTC_4x4](https://developer.android.com/reference/android/opengl/GLES32.html#GL_COMPRESSED_RGBA_ASTC_4x4)
        pub const GL_COMPRESSED_RGBA_ASTC_4x4 : i32 = 37808;

        /// public static final [GL_COMPRESSED_RGBA_ASTC_5x4](https://developer.android.com/reference/android/opengl/GLES32.html#GL_COMPRESSED_RGBA_ASTC_5x4)
        pub const GL_COMPRESSED_RGBA_ASTC_5x4 : i32 = 37809;

        /// public static final [GL_COMPRESSED_RGBA_ASTC_5x5](https://developer.android.com/reference/android/opengl/GLES32.html#GL_COMPRESSED_RGBA_ASTC_5x5)
        pub const GL_COMPRESSED_RGBA_ASTC_5x5 : i32 = 37810;

        /// public static final [GL_COMPRESSED_RGBA_ASTC_6x5](https://developer.android.com/reference/android/opengl/GLES32.html#GL_COMPRESSED_RGBA_ASTC_6x5)
        pub const GL_COMPRESSED_RGBA_ASTC_6x5 : i32 = 37811;

        /// public static final [GL_COMPRESSED_RGBA_ASTC_6x6](https://developer.android.com/reference/android/opengl/GLES32.html#GL_COMPRESSED_RGBA_ASTC_6x6)
        pub const GL_COMPRESSED_RGBA_ASTC_6x6 : i32 = 37812;

        /// public static final [GL_COMPRESSED_RGBA_ASTC_8x5](https://developer.android.com/reference/android/opengl/GLES32.html#GL_COMPRESSED_RGBA_ASTC_8x5)
        pub const GL_COMPRESSED_RGBA_ASTC_8x5 : i32 = 37813;

        /// public static final [GL_COMPRESSED_RGBA_ASTC_8x6](https://developer.android.com/reference/android/opengl/GLES32.html#GL_COMPRESSED_RGBA_ASTC_8x6)
        pub const GL_COMPRESSED_RGBA_ASTC_8x6 : i32 = 37814;

        /// public static final [GL_COMPRESSED_RGBA_ASTC_8x8](https://developer.android.com/reference/android/opengl/GLES32.html#GL_COMPRESSED_RGBA_ASTC_8x8)
        pub const GL_COMPRESSED_RGBA_ASTC_8x8 : i32 = 37815;

        /// public static final [GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10](https://developer.android.com/reference/android/opengl/GLES32.html#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10)
        pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10 : i32 = 37851;

        /// public static final [GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5](https://developer.android.com/reference/android/opengl/GLES32.html#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5)
        pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5 : i32 = 37848;

        /// public static final [GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6](https://developer.android.com/reference/android/opengl/GLES32.html#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6)
        pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6 : i32 = 37849;

        /// public static final [GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8](https://developer.android.com/reference/android/opengl/GLES32.html#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8)
        pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8 : i32 = 37850;

        /// public static final [GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10](https://developer.android.com/reference/android/opengl/GLES32.html#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10)
        pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10 : i32 = 37852;

        /// public static final [GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12](https://developer.android.com/reference/android/opengl/GLES32.html#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12)
        pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12 : i32 = 37853;

        /// public static final [GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4](https://developer.android.com/reference/android/opengl/GLES32.html#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4)
        pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4 : i32 = 37840;

        /// public static final [GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4](https://developer.android.com/reference/android/opengl/GLES32.html#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4)
        pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4 : i32 = 37841;

        /// public static final [GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5](https://developer.android.com/reference/android/opengl/GLES32.html#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5)
        pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5 : i32 = 37842;

        /// public static final [GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5](https://developer.android.com/reference/android/opengl/GLES32.html#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5)
        pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5 : i32 = 37843;

        /// public static final [GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6](https://developer.android.com/reference/android/opengl/GLES32.html#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6)
        pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6 : i32 = 37844;

        /// public static final [GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5](https://developer.android.com/reference/android/opengl/GLES32.html#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5)
        pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5 : i32 = 37845;

        /// public static final [GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6](https://developer.android.com/reference/android/opengl/GLES32.html#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6)
        pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6 : i32 = 37846;

        /// public static final [GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8](https://developer.android.com/reference/android/opengl/GLES32.html#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8)
        pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8 : i32 = 37847;

        /// public static final [GL_CONTEXT_FLAGS](https://developer.android.com/reference/android/opengl/GLES32.html#GL_CONTEXT_FLAGS)
        pub const GL_CONTEXT_FLAGS : i32 = 33310;

        /// public static final [GL_CONTEXT_FLAG_DEBUG_BIT](https://developer.android.com/reference/android/opengl/GLES32.html#GL_CONTEXT_FLAG_DEBUG_BIT)
        pub const GL_CONTEXT_FLAG_DEBUG_BIT : i32 = 2;

        /// public static final [GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT](https://developer.android.com/reference/android/opengl/GLES32.html#GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT)
        pub const GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT : i32 = 4;

        /// public static final [GL_CONTEXT_LOST](https://developer.android.com/reference/android/opengl/GLES32.html#GL_CONTEXT_LOST)
        pub const GL_CONTEXT_LOST : i32 = 1287;

        /// public static final [GL_DARKEN](https://developer.android.com/reference/android/opengl/GLES32.html#GL_DARKEN)
        pub const GL_DARKEN : i32 = 37527;

        /// public static final [GL_DEBUG_CALLBACK_FUNCTION](https://developer.android.com/reference/android/opengl/GLES32.html#GL_DEBUG_CALLBACK_FUNCTION)
        pub const GL_DEBUG_CALLBACK_FUNCTION : i32 = 33348;

        /// public static final [GL_DEBUG_CALLBACK_USER_PARAM](https://developer.android.com/reference/android/opengl/GLES32.html#GL_DEBUG_CALLBACK_USER_PARAM)
        pub const GL_DEBUG_CALLBACK_USER_PARAM : i32 = 33349;

        /// public static final [GL_DEBUG_GROUP_STACK_DEPTH](https://developer.android.com/reference/android/opengl/GLES32.html#GL_DEBUG_GROUP_STACK_DEPTH)
        pub const GL_DEBUG_GROUP_STACK_DEPTH : i32 = 33389;

        /// public static final [GL_DEBUG_LOGGED_MESSAGES](https://developer.android.com/reference/android/opengl/GLES32.html#GL_DEBUG_LOGGED_MESSAGES)
        pub const GL_DEBUG_LOGGED_MESSAGES : i32 = 37189;

        /// public static final [GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH](https://developer.android.com/reference/android/opengl/GLES32.html#GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH)
        pub const GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH : i32 = 33347;

        /// public static final [GL_DEBUG_OUTPUT](https://developer.android.com/reference/android/opengl/GLES32.html#GL_DEBUG_OUTPUT)
        pub const GL_DEBUG_OUTPUT : i32 = 37600;

        /// public static final [GL_DEBUG_OUTPUT_SYNCHRONOUS](https://developer.android.com/reference/android/opengl/GLES32.html#GL_DEBUG_OUTPUT_SYNCHRONOUS)
        pub const GL_DEBUG_OUTPUT_SYNCHRONOUS : i32 = 33346;

        /// public static final [GL_DEBUG_SEVERITY_HIGH](https://developer.android.com/reference/android/opengl/GLES32.html#GL_DEBUG_SEVERITY_HIGH)
        pub const GL_DEBUG_SEVERITY_HIGH : i32 = 37190;

        /// public static final [GL_DEBUG_SEVERITY_LOW](https://developer.android.com/reference/android/opengl/GLES32.html#GL_DEBUG_SEVERITY_LOW)
        pub const GL_DEBUG_SEVERITY_LOW : i32 = 37192;

        /// public static final [GL_DEBUG_SEVERITY_MEDIUM](https://developer.android.com/reference/android/opengl/GLES32.html#GL_DEBUG_SEVERITY_MEDIUM)
        pub const GL_DEBUG_SEVERITY_MEDIUM : i32 = 37191;

        /// public static final [GL_DEBUG_SEVERITY_NOTIFICATION](https://developer.android.com/reference/android/opengl/GLES32.html#GL_DEBUG_SEVERITY_NOTIFICATION)
        pub const GL_DEBUG_SEVERITY_NOTIFICATION : i32 = 33387;

        /// public static final [GL_DEBUG_SOURCE_API](https://developer.android.com/reference/android/opengl/GLES32.html#GL_DEBUG_SOURCE_API)
        pub const GL_DEBUG_SOURCE_API : i32 = 33350;

        /// public static final [GL_DEBUG_SOURCE_APPLICATION](https://developer.android.com/reference/android/opengl/GLES32.html#GL_DEBUG_SOURCE_APPLICATION)
        pub const GL_DEBUG_SOURCE_APPLICATION : i32 = 33354;

        /// public static final [GL_DEBUG_SOURCE_OTHER](https://developer.android.com/reference/android/opengl/GLES32.html#GL_DEBUG_SOURCE_OTHER)
        pub const GL_DEBUG_SOURCE_OTHER : i32 = 33355;

        /// public static final [GL_DEBUG_SOURCE_SHADER_COMPILER](https://developer.android.com/reference/android/opengl/GLES32.html#GL_DEBUG_SOURCE_SHADER_COMPILER)
        pub const GL_DEBUG_SOURCE_SHADER_COMPILER : i32 = 33352;

        /// public static final [GL_DEBUG_SOURCE_THIRD_PARTY](https://developer.android.com/reference/android/opengl/GLES32.html#GL_DEBUG_SOURCE_THIRD_PARTY)
        pub const GL_DEBUG_SOURCE_THIRD_PARTY : i32 = 33353;

        /// public static final [GL_DEBUG_SOURCE_WINDOW_SYSTEM](https://developer.android.com/reference/android/opengl/GLES32.html#GL_DEBUG_SOURCE_WINDOW_SYSTEM)
        pub const GL_DEBUG_SOURCE_WINDOW_SYSTEM : i32 = 33351;

        /// public static final [GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR](https://developer.android.com/reference/android/opengl/GLES32.html#GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR)
        pub const GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR : i32 = 33357;

        /// public static final [GL_DEBUG_TYPE_ERROR](https://developer.android.com/reference/android/opengl/GLES32.html#GL_DEBUG_TYPE_ERROR)
        pub const GL_DEBUG_TYPE_ERROR : i32 = 33356;

        /// public static final [GL_DEBUG_TYPE_MARKER](https://developer.android.com/reference/android/opengl/GLES32.html#GL_DEBUG_TYPE_MARKER)
        pub const GL_DEBUG_TYPE_MARKER : i32 = 33384;

        /// public static final [GL_DEBUG_TYPE_OTHER](https://developer.android.com/reference/android/opengl/GLES32.html#GL_DEBUG_TYPE_OTHER)
        pub const GL_DEBUG_TYPE_OTHER : i32 = 33361;

        /// public static final [GL_DEBUG_TYPE_PERFORMANCE](https://developer.android.com/reference/android/opengl/GLES32.html#GL_DEBUG_TYPE_PERFORMANCE)
        pub const GL_DEBUG_TYPE_PERFORMANCE : i32 = 33360;

        /// public static final [GL_DEBUG_TYPE_POP_GROUP](https://developer.android.com/reference/android/opengl/GLES32.html#GL_DEBUG_TYPE_POP_GROUP)
        pub const GL_DEBUG_TYPE_POP_GROUP : i32 = 33386;

        /// public static final [GL_DEBUG_TYPE_PORTABILITY](https://developer.android.com/reference/android/opengl/GLES32.html#GL_DEBUG_TYPE_PORTABILITY)
        pub const GL_DEBUG_TYPE_PORTABILITY : i32 = 33359;

        /// public static final [GL_DEBUG_TYPE_PUSH_GROUP](https://developer.android.com/reference/android/opengl/GLES32.html#GL_DEBUG_TYPE_PUSH_GROUP)
        pub const GL_DEBUG_TYPE_PUSH_GROUP : i32 = 33385;

        /// public static final [GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR](https://developer.android.com/reference/android/opengl/GLES32.html#GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR)
        pub const GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR : i32 = 33358;

        /// public static final [GL_DIFFERENCE](https://developer.android.com/reference/android/opengl/GLES32.html#GL_DIFFERENCE)
        pub const GL_DIFFERENCE : i32 = 37534;

        /// public static final [GL_EXCLUSION](https://developer.android.com/reference/android/opengl/GLES32.html#GL_EXCLUSION)
        pub const GL_EXCLUSION : i32 = 37536;

        /// public static final [GL_FIRST_VERTEX_CONVENTION](https://developer.android.com/reference/android/opengl/GLES32.html#GL_FIRST_VERTEX_CONVENTION)
        pub const GL_FIRST_VERTEX_CONVENTION : i32 = 36429;

        /// public static final [GL_FRACTIONAL_EVEN](https://developer.android.com/reference/android/opengl/GLES32.html#GL_FRACTIONAL_EVEN)
        pub const GL_FRACTIONAL_EVEN : i32 = 36476;

        /// public static final [GL_FRACTIONAL_ODD](https://developer.android.com/reference/android/opengl/GLES32.html#GL_FRACTIONAL_ODD)
        pub const GL_FRACTIONAL_ODD : i32 = 36475;

        /// public static final [GL_FRAGMENT_INTERPOLATION_OFFSET_BITS](https://developer.android.com/reference/android/opengl/GLES32.html#GL_FRAGMENT_INTERPOLATION_OFFSET_BITS)
        pub const GL_FRAGMENT_INTERPOLATION_OFFSET_BITS : i32 = 36445;

        /// public static final [GL_FRAMEBUFFER_ATTACHMENT_LAYERED](https://developer.android.com/reference/android/opengl/GLES32.html#GL_FRAMEBUFFER_ATTACHMENT_LAYERED)
        pub const GL_FRAMEBUFFER_ATTACHMENT_LAYERED : i32 = 36263;

        /// public static final [GL_FRAMEBUFFER_DEFAULT_LAYERS](https://developer.android.com/reference/android/opengl/GLES32.html#GL_FRAMEBUFFER_DEFAULT_LAYERS)
        pub const GL_FRAMEBUFFER_DEFAULT_LAYERS : i32 = 37650;

        /// public static final [GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS](https://developer.android.com/reference/android/opengl/GLES32.html#GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS)
        pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS : i32 = 36264;

        /// public static final [GL_GEOMETRY_INPUT_TYPE](https://developer.android.com/reference/android/opengl/GLES32.html#GL_GEOMETRY_INPUT_TYPE)
        pub const GL_GEOMETRY_INPUT_TYPE : i32 = 35095;

        /// public static final [GL_GEOMETRY_OUTPUT_TYPE](https://developer.android.com/reference/android/opengl/GLES32.html#GL_GEOMETRY_OUTPUT_TYPE)
        pub const GL_GEOMETRY_OUTPUT_TYPE : i32 = 35096;

        /// public static final [GL_GEOMETRY_SHADER](https://developer.android.com/reference/android/opengl/GLES32.html#GL_GEOMETRY_SHADER)
        pub const GL_GEOMETRY_SHADER : i32 = 36313;

        /// public static final [GL_GEOMETRY_SHADER_BIT](https://developer.android.com/reference/android/opengl/GLES32.html#GL_GEOMETRY_SHADER_BIT)
        pub const GL_GEOMETRY_SHADER_BIT : i32 = 4;

        /// public static final [GL_GEOMETRY_SHADER_INVOCATIONS](https://developer.android.com/reference/android/opengl/GLES32.html#GL_GEOMETRY_SHADER_INVOCATIONS)
        pub const GL_GEOMETRY_SHADER_INVOCATIONS : i32 = 34943;

        /// public static final [GL_GEOMETRY_VERTICES_OUT](https://developer.android.com/reference/android/opengl/GLES32.html#GL_GEOMETRY_VERTICES_OUT)
        pub const GL_GEOMETRY_VERTICES_OUT : i32 = 35094;

        /// public static final [GL_GUILTY_CONTEXT_RESET](https://developer.android.com/reference/android/opengl/GLES32.html#GL_GUILTY_CONTEXT_RESET)
        pub const GL_GUILTY_CONTEXT_RESET : i32 = 33363;

        /// public static final [GL_HARDLIGHT](https://developer.android.com/reference/android/opengl/GLES32.html#GL_HARDLIGHT)
        pub const GL_HARDLIGHT : i32 = 37531;

        /// public static final [GL_HSL_COLOR](https://developer.android.com/reference/android/opengl/GLES32.html#GL_HSL_COLOR)
        pub const GL_HSL_COLOR : i32 = 37551;

        /// public static final [GL_HSL_HUE](https://developer.android.com/reference/android/opengl/GLES32.html#GL_HSL_HUE)
        pub const GL_HSL_HUE : i32 = 37549;

        /// public static final [GL_HSL_LUMINOSITY](https://developer.android.com/reference/android/opengl/GLES32.html#GL_HSL_LUMINOSITY)
        pub const GL_HSL_LUMINOSITY : i32 = 37552;

        /// public static final [GL_HSL_SATURATION](https://developer.android.com/reference/android/opengl/GLES32.html#GL_HSL_SATURATION)
        pub const GL_HSL_SATURATION : i32 = 37550;

        /// public static final [GL_IMAGE_BUFFER](https://developer.android.com/reference/android/opengl/GLES32.html#GL_IMAGE_BUFFER)
        pub const GL_IMAGE_BUFFER : i32 = 36945;

        /// public static final [GL_IMAGE_CUBE_MAP_ARRAY](https://developer.android.com/reference/android/opengl/GLES32.html#GL_IMAGE_CUBE_MAP_ARRAY)
        pub const GL_IMAGE_CUBE_MAP_ARRAY : i32 = 36948;

        /// public static final [GL_INNOCENT_CONTEXT_RESET](https://developer.android.com/reference/android/opengl/GLES32.html#GL_INNOCENT_CONTEXT_RESET)
        pub const GL_INNOCENT_CONTEXT_RESET : i32 = 33364;

        /// public static final [GL_INT_IMAGE_BUFFER](https://developer.android.com/reference/android/opengl/GLES32.html#GL_INT_IMAGE_BUFFER)
        pub const GL_INT_IMAGE_BUFFER : i32 = 36956;

        /// public static final [GL_INT_IMAGE_CUBE_MAP_ARRAY](https://developer.android.com/reference/android/opengl/GLES32.html#GL_INT_IMAGE_CUBE_MAP_ARRAY)
        pub const GL_INT_IMAGE_CUBE_MAP_ARRAY : i32 = 36959;

        /// public static final [GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY](https://developer.android.com/reference/android/opengl/GLES32.html#GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY)
        pub const GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY : i32 = 37132;

        /// public static final [GL_INT_SAMPLER_BUFFER](https://developer.android.com/reference/android/opengl/GLES32.html#GL_INT_SAMPLER_BUFFER)
        pub const GL_INT_SAMPLER_BUFFER : i32 = 36304;

        /// public static final [GL_INT_SAMPLER_CUBE_MAP_ARRAY](https://developer.android.com/reference/android/opengl/GLES32.html#GL_INT_SAMPLER_CUBE_MAP_ARRAY)
        pub const GL_INT_SAMPLER_CUBE_MAP_ARRAY : i32 = 36878;

        /// public static final [GL_ISOLINES](https://developer.android.com/reference/android/opengl/GLES32.html#GL_ISOLINES)
        pub const GL_ISOLINES : i32 = 36474;

        /// public static final [GL_IS_PER_PATCH](https://developer.android.com/reference/android/opengl/GLES32.html#GL_IS_PER_PATCH)
        pub const GL_IS_PER_PATCH : i32 = 37607;

        /// public static final [GL_LAST_VERTEX_CONVENTION](https://developer.android.com/reference/android/opengl/GLES32.html#GL_LAST_VERTEX_CONVENTION)
        pub const GL_LAST_VERTEX_CONVENTION : i32 = 36430;

        /// public static final [GL_LAYER_PROVOKING_VERTEX](https://developer.android.com/reference/android/opengl/GLES32.html#GL_LAYER_PROVOKING_VERTEX)
        pub const GL_LAYER_PROVOKING_VERTEX : i32 = 33374;

        /// public static final [GL_LIGHTEN](https://developer.android.com/reference/android/opengl/GLES32.html#GL_LIGHTEN)
        pub const GL_LIGHTEN : i32 = 37528;

        /// public static final [GL_LINES_ADJACENCY](https://developer.android.com/reference/android/opengl/GLES32.html#GL_LINES_ADJACENCY)
        pub const GL_LINES_ADJACENCY : i32 = 10;

        /// public static final [GL_LINE_STRIP_ADJACENCY](https://developer.android.com/reference/android/opengl/GLES32.html#GL_LINE_STRIP_ADJACENCY)
        pub const GL_LINE_STRIP_ADJACENCY : i32 = 11;

        /// public static final [GL_LOSE_CONTEXT_ON_RESET](https://developer.android.com/reference/android/opengl/GLES32.html#GL_LOSE_CONTEXT_ON_RESET)
        pub const GL_LOSE_CONTEXT_ON_RESET : i32 = 33362;

        /// public static final [GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS](https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS)
        pub const GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS : i32 = 35378;

        /// public static final [GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS](https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS)
        pub const GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS : i32 = 36382;

        /// public static final [GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS](https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS)
        pub const GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS : i32 = 36383;

        /// public static final [GL_MAX_DEBUG_GROUP_STACK_DEPTH](https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_DEBUG_GROUP_STACK_DEPTH)
        pub const GL_MAX_DEBUG_GROUP_STACK_DEPTH : i32 = 33388;

        /// public static final [GL_MAX_DEBUG_LOGGED_MESSAGES](https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_DEBUG_LOGGED_MESSAGES)
        pub const GL_MAX_DEBUG_LOGGED_MESSAGES : i32 = 37188;

        /// public static final [GL_MAX_DEBUG_MESSAGE_LENGTH](https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_DEBUG_MESSAGE_LENGTH)
        pub const GL_MAX_DEBUG_MESSAGE_LENGTH : i32 = 37187;

        /// public static final [GL_MAX_FRAGMENT_INTERPOLATION_OFFSET](https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_FRAGMENT_INTERPOLATION_OFFSET)
        pub const GL_MAX_FRAGMENT_INTERPOLATION_OFFSET : i32 = 36444;

        /// public static final [GL_MAX_FRAMEBUFFER_LAYERS](https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_FRAMEBUFFER_LAYERS)
        pub const GL_MAX_FRAMEBUFFER_LAYERS : i32 = 37655;

        /// public static final [GL_MAX_GEOMETRY_ATOMIC_COUNTERS](https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_GEOMETRY_ATOMIC_COUNTERS)
        pub const GL_MAX_GEOMETRY_ATOMIC_COUNTERS : i32 = 37589;

        /// public static final [GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS](https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS)
        pub const GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS : i32 = 37583;

        /// public static final [GL_MAX_GEOMETRY_IMAGE_UNIFORMS](https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_GEOMETRY_IMAGE_UNIFORMS)
        pub const GL_MAX_GEOMETRY_IMAGE_UNIFORMS : i32 = 37069;

        /// public static final [GL_MAX_GEOMETRY_INPUT_COMPONENTS](https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_GEOMETRY_INPUT_COMPONENTS)
        pub const GL_MAX_GEOMETRY_INPUT_COMPONENTS : i32 = 37155;

        /// public static final [GL_MAX_GEOMETRY_OUTPUT_COMPONENTS](https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_GEOMETRY_OUTPUT_COMPONENTS)
        pub const GL_MAX_GEOMETRY_OUTPUT_COMPONENTS : i32 = 37156;

        /// public static final [GL_MAX_GEOMETRY_OUTPUT_VERTICES](https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_GEOMETRY_OUTPUT_VERTICES)
        pub const GL_MAX_GEOMETRY_OUTPUT_VERTICES : i32 = 36320;

        /// public static final [GL_MAX_GEOMETRY_SHADER_INVOCATIONS](https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_GEOMETRY_SHADER_INVOCATIONS)
        pub const GL_MAX_GEOMETRY_SHADER_INVOCATIONS : i32 = 36442;

        /// public static final [GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS](https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS)
        pub const GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS : i32 = 37079;

        /// public static final [GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS](https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS)
        pub const GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS : i32 = 35881;

        /// public static final [GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS](https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS)
        pub const GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS : i32 = 36321;

        /// public static final [GL_MAX_GEOMETRY_UNIFORM_BLOCKS](https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_GEOMETRY_UNIFORM_BLOCKS)
        pub const GL_MAX_GEOMETRY_UNIFORM_BLOCKS : i32 = 35372;

        /// public static final [GL_MAX_GEOMETRY_UNIFORM_COMPONENTS](https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_GEOMETRY_UNIFORM_COMPONENTS)
        pub const GL_MAX_GEOMETRY_UNIFORM_COMPONENTS : i32 = 36319;

        /// public static final [GL_MAX_LABEL_LENGTH](https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_LABEL_LENGTH)
        pub const GL_MAX_LABEL_LENGTH : i32 = 33512;

        /// public static final [GL_MAX_PATCH_VERTICES](https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_PATCH_VERTICES)
        pub const GL_MAX_PATCH_VERTICES : i32 = 36477;

        /// public static final [GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS](https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS)
        pub const GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS : i32 = 37587;

        /// public static final [GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS](https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS)
        pub const GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS : i32 = 37581;

        /// public static final [GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS](https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS)
        pub const GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS : i32 = 37067;

        /// public static final [GL_MAX_TESS_CONTROL_INPUT_COMPONENTS](https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_TESS_CONTROL_INPUT_COMPONENTS)
        pub const GL_MAX_TESS_CONTROL_INPUT_COMPONENTS : i32 = 34924;

        /// public static final [GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS](https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS)
        pub const GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS : i32 = 36483;

        /// public static final [GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS](https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS)
        pub const GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS : i32 = 37080;

        /// public static final [GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS](https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS)
        pub const GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS : i32 = 36481;

        /// public static final [GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS](https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS)
        pub const GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS : i32 = 36485;

        /// public static final [GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS](https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS)
        pub const GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS : i32 = 36489;

        /// public static final [GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS](https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS)
        pub const GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS : i32 = 36479;

        /// public static final [GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS](https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS)
        pub const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS : i32 = 37588;

        /// public static final [GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS](https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS)
        pub const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS : i32 = 37582;

        /// public static final [GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS](https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS)
        pub const GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS : i32 = 37068;

        /// public static final [GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS](https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS)
        pub const GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS : i32 = 34925;

        /// public static final [GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS](https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS)
        pub const GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS : i32 = 36486;

        /// public static final [GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS](https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS)
        pub const GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS : i32 = 37081;

        /// public static final [GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS](https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS)
        pub const GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS : i32 = 36482;

        /// public static final [GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS](https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS)
        pub const GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS : i32 = 36490;

        /// public static final [GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS](https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS)
        pub const GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS : i32 = 36480;

        /// public static final [GL_MAX_TESS_GEN_LEVEL](https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_TESS_GEN_LEVEL)
        pub const GL_MAX_TESS_GEN_LEVEL : i32 = 36478;

        /// public static final [GL_MAX_TESS_PATCH_COMPONENTS](https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_TESS_PATCH_COMPONENTS)
        pub const GL_MAX_TESS_PATCH_COMPONENTS : i32 = 36484;

        /// public static final [GL_MAX_TEXTURE_BUFFER_SIZE](https://developer.android.com/reference/android/opengl/GLES32.html#GL_MAX_TEXTURE_BUFFER_SIZE)
        pub const GL_MAX_TEXTURE_BUFFER_SIZE : i32 = 35883;

        /// public static final [GL_MIN_FRAGMENT_INTERPOLATION_OFFSET](https://developer.android.com/reference/android/opengl/GLES32.html#GL_MIN_FRAGMENT_INTERPOLATION_OFFSET)
        pub const GL_MIN_FRAGMENT_INTERPOLATION_OFFSET : i32 = 36443;

        /// public static final [GL_MIN_SAMPLE_SHADING_VALUE](https://developer.android.com/reference/android/opengl/GLES32.html#GL_MIN_SAMPLE_SHADING_VALUE)
        pub const GL_MIN_SAMPLE_SHADING_VALUE : i32 = 35895;

        /// public static final [GL_MULTIPLY](https://developer.android.com/reference/android/opengl/GLES32.html#GL_MULTIPLY)
        pub const GL_MULTIPLY : i32 = 37524;

        /// public static final [GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY](https://developer.android.com/reference/android/opengl/GLES32.html#GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY)
        pub const GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY : i32 = 37762;

        /// public static final [GL_MULTISAMPLE_LINE_WIDTH_RANGE](https://developer.android.com/reference/android/opengl/GLES32.html#GL_MULTISAMPLE_LINE_WIDTH_RANGE)
        pub const GL_MULTISAMPLE_LINE_WIDTH_RANGE : i32 = 37761;

        /// public static final [GL_NO_RESET_NOTIFICATION](https://developer.android.com/reference/android/opengl/GLES32.html#GL_NO_RESET_NOTIFICATION)
        pub const GL_NO_RESET_NOTIFICATION : i32 = 33377;

        /// public static final [GL_OVERLAY](https://developer.android.com/reference/android/opengl/GLES32.html#GL_OVERLAY)
        pub const GL_OVERLAY : i32 = 37526;

        /// public static final [GL_PATCHES](https://developer.android.com/reference/android/opengl/GLES32.html#GL_PATCHES)
        pub const GL_PATCHES : i32 = 14;

        /// public static final [GL_PATCH_VERTICES](https://developer.android.com/reference/android/opengl/GLES32.html#GL_PATCH_VERTICES)
        pub const GL_PATCH_VERTICES : i32 = 36466;

        /// public static final [GL_PRIMITIVES_GENERATED](https://developer.android.com/reference/android/opengl/GLES32.html#GL_PRIMITIVES_GENERATED)
        pub const GL_PRIMITIVES_GENERATED : i32 = 35975;

        /// public static final [GL_PRIMITIVE_BOUNDING_BOX](https://developer.android.com/reference/android/opengl/GLES32.html#GL_PRIMITIVE_BOUNDING_BOX)
        pub const GL_PRIMITIVE_BOUNDING_BOX : i32 = 37566;

        /// public static final [GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED](https://developer.android.com/reference/android/opengl/GLES32.html#GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED)
        pub const GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED : i32 = 33313;

        /// public static final [GL_PROGRAM](https://developer.android.com/reference/android/opengl/GLES32.html#GL_PROGRAM)
        pub const GL_PROGRAM : i32 = 33506;

        /// public static final [GL_PROGRAM_PIPELINE](https://developer.android.com/reference/android/opengl/GLES32.html#GL_PROGRAM_PIPELINE)
        pub const GL_PROGRAM_PIPELINE : i32 = 33508;

        /// public static final [GL_QUADS](https://developer.android.com/reference/android/opengl/GLES32.html#GL_QUADS)
        pub const GL_QUADS : i32 = 7;

        /// public static final [GL_QUERY](https://developer.android.com/reference/android/opengl/GLES32.html#GL_QUERY)
        pub const GL_QUERY : i32 = 33507;

        /// public static final [GL_REFERENCED_BY_GEOMETRY_SHADER](https://developer.android.com/reference/android/opengl/GLES32.html#GL_REFERENCED_BY_GEOMETRY_SHADER)
        pub const GL_REFERENCED_BY_GEOMETRY_SHADER : i32 = 37641;

        /// public static final [GL_REFERENCED_BY_TESS_CONTROL_SHADER](https://developer.android.com/reference/android/opengl/GLES32.html#GL_REFERENCED_BY_TESS_CONTROL_SHADER)
        pub const GL_REFERENCED_BY_TESS_CONTROL_SHADER : i32 = 37639;

        /// public static final [GL_REFERENCED_BY_TESS_EVALUATION_SHADER](https://developer.android.com/reference/android/opengl/GLES32.html#GL_REFERENCED_BY_TESS_EVALUATION_SHADER)
        pub const GL_REFERENCED_BY_TESS_EVALUATION_SHADER : i32 = 37640;

        /// public static final [GL_RESET_NOTIFICATION_STRATEGY](https://developer.android.com/reference/android/opengl/GLES32.html#GL_RESET_NOTIFICATION_STRATEGY)
        pub const GL_RESET_NOTIFICATION_STRATEGY : i32 = 33366;

        /// public static final [GL_SAMPLER](https://developer.android.com/reference/android/opengl/GLES32.html#GL_SAMPLER)
        pub const GL_SAMPLER : i32 = 33510;

        /// public static final [GL_SAMPLER_2D_MULTISAMPLE_ARRAY](https://developer.android.com/reference/android/opengl/GLES32.html#GL_SAMPLER_2D_MULTISAMPLE_ARRAY)
        pub const GL_SAMPLER_2D_MULTISAMPLE_ARRAY : i32 = 37131;

        /// public static final [GL_SAMPLER_BUFFER](https://developer.android.com/reference/android/opengl/GLES32.html#GL_SAMPLER_BUFFER)
        pub const GL_SAMPLER_BUFFER : i32 = 36290;

        /// public static final [GL_SAMPLER_CUBE_MAP_ARRAY](https://developer.android.com/reference/android/opengl/GLES32.html#GL_SAMPLER_CUBE_MAP_ARRAY)
        pub const GL_SAMPLER_CUBE_MAP_ARRAY : i32 = 36876;

        /// public static final [GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW](https://developer.android.com/reference/android/opengl/GLES32.html#GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW)
        pub const GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW : i32 = 36877;

        /// public static final [GL_SAMPLE_SHADING](https://developer.android.com/reference/android/opengl/GLES32.html#GL_SAMPLE_SHADING)
        pub const GL_SAMPLE_SHADING : i32 = 35894;

        /// public static final [GL_SCREEN](https://developer.android.com/reference/android/opengl/GLES32.html#GL_SCREEN)
        pub const GL_SCREEN : i32 = 37525;

        /// public static final [GL_SHADER](https://developer.android.com/reference/android/opengl/GLES32.html#GL_SHADER)
        pub const GL_SHADER : i32 = 33505;

        /// public static final [GL_SOFTLIGHT](https://developer.android.com/reference/android/opengl/GLES32.html#GL_SOFTLIGHT)
        pub const GL_SOFTLIGHT : i32 = 37532;

        /// public static final [GL_STACK_OVERFLOW](https://developer.android.com/reference/android/opengl/GLES32.html#GL_STACK_OVERFLOW)
        pub const GL_STACK_OVERFLOW : i32 = 1283;

        /// public static final [GL_STACK_UNDERFLOW](https://developer.android.com/reference/android/opengl/GLES32.html#GL_STACK_UNDERFLOW)
        pub const GL_STACK_UNDERFLOW : i32 = 1284;

        /// public static final [GL_TESS_CONTROL_OUTPUT_VERTICES](https://developer.android.com/reference/android/opengl/GLES32.html#GL_TESS_CONTROL_OUTPUT_VERTICES)
        pub const GL_TESS_CONTROL_OUTPUT_VERTICES : i32 = 36469;

        /// public static final [GL_TESS_CONTROL_SHADER](https://developer.android.com/reference/android/opengl/GLES32.html#GL_TESS_CONTROL_SHADER)
        pub const GL_TESS_CONTROL_SHADER : i32 = 36488;

        /// public static final [GL_TESS_CONTROL_SHADER_BIT](https://developer.android.com/reference/android/opengl/GLES32.html#GL_TESS_CONTROL_SHADER_BIT)
        pub const GL_TESS_CONTROL_SHADER_BIT : i32 = 8;

        /// public static final [GL_TESS_EVALUATION_SHADER](https://developer.android.com/reference/android/opengl/GLES32.html#GL_TESS_EVALUATION_SHADER)
        pub const GL_TESS_EVALUATION_SHADER : i32 = 36487;

        /// public static final [GL_TESS_EVALUATION_SHADER_BIT](https://developer.android.com/reference/android/opengl/GLES32.html#GL_TESS_EVALUATION_SHADER_BIT)
        pub const GL_TESS_EVALUATION_SHADER_BIT : i32 = 16;

        /// public static final [GL_TESS_GEN_MODE](https://developer.android.com/reference/android/opengl/GLES32.html#GL_TESS_GEN_MODE)
        pub const GL_TESS_GEN_MODE : i32 = 36470;

        /// public static final [GL_TESS_GEN_POINT_MODE](https://developer.android.com/reference/android/opengl/GLES32.html#GL_TESS_GEN_POINT_MODE)
        pub const GL_TESS_GEN_POINT_MODE : i32 = 36473;

        /// public static final [GL_TESS_GEN_SPACING](https://developer.android.com/reference/android/opengl/GLES32.html#GL_TESS_GEN_SPACING)
        pub const GL_TESS_GEN_SPACING : i32 = 36471;

        /// public static final [GL_TESS_GEN_VERTEX_ORDER](https://developer.android.com/reference/android/opengl/GLES32.html#GL_TESS_GEN_VERTEX_ORDER)
        pub const GL_TESS_GEN_VERTEX_ORDER : i32 = 36472;

        /// public static final [GL_TEXTURE_2D_MULTISAMPLE_ARRAY](https://developer.android.com/reference/android/opengl/GLES32.html#GL_TEXTURE_2D_MULTISAMPLE_ARRAY)
        pub const GL_TEXTURE_2D_MULTISAMPLE_ARRAY : i32 = 37122;

        /// public static final [GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY](https://developer.android.com/reference/android/opengl/GLES32.html#GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY)
        pub const GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY : i32 = 37125;

        /// public static final [GL_TEXTURE_BINDING_BUFFER](https://developer.android.com/reference/android/opengl/GLES32.html#GL_TEXTURE_BINDING_BUFFER)
        pub const GL_TEXTURE_BINDING_BUFFER : i32 = 35884;

        /// public static final [GL_TEXTURE_BINDING_CUBE_MAP_ARRAY](https://developer.android.com/reference/android/opengl/GLES32.html#GL_TEXTURE_BINDING_CUBE_MAP_ARRAY)
        pub const GL_TEXTURE_BINDING_CUBE_MAP_ARRAY : i32 = 36874;

        /// public static final [GL_TEXTURE_BORDER_COLOR](https://developer.android.com/reference/android/opengl/GLES32.html#GL_TEXTURE_BORDER_COLOR)
        pub const GL_TEXTURE_BORDER_COLOR : i32 = 4100;

        /// public static final [GL_TEXTURE_BUFFER](https://developer.android.com/reference/android/opengl/GLES32.html#GL_TEXTURE_BUFFER)
        pub const GL_TEXTURE_BUFFER : i32 = 35882;

        /// public static final [GL_TEXTURE_BUFFER_BINDING](https://developer.android.com/reference/android/opengl/GLES32.html#GL_TEXTURE_BUFFER_BINDING)
        pub const GL_TEXTURE_BUFFER_BINDING : i32 = 35882;

        /// public static final [GL_TEXTURE_BUFFER_DATA_STORE_BINDING](https://developer.android.com/reference/android/opengl/GLES32.html#GL_TEXTURE_BUFFER_DATA_STORE_BINDING)
        pub const GL_TEXTURE_BUFFER_DATA_STORE_BINDING : i32 = 35885;

        /// public static final [GL_TEXTURE_BUFFER_OFFSET](https://developer.android.com/reference/android/opengl/GLES32.html#GL_TEXTURE_BUFFER_OFFSET)
        pub const GL_TEXTURE_BUFFER_OFFSET : i32 = 37277;

        /// public static final [GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT](https://developer.android.com/reference/android/opengl/GLES32.html#GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT)
        pub const GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT : i32 = 37279;

        /// public static final [GL_TEXTURE_BUFFER_SIZE](https://developer.android.com/reference/android/opengl/GLES32.html#GL_TEXTURE_BUFFER_SIZE)
        pub const GL_TEXTURE_BUFFER_SIZE : i32 = 37278;

        /// public static final [GL_TEXTURE_CUBE_MAP_ARRAY](https://developer.android.com/reference/android/opengl/GLES32.html#GL_TEXTURE_CUBE_MAP_ARRAY)
        pub const GL_TEXTURE_CUBE_MAP_ARRAY : i32 = 36873;

        /// public static final [GL_TRIANGLES_ADJACENCY](https://developer.android.com/reference/android/opengl/GLES32.html#GL_TRIANGLES_ADJACENCY)
        pub const GL_TRIANGLES_ADJACENCY : i32 = 12;

        /// public static final [GL_TRIANGLE_STRIP_ADJACENCY](https://developer.android.com/reference/android/opengl/GLES32.html#GL_TRIANGLE_STRIP_ADJACENCY)
        pub const GL_TRIANGLE_STRIP_ADJACENCY : i32 = 13;

        /// public static final [GL_UNDEFINED_VERTEX](https://developer.android.com/reference/android/opengl/GLES32.html#GL_UNDEFINED_VERTEX)
        pub const GL_UNDEFINED_VERTEX : i32 = 33376;

        /// public static final [GL_UNKNOWN_CONTEXT_RESET](https://developer.android.com/reference/android/opengl/GLES32.html#GL_UNKNOWN_CONTEXT_RESET)
        pub const GL_UNKNOWN_CONTEXT_RESET : i32 = 33365;

        /// public static final [GL_UNSIGNED_INT_IMAGE_BUFFER](https://developer.android.com/reference/android/opengl/GLES32.html#GL_UNSIGNED_INT_IMAGE_BUFFER)
        pub const GL_UNSIGNED_INT_IMAGE_BUFFER : i32 = 36967;

        /// public static final [GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY](https://developer.android.com/reference/android/opengl/GLES32.html#GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY)
        pub const GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY : i32 = 36970;

        /// public static final [GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY](https://developer.android.com/reference/android/opengl/GLES32.html#GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY)
        pub const GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY : i32 = 37133;

        /// public static final [GL_UNSIGNED_INT_SAMPLER_BUFFER](https://developer.android.com/reference/android/opengl/GLES32.html#GL_UNSIGNED_INT_SAMPLER_BUFFER)
        pub const GL_UNSIGNED_INT_SAMPLER_BUFFER : i32 = 36312;

        /// public static final [GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY](https://developer.android.com/reference/android/opengl/GLES32.html#GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY)
        pub const GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY : i32 = 36879;

        /// public static final [GL_VERTEX_ARRAY](https://developer.android.com/reference/android/opengl/GLES32.html#GL_VERTEX_ARRAY)
        pub const GL_VERTEX_ARRAY : i32 = 32884;
    }
}
