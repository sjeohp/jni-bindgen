// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-opengl-GLSurfaceView"))]
__jni_bindgen! {
    /// public class [GLSurfaceView](https://developer.android.com/reference/android/opengl/GLSurfaceView.html)
    ///
    /// Required feature: android-opengl-GLSurfaceView
    public class GLSurfaceView ("android/opengl/GLSurfaceView") extends crate::android::view::SurfaceView, implements crate::android::view::SurfaceHolder_Callback2 {

        /// [GLSurfaceView](https://developer.android.com/reference/android/opengl/GLSurfaceView.html#GLSurfaceView(android.content.Context))
        ///
        /// Required features: "android-content-Context"
        #[cfg(any(feature = "all", all(feature = "android-content-Context")))]
        pub fn new_Context<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::opengl::GLSurfaceView>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLSurfaceView", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/content/Context;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/opengl/GLSurfaceView\0", "<init>\0", "(Landroid/content/Context;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [GLSurfaceView](https://developer.android.com/reference/android/opengl/GLSurfaceView.html#GLSurfaceView(android.content.Context,%20android.util.AttributeSet))
        ///
        /// Required features: "android-content-Context", "android-util-AttributeSet"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-util-AttributeSet")))]
        pub fn new_Context_AttributeSet<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::util::AttributeSet>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::opengl::GLSurfaceView>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLSurfaceView", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/content/Context;Landroid/util/AttributeSet;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/opengl/GLSurfaceView\0", "<init>\0", "(Landroid/content/Context;Landroid/util/AttributeSet;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [finalize](https://developer.android.com/reference/android/opengl/GLSurfaceView.html#finalize())
        // fn finalize<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/opengl/GLSurfaceView", java.flags == PROTECTED, .name == "finalize", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/opengl/GLSurfaceView\0", "finalize\0", "()V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [setGLWrapper](https://developer.android.com/reference/android/opengl/GLSurfaceView.html#setGLWrapper(android.opengl.GLSurfaceView.GLWrapper))
        ///
        /// Required features: "android-opengl-GLSurfaceView_GLWrapper"
        #[cfg(any(feature = "all", all(feature = "android-opengl-GLSurfaceView_GLWrapper")))]
        pub fn setGLWrapper<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::opengl::GLSurfaceView_GLWrapper>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLSurfaceView", java.flags == PUBLIC, .name == "setGLWrapper", .descriptor == "(Landroid/opengl/GLSurfaceView$GLWrapper;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/opengl/GLSurfaceView\0", "setGLWrapper\0", "(Landroid/opengl/GLSurfaceView$GLWrapper;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDebugFlags](https://developer.android.com/reference/android/opengl/GLSurfaceView.html#setDebugFlags(int))
        pub fn setDebugFlags<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLSurfaceView", java.flags == PUBLIC, .name == "setDebugFlags", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/opengl/GLSurfaceView\0", "setDebugFlags\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDebugFlags](https://developer.android.com/reference/android/opengl/GLSurfaceView.html#getDebugFlags())
        pub fn getDebugFlags<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLSurfaceView", java.flags == PUBLIC, .name == "getDebugFlags", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/opengl/GLSurfaceView\0", "getDebugFlags\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPreserveEGLContextOnPause](https://developer.android.com/reference/android/opengl/GLSurfaceView.html#setPreserveEGLContextOnPause(boolean))
        pub fn setPreserveEGLContextOnPause<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLSurfaceView", java.flags == PUBLIC, .name == "setPreserveEGLContextOnPause", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/opengl/GLSurfaceView\0", "setPreserveEGLContextOnPause\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPreserveEGLContextOnPause](https://developer.android.com/reference/android/opengl/GLSurfaceView.html#getPreserveEGLContextOnPause())
        pub fn getPreserveEGLContextOnPause<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLSurfaceView", java.flags == PUBLIC, .name == "getPreserveEGLContextOnPause", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/opengl/GLSurfaceView\0", "getPreserveEGLContextOnPause\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setRenderer](https://developer.android.com/reference/android/opengl/GLSurfaceView.html#setRenderer(android.opengl.GLSurfaceView.Renderer))
        ///
        /// Required features: "android-opengl-GLSurfaceView_Renderer"
        #[cfg(any(feature = "all", all(feature = "android-opengl-GLSurfaceView_Renderer")))]
        pub fn setRenderer<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::opengl::GLSurfaceView_Renderer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLSurfaceView", java.flags == PUBLIC, .name == "setRenderer", .descriptor == "(Landroid/opengl/GLSurfaceView$Renderer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/opengl/GLSurfaceView\0", "setRenderer\0", "(Landroid/opengl/GLSurfaceView$Renderer;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setEGLContextFactory](https://developer.android.com/reference/android/opengl/GLSurfaceView.html#setEGLContextFactory(android.opengl.GLSurfaceView.EGLContextFactory))
        ///
        /// Required features: "android-opengl-GLSurfaceView_EGLContextFactory"
        #[cfg(any(feature = "all", all(feature = "android-opengl-GLSurfaceView_EGLContextFactory")))]
        pub fn setEGLContextFactory<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::opengl::GLSurfaceView_EGLContextFactory>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLSurfaceView", java.flags == PUBLIC, .name == "setEGLContextFactory", .descriptor == "(Landroid/opengl/GLSurfaceView$EGLContextFactory;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/opengl/GLSurfaceView\0", "setEGLContextFactory\0", "(Landroid/opengl/GLSurfaceView$EGLContextFactory;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setEGLWindowSurfaceFactory](https://developer.android.com/reference/android/opengl/GLSurfaceView.html#setEGLWindowSurfaceFactory(android.opengl.GLSurfaceView.EGLWindowSurfaceFactory))
        ///
        /// Required features: "android-opengl-GLSurfaceView_EGLWindowSurfaceFactory"
        #[cfg(any(feature = "all", all(feature = "android-opengl-GLSurfaceView_EGLWindowSurfaceFactory")))]
        pub fn setEGLWindowSurfaceFactory<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::opengl::GLSurfaceView_EGLWindowSurfaceFactory>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLSurfaceView", java.flags == PUBLIC, .name == "setEGLWindowSurfaceFactory", .descriptor == "(Landroid/opengl/GLSurfaceView$EGLWindowSurfaceFactory;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/opengl/GLSurfaceView\0", "setEGLWindowSurfaceFactory\0", "(Landroid/opengl/GLSurfaceView$EGLWindowSurfaceFactory;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setEGLConfigChooser](https://developer.android.com/reference/android/opengl/GLSurfaceView.html#setEGLConfigChooser(android.opengl.GLSurfaceView.EGLConfigChooser))
        ///
        /// Required features: "android-opengl-GLSurfaceView_EGLConfigChooser"
        #[cfg(any(feature = "all", all(feature = "android-opengl-GLSurfaceView_EGLConfigChooser")))]
        pub fn setEGLConfigChooser_EGLConfigChooser<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::opengl::GLSurfaceView_EGLConfigChooser>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLSurfaceView", java.flags == PUBLIC, .name == "setEGLConfigChooser", .descriptor == "(Landroid/opengl/GLSurfaceView$EGLConfigChooser;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/opengl/GLSurfaceView\0", "setEGLConfigChooser\0", "(Landroid/opengl/GLSurfaceView$EGLConfigChooser;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setEGLConfigChooser](https://developer.android.com/reference/android/opengl/GLSurfaceView.html#setEGLConfigChooser(boolean))
        pub fn setEGLConfigChooser_boolean<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLSurfaceView", java.flags == PUBLIC, .name == "setEGLConfigChooser", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/opengl/GLSurfaceView\0", "setEGLConfigChooser\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setEGLConfigChooser](https://developer.android.com/reference/android/opengl/GLSurfaceView.html#setEGLConfigChooser(int,%20int,%20int,%20int,%20int,%20int))
        pub fn setEGLConfigChooser_int_int_int_int_int_int<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: i32, arg4: i32, arg5: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLSurfaceView", java.flags == PUBLIC, .name == "setEGLConfigChooser", .descriptor == "(IIIIII)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/opengl/GLSurfaceView\0", "setEGLConfigChooser\0", "(IIIIII)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setEGLContextClientVersion](https://developer.android.com/reference/android/opengl/GLSurfaceView.html#setEGLContextClientVersion(int))
        pub fn setEGLContextClientVersion<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLSurfaceView", java.flags == PUBLIC, .name == "setEGLContextClientVersion", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/opengl/GLSurfaceView\0", "setEGLContextClientVersion\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setRenderMode](https://developer.android.com/reference/android/opengl/GLSurfaceView.html#setRenderMode(int))
        pub fn setRenderMode<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLSurfaceView", java.flags == PUBLIC, .name == "setRenderMode", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/opengl/GLSurfaceView\0", "setRenderMode\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRenderMode](https://developer.android.com/reference/android/opengl/GLSurfaceView.html#getRenderMode())
        pub fn getRenderMode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLSurfaceView", java.flags == PUBLIC, .name == "getRenderMode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/opengl/GLSurfaceView\0", "getRenderMode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [requestRender](https://developer.android.com/reference/android/opengl/GLSurfaceView.html#requestRender())
        pub fn requestRender<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLSurfaceView", java.flags == PUBLIC, .name == "requestRender", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/opengl/GLSurfaceView\0", "requestRender\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [surfaceCreated](https://developer.android.com/reference/android/opengl/GLSurfaceView.html#surfaceCreated(android.view.SurfaceHolder))
        ///
        /// Required features: "android-view-SurfaceHolder"
        #[cfg(any(feature = "all", all(feature = "android-view-SurfaceHolder")))]
        pub fn surfaceCreated<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::SurfaceHolder>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLSurfaceView", java.flags == PUBLIC, .name == "surfaceCreated", .descriptor == "(Landroid/view/SurfaceHolder;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/opengl/GLSurfaceView\0", "surfaceCreated\0", "(Landroid/view/SurfaceHolder;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [surfaceDestroyed](https://developer.android.com/reference/android/opengl/GLSurfaceView.html#surfaceDestroyed(android.view.SurfaceHolder))
        ///
        /// Required features: "android-view-SurfaceHolder"
        #[cfg(any(feature = "all", all(feature = "android-view-SurfaceHolder")))]
        pub fn surfaceDestroyed<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::SurfaceHolder>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLSurfaceView", java.flags == PUBLIC, .name == "surfaceDestroyed", .descriptor == "(Landroid/view/SurfaceHolder;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/opengl/GLSurfaceView\0", "surfaceDestroyed\0", "(Landroid/view/SurfaceHolder;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [surfaceChanged](https://developer.android.com/reference/android/opengl/GLSurfaceView.html#surfaceChanged(android.view.SurfaceHolder,%20int,%20int,%20int))
        ///
        /// Required features: "android-view-SurfaceHolder"
        #[cfg(any(feature = "all", all(feature = "android-view-SurfaceHolder")))]
        pub fn surfaceChanged<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::SurfaceHolder>>, arg1: i32, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLSurfaceView", java.flags == PUBLIC, .name == "surfaceChanged", .descriptor == "(Landroid/view/SurfaceHolder;III)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/opengl/GLSurfaceView\0", "surfaceChanged\0", "(Landroid/view/SurfaceHolder;III)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [surfaceRedrawNeededAsync](https://developer.android.com/reference/android/opengl/GLSurfaceView.html#surfaceRedrawNeededAsync(android.view.SurfaceHolder,%20java.lang.Runnable))
        ///
        /// Required features: "android-view-SurfaceHolder", "java-lang-Runnable"
        #[cfg(any(feature = "all", all(feature = "android-view-SurfaceHolder", feature = "java-lang-Runnable")))]
        pub fn surfaceRedrawNeededAsync<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::SurfaceHolder>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Runnable>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLSurfaceView", java.flags == PUBLIC, .name == "surfaceRedrawNeededAsync", .descriptor == "(Landroid/view/SurfaceHolder;Ljava/lang/Runnable;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/opengl/GLSurfaceView\0", "surfaceRedrawNeededAsync\0", "(Landroid/view/SurfaceHolder;Ljava/lang/Runnable;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [surfaceRedrawNeeded](https://developer.android.com/reference/android/opengl/GLSurfaceView.html#surfaceRedrawNeeded(android.view.SurfaceHolder))
        ///
        /// Required features: "android-view-SurfaceHolder"
        #[cfg(any(feature = "all", all(feature = "android-view-SurfaceHolder")))]
        #[deprecated] pub fn surfaceRedrawNeeded<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::SurfaceHolder>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLSurfaceView", java.flags == PUBLIC, .name == "surfaceRedrawNeeded", .descriptor == "(Landroid/view/SurfaceHolder;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/opengl/GLSurfaceView\0", "surfaceRedrawNeeded\0", "(Landroid/view/SurfaceHolder;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onPause](https://developer.android.com/reference/android/opengl/GLSurfaceView.html#onPause())
        pub fn onPause<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLSurfaceView", java.flags == PUBLIC, .name == "onPause", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/opengl/GLSurfaceView\0", "onPause\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onResume](https://developer.android.com/reference/android/opengl/GLSurfaceView.html#onResume())
        pub fn onResume<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLSurfaceView", java.flags == PUBLIC, .name == "onResume", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/opengl/GLSurfaceView\0", "onResume\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [queueEvent](https://developer.android.com/reference/android/opengl/GLSurfaceView.html#queueEvent(java.lang.Runnable))
        ///
        /// Required features: "java-lang-Runnable"
        #[cfg(any(feature = "all", all(feature = "java-lang-Runnable")))]
        pub fn queueEvent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Runnable>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLSurfaceView", java.flags == PUBLIC, .name == "queueEvent", .descriptor == "(Ljava/lang/Runnable;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/opengl/GLSurfaceView\0", "queueEvent\0", "(Ljava/lang/Runnable;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [onAttachedToWindow](https://developer.android.com/reference/android/opengl/GLSurfaceView.html#onAttachedToWindow())
        // fn onAttachedToWindow<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/opengl/GLSurfaceView", java.flags == PROTECTED, .name == "onAttachedToWindow", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/opengl/GLSurfaceView\0", "onAttachedToWindow\0", "()V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [onDetachedFromWindow](https://developer.android.com/reference/android/opengl/GLSurfaceView.html#onDetachedFromWindow())
        // fn onDetachedFromWindow<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/opengl/GLSurfaceView", java.flags == PROTECTED, .name == "onDetachedFromWindow", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/opengl/GLSurfaceView\0", "onDetachedFromWindow\0", "()V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// public static final [DEBUG_CHECK_GL_ERROR](https://developer.android.com/reference/android/opengl/GLSurfaceView.html#DEBUG_CHECK_GL_ERROR)
        pub const DEBUG_CHECK_GL_ERROR : i32 = 1;

        /// public static final [DEBUG_LOG_GL_CALLS](https://developer.android.com/reference/android/opengl/GLSurfaceView.html#DEBUG_LOG_GL_CALLS)
        pub const DEBUG_LOG_GL_CALLS : i32 = 2;

        /// public static final [RENDERMODE_CONTINUOUSLY](https://developer.android.com/reference/android/opengl/GLSurfaceView.html#RENDERMODE_CONTINUOUSLY)
        pub const RENDERMODE_CONTINUOUSLY : i32 = 1;

        /// public static final [RENDERMODE_WHEN_DIRTY](https://developer.android.com/reference/android/opengl/GLSurfaceView.html#RENDERMODE_WHEN_DIRTY)
        pub const RENDERMODE_WHEN_DIRTY : i32 = 0;
    }
}
