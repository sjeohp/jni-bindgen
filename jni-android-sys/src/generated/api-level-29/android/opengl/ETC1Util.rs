// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-opengl-ETC1Util"))]
__jni_bindgen! {
    /// public class [ETC1Util](https://developer.android.com/reference/android/opengl/ETC1Util.html)
    ///
    /// Required feature: android-opengl-ETC1Util
    public class ETC1Util ("android/opengl/ETC1Util") extends crate::java::lang::Object {

        /// [ETC1Util](https://developer.android.com/reference/android/opengl/ETC1Util.html#ETC1Util())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::opengl::ETC1Util>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/ETC1Util", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/opengl/ETC1Util\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [loadTexture](https://developer.android.com/reference/android/opengl/ETC1Util.html#loadTexture(int,%20int,%20int,%20int,%20int,%20java.io.InputStream))
        ///
        /// Required features: "java-io-InputStream"
        #[cfg(any(feature = "all", all(feature = "java-io-InputStream")))]
        pub fn loadTexture_int_int_int_int_int_InputStream<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32, arg3: i32, arg4: i32, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::InputStream>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/ETC1Util", java.flags == PUBLIC | STATIC, .name == "loadTexture", .descriptor == "(IIIIILjava/io/InputStream;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/ETC1Util\0", "loadTexture\0", "(IIIIILjava/io/InputStream;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [loadTexture](https://developer.android.com/reference/android/opengl/ETC1Util.html#loadTexture(int,%20int,%20int,%20int,%20int,%20android.opengl.ETC1Util.ETC1Texture))
        ///
        /// Required features: "android-opengl-ETC1Util_ETC1Texture"
        #[cfg(any(feature = "all", all(feature = "android-opengl-ETC1Util_ETC1Texture")))]
        pub fn loadTexture_int_int_int_int_int_ETC1Texture<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32, arg3: i32, arg4: i32, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::opengl::ETC1Util_ETC1Texture>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/ETC1Util", java.flags == PUBLIC | STATIC, .name == "loadTexture", .descriptor == "(IIIIILandroid/opengl/ETC1Util$ETC1Texture;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/ETC1Util\0", "loadTexture\0", "(IIIIILandroid/opengl/ETC1Util$ETC1Texture;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isETC1Supported](https://developer.android.com/reference/android/opengl/ETC1Util.html#isETC1Supported())
        pub fn isETC1Supported<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/ETC1Util", java.flags == PUBLIC | STATIC, .name == "isETC1Supported", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/ETC1Util\0", "isETC1Supported\0", "()Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createTexture](https://developer.android.com/reference/android/opengl/ETC1Util.html#createTexture(java.io.InputStream))
        ///
        /// Required features: "android-opengl-ETC1Util_ETC1Texture", "java-io-InputStream"
        #[cfg(any(feature = "all", all(feature = "android-opengl-ETC1Util_ETC1Texture", feature = "java-io-InputStream")))]
        pub fn createTexture<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::InputStream>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::opengl::ETC1Util_ETC1Texture>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/ETC1Util", java.flags == PUBLIC | STATIC, .name == "createTexture", .descriptor == "(Ljava/io/InputStream;)Landroid/opengl/ETC1Util$ETC1Texture;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/ETC1Util\0", "createTexture\0", "(Ljava/io/InputStream;)Landroid/opengl/ETC1Util$ETC1Texture;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [compressTexture](https://developer.android.com/reference/android/opengl/ETC1Util.html#compressTexture(java.nio.Buffer,%20int,%20int,%20int,%20int))
        ///
        /// Required features: "android-opengl-ETC1Util_ETC1Texture", "java-nio-Buffer"
        #[cfg(any(feature = "all", all(feature = "android-opengl-ETC1Util_ETC1Texture", feature = "java-nio-Buffer")))]
        pub fn compressTexture<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::Buffer>>, arg1: i32, arg2: i32, arg3: i32, arg4: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::opengl::ETC1Util_ETC1Texture>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/ETC1Util", java.flags == PUBLIC | STATIC, .name == "compressTexture", .descriptor == "(Ljava/nio/Buffer;IIII)Landroid/opengl/ETC1Util$ETC1Texture;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/ETC1Util\0", "compressTexture\0", "(Ljava/nio/Buffer;IIII)Landroid/opengl/ETC1Util$ETC1Texture;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [writeTexture](https://developer.android.com/reference/android/opengl/ETC1Util.html#writeTexture(android.opengl.ETC1Util.ETC1Texture,%20java.io.OutputStream))
        ///
        /// Required features: "android-opengl-ETC1Util_ETC1Texture", "java-io-OutputStream"
        #[cfg(any(feature = "all", all(feature = "android-opengl-ETC1Util_ETC1Texture", feature = "java-io-OutputStream")))]
        pub fn writeTexture<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::opengl::ETC1Util_ETC1Texture>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::OutputStream>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/ETC1Util", java.flags == PUBLIC | STATIC, .name == "writeTexture", .descriptor == "(Landroid/opengl/ETC1Util$ETC1Texture;Ljava/io/OutputStream;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/ETC1Util\0", "writeTexture\0", "(Landroid/opengl/ETC1Util$ETC1Texture;Ljava/io/OutputStream;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
