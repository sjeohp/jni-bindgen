// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-opengl-GLES11"))]
__jni_bindgen! {
    /// public class [GLES11](https://developer.android.com/reference/android/opengl/GLES11.html)
    ///
    /// Required feature: android-opengl-GLES11
    public class GLES11 ("android/opengl/GLES11") extends crate::android::opengl::GLES10 {

        /// [GLES11](https://developer.android.com/reference/android/opengl/GLES11.html#GLES11())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::opengl::GLES11>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES11", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/opengl/GLES11\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glBindBuffer](https://developer.android.com/reference/android/opengl/GLES11.html#glBindBuffer(int,%20int))
        pub fn glBindBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES11", java.flags == PUBLIC | STATIC | NATIVE, .name == "glBindBuffer", .descriptor == "(II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES11\0", "glBindBuffer\0", "(II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glBufferData](https://developer.android.com/reference/android/opengl/GLES11.html#glBufferData(int,%20int,%20java.nio.Buffer,%20int))
        ///
        /// Required features: "java-nio-Buffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-Buffer")))]
        pub fn glBufferData<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::Buffer>>, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES11", java.flags == PUBLIC | STATIC | NATIVE, .name == "glBufferData", .descriptor == "(IILjava/nio/Buffer;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES11\0", "glBufferData\0", "(IILjava/nio/Buffer;I)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glBufferSubData](https://developer.android.com/reference/android/opengl/GLES11.html#glBufferSubData(int,%20int,%20int,%20java.nio.Buffer))
        ///
        /// Required features: "java-nio-Buffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-Buffer")))]
        pub fn glBufferSubData<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::Buffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES11", java.flags == PUBLIC | STATIC | NATIVE, .name == "glBufferSubData", .descriptor == "(IIILjava/nio/Buffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES11\0", "glBufferSubData\0", "(IIILjava/nio/Buffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glClipPlanef](https://developer.android.com/reference/android/opengl/GLES11.html#glClipPlanef(int,%20float%5B%5D,%20int))
        pub fn glClipPlanef_int_float_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES11", java.flags == PUBLIC | STATIC | NATIVE, .name == "glClipPlanef", .descriptor == "(I[FI)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES11\0", "glClipPlanef\0", "(I[FI)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glClipPlanef](https://developer.android.com/reference/android/opengl/GLES11.html#glClipPlanef(int,%20java.nio.FloatBuffer))
        ///
        /// Required features: "java-nio-FloatBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-FloatBuffer")))]
        pub fn glClipPlanef_int_FloatBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::FloatBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES11", java.flags == PUBLIC | STATIC | NATIVE, .name == "glClipPlanef", .descriptor == "(ILjava/nio/FloatBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES11\0", "glClipPlanef\0", "(ILjava/nio/FloatBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glClipPlanex](https://developer.android.com/reference/android/opengl/GLES11.html#glClipPlanex(int,%20int%5B%5D,%20int))
        pub fn glClipPlanex_int_int_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES11", java.flags == PUBLIC | STATIC | NATIVE, .name == "glClipPlanex", .descriptor == "(I[II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES11\0", "glClipPlanex\0", "(I[II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glClipPlanex](https://developer.android.com/reference/android/opengl/GLES11.html#glClipPlanex(int,%20java.nio.IntBuffer))
        ///
        /// Required features: "java-nio-IntBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-IntBuffer")))]
        pub fn glClipPlanex_int_IntBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES11", java.flags == PUBLIC | STATIC | NATIVE, .name == "glClipPlanex", .descriptor == "(ILjava/nio/IntBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES11\0", "glClipPlanex\0", "(ILjava/nio/IntBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glColor4ub](https://developer.android.com/reference/android/opengl/GLES11.html#glColor4ub(byte,%20byte,%20byte,%20byte))
        pub fn glColor4ub<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i8, arg1: i8, arg2: i8, arg3: i8) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES11", java.flags == PUBLIC | STATIC | NATIVE, .name == "glColor4ub", .descriptor == "(BBBB)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES11\0", "glColor4ub\0", "(BBBB)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glColorPointer](https://developer.android.com/reference/android/opengl/GLES11.html#glColorPointer(int,%20int,%20int,%20int))
        pub fn glColorPointer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES11", java.flags == PUBLIC | STATIC | NATIVE, .name == "glColorPointer", .descriptor == "(IIII)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES11\0", "glColorPointer\0", "(IIII)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glDeleteBuffers](https://developer.android.com/reference/android/opengl/GLES11.html#glDeleteBuffers(int,%20int%5B%5D,%20int))
        pub fn glDeleteBuffers_int_int_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES11", java.flags == PUBLIC | STATIC | NATIVE, .name == "glDeleteBuffers", .descriptor == "(I[II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES11\0", "glDeleteBuffers\0", "(I[II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glDeleteBuffers](https://developer.android.com/reference/android/opengl/GLES11.html#glDeleteBuffers(int,%20java.nio.IntBuffer))
        ///
        /// Required features: "java-nio-IntBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-IntBuffer")))]
        pub fn glDeleteBuffers_int_IntBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES11", java.flags == PUBLIC | STATIC | NATIVE, .name == "glDeleteBuffers", .descriptor == "(ILjava/nio/IntBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES11\0", "glDeleteBuffers\0", "(ILjava/nio/IntBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glDrawElements](https://developer.android.com/reference/android/opengl/GLES11.html#glDrawElements(int,%20int,%20int,%20int))
        pub fn glDrawElements<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES11", java.flags == PUBLIC | STATIC | NATIVE, .name == "glDrawElements", .descriptor == "(IIII)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES11\0", "glDrawElements\0", "(IIII)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGenBuffers](https://developer.android.com/reference/android/opengl/GLES11.html#glGenBuffers(int,%20int%5B%5D,%20int))
        pub fn glGenBuffers_int_int_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES11", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGenBuffers", .descriptor == "(I[II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES11\0", "glGenBuffers\0", "(I[II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGenBuffers](https://developer.android.com/reference/android/opengl/GLES11.html#glGenBuffers(int,%20java.nio.IntBuffer))
        ///
        /// Required features: "java-nio-IntBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-IntBuffer")))]
        pub fn glGenBuffers_int_IntBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES11", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGenBuffers", .descriptor == "(ILjava/nio/IntBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES11\0", "glGenBuffers\0", "(ILjava/nio/IntBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetBooleanv](https://developer.android.com/reference/android/opengl/GLES11.html#glGetBooleanv(int,%20bool%5B%5D,%20int))
        pub fn glGetBooleanv_int_boolean_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::BooleanArray>>, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES11", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetBooleanv", .descriptor == "(I[ZI)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES11\0", "glGetBooleanv\0", "(I[ZI)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetBooleanv](https://developer.android.com/reference/android/opengl/GLES11.html#glGetBooleanv(int,%20java.nio.IntBuffer))
        ///
        /// Required features: "java-nio-IntBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-IntBuffer")))]
        pub fn glGetBooleanv_int_IntBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES11", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetBooleanv", .descriptor == "(ILjava/nio/IntBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES11\0", "glGetBooleanv\0", "(ILjava/nio/IntBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetBufferParameteriv](https://developer.android.com/reference/android/opengl/GLES11.html#glGetBufferParameteriv(int,%20int,%20int%5B%5D,%20int))
        pub fn glGetBufferParameteriv_int_int_int_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES11", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetBufferParameteriv", .descriptor == "(II[II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES11\0", "glGetBufferParameteriv\0", "(II[II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetBufferParameteriv](https://developer.android.com/reference/android/opengl/GLES11.html#glGetBufferParameteriv(int,%20int,%20java.nio.IntBuffer))
        ///
        /// Required features: "java-nio-IntBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-IntBuffer")))]
        pub fn glGetBufferParameteriv_int_int_IntBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES11", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetBufferParameteriv", .descriptor == "(IILjava/nio/IntBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES11\0", "glGetBufferParameteriv\0", "(IILjava/nio/IntBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetClipPlanef](https://developer.android.com/reference/android/opengl/GLES11.html#glGetClipPlanef(int,%20float%5B%5D,%20int))
        pub fn glGetClipPlanef_int_float_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES11", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetClipPlanef", .descriptor == "(I[FI)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES11\0", "glGetClipPlanef\0", "(I[FI)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetClipPlanef](https://developer.android.com/reference/android/opengl/GLES11.html#glGetClipPlanef(int,%20java.nio.FloatBuffer))
        ///
        /// Required features: "java-nio-FloatBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-FloatBuffer")))]
        pub fn glGetClipPlanef_int_FloatBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::FloatBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES11", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetClipPlanef", .descriptor == "(ILjava/nio/FloatBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES11\0", "glGetClipPlanef\0", "(ILjava/nio/FloatBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetClipPlanex](https://developer.android.com/reference/android/opengl/GLES11.html#glGetClipPlanex(int,%20int%5B%5D,%20int))
        pub fn glGetClipPlanex_int_int_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES11", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetClipPlanex", .descriptor == "(I[II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES11\0", "glGetClipPlanex\0", "(I[II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetClipPlanex](https://developer.android.com/reference/android/opengl/GLES11.html#glGetClipPlanex(int,%20java.nio.IntBuffer))
        ///
        /// Required features: "java-nio-IntBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-IntBuffer")))]
        pub fn glGetClipPlanex_int_IntBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES11", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetClipPlanex", .descriptor == "(ILjava/nio/IntBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES11\0", "glGetClipPlanex\0", "(ILjava/nio/IntBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetFixedv](https://developer.android.com/reference/android/opengl/GLES11.html#glGetFixedv(int,%20int%5B%5D,%20int))
        pub fn glGetFixedv_int_int_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES11", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetFixedv", .descriptor == "(I[II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES11\0", "glGetFixedv\0", "(I[II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetFixedv](https://developer.android.com/reference/android/opengl/GLES11.html#glGetFixedv(int,%20java.nio.IntBuffer))
        ///
        /// Required features: "java-nio-IntBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-IntBuffer")))]
        pub fn glGetFixedv_int_IntBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES11", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetFixedv", .descriptor == "(ILjava/nio/IntBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES11\0", "glGetFixedv\0", "(ILjava/nio/IntBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetFloatv](https://developer.android.com/reference/android/opengl/GLES11.html#glGetFloatv(int,%20float%5B%5D,%20int))
        pub fn glGetFloatv_int_float_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES11", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetFloatv", .descriptor == "(I[FI)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES11\0", "glGetFloatv\0", "(I[FI)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetFloatv](https://developer.android.com/reference/android/opengl/GLES11.html#glGetFloatv(int,%20java.nio.FloatBuffer))
        ///
        /// Required features: "java-nio-FloatBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-FloatBuffer")))]
        pub fn glGetFloatv_int_FloatBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::FloatBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES11", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetFloatv", .descriptor == "(ILjava/nio/FloatBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES11\0", "glGetFloatv\0", "(ILjava/nio/FloatBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetLightfv](https://developer.android.com/reference/android/opengl/GLES11.html#glGetLightfv(int,%20int,%20float%5B%5D,%20int))
        pub fn glGetLightfv_int_int_float_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES11", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetLightfv", .descriptor == "(II[FI)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES11\0", "glGetLightfv\0", "(II[FI)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetLightfv](https://developer.android.com/reference/android/opengl/GLES11.html#glGetLightfv(int,%20int,%20java.nio.FloatBuffer))
        ///
        /// Required features: "java-nio-FloatBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-FloatBuffer")))]
        pub fn glGetLightfv_int_int_FloatBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::FloatBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES11", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetLightfv", .descriptor == "(IILjava/nio/FloatBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES11\0", "glGetLightfv\0", "(IILjava/nio/FloatBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetLightxv](https://developer.android.com/reference/android/opengl/GLES11.html#glGetLightxv(int,%20int,%20int%5B%5D,%20int))
        pub fn glGetLightxv_int_int_int_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES11", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetLightxv", .descriptor == "(II[II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES11\0", "glGetLightxv\0", "(II[II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetLightxv](https://developer.android.com/reference/android/opengl/GLES11.html#glGetLightxv(int,%20int,%20java.nio.IntBuffer))
        ///
        /// Required features: "java-nio-IntBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-IntBuffer")))]
        pub fn glGetLightxv_int_int_IntBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES11", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetLightxv", .descriptor == "(IILjava/nio/IntBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES11\0", "glGetLightxv\0", "(IILjava/nio/IntBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetMaterialfv](https://developer.android.com/reference/android/opengl/GLES11.html#glGetMaterialfv(int,%20int,%20float%5B%5D,%20int))
        pub fn glGetMaterialfv_int_int_float_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES11", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetMaterialfv", .descriptor == "(II[FI)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES11\0", "glGetMaterialfv\0", "(II[FI)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetMaterialfv](https://developer.android.com/reference/android/opengl/GLES11.html#glGetMaterialfv(int,%20int,%20java.nio.FloatBuffer))
        ///
        /// Required features: "java-nio-FloatBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-FloatBuffer")))]
        pub fn glGetMaterialfv_int_int_FloatBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::FloatBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES11", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetMaterialfv", .descriptor == "(IILjava/nio/FloatBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES11\0", "glGetMaterialfv\0", "(IILjava/nio/FloatBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetMaterialxv](https://developer.android.com/reference/android/opengl/GLES11.html#glGetMaterialxv(int,%20int,%20int%5B%5D,%20int))
        pub fn glGetMaterialxv_int_int_int_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES11", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetMaterialxv", .descriptor == "(II[II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES11\0", "glGetMaterialxv\0", "(II[II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetMaterialxv](https://developer.android.com/reference/android/opengl/GLES11.html#glGetMaterialxv(int,%20int,%20java.nio.IntBuffer))
        ///
        /// Required features: "java-nio-IntBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-IntBuffer")))]
        pub fn glGetMaterialxv_int_int_IntBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES11", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetMaterialxv", .descriptor == "(IILjava/nio/IntBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES11\0", "glGetMaterialxv\0", "(IILjava/nio/IntBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetTexEnvfv](https://developer.android.com/reference/android/opengl/GLES11.html#glGetTexEnvfv(int,%20int,%20float%5B%5D,%20int))
        pub fn glGetTexEnvfv_int_int_float_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES11", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetTexEnvfv", .descriptor == "(II[FI)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES11\0", "glGetTexEnvfv\0", "(II[FI)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetTexEnvfv](https://developer.android.com/reference/android/opengl/GLES11.html#glGetTexEnvfv(int,%20int,%20java.nio.FloatBuffer))
        ///
        /// Required features: "java-nio-FloatBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-FloatBuffer")))]
        pub fn glGetTexEnvfv_int_int_FloatBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::FloatBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES11", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetTexEnvfv", .descriptor == "(IILjava/nio/FloatBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES11\0", "glGetTexEnvfv\0", "(IILjava/nio/FloatBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetTexEnviv](https://developer.android.com/reference/android/opengl/GLES11.html#glGetTexEnviv(int,%20int,%20int%5B%5D,%20int))
        pub fn glGetTexEnviv_int_int_int_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES11", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetTexEnviv", .descriptor == "(II[II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES11\0", "glGetTexEnviv\0", "(II[II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetTexEnviv](https://developer.android.com/reference/android/opengl/GLES11.html#glGetTexEnviv(int,%20int,%20java.nio.IntBuffer))
        ///
        /// Required features: "java-nio-IntBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-IntBuffer")))]
        pub fn glGetTexEnviv_int_int_IntBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES11", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetTexEnviv", .descriptor == "(IILjava/nio/IntBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES11\0", "glGetTexEnviv\0", "(IILjava/nio/IntBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetTexEnvxv](https://developer.android.com/reference/android/opengl/GLES11.html#glGetTexEnvxv(int,%20int,%20int%5B%5D,%20int))
        pub fn glGetTexEnvxv_int_int_int_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES11", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetTexEnvxv", .descriptor == "(II[II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES11\0", "glGetTexEnvxv\0", "(II[II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetTexEnvxv](https://developer.android.com/reference/android/opengl/GLES11.html#glGetTexEnvxv(int,%20int,%20java.nio.IntBuffer))
        ///
        /// Required features: "java-nio-IntBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-IntBuffer")))]
        pub fn glGetTexEnvxv_int_int_IntBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES11", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetTexEnvxv", .descriptor == "(IILjava/nio/IntBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES11\0", "glGetTexEnvxv\0", "(IILjava/nio/IntBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetTexParameterfv](https://developer.android.com/reference/android/opengl/GLES11.html#glGetTexParameterfv(int,%20int,%20float%5B%5D,%20int))
        pub fn glGetTexParameterfv_int_int_float_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES11", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetTexParameterfv", .descriptor == "(II[FI)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES11\0", "glGetTexParameterfv\0", "(II[FI)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetTexParameterfv](https://developer.android.com/reference/android/opengl/GLES11.html#glGetTexParameterfv(int,%20int,%20java.nio.FloatBuffer))
        ///
        /// Required features: "java-nio-FloatBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-FloatBuffer")))]
        pub fn glGetTexParameterfv_int_int_FloatBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::FloatBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES11", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetTexParameterfv", .descriptor == "(IILjava/nio/FloatBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES11\0", "glGetTexParameterfv\0", "(IILjava/nio/FloatBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetTexParameteriv](https://developer.android.com/reference/android/opengl/GLES11.html#glGetTexParameteriv(int,%20int,%20int%5B%5D,%20int))
        pub fn glGetTexParameteriv_int_int_int_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES11", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetTexParameteriv", .descriptor == "(II[II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES11\0", "glGetTexParameteriv\0", "(II[II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetTexParameteriv](https://developer.android.com/reference/android/opengl/GLES11.html#glGetTexParameteriv(int,%20int,%20java.nio.IntBuffer))
        ///
        /// Required features: "java-nio-IntBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-IntBuffer")))]
        pub fn glGetTexParameteriv_int_int_IntBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES11", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetTexParameteriv", .descriptor == "(IILjava/nio/IntBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES11\0", "glGetTexParameteriv\0", "(IILjava/nio/IntBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetTexParameterxv](https://developer.android.com/reference/android/opengl/GLES11.html#glGetTexParameterxv(int,%20int,%20int%5B%5D,%20int))
        pub fn glGetTexParameterxv_int_int_int_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES11", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetTexParameterxv", .descriptor == "(II[II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES11\0", "glGetTexParameterxv\0", "(II[II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetTexParameterxv](https://developer.android.com/reference/android/opengl/GLES11.html#glGetTexParameterxv(int,%20int,%20java.nio.IntBuffer))
        ///
        /// Required features: "java-nio-IntBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-IntBuffer")))]
        pub fn glGetTexParameterxv_int_int_IntBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES11", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetTexParameterxv", .descriptor == "(IILjava/nio/IntBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES11\0", "glGetTexParameterxv\0", "(IILjava/nio/IntBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glIsBuffer](https://developer.android.com/reference/android/opengl/GLES11.html#glIsBuffer(int))
        pub fn glIsBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES11", java.flags == PUBLIC | STATIC | NATIVE, .name == "glIsBuffer", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES11\0", "glIsBuffer\0", "(I)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glIsEnabled](https://developer.android.com/reference/android/opengl/GLES11.html#glIsEnabled(int))
        pub fn glIsEnabled<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES11", java.flags == PUBLIC | STATIC | NATIVE, .name == "glIsEnabled", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES11\0", "glIsEnabled\0", "(I)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glIsTexture](https://developer.android.com/reference/android/opengl/GLES11.html#glIsTexture(int))
        pub fn glIsTexture<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES11", java.flags == PUBLIC | STATIC | NATIVE, .name == "glIsTexture", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES11\0", "glIsTexture\0", "(I)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glNormalPointer](https://developer.android.com/reference/android/opengl/GLES11.html#glNormalPointer(int,%20int,%20int))
        pub fn glNormalPointer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES11", java.flags == PUBLIC | STATIC | NATIVE, .name == "glNormalPointer", .descriptor == "(III)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES11\0", "glNormalPointer\0", "(III)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glPointParameterf](https://developer.android.com/reference/android/opengl/GLES11.html#glPointParameterf(int,%20float))
        pub fn glPointParameterf<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES11", java.flags == PUBLIC | STATIC | NATIVE, .name == "glPointParameterf", .descriptor == "(IF)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES11\0", "glPointParameterf\0", "(IF)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glPointParameterfv](https://developer.android.com/reference/android/opengl/GLES11.html#glPointParameterfv(int,%20float%5B%5D,%20int))
        pub fn glPointParameterfv_int_float_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES11", java.flags == PUBLIC | STATIC | NATIVE, .name == "glPointParameterfv", .descriptor == "(I[FI)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES11\0", "glPointParameterfv\0", "(I[FI)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glPointParameterfv](https://developer.android.com/reference/android/opengl/GLES11.html#glPointParameterfv(int,%20java.nio.FloatBuffer))
        ///
        /// Required features: "java-nio-FloatBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-FloatBuffer")))]
        pub fn glPointParameterfv_int_FloatBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::FloatBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES11", java.flags == PUBLIC | STATIC | NATIVE, .name == "glPointParameterfv", .descriptor == "(ILjava/nio/FloatBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES11\0", "glPointParameterfv\0", "(ILjava/nio/FloatBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glPointParameterx](https://developer.android.com/reference/android/opengl/GLES11.html#glPointParameterx(int,%20int))
        pub fn glPointParameterx<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES11", java.flags == PUBLIC | STATIC | NATIVE, .name == "glPointParameterx", .descriptor == "(II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES11\0", "glPointParameterx\0", "(II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glPointParameterxv](https://developer.android.com/reference/android/opengl/GLES11.html#glPointParameterxv(int,%20int%5B%5D,%20int))
        pub fn glPointParameterxv_int_int_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES11", java.flags == PUBLIC | STATIC | NATIVE, .name == "glPointParameterxv", .descriptor == "(I[II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES11\0", "glPointParameterxv\0", "(I[II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glPointParameterxv](https://developer.android.com/reference/android/opengl/GLES11.html#glPointParameterxv(int,%20java.nio.IntBuffer))
        ///
        /// Required features: "java-nio-IntBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-IntBuffer")))]
        pub fn glPointParameterxv_int_IntBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES11", java.flags == PUBLIC | STATIC | NATIVE, .name == "glPointParameterxv", .descriptor == "(ILjava/nio/IntBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES11\0", "glPointParameterxv\0", "(ILjava/nio/IntBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glPointSizePointerOES](https://developer.android.com/reference/android/opengl/GLES11.html#glPointSizePointerOES(int,%20int,%20java.nio.Buffer))
        ///
        /// Required features: "java-nio-Buffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-Buffer")))]
        pub fn glPointSizePointerOES<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::Buffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES11", java.flags == PUBLIC | STATIC, .name == "glPointSizePointerOES", .descriptor == "(IILjava/nio/Buffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES11\0", "glPointSizePointerOES\0", "(IILjava/nio/Buffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glTexCoordPointer](https://developer.android.com/reference/android/opengl/GLES11.html#glTexCoordPointer(int,%20int,%20int,%20int))
        pub fn glTexCoordPointer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES11", java.flags == PUBLIC | STATIC | NATIVE, .name == "glTexCoordPointer", .descriptor == "(IIII)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES11\0", "glTexCoordPointer\0", "(IIII)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glTexEnvi](https://developer.android.com/reference/android/opengl/GLES11.html#glTexEnvi(int,%20int,%20int))
        pub fn glTexEnvi<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES11", java.flags == PUBLIC | STATIC | NATIVE, .name == "glTexEnvi", .descriptor == "(III)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES11\0", "glTexEnvi\0", "(III)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glTexEnviv](https://developer.android.com/reference/android/opengl/GLES11.html#glTexEnviv(int,%20int,%20int%5B%5D,%20int))
        pub fn glTexEnviv_int_int_int_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES11", java.flags == PUBLIC | STATIC | NATIVE, .name == "glTexEnviv", .descriptor == "(II[II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES11\0", "glTexEnviv\0", "(II[II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glTexEnviv](https://developer.android.com/reference/android/opengl/GLES11.html#glTexEnviv(int,%20int,%20java.nio.IntBuffer))
        ///
        /// Required features: "java-nio-IntBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-IntBuffer")))]
        pub fn glTexEnviv_int_int_IntBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES11", java.flags == PUBLIC | STATIC | NATIVE, .name == "glTexEnviv", .descriptor == "(IILjava/nio/IntBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES11\0", "glTexEnviv\0", "(IILjava/nio/IntBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glTexParameterfv](https://developer.android.com/reference/android/opengl/GLES11.html#glTexParameterfv(int,%20int,%20float%5B%5D,%20int))
        pub fn glTexParameterfv_int_int_float_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES11", java.flags == PUBLIC | STATIC | NATIVE, .name == "glTexParameterfv", .descriptor == "(II[FI)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES11\0", "glTexParameterfv\0", "(II[FI)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glTexParameterfv](https://developer.android.com/reference/android/opengl/GLES11.html#glTexParameterfv(int,%20int,%20java.nio.FloatBuffer))
        ///
        /// Required features: "java-nio-FloatBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-FloatBuffer")))]
        pub fn glTexParameterfv_int_int_FloatBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::FloatBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES11", java.flags == PUBLIC | STATIC | NATIVE, .name == "glTexParameterfv", .descriptor == "(IILjava/nio/FloatBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES11\0", "glTexParameterfv\0", "(IILjava/nio/FloatBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glTexParameteri](https://developer.android.com/reference/android/opengl/GLES11.html#glTexParameteri(int,%20int,%20int))
        pub fn glTexParameteri<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES11", java.flags == PUBLIC | STATIC | NATIVE, .name == "glTexParameteri", .descriptor == "(III)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES11\0", "glTexParameteri\0", "(III)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glTexParameteriv](https://developer.android.com/reference/android/opengl/GLES11.html#glTexParameteriv(int,%20int,%20int%5B%5D,%20int))
        pub fn glTexParameteriv_int_int_int_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES11", java.flags == PUBLIC | STATIC | NATIVE, .name == "glTexParameteriv", .descriptor == "(II[II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES11\0", "glTexParameteriv\0", "(II[II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glTexParameteriv](https://developer.android.com/reference/android/opengl/GLES11.html#glTexParameteriv(int,%20int,%20java.nio.IntBuffer))
        ///
        /// Required features: "java-nio-IntBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-IntBuffer")))]
        pub fn glTexParameteriv_int_int_IntBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES11", java.flags == PUBLIC | STATIC | NATIVE, .name == "glTexParameteriv", .descriptor == "(IILjava/nio/IntBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES11\0", "glTexParameteriv\0", "(IILjava/nio/IntBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glTexParameterxv](https://developer.android.com/reference/android/opengl/GLES11.html#glTexParameterxv(int,%20int,%20int%5B%5D,%20int))
        pub fn glTexParameterxv_int_int_int_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES11", java.flags == PUBLIC | STATIC | NATIVE, .name == "glTexParameterxv", .descriptor == "(II[II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES11\0", "glTexParameterxv\0", "(II[II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glTexParameterxv](https://developer.android.com/reference/android/opengl/GLES11.html#glTexParameterxv(int,%20int,%20java.nio.IntBuffer))
        ///
        /// Required features: "java-nio-IntBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-IntBuffer")))]
        pub fn glTexParameterxv_int_int_IntBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES11", java.flags == PUBLIC | STATIC | NATIVE, .name == "glTexParameterxv", .descriptor == "(IILjava/nio/IntBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES11\0", "glTexParameterxv\0", "(IILjava/nio/IntBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glVertexPointer](https://developer.android.com/reference/android/opengl/GLES11.html#glVertexPointer(int,%20int,%20int,%20int))
        pub fn glVertexPointer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES11", java.flags == PUBLIC | STATIC | NATIVE, .name == "glVertexPointer", .descriptor == "(IIII)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES11\0", "glVertexPointer\0", "(IIII)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [GL_ACTIVE_TEXTURE](https://developer.android.com/reference/android/opengl/GLES11.html#GL_ACTIVE_TEXTURE)
        pub const GL_ACTIVE_TEXTURE : i32 = 34016;

        /// public static final [GL_ADD_SIGNED](https://developer.android.com/reference/android/opengl/GLES11.html#GL_ADD_SIGNED)
        pub const GL_ADD_SIGNED : i32 = 34164;

        /// public static final [GL_ALPHA_SCALE](https://developer.android.com/reference/android/opengl/GLES11.html#GL_ALPHA_SCALE)
        pub const GL_ALPHA_SCALE : i32 = 3356;

        /// public static final [GL_ALPHA_TEST_FUNC](https://developer.android.com/reference/android/opengl/GLES11.html#GL_ALPHA_TEST_FUNC)
        pub const GL_ALPHA_TEST_FUNC : i32 = 3009;

        /// public static final [GL_ALPHA_TEST_REF](https://developer.android.com/reference/android/opengl/GLES11.html#GL_ALPHA_TEST_REF)
        pub const GL_ALPHA_TEST_REF : i32 = 3010;

        /// public static final [GL_ARRAY_BUFFER](https://developer.android.com/reference/android/opengl/GLES11.html#GL_ARRAY_BUFFER)
        pub const GL_ARRAY_BUFFER : i32 = 34962;

        /// public static final [GL_ARRAY_BUFFER_BINDING](https://developer.android.com/reference/android/opengl/GLES11.html#GL_ARRAY_BUFFER_BINDING)
        pub const GL_ARRAY_BUFFER_BINDING : i32 = 34964;

        /// public static final [GL_BLEND_DST](https://developer.android.com/reference/android/opengl/GLES11.html#GL_BLEND_DST)
        pub const GL_BLEND_DST : i32 = 3040;

        /// public static final [GL_BLEND_SRC](https://developer.android.com/reference/android/opengl/GLES11.html#GL_BLEND_SRC)
        pub const GL_BLEND_SRC : i32 = 3041;

        /// public static final [GL_BUFFER_ACCESS](https://developer.android.com/reference/android/opengl/GLES11.html#GL_BUFFER_ACCESS)
        pub const GL_BUFFER_ACCESS : i32 = 35003;

        /// public static final [GL_BUFFER_SIZE](https://developer.android.com/reference/android/opengl/GLES11.html#GL_BUFFER_SIZE)
        pub const GL_BUFFER_SIZE : i32 = 34660;

        /// public static final [GL_BUFFER_USAGE](https://developer.android.com/reference/android/opengl/GLES11.html#GL_BUFFER_USAGE)
        pub const GL_BUFFER_USAGE : i32 = 34661;

        /// public static final [GL_CLIENT_ACTIVE_TEXTURE](https://developer.android.com/reference/android/opengl/GLES11.html#GL_CLIENT_ACTIVE_TEXTURE)
        pub const GL_CLIENT_ACTIVE_TEXTURE : i32 = 34017;

        /// public static final [GL_CLIP_PLANE0](https://developer.android.com/reference/android/opengl/GLES11.html#GL_CLIP_PLANE0)
        pub const GL_CLIP_PLANE0 : i32 = 12288;

        /// public static final [GL_CLIP_PLANE1](https://developer.android.com/reference/android/opengl/GLES11.html#GL_CLIP_PLANE1)
        pub const GL_CLIP_PLANE1 : i32 = 12289;

        /// public static final [GL_CLIP_PLANE2](https://developer.android.com/reference/android/opengl/GLES11.html#GL_CLIP_PLANE2)
        pub const GL_CLIP_PLANE2 : i32 = 12290;

        /// public static final [GL_CLIP_PLANE3](https://developer.android.com/reference/android/opengl/GLES11.html#GL_CLIP_PLANE3)
        pub const GL_CLIP_PLANE3 : i32 = 12291;

        /// public static final [GL_CLIP_PLANE4](https://developer.android.com/reference/android/opengl/GLES11.html#GL_CLIP_PLANE4)
        pub const GL_CLIP_PLANE4 : i32 = 12292;

        /// public static final [GL_CLIP_PLANE5](https://developer.android.com/reference/android/opengl/GLES11.html#GL_CLIP_PLANE5)
        pub const GL_CLIP_PLANE5 : i32 = 12293;

        /// public static final [GL_COLOR_ARRAY_BUFFER_BINDING](https://developer.android.com/reference/android/opengl/GLES11.html#GL_COLOR_ARRAY_BUFFER_BINDING)
        pub const GL_COLOR_ARRAY_BUFFER_BINDING : i32 = 34968;

        /// public static final [GL_COLOR_ARRAY_POINTER](https://developer.android.com/reference/android/opengl/GLES11.html#GL_COLOR_ARRAY_POINTER)
        pub const GL_COLOR_ARRAY_POINTER : i32 = 32912;

        /// public static final [GL_COLOR_ARRAY_SIZE](https://developer.android.com/reference/android/opengl/GLES11.html#GL_COLOR_ARRAY_SIZE)
        pub const GL_COLOR_ARRAY_SIZE : i32 = 32897;

        /// public static final [GL_COLOR_ARRAY_STRIDE](https://developer.android.com/reference/android/opengl/GLES11.html#GL_COLOR_ARRAY_STRIDE)
        pub const GL_COLOR_ARRAY_STRIDE : i32 = 32899;

        /// public static final [GL_COLOR_ARRAY_TYPE](https://developer.android.com/reference/android/opengl/GLES11.html#GL_COLOR_ARRAY_TYPE)
        pub const GL_COLOR_ARRAY_TYPE : i32 = 32898;

        /// public static final [GL_COLOR_CLEAR_VALUE](https://developer.android.com/reference/android/opengl/GLES11.html#GL_COLOR_CLEAR_VALUE)
        pub const GL_COLOR_CLEAR_VALUE : i32 = 3106;

        /// public static final [GL_COLOR_WRITEMASK](https://developer.android.com/reference/android/opengl/GLES11.html#GL_COLOR_WRITEMASK)
        pub const GL_COLOR_WRITEMASK : i32 = 3107;

        /// public static final [GL_COMBINE](https://developer.android.com/reference/android/opengl/GLES11.html#GL_COMBINE)
        pub const GL_COMBINE : i32 = 34160;

        /// public static final [GL_COMBINE_ALPHA](https://developer.android.com/reference/android/opengl/GLES11.html#GL_COMBINE_ALPHA)
        pub const GL_COMBINE_ALPHA : i32 = 34162;

        /// public static final [GL_COMBINE_RGB](https://developer.android.com/reference/android/opengl/GLES11.html#GL_COMBINE_RGB)
        pub const GL_COMBINE_RGB : i32 = 34161;

        /// public static final [GL_CONSTANT](https://developer.android.com/reference/android/opengl/GLES11.html#GL_CONSTANT)
        pub const GL_CONSTANT : i32 = 34166;

        /// public static final [GL_COORD_REPLACE_OES](https://developer.android.com/reference/android/opengl/GLES11.html#GL_COORD_REPLACE_OES)
        pub const GL_COORD_REPLACE_OES : i32 = 34914;

        /// public static final [GL_CULL_FACE_MODE](https://developer.android.com/reference/android/opengl/GLES11.html#GL_CULL_FACE_MODE)
        pub const GL_CULL_FACE_MODE : i32 = 2885;

        /// public static final [GL_CURRENT_COLOR](https://developer.android.com/reference/android/opengl/GLES11.html#GL_CURRENT_COLOR)
        pub const GL_CURRENT_COLOR : i32 = 2816;

        /// public static final [GL_CURRENT_NORMAL](https://developer.android.com/reference/android/opengl/GLES11.html#GL_CURRENT_NORMAL)
        pub const GL_CURRENT_NORMAL : i32 = 2818;

        /// public static final [GL_CURRENT_TEXTURE_COORDS](https://developer.android.com/reference/android/opengl/GLES11.html#GL_CURRENT_TEXTURE_COORDS)
        pub const GL_CURRENT_TEXTURE_COORDS : i32 = 2819;

        /// public static final [GL_DEPTH_CLEAR_VALUE](https://developer.android.com/reference/android/opengl/GLES11.html#GL_DEPTH_CLEAR_VALUE)
        pub const GL_DEPTH_CLEAR_VALUE : i32 = 2931;

        /// public static final [GL_DEPTH_FUNC](https://developer.android.com/reference/android/opengl/GLES11.html#GL_DEPTH_FUNC)
        pub const GL_DEPTH_FUNC : i32 = 2932;

        /// public static final [GL_DEPTH_RANGE](https://developer.android.com/reference/android/opengl/GLES11.html#GL_DEPTH_RANGE)
        pub const GL_DEPTH_RANGE : i32 = 2928;

        /// public static final [GL_DEPTH_WRITEMASK](https://developer.android.com/reference/android/opengl/GLES11.html#GL_DEPTH_WRITEMASK)
        pub const GL_DEPTH_WRITEMASK : i32 = 2930;

        /// public static final [GL_DOT3_RGB](https://developer.android.com/reference/android/opengl/GLES11.html#GL_DOT3_RGB)
        pub const GL_DOT3_RGB : i32 = 34478;

        /// public static final [GL_DOT3_RGBA](https://developer.android.com/reference/android/opengl/GLES11.html#GL_DOT3_RGBA)
        pub const GL_DOT3_RGBA : i32 = 34479;

        /// public static final [GL_DYNAMIC_DRAW](https://developer.android.com/reference/android/opengl/GLES11.html#GL_DYNAMIC_DRAW)
        pub const GL_DYNAMIC_DRAW : i32 = 35048;

        /// public static final [GL_ELEMENT_ARRAY_BUFFER](https://developer.android.com/reference/android/opengl/GLES11.html#GL_ELEMENT_ARRAY_BUFFER)
        pub const GL_ELEMENT_ARRAY_BUFFER : i32 = 34963;

        /// public static final [GL_ELEMENT_ARRAY_BUFFER_BINDING](https://developer.android.com/reference/android/opengl/GLES11.html#GL_ELEMENT_ARRAY_BUFFER_BINDING)
        pub const GL_ELEMENT_ARRAY_BUFFER_BINDING : i32 = 34965;

        /// public static final [GL_FRONT_FACE](https://developer.android.com/reference/android/opengl/GLES11.html#GL_FRONT_FACE)
        pub const GL_FRONT_FACE : i32 = 2886;

        /// public static final [GL_GENERATE_MIPMAP](https://developer.android.com/reference/android/opengl/GLES11.html#GL_GENERATE_MIPMAP)
        pub const GL_GENERATE_MIPMAP : i32 = 33169;

        /// public static final [GL_GENERATE_MIPMAP_HINT](https://developer.android.com/reference/android/opengl/GLES11.html#GL_GENERATE_MIPMAP_HINT)
        pub const GL_GENERATE_MIPMAP_HINT : i32 = 33170;

        /// public static final [GL_INTERPOLATE](https://developer.android.com/reference/android/opengl/GLES11.html#GL_INTERPOLATE)
        pub const GL_INTERPOLATE : i32 = 34165;

        /// public static final [GL_LINE_WIDTH](https://developer.android.com/reference/android/opengl/GLES11.html#GL_LINE_WIDTH)
        pub const GL_LINE_WIDTH : i32 = 2849;

        /// public static final [GL_LOGIC_OP_MODE](https://developer.android.com/reference/android/opengl/GLES11.html#GL_LOGIC_OP_MODE)
        pub const GL_LOGIC_OP_MODE : i32 = 3056;

        /// public static final [GL_MATRIX_MODE](https://developer.android.com/reference/android/opengl/GLES11.html#GL_MATRIX_MODE)
        pub const GL_MATRIX_MODE : i32 = 2976;

        /// public static final [GL_MAX_CLIP_PLANES](https://developer.android.com/reference/android/opengl/GLES11.html#GL_MAX_CLIP_PLANES)
        pub const GL_MAX_CLIP_PLANES : i32 = 3378;

        /// public static final [GL_MODELVIEW_MATRIX](https://developer.android.com/reference/android/opengl/GLES11.html#GL_MODELVIEW_MATRIX)
        pub const GL_MODELVIEW_MATRIX : i32 = 2982;

        /// public static final [GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES](https://developer.android.com/reference/android/opengl/GLES11.html#GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES)
        pub const GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES : i32 = 35213;

        /// public static final [GL_MODELVIEW_STACK_DEPTH](https://developer.android.com/reference/android/opengl/GLES11.html#GL_MODELVIEW_STACK_DEPTH)
        pub const GL_MODELVIEW_STACK_DEPTH : i32 = 2979;

        /// public static final [GL_NORMAL_ARRAY_BUFFER_BINDING](https://developer.android.com/reference/android/opengl/GLES11.html#GL_NORMAL_ARRAY_BUFFER_BINDING)
        pub const GL_NORMAL_ARRAY_BUFFER_BINDING : i32 = 34967;

        /// public static final [GL_NORMAL_ARRAY_POINTER](https://developer.android.com/reference/android/opengl/GLES11.html#GL_NORMAL_ARRAY_POINTER)
        pub const GL_NORMAL_ARRAY_POINTER : i32 = 32911;

        /// public static final [GL_NORMAL_ARRAY_STRIDE](https://developer.android.com/reference/android/opengl/GLES11.html#GL_NORMAL_ARRAY_STRIDE)
        pub const GL_NORMAL_ARRAY_STRIDE : i32 = 32895;

        /// public static final [GL_NORMAL_ARRAY_TYPE](https://developer.android.com/reference/android/opengl/GLES11.html#GL_NORMAL_ARRAY_TYPE)
        pub const GL_NORMAL_ARRAY_TYPE : i32 = 32894;

        /// public static final [GL_OPERAND0_ALPHA](https://developer.android.com/reference/android/opengl/GLES11.html#GL_OPERAND0_ALPHA)
        pub const GL_OPERAND0_ALPHA : i32 = 34200;

        /// public static final [GL_OPERAND0_RGB](https://developer.android.com/reference/android/opengl/GLES11.html#GL_OPERAND0_RGB)
        pub const GL_OPERAND0_RGB : i32 = 34192;

        /// public static final [GL_OPERAND1_ALPHA](https://developer.android.com/reference/android/opengl/GLES11.html#GL_OPERAND1_ALPHA)
        pub const GL_OPERAND1_ALPHA : i32 = 34201;

        /// public static final [GL_OPERAND1_RGB](https://developer.android.com/reference/android/opengl/GLES11.html#GL_OPERAND1_RGB)
        pub const GL_OPERAND1_RGB : i32 = 34193;

        /// public static final [GL_OPERAND2_ALPHA](https://developer.android.com/reference/android/opengl/GLES11.html#GL_OPERAND2_ALPHA)
        pub const GL_OPERAND2_ALPHA : i32 = 34202;

        /// public static final [GL_OPERAND2_RGB](https://developer.android.com/reference/android/opengl/GLES11.html#GL_OPERAND2_RGB)
        pub const GL_OPERAND2_RGB : i32 = 34194;

        /// public static final [GL_POINT_DISTANCE_ATTENUATION](https://developer.android.com/reference/android/opengl/GLES11.html#GL_POINT_DISTANCE_ATTENUATION)
        pub const GL_POINT_DISTANCE_ATTENUATION : i32 = 33065;

        /// public static final [GL_POINT_FADE_THRESHOLD_SIZE](https://developer.android.com/reference/android/opengl/GLES11.html#GL_POINT_FADE_THRESHOLD_SIZE)
        pub const GL_POINT_FADE_THRESHOLD_SIZE : i32 = 33064;

        /// public static final [GL_POINT_SIZE](https://developer.android.com/reference/android/opengl/GLES11.html#GL_POINT_SIZE)
        pub const GL_POINT_SIZE : i32 = 2833;

        /// public static final [GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OES](https://developer.android.com/reference/android/opengl/GLES11.html#GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OES)
        pub const GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OES : i32 = 35743;

        /// public static final [GL_POINT_SIZE_ARRAY_OES](https://developer.android.com/reference/android/opengl/GLES11.html#GL_POINT_SIZE_ARRAY_OES)
        pub const GL_POINT_SIZE_ARRAY_OES : i32 = 35740;

        /// public static final [GL_POINT_SIZE_ARRAY_POINTER_OES](https://developer.android.com/reference/android/opengl/GLES11.html#GL_POINT_SIZE_ARRAY_POINTER_OES)
        pub const GL_POINT_SIZE_ARRAY_POINTER_OES : i32 = 35212;

        /// public static final [GL_POINT_SIZE_ARRAY_STRIDE_OES](https://developer.android.com/reference/android/opengl/GLES11.html#GL_POINT_SIZE_ARRAY_STRIDE_OES)
        pub const GL_POINT_SIZE_ARRAY_STRIDE_OES : i32 = 35211;

        /// public static final [GL_POINT_SIZE_ARRAY_TYPE_OES](https://developer.android.com/reference/android/opengl/GLES11.html#GL_POINT_SIZE_ARRAY_TYPE_OES)
        pub const GL_POINT_SIZE_ARRAY_TYPE_OES : i32 = 35210;

        /// public static final [GL_POINT_SIZE_MAX](https://developer.android.com/reference/android/opengl/GLES11.html#GL_POINT_SIZE_MAX)
        pub const GL_POINT_SIZE_MAX : i32 = 33063;

        /// public static final [GL_POINT_SIZE_MIN](https://developer.android.com/reference/android/opengl/GLES11.html#GL_POINT_SIZE_MIN)
        pub const GL_POINT_SIZE_MIN : i32 = 33062;

        /// public static final [GL_POINT_SPRITE_OES](https://developer.android.com/reference/android/opengl/GLES11.html#GL_POINT_SPRITE_OES)
        pub const GL_POINT_SPRITE_OES : i32 = 34913;

        /// public static final [GL_POLYGON_OFFSET_FACTOR](https://developer.android.com/reference/android/opengl/GLES11.html#GL_POLYGON_OFFSET_FACTOR)
        pub const GL_POLYGON_OFFSET_FACTOR : i32 = 32824;

        /// public static final [GL_POLYGON_OFFSET_UNITS](https://developer.android.com/reference/android/opengl/GLES11.html#GL_POLYGON_OFFSET_UNITS)
        pub const GL_POLYGON_OFFSET_UNITS : i32 = 10752;

        /// public static final [GL_PREVIOUS](https://developer.android.com/reference/android/opengl/GLES11.html#GL_PREVIOUS)
        pub const GL_PREVIOUS : i32 = 34168;

        /// public static final [GL_PRIMARY_COLOR](https://developer.android.com/reference/android/opengl/GLES11.html#GL_PRIMARY_COLOR)
        pub const GL_PRIMARY_COLOR : i32 = 34167;

        /// public static final [GL_PROJECTION_MATRIX](https://developer.android.com/reference/android/opengl/GLES11.html#GL_PROJECTION_MATRIX)
        pub const GL_PROJECTION_MATRIX : i32 = 2983;

        /// public static final [GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES](https://developer.android.com/reference/android/opengl/GLES11.html#GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES)
        pub const GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES : i32 = 35214;

        /// public static final [GL_PROJECTION_STACK_DEPTH](https://developer.android.com/reference/android/opengl/GLES11.html#GL_PROJECTION_STACK_DEPTH)
        pub const GL_PROJECTION_STACK_DEPTH : i32 = 2980;

        /// public static final [GL_RGB_SCALE](https://developer.android.com/reference/android/opengl/GLES11.html#GL_RGB_SCALE)
        pub const GL_RGB_SCALE : i32 = 34163;

        /// public static final [GL_SAMPLES](https://developer.android.com/reference/android/opengl/GLES11.html#GL_SAMPLES)
        pub const GL_SAMPLES : i32 = 32937;

        /// public static final [GL_SAMPLE_BUFFERS](https://developer.android.com/reference/android/opengl/GLES11.html#GL_SAMPLE_BUFFERS)
        pub const GL_SAMPLE_BUFFERS : i32 = 32936;

        /// public static final [GL_SAMPLE_COVERAGE_INVERT](https://developer.android.com/reference/android/opengl/GLES11.html#GL_SAMPLE_COVERAGE_INVERT)
        pub const GL_SAMPLE_COVERAGE_INVERT : i32 = 32939;

        /// public static final [GL_SAMPLE_COVERAGE_VALUE](https://developer.android.com/reference/android/opengl/GLES11.html#GL_SAMPLE_COVERAGE_VALUE)
        pub const GL_SAMPLE_COVERAGE_VALUE : i32 = 32938;

        /// public static final [GL_SCISSOR_BOX](https://developer.android.com/reference/android/opengl/GLES11.html#GL_SCISSOR_BOX)
        pub const GL_SCISSOR_BOX : i32 = 3088;

        /// public static final [GL_SHADE_MODEL](https://developer.android.com/reference/android/opengl/GLES11.html#GL_SHADE_MODEL)
        pub const GL_SHADE_MODEL : i32 = 2900;

        /// public static final [GL_SRC0_ALPHA](https://developer.android.com/reference/android/opengl/GLES11.html#GL_SRC0_ALPHA)
        pub const GL_SRC0_ALPHA : i32 = 34184;

        /// public static final [GL_SRC0_RGB](https://developer.android.com/reference/android/opengl/GLES11.html#GL_SRC0_RGB)
        pub const GL_SRC0_RGB : i32 = 34176;

        /// public static final [GL_SRC1_ALPHA](https://developer.android.com/reference/android/opengl/GLES11.html#GL_SRC1_ALPHA)
        pub const GL_SRC1_ALPHA : i32 = 34185;

        /// public static final [GL_SRC1_RGB](https://developer.android.com/reference/android/opengl/GLES11.html#GL_SRC1_RGB)
        pub const GL_SRC1_RGB : i32 = 34177;

        /// public static final [GL_SRC2_ALPHA](https://developer.android.com/reference/android/opengl/GLES11.html#GL_SRC2_ALPHA)
        pub const GL_SRC2_ALPHA : i32 = 34186;

        /// public static final [GL_SRC2_RGB](https://developer.android.com/reference/android/opengl/GLES11.html#GL_SRC2_RGB)
        pub const GL_SRC2_RGB : i32 = 34178;

        /// public static final [GL_STATIC_DRAW](https://developer.android.com/reference/android/opengl/GLES11.html#GL_STATIC_DRAW)
        pub const GL_STATIC_DRAW : i32 = 35044;

        /// public static final [GL_STENCIL_CLEAR_VALUE](https://developer.android.com/reference/android/opengl/GLES11.html#GL_STENCIL_CLEAR_VALUE)
        pub const GL_STENCIL_CLEAR_VALUE : i32 = 2961;

        /// public static final [GL_STENCIL_FAIL](https://developer.android.com/reference/android/opengl/GLES11.html#GL_STENCIL_FAIL)
        pub const GL_STENCIL_FAIL : i32 = 2964;

        /// public static final [GL_STENCIL_FUNC](https://developer.android.com/reference/android/opengl/GLES11.html#GL_STENCIL_FUNC)
        pub const GL_STENCIL_FUNC : i32 = 2962;

        /// public static final [GL_STENCIL_PASS_DEPTH_FAIL](https://developer.android.com/reference/android/opengl/GLES11.html#GL_STENCIL_PASS_DEPTH_FAIL)
        pub const GL_STENCIL_PASS_DEPTH_FAIL : i32 = 2965;

        /// public static final [GL_STENCIL_PASS_DEPTH_PASS](https://developer.android.com/reference/android/opengl/GLES11.html#GL_STENCIL_PASS_DEPTH_PASS)
        pub const GL_STENCIL_PASS_DEPTH_PASS : i32 = 2966;

        /// public static final [GL_STENCIL_REF](https://developer.android.com/reference/android/opengl/GLES11.html#GL_STENCIL_REF)
        pub const GL_STENCIL_REF : i32 = 2967;

        /// public static final [GL_STENCIL_VALUE_MASK](https://developer.android.com/reference/android/opengl/GLES11.html#GL_STENCIL_VALUE_MASK)
        pub const GL_STENCIL_VALUE_MASK : i32 = 2963;

        /// public static final [GL_STENCIL_WRITEMASK](https://developer.android.com/reference/android/opengl/GLES11.html#GL_STENCIL_WRITEMASK)
        pub const GL_STENCIL_WRITEMASK : i32 = 2968;

        /// public static final [GL_SUBTRACT](https://developer.android.com/reference/android/opengl/GLES11.html#GL_SUBTRACT)
        pub const GL_SUBTRACT : i32 = 34023;

        /// public static final [GL_TEXTURE_BINDING_2D](https://developer.android.com/reference/android/opengl/GLES11.html#GL_TEXTURE_BINDING_2D)
        pub const GL_TEXTURE_BINDING_2D : i32 = 32873;

        /// public static final [GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING](https://developer.android.com/reference/android/opengl/GLES11.html#GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING)
        pub const GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING : i32 = 34970;

        /// public static final [GL_TEXTURE_COORD_ARRAY_POINTER](https://developer.android.com/reference/android/opengl/GLES11.html#GL_TEXTURE_COORD_ARRAY_POINTER)
        pub const GL_TEXTURE_COORD_ARRAY_POINTER : i32 = 32914;

        /// public static final [GL_TEXTURE_COORD_ARRAY_SIZE](https://developer.android.com/reference/android/opengl/GLES11.html#GL_TEXTURE_COORD_ARRAY_SIZE)
        pub const GL_TEXTURE_COORD_ARRAY_SIZE : i32 = 32904;

        /// public static final [GL_TEXTURE_COORD_ARRAY_STRIDE](https://developer.android.com/reference/android/opengl/GLES11.html#GL_TEXTURE_COORD_ARRAY_STRIDE)
        pub const GL_TEXTURE_COORD_ARRAY_STRIDE : i32 = 32906;

        /// public static final [GL_TEXTURE_COORD_ARRAY_TYPE](https://developer.android.com/reference/android/opengl/GLES11.html#GL_TEXTURE_COORD_ARRAY_TYPE)
        pub const GL_TEXTURE_COORD_ARRAY_TYPE : i32 = 32905;

        /// public static final [GL_TEXTURE_MATRIX](https://developer.android.com/reference/android/opengl/GLES11.html#GL_TEXTURE_MATRIX)
        pub const GL_TEXTURE_MATRIX : i32 = 2984;

        /// public static final [GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES](https://developer.android.com/reference/android/opengl/GLES11.html#GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES)
        pub const GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES : i32 = 35215;

        /// public static final [GL_TEXTURE_STACK_DEPTH](https://developer.android.com/reference/android/opengl/GLES11.html#GL_TEXTURE_STACK_DEPTH)
        pub const GL_TEXTURE_STACK_DEPTH : i32 = 2981;

        /// public static final [GL_VERTEX_ARRAY_BUFFER_BINDING](https://developer.android.com/reference/android/opengl/GLES11.html#GL_VERTEX_ARRAY_BUFFER_BINDING)
        pub const GL_VERTEX_ARRAY_BUFFER_BINDING : i32 = 34966;

        /// public static final [GL_VERTEX_ARRAY_POINTER](https://developer.android.com/reference/android/opengl/GLES11.html#GL_VERTEX_ARRAY_POINTER)
        pub const GL_VERTEX_ARRAY_POINTER : i32 = 32910;

        /// public static final [GL_VERTEX_ARRAY_SIZE](https://developer.android.com/reference/android/opengl/GLES11.html#GL_VERTEX_ARRAY_SIZE)
        pub const GL_VERTEX_ARRAY_SIZE : i32 = 32890;

        /// public static final [GL_VERTEX_ARRAY_STRIDE](https://developer.android.com/reference/android/opengl/GLES11.html#GL_VERTEX_ARRAY_STRIDE)
        pub const GL_VERTEX_ARRAY_STRIDE : i32 = 32892;

        /// public static final [GL_VERTEX_ARRAY_TYPE](https://developer.android.com/reference/android/opengl/GLES11.html#GL_VERTEX_ARRAY_TYPE)
        pub const GL_VERTEX_ARRAY_TYPE : i32 = 32891;

        /// public static final [GL_VIEWPORT](https://developer.android.com/reference/android/opengl/GLES11.html#GL_VIEWPORT)
        pub const GL_VIEWPORT : i32 = 2978;

        /// public static final [GL_WRITE_ONLY](https://developer.android.com/reference/android/opengl/GLES11.html#GL_WRITE_ONLY)
        pub const GL_WRITE_ONLY : i32 = 35001;
    }
}
