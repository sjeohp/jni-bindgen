// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-opengl-EGL14"))]
__jni_bindgen! {
    /// public class [EGL14](https://developer.android.com/reference/android/opengl/EGL14.html)
    ///
    /// Required feature: android-opengl-EGL14
    public class EGL14 ("android/opengl/EGL14") extends crate::java::lang::Object {

        /// [EGL14](https://developer.android.com/reference/android/opengl/EGL14.html#EGL14())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::opengl::EGL14>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/EGL14", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/opengl/EGL14\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [eglGetError](https://developer.android.com/reference/android/opengl/EGL14.html#eglGetError())
        pub fn eglGetError<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/EGL14", java.flags == PUBLIC | STATIC | NATIVE, .name == "eglGetError", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/EGL14\0", "eglGetError\0", "()I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [eglGetDisplay](https://developer.android.com/reference/android/opengl/EGL14.html#eglGetDisplay(int))
        ///
        /// Required features: "android-opengl-EGLDisplay"
        #[cfg(any(feature = "all", all(feature = "android-opengl-EGLDisplay")))]
        pub fn eglGetDisplay<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::opengl::EGLDisplay>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/EGL14", java.flags == PUBLIC | STATIC | NATIVE, .name == "eglGetDisplay", .descriptor == "(I)Landroid/opengl/EGLDisplay;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/EGL14\0", "eglGetDisplay\0", "(I)Landroid/opengl/EGLDisplay;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [eglInitialize](https://developer.android.com/reference/android/opengl/EGL14.html#eglInitialize(android.opengl.EGLDisplay,%20int%5B%5D,%20int,%20int%5B%5D,%20int))
        ///
        /// Required features: "android-opengl-EGLDisplay"
        #[cfg(any(feature = "all", all(feature = "android-opengl-EGLDisplay")))]
        pub fn eglInitialize<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::opengl::EGLDisplay>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg4: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/EGL14", java.flags == PUBLIC | STATIC | NATIVE, .name == "eglInitialize", .descriptor == "(Landroid/opengl/EGLDisplay;[II[II)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/EGL14\0", "eglInitialize\0", "(Landroid/opengl/EGLDisplay;[II[II)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [eglTerminate](https://developer.android.com/reference/android/opengl/EGL14.html#eglTerminate(android.opengl.EGLDisplay))
        ///
        /// Required features: "android-opengl-EGLDisplay"
        #[cfg(any(feature = "all", all(feature = "android-opengl-EGLDisplay")))]
        pub fn eglTerminate<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::opengl::EGLDisplay>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/EGL14", java.flags == PUBLIC | STATIC | NATIVE, .name == "eglTerminate", .descriptor == "(Landroid/opengl/EGLDisplay;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/EGL14\0", "eglTerminate\0", "(Landroid/opengl/EGLDisplay;)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [eglQueryString](https://developer.android.com/reference/android/opengl/EGL14.html#eglQueryString(android.opengl.EGLDisplay,%20int))
        ///
        /// Required features: "android-opengl-EGLDisplay", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-opengl-EGLDisplay", feature = "java-lang-String")))]
        pub fn eglQueryString<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::opengl::EGLDisplay>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/EGL14", java.flags == PUBLIC | STATIC | NATIVE, .name == "eglQueryString", .descriptor == "(Landroid/opengl/EGLDisplay;I)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/EGL14\0", "eglQueryString\0", "(Landroid/opengl/EGLDisplay;I)Ljava/lang/String;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [eglGetConfigs](https://developer.android.com/reference/android/opengl/EGL14.html#eglGetConfigs(android.opengl.EGLDisplay,%20android.opengl.EGLConfig%5B%5D,%20int,%20int,%20int%5B%5D,%20int))
        ///
        /// Required features: "android-opengl-EGLConfig", "android-opengl-EGLDisplay"
        #[cfg(any(feature = "all", all(feature = "android-opengl-EGLConfig", feature = "android-opengl-EGLDisplay")))]
        pub fn eglGetConfigs<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::opengl::EGLDisplay>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::android::opengl::EGLConfig, crate::java::lang::Throwable>>>, arg2: i32, arg3: i32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg5: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/EGL14", java.flags == PUBLIC | STATIC | NATIVE, .name == "eglGetConfigs", .descriptor == "(Landroid/opengl/EGLDisplay;[Landroid/opengl/EGLConfig;II[II)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/EGL14\0", "eglGetConfigs\0", "(Landroid/opengl/EGLDisplay;[Landroid/opengl/EGLConfig;II[II)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [eglChooseConfig](https://developer.android.com/reference/android/opengl/EGL14.html#eglChooseConfig(android.opengl.EGLDisplay,%20int%5B%5D,%20int,%20android.opengl.EGLConfig%5B%5D,%20int,%20int,%20int%5B%5D,%20int))
        ///
        /// Required features: "android-opengl-EGLConfig", "android-opengl-EGLDisplay"
        #[cfg(any(feature = "all", all(feature = "android-opengl-EGLConfig", feature = "android-opengl-EGLDisplay")))]
        pub fn eglChooseConfig<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::opengl::EGLDisplay>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::android::opengl::EGLConfig, crate::java::lang::Throwable>>>, arg4: i32, arg5: i32, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg7: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/EGL14", java.flags == PUBLIC | STATIC | NATIVE, .name == "eglChooseConfig", .descriptor == "(Landroid/opengl/EGLDisplay;[II[Landroid/opengl/EGLConfig;II[II)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6.into()), __jni_bindgen::AsJValue::as_jvalue(&arg7)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/EGL14\0", "eglChooseConfig\0", "(Landroid/opengl/EGLDisplay;[II[Landroid/opengl/EGLConfig;II[II)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [eglGetConfigAttrib](https://developer.android.com/reference/android/opengl/EGL14.html#eglGetConfigAttrib(android.opengl.EGLDisplay,%20android.opengl.EGLConfig,%20int,%20int%5B%5D,%20int))
        ///
        /// Required features: "android-opengl-EGLConfig", "android-opengl-EGLDisplay"
        #[cfg(any(feature = "all", all(feature = "android-opengl-EGLConfig", feature = "android-opengl-EGLDisplay")))]
        pub fn eglGetConfigAttrib<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::opengl::EGLDisplay>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::opengl::EGLConfig>>, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg4: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/EGL14", java.flags == PUBLIC | STATIC | NATIVE, .name == "eglGetConfigAttrib", .descriptor == "(Landroid/opengl/EGLDisplay;Landroid/opengl/EGLConfig;I[II)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/EGL14\0", "eglGetConfigAttrib\0", "(Landroid/opengl/EGLDisplay;Landroid/opengl/EGLConfig;I[II)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [eglCreateWindowSurface](https://developer.android.com/reference/android/opengl/EGL14.html#eglCreateWindowSurface(android.opengl.EGLDisplay,%20android.opengl.EGLConfig,%20java.lang.Object,%20int%5B%5D,%20int))
        ///
        /// Required features: "android-opengl-EGLConfig", "android-opengl-EGLDisplay", "android-opengl-EGLSurface", "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "android-opengl-EGLConfig", feature = "android-opengl-EGLDisplay", feature = "android-opengl-EGLSurface", feature = "java-lang-Object")))]
        pub fn eglCreateWindowSurface<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::opengl::EGLDisplay>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::opengl::EGLConfig>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg4: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::opengl::EGLSurface>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/EGL14", java.flags == PUBLIC | STATIC, .name == "eglCreateWindowSurface", .descriptor == "(Landroid/opengl/EGLDisplay;Landroid/opengl/EGLConfig;Ljava/lang/Object;[II)Landroid/opengl/EGLSurface;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/EGL14\0", "eglCreateWindowSurface\0", "(Landroid/opengl/EGLDisplay;Landroid/opengl/EGLConfig;Ljava/lang/Object;[II)Landroid/opengl/EGLSurface;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [eglCreatePbufferSurface](https://developer.android.com/reference/android/opengl/EGL14.html#eglCreatePbufferSurface(android.opengl.EGLDisplay,%20android.opengl.EGLConfig,%20int%5B%5D,%20int))
        ///
        /// Required features: "android-opengl-EGLConfig", "android-opengl-EGLDisplay", "android-opengl-EGLSurface"
        #[cfg(any(feature = "all", all(feature = "android-opengl-EGLConfig", feature = "android-opengl-EGLDisplay", feature = "android-opengl-EGLSurface")))]
        pub fn eglCreatePbufferSurface<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::opengl::EGLDisplay>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::opengl::EGLConfig>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg3: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::opengl::EGLSurface>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/EGL14", java.flags == PUBLIC | STATIC | NATIVE, .name == "eglCreatePbufferSurface", .descriptor == "(Landroid/opengl/EGLDisplay;Landroid/opengl/EGLConfig;[II)Landroid/opengl/EGLSurface;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/EGL14\0", "eglCreatePbufferSurface\0", "(Landroid/opengl/EGLDisplay;Landroid/opengl/EGLConfig;[II)Landroid/opengl/EGLSurface;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [eglCreatePixmapSurface](https://developer.android.com/reference/android/opengl/EGL14.html#eglCreatePixmapSurface(android.opengl.EGLDisplay,%20android.opengl.EGLConfig,%20int,%20int%5B%5D,%20int))
        ///
        /// Required features: "android-opengl-EGLConfig", "android-opengl-EGLDisplay", "android-opengl-EGLSurface"
        #[cfg(any(feature = "all", all(feature = "android-opengl-EGLConfig", feature = "android-opengl-EGLDisplay", feature = "android-opengl-EGLSurface")))]
        #[deprecated] pub fn eglCreatePixmapSurface<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::opengl::EGLDisplay>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::opengl::EGLConfig>>, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg4: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::opengl::EGLSurface>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/EGL14", java.flags == PUBLIC | STATIC | NATIVE, .name == "eglCreatePixmapSurface", .descriptor == "(Landroid/opengl/EGLDisplay;Landroid/opengl/EGLConfig;I[II)Landroid/opengl/EGLSurface;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/EGL14\0", "eglCreatePixmapSurface\0", "(Landroid/opengl/EGLDisplay;Landroid/opengl/EGLConfig;I[II)Landroid/opengl/EGLSurface;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [eglDestroySurface](https://developer.android.com/reference/android/opengl/EGL14.html#eglDestroySurface(android.opengl.EGLDisplay,%20android.opengl.EGLSurface))
        ///
        /// Required features: "android-opengl-EGLDisplay", "android-opengl-EGLSurface"
        #[cfg(any(feature = "all", all(feature = "android-opengl-EGLDisplay", feature = "android-opengl-EGLSurface")))]
        pub fn eglDestroySurface<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::opengl::EGLDisplay>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::opengl::EGLSurface>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/EGL14", java.flags == PUBLIC | STATIC | NATIVE, .name == "eglDestroySurface", .descriptor == "(Landroid/opengl/EGLDisplay;Landroid/opengl/EGLSurface;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/EGL14\0", "eglDestroySurface\0", "(Landroid/opengl/EGLDisplay;Landroid/opengl/EGLSurface;)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [eglQuerySurface](https://developer.android.com/reference/android/opengl/EGL14.html#eglQuerySurface(android.opengl.EGLDisplay,%20android.opengl.EGLSurface,%20int,%20int%5B%5D,%20int))
        ///
        /// Required features: "android-opengl-EGLDisplay", "android-opengl-EGLSurface"
        #[cfg(any(feature = "all", all(feature = "android-opengl-EGLDisplay", feature = "android-opengl-EGLSurface")))]
        pub fn eglQuerySurface<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::opengl::EGLDisplay>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::opengl::EGLSurface>>, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg4: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/EGL14", java.flags == PUBLIC | STATIC | NATIVE, .name == "eglQuerySurface", .descriptor == "(Landroid/opengl/EGLDisplay;Landroid/opengl/EGLSurface;I[II)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/EGL14\0", "eglQuerySurface\0", "(Landroid/opengl/EGLDisplay;Landroid/opengl/EGLSurface;I[II)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [eglBindAPI](https://developer.android.com/reference/android/opengl/EGL14.html#eglBindAPI(int))
        pub fn eglBindAPI<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/EGL14", java.flags == PUBLIC | STATIC | NATIVE, .name == "eglBindAPI", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/EGL14\0", "eglBindAPI\0", "(I)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [eglQueryAPI](https://developer.android.com/reference/android/opengl/EGL14.html#eglQueryAPI())
        pub fn eglQueryAPI<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/EGL14", java.flags == PUBLIC | STATIC | NATIVE, .name == "eglQueryAPI", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/EGL14\0", "eglQueryAPI\0", "()I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [eglWaitClient](https://developer.android.com/reference/android/opengl/EGL14.html#eglWaitClient())
        pub fn eglWaitClient<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/EGL14", java.flags == PUBLIC | STATIC | NATIVE, .name == "eglWaitClient", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/EGL14\0", "eglWaitClient\0", "()Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [eglReleaseThread](https://developer.android.com/reference/android/opengl/EGL14.html#eglReleaseThread())
        pub fn eglReleaseThread<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/EGL14", java.flags == PUBLIC | STATIC | NATIVE, .name == "eglReleaseThread", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/EGL14\0", "eglReleaseThread\0", "()Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [eglCreatePbufferFromClientBuffer](https://developer.android.com/reference/android/opengl/EGL14.html#eglCreatePbufferFromClientBuffer(android.opengl.EGLDisplay,%20int,%20int,%20android.opengl.EGLConfig,%20int%5B%5D,%20int))
        ///
        /// Required features: "android-opengl-EGLConfig", "android-opengl-EGLDisplay", "android-opengl-EGLSurface"
        #[cfg(any(feature = "all", all(feature = "android-opengl-EGLConfig", feature = "android-opengl-EGLDisplay", feature = "android-opengl-EGLSurface")))]
        pub fn eglCreatePbufferFromClientBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::opengl::EGLDisplay>>, arg1: i32, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::opengl::EGLConfig>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg5: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::opengl::EGLSurface>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/EGL14", java.flags == PUBLIC | STATIC | NATIVE, .name == "eglCreatePbufferFromClientBuffer", .descriptor == "(Landroid/opengl/EGLDisplay;IILandroid/opengl/EGLConfig;[II)Landroid/opengl/EGLSurface;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/EGL14\0", "eglCreatePbufferFromClientBuffer\0", "(Landroid/opengl/EGLDisplay;IILandroid/opengl/EGLConfig;[II)Landroid/opengl/EGLSurface;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [eglSurfaceAttrib](https://developer.android.com/reference/android/opengl/EGL14.html#eglSurfaceAttrib(android.opengl.EGLDisplay,%20android.opengl.EGLSurface,%20int,%20int))
        ///
        /// Required features: "android-opengl-EGLDisplay", "android-opengl-EGLSurface"
        #[cfg(any(feature = "all", all(feature = "android-opengl-EGLDisplay", feature = "android-opengl-EGLSurface")))]
        pub fn eglSurfaceAttrib<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::opengl::EGLDisplay>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::opengl::EGLSurface>>, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/EGL14", java.flags == PUBLIC | STATIC | NATIVE, .name == "eglSurfaceAttrib", .descriptor == "(Landroid/opengl/EGLDisplay;Landroid/opengl/EGLSurface;II)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/EGL14\0", "eglSurfaceAttrib\0", "(Landroid/opengl/EGLDisplay;Landroid/opengl/EGLSurface;II)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [eglBindTexImage](https://developer.android.com/reference/android/opengl/EGL14.html#eglBindTexImage(android.opengl.EGLDisplay,%20android.opengl.EGLSurface,%20int))
        ///
        /// Required features: "android-opengl-EGLDisplay", "android-opengl-EGLSurface"
        #[cfg(any(feature = "all", all(feature = "android-opengl-EGLDisplay", feature = "android-opengl-EGLSurface")))]
        pub fn eglBindTexImage<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::opengl::EGLDisplay>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::opengl::EGLSurface>>, arg2: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/EGL14", java.flags == PUBLIC | STATIC | NATIVE, .name == "eglBindTexImage", .descriptor == "(Landroid/opengl/EGLDisplay;Landroid/opengl/EGLSurface;I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/EGL14\0", "eglBindTexImage\0", "(Landroid/opengl/EGLDisplay;Landroid/opengl/EGLSurface;I)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [eglReleaseTexImage](https://developer.android.com/reference/android/opengl/EGL14.html#eglReleaseTexImage(android.opengl.EGLDisplay,%20android.opengl.EGLSurface,%20int))
        ///
        /// Required features: "android-opengl-EGLDisplay", "android-opengl-EGLSurface"
        #[cfg(any(feature = "all", all(feature = "android-opengl-EGLDisplay", feature = "android-opengl-EGLSurface")))]
        pub fn eglReleaseTexImage<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::opengl::EGLDisplay>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::opengl::EGLSurface>>, arg2: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/EGL14", java.flags == PUBLIC | STATIC | NATIVE, .name == "eglReleaseTexImage", .descriptor == "(Landroid/opengl/EGLDisplay;Landroid/opengl/EGLSurface;I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/EGL14\0", "eglReleaseTexImage\0", "(Landroid/opengl/EGLDisplay;Landroid/opengl/EGLSurface;I)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [eglSwapInterval](https://developer.android.com/reference/android/opengl/EGL14.html#eglSwapInterval(android.opengl.EGLDisplay,%20int))
        ///
        /// Required features: "android-opengl-EGLDisplay"
        #[cfg(any(feature = "all", all(feature = "android-opengl-EGLDisplay")))]
        pub fn eglSwapInterval<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::opengl::EGLDisplay>>, arg1: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/EGL14", java.flags == PUBLIC | STATIC | NATIVE, .name == "eglSwapInterval", .descriptor == "(Landroid/opengl/EGLDisplay;I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/EGL14\0", "eglSwapInterval\0", "(Landroid/opengl/EGLDisplay;I)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [eglCreateContext](https://developer.android.com/reference/android/opengl/EGL14.html#eglCreateContext(android.opengl.EGLDisplay,%20android.opengl.EGLConfig,%20android.opengl.EGLContext,%20int%5B%5D,%20int))
        ///
        /// Required features: "android-opengl-EGLConfig", "android-opengl-EGLContext", "android-opengl-EGLDisplay"
        #[cfg(any(feature = "all", all(feature = "android-opengl-EGLConfig", feature = "android-opengl-EGLContext", feature = "android-opengl-EGLDisplay")))]
        pub fn eglCreateContext<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::opengl::EGLDisplay>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::opengl::EGLConfig>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::opengl::EGLContext>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg4: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::opengl::EGLContext>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/EGL14", java.flags == PUBLIC | STATIC | NATIVE, .name == "eglCreateContext", .descriptor == "(Landroid/opengl/EGLDisplay;Landroid/opengl/EGLConfig;Landroid/opengl/EGLContext;[II)Landroid/opengl/EGLContext;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/EGL14\0", "eglCreateContext\0", "(Landroid/opengl/EGLDisplay;Landroid/opengl/EGLConfig;Landroid/opengl/EGLContext;[II)Landroid/opengl/EGLContext;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [eglDestroyContext](https://developer.android.com/reference/android/opengl/EGL14.html#eglDestroyContext(android.opengl.EGLDisplay,%20android.opengl.EGLContext))
        ///
        /// Required features: "android-opengl-EGLContext", "android-opengl-EGLDisplay"
        #[cfg(any(feature = "all", all(feature = "android-opengl-EGLContext", feature = "android-opengl-EGLDisplay")))]
        pub fn eglDestroyContext<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::opengl::EGLDisplay>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::opengl::EGLContext>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/EGL14", java.flags == PUBLIC | STATIC | NATIVE, .name == "eglDestroyContext", .descriptor == "(Landroid/opengl/EGLDisplay;Landroid/opengl/EGLContext;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/EGL14\0", "eglDestroyContext\0", "(Landroid/opengl/EGLDisplay;Landroid/opengl/EGLContext;)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [eglMakeCurrent](https://developer.android.com/reference/android/opengl/EGL14.html#eglMakeCurrent(android.opengl.EGLDisplay,%20android.opengl.EGLSurface,%20android.opengl.EGLSurface,%20android.opengl.EGLContext))
        ///
        /// Required features: "android-opengl-EGLContext", "android-opengl-EGLDisplay", "android-opengl-EGLSurface"
        #[cfg(any(feature = "all", all(feature = "android-opengl-EGLContext", feature = "android-opengl-EGLDisplay", feature = "android-opengl-EGLSurface")))]
        pub fn eglMakeCurrent<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::opengl::EGLDisplay>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::opengl::EGLSurface>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::opengl::EGLSurface>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::opengl::EGLContext>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/EGL14", java.flags == PUBLIC | STATIC | NATIVE, .name == "eglMakeCurrent", .descriptor == "(Landroid/opengl/EGLDisplay;Landroid/opengl/EGLSurface;Landroid/opengl/EGLSurface;Landroid/opengl/EGLContext;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/EGL14\0", "eglMakeCurrent\0", "(Landroid/opengl/EGLDisplay;Landroid/opengl/EGLSurface;Landroid/opengl/EGLSurface;Landroid/opengl/EGLContext;)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [eglGetCurrentContext](https://developer.android.com/reference/android/opengl/EGL14.html#eglGetCurrentContext())
        ///
        /// Required features: "android-opengl-EGLContext"
        #[cfg(any(feature = "all", all(feature = "android-opengl-EGLContext")))]
        pub fn eglGetCurrentContext<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::opengl::EGLContext>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/EGL14", java.flags == PUBLIC | STATIC | NATIVE, .name == "eglGetCurrentContext", .descriptor == "()Landroid/opengl/EGLContext;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/EGL14\0", "eglGetCurrentContext\0", "()Landroid/opengl/EGLContext;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [eglGetCurrentSurface](https://developer.android.com/reference/android/opengl/EGL14.html#eglGetCurrentSurface(int))
        ///
        /// Required features: "android-opengl-EGLSurface"
        #[cfg(any(feature = "all", all(feature = "android-opengl-EGLSurface")))]
        pub fn eglGetCurrentSurface<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::opengl::EGLSurface>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/EGL14", java.flags == PUBLIC | STATIC | NATIVE, .name == "eglGetCurrentSurface", .descriptor == "(I)Landroid/opengl/EGLSurface;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/EGL14\0", "eglGetCurrentSurface\0", "(I)Landroid/opengl/EGLSurface;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [eglGetCurrentDisplay](https://developer.android.com/reference/android/opengl/EGL14.html#eglGetCurrentDisplay())
        ///
        /// Required features: "android-opengl-EGLDisplay"
        #[cfg(any(feature = "all", all(feature = "android-opengl-EGLDisplay")))]
        pub fn eglGetCurrentDisplay<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::opengl::EGLDisplay>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/EGL14", java.flags == PUBLIC | STATIC | NATIVE, .name == "eglGetCurrentDisplay", .descriptor == "()Landroid/opengl/EGLDisplay;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/EGL14\0", "eglGetCurrentDisplay\0", "()Landroid/opengl/EGLDisplay;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [eglQueryContext](https://developer.android.com/reference/android/opengl/EGL14.html#eglQueryContext(android.opengl.EGLDisplay,%20android.opengl.EGLContext,%20int,%20int%5B%5D,%20int))
        ///
        /// Required features: "android-opengl-EGLContext", "android-opengl-EGLDisplay"
        #[cfg(any(feature = "all", all(feature = "android-opengl-EGLContext", feature = "android-opengl-EGLDisplay")))]
        pub fn eglQueryContext<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::opengl::EGLDisplay>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::opengl::EGLContext>>, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg4: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/EGL14", java.flags == PUBLIC | STATIC | NATIVE, .name == "eglQueryContext", .descriptor == "(Landroid/opengl/EGLDisplay;Landroid/opengl/EGLContext;I[II)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/EGL14\0", "eglQueryContext\0", "(Landroid/opengl/EGLDisplay;Landroid/opengl/EGLContext;I[II)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [eglWaitGL](https://developer.android.com/reference/android/opengl/EGL14.html#eglWaitGL())
        pub fn eglWaitGL<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/EGL14", java.flags == PUBLIC | STATIC | NATIVE, .name == "eglWaitGL", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/EGL14\0", "eglWaitGL\0", "()Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [eglWaitNative](https://developer.android.com/reference/android/opengl/EGL14.html#eglWaitNative(int))
        pub fn eglWaitNative<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/EGL14", java.flags == PUBLIC | STATIC | NATIVE, .name == "eglWaitNative", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/EGL14\0", "eglWaitNative\0", "(I)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [eglSwapBuffers](https://developer.android.com/reference/android/opengl/EGL14.html#eglSwapBuffers(android.opengl.EGLDisplay,%20android.opengl.EGLSurface))
        ///
        /// Required features: "android-opengl-EGLDisplay", "android-opengl-EGLSurface"
        #[cfg(any(feature = "all", all(feature = "android-opengl-EGLDisplay", feature = "android-opengl-EGLSurface")))]
        pub fn eglSwapBuffers<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::opengl::EGLDisplay>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::opengl::EGLSurface>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/EGL14", java.flags == PUBLIC | STATIC | NATIVE, .name == "eglSwapBuffers", .descriptor == "(Landroid/opengl/EGLDisplay;Landroid/opengl/EGLSurface;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/EGL14\0", "eglSwapBuffers\0", "(Landroid/opengl/EGLDisplay;Landroid/opengl/EGLSurface;)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [eglCopyBuffers](https://developer.android.com/reference/android/opengl/EGL14.html#eglCopyBuffers(android.opengl.EGLDisplay,%20android.opengl.EGLSurface,%20int))
        ///
        /// Required features: "android-opengl-EGLDisplay", "android-opengl-EGLSurface"
        #[cfg(any(feature = "all", all(feature = "android-opengl-EGLDisplay", feature = "android-opengl-EGLSurface")))]
        pub fn eglCopyBuffers<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::opengl::EGLDisplay>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::opengl::EGLSurface>>, arg2: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/EGL14", java.flags == PUBLIC | STATIC | NATIVE, .name == "eglCopyBuffers", .descriptor == "(Landroid/opengl/EGLDisplay;Landroid/opengl/EGLSurface;I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/EGL14\0", "eglCopyBuffers\0", "(Landroid/opengl/EGLDisplay;Landroid/opengl/EGLSurface;I)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [EGL_ALPHA_MASK_SIZE](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_ALPHA_MASK_SIZE)
        pub const EGL_ALPHA_MASK_SIZE : i32 = 12350;

        /// public static final [EGL_ALPHA_SIZE](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_ALPHA_SIZE)
        pub const EGL_ALPHA_SIZE : i32 = 12321;

        /// public static final [EGL_BACK_BUFFER](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_BACK_BUFFER)
        pub const EGL_BACK_BUFFER : i32 = 12420;

        /// public static final [EGL_BAD_ACCESS](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_BAD_ACCESS)
        pub const EGL_BAD_ACCESS : i32 = 12290;

        /// public static final [EGL_BAD_ALLOC](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_BAD_ALLOC)
        pub const EGL_BAD_ALLOC : i32 = 12291;

        /// public static final [EGL_BAD_ATTRIBUTE](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_BAD_ATTRIBUTE)
        pub const EGL_BAD_ATTRIBUTE : i32 = 12292;

        /// public static final [EGL_BAD_CONFIG](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_BAD_CONFIG)
        pub const EGL_BAD_CONFIG : i32 = 12293;

        /// public static final [EGL_BAD_CONTEXT](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_BAD_CONTEXT)
        pub const EGL_BAD_CONTEXT : i32 = 12294;

        /// public static final [EGL_BAD_CURRENT_SURFACE](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_BAD_CURRENT_SURFACE)
        pub const EGL_BAD_CURRENT_SURFACE : i32 = 12295;

        /// public static final [EGL_BAD_DISPLAY](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_BAD_DISPLAY)
        pub const EGL_BAD_DISPLAY : i32 = 12296;

        /// public static final [EGL_BAD_MATCH](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_BAD_MATCH)
        pub const EGL_BAD_MATCH : i32 = 12297;

        /// public static final [EGL_BAD_NATIVE_PIXMAP](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_BAD_NATIVE_PIXMAP)
        pub const EGL_BAD_NATIVE_PIXMAP : i32 = 12298;

        /// public static final [EGL_BAD_NATIVE_WINDOW](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_BAD_NATIVE_WINDOW)
        pub const EGL_BAD_NATIVE_WINDOW : i32 = 12299;

        /// public static final [EGL_BAD_PARAMETER](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_BAD_PARAMETER)
        pub const EGL_BAD_PARAMETER : i32 = 12300;

        /// public static final [EGL_BAD_SURFACE](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_BAD_SURFACE)
        pub const EGL_BAD_SURFACE : i32 = 12301;

        /// public static final [EGL_BIND_TO_TEXTURE_RGB](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_BIND_TO_TEXTURE_RGB)
        pub const EGL_BIND_TO_TEXTURE_RGB : i32 = 12345;

        /// public static final [EGL_BIND_TO_TEXTURE_RGBA](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_BIND_TO_TEXTURE_RGBA)
        pub const EGL_BIND_TO_TEXTURE_RGBA : i32 = 12346;

        /// public static final [EGL_BLUE_SIZE](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_BLUE_SIZE)
        pub const EGL_BLUE_SIZE : i32 = 12322;

        /// public static final [EGL_BUFFER_DESTROYED](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_BUFFER_DESTROYED)
        pub const EGL_BUFFER_DESTROYED : i32 = 12437;

        /// public static final [EGL_BUFFER_PRESERVED](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_BUFFER_PRESERVED)
        pub const EGL_BUFFER_PRESERVED : i32 = 12436;

        /// public static final [EGL_BUFFER_SIZE](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_BUFFER_SIZE)
        pub const EGL_BUFFER_SIZE : i32 = 12320;

        /// public static final [EGL_CLIENT_APIS](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_CLIENT_APIS)
        pub const EGL_CLIENT_APIS : i32 = 12429;

        /// public static final [EGL_COLOR_BUFFER_TYPE](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_COLOR_BUFFER_TYPE)
        pub const EGL_COLOR_BUFFER_TYPE : i32 = 12351;

        /// public static final [EGL_CONFIG_CAVEAT](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_CONFIG_CAVEAT)
        pub const EGL_CONFIG_CAVEAT : i32 = 12327;

        /// public static final [EGL_CONFIG_ID](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_CONFIG_ID)
        pub const EGL_CONFIG_ID : i32 = 12328;

        /// public static final [EGL_CONFORMANT](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_CONFORMANT)
        pub const EGL_CONFORMANT : i32 = 12354;

        /// public static final [EGL_CONTEXT_CLIENT_TYPE](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_CONTEXT_CLIENT_TYPE)
        pub const EGL_CONTEXT_CLIENT_TYPE : i32 = 12439;

        /// public static final [EGL_CONTEXT_CLIENT_VERSION](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_CONTEXT_CLIENT_VERSION)
        pub const EGL_CONTEXT_CLIENT_VERSION : i32 = 12440;

        /// public static final [EGL_CONTEXT_LOST](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_CONTEXT_LOST)
        pub const EGL_CONTEXT_LOST : i32 = 12302;

        /// public static final [EGL_CORE_NATIVE_ENGINE](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_CORE_NATIVE_ENGINE)
        pub const EGL_CORE_NATIVE_ENGINE : i32 = 12379;

        /// public static final [EGL_DEFAULT_DISPLAY](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_DEFAULT_DISPLAY)
        pub const EGL_DEFAULT_DISPLAY : i32 = 0;

        /// public static final [EGL_DEPTH_SIZE](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_DEPTH_SIZE)
        pub const EGL_DEPTH_SIZE : i32 = 12325;

        /// public static final [EGL_DISPLAY_SCALING](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_DISPLAY_SCALING)
        pub const EGL_DISPLAY_SCALING : i32 = 10000;

        /// public static final [EGL_DRAW](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_DRAW)
        pub const EGL_DRAW : i32 = 12377;

        /// public static final [EGL_EXTENSIONS](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_EXTENSIONS)
        pub const EGL_EXTENSIONS : i32 = 12373;

        /// public static final [EGL_FALSE](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_FALSE)
        pub const EGL_FALSE : i32 = 0;

        /// public static final [EGL_GREEN_SIZE](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_GREEN_SIZE)
        pub const EGL_GREEN_SIZE : i32 = 12323;

        /// public static final [EGL_HEIGHT](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_HEIGHT)
        pub const EGL_HEIGHT : i32 = 12374;

        /// public static final [EGL_HORIZONTAL_RESOLUTION](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_HORIZONTAL_RESOLUTION)
        pub const EGL_HORIZONTAL_RESOLUTION : i32 = 12432;

        /// public static final [EGL_LARGEST_PBUFFER](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_LARGEST_PBUFFER)
        pub const EGL_LARGEST_PBUFFER : i32 = 12376;

        /// public static final [EGL_LEVEL](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_LEVEL)
        pub const EGL_LEVEL : i32 = 12329;

        /// public static final [EGL_LUMINANCE_BUFFER](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_LUMINANCE_BUFFER)
        pub const EGL_LUMINANCE_BUFFER : i32 = 12431;

        /// public static final [EGL_LUMINANCE_SIZE](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_LUMINANCE_SIZE)
        pub const EGL_LUMINANCE_SIZE : i32 = 12349;

        /// public static final [EGL_MATCH_NATIVE_PIXMAP](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_MATCH_NATIVE_PIXMAP)
        pub const EGL_MATCH_NATIVE_PIXMAP : i32 = 12353;

        /// public static final [EGL_MAX_PBUFFER_HEIGHT](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_MAX_PBUFFER_HEIGHT)
        pub const EGL_MAX_PBUFFER_HEIGHT : i32 = 12330;

        /// public static final [EGL_MAX_PBUFFER_PIXELS](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_MAX_PBUFFER_PIXELS)
        pub const EGL_MAX_PBUFFER_PIXELS : i32 = 12331;

        /// public static final [EGL_MAX_PBUFFER_WIDTH](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_MAX_PBUFFER_WIDTH)
        pub const EGL_MAX_PBUFFER_WIDTH : i32 = 12332;

        /// public static final [EGL_MAX_SWAP_INTERVAL](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_MAX_SWAP_INTERVAL)
        pub const EGL_MAX_SWAP_INTERVAL : i32 = 12348;

        /// public static final [EGL_MIN_SWAP_INTERVAL](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_MIN_SWAP_INTERVAL)
        pub const EGL_MIN_SWAP_INTERVAL : i32 = 12347;

        /// public static final [EGL_MIPMAP_LEVEL](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_MIPMAP_LEVEL)
        pub const EGL_MIPMAP_LEVEL : i32 = 12419;

        /// public static final [EGL_MIPMAP_TEXTURE](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_MIPMAP_TEXTURE)
        pub const EGL_MIPMAP_TEXTURE : i32 = 12418;

        /// public static final [EGL_MULTISAMPLE_RESOLVE](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_MULTISAMPLE_RESOLVE)
        pub const EGL_MULTISAMPLE_RESOLVE : i32 = 12441;

        /// public static final [EGL_MULTISAMPLE_RESOLVE_BOX](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_MULTISAMPLE_RESOLVE_BOX)
        pub const EGL_MULTISAMPLE_RESOLVE_BOX : i32 = 12443;

        /// public static final [EGL_MULTISAMPLE_RESOLVE_BOX_BIT](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_MULTISAMPLE_RESOLVE_BOX_BIT)
        pub const EGL_MULTISAMPLE_RESOLVE_BOX_BIT : i32 = 512;

        /// public static final [EGL_MULTISAMPLE_RESOLVE_DEFAULT](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_MULTISAMPLE_RESOLVE_DEFAULT)
        pub const EGL_MULTISAMPLE_RESOLVE_DEFAULT : i32 = 12442;

        /// public static final [EGL_NATIVE_RENDERABLE](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_NATIVE_RENDERABLE)
        pub const EGL_NATIVE_RENDERABLE : i32 = 12333;

        /// public static final [EGL_NATIVE_VISUAL_ID](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_NATIVE_VISUAL_ID)
        pub const EGL_NATIVE_VISUAL_ID : i32 = 12334;

        /// public static final [EGL_NATIVE_VISUAL_TYPE](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_NATIVE_VISUAL_TYPE)
        pub const EGL_NATIVE_VISUAL_TYPE : i32 = 12335;

        /// public static final [EGL_NONE](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_NONE)
        pub const EGL_NONE : i32 = 12344;

        /// public static final [EGL_NON_CONFORMANT_CONFIG](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_NON_CONFORMANT_CONFIG)
        pub const EGL_NON_CONFORMANT_CONFIG : i32 = 12369;

        /// public static final [EGL_NOT_INITIALIZED](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_NOT_INITIALIZED)
        pub const EGL_NOT_INITIALIZED : i32 = 12289;

        /// **get** public static [EGL_NO_CONTEXT](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_NO_CONTEXT)
        ///
        /// Required feature: android-opengl-EGLContext
        #[cfg(any(feature = "all", feature = "android-opengl-EGLContext"))]
        pub fn EGL_NO_CONTEXT<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::opengl::EGLContext>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/opengl/EGL14\0", "EGL_NO_CONTEXT\0", "Landroid/opengl/EGLContext;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **set** public static [EGL_NO_CONTEXT](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_NO_CONTEXT)
        ///
        /// Required feature: android-opengl-EGLContext
        #[cfg(any(feature = "all", feature = "android-opengl-EGLContext"))]
        pub fn set_EGL_NO_CONTEXT<'env, 'obj>(env: &'env __jni_bindgen::Env, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::android::opengl::EGLContext>>) {
            unsafe {
                let (class, field) = env.require_class_static_field("android/opengl/EGL14\0", "EGL_NO_CONTEXT\0", "Landroid/opengl/EGLContext;\0");
                env.set_static_object_field(class, field, value)
            }
        }

        /// **get** public static [EGL_NO_DISPLAY](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_NO_DISPLAY)
        ///
        /// Required feature: android-opengl-EGLDisplay
        #[cfg(any(feature = "all", feature = "android-opengl-EGLDisplay"))]
        pub fn EGL_NO_DISPLAY<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::opengl::EGLDisplay>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/opengl/EGL14\0", "EGL_NO_DISPLAY\0", "Landroid/opengl/EGLDisplay;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **set** public static [EGL_NO_DISPLAY](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_NO_DISPLAY)
        ///
        /// Required feature: android-opengl-EGLDisplay
        #[cfg(any(feature = "all", feature = "android-opengl-EGLDisplay"))]
        pub fn set_EGL_NO_DISPLAY<'env, 'obj>(env: &'env __jni_bindgen::Env, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::android::opengl::EGLDisplay>>) {
            unsafe {
                let (class, field) = env.require_class_static_field("android/opengl/EGL14\0", "EGL_NO_DISPLAY\0", "Landroid/opengl/EGLDisplay;\0");
                env.set_static_object_field(class, field, value)
            }
        }

        /// **get** public static [EGL_NO_SURFACE](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_NO_SURFACE)
        ///
        /// Required feature: android-opengl-EGLSurface
        #[cfg(any(feature = "all", feature = "android-opengl-EGLSurface"))]
        pub fn EGL_NO_SURFACE<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::opengl::EGLSurface>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/opengl/EGL14\0", "EGL_NO_SURFACE\0", "Landroid/opengl/EGLSurface;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **set** public static [EGL_NO_SURFACE](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_NO_SURFACE)
        ///
        /// Required feature: android-opengl-EGLSurface
        #[cfg(any(feature = "all", feature = "android-opengl-EGLSurface"))]
        pub fn set_EGL_NO_SURFACE<'env, 'obj>(env: &'env __jni_bindgen::Env, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::android::opengl::EGLSurface>>) {
            unsafe {
                let (class, field) = env.require_class_static_field("android/opengl/EGL14\0", "EGL_NO_SURFACE\0", "Landroid/opengl/EGLSurface;\0");
                env.set_static_object_field(class, field, value)
            }
        }

        /// public static final [EGL_NO_TEXTURE](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_NO_TEXTURE)
        pub const EGL_NO_TEXTURE : i32 = 12380;

        /// public static final [EGL_OPENGL_API](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_OPENGL_API)
        pub const EGL_OPENGL_API : i32 = 12450;

        /// public static final [EGL_OPENGL_BIT](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_OPENGL_BIT)
        pub const EGL_OPENGL_BIT : i32 = 8;

        /// public static final [EGL_OPENGL_ES2_BIT](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_OPENGL_ES2_BIT)
        pub const EGL_OPENGL_ES2_BIT : i32 = 4;

        /// public static final [EGL_OPENGL_ES_API](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_OPENGL_ES_API)
        pub const EGL_OPENGL_ES_API : i32 = 12448;

        /// public static final [EGL_OPENGL_ES_BIT](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_OPENGL_ES_BIT)
        pub const EGL_OPENGL_ES_BIT : i32 = 1;

        /// public static final [EGL_OPENVG_API](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_OPENVG_API)
        pub const EGL_OPENVG_API : i32 = 12449;

        /// public static final [EGL_OPENVG_BIT](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_OPENVG_BIT)
        pub const EGL_OPENVG_BIT : i32 = 2;

        /// public static final [EGL_OPENVG_IMAGE](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_OPENVG_IMAGE)
        pub const EGL_OPENVG_IMAGE : i32 = 12438;

        /// public static final [EGL_PBUFFER_BIT](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_PBUFFER_BIT)
        pub const EGL_PBUFFER_BIT : i32 = 1;

        /// public static final [EGL_PIXEL_ASPECT_RATIO](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_PIXEL_ASPECT_RATIO)
        pub const EGL_PIXEL_ASPECT_RATIO : i32 = 12434;

        /// public static final [EGL_PIXMAP_BIT](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_PIXMAP_BIT)
        pub const EGL_PIXMAP_BIT : i32 = 2;

        /// public static final [EGL_READ](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_READ)
        pub const EGL_READ : i32 = 12378;

        /// public static final [EGL_RED_SIZE](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_RED_SIZE)
        pub const EGL_RED_SIZE : i32 = 12324;

        /// public static final [EGL_RENDERABLE_TYPE](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_RENDERABLE_TYPE)
        pub const EGL_RENDERABLE_TYPE : i32 = 12352;

        /// public static final [EGL_RENDER_BUFFER](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_RENDER_BUFFER)
        pub const EGL_RENDER_BUFFER : i32 = 12422;

        /// public static final [EGL_RGB_BUFFER](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_RGB_BUFFER)
        pub const EGL_RGB_BUFFER : i32 = 12430;

        /// public static final [EGL_SAMPLES](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_SAMPLES)
        pub const EGL_SAMPLES : i32 = 12337;

        /// public static final [EGL_SAMPLE_BUFFERS](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_SAMPLE_BUFFERS)
        pub const EGL_SAMPLE_BUFFERS : i32 = 12338;

        /// public static final [EGL_SINGLE_BUFFER](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_SINGLE_BUFFER)
        pub const EGL_SINGLE_BUFFER : i32 = 12421;

        /// public static final [EGL_SLOW_CONFIG](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_SLOW_CONFIG)
        pub const EGL_SLOW_CONFIG : i32 = 12368;

        /// public static final [EGL_STENCIL_SIZE](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_STENCIL_SIZE)
        pub const EGL_STENCIL_SIZE : i32 = 12326;

        /// public static final [EGL_SUCCESS](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_SUCCESS)
        pub const EGL_SUCCESS : i32 = 12288;

        /// public static final [EGL_SURFACE_TYPE](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_SURFACE_TYPE)
        pub const EGL_SURFACE_TYPE : i32 = 12339;

        /// public static final [EGL_SWAP_BEHAVIOR](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_SWAP_BEHAVIOR)
        pub const EGL_SWAP_BEHAVIOR : i32 = 12435;

        /// public static final [EGL_SWAP_BEHAVIOR_PRESERVED_BIT](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_SWAP_BEHAVIOR_PRESERVED_BIT)
        pub const EGL_SWAP_BEHAVIOR_PRESERVED_BIT : i32 = 1024;

        /// public static final [EGL_TEXTURE_2D](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_TEXTURE_2D)
        pub const EGL_TEXTURE_2D : i32 = 12383;

        /// public static final [EGL_TEXTURE_FORMAT](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_TEXTURE_FORMAT)
        pub const EGL_TEXTURE_FORMAT : i32 = 12416;

        /// public static final [EGL_TEXTURE_RGB](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_TEXTURE_RGB)
        pub const EGL_TEXTURE_RGB : i32 = 12381;

        /// public static final [EGL_TEXTURE_RGBA](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_TEXTURE_RGBA)
        pub const EGL_TEXTURE_RGBA : i32 = 12382;

        /// public static final [EGL_TEXTURE_TARGET](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_TEXTURE_TARGET)
        pub const EGL_TEXTURE_TARGET : i32 = 12417;

        /// public static final [EGL_TRANSPARENT_BLUE_VALUE](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_TRANSPARENT_BLUE_VALUE)
        pub const EGL_TRANSPARENT_BLUE_VALUE : i32 = 12341;

        /// public static final [EGL_TRANSPARENT_GREEN_VALUE](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_TRANSPARENT_GREEN_VALUE)
        pub const EGL_TRANSPARENT_GREEN_VALUE : i32 = 12342;

        /// public static final [EGL_TRANSPARENT_RED_VALUE](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_TRANSPARENT_RED_VALUE)
        pub const EGL_TRANSPARENT_RED_VALUE : i32 = 12343;

        /// public static final [EGL_TRANSPARENT_RGB](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_TRANSPARENT_RGB)
        pub const EGL_TRANSPARENT_RGB : i32 = 12370;

        /// public static final [EGL_TRANSPARENT_TYPE](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_TRANSPARENT_TYPE)
        pub const EGL_TRANSPARENT_TYPE : i32 = 12340;

        /// public static final [EGL_TRUE](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_TRUE)
        pub const EGL_TRUE : i32 = 1;

        /// public static final [EGL_VENDOR](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_VENDOR)
        pub const EGL_VENDOR : i32 = 12371;

        /// public static final [EGL_VERSION](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_VERSION)
        pub const EGL_VERSION : i32 = 12372;

        /// public static final [EGL_VERTICAL_RESOLUTION](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_VERTICAL_RESOLUTION)
        pub const EGL_VERTICAL_RESOLUTION : i32 = 12433;

        /// public static final [EGL_VG_ALPHA_FORMAT](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_VG_ALPHA_FORMAT)
        pub const EGL_VG_ALPHA_FORMAT : i32 = 12424;

        /// public static final [EGL_VG_ALPHA_FORMAT_NONPRE](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_VG_ALPHA_FORMAT_NONPRE)
        pub const EGL_VG_ALPHA_FORMAT_NONPRE : i32 = 12427;

        /// public static final [EGL_VG_ALPHA_FORMAT_PRE](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_VG_ALPHA_FORMAT_PRE)
        pub const EGL_VG_ALPHA_FORMAT_PRE : i32 = 12428;

        /// public static final [EGL_VG_ALPHA_FORMAT_PRE_BIT](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_VG_ALPHA_FORMAT_PRE_BIT)
        pub const EGL_VG_ALPHA_FORMAT_PRE_BIT : i32 = 64;

        /// public static final [EGL_VG_COLORSPACE](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_VG_COLORSPACE)
        pub const EGL_VG_COLORSPACE : i32 = 12423;

        /// public static final [EGL_VG_COLORSPACE_LINEAR](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_VG_COLORSPACE_LINEAR)
        pub const EGL_VG_COLORSPACE_LINEAR : i32 = 12426;

        /// public static final [EGL_VG_COLORSPACE_LINEAR_BIT](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_VG_COLORSPACE_LINEAR_BIT)
        pub const EGL_VG_COLORSPACE_LINEAR_BIT : i32 = 32;

        /// public static final [EGL_VG_COLORSPACE_sRGB](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_VG_COLORSPACE_sRGB)
        pub const EGL_VG_COLORSPACE_sRGB : i32 = 12425;

        /// public static final [EGL_WIDTH](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_WIDTH)
        pub const EGL_WIDTH : i32 = 12375;

        /// public static final [EGL_WINDOW_BIT](https://developer.android.com/reference/android/opengl/EGL14.html#EGL_WINDOW_BIT)
        pub const EGL_WINDOW_BIT : i32 = 4;
    }
}
