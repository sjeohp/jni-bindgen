// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-opengl-GLES20"))]
__jni_bindgen! {
    /// public class [GLES20](https://developer.android.com/reference/android/opengl/GLES20.html)
    ///
    /// Required feature: android-opengl-GLES20
    public class GLES20 ("android/opengl/GLES20") extends crate::java::lang::Object {

        /// [GLES20](https://developer.android.com/reference/android/opengl/GLES20.html#GLES20())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::opengl::GLES20>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/opengl/GLES20\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glActiveTexture](https://developer.android.com/reference/android/opengl/GLES20.html#glActiveTexture(int))
        pub fn glActiveTexture<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glActiveTexture", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glActiveTexture\0", "(I)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glAttachShader](https://developer.android.com/reference/android/opengl/GLES20.html#glAttachShader(int,%20int))
        pub fn glAttachShader<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glAttachShader", .descriptor == "(II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glAttachShader\0", "(II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glBindAttribLocation](https://developer.android.com/reference/android/opengl/GLES20.html#glBindAttribLocation(int,%20int,%20java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn glBindAttribLocation<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glBindAttribLocation", .descriptor == "(IILjava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glBindAttribLocation\0", "(IILjava/lang/String;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glBindBuffer](https://developer.android.com/reference/android/opengl/GLES20.html#glBindBuffer(int,%20int))
        pub fn glBindBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glBindBuffer", .descriptor == "(II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glBindBuffer\0", "(II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glBindFramebuffer](https://developer.android.com/reference/android/opengl/GLES20.html#glBindFramebuffer(int,%20int))
        pub fn glBindFramebuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glBindFramebuffer", .descriptor == "(II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glBindFramebuffer\0", "(II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glBindRenderbuffer](https://developer.android.com/reference/android/opengl/GLES20.html#glBindRenderbuffer(int,%20int))
        pub fn glBindRenderbuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glBindRenderbuffer", .descriptor == "(II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glBindRenderbuffer\0", "(II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glBindTexture](https://developer.android.com/reference/android/opengl/GLES20.html#glBindTexture(int,%20int))
        pub fn glBindTexture<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glBindTexture", .descriptor == "(II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glBindTexture\0", "(II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glBlendColor](https://developer.android.com/reference/android/opengl/GLES20.html#glBlendColor(float,%20float,%20float,%20float))
        pub fn glBlendColor<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f32, arg1: f32, arg2: f32, arg3: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glBlendColor", .descriptor == "(FFFF)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glBlendColor\0", "(FFFF)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glBlendEquation](https://developer.android.com/reference/android/opengl/GLES20.html#glBlendEquation(int))
        pub fn glBlendEquation<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glBlendEquation", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glBlendEquation\0", "(I)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glBlendEquationSeparate](https://developer.android.com/reference/android/opengl/GLES20.html#glBlendEquationSeparate(int,%20int))
        pub fn glBlendEquationSeparate<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glBlendEquationSeparate", .descriptor == "(II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glBlendEquationSeparate\0", "(II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glBlendFunc](https://developer.android.com/reference/android/opengl/GLES20.html#glBlendFunc(int,%20int))
        pub fn glBlendFunc<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glBlendFunc", .descriptor == "(II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glBlendFunc\0", "(II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glBlendFuncSeparate](https://developer.android.com/reference/android/opengl/GLES20.html#glBlendFuncSeparate(int,%20int,%20int,%20int))
        pub fn glBlendFuncSeparate<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glBlendFuncSeparate", .descriptor == "(IIII)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glBlendFuncSeparate\0", "(IIII)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glBufferData](https://developer.android.com/reference/android/opengl/GLES20.html#glBufferData(int,%20int,%20java.nio.Buffer,%20int))
        ///
        /// Required features: "java-nio-Buffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-Buffer")))]
        pub fn glBufferData<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::Buffer>>, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glBufferData", .descriptor == "(IILjava/nio/Buffer;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glBufferData\0", "(IILjava/nio/Buffer;I)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glBufferSubData](https://developer.android.com/reference/android/opengl/GLES20.html#glBufferSubData(int,%20int,%20int,%20java.nio.Buffer))
        ///
        /// Required features: "java-nio-Buffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-Buffer")))]
        pub fn glBufferSubData<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::Buffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glBufferSubData", .descriptor == "(IIILjava/nio/Buffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glBufferSubData\0", "(IIILjava/nio/Buffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glCheckFramebufferStatus](https://developer.android.com/reference/android/opengl/GLES20.html#glCheckFramebufferStatus(int))
        pub fn glCheckFramebufferStatus<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glCheckFramebufferStatus", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glCheckFramebufferStatus\0", "(I)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glClear](https://developer.android.com/reference/android/opengl/GLES20.html#glClear(int))
        pub fn glClear<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glClear", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glClear\0", "(I)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glClearColor](https://developer.android.com/reference/android/opengl/GLES20.html#glClearColor(float,%20float,%20float,%20float))
        pub fn glClearColor<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f32, arg1: f32, arg2: f32, arg3: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glClearColor", .descriptor == "(FFFF)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glClearColor\0", "(FFFF)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glClearDepthf](https://developer.android.com/reference/android/opengl/GLES20.html#glClearDepthf(float))
        pub fn glClearDepthf<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glClearDepthf", .descriptor == "(F)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glClearDepthf\0", "(F)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glClearStencil](https://developer.android.com/reference/android/opengl/GLES20.html#glClearStencil(int))
        pub fn glClearStencil<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glClearStencil", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glClearStencil\0", "(I)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glColorMask](https://developer.android.com/reference/android/opengl/GLES20.html#glColorMask(boolean,%20boolean,%20boolean,%20boolean))
        pub fn glColorMask<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: bool, arg1: bool, arg2: bool, arg3: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glColorMask", .descriptor == "(ZZZZ)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glColorMask\0", "(ZZZZ)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glCompileShader](https://developer.android.com/reference/android/opengl/GLES20.html#glCompileShader(int))
        pub fn glCompileShader<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glCompileShader", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glCompileShader\0", "(I)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glCompressedTexImage2D](https://developer.android.com/reference/android/opengl/GLES20.html#glCompressedTexImage2D(int,%20int,%20int,%20int,%20int,%20int,%20int,%20java.nio.Buffer))
        ///
        /// Required features: "java-nio-Buffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-Buffer")))]
        pub fn glCompressedTexImage2D<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32, arg3: i32, arg4: i32, arg5: i32, arg6: i32, arg7: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::Buffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glCompressedTexImage2D", .descriptor == "(IIIIIIILjava/nio/Buffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6), __jni_bindgen::AsJValue::as_jvalue(&arg7.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glCompressedTexImage2D\0", "(IIIIIIILjava/nio/Buffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glCompressedTexSubImage2D](https://developer.android.com/reference/android/opengl/GLES20.html#glCompressedTexSubImage2D(int,%20int,%20int,%20int,%20int,%20int,%20int,%20int,%20java.nio.Buffer))
        ///
        /// Required features: "java-nio-Buffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-Buffer")))]
        pub fn glCompressedTexSubImage2D<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32, arg3: i32, arg4: i32, arg5: i32, arg6: i32, arg7: i32, arg8: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::Buffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glCompressedTexSubImage2D", .descriptor == "(IIIIIIIILjava/nio/Buffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6), __jni_bindgen::AsJValue::as_jvalue(&arg7), __jni_bindgen::AsJValue::as_jvalue(&arg8.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glCompressedTexSubImage2D\0", "(IIIIIIIILjava/nio/Buffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glCopyTexImage2D](https://developer.android.com/reference/android/opengl/GLES20.html#glCopyTexImage2D(int,%20int,%20int,%20int,%20int,%20int,%20int,%20int))
        pub fn glCopyTexImage2D<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32, arg3: i32, arg4: i32, arg5: i32, arg6: i32, arg7: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glCopyTexImage2D", .descriptor == "(IIIIIIII)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6), __jni_bindgen::AsJValue::as_jvalue(&arg7)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glCopyTexImage2D\0", "(IIIIIIII)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glCopyTexSubImage2D](https://developer.android.com/reference/android/opengl/GLES20.html#glCopyTexSubImage2D(int,%20int,%20int,%20int,%20int,%20int,%20int,%20int))
        pub fn glCopyTexSubImage2D<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32, arg3: i32, arg4: i32, arg5: i32, arg6: i32, arg7: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glCopyTexSubImage2D", .descriptor == "(IIIIIIII)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6), __jni_bindgen::AsJValue::as_jvalue(&arg7)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glCopyTexSubImage2D\0", "(IIIIIIII)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glCreateProgram](https://developer.android.com/reference/android/opengl/GLES20.html#glCreateProgram())
        pub fn glCreateProgram<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glCreateProgram", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glCreateProgram\0", "()I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glCreateShader](https://developer.android.com/reference/android/opengl/GLES20.html#glCreateShader(int))
        pub fn glCreateShader<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glCreateShader", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glCreateShader\0", "(I)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glCullFace](https://developer.android.com/reference/android/opengl/GLES20.html#glCullFace(int))
        pub fn glCullFace<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glCullFace", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glCullFace\0", "(I)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glDeleteBuffers](https://developer.android.com/reference/android/opengl/GLES20.html#glDeleteBuffers(int,%20int%5B%5D,%20int))
        pub fn glDeleteBuffers_int_int_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glDeleteBuffers", .descriptor == "(I[II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glDeleteBuffers\0", "(I[II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glDeleteBuffers](https://developer.android.com/reference/android/opengl/GLES20.html#glDeleteBuffers(int,%20java.nio.IntBuffer))
        ///
        /// Required features: "java-nio-IntBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-IntBuffer")))]
        pub fn glDeleteBuffers_int_IntBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glDeleteBuffers", .descriptor == "(ILjava/nio/IntBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glDeleteBuffers\0", "(ILjava/nio/IntBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glDeleteFramebuffers](https://developer.android.com/reference/android/opengl/GLES20.html#glDeleteFramebuffers(int,%20int%5B%5D,%20int))
        pub fn glDeleteFramebuffers_int_int_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glDeleteFramebuffers", .descriptor == "(I[II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glDeleteFramebuffers\0", "(I[II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glDeleteFramebuffers](https://developer.android.com/reference/android/opengl/GLES20.html#glDeleteFramebuffers(int,%20java.nio.IntBuffer))
        ///
        /// Required features: "java-nio-IntBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-IntBuffer")))]
        pub fn glDeleteFramebuffers_int_IntBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glDeleteFramebuffers", .descriptor == "(ILjava/nio/IntBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glDeleteFramebuffers\0", "(ILjava/nio/IntBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glDeleteProgram](https://developer.android.com/reference/android/opengl/GLES20.html#glDeleteProgram(int))
        pub fn glDeleteProgram<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glDeleteProgram", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glDeleteProgram\0", "(I)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glDeleteRenderbuffers](https://developer.android.com/reference/android/opengl/GLES20.html#glDeleteRenderbuffers(int,%20int%5B%5D,%20int))
        pub fn glDeleteRenderbuffers_int_int_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glDeleteRenderbuffers", .descriptor == "(I[II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glDeleteRenderbuffers\0", "(I[II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glDeleteRenderbuffers](https://developer.android.com/reference/android/opengl/GLES20.html#glDeleteRenderbuffers(int,%20java.nio.IntBuffer))
        ///
        /// Required features: "java-nio-IntBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-IntBuffer")))]
        pub fn glDeleteRenderbuffers_int_IntBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glDeleteRenderbuffers", .descriptor == "(ILjava/nio/IntBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glDeleteRenderbuffers\0", "(ILjava/nio/IntBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glDeleteShader](https://developer.android.com/reference/android/opengl/GLES20.html#glDeleteShader(int))
        pub fn glDeleteShader<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glDeleteShader", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glDeleteShader\0", "(I)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glDeleteTextures](https://developer.android.com/reference/android/opengl/GLES20.html#glDeleteTextures(int,%20int%5B%5D,%20int))
        pub fn glDeleteTextures_int_int_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glDeleteTextures", .descriptor == "(I[II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glDeleteTextures\0", "(I[II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glDeleteTextures](https://developer.android.com/reference/android/opengl/GLES20.html#glDeleteTextures(int,%20java.nio.IntBuffer))
        ///
        /// Required features: "java-nio-IntBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-IntBuffer")))]
        pub fn glDeleteTextures_int_IntBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glDeleteTextures", .descriptor == "(ILjava/nio/IntBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glDeleteTextures\0", "(ILjava/nio/IntBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glDepthFunc](https://developer.android.com/reference/android/opengl/GLES20.html#glDepthFunc(int))
        pub fn glDepthFunc<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glDepthFunc", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glDepthFunc\0", "(I)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glDepthMask](https://developer.android.com/reference/android/opengl/GLES20.html#glDepthMask(boolean))
        pub fn glDepthMask<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glDepthMask", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glDepthMask\0", "(Z)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glDepthRangef](https://developer.android.com/reference/android/opengl/GLES20.html#glDepthRangef(float,%20float))
        pub fn glDepthRangef<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f32, arg1: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glDepthRangef", .descriptor == "(FF)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glDepthRangef\0", "(FF)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glDetachShader](https://developer.android.com/reference/android/opengl/GLES20.html#glDetachShader(int,%20int))
        pub fn glDetachShader<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glDetachShader", .descriptor == "(II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glDetachShader\0", "(II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glDisable](https://developer.android.com/reference/android/opengl/GLES20.html#glDisable(int))
        pub fn glDisable<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glDisable", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glDisable\0", "(I)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glDisableVertexAttribArray](https://developer.android.com/reference/android/opengl/GLES20.html#glDisableVertexAttribArray(int))
        pub fn glDisableVertexAttribArray<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glDisableVertexAttribArray", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glDisableVertexAttribArray\0", "(I)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glDrawArrays](https://developer.android.com/reference/android/opengl/GLES20.html#glDrawArrays(int,%20int,%20int))
        pub fn glDrawArrays<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glDrawArrays", .descriptor == "(III)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glDrawArrays\0", "(III)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glDrawElements](https://developer.android.com/reference/android/opengl/GLES20.html#glDrawElements(int,%20int,%20int,%20int))
        pub fn glDrawElements_int_int_int_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glDrawElements", .descriptor == "(IIII)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glDrawElements\0", "(IIII)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glDrawElements](https://developer.android.com/reference/android/opengl/GLES20.html#glDrawElements(int,%20int,%20int,%20java.nio.Buffer))
        ///
        /// Required features: "java-nio-Buffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-Buffer")))]
        pub fn glDrawElements_int_int_int_Buffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::Buffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glDrawElements", .descriptor == "(IIILjava/nio/Buffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glDrawElements\0", "(IIILjava/nio/Buffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glEnable](https://developer.android.com/reference/android/opengl/GLES20.html#glEnable(int))
        pub fn glEnable<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glEnable", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glEnable\0", "(I)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glEnableVertexAttribArray](https://developer.android.com/reference/android/opengl/GLES20.html#glEnableVertexAttribArray(int))
        pub fn glEnableVertexAttribArray<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glEnableVertexAttribArray", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glEnableVertexAttribArray\0", "(I)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glFinish](https://developer.android.com/reference/android/opengl/GLES20.html#glFinish())
        pub fn glFinish<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glFinish", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glFinish\0", "()V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glFlush](https://developer.android.com/reference/android/opengl/GLES20.html#glFlush())
        pub fn glFlush<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glFlush", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glFlush\0", "()V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glFramebufferRenderbuffer](https://developer.android.com/reference/android/opengl/GLES20.html#glFramebufferRenderbuffer(int,%20int,%20int,%20int))
        pub fn glFramebufferRenderbuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glFramebufferRenderbuffer", .descriptor == "(IIII)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glFramebufferRenderbuffer\0", "(IIII)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glFramebufferTexture2D](https://developer.android.com/reference/android/opengl/GLES20.html#glFramebufferTexture2D(int,%20int,%20int,%20int,%20int))
        pub fn glFramebufferTexture2D<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32, arg3: i32, arg4: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glFramebufferTexture2D", .descriptor == "(IIIII)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glFramebufferTexture2D\0", "(IIIII)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glFrontFace](https://developer.android.com/reference/android/opengl/GLES20.html#glFrontFace(int))
        pub fn glFrontFace<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glFrontFace", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glFrontFace\0", "(I)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGenBuffers](https://developer.android.com/reference/android/opengl/GLES20.html#glGenBuffers(int,%20int%5B%5D,%20int))
        pub fn glGenBuffers_int_int_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGenBuffers", .descriptor == "(I[II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glGenBuffers\0", "(I[II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGenBuffers](https://developer.android.com/reference/android/opengl/GLES20.html#glGenBuffers(int,%20java.nio.IntBuffer))
        ///
        /// Required features: "java-nio-IntBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-IntBuffer")))]
        pub fn glGenBuffers_int_IntBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGenBuffers", .descriptor == "(ILjava/nio/IntBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glGenBuffers\0", "(ILjava/nio/IntBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGenerateMipmap](https://developer.android.com/reference/android/opengl/GLES20.html#glGenerateMipmap(int))
        pub fn glGenerateMipmap<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGenerateMipmap", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glGenerateMipmap\0", "(I)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGenFramebuffers](https://developer.android.com/reference/android/opengl/GLES20.html#glGenFramebuffers(int,%20int%5B%5D,%20int))
        pub fn glGenFramebuffers_int_int_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGenFramebuffers", .descriptor == "(I[II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glGenFramebuffers\0", "(I[II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGenFramebuffers](https://developer.android.com/reference/android/opengl/GLES20.html#glGenFramebuffers(int,%20java.nio.IntBuffer))
        ///
        /// Required features: "java-nio-IntBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-IntBuffer")))]
        pub fn glGenFramebuffers_int_IntBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGenFramebuffers", .descriptor == "(ILjava/nio/IntBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glGenFramebuffers\0", "(ILjava/nio/IntBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGenRenderbuffers](https://developer.android.com/reference/android/opengl/GLES20.html#glGenRenderbuffers(int,%20int%5B%5D,%20int))
        pub fn glGenRenderbuffers_int_int_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGenRenderbuffers", .descriptor == "(I[II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glGenRenderbuffers\0", "(I[II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGenRenderbuffers](https://developer.android.com/reference/android/opengl/GLES20.html#glGenRenderbuffers(int,%20java.nio.IntBuffer))
        ///
        /// Required features: "java-nio-IntBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-IntBuffer")))]
        pub fn glGenRenderbuffers_int_IntBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGenRenderbuffers", .descriptor == "(ILjava/nio/IntBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glGenRenderbuffers\0", "(ILjava/nio/IntBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGenTextures](https://developer.android.com/reference/android/opengl/GLES20.html#glGenTextures(int,%20int%5B%5D,%20int))
        pub fn glGenTextures_int_int_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGenTextures", .descriptor == "(I[II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glGenTextures\0", "(I[II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGenTextures](https://developer.android.com/reference/android/opengl/GLES20.html#glGenTextures(int,%20java.nio.IntBuffer))
        ///
        /// Required features: "java-nio-IntBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-IntBuffer")))]
        pub fn glGenTextures_int_IntBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGenTextures", .descriptor == "(ILjava/nio/IntBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glGenTextures\0", "(ILjava/nio/IntBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetActiveAttrib](https://developer.android.com/reference/android/opengl/GLES20.html#glGetActiveAttrib(int,%20int,%20int,%20int%5B%5D,%20int,%20int%5B%5D,%20int,%20int%5B%5D,%20int,%20byte%5B%5D,%20int))
        pub fn glGetActiveAttrib_int_int_int_int_array_int_int_array_int_int_array_int_byte_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg4: i32, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg6: i32, arg7: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg8: i32, arg9: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>, arg10: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetActiveAttrib", .descriptor == "(III[II[II[II[BI)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5.into()), __jni_bindgen::AsJValue::as_jvalue(&arg6), __jni_bindgen::AsJValue::as_jvalue(&arg7.into()), __jni_bindgen::AsJValue::as_jvalue(&arg8), __jni_bindgen::AsJValue::as_jvalue(&arg9.into()), __jni_bindgen::AsJValue::as_jvalue(&arg10)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glGetActiveAttrib\0", "(III[II[II[II[BI)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetActiveAttrib](https://developer.android.com/reference/android/opengl/GLES20.html#glGetActiveAttrib(int,%20int,%20int%5B%5D,%20int,%20int%5B%5D,%20int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn glGetActiveAttrib_int_int_int_array_int_int_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg3: i32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg5: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetActiveAttrib", .descriptor == "(II[II[II)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glGetActiveAttrib\0", "(II[II[II)Ljava/lang/String;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetActiveAttrib](https://developer.android.com/reference/android/opengl/GLES20.html#glGetActiveAttrib(int,%20int,%20java.nio.IntBuffer,%20java.nio.IntBuffer))
        ///
        /// Required features: "java-lang-String", "java-nio-IntBuffer"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-nio-IntBuffer")))]
        pub fn glGetActiveAttrib_int_int_IntBuffer_IntBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetActiveAttrib", .descriptor == "(IILjava/nio/IntBuffer;Ljava/nio/IntBuffer;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glGetActiveAttrib\0", "(IILjava/nio/IntBuffer;Ljava/nio/IntBuffer;)Ljava/lang/String;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetActiveUniform](https://developer.android.com/reference/android/opengl/GLES20.html#glGetActiveUniform(int,%20int,%20int,%20int%5B%5D,%20int,%20int%5B%5D,%20int,%20int%5B%5D,%20int,%20byte%5B%5D,%20int))
        pub fn glGetActiveUniform_int_int_int_int_array_int_int_array_int_int_array_int_byte_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg4: i32, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg6: i32, arg7: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg8: i32, arg9: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>, arg10: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetActiveUniform", .descriptor == "(III[II[II[II[BI)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5.into()), __jni_bindgen::AsJValue::as_jvalue(&arg6), __jni_bindgen::AsJValue::as_jvalue(&arg7.into()), __jni_bindgen::AsJValue::as_jvalue(&arg8), __jni_bindgen::AsJValue::as_jvalue(&arg9.into()), __jni_bindgen::AsJValue::as_jvalue(&arg10)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glGetActiveUniform\0", "(III[II[II[II[BI)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetActiveUniform](https://developer.android.com/reference/android/opengl/GLES20.html#glGetActiveUniform(int,%20int,%20int%5B%5D,%20int,%20int%5B%5D,%20int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn glGetActiveUniform_int_int_int_array_int_int_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg3: i32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg5: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetActiveUniform", .descriptor == "(II[II[II)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glGetActiveUniform\0", "(II[II[II)Ljava/lang/String;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetActiveUniform](https://developer.android.com/reference/android/opengl/GLES20.html#glGetActiveUniform(int,%20int,%20java.nio.IntBuffer,%20java.nio.IntBuffer))
        ///
        /// Required features: "java-lang-String", "java-nio-IntBuffer"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-nio-IntBuffer")))]
        pub fn glGetActiveUniform_int_int_IntBuffer_IntBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetActiveUniform", .descriptor == "(IILjava/nio/IntBuffer;Ljava/nio/IntBuffer;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glGetActiveUniform\0", "(IILjava/nio/IntBuffer;Ljava/nio/IntBuffer;)Ljava/lang/String;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetAttachedShaders](https://developer.android.com/reference/android/opengl/GLES20.html#glGetAttachedShaders(int,%20int,%20int%5B%5D,%20int,%20int%5B%5D,%20int))
        pub fn glGetAttachedShaders_int_int_int_array_int_int_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg3: i32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg5: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetAttachedShaders", .descriptor == "(II[II[II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glGetAttachedShaders\0", "(II[II[II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetAttachedShaders](https://developer.android.com/reference/android/opengl/GLES20.html#glGetAttachedShaders(int,%20int,%20java.nio.IntBuffer,%20java.nio.IntBuffer))
        ///
        /// Required features: "java-nio-IntBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-IntBuffer")))]
        pub fn glGetAttachedShaders_int_int_IntBuffer_IntBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetAttachedShaders", .descriptor == "(IILjava/nio/IntBuffer;Ljava/nio/IntBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glGetAttachedShaders\0", "(IILjava/nio/IntBuffer;Ljava/nio/IntBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetAttribLocation](https://developer.android.com/reference/android/opengl/GLES20.html#glGetAttribLocation(int,%20java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn glGetAttribLocation<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetAttribLocation", .descriptor == "(ILjava/lang/String;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glGetAttribLocation\0", "(ILjava/lang/String;)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetBooleanv](https://developer.android.com/reference/android/opengl/GLES20.html#glGetBooleanv(int,%20bool%5B%5D,%20int))
        pub fn glGetBooleanv_int_boolean_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::BooleanArray>>, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetBooleanv", .descriptor == "(I[ZI)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glGetBooleanv\0", "(I[ZI)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetBooleanv](https://developer.android.com/reference/android/opengl/GLES20.html#glGetBooleanv(int,%20java.nio.IntBuffer))
        ///
        /// Required features: "java-nio-IntBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-IntBuffer")))]
        pub fn glGetBooleanv_int_IntBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetBooleanv", .descriptor == "(ILjava/nio/IntBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glGetBooleanv\0", "(ILjava/nio/IntBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetBufferParameteriv](https://developer.android.com/reference/android/opengl/GLES20.html#glGetBufferParameteriv(int,%20int,%20int%5B%5D,%20int))
        pub fn glGetBufferParameteriv_int_int_int_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetBufferParameteriv", .descriptor == "(II[II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glGetBufferParameteriv\0", "(II[II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetBufferParameteriv](https://developer.android.com/reference/android/opengl/GLES20.html#glGetBufferParameteriv(int,%20int,%20java.nio.IntBuffer))
        ///
        /// Required features: "java-nio-IntBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-IntBuffer")))]
        pub fn glGetBufferParameteriv_int_int_IntBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetBufferParameteriv", .descriptor == "(IILjava/nio/IntBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glGetBufferParameteriv\0", "(IILjava/nio/IntBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetError](https://developer.android.com/reference/android/opengl/GLES20.html#glGetError())
        pub fn glGetError<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetError", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glGetError\0", "()I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetFloatv](https://developer.android.com/reference/android/opengl/GLES20.html#glGetFloatv(int,%20float%5B%5D,%20int))
        pub fn glGetFloatv_int_float_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetFloatv", .descriptor == "(I[FI)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glGetFloatv\0", "(I[FI)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetFloatv](https://developer.android.com/reference/android/opengl/GLES20.html#glGetFloatv(int,%20java.nio.FloatBuffer))
        ///
        /// Required features: "java-nio-FloatBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-FloatBuffer")))]
        pub fn glGetFloatv_int_FloatBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::FloatBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetFloatv", .descriptor == "(ILjava/nio/FloatBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glGetFloatv\0", "(ILjava/nio/FloatBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetFramebufferAttachmentParameteriv](https://developer.android.com/reference/android/opengl/GLES20.html#glGetFramebufferAttachmentParameteriv(int,%20int,%20int,%20int%5B%5D,%20int))
        pub fn glGetFramebufferAttachmentParameteriv_int_int_int_int_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg4: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetFramebufferAttachmentParameteriv", .descriptor == "(III[II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glGetFramebufferAttachmentParameteriv\0", "(III[II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetFramebufferAttachmentParameteriv](https://developer.android.com/reference/android/opengl/GLES20.html#glGetFramebufferAttachmentParameteriv(int,%20int,%20int,%20java.nio.IntBuffer))
        ///
        /// Required features: "java-nio-IntBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-IntBuffer")))]
        pub fn glGetFramebufferAttachmentParameteriv_int_int_int_IntBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetFramebufferAttachmentParameteriv", .descriptor == "(IIILjava/nio/IntBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glGetFramebufferAttachmentParameteriv\0", "(IIILjava/nio/IntBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetIntegerv](https://developer.android.com/reference/android/opengl/GLES20.html#glGetIntegerv(int,%20int%5B%5D,%20int))
        pub fn glGetIntegerv_int_int_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetIntegerv", .descriptor == "(I[II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glGetIntegerv\0", "(I[II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetIntegerv](https://developer.android.com/reference/android/opengl/GLES20.html#glGetIntegerv(int,%20java.nio.IntBuffer))
        ///
        /// Required features: "java-nio-IntBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-IntBuffer")))]
        pub fn glGetIntegerv_int_IntBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetIntegerv", .descriptor == "(ILjava/nio/IntBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glGetIntegerv\0", "(ILjava/nio/IntBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetProgramiv](https://developer.android.com/reference/android/opengl/GLES20.html#glGetProgramiv(int,%20int,%20int%5B%5D,%20int))
        pub fn glGetProgramiv_int_int_int_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetProgramiv", .descriptor == "(II[II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glGetProgramiv\0", "(II[II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetProgramiv](https://developer.android.com/reference/android/opengl/GLES20.html#glGetProgramiv(int,%20int,%20java.nio.IntBuffer))
        ///
        /// Required features: "java-nio-IntBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-IntBuffer")))]
        pub fn glGetProgramiv_int_int_IntBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetProgramiv", .descriptor == "(IILjava/nio/IntBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glGetProgramiv\0", "(IILjava/nio/IntBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetProgramInfoLog](https://developer.android.com/reference/android/opengl/GLES20.html#glGetProgramInfoLog(int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn glGetProgramInfoLog<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetProgramInfoLog", .descriptor == "(I)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glGetProgramInfoLog\0", "(I)Ljava/lang/String;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetRenderbufferParameteriv](https://developer.android.com/reference/android/opengl/GLES20.html#glGetRenderbufferParameteriv(int,%20int,%20int%5B%5D,%20int))
        pub fn glGetRenderbufferParameteriv_int_int_int_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetRenderbufferParameteriv", .descriptor == "(II[II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glGetRenderbufferParameteriv\0", "(II[II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetRenderbufferParameteriv](https://developer.android.com/reference/android/opengl/GLES20.html#glGetRenderbufferParameteriv(int,%20int,%20java.nio.IntBuffer))
        ///
        /// Required features: "java-nio-IntBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-IntBuffer")))]
        pub fn glGetRenderbufferParameteriv_int_int_IntBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetRenderbufferParameteriv", .descriptor == "(IILjava/nio/IntBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glGetRenderbufferParameteriv\0", "(IILjava/nio/IntBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetShaderiv](https://developer.android.com/reference/android/opengl/GLES20.html#glGetShaderiv(int,%20int,%20int%5B%5D,%20int))
        pub fn glGetShaderiv_int_int_int_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetShaderiv", .descriptor == "(II[II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glGetShaderiv\0", "(II[II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetShaderiv](https://developer.android.com/reference/android/opengl/GLES20.html#glGetShaderiv(int,%20int,%20java.nio.IntBuffer))
        ///
        /// Required features: "java-nio-IntBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-IntBuffer")))]
        pub fn glGetShaderiv_int_int_IntBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetShaderiv", .descriptor == "(IILjava/nio/IntBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glGetShaderiv\0", "(IILjava/nio/IntBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetShaderInfoLog](https://developer.android.com/reference/android/opengl/GLES20.html#glGetShaderInfoLog(int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn glGetShaderInfoLog<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetShaderInfoLog", .descriptor == "(I)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glGetShaderInfoLog\0", "(I)Ljava/lang/String;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetShaderPrecisionFormat](https://developer.android.com/reference/android/opengl/GLES20.html#glGetShaderPrecisionFormat(int,%20int,%20int%5B%5D,%20int,%20int%5B%5D,%20int))
        pub fn glGetShaderPrecisionFormat_int_int_int_array_int_int_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg3: i32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg5: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetShaderPrecisionFormat", .descriptor == "(II[II[II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glGetShaderPrecisionFormat\0", "(II[II[II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetShaderPrecisionFormat](https://developer.android.com/reference/android/opengl/GLES20.html#glGetShaderPrecisionFormat(int,%20int,%20java.nio.IntBuffer,%20java.nio.IntBuffer))
        ///
        /// Required features: "java-nio-IntBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-IntBuffer")))]
        pub fn glGetShaderPrecisionFormat_int_int_IntBuffer_IntBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetShaderPrecisionFormat", .descriptor == "(IILjava/nio/IntBuffer;Ljava/nio/IntBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glGetShaderPrecisionFormat\0", "(IILjava/nio/IntBuffer;Ljava/nio/IntBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetShaderSource](https://developer.android.com/reference/android/opengl/GLES20.html#glGetShaderSource(int,%20int,%20int%5B%5D,%20int,%20byte%5B%5D,%20int))
        pub fn glGetShaderSource_int_int_int_array_int_byte_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg3: i32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>, arg5: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetShaderSource", .descriptor == "(II[II[BI)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glGetShaderSource\0", "(II[II[BI)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetShaderSource](https://developer.android.com/reference/android/opengl/GLES20.html#glGetShaderSource(int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn glGetShaderSource_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetShaderSource", .descriptor == "(I)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glGetShaderSource\0", "(I)Ljava/lang/String;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetString](https://developer.android.com/reference/android/opengl/GLES20.html#glGetString(int))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn glGetString<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetString", .descriptor == "(I)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glGetString\0", "(I)Ljava/lang/String;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetTexParameterfv](https://developer.android.com/reference/android/opengl/GLES20.html#glGetTexParameterfv(int,%20int,%20float%5B%5D,%20int))
        pub fn glGetTexParameterfv_int_int_float_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetTexParameterfv", .descriptor == "(II[FI)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glGetTexParameterfv\0", "(II[FI)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetTexParameterfv](https://developer.android.com/reference/android/opengl/GLES20.html#glGetTexParameterfv(int,%20int,%20java.nio.FloatBuffer))
        ///
        /// Required features: "java-nio-FloatBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-FloatBuffer")))]
        pub fn glGetTexParameterfv_int_int_FloatBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::FloatBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetTexParameterfv", .descriptor == "(IILjava/nio/FloatBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glGetTexParameterfv\0", "(IILjava/nio/FloatBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetTexParameteriv](https://developer.android.com/reference/android/opengl/GLES20.html#glGetTexParameteriv(int,%20int,%20int%5B%5D,%20int))
        pub fn glGetTexParameteriv_int_int_int_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetTexParameteriv", .descriptor == "(II[II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glGetTexParameteriv\0", "(II[II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetTexParameteriv](https://developer.android.com/reference/android/opengl/GLES20.html#glGetTexParameteriv(int,%20int,%20java.nio.IntBuffer))
        ///
        /// Required features: "java-nio-IntBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-IntBuffer")))]
        pub fn glGetTexParameteriv_int_int_IntBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetTexParameteriv", .descriptor == "(IILjava/nio/IntBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glGetTexParameteriv\0", "(IILjava/nio/IntBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetUniformfv](https://developer.android.com/reference/android/opengl/GLES20.html#glGetUniformfv(int,%20int,%20float%5B%5D,%20int))
        pub fn glGetUniformfv_int_int_float_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetUniformfv", .descriptor == "(II[FI)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glGetUniformfv\0", "(II[FI)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetUniformfv](https://developer.android.com/reference/android/opengl/GLES20.html#glGetUniformfv(int,%20int,%20java.nio.FloatBuffer))
        ///
        /// Required features: "java-nio-FloatBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-FloatBuffer")))]
        pub fn glGetUniformfv_int_int_FloatBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::FloatBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetUniformfv", .descriptor == "(IILjava/nio/FloatBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glGetUniformfv\0", "(IILjava/nio/FloatBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetUniformiv](https://developer.android.com/reference/android/opengl/GLES20.html#glGetUniformiv(int,%20int,%20int%5B%5D,%20int))
        pub fn glGetUniformiv_int_int_int_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetUniformiv", .descriptor == "(II[II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glGetUniformiv\0", "(II[II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetUniformiv](https://developer.android.com/reference/android/opengl/GLES20.html#glGetUniformiv(int,%20int,%20java.nio.IntBuffer))
        ///
        /// Required features: "java-nio-IntBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-IntBuffer")))]
        pub fn glGetUniformiv_int_int_IntBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetUniformiv", .descriptor == "(IILjava/nio/IntBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glGetUniformiv\0", "(IILjava/nio/IntBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetUniformLocation](https://developer.android.com/reference/android/opengl/GLES20.html#glGetUniformLocation(int,%20java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn glGetUniformLocation<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetUniformLocation", .descriptor == "(ILjava/lang/String;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glGetUniformLocation\0", "(ILjava/lang/String;)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetVertexAttribfv](https://developer.android.com/reference/android/opengl/GLES20.html#glGetVertexAttribfv(int,%20int,%20float%5B%5D,%20int))
        pub fn glGetVertexAttribfv_int_int_float_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetVertexAttribfv", .descriptor == "(II[FI)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glGetVertexAttribfv\0", "(II[FI)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetVertexAttribfv](https://developer.android.com/reference/android/opengl/GLES20.html#glGetVertexAttribfv(int,%20int,%20java.nio.FloatBuffer))
        ///
        /// Required features: "java-nio-FloatBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-FloatBuffer")))]
        pub fn glGetVertexAttribfv_int_int_FloatBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::FloatBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetVertexAttribfv", .descriptor == "(IILjava/nio/FloatBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glGetVertexAttribfv\0", "(IILjava/nio/FloatBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetVertexAttribiv](https://developer.android.com/reference/android/opengl/GLES20.html#glGetVertexAttribiv(int,%20int,%20int%5B%5D,%20int))
        pub fn glGetVertexAttribiv_int_int_int_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetVertexAttribiv", .descriptor == "(II[II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glGetVertexAttribiv\0", "(II[II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glGetVertexAttribiv](https://developer.android.com/reference/android/opengl/GLES20.html#glGetVertexAttribiv(int,%20int,%20java.nio.IntBuffer))
        ///
        /// Required features: "java-nio-IntBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-IntBuffer")))]
        pub fn glGetVertexAttribiv_int_int_IntBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glGetVertexAttribiv", .descriptor == "(IILjava/nio/IntBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glGetVertexAttribiv\0", "(IILjava/nio/IntBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glHint](https://developer.android.com/reference/android/opengl/GLES20.html#glHint(int,%20int))
        pub fn glHint<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glHint", .descriptor == "(II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glHint\0", "(II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glIsBuffer](https://developer.android.com/reference/android/opengl/GLES20.html#glIsBuffer(int))
        pub fn glIsBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glIsBuffer", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glIsBuffer\0", "(I)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glIsEnabled](https://developer.android.com/reference/android/opengl/GLES20.html#glIsEnabled(int))
        pub fn glIsEnabled<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glIsEnabled", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glIsEnabled\0", "(I)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glIsFramebuffer](https://developer.android.com/reference/android/opengl/GLES20.html#glIsFramebuffer(int))
        pub fn glIsFramebuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glIsFramebuffer", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glIsFramebuffer\0", "(I)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glIsProgram](https://developer.android.com/reference/android/opengl/GLES20.html#glIsProgram(int))
        pub fn glIsProgram<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glIsProgram", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glIsProgram\0", "(I)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glIsRenderbuffer](https://developer.android.com/reference/android/opengl/GLES20.html#glIsRenderbuffer(int))
        pub fn glIsRenderbuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glIsRenderbuffer", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glIsRenderbuffer\0", "(I)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glIsShader](https://developer.android.com/reference/android/opengl/GLES20.html#glIsShader(int))
        pub fn glIsShader<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glIsShader", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glIsShader\0", "(I)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glIsTexture](https://developer.android.com/reference/android/opengl/GLES20.html#glIsTexture(int))
        pub fn glIsTexture<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glIsTexture", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glIsTexture\0", "(I)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glLineWidth](https://developer.android.com/reference/android/opengl/GLES20.html#glLineWidth(float))
        pub fn glLineWidth<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glLineWidth", .descriptor == "(F)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glLineWidth\0", "(F)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glLinkProgram](https://developer.android.com/reference/android/opengl/GLES20.html#glLinkProgram(int))
        pub fn glLinkProgram<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glLinkProgram", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glLinkProgram\0", "(I)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glPixelStorei](https://developer.android.com/reference/android/opengl/GLES20.html#glPixelStorei(int,%20int))
        pub fn glPixelStorei<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glPixelStorei", .descriptor == "(II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glPixelStorei\0", "(II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glPolygonOffset](https://developer.android.com/reference/android/opengl/GLES20.html#glPolygonOffset(float,%20float))
        pub fn glPolygonOffset<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f32, arg1: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glPolygonOffset", .descriptor == "(FF)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glPolygonOffset\0", "(FF)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glReadPixels](https://developer.android.com/reference/android/opengl/GLES20.html#glReadPixels(int,%20int,%20int,%20int,%20int,%20int,%20java.nio.Buffer))
        ///
        /// Required features: "java-nio-Buffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-Buffer")))]
        pub fn glReadPixels<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32, arg3: i32, arg4: i32, arg5: i32, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::Buffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glReadPixels", .descriptor == "(IIIIIILjava/nio/Buffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glReadPixels\0", "(IIIIIILjava/nio/Buffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glReleaseShaderCompiler](https://developer.android.com/reference/android/opengl/GLES20.html#glReleaseShaderCompiler())
        pub fn glReleaseShaderCompiler<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glReleaseShaderCompiler", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glReleaseShaderCompiler\0", "()V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glRenderbufferStorage](https://developer.android.com/reference/android/opengl/GLES20.html#glRenderbufferStorage(int,%20int,%20int,%20int))
        pub fn glRenderbufferStorage<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glRenderbufferStorage", .descriptor == "(IIII)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glRenderbufferStorage\0", "(IIII)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glSampleCoverage](https://developer.android.com/reference/android/opengl/GLES20.html#glSampleCoverage(float,%20boolean))
        pub fn glSampleCoverage<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: f32, arg1: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glSampleCoverage", .descriptor == "(FZ)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glSampleCoverage\0", "(FZ)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glScissor](https://developer.android.com/reference/android/opengl/GLES20.html#glScissor(int,%20int,%20int,%20int))
        pub fn glScissor<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glScissor", .descriptor == "(IIII)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glScissor\0", "(IIII)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glShaderBinary](https://developer.android.com/reference/android/opengl/GLES20.html#glShaderBinary(int,%20int%5B%5D,%20int,%20int,%20java.nio.Buffer,%20int))
        ///
        /// Required features: "java-nio-Buffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-Buffer")))]
        pub fn glShaderBinary_int_int_array_int_int_Buffer_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg2: i32, arg3: i32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::Buffer>>, arg5: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glShaderBinary", .descriptor == "(I[IIILjava/nio/Buffer;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glShaderBinary\0", "(I[IIILjava/nio/Buffer;I)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glShaderBinary](https://developer.android.com/reference/android/opengl/GLES20.html#glShaderBinary(int,%20java.nio.IntBuffer,%20int,%20java.nio.Buffer,%20int))
        ///
        /// Required features: "java-nio-Buffer", "java-nio-IntBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-Buffer", feature = "java-nio-IntBuffer")))]
        pub fn glShaderBinary_int_IntBuffer_int_Buffer_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::Buffer>>, arg4: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glShaderBinary", .descriptor == "(ILjava/nio/IntBuffer;ILjava/nio/Buffer;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glShaderBinary\0", "(ILjava/nio/IntBuffer;ILjava/nio/Buffer;I)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glShaderSource](https://developer.android.com/reference/android/opengl/GLES20.html#glShaderSource(int,%20java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn glShaderSource<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glShaderSource", .descriptor == "(ILjava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glShaderSource\0", "(ILjava/lang/String;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glStencilFunc](https://developer.android.com/reference/android/opengl/GLES20.html#glStencilFunc(int,%20int,%20int))
        pub fn glStencilFunc<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glStencilFunc", .descriptor == "(III)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glStencilFunc\0", "(III)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glStencilFuncSeparate](https://developer.android.com/reference/android/opengl/GLES20.html#glStencilFuncSeparate(int,%20int,%20int,%20int))
        pub fn glStencilFuncSeparate<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glStencilFuncSeparate", .descriptor == "(IIII)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glStencilFuncSeparate\0", "(IIII)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glStencilMask](https://developer.android.com/reference/android/opengl/GLES20.html#glStencilMask(int))
        pub fn glStencilMask<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glStencilMask", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glStencilMask\0", "(I)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glStencilMaskSeparate](https://developer.android.com/reference/android/opengl/GLES20.html#glStencilMaskSeparate(int,%20int))
        pub fn glStencilMaskSeparate<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glStencilMaskSeparate", .descriptor == "(II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glStencilMaskSeparate\0", "(II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glStencilOp](https://developer.android.com/reference/android/opengl/GLES20.html#glStencilOp(int,%20int,%20int))
        pub fn glStencilOp<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glStencilOp", .descriptor == "(III)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glStencilOp\0", "(III)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glStencilOpSeparate](https://developer.android.com/reference/android/opengl/GLES20.html#glStencilOpSeparate(int,%20int,%20int,%20int))
        pub fn glStencilOpSeparate<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glStencilOpSeparate", .descriptor == "(IIII)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glStencilOpSeparate\0", "(IIII)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glTexImage2D](https://developer.android.com/reference/android/opengl/GLES20.html#glTexImage2D(int,%20int,%20int,%20int,%20int,%20int,%20int,%20int,%20java.nio.Buffer))
        ///
        /// Required features: "java-nio-Buffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-Buffer")))]
        pub fn glTexImage2D<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32, arg3: i32, arg4: i32, arg5: i32, arg6: i32, arg7: i32, arg8: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::Buffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glTexImage2D", .descriptor == "(IIIIIIIILjava/nio/Buffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6), __jni_bindgen::AsJValue::as_jvalue(&arg7), __jni_bindgen::AsJValue::as_jvalue(&arg8.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glTexImage2D\0", "(IIIIIIIILjava/nio/Buffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glTexParameterf](https://developer.android.com/reference/android/opengl/GLES20.html#glTexParameterf(int,%20int,%20float))
        pub fn glTexParameterf<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glTexParameterf", .descriptor == "(IIF)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glTexParameterf\0", "(IIF)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glTexParameterfv](https://developer.android.com/reference/android/opengl/GLES20.html#glTexParameterfv(int,%20int,%20float%5B%5D,%20int))
        pub fn glTexParameterfv_int_int_float_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glTexParameterfv", .descriptor == "(II[FI)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glTexParameterfv\0", "(II[FI)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glTexParameterfv](https://developer.android.com/reference/android/opengl/GLES20.html#glTexParameterfv(int,%20int,%20java.nio.FloatBuffer))
        ///
        /// Required features: "java-nio-FloatBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-FloatBuffer")))]
        pub fn glTexParameterfv_int_int_FloatBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::FloatBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glTexParameterfv", .descriptor == "(IILjava/nio/FloatBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glTexParameterfv\0", "(IILjava/nio/FloatBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glTexParameteri](https://developer.android.com/reference/android/opengl/GLES20.html#glTexParameteri(int,%20int,%20int))
        pub fn glTexParameteri<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glTexParameteri", .descriptor == "(III)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glTexParameteri\0", "(III)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glTexParameteriv](https://developer.android.com/reference/android/opengl/GLES20.html#glTexParameteriv(int,%20int,%20int%5B%5D,%20int))
        pub fn glTexParameteriv_int_int_int_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glTexParameteriv", .descriptor == "(II[II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glTexParameteriv\0", "(II[II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glTexParameteriv](https://developer.android.com/reference/android/opengl/GLES20.html#glTexParameteriv(int,%20int,%20java.nio.IntBuffer))
        ///
        /// Required features: "java-nio-IntBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-IntBuffer")))]
        pub fn glTexParameteriv_int_int_IntBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glTexParameteriv", .descriptor == "(IILjava/nio/IntBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glTexParameteriv\0", "(IILjava/nio/IntBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glTexSubImage2D](https://developer.android.com/reference/android/opengl/GLES20.html#glTexSubImage2D(int,%20int,%20int,%20int,%20int,%20int,%20int,%20int,%20java.nio.Buffer))
        ///
        /// Required features: "java-nio-Buffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-Buffer")))]
        pub fn glTexSubImage2D<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32, arg3: i32, arg4: i32, arg5: i32, arg6: i32, arg7: i32, arg8: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::Buffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glTexSubImage2D", .descriptor == "(IIIIIIIILjava/nio/Buffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6), __jni_bindgen::AsJValue::as_jvalue(&arg7), __jni_bindgen::AsJValue::as_jvalue(&arg8.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glTexSubImage2D\0", "(IIIIIIIILjava/nio/Buffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glUniform1f](https://developer.android.com/reference/android/opengl/GLES20.html#glUniform1f(int,%20float))
        pub fn glUniform1f<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glUniform1f", .descriptor == "(IF)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glUniform1f\0", "(IF)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glUniform1fv](https://developer.android.com/reference/android/opengl/GLES20.html#glUniform1fv(int,%20int,%20float%5B%5D,%20int))
        pub fn glUniform1fv_int_int_float_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glUniform1fv", .descriptor == "(II[FI)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glUniform1fv\0", "(II[FI)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glUniform1fv](https://developer.android.com/reference/android/opengl/GLES20.html#glUniform1fv(int,%20int,%20java.nio.FloatBuffer))
        ///
        /// Required features: "java-nio-FloatBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-FloatBuffer")))]
        pub fn glUniform1fv_int_int_FloatBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::FloatBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glUniform1fv", .descriptor == "(IILjava/nio/FloatBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glUniform1fv\0", "(IILjava/nio/FloatBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glUniform1i](https://developer.android.com/reference/android/opengl/GLES20.html#glUniform1i(int,%20int))
        pub fn glUniform1i<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glUniform1i", .descriptor == "(II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glUniform1i\0", "(II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glUniform1iv](https://developer.android.com/reference/android/opengl/GLES20.html#glUniform1iv(int,%20int,%20int%5B%5D,%20int))
        pub fn glUniform1iv_int_int_int_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glUniform1iv", .descriptor == "(II[II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glUniform1iv\0", "(II[II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glUniform1iv](https://developer.android.com/reference/android/opengl/GLES20.html#glUniform1iv(int,%20int,%20java.nio.IntBuffer))
        ///
        /// Required features: "java-nio-IntBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-IntBuffer")))]
        pub fn glUniform1iv_int_int_IntBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glUniform1iv", .descriptor == "(IILjava/nio/IntBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glUniform1iv\0", "(IILjava/nio/IntBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glUniform2f](https://developer.android.com/reference/android/opengl/GLES20.html#glUniform2f(int,%20float,%20float))
        pub fn glUniform2f<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: f32, arg2: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glUniform2f", .descriptor == "(IFF)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glUniform2f\0", "(IFF)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glUniform2fv](https://developer.android.com/reference/android/opengl/GLES20.html#glUniform2fv(int,%20int,%20float%5B%5D,%20int))
        pub fn glUniform2fv_int_int_float_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glUniform2fv", .descriptor == "(II[FI)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glUniform2fv\0", "(II[FI)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glUniform2fv](https://developer.android.com/reference/android/opengl/GLES20.html#glUniform2fv(int,%20int,%20java.nio.FloatBuffer))
        ///
        /// Required features: "java-nio-FloatBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-FloatBuffer")))]
        pub fn glUniform2fv_int_int_FloatBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::FloatBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glUniform2fv", .descriptor == "(IILjava/nio/FloatBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glUniform2fv\0", "(IILjava/nio/FloatBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glUniform2i](https://developer.android.com/reference/android/opengl/GLES20.html#glUniform2i(int,%20int,%20int))
        pub fn glUniform2i<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glUniform2i", .descriptor == "(III)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glUniform2i\0", "(III)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glUniform2iv](https://developer.android.com/reference/android/opengl/GLES20.html#glUniform2iv(int,%20int,%20int%5B%5D,%20int))
        pub fn glUniform2iv_int_int_int_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glUniform2iv", .descriptor == "(II[II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glUniform2iv\0", "(II[II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glUniform2iv](https://developer.android.com/reference/android/opengl/GLES20.html#glUniform2iv(int,%20int,%20java.nio.IntBuffer))
        ///
        /// Required features: "java-nio-IntBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-IntBuffer")))]
        pub fn glUniform2iv_int_int_IntBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glUniform2iv", .descriptor == "(IILjava/nio/IntBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glUniform2iv\0", "(IILjava/nio/IntBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glUniform3f](https://developer.android.com/reference/android/opengl/GLES20.html#glUniform3f(int,%20float,%20float,%20float))
        pub fn glUniform3f<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: f32, arg2: f32, arg3: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glUniform3f", .descriptor == "(IFFF)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glUniform3f\0", "(IFFF)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glUniform3fv](https://developer.android.com/reference/android/opengl/GLES20.html#glUniform3fv(int,%20int,%20float%5B%5D,%20int))
        pub fn glUniform3fv_int_int_float_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glUniform3fv", .descriptor == "(II[FI)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glUniform3fv\0", "(II[FI)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glUniform3fv](https://developer.android.com/reference/android/opengl/GLES20.html#glUniform3fv(int,%20int,%20java.nio.FloatBuffer))
        ///
        /// Required features: "java-nio-FloatBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-FloatBuffer")))]
        pub fn glUniform3fv_int_int_FloatBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::FloatBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glUniform3fv", .descriptor == "(IILjava/nio/FloatBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glUniform3fv\0", "(IILjava/nio/FloatBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glUniform3i](https://developer.android.com/reference/android/opengl/GLES20.html#glUniform3i(int,%20int,%20int,%20int))
        pub fn glUniform3i<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glUniform3i", .descriptor == "(IIII)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glUniform3i\0", "(IIII)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glUniform3iv](https://developer.android.com/reference/android/opengl/GLES20.html#glUniform3iv(int,%20int,%20int%5B%5D,%20int))
        pub fn glUniform3iv_int_int_int_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glUniform3iv", .descriptor == "(II[II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glUniform3iv\0", "(II[II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glUniform3iv](https://developer.android.com/reference/android/opengl/GLES20.html#glUniform3iv(int,%20int,%20java.nio.IntBuffer))
        ///
        /// Required features: "java-nio-IntBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-IntBuffer")))]
        pub fn glUniform3iv_int_int_IntBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glUniform3iv", .descriptor == "(IILjava/nio/IntBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glUniform3iv\0", "(IILjava/nio/IntBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glUniform4f](https://developer.android.com/reference/android/opengl/GLES20.html#glUniform4f(int,%20float,%20float,%20float,%20float))
        pub fn glUniform4f<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: f32, arg2: f32, arg3: f32, arg4: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glUniform4f", .descriptor == "(IFFFF)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glUniform4f\0", "(IFFFF)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glUniform4fv](https://developer.android.com/reference/android/opengl/GLES20.html#glUniform4fv(int,%20int,%20float%5B%5D,%20int))
        pub fn glUniform4fv_int_int_float_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glUniform4fv", .descriptor == "(II[FI)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glUniform4fv\0", "(II[FI)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glUniform4fv](https://developer.android.com/reference/android/opengl/GLES20.html#glUniform4fv(int,%20int,%20java.nio.FloatBuffer))
        ///
        /// Required features: "java-nio-FloatBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-FloatBuffer")))]
        pub fn glUniform4fv_int_int_FloatBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::FloatBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glUniform4fv", .descriptor == "(IILjava/nio/FloatBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glUniform4fv\0", "(IILjava/nio/FloatBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glUniform4i](https://developer.android.com/reference/android/opengl/GLES20.html#glUniform4i(int,%20int,%20int,%20int,%20int))
        pub fn glUniform4i<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32, arg3: i32, arg4: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glUniform4i", .descriptor == "(IIIII)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glUniform4i\0", "(IIIII)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glUniform4iv](https://developer.android.com/reference/android/opengl/GLES20.html#glUniform4iv(int,%20int,%20int%5B%5D,%20int))
        pub fn glUniform4iv_int_int_int_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glUniform4iv", .descriptor == "(II[II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glUniform4iv\0", "(II[II)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glUniform4iv](https://developer.android.com/reference/android/opengl/GLES20.html#glUniform4iv(int,%20int,%20java.nio.IntBuffer))
        ///
        /// Required features: "java-nio-IntBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-IntBuffer")))]
        pub fn glUniform4iv_int_int_IntBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::IntBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glUniform4iv", .descriptor == "(IILjava/nio/IntBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glUniform4iv\0", "(IILjava/nio/IntBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glUniformMatrix2fv](https://developer.android.com/reference/android/opengl/GLES20.html#glUniformMatrix2fv(int,%20int,%20boolean,%20float%5B%5D,%20int))
        pub fn glUniformMatrix2fv_int_int_boolean_float_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: bool, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>, arg4: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glUniformMatrix2fv", .descriptor == "(IIZ[FI)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glUniformMatrix2fv\0", "(IIZ[FI)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glUniformMatrix2fv](https://developer.android.com/reference/android/opengl/GLES20.html#glUniformMatrix2fv(int,%20int,%20boolean,%20java.nio.FloatBuffer))
        ///
        /// Required features: "java-nio-FloatBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-FloatBuffer")))]
        pub fn glUniformMatrix2fv_int_int_boolean_FloatBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: bool, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::FloatBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glUniformMatrix2fv", .descriptor == "(IIZLjava/nio/FloatBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glUniformMatrix2fv\0", "(IIZLjava/nio/FloatBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glUniformMatrix3fv](https://developer.android.com/reference/android/opengl/GLES20.html#glUniformMatrix3fv(int,%20int,%20boolean,%20float%5B%5D,%20int))
        pub fn glUniformMatrix3fv_int_int_boolean_float_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: bool, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>, arg4: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glUniformMatrix3fv", .descriptor == "(IIZ[FI)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glUniformMatrix3fv\0", "(IIZ[FI)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glUniformMatrix3fv](https://developer.android.com/reference/android/opengl/GLES20.html#glUniformMatrix3fv(int,%20int,%20boolean,%20java.nio.FloatBuffer))
        ///
        /// Required features: "java-nio-FloatBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-FloatBuffer")))]
        pub fn glUniformMatrix3fv_int_int_boolean_FloatBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: bool, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::FloatBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glUniformMatrix3fv", .descriptor == "(IIZLjava/nio/FloatBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glUniformMatrix3fv\0", "(IIZLjava/nio/FloatBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glUniformMatrix4fv](https://developer.android.com/reference/android/opengl/GLES20.html#glUniformMatrix4fv(int,%20int,%20boolean,%20float%5B%5D,%20int))
        pub fn glUniformMatrix4fv_int_int_boolean_float_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: bool, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>, arg4: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glUniformMatrix4fv", .descriptor == "(IIZ[FI)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glUniformMatrix4fv\0", "(IIZ[FI)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glUniformMatrix4fv](https://developer.android.com/reference/android/opengl/GLES20.html#glUniformMatrix4fv(int,%20int,%20boolean,%20java.nio.FloatBuffer))
        ///
        /// Required features: "java-nio-FloatBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-FloatBuffer")))]
        pub fn glUniformMatrix4fv_int_int_boolean_FloatBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: bool, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::FloatBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glUniformMatrix4fv", .descriptor == "(IIZLjava/nio/FloatBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glUniformMatrix4fv\0", "(IIZLjava/nio/FloatBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glUseProgram](https://developer.android.com/reference/android/opengl/GLES20.html#glUseProgram(int))
        pub fn glUseProgram<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glUseProgram", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glUseProgram\0", "(I)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glValidateProgram](https://developer.android.com/reference/android/opengl/GLES20.html#glValidateProgram(int))
        pub fn glValidateProgram<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glValidateProgram", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glValidateProgram\0", "(I)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glVertexAttrib1f](https://developer.android.com/reference/android/opengl/GLES20.html#glVertexAttrib1f(int,%20float))
        pub fn glVertexAttrib1f<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glVertexAttrib1f", .descriptor == "(IF)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glVertexAttrib1f\0", "(IF)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glVertexAttrib1fv](https://developer.android.com/reference/android/opengl/GLES20.html#glVertexAttrib1fv(int,%20float%5B%5D,%20int))
        pub fn glVertexAttrib1fv_int_float_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glVertexAttrib1fv", .descriptor == "(I[FI)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glVertexAttrib1fv\0", "(I[FI)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glVertexAttrib1fv](https://developer.android.com/reference/android/opengl/GLES20.html#glVertexAttrib1fv(int,%20java.nio.FloatBuffer))
        ///
        /// Required features: "java-nio-FloatBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-FloatBuffer")))]
        pub fn glVertexAttrib1fv_int_FloatBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::FloatBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glVertexAttrib1fv", .descriptor == "(ILjava/nio/FloatBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glVertexAttrib1fv\0", "(ILjava/nio/FloatBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glVertexAttrib2f](https://developer.android.com/reference/android/opengl/GLES20.html#glVertexAttrib2f(int,%20float,%20float))
        pub fn glVertexAttrib2f<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: f32, arg2: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glVertexAttrib2f", .descriptor == "(IFF)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glVertexAttrib2f\0", "(IFF)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glVertexAttrib2fv](https://developer.android.com/reference/android/opengl/GLES20.html#glVertexAttrib2fv(int,%20float%5B%5D,%20int))
        pub fn glVertexAttrib2fv_int_float_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glVertexAttrib2fv", .descriptor == "(I[FI)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glVertexAttrib2fv\0", "(I[FI)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glVertexAttrib2fv](https://developer.android.com/reference/android/opengl/GLES20.html#glVertexAttrib2fv(int,%20java.nio.FloatBuffer))
        ///
        /// Required features: "java-nio-FloatBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-FloatBuffer")))]
        pub fn glVertexAttrib2fv_int_FloatBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::FloatBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glVertexAttrib2fv", .descriptor == "(ILjava/nio/FloatBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glVertexAttrib2fv\0", "(ILjava/nio/FloatBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glVertexAttrib3f](https://developer.android.com/reference/android/opengl/GLES20.html#glVertexAttrib3f(int,%20float,%20float,%20float))
        pub fn glVertexAttrib3f<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: f32, arg2: f32, arg3: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glVertexAttrib3f", .descriptor == "(IFFF)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glVertexAttrib3f\0", "(IFFF)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glVertexAttrib3fv](https://developer.android.com/reference/android/opengl/GLES20.html#glVertexAttrib3fv(int,%20float%5B%5D,%20int))
        pub fn glVertexAttrib3fv_int_float_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glVertexAttrib3fv", .descriptor == "(I[FI)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glVertexAttrib3fv\0", "(I[FI)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glVertexAttrib3fv](https://developer.android.com/reference/android/opengl/GLES20.html#glVertexAttrib3fv(int,%20java.nio.FloatBuffer))
        ///
        /// Required features: "java-nio-FloatBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-FloatBuffer")))]
        pub fn glVertexAttrib3fv_int_FloatBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::FloatBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glVertexAttrib3fv", .descriptor == "(ILjava/nio/FloatBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glVertexAttrib3fv\0", "(ILjava/nio/FloatBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glVertexAttrib4f](https://developer.android.com/reference/android/opengl/GLES20.html#glVertexAttrib4f(int,%20float,%20float,%20float,%20float))
        pub fn glVertexAttrib4f<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: f32, arg2: f32, arg3: f32, arg4: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glVertexAttrib4f", .descriptor == "(IFFFF)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glVertexAttrib4f\0", "(IFFFF)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glVertexAttrib4fv](https://developer.android.com/reference/android/opengl/GLES20.html#glVertexAttrib4fv(int,%20float%5B%5D,%20int))
        pub fn glVertexAttrib4fv_int_float_array_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>, arg2: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glVertexAttrib4fv", .descriptor == "(I[FI)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glVertexAttrib4fv\0", "(I[FI)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glVertexAttrib4fv](https://developer.android.com/reference/android/opengl/GLES20.html#glVertexAttrib4fv(int,%20java.nio.FloatBuffer))
        ///
        /// Required features: "java-nio-FloatBuffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-FloatBuffer")))]
        pub fn glVertexAttrib4fv_int_FloatBuffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::FloatBuffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glVertexAttrib4fv", .descriptor == "(ILjava/nio/FloatBuffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glVertexAttrib4fv\0", "(ILjava/nio/FloatBuffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glVertexAttribPointer](https://developer.android.com/reference/android/opengl/GLES20.html#glVertexAttribPointer(int,%20int,%20int,%20boolean,%20int,%20int))
        pub fn glVertexAttribPointer_int_int_int_boolean_int_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32, arg3: bool, arg4: i32, arg5: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glVertexAttribPointer", .descriptor == "(IIIZII)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glVertexAttribPointer\0", "(IIIZII)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glVertexAttribPointer](https://developer.android.com/reference/android/opengl/GLES20.html#glVertexAttribPointer(int,%20int,%20int,%20boolean,%20int,%20java.nio.Buffer))
        ///
        /// Required features: "java-nio-Buffer"
        #[cfg(any(feature = "all", all(feature = "java-nio-Buffer")))]
        pub fn glVertexAttribPointer_int_int_int_boolean_int_Buffer<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32, arg3: bool, arg4: i32, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::nio::Buffer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC, .name == "glVertexAttribPointer", .descriptor == "(IIIZILjava/nio/Buffer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glVertexAttribPointer\0", "(IIIZILjava/nio/Buffer;)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [glViewport](https://developer.android.com/reference/android/opengl/GLES20.html#glViewport(int,%20int,%20int,%20int))
        pub fn glViewport<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/opengl/GLES20", java.flags == PUBLIC | STATIC | NATIVE, .name == "glViewport", .descriptor == "(IIII)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/opengl/GLES20\0", "glViewport\0", "(IIII)V\0");
                __jni_env.call_static_void_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [GL_ACTIVE_ATTRIBUTES](https://developer.android.com/reference/android/opengl/GLES20.html#GL_ACTIVE_ATTRIBUTES)
        pub const GL_ACTIVE_ATTRIBUTES : i32 = 35721;

        /// public static final [GL_ACTIVE_ATTRIBUTE_MAX_LENGTH](https://developer.android.com/reference/android/opengl/GLES20.html#GL_ACTIVE_ATTRIBUTE_MAX_LENGTH)
        pub const GL_ACTIVE_ATTRIBUTE_MAX_LENGTH : i32 = 35722;

        /// public static final [GL_ACTIVE_TEXTURE](https://developer.android.com/reference/android/opengl/GLES20.html#GL_ACTIVE_TEXTURE)
        pub const GL_ACTIVE_TEXTURE : i32 = 34016;

        /// public static final [GL_ACTIVE_UNIFORMS](https://developer.android.com/reference/android/opengl/GLES20.html#GL_ACTIVE_UNIFORMS)
        pub const GL_ACTIVE_UNIFORMS : i32 = 35718;

        /// public static final [GL_ACTIVE_UNIFORM_MAX_LENGTH](https://developer.android.com/reference/android/opengl/GLES20.html#GL_ACTIVE_UNIFORM_MAX_LENGTH)
        pub const GL_ACTIVE_UNIFORM_MAX_LENGTH : i32 = 35719;

        /// public static final [GL_ALIASED_LINE_WIDTH_RANGE](https://developer.android.com/reference/android/opengl/GLES20.html#GL_ALIASED_LINE_WIDTH_RANGE)
        pub const GL_ALIASED_LINE_WIDTH_RANGE : i32 = 33902;

        /// public static final [GL_ALIASED_POINT_SIZE_RANGE](https://developer.android.com/reference/android/opengl/GLES20.html#GL_ALIASED_POINT_SIZE_RANGE)
        pub const GL_ALIASED_POINT_SIZE_RANGE : i32 = 33901;

        /// public static final [GL_ALPHA](https://developer.android.com/reference/android/opengl/GLES20.html#GL_ALPHA)
        pub const GL_ALPHA : i32 = 6406;

        /// public static final [GL_ALPHA_BITS](https://developer.android.com/reference/android/opengl/GLES20.html#GL_ALPHA_BITS)
        pub const GL_ALPHA_BITS : i32 = 3413;

        /// public static final [GL_ALWAYS](https://developer.android.com/reference/android/opengl/GLES20.html#GL_ALWAYS)
        pub const GL_ALWAYS : i32 = 519;

        /// public static final [GL_ARRAY_BUFFER](https://developer.android.com/reference/android/opengl/GLES20.html#GL_ARRAY_BUFFER)
        pub const GL_ARRAY_BUFFER : i32 = 34962;

        /// public static final [GL_ARRAY_BUFFER_BINDING](https://developer.android.com/reference/android/opengl/GLES20.html#GL_ARRAY_BUFFER_BINDING)
        pub const GL_ARRAY_BUFFER_BINDING : i32 = 34964;

        /// public static final [GL_ATTACHED_SHADERS](https://developer.android.com/reference/android/opengl/GLES20.html#GL_ATTACHED_SHADERS)
        pub const GL_ATTACHED_SHADERS : i32 = 35717;

        /// public static final [GL_BACK](https://developer.android.com/reference/android/opengl/GLES20.html#GL_BACK)
        pub const GL_BACK : i32 = 1029;

        /// public static final [GL_BLEND](https://developer.android.com/reference/android/opengl/GLES20.html#GL_BLEND)
        pub const GL_BLEND : i32 = 3042;

        /// public static final [GL_BLEND_COLOR](https://developer.android.com/reference/android/opengl/GLES20.html#GL_BLEND_COLOR)
        pub const GL_BLEND_COLOR : i32 = 32773;

        /// public static final [GL_BLEND_DST_ALPHA](https://developer.android.com/reference/android/opengl/GLES20.html#GL_BLEND_DST_ALPHA)
        pub const GL_BLEND_DST_ALPHA : i32 = 32970;

        /// public static final [GL_BLEND_DST_RGB](https://developer.android.com/reference/android/opengl/GLES20.html#GL_BLEND_DST_RGB)
        pub const GL_BLEND_DST_RGB : i32 = 32968;

        /// public static final [GL_BLEND_EQUATION](https://developer.android.com/reference/android/opengl/GLES20.html#GL_BLEND_EQUATION)
        pub const GL_BLEND_EQUATION : i32 = 32777;

        /// public static final [GL_BLEND_EQUATION_ALPHA](https://developer.android.com/reference/android/opengl/GLES20.html#GL_BLEND_EQUATION_ALPHA)
        pub const GL_BLEND_EQUATION_ALPHA : i32 = 34877;

        /// public static final [GL_BLEND_EQUATION_RGB](https://developer.android.com/reference/android/opengl/GLES20.html#GL_BLEND_EQUATION_RGB)
        pub const GL_BLEND_EQUATION_RGB : i32 = 32777;

        /// public static final [GL_BLEND_SRC_ALPHA](https://developer.android.com/reference/android/opengl/GLES20.html#GL_BLEND_SRC_ALPHA)
        pub const GL_BLEND_SRC_ALPHA : i32 = 32971;

        /// public static final [GL_BLEND_SRC_RGB](https://developer.android.com/reference/android/opengl/GLES20.html#GL_BLEND_SRC_RGB)
        pub const GL_BLEND_SRC_RGB : i32 = 32969;

        /// public static final [GL_BLUE_BITS](https://developer.android.com/reference/android/opengl/GLES20.html#GL_BLUE_BITS)
        pub const GL_BLUE_BITS : i32 = 3412;

        /// public static final [GL_BOOL](https://developer.android.com/reference/android/opengl/GLES20.html#GL_BOOL)
        pub const GL_BOOL : i32 = 35670;

        /// public static final [GL_BOOL_VEC2](https://developer.android.com/reference/android/opengl/GLES20.html#GL_BOOL_VEC2)
        pub const GL_BOOL_VEC2 : i32 = 35671;

        /// public static final [GL_BOOL_VEC3](https://developer.android.com/reference/android/opengl/GLES20.html#GL_BOOL_VEC3)
        pub const GL_BOOL_VEC3 : i32 = 35672;

        /// public static final [GL_BOOL_VEC4](https://developer.android.com/reference/android/opengl/GLES20.html#GL_BOOL_VEC4)
        pub const GL_BOOL_VEC4 : i32 = 35673;

        /// public static final [GL_BUFFER_SIZE](https://developer.android.com/reference/android/opengl/GLES20.html#GL_BUFFER_SIZE)
        pub const GL_BUFFER_SIZE : i32 = 34660;

        /// public static final [GL_BUFFER_USAGE](https://developer.android.com/reference/android/opengl/GLES20.html#GL_BUFFER_USAGE)
        pub const GL_BUFFER_USAGE : i32 = 34661;

        /// public static final [GL_BYTE](https://developer.android.com/reference/android/opengl/GLES20.html#GL_BYTE)
        pub const GL_BYTE : i32 = 5120;

        /// public static final [GL_CCW](https://developer.android.com/reference/android/opengl/GLES20.html#GL_CCW)
        pub const GL_CCW : i32 = 2305;

        /// public static final [GL_CLAMP_TO_EDGE](https://developer.android.com/reference/android/opengl/GLES20.html#GL_CLAMP_TO_EDGE)
        pub const GL_CLAMP_TO_EDGE : i32 = 33071;

        /// public static final [GL_COLOR_ATTACHMENT0](https://developer.android.com/reference/android/opengl/GLES20.html#GL_COLOR_ATTACHMENT0)
        pub const GL_COLOR_ATTACHMENT0 : i32 = 36064;

        /// public static final [GL_COLOR_BUFFER_BIT](https://developer.android.com/reference/android/opengl/GLES20.html#GL_COLOR_BUFFER_BIT)
        pub const GL_COLOR_BUFFER_BIT : i32 = 16384;

        /// public static final [GL_COLOR_CLEAR_VALUE](https://developer.android.com/reference/android/opengl/GLES20.html#GL_COLOR_CLEAR_VALUE)
        pub const GL_COLOR_CLEAR_VALUE : i32 = 3106;

        /// public static final [GL_COLOR_WRITEMASK](https://developer.android.com/reference/android/opengl/GLES20.html#GL_COLOR_WRITEMASK)
        pub const GL_COLOR_WRITEMASK : i32 = 3107;

        /// public static final [GL_COMPILE_STATUS](https://developer.android.com/reference/android/opengl/GLES20.html#GL_COMPILE_STATUS)
        pub const GL_COMPILE_STATUS : i32 = 35713;

        /// public static final [GL_COMPRESSED_TEXTURE_FORMATS](https://developer.android.com/reference/android/opengl/GLES20.html#GL_COMPRESSED_TEXTURE_FORMATS)
        pub const GL_COMPRESSED_TEXTURE_FORMATS : i32 = 34467;

        /// public static final [GL_CONSTANT_ALPHA](https://developer.android.com/reference/android/opengl/GLES20.html#GL_CONSTANT_ALPHA)
        pub const GL_CONSTANT_ALPHA : i32 = 32771;

        /// public static final [GL_CONSTANT_COLOR](https://developer.android.com/reference/android/opengl/GLES20.html#GL_CONSTANT_COLOR)
        pub const GL_CONSTANT_COLOR : i32 = 32769;

        /// public static final [GL_CULL_FACE](https://developer.android.com/reference/android/opengl/GLES20.html#GL_CULL_FACE)
        pub const GL_CULL_FACE : i32 = 2884;

        /// public static final [GL_CULL_FACE_MODE](https://developer.android.com/reference/android/opengl/GLES20.html#GL_CULL_FACE_MODE)
        pub const GL_CULL_FACE_MODE : i32 = 2885;

        /// public static final [GL_CURRENT_PROGRAM](https://developer.android.com/reference/android/opengl/GLES20.html#GL_CURRENT_PROGRAM)
        pub const GL_CURRENT_PROGRAM : i32 = 35725;

        /// public static final [GL_CURRENT_VERTEX_ATTRIB](https://developer.android.com/reference/android/opengl/GLES20.html#GL_CURRENT_VERTEX_ATTRIB)
        pub const GL_CURRENT_VERTEX_ATTRIB : i32 = 34342;

        /// public static final [GL_CW](https://developer.android.com/reference/android/opengl/GLES20.html#GL_CW)
        pub const GL_CW : i32 = 2304;

        /// public static final [GL_DECR](https://developer.android.com/reference/android/opengl/GLES20.html#GL_DECR)
        pub const GL_DECR : i32 = 7683;

        /// public static final [GL_DECR_WRAP](https://developer.android.com/reference/android/opengl/GLES20.html#GL_DECR_WRAP)
        pub const GL_DECR_WRAP : i32 = 34056;

        /// public static final [GL_DELETE_STATUS](https://developer.android.com/reference/android/opengl/GLES20.html#GL_DELETE_STATUS)
        pub const GL_DELETE_STATUS : i32 = 35712;

        /// public static final [GL_DEPTH_ATTACHMENT](https://developer.android.com/reference/android/opengl/GLES20.html#GL_DEPTH_ATTACHMENT)
        pub const GL_DEPTH_ATTACHMENT : i32 = 36096;

        /// public static final [GL_DEPTH_BITS](https://developer.android.com/reference/android/opengl/GLES20.html#GL_DEPTH_BITS)
        pub const GL_DEPTH_BITS : i32 = 3414;

        /// public static final [GL_DEPTH_BUFFER_BIT](https://developer.android.com/reference/android/opengl/GLES20.html#GL_DEPTH_BUFFER_BIT)
        pub const GL_DEPTH_BUFFER_BIT : i32 = 256;

        /// public static final [GL_DEPTH_CLEAR_VALUE](https://developer.android.com/reference/android/opengl/GLES20.html#GL_DEPTH_CLEAR_VALUE)
        pub const GL_DEPTH_CLEAR_VALUE : i32 = 2931;

        /// public static final [GL_DEPTH_COMPONENT](https://developer.android.com/reference/android/opengl/GLES20.html#GL_DEPTH_COMPONENT)
        pub const GL_DEPTH_COMPONENT : i32 = 6402;

        /// public static final [GL_DEPTH_COMPONENT16](https://developer.android.com/reference/android/opengl/GLES20.html#GL_DEPTH_COMPONENT16)
        pub const GL_DEPTH_COMPONENT16 : i32 = 33189;

        /// public static final [GL_DEPTH_FUNC](https://developer.android.com/reference/android/opengl/GLES20.html#GL_DEPTH_FUNC)
        pub const GL_DEPTH_FUNC : i32 = 2932;

        /// public static final [GL_DEPTH_RANGE](https://developer.android.com/reference/android/opengl/GLES20.html#GL_DEPTH_RANGE)
        pub const GL_DEPTH_RANGE : i32 = 2928;

        /// public static final [GL_DEPTH_TEST](https://developer.android.com/reference/android/opengl/GLES20.html#GL_DEPTH_TEST)
        pub const GL_DEPTH_TEST : i32 = 2929;

        /// public static final [GL_DEPTH_WRITEMASK](https://developer.android.com/reference/android/opengl/GLES20.html#GL_DEPTH_WRITEMASK)
        pub const GL_DEPTH_WRITEMASK : i32 = 2930;

        /// public static final [GL_DITHER](https://developer.android.com/reference/android/opengl/GLES20.html#GL_DITHER)
        pub const GL_DITHER : i32 = 3024;

        /// public static final [GL_DONT_CARE](https://developer.android.com/reference/android/opengl/GLES20.html#GL_DONT_CARE)
        pub const GL_DONT_CARE : i32 = 4352;

        /// public static final [GL_DST_ALPHA](https://developer.android.com/reference/android/opengl/GLES20.html#GL_DST_ALPHA)
        pub const GL_DST_ALPHA : i32 = 772;

        /// public static final [GL_DST_COLOR](https://developer.android.com/reference/android/opengl/GLES20.html#GL_DST_COLOR)
        pub const GL_DST_COLOR : i32 = 774;

        /// public static final [GL_DYNAMIC_DRAW](https://developer.android.com/reference/android/opengl/GLES20.html#GL_DYNAMIC_DRAW)
        pub const GL_DYNAMIC_DRAW : i32 = 35048;

        /// public static final [GL_ELEMENT_ARRAY_BUFFER](https://developer.android.com/reference/android/opengl/GLES20.html#GL_ELEMENT_ARRAY_BUFFER)
        pub const GL_ELEMENT_ARRAY_BUFFER : i32 = 34963;

        /// public static final [GL_ELEMENT_ARRAY_BUFFER_BINDING](https://developer.android.com/reference/android/opengl/GLES20.html#GL_ELEMENT_ARRAY_BUFFER_BINDING)
        pub const GL_ELEMENT_ARRAY_BUFFER_BINDING : i32 = 34965;

        /// public static final [GL_EQUAL](https://developer.android.com/reference/android/opengl/GLES20.html#GL_EQUAL)
        pub const GL_EQUAL : i32 = 514;

        /// public static final [GL_EXTENSIONS](https://developer.android.com/reference/android/opengl/GLES20.html#GL_EXTENSIONS)
        pub const GL_EXTENSIONS : i32 = 7939;

        /// public static final [GL_FALSE](https://developer.android.com/reference/android/opengl/GLES20.html#GL_FALSE)
        pub const GL_FALSE : i32 = 0;

        /// public static final [GL_FASTEST](https://developer.android.com/reference/android/opengl/GLES20.html#GL_FASTEST)
        pub const GL_FASTEST : i32 = 4353;

        /// public static final [GL_FIXED](https://developer.android.com/reference/android/opengl/GLES20.html#GL_FIXED)
        pub const GL_FIXED : i32 = 5132;

        /// public static final [GL_FLOAT](https://developer.android.com/reference/android/opengl/GLES20.html#GL_FLOAT)
        pub const GL_FLOAT : i32 = 5126;

        /// public static final [GL_FLOAT_MAT2](https://developer.android.com/reference/android/opengl/GLES20.html#GL_FLOAT_MAT2)
        pub const GL_FLOAT_MAT2 : i32 = 35674;

        /// public static final [GL_FLOAT_MAT3](https://developer.android.com/reference/android/opengl/GLES20.html#GL_FLOAT_MAT3)
        pub const GL_FLOAT_MAT3 : i32 = 35675;

        /// public static final [GL_FLOAT_MAT4](https://developer.android.com/reference/android/opengl/GLES20.html#GL_FLOAT_MAT4)
        pub const GL_FLOAT_MAT4 : i32 = 35676;

        /// public static final [GL_FLOAT_VEC2](https://developer.android.com/reference/android/opengl/GLES20.html#GL_FLOAT_VEC2)
        pub const GL_FLOAT_VEC2 : i32 = 35664;

        /// public static final [GL_FLOAT_VEC3](https://developer.android.com/reference/android/opengl/GLES20.html#GL_FLOAT_VEC3)
        pub const GL_FLOAT_VEC3 : i32 = 35665;

        /// public static final [GL_FLOAT_VEC4](https://developer.android.com/reference/android/opengl/GLES20.html#GL_FLOAT_VEC4)
        pub const GL_FLOAT_VEC4 : i32 = 35666;

        /// public static final [GL_FRAGMENT_SHADER](https://developer.android.com/reference/android/opengl/GLES20.html#GL_FRAGMENT_SHADER)
        pub const GL_FRAGMENT_SHADER : i32 = 35632;

        /// public static final [GL_FRAMEBUFFER](https://developer.android.com/reference/android/opengl/GLES20.html#GL_FRAMEBUFFER)
        pub const GL_FRAMEBUFFER : i32 = 36160;

        /// public static final [GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME](https://developer.android.com/reference/android/opengl/GLES20.html#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME)
        pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME : i32 = 36049;

        /// public static final [GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE](https://developer.android.com/reference/android/opengl/GLES20.html#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE)
        pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE : i32 = 36048;

        /// public static final [GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE](https://developer.android.com/reference/android/opengl/GLES20.html#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE)
        pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE : i32 = 36051;

        /// public static final [GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL](https://developer.android.com/reference/android/opengl/GLES20.html#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL)
        pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL : i32 = 36050;

        /// public static final [GL_FRAMEBUFFER_BINDING](https://developer.android.com/reference/android/opengl/GLES20.html#GL_FRAMEBUFFER_BINDING)
        pub const GL_FRAMEBUFFER_BINDING : i32 = 36006;

        /// public static final [GL_FRAMEBUFFER_COMPLETE](https://developer.android.com/reference/android/opengl/GLES20.html#GL_FRAMEBUFFER_COMPLETE)
        pub const GL_FRAMEBUFFER_COMPLETE : i32 = 36053;

        /// public static final [GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT](https://developer.android.com/reference/android/opengl/GLES20.html#GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT)
        pub const GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT : i32 = 36054;

        /// public static final [GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS](https://developer.android.com/reference/android/opengl/GLES20.html#GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS)
        pub const GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS : i32 = 36057;

        /// public static final [GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT](https://developer.android.com/reference/android/opengl/GLES20.html#GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT)
        pub const GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT : i32 = 36055;

        /// public static final [GL_FRAMEBUFFER_UNSUPPORTED](https://developer.android.com/reference/android/opengl/GLES20.html#GL_FRAMEBUFFER_UNSUPPORTED)
        pub const GL_FRAMEBUFFER_UNSUPPORTED : i32 = 36061;

        /// public static final [GL_FRONT](https://developer.android.com/reference/android/opengl/GLES20.html#GL_FRONT)
        pub const GL_FRONT : i32 = 1028;

        /// public static final [GL_FRONT_AND_BACK](https://developer.android.com/reference/android/opengl/GLES20.html#GL_FRONT_AND_BACK)
        pub const GL_FRONT_AND_BACK : i32 = 1032;

        /// public static final [GL_FRONT_FACE](https://developer.android.com/reference/android/opengl/GLES20.html#GL_FRONT_FACE)
        pub const GL_FRONT_FACE : i32 = 2886;

        /// public static final [GL_FUNC_ADD](https://developer.android.com/reference/android/opengl/GLES20.html#GL_FUNC_ADD)
        pub const GL_FUNC_ADD : i32 = 32774;

        /// public static final [GL_FUNC_REVERSE_SUBTRACT](https://developer.android.com/reference/android/opengl/GLES20.html#GL_FUNC_REVERSE_SUBTRACT)
        pub const GL_FUNC_REVERSE_SUBTRACT : i32 = 32779;

        /// public static final [GL_FUNC_SUBTRACT](https://developer.android.com/reference/android/opengl/GLES20.html#GL_FUNC_SUBTRACT)
        pub const GL_FUNC_SUBTRACT : i32 = 32778;

        /// public static final [GL_GENERATE_MIPMAP_HINT](https://developer.android.com/reference/android/opengl/GLES20.html#GL_GENERATE_MIPMAP_HINT)
        pub const GL_GENERATE_MIPMAP_HINT : i32 = 33170;

        /// public static final [GL_GEQUAL](https://developer.android.com/reference/android/opengl/GLES20.html#GL_GEQUAL)
        pub const GL_GEQUAL : i32 = 518;

        /// public static final [GL_GREATER](https://developer.android.com/reference/android/opengl/GLES20.html#GL_GREATER)
        pub const GL_GREATER : i32 = 516;

        /// public static final [GL_GREEN_BITS](https://developer.android.com/reference/android/opengl/GLES20.html#GL_GREEN_BITS)
        pub const GL_GREEN_BITS : i32 = 3411;

        /// public static final [GL_HIGH_FLOAT](https://developer.android.com/reference/android/opengl/GLES20.html#GL_HIGH_FLOAT)
        pub const GL_HIGH_FLOAT : i32 = 36338;

        /// public static final [GL_HIGH_INT](https://developer.android.com/reference/android/opengl/GLES20.html#GL_HIGH_INT)
        pub const GL_HIGH_INT : i32 = 36341;

        /// public static final [GL_IMPLEMENTATION_COLOR_READ_FORMAT](https://developer.android.com/reference/android/opengl/GLES20.html#GL_IMPLEMENTATION_COLOR_READ_FORMAT)
        pub const GL_IMPLEMENTATION_COLOR_READ_FORMAT : i32 = 35739;

        /// public static final [GL_IMPLEMENTATION_COLOR_READ_TYPE](https://developer.android.com/reference/android/opengl/GLES20.html#GL_IMPLEMENTATION_COLOR_READ_TYPE)
        pub const GL_IMPLEMENTATION_COLOR_READ_TYPE : i32 = 35738;

        /// public static final [GL_INCR](https://developer.android.com/reference/android/opengl/GLES20.html#GL_INCR)
        pub const GL_INCR : i32 = 7682;

        /// public static final [GL_INCR_WRAP](https://developer.android.com/reference/android/opengl/GLES20.html#GL_INCR_WRAP)
        pub const GL_INCR_WRAP : i32 = 34055;

        /// public static final [GL_INFO_LOG_LENGTH](https://developer.android.com/reference/android/opengl/GLES20.html#GL_INFO_LOG_LENGTH)
        pub const GL_INFO_LOG_LENGTH : i32 = 35716;

        /// public static final [GL_INT](https://developer.android.com/reference/android/opengl/GLES20.html#GL_INT)
        pub const GL_INT : i32 = 5124;

        /// public static final [GL_INT_VEC2](https://developer.android.com/reference/android/opengl/GLES20.html#GL_INT_VEC2)
        pub const GL_INT_VEC2 : i32 = 35667;

        /// public static final [GL_INT_VEC3](https://developer.android.com/reference/android/opengl/GLES20.html#GL_INT_VEC3)
        pub const GL_INT_VEC3 : i32 = 35668;

        /// public static final [GL_INT_VEC4](https://developer.android.com/reference/android/opengl/GLES20.html#GL_INT_VEC4)
        pub const GL_INT_VEC4 : i32 = 35669;

        /// public static final [GL_INVALID_ENUM](https://developer.android.com/reference/android/opengl/GLES20.html#GL_INVALID_ENUM)
        pub const GL_INVALID_ENUM : i32 = 1280;

        /// public static final [GL_INVALID_FRAMEBUFFER_OPERATION](https://developer.android.com/reference/android/opengl/GLES20.html#GL_INVALID_FRAMEBUFFER_OPERATION)
        pub const GL_INVALID_FRAMEBUFFER_OPERATION : i32 = 1286;

        /// public static final [GL_INVALID_OPERATION](https://developer.android.com/reference/android/opengl/GLES20.html#GL_INVALID_OPERATION)
        pub const GL_INVALID_OPERATION : i32 = 1282;

        /// public static final [GL_INVALID_VALUE](https://developer.android.com/reference/android/opengl/GLES20.html#GL_INVALID_VALUE)
        pub const GL_INVALID_VALUE : i32 = 1281;

        /// public static final [GL_INVERT](https://developer.android.com/reference/android/opengl/GLES20.html#GL_INVERT)
        pub const GL_INVERT : i32 = 5386;

        /// public static final [GL_KEEP](https://developer.android.com/reference/android/opengl/GLES20.html#GL_KEEP)
        pub const GL_KEEP : i32 = 7680;

        /// public static final [GL_LEQUAL](https://developer.android.com/reference/android/opengl/GLES20.html#GL_LEQUAL)
        pub const GL_LEQUAL : i32 = 515;

        /// public static final [GL_LESS](https://developer.android.com/reference/android/opengl/GLES20.html#GL_LESS)
        pub const GL_LESS : i32 = 513;

        /// public static final [GL_LINEAR](https://developer.android.com/reference/android/opengl/GLES20.html#GL_LINEAR)
        pub const GL_LINEAR : i32 = 9729;

        /// public static final [GL_LINEAR_MIPMAP_LINEAR](https://developer.android.com/reference/android/opengl/GLES20.html#GL_LINEAR_MIPMAP_LINEAR)
        pub const GL_LINEAR_MIPMAP_LINEAR : i32 = 9987;

        /// public static final [GL_LINEAR_MIPMAP_NEAREST](https://developer.android.com/reference/android/opengl/GLES20.html#GL_LINEAR_MIPMAP_NEAREST)
        pub const GL_LINEAR_MIPMAP_NEAREST : i32 = 9985;

        /// public static final [GL_LINES](https://developer.android.com/reference/android/opengl/GLES20.html#GL_LINES)
        pub const GL_LINES : i32 = 1;

        /// public static final [GL_LINE_LOOP](https://developer.android.com/reference/android/opengl/GLES20.html#GL_LINE_LOOP)
        pub const GL_LINE_LOOP : i32 = 2;

        /// public static final [GL_LINE_STRIP](https://developer.android.com/reference/android/opengl/GLES20.html#GL_LINE_STRIP)
        pub const GL_LINE_STRIP : i32 = 3;

        /// public static final [GL_LINE_WIDTH](https://developer.android.com/reference/android/opengl/GLES20.html#GL_LINE_WIDTH)
        pub const GL_LINE_WIDTH : i32 = 2849;

        /// public static final [GL_LINK_STATUS](https://developer.android.com/reference/android/opengl/GLES20.html#GL_LINK_STATUS)
        pub const GL_LINK_STATUS : i32 = 35714;

        /// public static final [GL_LOW_FLOAT](https://developer.android.com/reference/android/opengl/GLES20.html#GL_LOW_FLOAT)
        pub const GL_LOW_FLOAT : i32 = 36336;

        /// public static final [GL_LOW_INT](https://developer.android.com/reference/android/opengl/GLES20.html#GL_LOW_INT)
        pub const GL_LOW_INT : i32 = 36339;

        /// public static final [GL_LUMINANCE](https://developer.android.com/reference/android/opengl/GLES20.html#GL_LUMINANCE)
        pub const GL_LUMINANCE : i32 = 6409;

        /// public static final [GL_LUMINANCE_ALPHA](https://developer.android.com/reference/android/opengl/GLES20.html#GL_LUMINANCE_ALPHA)
        pub const GL_LUMINANCE_ALPHA : i32 = 6410;

        /// public static final [GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS](https://developer.android.com/reference/android/opengl/GLES20.html#GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS)
        pub const GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS : i32 = 35661;

        /// public static final [GL_MAX_CUBE_MAP_TEXTURE_SIZE](https://developer.android.com/reference/android/opengl/GLES20.html#GL_MAX_CUBE_MAP_TEXTURE_SIZE)
        pub const GL_MAX_CUBE_MAP_TEXTURE_SIZE : i32 = 34076;

        /// public static final [GL_MAX_FRAGMENT_UNIFORM_VECTORS](https://developer.android.com/reference/android/opengl/GLES20.html#GL_MAX_FRAGMENT_UNIFORM_VECTORS)
        pub const GL_MAX_FRAGMENT_UNIFORM_VECTORS : i32 = 36349;

        /// public static final [GL_MAX_RENDERBUFFER_SIZE](https://developer.android.com/reference/android/opengl/GLES20.html#GL_MAX_RENDERBUFFER_SIZE)
        pub const GL_MAX_RENDERBUFFER_SIZE : i32 = 34024;

        /// public static final [GL_MAX_TEXTURE_IMAGE_UNITS](https://developer.android.com/reference/android/opengl/GLES20.html#GL_MAX_TEXTURE_IMAGE_UNITS)
        pub const GL_MAX_TEXTURE_IMAGE_UNITS : i32 = 34930;

        /// public static final [GL_MAX_TEXTURE_SIZE](https://developer.android.com/reference/android/opengl/GLES20.html#GL_MAX_TEXTURE_SIZE)
        pub const GL_MAX_TEXTURE_SIZE : i32 = 3379;

        /// public static final [GL_MAX_VARYING_VECTORS](https://developer.android.com/reference/android/opengl/GLES20.html#GL_MAX_VARYING_VECTORS)
        pub const GL_MAX_VARYING_VECTORS : i32 = 36348;

        /// public static final [GL_MAX_VERTEX_ATTRIBS](https://developer.android.com/reference/android/opengl/GLES20.html#GL_MAX_VERTEX_ATTRIBS)
        pub const GL_MAX_VERTEX_ATTRIBS : i32 = 34921;

        /// public static final [GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS](https://developer.android.com/reference/android/opengl/GLES20.html#GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS)
        pub const GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS : i32 = 35660;

        /// public static final [GL_MAX_VERTEX_UNIFORM_VECTORS](https://developer.android.com/reference/android/opengl/GLES20.html#GL_MAX_VERTEX_UNIFORM_VECTORS)
        pub const GL_MAX_VERTEX_UNIFORM_VECTORS : i32 = 36347;

        /// public static final [GL_MAX_VIEWPORT_DIMS](https://developer.android.com/reference/android/opengl/GLES20.html#GL_MAX_VIEWPORT_DIMS)
        pub const GL_MAX_VIEWPORT_DIMS : i32 = 3386;

        /// public static final [GL_MEDIUM_FLOAT](https://developer.android.com/reference/android/opengl/GLES20.html#GL_MEDIUM_FLOAT)
        pub const GL_MEDIUM_FLOAT : i32 = 36337;

        /// public static final [GL_MEDIUM_INT](https://developer.android.com/reference/android/opengl/GLES20.html#GL_MEDIUM_INT)
        pub const GL_MEDIUM_INT : i32 = 36340;

        /// public static final [GL_MIRRORED_REPEAT](https://developer.android.com/reference/android/opengl/GLES20.html#GL_MIRRORED_REPEAT)
        pub const GL_MIRRORED_REPEAT : i32 = 33648;

        /// public static final [GL_NEAREST](https://developer.android.com/reference/android/opengl/GLES20.html#GL_NEAREST)
        pub const GL_NEAREST : i32 = 9728;

        /// public static final [GL_NEAREST_MIPMAP_LINEAR](https://developer.android.com/reference/android/opengl/GLES20.html#GL_NEAREST_MIPMAP_LINEAR)
        pub const GL_NEAREST_MIPMAP_LINEAR : i32 = 9986;

        /// public static final [GL_NEAREST_MIPMAP_NEAREST](https://developer.android.com/reference/android/opengl/GLES20.html#GL_NEAREST_MIPMAP_NEAREST)
        pub const GL_NEAREST_MIPMAP_NEAREST : i32 = 9984;

        /// public static final [GL_NEVER](https://developer.android.com/reference/android/opengl/GLES20.html#GL_NEVER)
        pub const GL_NEVER : i32 = 512;

        /// public static final [GL_NICEST](https://developer.android.com/reference/android/opengl/GLES20.html#GL_NICEST)
        pub const GL_NICEST : i32 = 4354;

        /// public static final [GL_NONE](https://developer.android.com/reference/android/opengl/GLES20.html#GL_NONE)
        pub const GL_NONE : i32 = 0;

        /// public static final [GL_NOTEQUAL](https://developer.android.com/reference/android/opengl/GLES20.html#GL_NOTEQUAL)
        pub const GL_NOTEQUAL : i32 = 517;

        /// public static final [GL_NO_ERROR](https://developer.android.com/reference/android/opengl/GLES20.html#GL_NO_ERROR)
        pub const GL_NO_ERROR : i32 = 0;

        /// public static final [GL_NUM_COMPRESSED_TEXTURE_FORMATS](https://developer.android.com/reference/android/opengl/GLES20.html#GL_NUM_COMPRESSED_TEXTURE_FORMATS)
        pub const GL_NUM_COMPRESSED_TEXTURE_FORMATS : i32 = 34466;

        /// public static final [GL_NUM_SHADER_BINARY_FORMATS](https://developer.android.com/reference/android/opengl/GLES20.html#GL_NUM_SHADER_BINARY_FORMATS)
        pub const GL_NUM_SHADER_BINARY_FORMATS : i32 = 36345;

        /// public static final [GL_ONE](https://developer.android.com/reference/android/opengl/GLES20.html#GL_ONE)
        pub const GL_ONE : i32 = 1;

        /// public static final [GL_ONE_MINUS_CONSTANT_ALPHA](https://developer.android.com/reference/android/opengl/GLES20.html#GL_ONE_MINUS_CONSTANT_ALPHA)
        pub const GL_ONE_MINUS_CONSTANT_ALPHA : i32 = 32772;

        /// public static final [GL_ONE_MINUS_CONSTANT_COLOR](https://developer.android.com/reference/android/opengl/GLES20.html#GL_ONE_MINUS_CONSTANT_COLOR)
        pub const GL_ONE_MINUS_CONSTANT_COLOR : i32 = 32770;

        /// public static final [GL_ONE_MINUS_DST_ALPHA](https://developer.android.com/reference/android/opengl/GLES20.html#GL_ONE_MINUS_DST_ALPHA)
        pub const GL_ONE_MINUS_DST_ALPHA : i32 = 773;

        /// public static final [GL_ONE_MINUS_DST_COLOR](https://developer.android.com/reference/android/opengl/GLES20.html#GL_ONE_MINUS_DST_COLOR)
        pub const GL_ONE_MINUS_DST_COLOR : i32 = 775;

        /// public static final [GL_ONE_MINUS_SRC_ALPHA](https://developer.android.com/reference/android/opengl/GLES20.html#GL_ONE_MINUS_SRC_ALPHA)
        pub const GL_ONE_MINUS_SRC_ALPHA : i32 = 771;

        /// public static final [GL_ONE_MINUS_SRC_COLOR](https://developer.android.com/reference/android/opengl/GLES20.html#GL_ONE_MINUS_SRC_COLOR)
        pub const GL_ONE_MINUS_SRC_COLOR : i32 = 769;

        /// public static final [GL_OUT_OF_MEMORY](https://developer.android.com/reference/android/opengl/GLES20.html#GL_OUT_OF_MEMORY)
        pub const GL_OUT_OF_MEMORY : i32 = 1285;

        /// public static final [GL_PACK_ALIGNMENT](https://developer.android.com/reference/android/opengl/GLES20.html#GL_PACK_ALIGNMENT)
        pub const GL_PACK_ALIGNMENT : i32 = 3333;

        /// public static final [GL_POINTS](https://developer.android.com/reference/android/opengl/GLES20.html#GL_POINTS)
        pub const GL_POINTS : i32 = 0;

        /// public static final [GL_POLYGON_OFFSET_FACTOR](https://developer.android.com/reference/android/opengl/GLES20.html#GL_POLYGON_OFFSET_FACTOR)
        pub const GL_POLYGON_OFFSET_FACTOR : i32 = 32824;

        /// public static final [GL_POLYGON_OFFSET_FILL](https://developer.android.com/reference/android/opengl/GLES20.html#GL_POLYGON_OFFSET_FILL)
        pub const GL_POLYGON_OFFSET_FILL : i32 = 32823;

        /// public static final [GL_POLYGON_OFFSET_UNITS](https://developer.android.com/reference/android/opengl/GLES20.html#GL_POLYGON_OFFSET_UNITS)
        pub const GL_POLYGON_OFFSET_UNITS : i32 = 10752;

        /// public static final [GL_RED_BITS](https://developer.android.com/reference/android/opengl/GLES20.html#GL_RED_BITS)
        pub const GL_RED_BITS : i32 = 3410;

        /// public static final [GL_RENDERBUFFER](https://developer.android.com/reference/android/opengl/GLES20.html#GL_RENDERBUFFER)
        pub const GL_RENDERBUFFER : i32 = 36161;

        /// public static final [GL_RENDERBUFFER_ALPHA_SIZE](https://developer.android.com/reference/android/opengl/GLES20.html#GL_RENDERBUFFER_ALPHA_SIZE)
        pub const GL_RENDERBUFFER_ALPHA_SIZE : i32 = 36179;

        /// public static final [GL_RENDERBUFFER_BINDING](https://developer.android.com/reference/android/opengl/GLES20.html#GL_RENDERBUFFER_BINDING)
        pub const GL_RENDERBUFFER_BINDING : i32 = 36007;

        /// public static final [GL_RENDERBUFFER_BLUE_SIZE](https://developer.android.com/reference/android/opengl/GLES20.html#GL_RENDERBUFFER_BLUE_SIZE)
        pub const GL_RENDERBUFFER_BLUE_SIZE : i32 = 36178;

        /// public static final [GL_RENDERBUFFER_DEPTH_SIZE](https://developer.android.com/reference/android/opengl/GLES20.html#GL_RENDERBUFFER_DEPTH_SIZE)
        pub const GL_RENDERBUFFER_DEPTH_SIZE : i32 = 36180;

        /// public static final [GL_RENDERBUFFER_GREEN_SIZE](https://developer.android.com/reference/android/opengl/GLES20.html#GL_RENDERBUFFER_GREEN_SIZE)
        pub const GL_RENDERBUFFER_GREEN_SIZE : i32 = 36177;

        /// public static final [GL_RENDERBUFFER_HEIGHT](https://developer.android.com/reference/android/opengl/GLES20.html#GL_RENDERBUFFER_HEIGHT)
        pub const GL_RENDERBUFFER_HEIGHT : i32 = 36163;

        /// public static final [GL_RENDERBUFFER_INTERNAL_FORMAT](https://developer.android.com/reference/android/opengl/GLES20.html#GL_RENDERBUFFER_INTERNAL_FORMAT)
        pub const GL_RENDERBUFFER_INTERNAL_FORMAT : i32 = 36164;

        /// public static final [GL_RENDERBUFFER_RED_SIZE](https://developer.android.com/reference/android/opengl/GLES20.html#GL_RENDERBUFFER_RED_SIZE)
        pub const GL_RENDERBUFFER_RED_SIZE : i32 = 36176;

        /// public static final [GL_RENDERBUFFER_STENCIL_SIZE](https://developer.android.com/reference/android/opengl/GLES20.html#GL_RENDERBUFFER_STENCIL_SIZE)
        pub const GL_RENDERBUFFER_STENCIL_SIZE : i32 = 36181;

        /// public static final [GL_RENDERBUFFER_WIDTH](https://developer.android.com/reference/android/opengl/GLES20.html#GL_RENDERBUFFER_WIDTH)
        pub const GL_RENDERBUFFER_WIDTH : i32 = 36162;

        /// public static final [GL_RENDERER](https://developer.android.com/reference/android/opengl/GLES20.html#GL_RENDERER)
        pub const GL_RENDERER : i32 = 7937;

        /// public static final [GL_REPEAT](https://developer.android.com/reference/android/opengl/GLES20.html#GL_REPEAT)
        pub const GL_REPEAT : i32 = 10497;

        /// public static final [GL_REPLACE](https://developer.android.com/reference/android/opengl/GLES20.html#GL_REPLACE)
        pub const GL_REPLACE : i32 = 7681;

        /// public static final [GL_RGB](https://developer.android.com/reference/android/opengl/GLES20.html#GL_RGB)
        pub const GL_RGB : i32 = 6407;

        /// public static final [GL_RGB565](https://developer.android.com/reference/android/opengl/GLES20.html#GL_RGB565)
        pub const GL_RGB565 : i32 = 36194;

        /// public static final [GL_RGB5_A1](https://developer.android.com/reference/android/opengl/GLES20.html#GL_RGB5_A1)
        pub const GL_RGB5_A1 : i32 = 32855;

        /// public static final [GL_RGBA](https://developer.android.com/reference/android/opengl/GLES20.html#GL_RGBA)
        pub const GL_RGBA : i32 = 6408;

        /// public static final [GL_RGBA4](https://developer.android.com/reference/android/opengl/GLES20.html#GL_RGBA4)
        pub const GL_RGBA4 : i32 = 32854;

        /// public static final [GL_SAMPLER_2D](https://developer.android.com/reference/android/opengl/GLES20.html#GL_SAMPLER_2D)
        pub const GL_SAMPLER_2D : i32 = 35678;

        /// public static final [GL_SAMPLER_CUBE](https://developer.android.com/reference/android/opengl/GLES20.html#GL_SAMPLER_CUBE)
        pub const GL_SAMPLER_CUBE : i32 = 35680;

        /// public static final [GL_SAMPLES](https://developer.android.com/reference/android/opengl/GLES20.html#GL_SAMPLES)
        pub const GL_SAMPLES : i32 = 32937;

        /// public static final [GL_SAMPLE_ALPHA_TO_COVERAGE](https://developer.android.com/reference/android/opengl/GLES20.html#GL_SAMPLE_ALPHA_TO_COVERAGE)
        pub const GL_SAMPLE_ALPHA_TO_COVERAGE : i32 = 32926;

        /// public static final [GL_SAMPLE_BUFFERS](https://developer.android.com/reference/android/opengl/GLES20.html#GL_SAMPLE_BUFFERS)
        pub const GL_SAMPLE_BUFFERS : i32 = 32936;

        /// public static final [GL_SAMPLE_COVERAGE](https://developer.android.com/reference/android/opengl/GLES20.html#GL_SAMPLE_COVERAGE)
        pub const GL_SAMPLE_COVERAGE : i32 = 32928;

        /// public static final [GL_SAMPLE_COVERAGE_INVERT](https://developer.android.com/reference/android/opengl/GLES20.html#GL_SAMPLE_COVERAGE_INVERT)
        pub const GL_SAMPLE_COVERAGE_INVERT : i32 = 32939;

        /// public static final [GL_SAMPLE_COVERAGE_VALUE](https://developer.android.com/reference/android/opengl/GLES20.html#GL_SAMPLE_COVERAGE_VALUE)
        pub const GL_SAMPLE_COVERAGE_VALUE : i32 = 32938;

        /// public static final [GL_SCISSOR_BOX](https://developer.android.com/reference/android/opengl/GLES20.html#GL_SCISSOR_BOX)
        pub const GL_SCISSOR_BOX : i32 = 3088;

        /// public static final [GL_SCISSOR_TEST](https://developer.android.com/reference/android/opengl/GLES20.html#GL_SCISSOR_TEST)
        pub const GL_SCISSOR_TEST : i32 = 3089;

        /// public static final [GL_SHADER_BINARY_FORMATS](https://developer.android.com/reference/android/opengl/GLES20.html#GL_SHADER_BINARY_FORMATS)
        pub const GL_SHADER_BINARY_FORMATS : i32 = 36344;

        /// public static final [GL_SHADER_COMPILER](https://developer.android.com/reference/android/opengl/GLES20.html#GL_SHADER_COMPILER)
        pub const GL_SHADER_COMPILER : i32 = 36346;

        /// public static final [GL_SHADER_SOURCE_LENGTH](https://developer.android.com/reference/android/opengl/GLES20.html#GL_SHADER_SOURCE_LENGTH)
        pub const GL_SHADER_SOURCE_LENGTH : i32 = 35720;

        /// public static final [GL_SHADER_TYPE](https://developer.android.com/reference/android/opengl/GLES20.html#GL_SHADER_TYPE)
        pub const GL_SHADER_TYPE : i32 = 35663;

        /// public static final [GL_SHADING_LANGUAGE_VERSION](https://developer.android.com/reference/android/opengl/GLES20.html#GL_SHADING_LANGUAGE_VERSION)
        pub const GL_SHADING_LANGUAGE_VERSION : i32 = 35724;

        /// public static final [GL_SHORT](https://developer.android.com/reference/android/opengl/GLES20.html#GL_SHORT)
        pub const GL_SHORT : i32 = 5122;

        /// public static final [GL_SRC_ALPHA](https://developer.android.com/reference/android/opengl/GLES20.html#GL_SRC_ALPHA)
        pub const GL_SRC_ALPHA : i32 = 770;

        /// public static final [GL_SRC_ALPHA_SATURATE](https://developer.android.com/reference/android/opengl/GLES20.html#GL_SRC_ALPHA_SATURATE)
        pub const GL_SRC_ALPHA_SATURATE : i32 = 776;

        /// public static final [GL_SRC_COLOR](https://developer.android.com/reference/android/opengl/GLES20.html#GL_SRC_COLOR)
        pub const GL_SRC_COLOR : i32 = 768;

        /// public static final [GL_STATIC_DRAW](https://developer.android.com/reference/android/opengl/GLES20.html#GL_STATIC_DRAW)
        pub const GL_STATIC_DRAW : i32 = 35044;

        /// public static final [GL_STENCIL_ATTACHMENT](https://developer.android.com/reference/android/opengl/GLES20.html#GL_STENCIL_ATTACHMENT)
        pub const GL_STENCIL_ATTACHMENT : i32 = 36128;

        /// public static final [GL_STENCIL_BACK_FAIL](https://developer.android.com/reference/android/opengl/GLES20.html#GL_STENCIL_BACK_FAIL)
        pub const GL_STENCIL_BACK_FAIL : i32 = 34817;

        /// public static final [GL_STENCIL_BACK_FUNC](https://developer.android.com/reference/android/opengl/GLES20.html#GL_STENCIL_BACK_FUNC)
        pub const GL_STENCIL_BACK_FUNC : i32 = 34816;

        /// public static final [GL_STENCIL_BACK_PASS_DEPTH_FAIL](https://developer.android.com/reference/android/opengl/GLES20.html#GL_STENCIL_BACK_PASS_DEPTH_FAIL)
        pub const GL_STENCIL_BACK_PASS_DEPTH_FAIL : i32 = 34818;

        /// public static final [GL_STENCIL_BACK_PASS_DEPTH_PASS](https://developer.android.com/reference/android/opengl/GLES20.html#GL_STENCIL_BACK_PASS_DEPTH_PASS)
        pub const GL_STENCIL_BACK_PASS_DEPTH_PASS : i32 = 34819;

        /// public static final [GL_STENCIL_BACK_REF](https://developer.android.com/reference/android/opengl/GLES20.html#GL_STENCIL_BACK_REF)
        pub const GL_STENCIL_BACK_REF : i32 = 36003;

        /// public static final [GL_STENCIL_BACK_VALUE_MASK](https://developer.android.com/reference/android/opengl/GLES20.html#GL_STENCIL_BACK_VALUE_MASK)
        pub const GL_STENCIL_BACK_VALUE_MASK : i32 = 36004;

        /// public static final [GL_STENCIL_BACK_WRITEMASK](https://developer.android.com/reference/android/opengl/GLES20.html#GL_STENCIL_BACK_WRITEMASK)
        pub const GL_STENCIL_BACK_WRITEMASK : i32 = 36005;

        /// public static final [GL_STENCIL_BITS](https://developer.android.com/reference/android/opengl/GLES20.html#GL_STENCIL_BITS)
        pub const GL_STENCIL_BITS : i32 = 3415;

        /// public static final [GL_STENCIL_BUFFER_BIT](https://developer.android.com/reference/android/opengl/GLES20.html#GL_STENCIL_BUFFER_BIT)
        pub const GL_STENCIL_BUFFER_BIT : i32 = 1024;

        /// public static final [GL_STENCIL_CLEAR_VALUE](https://developer.android.com/reference/android/opengl/GLES20.html#GL_STENCIL_CLEAR_VALUE)
        pub const GL_STENCIL_CLEAR_VALUE : i32 = 2961;

        /// public static final [GL_STENCIL_FAIL](https://developer.android.com/reference/android/opengl/GLES20.html#GL_STENCIL_FAIL)
        pub const GL_STENCIL_FAIL : i32 = 2964;

        /// public static final [GL_STENCIL_FUNC](https://developer.android.com/reference/android/opengl/GLES20.html#GL_STENCIL_FUNC)
        pub const GL_STENCIL_FUNC : i32 = 2962;

        /// public static final [GL_STENCIL_INDEX](https://developer.android.com/reference/android/opengl/GLES20.html#GL_STENCIL_INDEX)
        #[deprecated] pub const GL_STENCIL_INDEX : i32 = 6401;

        /// public static final [GL_STENCIL_INDEX8](https://developer.android.com/reference/android/opengl/GLES20.html#GL_STENCIL_INDEX8)
        pub const GL_STENCIL_INDEX8 : i32 = 36168;

        /// public static final [GL_STENCIL_PASS_DEPTH_FAIL](https://developer.android.com/reference/android/opengl/GLES20.html#GL_STENCIL_PASS_DEPTH_FAIL)
        pub const GL_STENCIL_PASS_DEPTH_FAIL : i32 = 2965;

        /// public static final [GL_STENCIL_PASS_DEPTH_PASS](https://developer.android.com/reference/android/opengl/GLES20.html#GL_STENCIL_PASS_DEPTH_PASS)
        pub const GL_STENCIL_PASS_DEPTH_PASS : i32 = 2966;

        /// public static final [GL_STENCIL_REF](https://developer.android.com/reference/android/opengl/GLES20.html#GL_STENCIL_REF)
        pub const GL_STENCIL_REF : i32 = 2967;

        /// public static final [GL_STENCIL_TEST](https://developer.android.com/reference/android/opengl/GLES20.html#GL_STENCIL_TEST)
        pub const GL_STENCIL_TEST : i32 = 2960;

        /// public static final [GL_STENCIL_VALUE_MASK](https://developer.android.com/reference/android/opengl/GLES20.html#GL_STENCIL_VALUE_MASK)
        pub const GL_STENCIL_VALUE_MASK : i32 = 2963;

        /// public static final [GL_STENCIL_WRITEMASK](https://developer.android.com/reference/android/opengl/GLES20.html#GL_STENCIL_WRITEMASK)
        pub const GL_STENCIL_WRITEMASK : i32 = 2968;

        /// public static final [GL_STREAM_DRAW](https://developer.android.com/reference/android/opengl/GLES20.html#GL_STREAM_DRAW)
        pub const GL_STREAM_DRAW : i32 = 35040;

        /// public static final [GL_SUBPIXEL_BITS](https://developer.android.com/reference/android/opengl/GLES20.html#GL_SUBPIXEL_BITS)
        pub const GL_SUBPIXEL_BITS : i32 = 3408;

        /// public static final [GL_TEXTURE](https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE)
        pub const GL_TEXTURE : i32 = 5890;

        /// public static final [GL_TEXTURE0](https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE0)
        pub const GL_TEXTURE0 : i32 = 33984;

        /// public static final [GL_TEXTURE1](https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE1)
        pub const GL_TEXTURE1 : i32 = 33985;

        /// public static final [GL_TEXTURE10](https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE10)
        pub const GL_TEXTURE10 : i32 = 33994;

        /// public static final [GL_TEXTURE11](https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE11)
        pub const GL_TEXTURE11 : i32 = 33995;

        /// public static final [GL_TEXTURE12](https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE12)
        pub const GL_TEXTURE12 : i32 = 33996;

        /// public static final [GL_TEXTURE13](https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE13)
        pub const GL_TEXTURE13 : i32 = 33997;

        /// public static final [GL_TEXTURE14](https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE14)
        pub const GL_TEXTURE14 : i32 = 33998;

        /// public static final [GL_TEXTURE15](https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE15)
        pub const GL_TEXTURE15 : i32 = 33999;

        /// public static final [GL_TEXTURE16](https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE16)
        pub const GL_TEXTURE16 : i32 = 34000;

        /// public static final [GL_TEXTURE17](https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE17)
        pub const GL_TEXTURE17 : i32 = 34001;

        /// public static final [GL_TEXTURE18](https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE18)
        pub const GL_TEXTURE18 : i32 = 34002;

        /// public static final [GL_TEXTURE19](https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE19)
        pub const GL_TEXTURE19 : i32 = 34003;

        /// public static final [GL_TEXTURE2](https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE2)
        pub const GL_TEXTURE2 : i32 = 33986;

        /// public static final [GL_TEXTURE20](https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE20)
        pub const GL_TEXTURE20 : i32 = 34004;

        /// public static final [GL_TEXTURE21](https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE21)
        pub const GL_TEXTURE21 : i32 = 34005;

        /// public static final [GL_TEXTURE22](https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE22)
        pub const GL_TEXTURE22 : i32 = 34006;

        /// public static final [GL_TEXTURE23](https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE23)
        pub const GL_TEXTURE23 : i32 = 34007;

        /// public static final [GL_TEXTURE24](https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE24)
        pub const GL_TEXTURE24 : i32 = 34008;

        /// public static final [GL_TEXTURE25](https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE25)
        pub const GL_TEXTURE25 : i32 = 34009;

        /// public static final [GL_TEXTURE26](https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE26)
        pub const GL_TEXTURE26 : i32 = 34010;

        /// public static final [GL_TEXTURE27](https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE27)
        pub const GL_TEXTURE27 : i32 = 34011;

        /// public static final [GL_TEXTURE28](https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE28)
        pub const GL_TEXTURE28 : i32 = 34012;

        /// public static final [GL_TEXTURE29](https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE29)
        pub const GL_TEXTURE29 : i32 = 34013;

        /// public static final [GL_TEXTURE3](https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE3)
        pub const GL_TEXTURE3 : i32 = 33987;

        /// public static final [GL_TEXTURE30](https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE30)
        pub const GL_TEXTURE30 : i32 = 34014;

        /// public static final [GL_TEXTURE31](https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE31)
        pub const GL_TEXTURE31 : i32 = 34015;

        /// public static final [GL_TEXTURE4](https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE4)
        pub const GL_TEXTURE4 : i32 = 33988;

        /// public static final [GL_TEXTURE5](https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE5)
        pub const GL_TEXTURE5 : i32 = 33989;

        /// public static final [GL_TEXTURE6](https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE6)
        pub const GL_TEXTURE6 : i32 = 33990;

        /// public static final [GL_TEXTURE7](https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE7)
        pub const GL_TEXTURE7 : i32 = 33991;

        /// public static final [GL_TEXTURE8](https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE8)
        pub const GL_TEXTURE8 : i32 = 33992;

        /// public static final [GL_TEXTURE9](https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE9)
        pub const GL_TEXTURE9 : i32 = 33993;

        /// public static final [GL_TEXTURE_2D](https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE_2D)
        pub const GL_TEXTURE_2D : i32 = 3553;

        /// public static final [GL_TEXTURE_BINDING_2D](https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE_BINDING_2D)
        pub const GL_TEXTURE_BINDING_2D : i32 = 32873;

        /// public static final [GL_TEXTURE_BINDING_CUBE_MAP](https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE_BINDING_CUBE_MAP)
        pub const GL_TEXTURE_BINDING_CUBE_MAP : i32 = 34068;

        /// public static final [GL_TEXTURE_CUBE_MAP](https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE_CUBE_MAP)
        pub const GL_TEXTURE_CUBE_MAP : i32 = 34067;

        /// public static final [GL_TEXTURE_CUBE_MAP_NEGATIVE_X](https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE_CUBE_MAP_NEGATIVE_X)
        pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_X : i32 = 34070;

        /// public static final [GL_TEXTURE_CUBE_MAP_NEGATIVE_Y](https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y)
        pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y : i32 = 34072;

        /// public static final [GL_TEXTURE_CUBE_MAP_NEGATIVE_Z](https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z)
        pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z : i32 = 34074;

        /// public static final [GL_TEXTURE_CUBE_MAP_POSITIVE_X](https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE_CUBE_MAP_POSITIVE_X)
        pub const GL_TEXTURE_CUBE_MAP_POSITIVE_X : i32 = 34069;

        /// public static final [GL_TEXTURE_CUBE_MAP_POSITIVE_Y](https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE_CUBE_MAP_POSITIVE_Y)
        pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Y : i32 = 34071;

        /// public static final [GL_TEXTURE_CUBE_MAP_POSITIVE_Z](https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE_CUBE_MAP_POSITIVE_Z)
        pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Z : i32 = 34073;

        /// public static final [GL_TEXTURE_MAG_FILTER](https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE_MAG_FILTER)
        pub const GL_TEXTURE_MAG_FILTER : i32 = 10240;

        /// public static final [GL_TEXTURE_MIN_FILTER](https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE_MIN_FILTER)
        pub const GL_TEXTURE_MIN_FILTER : i32 = 10241;

        /// public static final [GL_TEXTURE_WRAP_S](https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE_WRAP_S)
        pub const GL_TEXTURE_WRAP_S : i32 = 10242;

        /// public static final [GL_TEXTURE_WRAP_T](https://developer.android.com/reference/android/opengl/GLES20.html#GL_TEXTURE_WRAP_T)
        pub const GL_TEXTURE_WRAP_T : i32 = 10243;

        /// public static final [GL_TRIANGLES](https://developer.android.com/reference/android/opengl/GLES20.html#GL_TRIANGLES)
        pub const GL_TRIANGLES : i32 = 4;

        /// public static final [GL_TRIANGLE_FAN](https://developer.android.com/reference/android/opengl/GLES20.html#GL_TRIANGLE_FAN)
        pub const GL_TRIANGLE_FAN : i32 = 6;

        /// public static final [GL_TRIANGLE_STRIP](https://developer.android.com/reference/android/opengl/GLES20.html#GL_TRIANGLE_STRIP)
        pub const GL_TRIANGLE_STRIP : i32 = 5;

        /// public static final [GL_TRUE](https://developer.android.com/reference/android/opengl/GLES20.html#GL_TRUE)
        pub const GL_TRUE : i32 = 1;

        /// public static final [GL_UNPACK_ALIGNMENT](https://developer.android.com/reference/android/opengl/GLES20.html#GL_UNPACK_ALIGNMENT)
        pub const GL_UNPACK_ALIGNMENT : i32 = 3317;

        /// public static final [GL_UNSIGNED_BYTE](https://developer.android.com/reference/android/opengl/GLES20.html#GL_UNSIGNED_BYTE)
        pub const GL_UNSIGNED_BYTE : i32 = 5121;

        /// public static final [GL_UNSIGNED_INT](https://developer.android.com/reference/android/opengl/GLES20.html#GL_UNSIGNED_INT)
        pub const GL_UNSIGNED_INT : i32 = 5125;

        /// public static final [GL_UNSIGNED_SHORT](https://developer.android.com/reference/android/opengl/GLES20.html#GL_UNSIGNED_SHORT)
        pub const GL_UNSIGNED_SHORT : i32 = 5123;

        /// public static final [GL_UNSIGNED_SHORT_4_4_4_4](https://developer.android.com/reference/android/opengl/GLES20.html#GL_UNSIGNED_SHORT_4_4_4_4)
        pub const GL_UNSIGNED_SHORT_4_4_4_4 : i32 = 32819;

        /// public static final [GL_UNSIGNED_SHORT_5_5_5_1](https://developer.android.com/reference/android/opengl/GLES20.html#GL_UNSIGNED_SHORT_5_5_5_1)
        pub const GL_UNSIGNED_SHORT_5_5_5_1 : i32 = 32820;

        /// public static final [GL_UNSIGNED_SHORT_5_6_5](https://developer.android.com/reference/android/opengl/GLES20.html#GL_UNSIGNED_SHORT_5_6_5)
        pub const GL_UNSIGNED_SHORT_5_6_5 : i32 = 33635;

        /// public static final [GL_VALIDATE_STATUS](https://developer.android.com/reference/android/opengl/GLES20.html#GL_VALIDATE_STATUS)
        pub const GL_VALIDATE_STATUS : i32 = 35715;

        /// public static final [GL_VENDOR](https://developer.android.com/reference/android/opengl/GLES20.html#GL_VENDOR)
        pub const GL_VENDOR : i32 = 7936;

        /// public static final [GL_VERSION](https://developer.android.com/reference/android/opengl/GLES20.html#GL_VERSION)
        pub const GL_VERSION : i32 = 7938;

        /// public static final [GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING](https://developer.android.com/reference/android/opengl/GLES20.html#GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING)
        pub const GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING : i32 = 34975;

        /// public static final [GL_VERTEX_ATTRIB_ARRAY_ENABLED](https://developer.android.com/reference/android/opengl/GLES20.html#GL_VERTEX_ATTRIB_ARRAY_ENABLED)
        pub const GL_VERTEX_ATTRIB_ARRAY_ENABLED : i32 = 34338;

        /// public static final [GL_VERTEX_ATTRIB_ARRAY_NORMALIZED](https://developer.android.com/reference/android/opengl/GLES20.html#GL_VERTEX_ATTRIB_ARRAY_NORMALIZED)
        pub const GL_VERTEX_ATTRIB_ARRAY_NORMALIZED : i32 = 34922;

        /// public static final [GL_VERTEX_ATTRIB_ARRAY_POINTER](https://developer.android.com/reference/android/opengl/GLES20.html#GL_VERTEX_ATTRIB_ARRAY_POINTER)
        pub const GL_VERTEX_ATTRIB_ARRAY_POINTER : i32 = 34373;

        /// public static final [GL_VERTEX_ATTRIB_ARRAY_SIZE](https://developer.android.com/reference/android/opengl/GLES20.html#GL_VERTEX_ATTRIB_ARRAY_SIZE)
        pub const GL_VERTEX_ATTRIB_ARRAY_SIZE : i32 = 34339;

        /// public static final [GL_VERTEX_ATTRIB_ARRAY_STRIDE](https://developer.android.com/reference/android/opengl/GLES20.html#GL_VERTEX_ATTRIB_ARRAY_STRIDE)
        pub const GL_VERTEX_ATTRIB_ARRAY_STRIDE : i32 = 34340;

        /// public static final [GL_VERTEX_ATTRIB_ARRAY_TYPE](https://developer.android.com/reference/android/opengl/GLES20.html#GL_VERTEX_ATTRIB_ARRAY_TYPE)
        pub const GL_VERTEX_ATTRIB_ARRAY_TYPE : i32 = 34341;

        /// public static final [GL_VERTEX_SHADER](https://developer.android.com/reference/android/opengl/GLES20.html#GL_VERTEX_SHADER)
        pub const GL_VERTEX_SHADER : i32 = 35633;

        /// public static final [GL_VIEWPORT](https://developer.android.com/reference/android/opengl/GLES20.html#GL_VIEWPORT)
        pub const GL_VIEWPORT : i32 = 2978;

        /// public static final [GL_ZERO](https://developer.android.com/reference/android/opengl/GLES20.html#GL_ZERO)
        pub const GL_ZERO : i32 = 0;
    }
}
