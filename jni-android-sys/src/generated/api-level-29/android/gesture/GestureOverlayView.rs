// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-gesture-GestureOverlayView"))]
__jni_bindgen! {
    /// public class [GestureOverlayView](https://developer.android.com/reference/android/gesture/GestureOverlayView.html)
    ///
    /// Required feature: android-gesture-GestureOverlayView
    public class GestureOverlayView ("android/gesture/GestureOverlayView") extends crate::android::widget::FrameLayout {

        /// [GestureOverlayView](https://developer.android.com/reference/android/gesture/GestureOverlayView.html#GestureOverlayView(android.content.Context))
        ///
        /// Required features: "android-content-Context"
        #[cfg(any(feature = "all", all(feature = "android-content-Context")))]
        pub fn new_Context<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::gesture::GestureOverlayView>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/gesture/GestureOverlayView", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/content/Context;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/gesture/GestureOverlayView\0", "<init>\0", "(Landroid/content/Context;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [GestureOverlayView](https://developer.android.com/reference/android/gesture/GestureOverlayView.html#GestureOverlayView(android.content.Context,%20android.util.AttributeSet))
        ///
        /// Required features: "android-content-Context", "android-util-AttributeSet"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-util-AttributeSet")))]
        pub fn new_Context_AttributeSet<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::util::AttributeSet>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::gesture::GestureOverlayView>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/gesture/GestureOverlayView", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/content/Context;Landroid/util/AttributeSet;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/gesture/GestureOverlayView\0", "<init>\0", "(Landroid/content/Context;Landroid/util/AttributeSet;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [GestureOverlayView](https://developer.android.com/reference/android/gesture/GestureOverlayView.html#GestureOverlayView(android.content.Context,%20android.util.AttributeSet,%20int))
        ///
        /// Required features: "android-content-Context", "android-util-AttributeSet"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-util-AttributeSet")))]
        pub fn new_Context_AttributeSet_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::util::AttributeSet>>, arg2: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::gesture::GestureOverlayView>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/gesture/GestureOverlayView", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/content/Context;Landroid/util/AttributeSet;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/gesture/GestureOverlayView\0", "<init>\0", "(Landroid/content/Context;Landroid/util/AttributeSet;I)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [GestureOverlayView](https://developer.android.com/reference/android/gesture/GestureOverlayView.html#GestureOverlayView(android.content.Context,%20android.util.AttributeSet,%20int,%20int))
        ///
        /// Required features: "android-content-Context", "android-util-AttributeSet"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-util-AttributeSet")))]
        pub fn new_Context_AttributeSet_int_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::util::AttributeSet>>, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::gesture::GestureOverlayView>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/gesture/GestureOverlayView", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/content/Context;Landroid/util/AttributeSet;II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/gesture/GestureOverlayView\0", "<init>\0", "(Landroid/content/Context;Landroid/util/AttributeSet;II)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCurrentStroke](https://developer.android.com/reference/android/gesture/GestureOverlayView.html#getCurrentStroke())
        ///
        /// Required features: "java-util-ArrayList"
        #[cfg(any(feature = "all", all(feature = "java-util-ArrayList")))]
        pub fn getCurrentStroke<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::ArrayList>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/gesture/GestureOverlayView", java.flags == PUBLIC, .name == "getCurrentStroke", .descriptor == "()Ljava/util/ArrayList;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/gesture/GestureOverlayView\0", "getCurrentStroke\0", "()Ljava/util/ArrayList;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getOrientation](https://developer.android.com/reference/android/gesture/GestureOverlayView.html#getOrientation())
        pub fn getOrientation<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/gesture/GestureOverlayView", java.flags == PUBLIC, .name == "getOrientation", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/gesture/GestureOverlayView\0", "getOrientation\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOrientation](https://developer.android.com/reference/android/gesture/GestureOverlayView.html#setOrientation(int))
        pub fn setOrientation<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/gesture/GestureOverlayView", java.flags == PUBLIC, .name == "setOrientation", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/gesture/GestureOverlayView\0", "setOrientation\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setGestureColor](https://developer.android.com/reference/android/gesture/GestureOverlayView.html#setGestureColor(int))
        pub fn setGestureColor<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/gesture/GestureOverlayView", java.flags == PUBLIC, .name == "setGestureColor", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/gesture/GestureOverlayView\0", "setGestureColor\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setUncertainGestureColor](https://developer.android.com/reference/android/gesture/GestureOverlayView.html#setUncertainGestureColor(int))
        pub fn setUncertainGestureColor<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/gesture/GestureOverlayView", java.flags == PUBLIC, .name == "setUncertainGestureColor", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/gesture/GestureOverlayView\0", "setUncertainGestureColor\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getUncertainGestureColor](https://developer.android.com/reference/android/gesture/GestureOverlayView.html#getUncertainGestureColor())
        pub fn getUncertainGestureColor<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/gesture/GestureOverlayView", java.flags == PUBLIC, .name == "getUncertainGestureColor", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/gesture/GestureOverlayView\0", "getUncertainGestureColor\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getGestureColor](https://developer.android.com/reference/android/gesture/GestureOverlayView.html#getGestureColor())
        pub fn getGestureColor<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/gesture/GestureOverlayView", java.flags == PUBLIC, .name == "getGestureColor", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/gesture/GestureOverlayView\0", "getGestureColor\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getGestureStrokeWidth](https://developer.android.com/reference/android/gesture/GestureOverlayView.html#getGestureStrokeWidth())
        pub fn getGestureStrokeWidth<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/gesture/GestureOverlayView", java.flags == PUBLIC, .name == "getGestureStrokeWidth", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/gesture/GestureOverlayView\0", "getGestureStrokeWidth\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setGestureStrokeWidth](https://developer.android.com/reference/android/gesture/GestureOverlayView.html#setGestureStrokeWidth(float))
        pub fn setGestureStrokeWidth<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/gesture/GestureOverlayView", java.flags == PUBLIC, .name == "setGestureStrokeWidth", .descriptor == "(F)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/gesture/GestureOverlayView\0", "setGestureStrokeWidth\0", "(F)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getGestureStrokeType](https://developer.android.com/reference/android/gesture/GestureOverlayView.html#getGestureStrokeType())
        pub fn getGestureStrokeType<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/gesture/GestureOverlayView", java.flags == PUBLIC, .name == "getGestureStrokeType", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/gesture/GestureOverlayView\0", "getGestureStrokeType\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setGestureStrokeType](https://developer.android.com/reference/android/gesture/GestureOverlayView.html#setGestureStrokeType(int))
        pub fn setGestureStrokeType<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/gesture/GestureOverlayView", java.flags == PUBLIC, .name == "setGestureStrokeType", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/gesture/GestureOverlayView\0", "setGestureStrokeType\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getGestureStrokeLengthThreshold](https://developer.android.com/reference/android/gesture/GestureOverlayView.html#getGestureStrokeLengthThreshold())
        pub fn getGestureStrokeLengthThreshold<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/gesture/GestureOverlayView", java.flags == PUBLIC, .name == "getGestureStrokeLengthThreshold", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/gesture/GestureOverlayView\0", "getGestureStrokeLengthThreshold\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setGestureStrokeLengthThreshold](https://developer.android.com/reference/android/gesture/GestureOverlayView.html#setGestureStrokeLengthThreshold(float))
        pub fn setGestureStrokeLengthThreshold<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/gesture/GestureOverlayView", java.flags == PUBLIC, .name == "setGestureStrokeLengthThreshold", .descriptor == "(F)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/gesture/GestureOverlayView\0", "setGestureStrokeLengthThreshold\0", "(F)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getGestureStrokeSquarenessTreshold](https://developer.android.com/reference/android/gesture/GestureOverlayView.html#getGestureStrokeSquarenessTreshold())
        pub fn getGestureStrokeSquarenessTreshold<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/gesture/GestureOverlayView", java.flags == PUBLIC, .name == "getGestureStrokeSquarenessTreshold", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/gesture/GestureOverlayView\0", "getGestureStrokeSquarenessTreshold\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setGestureStrokeSquarenessTreshold](https://developer.android.com/reference/android/gesture/GestureOverlayView.html#setGestureStrokeSquarenessTreshold(float))
        pub fn setGestureStrokeSquarenessTreshold<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/gesture/GestureOverlayView", java.flags == PUBLIC, .name == "setGestureStrokeSquarenessTreshold", .descriptor == "(F)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/gesture/GestureOverlayView\0", "setGestureStrokeSquarenessTreshold\0", "(F)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getGestureStrokeAngleThreshold](https://developer.android.com/reference/android/gesture/GestureOverlayView.html#getGestureStrokeAngleThreshold())
        pub fn getGestureStrokeAngleThreshold<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/gesture/GestureOverlayView", java.flags == PUBLIC, .name == "getGestureStrokeAngleThreshold", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/gesture/GestureOverlayView\0", "getGestureStrokeAngleThreshold\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setGestureStrokeAngleThreshold](https://developer.android.com/reference/android/gesture/GestureOverlayView.html#setGestureStrokeAngleThreshold(float))
        pub fn setGestureStrokeAngleThreshold<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/gesture/GestureOverlayView", java.flags == PUBLIC, .name == "setGestureStrokeAngleThreshold", .descriptor == "(F)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/gesture/GestureOverlayView\0", "setGestureStrokeAngleThreshold\0", "(F)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isEventsInterceptionEnabled](https://developer.android.com/reference/android/gesture/GestureOverlayView.html#isEventsInterceptionEnabled())
        pub fn isEventsInterceptionEnabled<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/gesture/GestureOverlayView", java.flags == PUBLIC, .name == "isEventsInterceptionEnabled", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/gesture/GestureOverlayView\0", "isEventsInterceptionEnabled\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setEventsInterceptionEnabled](https://developer.android.com/reference/android/gesture/GestureOverlayView.html#setEventsInterceptionEnabled(boolean))
        pub fn setEventsInterceptionEnabled<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/gesture/GestureOverlayView", java.flags == PUBLIC, .name == "setEventsInterceptionEnabled", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/gesture/GestureOverlayView\0", "setEventsInterceptionEnabled\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isFadeEnabled](https://developer.android.com/reference/android/gesture/GestureOverlayView.html#isFadeEnabled())
        pub fn isFadeEnabled<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/gesture/GestureOverlayView", java.flags == PUBLIC, .name == "isFadeEnabled", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/gesture/GestureOverlayView\0", "isFadeEnabled\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setFadeEnabled](https://developer.android.com/reference/android/gesture/GestureOverlayView.html#setFadeEnabled(boolean))
        pub fn setFadeEnabled<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/gesture/GestureOverlayView", java.flags == PUBLIC, .name == "setFadeEnabled", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/gesture/GestureOverlayView\0", "setFadeEnabled\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getGesture](https://developer.android.com/reference/android/gesture/GestureOverlayView.html#getGesture())
        ///
        /// Required features: "android-gesture-Gesture"
        #[cfg(any(feature = "all", all(feature = "android-gesture-Gesture")))]
        pub fn getGesture<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::gesture::Gesture>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/gesture/GestureOverlayView", java.flags == PUBLIC, .name == "getGesture", .descriptor == "()Landroid/gesture/Gesture;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/gesture/GestureOverlayView\0", "getGesture\0", "()Landroid/gesture/Gesture;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setGesture](https://developer.android.com/reference/android/gesture/GestureOverlayView.html#setGesture(android.gesture.Gesture))
        ///
        /// Required features: "android-gesture-Gesture"
        #[cfg(any(feature = "all", all(feature = "android-gesture-Gesture")))]
        pub fn setGesture<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::gesture::Gesture>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/gesture/GestureOverlayView", java.flags == PUBLIC, .name == "setGesture", .descriptor == "(Landroid/gesture/Gesture;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/gesture/GestureOverlayView\0", "setGesture\0", "(Landroid/gesture/Gesture;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getGesturePath](https://developer.android.com/reference/android/gesture/GestureOverlayView.html#getGesturePath())
        ///
        /// Required features: "android-graphics-Path"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Path")))]
        pub fn getGesturePath<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Path>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/gesture/GestureOverlayView", java.flags == PUBLIC, .name == "getGesturePath", .descriptor == "()Landroid/graphics/Path;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/gesture/GestureOverlayView\0", "getGesturePath\0", "()Landroid/graphics/Path;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getGesturePath](https://developer.android.com/reference/android/gesture/GestureOverlayView.html#getGesturePath(android.graphics.Path))
        ///
        /// Required features: "android-graphics-Path"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Path")))]
        pub fn getGesturePath_Path<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Path>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Path>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/gesture/GestureOverlayView", java.flags == PUBLIC, .name == "getGesturePath", .descriptor == "(Landroid/graphics/Path;)Landroid/graphics/Path;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/gesture/GestureOverlayView\0", "getGesturePath\0", "(Landroid/graphics/Path;)Landroid/graphics/Path;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isGestureVisible](https://developer.android.com/reference/android/gesture/GestureOverlayView.html#isGestureVisible())
        pub fn isGestureVisible<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/gesture/GestureOverlayView", java.flags == PUBLIC, .name == "isGestureVisible", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/gesture/GestureOverlayView\0", "isGestureVisible\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setGestureVisible](https://developer.android.com/reference/android/gesture/GestureOverlayView.html#setGestureVisible(boolean))
        pub fn setGestureVisible<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/gesture/GestureOverlayView", java.flags == PUBLIC, .name == "setGestureVisible", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/gesture/GestureOverlayView\0", "setGestureVisible\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFadeOffset](https://developer.android.com/reference/android/gesture/GestureOverlayView.html#getFadeOffset())
        pub fn getFadeOffset<'env>(&'env self) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/gesture/GestureOverlayView", java.flags == PUBLIC, .name == "getFadeOffset", .descriptor == "()J"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/gesture/GestureOverlayView\0", "getFadeOffset\0", "()J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setFadeOffset](https://developer.android.com/reference/android/gesture/GestureOverlayView.html#setFadeOffset(long))
        pub fn setFadeOffset<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/gesture/GestureOverlayView", java.flags == PUBLIC, .name == "setFadeOffset", .descriptor == "(J)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/gesture/GestureOverlayView\0", "setFadeOffset\0", "(J)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addOnGestureListener](https://developer.android.com/reference/android/gesture/GestureOverlayView.html#addOnGestureListener(android.gesture.GestureOverlayView.OnGestureListener))
        ///
        /// Required features: "android-gesture-GestureOverlayView_OnGestureListener"
        #[cfg(any(feature = "all", all(feature = "android-gesture-GestureOverlayView_OnGestureListener")))]
        pub fn addOnGestureListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::gesture::GestureOverlayView_OnGestureListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/gesture/GestureOverlayView", java.flags == PUBLIC, .name == "addOnGestureListener", .descriptor == "(Landroid/gesture/GestureOverlayView$OnGestureListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/gesture/GestureOverlayView\0", "addOnGestureListener\0", "(Landroid/gesture/GestureOverlayView$OnGestureListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeOnGestureListener](https://developer.android.com/reference/android/gesture/GestureOverlayView.html#removeOnGestureListener(android.gesture.GestureOverlayView.OnGestureListener))
        ///
        /// Required features: "android-gesture-GestureOverlayView_OnGestureListener"
        #[cfg(any(feature = "all", all(feature = "android-gesture-GestureOverlayView_OnGestureListener")))]
        pub fn removeOnGestureListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::gesture::GestureOverlayView_OnGestureListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/gesture/GestureOverlayView", java.flags == PUBLIC, .name == "removeOnGestureListener", .descriptor == "(Landroid/gesture/GestureOverlayView$OnGestureListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/gesture/GestureOverlayView\0", "removeOnGestureListener\0", "(Landroid/gesture/GestureOverlayView$OnGestureListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeAllOnGestureListeners](https://developer.android.com/reference/android/gesture/GestureOverlayView.html#removeAllOnGestureListeners())
        pub fn removeAllOnGestureListeners<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/gesture/GestureOverlayView", java.flags == PUBLIC, .name == "removeAllOnGestureListeners", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/gesture/GestureOverlayView\0", "removeAllOnGestureListeners\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addOnGesturePerformedListener](https://developer.android.com/reference/android/gesture/GestureOverlayView.html#addOnGesturePerformedListener(android.gesture.GestureOverlayView.OnGesturePerformedListener))
        ///
        /// Required features: "android-gesture-GestureOverlayView_OnGesturePerformedListener"
        #[cfg(any(feature = "all", all(feature = "android-gesture-GestureOverlayView_OnGesturePerformedListener")))]
        pub fn addOnGesturePerformedListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::gesture::GestureOverlayView_OnGesturePerformedListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/gesture/GestureOverlayView", java.flags == PUBLIC, .name == "addOnGesturePerformedListener", .descriptor == "(Landroid/gesture/GestureOverlayView$OnGesturePerformedListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/gesture/GestureOverlayView\0", "addOnGesturePerformedListener\0", "(Landroid/gesture/GestureOverlayView$OnGesturePerformedListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeOnGesturePerformedListener](https://developer.android.com/reference/android/gesture/GestureOverlayView.html#removeOnGesturePerformedListener(android.gesture.GestureOverlayView.OnGesturePerformedListener))
        ///
        /// Required features: "android-gesture-GestureOverlayView_OnGesturePerformedListener"
        #[cfg(any(feature = "all", all(feature = "android-gesture-GestureOverlayView_OnGesturePerformedListener")))]
        pub fn removeOnGesturePerformedListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::gesture::GestureOverlayView_OnGesturePerformedListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/gesture/GestureOverlayView", java.flags == PUBLIC, .name == "removeOnGesturePerformedListener", .descriptor == "(Landroid/gesture/GestureOverlayView$OnGesturePerformedListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/gesture/GestureOverlayView\0", "removeOnGesturePerformedListener\0", "(Landroid/gesture/GestureOverlayView$OnGesturePerformedListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeAllOnGesturePerformedListeners](https://developer.android.com/reference/android/gesture/GestureOverlayView.html#removeAllOnGesturePerformedListeners())
        pub fn removeAllOnGesturePerformedListeners<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/gesture/GestureOverlayView", java.flags == PUBLIC, .name == "removeAllOnGesturePerformedListeners", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/gesture/GestureOverlayView\0", "removeAllOnGesturePerformedListeners\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addOnGesturingListener](https://developer.android.com/reference/android/gesture/GestureOverlayView.html#addOnGesturingListener(android.gesture.GestureOverlayView.OnGesturingListener))
        ///
        /// Required features: "android-gesture-GestureOverlayView_OnGesturingListener"
        #[cfg(any(feature = "all", all(feature = "android-gesture-GestureOverlayView_OnGesturingListener")))]
        pub fn addOnGesturingListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::gesture::GestureOverlayView_OnGesturingListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/gesture/GestureOverlayView", java.flags == PUBLIC, .name == "addOnGesturingListener", .descriptor == "(Landroid/gesture/GestureOverlayView$OnGesturingListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/gesture/GestureOverlayView\0", "addOnGesturingListener\0", "(Landroid/gesture/GestureOverlayView$OnGesturingListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeOnGesturingListener](https://developer.android.com/reference/android/gesture/GestureOverlayView.html#removeOnGesturingListener(android.gesture.GestureOverlayView.OnGesturingListener))
        ///
        /// Required features: "android-gesture-GestureOverlayView_OnGesturingListener"
        #[cfg(any(feature = "all", all(feature = "android-gesture-GestureOverlayView_OnGesturingListener")))]
        pub fn removeOnGesturingListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::gesture::GestureOverlayView_OnGesturingListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/gesture/GestureOverlayView", java.flags == PUBLIC, .name == "removeOnGesturingListener", .descriptor == "(Landroid/gesture/GestureOverlayView$OnGesturingListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/gesture/GestureOverlayView\0", "removeOnGesturingListener\0", "(Landroid/gesture/GestureOverlayView$OnGesturingListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeAllOnGesturingListeners](https://developer.android.com/reference/android/gesture/GestureOverlayView.html#removeAllOnGesturingListeners())
        pub fn removeAllOnGesturingListeners<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/gesture/GestureOverlayView", java.flags == PUBLIC, .name == "removeAllOnGesturingListeners", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/gesture/GestureOverlayView\0", "removeAllOnGesturingListeners\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isGesturing](https://developer.android.com/reference/android/gesture/GestureOverlayView.html#isGesturing())
        pub fn isGesturing<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/gesture/GestureOverlayView", java.flags == PUBLIC, .name == "isGesturing", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/gesture/GestureOverlayView\0", "isGesturing\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [draw](https://developer.android.com/reference/android/gesture/GestureOverlayView.html#draw(android.graphics.Canvas))
        ///
        /// Required features: "android-graphics-Canvas"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Canvas")))]
        pub fn draw<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Canvas>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/gesture/GestureOverlayView", java.flags == PUBLIC, .name == "draw", .descriptor == "(Landroid/graphics/Canvas;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/gesture/GestureOverlayView\0", "draw\0", "(Landroid/graphics/Canvas;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clear](https://developer.android.com/reference/android/gesture/GestureOverlayView.html#clear(boolean))
        pub fn clear<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/gesture/GestureOverlayView", java.flags == PUBLIC, .name == "clear", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/gesture/GestureOverlayView\0", "clear\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [cancelClearAnimation](https://developer.android.com/reference/android/gesture/GestureOverlayView.html#cancelClearAnimation())
        pub fn cancelClearAnimation<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/gesture/GestureOverlayView", java.flags == PUBLIC, .name == "cancelClearAnimation", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/gesture/GestureOverlayView\0", "cancelClearAnimation\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [cancelGesture](https://developer.android.com/reference/android/gesture/GestureOverlayView.html#cancelGesture())
        pub fn cancelGesture<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/gesture/GestureOverlayView", java.flags == PUBLIC, .name == "cancelGesture", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/gesture/GestureOverlayView\0", "cancelGesture\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [onDetachedFromWindow](https://developer.android.com/reference/android/gesture/GestureOverlayView.html#onDetachedFromWindow())
        // fn onDetachedFromWindow<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/gesture/GestureOverlayView", java.flags == PROTECTED, .name == "onDetachedFromWindow", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/gesture/GestureOverlayView\0", "onDetachedFromWindow\0", "()V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [dispatchTouchEvent](https://developer.android.com/reference/android/gesture/GestureOverlayView.html#dispatchTouchEvent(android.view.MotionEvent))
        ///
        /// Required features: "android-view-MotionEvent"
        #[cfg(any(feature = "all", all(feature = "android-view-MotionEvent")))]
        pub fn dispatchTouchEvent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::MotionEvent>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/gesture/GestureOverlayView", java.flags == PUBLIC, .name == "dispatchTouchEvent", .descriptor == "(Landroid/view/MotionEvent;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/gesture/GestureOverlayView\0", "dispatchTouchEvent\0", "(Landroid/view/MotionEvent;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [GESTURE_STROKE_TYPE_MULTIPLE](https://developer.android.com/reference/android/gesture/GestureOverlayView.html#GESTURE_STROKE_TYPE_MULTIPLE)
        pub const GESTURE_STROKE_TYPE_MULTIPLE : i32 = 1;

        /// public static final [GESTURE_STROKE_TYPE_SINGLE](https://developer.android.com/reference/android/gesture/GestureOverlayView.html#GESTURE_STROKE_TYPE_SINGLE)
        pub const GESTURE_STROKE_TYPE_SINGLE : i32 = 0;

        /// public static final [ORIENTATION_HORIZONTAL](https://developer.android.com/reference/android/gesture/GestureOverlayView.html#ORIENTATION_HORIZONTAL)
        pub const ORIENTATION_HORIZONTAL : i32 = 0;

        /// public static final [ORIENTATION_VERTICAL](https://developer.android.com/reference/android/gesture/GestureOverlayView.html#ORIENTATION_VERTICAL)
        pub const ORIENTATION_VERTICAL : i32 = 1;
    }
}
