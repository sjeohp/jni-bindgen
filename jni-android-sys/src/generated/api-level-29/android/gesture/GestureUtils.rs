// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-gesture-GestureUtils"))]
__jni_bindgen! {
    /// public final class [GestureUtils](https://developer.android.com/reference/android/gesture/GestureUtils.html)
    ///
    /// Required feature: android-gesture-GestureUtils
    public final class GestureUtils ("android/gesture/GestureUtils") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [GestureUtils](https://developer.android.com/reference/android/gesture/GestureUtils.html#GestureUtils())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::gesture::GestureUtils>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/gesture/GestureUtils", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/gesture/GestureUtils\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [spatialSampling](https://developer.android.com/reference/android/gesture/GestureUtils.html#spatialSampling(android.gesture.Gesture,%20int))
        ///
        /// Required features: "android-gesture-Gesture"
        #[cfg(any(feature = "all", all(feature = "android-gesture-Gesture")))]
        pub fn spatialSampling_Gesture_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::gesture::Gesture>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::FloatArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/gesture/GestureUtils", java.flags == PUBLIC | STATIC, .name == "spatialSampling", .descriptor == "(Landroid/gesture/Gesture;I)[F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/gesture/GestureUtils\0", "spatialSampling\0", "(Landroid/gesture/Gesture;I)[F\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [spatialSampling](https://developer.android.com/reference/android/gesture/GestureUtils.html#spatialSampling(android.gesture.Gesture,%20int,%20boolean))
        ///
        /// Required features: "android-gesture-Gesture"
        #[cfg(any(feature = "all", all(feature = "android-gesture-Gesture")))]
        pub fn spatialSampling_Gesture_int_boolean<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::gesture::Gesture>>, arg1: i32, arg2: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::FloatArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/gesture/GestureUtils", java.flags == PUBLIC | STATIC, .name == "spatialSampling", .descriptor == "(Landroid/gesture/Gesture;IZ)[F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/gesture/GestureUtils\0", "spatialSampling\0", "(Landroid/gesture/Gesture;IZ)[F\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [temporalSampling](https://developer.android.com/reference/android/gesture/GestureUtils.html#temporalSampling(android.gesture.GestureStroke,%20int))
        ///
        /// Required features: "android-gesture-GestureStroke"
        #[cfg(any(feature = "all", all(feature = "android-gesture-GestureStroke")))]
        pub fn temporalSampling<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::gesture::GestureStroke>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::FloatArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/gesture/GestureUtils", java.flags == PUBLIC | STATIC, .name == "temporalSampling", .descriptor == "(Landroid/gesture/GestureStroke;I)[F"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/gesture/GestureUtils\0", "temporalSampling\0", "(Landroid/gesture/GestureStroke;I)[F\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [computeOrientedBoundingBox](https://developer.android.com/reference/android/gesture/GestureUtils.html#computeOrientedBoundingBox(java.util.ArrayList))
        ///
        /// Required features: "android-gesture-OrientedBoundingBox", "java-util-ArrayList"
        #[cfg(any(feature = "all", all(feature = "android-gesture-OrientedBoundingBox", feature = "java-util-ArrayList")))]
        pub fn computeOrientedBoundingBox_ArrayList<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::ArrayList>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::gesture::OrientedBoundingBox>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/gesture/GestureUtils", java.flags == PUBLIC | STATIC, .name == "computeOrientedBoundingBox", .descriptor == "(Ljava/util/ArrayList;)Landroid/gesture/OrientedBoundingBox;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/gesture/GestureUtils\0", "computeOrientedBoundingBox\0", "(Ljava/util/ArrayList;)Landroid/gesture/OrientedBoundingBox;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [computeOrientedBoundingBox](https://developer.android.com/reference/android/gesture/GestureUtils.html#computeOrientedBoundingBox(float%5B%5D))
        ///
        /// Required features: "android-gesture-OrientedBoundingBox"
        #[cfg(any(feature = "all", all(feature = "android-gesture-OrientedBoundingBox")))]
        pub fn computeOrientedBoundingBox_float_array<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::FloatArray>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::gesture::OrientedBoundingBox>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/gesture/GestureUtils", java.flags == PUBLIC | STATIC, .name == "computeOrientedBoundingBox", .descriptor == "([F)Landroid/gesture/OrientedBoundingBox;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/gesture/GestureUtils\0", "computeOrientedBoundingBox\0", "([F)Landroid/gesture/OrientedBoundingBox;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
