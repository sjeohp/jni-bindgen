// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-gesture-Prediction"))]
__jni_bindgen! {
    /// public class [Prediction](https://developer.android.com/reference/android/gesture/Prediction.html)
    ///
    /// Required feature: android-gesture-Prediction
    public class Prediction ("android/gesture/Prediction") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [Prediction](https://developer.android.com/reference/android/gesture/Prediction.html#Prediction(java.lang.String,%20double))
        // ///
        // /// Required features: "java-lang-String"
        // #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: f64) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::gesture::Prediction>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/gesture/Prediction", java.flags == (empty), .name == "<init>", .descriptor == "(Ljava/lang/String;D)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/gesture/Prediction\0", "<init>\0", "(Ljava/lang/String;D)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [toString](https://developer.android.com/reference/android/gesture/Prediction.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/gesture/Prediction", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/gesture/Prediction\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// **get** public final [name](https://developer.android.com/reference/android/gesture/Prediction.html#name)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn name<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/gesture/Prediction\0", "name\0", "Ljava/lang/String;\0");
                env.get_object_field(class, field)
            }
        }

        /// **get** public [score](https://developer.android.com/reference/android/gesture/Prediction.html#score)
        pub fn score<'env>(&'env self) -> f64 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/gesture/Prediction\0", "score\0", "D\0");
                env.get_double_field(class, field)
            }
        }

        /// **set** public [score](https://developer.android.com/reference/android/gesture/Prediction.html#score)
        pub fn set_score<'env>(&'env self, value: f64) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/gesture/Prediction\0", "score\0", "D\0");
                env.set_double_field(class, field, value)
            }
        }
    }
}
