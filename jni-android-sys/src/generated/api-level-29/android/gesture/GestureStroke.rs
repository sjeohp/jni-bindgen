// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-gesture-GestureStroke"))]
__jni_bindgen! {
    /// public class [GestureStroke](https://developer.android.com/reference/android/gesture/GestureStroke.html)
    ///
    /// Required feature: android-gesture-GestureStroke
    public class GestureStroke ("android/gesture/GestureStroke") extends crate::java::lang::Object {

        /// [GestureStroke](https://developer.android.com/reference/android/gesture/GestureStroke.html#GestureStroke(java.util.ArrayList))
        ///
        /// Required features: "java-util-ArrayList"
        #[cfg(any(feature = "all", all(feature = "java-util-ArrayList")))]
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::ArrayList>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::gesture::GestureStroke>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/gesture/GestureStroke", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Ljava/util/ArrayList;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/gesture/GestureStroke\0", "<init>\0", "(Ljava/util/ArrayList;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clone](https://developer.android.com/reference/android/gesture/GestureStroke.html#clone())
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn clone<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/gesture/GestureStroke", java.flags == PUBLIC, .name == "clone", .descriptor == "()Ljava/lang/Object;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/gesture/GestureStroke\0", "clone\0", "()Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPath](https://developer.android.com/reference/android/gesture/GestureStroke.html#getPath())
        ///
        /// Required features: "android-graphics-Path"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Path")))]
        pub fn getPath<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Path>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/gesture/GestureStroke", java.flags == PUBLIC, .name == "getPath", .descriptor == "()Landroid/graphics/Path;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/gesture/GestureStroke\0", "getPath\0", "()Landroid/graphics/Path;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toPath](https://developer.android.com/reference/android/gesture/GestureStroke.html#toPath(float,%20float,%20int))
        ///
        /// Required features: "android-graphics-Path"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Path")))]
        pub fn toPath<'env>(&'env self, arg0: f32, arg1: f32, arg2: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Path>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/gesture/GestureStroke", java.flags == PUBLIC, .name == "toPath", .descriptor == "(FFI)Landroid/graphics/Path;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/gesture/GestureStroke\0", "toPath\0", "(FFI)Landroid/graphics/Path;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clearPath](https://developer.android.com/reference/android/gesture/GestureStroke.html#clearPath())
        pub fn clearPath<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/gesture/GestureStroke", java.flags == PUBLIC, .name == "clearPath", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/gesture/GestureStroke\0", "clearPath\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [computeOrientedBoundingBox](https://developer.android.com/reference/android/gesture/GestureStroke.html#computeOrientedBoundingBox())
        ///
        /// Required features: "android-gesture-OrientedBoundingBox"
        #[cfg(any(feature = "all", all(feature = "android-gesture-OrientedBoundingBox")))]
        pub fn computeOrientedBoundingBox<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::gesture::OrientedBoundingBox>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/gesture/GestureStroke", java.flags == PUBLIC, .name == "computeOrientedBoundingBox", .descriptor == "()Landroid/gesture/OrientedBoundingBox;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/gesture/GestureStroke\0", "computeOrientedBoundingBox\0", "()Landroid/gesture/OrientedBoundingBox;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// **get** public final [boundingBox](https://developer.android.com/reference/android/gesture/GestureStroke.html#boundingBox)
        ///
        /// Required feature: android-graphics-RectF
        #[cfg(any(feature = "all", feature = "android-graphics-RectF"))]
        pub fn boundingBox<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::RectF>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/gesture/GestureStroke\0", "boundingBox\0", "Landroid/graphics/RectF;\0");
                env.get_object_field(class, field)
            }
        }

        /// **get** public final [length](https://developer.android.com/reference/android/gesture/GestureStroke.html#length)
        pub fn length<'env>(&'env self) -> f32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/gesture/GestureStroke\0", "length\0", "F\0");
                env.get_float_field(class, field)
            }
        }

        /// **get** public final [points](https://developer.android.com/reference/android/gesture/GestureStroke.html#points)
        pub fn points<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::FloatArray>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/gesture/GestureStroke\0", "points\0", "[F\0");
                env.get_object_field(class, field)
            }
        }
    }
}
