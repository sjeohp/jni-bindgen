// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-gesture-GestureLibraries"))]
__jni_bindgen! {
    /// public final class [GestureLibraries](https://developer.android.com/reference/android/gesture/GestureLibraries.html)
    ///
    /// Required feature: android-gesture-GestureLibraries
    public final class GestureLibraries ("android/gesture/GestureLibraries") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [GestureLibraries](https://developer.android.com/reference/android/gesture/GestureLibraries.html#GestureLibraries())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::gesture::GestureLibraries>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/gesture/GestureLibraries", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/gesture/GestureLibraries\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [fromFile](https://developer.android.com/reference/android/gesture/GestureLibraries.html#fromFile(java.lang.String))
        ///
        /// Required features: "android-gesture-GestureLibrary", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-gesture-GestureLibrary", feature = "java-lang-String")))]
        pub fn fromFile_String<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::gesture::GestureLibrary>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/gesture/GestureLibraries", java.flags == PUBLIC | STATIC, .name == "fromFile", .descriptor == "(Ljava/lang/String;)Landroid/gesture/GestureLibrary;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/gesture/GestureLibraries\0", "fromFile\0", "(Ljava/lang/String;)Landroid/gesture/GestureLibrary;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [fromFile](https://developer.android.com/reference/android/gesture/GestureLibraries.html#fromFile(java.io.File))
        ///
        /// Required features: "android-gesture-GestureLibrary", "java-io-File"
        #[cfg(any(feature = "all", all(feature = "android-gesture-GestureLibrary", feature = "java-io-File")))]
        pub fn fromFile_File<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::io::File>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::gesture::GestureLibrary>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/gesture/GestureLibraries", java.flags == PUBLIC | STATIC, .name == "fromFile", .descriptor == "(Ljava/io/File;)Landroid/gesture/GestureLibrary;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/gesture/GestureLibraries\0", "fromFile\0", "(Ljava/io/File;)Landroid/gesture/GestureLibrary;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [fromPrivateFile](https://developer.android.com/reference/android/gesture/GestureLibraries.html#fromPrivateFile(android.content.Context,%20java.lang.String))
        ///
        /// Required features: "android-content-Context", "android-gesture-GestureLibrary", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-gesture-GestureLibrary", feature = "java-lang-String")))]
        pub fn fromPrivateFile<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::gesture::GestureLibrary>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/gesture/GestureLibraries", java.flags == PUBLIC | STATIC, .name == "fromPrivateFile", .descriptor == "(Landroid/content/Context;Ljava/lang/String;)Landroid/gesture/GestureLibrary;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/gesture/GestureLibraries\0", "fromPrivateFile\0", "(Landroid/content/Context;Ljava/lang/String;)Landroid/gesture/GestureLibrary;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [fromRawResource](https://developer.android.com/reference/android/gesture/GestureLibraries.html#fromRawResource(android.content.Context,%20int))
        ///
        /// Required features: "android-content-Context", "android-gesture-GestureLibrary"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-gesture-GestureLibrary")))]
        pub fn fromRawResource<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::gesture::GestureLibrary>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/gesture/GestureLibraries", java.flags == PUBLIC | STATIC, .name == "fromRawResource", .descriptor == "(Landroid/content/Context;I)Landroid/gesture/GestureLibrary;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/gesture/GestureLibraries\0", "fromRawResource\0", "(Landroid/content/Context;I)Landroid/gesture/GestureLibrary;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
