// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-print-PrintAttributes_Builder"))]
__jni_bindgen! {
    /// public final class [PrintAttributes.Builder](https://developer.android.com/reference/android/print/PrintAttributes.Builder.html)
    ///
    /// Required feature: android-print-PrintAttributes_Builder
    public final class PrintAttributes_Builder ("android/print/PrintAttributes$Builder") extends crate::java::lang::Object {

        /// [Builder](https://developer.android.com/reference/android/print/PrintAttributes.Builder.html#Builder())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::print::PrintAttributes_Builder>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/print/PrintAttributes$Builder", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/print/PrintAttributes$Builder\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setMediaSize](https://developer.android.com/reference/android/print/PrintAttributes.Builder.html#setMediaSize(android.print.PrintAttributes.MediaSize))
        ///
        /// Required features: "android-print-PrintAttributes_Builder", "android-print-PrintAttributes_MediaSize"
        #[cfg(any(feature = "all", all(feature = "android-print-PrintAttributes_Builder", feature = "android-print-PrintAttributes_MediaSize")))]
        pub fn setMediaSize<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::print::PrintAttributes_MediaSize>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::print::PrintAttributes_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/print/PrintAttributes$Builder", java.flags == PUBLIC, .name == "setMediaSize", .descriptor == "(Landroid/print/PrintAttributes$MediaSize;)Landroid/print/PrintAttributes$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/print/PrintAttributes$Builder\0", "setMediaSize\0", "(Landroid/print/PrintAttributes$MediaSize;)Landroid/print/PrintAttributes$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setResolution](https://developer.android.com/reference/android/print/PrintAttributes.Builder.html#setResolution(android.print.PrintAttributes.Resolution))
        ///
        /// Required features: "android-print-PrintAttributes_Builder", "android-print-PrintAttributes_Resolution"
        #[cfg(any(feature = "all", all(feature = "android-print-PrintAttributes_Builder", feature = "android-print-PrintAttributes_Resolution")))]
        pub fn setResolution<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::print::PrintAttributes_Resolution>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::print::PrintAttributes_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/print/PrintAttributes$Builder", java.flags == PUBLIC, .name == "setResolution", .descriptor == "(Landroid/print/PrintAttributes$Resolution;)Landroid/print/PrintAttributes$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/print/PrintAttributes$Builder\0", "setResolution\0", "(Landroid/print/PrintAttributes$Resolution;)Landroid/print/PrintAttributes$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setMinMargins](https://developer.android.com/reference/android/print/PrintAttributes.Builder.html#setMinMargins(android.print.PrintAttributes.Margins))
        ///
        /// Required features: "android-print-PrintAttributes_Builder", "android-print-PrintAttributes_Margins"
        #[cfg(any(feature = "all", all(feature = "android-print-PrintAttributes_Builder", feature = "android-print-PrintAttributes_Margins")))]
        pub fn setMinMargins<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::print::PrintAttributes_Margins>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::print::PrintAttributes_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/print/PrintAttributes$Builder", java.flags == PUBLIC, .name == "setMinMargins", .descriptor == "(Landroid/print/PrintAttributes$Margins;)Landroid/print/PrintAttributes$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/print/PrintAttributes$Builder\0", "setMinMargins\0", "(Landroid/print/PrintAttributes$Margins;)Landroid/print/PrintAttributes$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setColorMode](https://developer.android.com/reference/android/print/PrintAttributes.Builder.html#setColorMode(int))
        ///
        /// Required features: "android-print-PrintAttributes_Builder"
        #[cfg(any(feature = "all", all(feature = "android-print-PrintAttributes_Builder")))]
        pub fn setColorMode<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::print::PrintAttributes_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/print/PrintAttributes$Builder", java.flags == PUBLIC, .name == "setColorMode", .descriptor == "(I)Landroid/print/PrintAttributes$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/print/PrintAttributes$Builder\0", "setColorMode\0", "(I)Landroid/print/PrintAttributes$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDuplexMode](https://developer.android.com/reference/android/print/PrintAttributes.Builder.html#setDuplexMode(int))
        ///
        /// Required features: "android-print-PrintAttributes_Builder"
        #[cfg(any(feature = "all", all(feature = "android-print-PrintAttributes_Builder")))]
        pub fn setDuplexMode<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::print::PrintAttributes_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/print/PrintAttributes$Builder", java.flags == PUBLIC, .name == "setDuplexMode", .descriptor == "(I)Landroid/print/PrintAttributes$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/print/PrintAttributes$Builder\0", "setDuplexMode\0", "(I)Landroid/print/PrintAttributes$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [build](https://developer.android.com/reference/android/print/PrintAttributes.Builder.html#build())
        ///
        /// Required features: "android-print-PrintAttributes"
        #[cfg(any(feature = "all", all(feature = "android-print-PrintAttributes")))]
        pub fn build<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::print::PrintAttributes>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/print/PrintAttributes$Builder", java.flags == PUBLIC, .name == "build", .descriptor == "()Landroid/print/PrintAttributes;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/print/PrintAttributes$Builder\0", "build\0", "()Landroid/print/PrintAttributes;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
