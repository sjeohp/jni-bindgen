// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-print-PrinterCapabilitiesInfo_Builder"))]
__jni_bindgen! {
    /// public final class [PrinterCapabilitiesInfo.Builder](https://developer.android.com/reference/android/print/PrinterCapabilitiesInfo.Builder.html)
    ///
    /// Required feature: android-print-PrinterCapabilitiesInfo_Builder
    public final class PrinterCapabilitiesInfo_Builder ("android/print/PrinterCapabilitiesInfo$Builder") extends crate::java::lang::Object {

        /// [Builder](https://developer.android.com/reference/android/print/PrinterCapabilitiesInfo.Builder.html#Builder(android.print.PrinterId))
        ///
        /// Required features: "android-print-PrinterId"
        #[cfg(any(feature = "all", all(feature = "android-print-PrinterId")))]
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::print::PrinterId>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::print::PrinterCapabilitiesInfo_Builder>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/print/PrinterCapabilitiesInfo$Builder", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/print/PrinterId;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/print/PrinterCapabilitiesInfo$Builder\0", "<init>\0", "(Landroid/print/PrinterId;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addMediaSize](https://developer.android.com/reference/android/print/PrinterCapabilitiesInfo.Builder.html#addMediaSize(android.print.PrintAttributes.MediaSize,%20boolean))
        ///
        /// Required features: "android-print-PrintAttributes_MediaSize", "android-print-PrinterCapabilitiesInfo_Builder"
        #[cfg(any(feature = "all", all(feature = "android-print-PrintAttributes_MediaSize", feature = "android-print-PrinterCapabilitiesInfo_Builder")))]
        pub fn addMediaSize<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::print::PrintAttributes_MediaSize>>, arg1: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::print::PrinterCapabilitiesInfo_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/print/PrinterCapabilitiesInfo$Builder", java.flags == PUBLIC, .name == "addMediaSize", .descriptor == "(Landroid/print/PrintAttributes$MediaSize;Z)Landroid/print/PrinterCapabilitiesInfo$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/print/PrinterCapabilitiesInfo$Builder\0", "addMediaSize\0", "(Landroid/print/PrintAttributes$MediaSize;Z)Landroid/print/PrinterCapabilitiesInfo$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addResolution](https://developer.android.com/reference/android/print/PrinterCapabilitiesInfo.Builder.html#addResolution(android.print.PrintAttributes.Resolution,%20boolean))
        ///
        /// Required features: "android-print-PrintAttributes_Resolution", "android-print-PrinterCapabilitiesInfo_Builder"
        #[cfg(any(feature = "all", all(feature = "android-print-PrintAttributes_Resolution", feature = "android-print-PrinterCapabilitiesInfo_Builder")))]
        pub fn addResolution<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::print::PrintAttributes_Resolution>>, arg1: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::print::PrinterCapabilitiesInfo_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/print/PrinterCapabilitiesInfo$Builder", java.flags == PUBLIC, .name == "addResolution", .descriptor == "(Landroid/print/PrintAttributes$Resolution;Z)Landroid/print/PrinterCapabilitiesInfo$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/print/PrinterCapabilitiesInfo$Builder\0", "addResolution\0", "(Landroid/print/PrintAttributes$Resolution;Z)Landroid/print/PrinterCapabilitiesInfo$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setMinMargins](https://developer.android.com/reference/android/print/PrinterCapabilitiesInfo.Builder.html#setMinMargins(android.print.PrintAttributes.Margins))
        ///
        /// Required features: "android-print-PrintAttributes_Margins", "android-print-PrinterCapabilitiesInfo_Builder"
        #[cfg(any(feature = "all", all(feature = "android-print-PrintAttributes_Margins", feature = "android-print-PrinterCapabilitiesInfo_Builder")))]
        pub fn setMinMargins<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::print::PrintAttributes_Margins>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::print::PrinterCapabilitiesInfo_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/print/PrinterCapabilitiesInfo$Builder", java.flags == PUBLIC, .name == "setMinMargins", .descriptor == "(Landroid/print/PrintAttributes$Margins;)Landroid/print/PrinterCapabilitiesInfo$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/print/PrinterCapabilitiesInfo$Builder\0", "setMinMargins\0", "(Landroid/print/PrintAttributes$Margins;)Landroid/print/PrinterCapabilitiesInfo$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setColorModes](https://developer.android.com/reference/android/print/PrinterCapabilitiesInfo.Builder.html#setColorModes(int,%20int))
        ///
        /// Required features: "android-print-PrinterCapabilitiesInfo_Builder"
        #[cfg(any(feature = "all", all(feature = "android-print-PrinterCapabilitiesInfo_Builder")))]
        pub fn setColorModes<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::print::PrinterCapabilitiesInfo_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/print/PrinterCapabilitiesInfo$Builder", java.flags == PUBLIC, .name == "setColorModes", .descriptor == "(II)Landroid/print/PrinterCapabilitiesInfo$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/print/PrinterCapabilitiesInfo$Builder\0", "setColorModes\0", "(II)Landroid/print/PrinterCapabilitiesInfo$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDuplexModes](https://developer.android.com/reference/android/print/PrinterCapabilitiesInfo.Builder.html#setDuplexModes(int,%20int))
        ///
        /// Required features: "android-print-PrinterCapabilitiesInfo_Builder"
        #[cfg(any(feature = "all", all(feature = "android-print-PrinterCapabilitiesInfo_Builder")))]
        pub fn setDuplexModes<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::print::PrinterCapabilitiesInfo_Builder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/print/PrinterCapabilitiesInfo$Builder", java.flags == PUBLIC, .name == "setDuplexModes", .descriptor == "(II)Landroid/print/PrinterCapabilitiesInfo$Builder;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/print/PrinterCapabilitiesInfo$Builder\0", "setDuplexModes\0", "(II)Landroid/print/PrinterCapabilitiesInfo$Builder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [build](https://developer.android.com/reference/android/print/PrinterCapabilitiesInfo.Builder.html#build())
        ///
        /// Required features: "android-print-PrinterCapabilitiesInfo"
        #[cfg(any(feature = "all", all(feature = "android-print-PrinterCapabilitiesInfo")))]
        pub fn build<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::print::PrinterCapabilitiesInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/print/PrinterCapabilitiesInfo$Builder", java.flags == PUBLIC, .name == "build", .descriptor == "()Landroid/print/PrinterCapabilitiesInfo;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/print/PrinterCapabilitiesInfo$Builder\0", "build\0", "()Landroid/print/PrinterCapabilitiesInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
