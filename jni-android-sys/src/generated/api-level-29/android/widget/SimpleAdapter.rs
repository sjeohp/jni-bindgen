// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-widget-SimpleAdapter"))]
__jni_bindgen! {
    /// public class [SimpleAdapter](https://developer.android.com/reference/android/widget/SimpleAdapter.html)
    ///
    /// Required feature: android-widget-SimpleAdapter
    public class SimpleAdapter ("android/widget/SimpleAdapter") extends crate::android::widget::BaseAdapter, implements crate::android::widget::Filterable, crate::android::widget::ThemedSpinnerAdapter {

        /// [SimpleAdapter](https://developer.android.com/reference/android/widget/SimpleAdapter.html#SimpleAdapter(android.content.Context,%20java.util.List,%20int,%20java.lang.String%5B%5D,%20int%5B%5D))
        ///
        /// Required features: "android-content-Context", "java-lang-String", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "java-lang-String", feature = "java-util-List")))]
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::widget::SimpleAdapter>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/SimpleAdapter", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/content/Context;Ljava/util/List;I[Ljava/lang/String;[I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/SimpleAdapter\0", "<init>\0", "(Landroid/content/Context;Ljava/util/List;I[Ljava/lang/String;[I)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCount](https://developer.android.com/reference/android/widget/SimpleAdapter.html#getCount())
        pub fn getCount<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/SimpleAdapter", java.flags == PUBLIC, .name == "getCount", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/SimpleAdapter\0", "getCount\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getItem](https://developer.android.com/reference/android/widget/SimpleAdapter.html#getItem(int))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn getItem<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/SimpleAdapter", java.flags == PUBLIC, .name == "getItem", .descriptor == "(I)Ljava/lang/Object;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/SimpleAdapter\0", "getItem\0", "(I)Ljava/lang/Object;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getItemId](https://developer.android.com/reference/android/widget/SimpleAdapter.html#getItemId(int))
        pub fn getItemId<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/SimpleAdapter", java.flags == PUBLIC, .name == "getItemId", .descriptor == "(I)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/SimpleAdapter\0", "getItemId\0", "(I)J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getView](https://developer.android.com/reference/android/widget/SimpleAdapter.html#getView(int,%20android.view.View,%20android.view.ViewGroup))
        ///
        /// Required features: "android-view-View", "android-view-ViewGroup"
        #[cfg(any(feature = "all", all(feature = "android-view-View", feature = "android-view-ViewGroup")))]
        pub fn getView<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::ViewGroup>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::View>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/SimpleAdapter", java.flags == PUBLIC, .name == "getView", .descriptor == "(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/SimpleAdapter\0", "getView\0", "(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDropDownViewResource](https://developer.android.com/reference/android/widget/SimpleAdapter.html#setDropDownViewResource(int))
        pub fn setDropDownViewResource<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/SimpleAdapter", java.flags == PUBLIC, .name == "setDropDownViewResource", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/SimpleAdapter\0", "setDropDownViewResource\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDropDownViewTheme](https://developer.android.com/reference/android/widget/SimpleAdapter.html#setDropDownViewTheme(android.content.res.Resources.Theme))
        ///
        /// Required features: "android-content-res-Resources_Theme"
        #[cfg(any(feature = "all", all(feature = "android-content-res-Resources_Theme")))]
        pub fn setDropDownViewTheme<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::res::Resources_Theme>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/SimpleAdapter", java.flags == PUBLIC, .name == "setDropDownViewTheme", .descriptor == "(Landroid/content/res/Resources$Theme;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/SimpleAdapter\0", "setDropDownViewTheme\0", "(Landroid/content/res/Resources$Theme;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDropDownViewTheme](https://developer.android.com/reference/android/widget/SimpleAdapter.html#getDropDownViewTheme())
        ///
        /// Required features: "android-content-res-Resources_Theme"
        #[cfg(any(feature = "all", all(feature = "android-content-res-Resources_Theme")))]
        pub fn getDropDownViewTheme<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::res::Resources_Theme>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/SimpleAdapter", java.flags == PUBLIC, .name == "getDropDownViewTheme", .descriptor == "()Landroid/content/res/Resources$Theme;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/SimpleAdapter\0", "getDropDownViewTheme\0", "()Landroid/content/res/Resources$Theme;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDropDownView](https://developer.android.com/reference/android/widget/SimpleAdapter.html#getDropDownView(int,%20android.view.View,%20android.view.ViewGroup))
        ///
        /// Required features: "android-view-View", "android-view-ViewGroup"
        #[cfg(any(feature = "all", all(feature = "android-view-View", feature = "android-view-ViewGroup")))]
        pub fn getDropDownView<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::ViewGroup>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::View>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/SimpleAdapter", java.flags == PUBLIC, .name == "getDropDownView", .descriptor == "(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/SimpleAdapter\0", "getDropDownView\0", "(ILandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getViewBinder](https://developer.android.com/reference/android/widget/SimpleAdapter.html#getViewBinder())
        ///
        /// Required features: "android-widget-SimpleAdapter_ViewBinder"
        #[cfg(any(feature = "all", all(feature = "android-widget-SimpleAdapter_ViewBinder")))]
        pub fn getViewBinder<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::widget::SimpleAdapter_ViewBinder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/SimpleAdapter", java.flags == PUBLIC, .name == "getViewBinder", .descriptor == "()Landroid/widget/SimpleAdapter$ViewBinder;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/SimpleAdapter\0", "getViewBinder\0", "()Landroid/widget/SimpleAdapter$ViewBinder;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setViewBinder](https://developer.android.com/reference/android/widget/SimpleAdapter.html#setViewBinder(android.widget.SimpleAdapter.ViewBinder))
        ///
        /// Required features: "android-widget-SimpleAdapter_ViewBinder"
        #[cfg(any(feature = "all", all(feature = "android-widget-SimpleAdapter_ViewBinder")))]
        pub fn setViewBinder<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::widget::SimpleAdapter_ViewBinder>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/SimpleAdapter", java.flags == PUBLIC, .name == "setViewBinder", .descriptor == "(Landroid/widget/SimpleAdapter$ViewBinder;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/SimpleAdapter\0", "setViewBinder\0", "(Landroid/widget/SimpleAdapter$ViewBinder;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setViewImage](https://developer.android.com/reference/android/widget/SimpleAdapter.html#setViewImage(android.widget.ImageView,%20int))
        ///
        /// Required features: "android-widget-ImageView"
        #[cfg(any(feature = "all", all(feature = "android-widget-ImageView")))]
        pub fn setViewImage_ImageView_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::widget::ImageView>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/SimpleAdapter", java.flags == PUBLIC, .name == "setViewImage", .descriptor == "(Landroid/widget/ImageView;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/SimpleAdapter\0", "setViewImage\0", "(Landroid/widget/ImageView;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setViewImage](https://developer.android.com/reference/android/widget/SimpleAdapter.html#setViewImage(android.widget.ImageView,%20java.lang.String))
        ///
        /// Required features: "android-widget-ImageView", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-widget-ImageView", feature = "java-lang-String")))]
        pub fn setViewImage_ImageView_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::widget::ImageView>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/SimpleAdapter", java.flags == PUBLIC, .name == "setViewImage", .descriptor == "(Landroid/widget/ImageView;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/SimpleAdapter\0", "setViewImage\0", "(Landroid/widget/ImageView;Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setViewText](https://developer.android.com/reference/android/widget/SimpleAdapter.html#setViewText(android.widget.TextView,%20java.lang.String))
        ///
        /// Required features: "android-widget-TextView", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-widget-TextView", feature = "java-lang-String")))]
        pub fn setViewText<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::widget::TextView>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/SimpleAdapter", java.flags == PUBLIC, .name == "setViewText", .descriptor == "(Landroid/widget/TextView;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/SimpleAdapter\0", "setViewText\0", "(Landroid/widget/TextView;Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFilter](https://developer.android.com/reference/android/widget/SimpleAdapter.html#getFilter())
        ///
        /// Required features: "android-widget-Filter"
        #[cfg(any(feature = "all", all(feature = "android-widget-Filter")))]
        pub fn getFilter<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::widget::Filter>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/SimpleAdapter", java.flags == PUBLIC, .name == "getFilter", .descriptor == "()Landroid/widget/Filter;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/SimpleAdapter\0", "getFilter\0", "()Landroid/widget/Filter;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
