// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-widget-CursorTreeAdapter"))]
__jni_bindgen! {
    /// public class [CursorTreeAdapter](https://developer.android.com/reference/android/widget/CursorTreeAdapter.html)
    ///
    /// Required feature: android-widget-CursorTreeAdapter
    public class CursorTreeAdapter ("android/widget/CursorTreeAdapter") extends crate::android::widget::BaseExpandableListAdapter, implements crate::android::widget::Filterable {

        /// [CursorTreeAdapter](https://developer.android.com/reference/android/widget/CursorTreeAdapter.html#CursorTreeAdapter(android.database.Cursor,%20android.content.Context))
        ///
        /// Required features: "android-content-Context", "android-database-Cursor"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-database-Cursor")))]
        pub fn new_Cursor_Context<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::database::Cursor>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::widget::CursorTreeAdapter>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/CursorTreeAdapter", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/database/Cursor;Landroid/content/Context;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/CursorTreeAdapter\0", "<init>\0", "(Landroid/database/Cursor;Landroid/content/Context;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [CursorTreeAdapter](https://developer.android.com/reference/android/widget/CursorTreeAdapter.html#CursorTreeAdapter(android.database.Cursor,%20android.content.Context,%20boolean))
        ///
        /// Required features: "android-content-Context", "android-database-Cursor"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-database-Cursor")))]
        pub fn new_Cursor_Context_boolean<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::database::Cursor>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg2: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::widget::CursorTreeAdapter>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/CursorTreeAdapter", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/database/Cursor;Landroid/content/Context;Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/CursorTreeAdapter\0", "<init>\0", "(Landroid/database/Cursor;Landroid/content/Context;Z)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [getChildrenCursor](https://developer.android.com/reference/android/widget/CursorTreeAdapter.html#getChildrenCursor(android.database.Cursor))
        // ///
        // /// Required features: "android-database-Cursor"
        // #[cfg(any(feature = "all", all(feature = "android-database-Cursor")))]
        // fn getChildrenCursor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::database::Cursor>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::database::Cursor>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/widget/CursorTreeAdapter", java.flags == PROTECTED | ABSTRACT, .name == "getChildrenCursor", .descriptor == "(Landroid/database/Cursor;)Landroid/database/Cursor;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/CursorTreeAdapter\0", "getChildrenCursor\0", "(Landroid/database/Cursor;)Landroid/database/Cursor;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [setGroupCursor](https://developer.android.com/reference/android/widget/CursorTreeAdapter.html#setGroupCursor(android.database.Cursor))
        ///
        /// Required features: "android-database-Cursor"
        #[cfg(any(feature = "all", all(feature = "android-database-Cursor")))]
        pub fn setGroupCursor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::database::Cursor>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/CursorTreeAdapter", java.flags == PUBLIC, .name == "setGroupCursor", .descriptor == "(Landroid/database/Cursor;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/CursorTreeAdapter\0", "setGroupCursor\0", "(Landroid/database/Cursor;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setChildrenCursor](https://developer.android.com/reference/android/widget/CursorTreeAdapter.html#setChildrenCursor(int,%20android.database.Cursor))
        ///
        /// Required features: "android-database-Cursor"
        #[cfg(any(feature = "all", all(feature = "android-database-Cursor")))]
        pub fn setChildrenCursor<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::database::Cursor>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/CursorTreeAdapter", java.flags == PUBLIC, .name == "setChildrenCursor", .descriptor == "(ILandroid/database/Cursor;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/CursorTreeAdapter\0", "setChildrenCursor\0", "(ILandroid/database/Cursor;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getChild](https://developer.android.com/reference/android/widget/CursorTreeAdapter.html#getChild(int,%20int))
        ///
        /// Required features: "android-database-Cursor"
        #[cfg(any(feature = "all", all(feature = "android-database-Cursor")))]
        pub fn getChild_int_int<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::database::Cursor>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/CursorTreeAdapter", java.flags == PUBLIC, .name == "getChild", .descriptor == "(II)Landroid/database/Cursor;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/CursorTreeAdapter\0", "getChild\0", "(II)Landroid/database/Cursor;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getChildId](https://developer.android.com/reference/android/widget/CursorTreeAdapter.html#getChildId(int,%20int))
        pub fn getChildId<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/CursorTreeAdapter", java.flags == PUBLIC, .name == "getChildId", .descriptor == "(II)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/CursorTreeAdapter\0", "getChildId\0", "(II)J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getChildrenCount](https://developer.android.com/reference/android/widget/CursorTreeAdapter.html#getChildrenCount(int))
        pub fn getChildrenCount<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/CursorTreeAdapter", java.flags == PUBLIC, .name == "getChildrenCount", .descriptor == "(I)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/CursorTreeAdapter\0", "getChildrenCount\0", "(I)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getGroup](https://developer.android.com/reference/android/widget/CursorTreeAdapter.html#getGroup(int))
        ///
        /// Required features: "android-database-Cursor"
        #[cfg(any(feature = "all", all(feature = "android-database-Cursor")))]
        pub fn getGroup_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::database::Cursor>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/CursorTreeAdapter", java.flags == PUBLIC, .name == "getGroup", .descriptor == "(I)Landroid/database/Cursor;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/CursorTreeAdapter\0", "getGroup\0", "(I)Landroid/database/Cursor;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getGroupCount](https://developer.android.com/reference/android/widget/CursorTreeAdapter.html#getGroupCount())
        pub fn getGroupCount<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/CursorTreeAdapter", java.flags == PUBLIC, .name == "getGroupCount", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/CursorTreeAdapter\0", "getGroupCount\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getGroupId](https://developer.android.com/reference/android/widget/CursorTreeAdapter.html#getGroupId(int))
        pub fn getGroupId<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/CursorTreeAdapter", java.flags == PUBLIC, .name == "getGroupId", .descriptor == "(I)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/CursorTreeAdapter\0", "getGroupId\0", "(I)J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getGroupView](https://developer.android.com/reference/android/widget/CursorTreeAdapter.html#getGroupView(int,%20boolean,%20android.view.View,%20android.view.ViewGroup))
        ///
        /// Required features: "android-view-View", "android-view-ViewGroup"
        #[cfg(any(feature = "all", all(feature = "android-view-View", feature = "android-view-ViewGroup")))]
        pub fn getGroupView<'env>(&'env self, arg0: i32, arg1: bool, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::ViewGroup>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::View>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/CursorTreeAdapter", java.flags == PUBLIC, .name == "getGroupView", .descriptor == "(IZLandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/CursorTreeAdapter\0", "getGroupView\0", "(IZLandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [newGroupView](https://developer.android.com/reference/android/widget/CursorTreeAdapter.html#newGroupView(android.content.Context,%20android.database.Cursor,%20boolean,%20android.view.ViewGroup))
        // ///
        // /// Required features: "android-content-Context", "android-database-Cursor", "android-view-View", "android-view-ViewGroup"
        // #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-database-Cursor", feature = "android-view-View", feature = "android-view-ViewGroup")))]
        // fn newGroupView<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::database::Cursor>>, arg2: bool, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::ViewGroup>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::View>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/widget/CursorTreeAdapter", java.flags == PROTECTED | ABSTRACT, .name == "newGroupView", .descriptor == "(Landroid/content/Context;Landroid/database/Cursor;ZLandroid/view/ViewGroup;)Landroid/view/View;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/CursorTreeAdapter\0", "newGroupView\0", "(Landroid/content/Context;Landroid/database/Cursor;ZLandroid/view/ViewGroup;)Landroid/view/View;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [bindGroupView](https://developer.android.com/reference/android/widget/CursorTreeAdapter.html#bindGroupView(android.view.View,%20android.content.Context,%20android.database.Cursor,%20boolean))
        // ///
        // /// Required features: "android-content-Context", "android-database-Cursor", "android-view-View"
        // #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-database-Cursor", feature = "android-view-View")))]
        // fn bindGroupView<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::database::Cursor>>, arg3: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/widget/CursorTreeAdapter", java.flags == PROTECTED | ABSTRACT, .name == "bindGroupView", .descriptor == "(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;Z)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/CursorTreeAdapter\0", "bindGroupView\0", "(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;Z)V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getChildView](https://developer.android.com/reference/android/widget/CursorTreeAdapter.html#getChildView(int,%20int,%20boolean,%20android.view.View,%20android.view.ViewGroup))
        ///
        /// Required features: "android-view-View", "android-view-ViewGroup"
        #[cfg(any(feature = "all", all(feature = "android-view-View", feature = "android-view-ViewGroup")))]
        pub fn getChildView<'env>(&'env self, arg0: i32, arg1: i32, arg2: bool, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::ViewGroup>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::View>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/CursorTreeAdapter", java.flags == PUBLIC, .name == "getChildView", .descriptor == "(IIZLandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/CursorTreeAdapter\0", "getChildView\0", "(IIZLandroid/view/View;Landroid/view/ViewGroup;)Landroid/view/View;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [newChildView](https://developer.android.com/reference/android/widget/CursorTreeAdapter.html#newChildView(android.content.Context,%20android.database.Cursor,%20boolean,%20android.view.ViewGroup))
        // ///
        // /// Required features: "android-content-Context", "android-database-Cursor", "android-view-View", "android-view-ViewGroup"
        // #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-database-Cursor", feature = "android-view-View", feature = "android-view-ViewGroup")))]
        // fn newChildView<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::database::Cursor>>, arg2: bool, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::ViewGroup>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::View>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/widget/CursorTreeAdapter", java.flags == PROTECTED | ABSTRACT, .name == "newChildView", .descriptor == "(Landroid/content/Context;Landroid/database/Cursor;ZLandroid/view/ViewGroup;)Landroid/view/View;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/CursorTreeAdapter\0", "newChildView\0", "(Landroid/content/Context;Landroid/database/Cursor;ZLandroid/view/ViewGroup;)Landroid/view/View;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [bindChildView](https://developer.android.com/reference/android/widget/CursorTreeAdapter.html#bindChildView(android.view.View,%20android.content.Context,%20android.database.Cursor,%20boolean))
        // ///
        // /// Required features: "android-content-Context", "android-database-Cursor", "android-view-View"
        // #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-database-Cursor", feature = "android-view-View")))]
        // fn bindChildView<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::database::Cursor>>, arg3: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/widget/CursorTreeAdapter", java.flags == PROTECTED | ABSTRACT, .name == "bindChildView", .descriptor == "(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;Z)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/CursorTreeAdapter\0", "bindChildView\0", "(Landroid/view/View;Landroid/content/Context;Landroid/database/Cursor;Z)V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [isChildSelectable](https://developer.android.com/reference/android/widget/CursorTreeAdapter.html#isChildSelectable(int,%20int))
        pub fn isChildSelectable<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/CursorTreeAdapter", java.flags == PUBLIC, .name == "isChildSelectable", .descriptor == "(II)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/CursorTreeAdapter\0", "isChildSelectable\0", "(II)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasStableIds](https://developer.android.com/reference/android/widget/CursorTreeAdapter.html#hasStableIds())
        pub fn hasStableIds<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/CursorTreeAdapter", java.flags == PUBLIC, .name == "hasStableIds", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/CursorTreeAdapter\0", "hasStableIds\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [notifyDataSetChanged](https://developer.android.com/reference/android/widget/CursorTreeAdapter.html#notifyDataSetChanged())
        pub fn notifyDataSetChanged<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/CursorTreeAdapter", java.flags == PUBLIC, .name == "notifyDataSetChanged", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/CursorTreeAdapter\0", "notifyDataSetChanged\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [notifyDataSetChanged](https://developer.android.com/reference/android/widget/CursorTreeAdapter.html#notifyDataSetChanged(boolean))
        pub fn notifyDataSetChanged_boolean<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/CursorTreeAdapter", java.flags == PUBLIC, .name == "notifyDataSetChanged", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/CursorTreeAdapter\0", "notifyDataSetChanged\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [notifyDataSetInvalidated](https://developer.android.com/reference/android/widget/CursorTreeAdapter.html#notifyDataSetInvalidated())
        pub fn notifyDataSetInvalidated<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/CursorTreeAdapter", java.flags == PUBLIC, .name == "notifyDataSetInvalidated", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/CursorTreeAdapter\0", "notifyDataSetInvalidated\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onGroupCollapsed](https://developer.android.com/reference/android/widget/CursorTreeAdapter.html#onGroupCollapsed(int))
        pub fn onGroupCollapsed<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/CursorTreeAdapter", java.flags == PUBLIC, .name == "onGroupCollapsed", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/CursorTreeAdapter\0", "onGroupCollapsed\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [convertToString](https://developer.android.com/reference/android/widget/CursorTreeAdapter.html#convertToString(android.database.Cursor))
        ///
        /// Required features: "android-database-Cursor", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-database-Cursor", feature = "java-lang-String")))]
        pub fn convertToString<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::database::Cursor>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/CursorTreeAdapter", java.flags == PUBLIC, .name == "convertToString", .descriptor == "(Landroid/database/Cursor;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/CursorTreeAdapter\0", "convertToString\0", "(Landroid/database/Cursor;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [runQueryOnBackgroundThread](https://developer.android.com/reference/android/widget/CursorTreeAdapter.html#runQueryOnBackgroundThread(java.lang.CharSequence))
        ///
        /// Required features: "android-database-Cursor", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-database-Cursor", feature = "java-lang-CharSequence")))]
        pub fn runQueryOnBackgroundThread<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::database::Cursor>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/CursorTreeAdapter", java.flags == PUBLIC, .name == "runQueryOnBackgroundThread", .descriptor == "(Ljava/lang/CharSequence;)Landroid/database/Cursor;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/CursorTreeAdapter\0", "runQueryOnBackgroundThread\0", "(Ljava/lang/CharSequence;)Landroid/database/Cursor;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFilter](https://developer.android.com/reference/android/widget/CursorTreeAdapter.html#getFilter())
        ///
        /// Required features: "android-widget-Filter"
        #[cfg(any(feature = "all", all(feature = "android-widget-Filter")))]
        pub fn getFilter<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::widget::Filter>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/CursorTreeAdapter", java.flags == PUBLIC, .name == "getFilter", .descriptor == "()Landroid/widget/Filter;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/CursorTreeAdapter\0", "getFilter\0", "()Landroid/widget/Filter;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFilterQueryProvider](https://developer.android.com/reference/android/widget/CursorTreeAdapter.html#getFilterQueryProvider())
        ///
        /// Required features: "android-widget-FilterQueryProvider"
        #[cfg(any(feature = "all", all(feature = "android-widget-FilterQueryProvider")))]
        pub fn getFilterQueryProvider<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::widget::FilterQueryProvider>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/CursorTreeAdapter", java.flags == PUBLIC, .name == "getFilterQueryProvider", .descriptor == "()Landroid/widget/FilterQueryProvider;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/CursorTreeAdapter\0", "getFilterQueryProvider\0", "()Landroid/widget/FilterQueryProvider;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setFilterQueryProvider](https://developer.android.com/reference/android/widget/CursorTreeAdapter.html#setFilterQueryProvider(android.widget.FilterQueryProvider))
        ///
        /// Required features: "android-widget-FilterQueryProvider"
        #[cfg(any(feature = "all", all(feature = "android-widget-FilterQueryProvider")))]
        pub fn setFilterQueryProvider<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::widget::FilterQueryProvider>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/CursorTreeAdapter", java.flags == PUBLIC, .name == "setFilterQueryProvider", .descriptor == "(Landroid/widget/FilterQueryProvider;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/CursorTreeAdapter\0", "setFilterQueryProvider\0", "(Landroid/widget/FilterQueryProvider;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [changeCursor](https://developer.android.com/reference/android/widget/CursorTreeAdapter.html#changeCursor(android.database.Cursor))
        ///
        /// Required features: "android-database-Cursor"
        #[cfg(any(feature = "all", all(feature = "android-database-Cursor")))]
        pub fn changeCursor<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::database::Cursor>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/CursorTreeAdapter", java.flags == PUBLIC, .name == "changeCursor", .descriptor == "(Landroid/database/Cursor;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/CursorTreeAdapter\0", "changeCursor\0", "(Landroid/database/Cursor;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCursor](https://developer.android.com/reference/android/widget/CursorTreeAdapter.html#getCursor())
        ///
        /// Required features: "android-database-Cursor"
        #[cfg(any(feature = "all", all(feature = "android-database-Cursor")))]
        pub fn getCursor<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::database::Cursor>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/CursorTreeAdapter", java.flags == PUBLIC, .name == "getCursor", .descriptor == "()Landroid/database/Cursor;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/CursorTreeAdapter\0", "getCursor\0", "()Landroid/database/Cursor;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Bridge method - type erasure
        // /// [getChild](https://developer.android.com/reference/android/widget/CursorTreeAdapter.html#getChild(int,%20int))
        // ///
        // /// Required features: "java-lang-Object"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        // pub fn getChild_int_int<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/widget/CursorTreeAdapter", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "getChild", .descriptor == "(II)Ljava/lang/Object;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/CursorTreeAdapter\0", "getChild\0", "(II)Ljava/lang/Object;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [getGroup](https://developer.android.com/reference/android/widget/CursorTreeAdapter.html#getGroup(int))
        // ///
        // /// Required features: "java-lang-Object"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        // pub fn getGroup_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/widget/CursorTreeAdapter", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "getGroup", .descriptor == "(I)Ljava/lang/Object;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/CursorTreeAdapter\0", "getGroup\0", "(I)Ljava/lang/Object;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }
    }
}
