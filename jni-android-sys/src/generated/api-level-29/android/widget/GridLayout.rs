// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-widget-GridLayout"))]
__jni_bindgen! {
    /// public class [GridLayout](https://developer.android.com/reference/android/widget/GridLayout.html)
    ///
    /// Required feature: android-widget-GridLayout
    public class GridLayout ("android/widget/GridLayout") extends crate::android::view::ViewGroup {

        /// [GridLayout](https://developer.android.com/reference/android/widget/GridLayout.html#GridLayout(android.content.Context))
        ///
        /// Required features: "android-content-Context"
        #[cfg(any(feature = "all", all(feature = "android-content-Context")))]
        pub fn new_Context<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::widget::GridLayout>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/GridLayout", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/content/Context;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/GridLayout\0", "<init>\0", "(Landroid/content/Context;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [GridLayout](https://developer.android.com/reference/android/widget/GridLayout.html#GridLayout(android.content.Context,%20android.util.AttributeSet))
        ///
        /// Required features: "android-content-Context", "android-util-AttributeSet"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-util-AttributeSet")))]
        pub fn new_Context_AttributeSet<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::util::AttributeSet>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::widget::GridLayout>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/GridLayout", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/content/Context;Landroid/util/AttributeSet;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/GridLayout\0", "<init>\0", "(Landroid/content/Context;Landroid/util/AttributeSet;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [GridLayout](https://developer.android.com/reference/android/widget/GridLayout.html#GridLayout(android.content.Context,%20android.util.AttributeSet,%20int))
        ///
        /// Required features: "android-content-Context", "android-util-AttributeSet"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-util-AttributeSet")))]
        pub fn new_Context_AttributeSet_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::util::AttributeSet>>, arg2: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::widget::GridLayout>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/GridLayout", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/content/Context;Landroid/util/AttributeSet;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/GridLayout\0", "<init>\0", "(Landroid/content/Context;Landroid/util/AttributeSet;I)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [GridLayout](https://developer.android.com/reference/android/widget/GridLayout.html#GridLayout(android.content.Context,%20android.util.AttributeSet,%20int,%20int))
        ///
        /// Required features: "android-content-Context", "android-util-AttributeSet"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-util-AttributeSet")))]
        pub fn new_Context_AttributeSet_int_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::util::AttributeSet>>, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::widget::GridLayout>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/GridLayout", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/content/Context;Landroid/util/AttributeSet;II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/GridLayout\0", "<init>\0", "(Landroid/content/Context;Landroid/util/AttributeSet;II)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getOrientation](https://developer.android.com/reference/android/widget/GridLayout.html#getOrientation())
        pub fn getOrientation<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/GridLayout", java.flags == PUBLIC, .name == "getOrientation", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/GridLayout\0", "getOrientation\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOrientation](https://developer.android.com/reference/android/widget/GridLayout.html#setOrientation(int))
        pub fn setOrientation<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/GridLayout", java.flags == PUBLIC, .name == "setOrientation", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/GridLayout\0", "setOrientation\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRowCount](https://developer.android.com/reference/android/widget/GridLayout.html#getRowCount())
        pub fn getRowCount<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/GridLayout", java.flags == PUBLIC, .name == "getRowCount", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/GridLayout\0", "getRowCount\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setRowCount](https://developer.android.com/reference/android/widget/GridLayout.html#setRowCount(int))
        pub fn setRowCount<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/GridLayout", java.flags == PUBLIC, .name == "setRowCount", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/GridLayout\0", "setRowCount\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getColumnCount](https://developer.android.com/reference/android/widget/GridLayout.html#getColumnCount())
        pub fn getColumnCount<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/GridLayout", java.flags == PUBLIC, .name == "getColumnCount", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/GridLayout\0", "getColumnCount\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setColumnCount](https://developer.android.com/reference/android/widget/GridLayout.html#setColumnCount(int))
        pub fn setColumnCount<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/GridLayout", java.flags == PUBLIC, .name == "setColumnCount", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/GridLayout\0", "setColumnCount\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getUseDefaultMargins](https://developer.android.com/reference/android/widget/GridLayout.html#getUseDefaultMargins())
        pub fn getUseDefaultMargins<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/GridLayout", java.flags == PUBLIC, .name == "getUseDefaultMargins", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/GridLayout\0", "getUseDefaultMargins\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setUseDefaultMargins](https://developer.android.com/reference/android/widget/GridLayout.html#setUseDefaultMargins(boolean))
        pub fn setUseDefaultMargins<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/GridLayout", java.flags == PUBLIC, .name == "setUseDefaultMargins", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/GridLayout\0", "setUseDefaultMargins\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAlignmentMode](https://developer.android.com/reference/android/widget/GridLayout.html#getAlignmentMode())
        pub fn getAlignmentMode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/GridLayout", java.flags == PUBLIC, .name == "getAlignmentMode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/GridLayout\0", "getAlignmentMode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAlignmentMode](https://developer.android.com/reference/android/widget/GridLayout.html#setAlignmentMode(int))
        pub fn setAlignmentMode<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/GridLayout", java.flags == PUBLIC, .name == "setAlignmentMode", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/GridLayout\0", "setAlignmentMode\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isRowOrderPreserved](https://developer.android.com/reference/android/widget/GridLayout.html#isRowOrderPreserved())
        pub fn isRowOrderPreserved<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/GridLayout", java.flags == PUBLIC, .name == "isRowOrderPreserved", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/GridLayout\0", "isRowOrderPreserved\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setRowOrderPreserved](https://developer.android.com/reference/android/widget/GridLayout.html#setRowOrderPreserved(boolean))
        pub fn setRowOrderPreserved<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/GridLayout", java.flags == PUBLIC, .name == "setRowOrderPreserved", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/GridLayout\0", "setRowOrderPreserved\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isColumnOrderPreserved](https://developer.android.com/reference/android/widget/GridLayout.html#isColumnOrderPreserved())
        pub fn isColumnOrderPreserved<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/GridLayout", java.flags == PUBLIC, .name == "isColumnOrderPreserved", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/GridLayout\0", "isColumnOrderPreserved\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setColumnOrderPreserved](https://developer.android.com/reference/android/widget/GridLayout.html#setColumnOrderPreserved(boolean))
        pub fn setColumnOrderPreserved<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/GridLayout", java.flags == PUBLIC, .name == "setColumnOrderPreserved", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/GridLayout\0", "setColumnOrderPreserved\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [checkLayoutParams](https://developer.android.com/reference/android/widget/GridLayout.html#checkLayoutParams(android.view.ViewGroup.LayoutParams))
        // ///
        // /// Required features: "android-view-ViewGroup_LayoutParams"
        // #[cfg(any(feature = "all", all(feature = "android-view-ViewGroup_LayoutParams")))]
        // fn checkLayoutParams<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::ViewGroup_LayoutParams>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/widget/GridLayout", java.flags == PROTECTED, .name == "checkLayoutParams", .descriptor == "(Landroid/view/ViewGroup$LayoutParams;)Z"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/GridLayout\0", "checkLayoutParams\0", "(Landroid/view/ViewGroup$LayoutParams;)Z\0");
        //         __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [generateDefaultLayoutParams](https://developer.android.com/reference/android/widget/GridLayout.html#generateDefaultLayoutParams())
        // ///
        // /// Required features: "android-widget-GridLayout_LayoutParams"
        // #[cfg(any(feature = "all", all(feature = "android-widget-GridLayout_LayoutParams")))]
        // fn generateDefaultLayoutParams<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::widget::GridLayout_LayoutParams>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/widget/GridLayout", java.flags == PROTECTED, .name == "generateDefaultLayoutParams", .descriptor == "()Landroid/widget/GridLayout$LayoutParams;"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/GridLayout\0", "generateDefaultLayoutParams\0", "()Landroid/widget/GridLayout$LayoutParams;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [generateLayoutParams](https://developer.android.com/reference/android/widget/GridLayout.html#generateLayoutParams(android.util.AttributeSet))
        ///
        /// Required features: "android-util-AttributeSet", "android-widget-GridLayout_LayoutParams"
        #[cfg(any(feature = "all", all(feature = "android-util-AttributeSet", feature = "android-widget-GridLayout_LayoutParams")))]
        pub fn generateLayoutParams_AttributeSet<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::util::AttributeSet>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::widget::GridLayout_LayoutParams>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/GridLayout", java.flags == PUBLIC, .name == "generateLayoutParams", .descriptor == "(Landroid/util/AttributeSet;)Landroid/widget/GridLayout$LayoutParams;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/GridLayout\0", "generateLayoutParams\0", "(Landroid/util/AttributeSet;)Landroid/widget/GridLayout$LayoutParams;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [generateLayoutParams](https://developer.android.com/reference/android/widget/GridLayout.html#generateLayoutParams(android.view.ViewGroup.LayoutParams))
        // ///
        // /// Required features: "android-view-ViewGroup_LayoutParams", "android-widget-GridLayout_LayoutParams"
        // #[cfg(any(feature = "all", all(feature = "android-view-ViewGroup_LayoutParams", feature = "android-widget-GridLayout_LayoutParams")))]
        // fn generateLayoutParams_LayoutParams<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::ViewGroup_LayoutParams>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::widget::GridLayout_LayoutParams>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/widget/GridLayout", java.flags == PROTECTED, .name == "generateLayoutParams", .descriptor == "(Landroid/view/ViewGroup$LayoutParams;)Landroid/widget/GridLayout$LayoutParams;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/GridLayout\0", "generateLayoutParams\0", "(Landroid/view/ViewGroup$LayoutParams;)Landroid/widget/GridLayout$LayoutParams;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [onViewAdded](https://developer.android.com/reference/android/widget/GridLayout.html#onViewAdded(android.view.View))
        ///
        /// Required features: "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-view-View")))]
        pub fn onViewAdded<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/GridLayout", java.flags == PUBLIC, .name == "onViewAdded", .descriptor == "(Landroid/view/View;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/GridLayout\0", "onViewAdded\0", "(Landroid/view/View;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onViewRemoved](https://developer.android.com/reference/android/widget/GridLayout.html#onViewRemoved(android.view.View))
        ///
        /// Required features: "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-view-View")))]
        pub fn onViewRemoved<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/GridLayout", java.flags == PUBLIC, .name == "onViewRemoved", .descriptor == "(Landroid/view/View;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/GridLayout\0", "onViewRemoved\0", "(Landroid/view/View;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [onMeasure](https://developer.android.com/reference/android/widget/GridLayout.html#onMeasure(int,%20int))
        // fn onMeasure<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/widget/GridLayout", java.flags == PROTECTED, .name == "onMeasure", .descriptor == "(II)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/GridLayout\0", "onMeasure\0", "(II)V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [requestLayout](https://developer.android.com/reference/android/widget/GridLayout.html#requestLayout())
        pub fn requestLayout<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/GridLayout", java.flags == PUBLIC, .name == "requestLayout", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/GridLayout\0", "requestLayout\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [onLayout](https://developer.android.com/reference/android/widget/GridLayout.html#onLayout(boolean,%20int,%20int,%20int,%20int))
        // fn onLayout<'env>(&'env self, arg0: bool, arg1: i32, arg2: i32, arg3: i32, arg4: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/widget/GridLayout", java.flags == PROTECTED, .name == "onLayout", .descriptor == "(ZIIII)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4)];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/GridLayout\0", "onLayout\0", "(ZIIII)V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getAccessibilityClassName](https://developer.android.com/reference/android/widget/GridLayout.html#getAccessibilityClassName())
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn getAccessibilityClassName<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::CharSequence>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/GridLayout", java.flags == PUBLIC, .name == "getAccessibilityClassName", .descriptor == "()Ljava/lang/CharSequence;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/GridLayout\0", "getAccessibilityClassName\0", "()Ljava/lang/CharSequence;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [spec](https://developer.android.com/reference/android/widget/GridLayout.html#spec(int,%20int,%20android.widget.GridLayout.Alignment,%20float))
        ///
        /// Required features: "android-widget-GridLayout_Alignment", "android-widget-GridLayout_Spec"
        #[cfg(any(feature = "all", all(feature = "android-widget-GridLayout_Alignment", feature = "android-widget-GridLayout_Spec")))]
        pub fn spec_int_int_Alignment_float<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::widget::GridLayout_Alignment>>, arg3: f32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::widget::GridLayout_Spec>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/GridLayout", java.flags == PUBLIC | STATIC, .name == "spec", .descriptor == "(IILandroid/widget/GridLayout$Alignment;F)Landroid/widget/GridLayout$Spec;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/widget/GridLayout\0", "spec\0", "(IILandroid/widget/GridLayout$Alignment;F)Landroid/widget/GridLayout$Spec;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [spec](https://developer.android.com/reference/android/widget/GridLayout.html#spec(int,%20android.widget.GridLayout.Alignment,%20float))
        ///
        /// Required features: "android-widget-GridLayout_Alignment", "android-widget-GridLayout_Spec"
        #[cfg(any(feature = "all", all(feature = "android-widget-GridLayout_Alignment", feature = "android-widget-GridLayout_Spec")))]
        pub fn spec_int_Alignment_float<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::widget::GridLayout_Alignment>>, arg2: f32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::widget::GridLayout_Spec>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/GridLayout", java.flags == PUBLIC | STATIC, .name == "spec", .descriptor == "(ILandroid/widget/GridLayout$Alignment;F)Landroid/widget/GridLayout$Spec;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/widget/GridLayout\0", "spec\0", "(ILandroid/widget/GridLayout$Alignment;F)Landroid/widget/GridLayout$Spec;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [spec](https://developer.android.com/reference/android/widget/GridLayout.html#spec(int,%20int,%20float))
        ///
        /// Required features: "android-widget-GridLayout_Spec"
        #[cfg(any(feature = "all", all(feature = "android-widget-GridLayout_Spec")))]
        pub fn spec_int_int_float<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: f32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::widget::GridLayout_Spec>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/GridLayout", java.flags == PUBLIC | STATIC, .name == "spec", .descriptor == "(IIF)Landroid/widget/GridLayout$Spec;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/widget/GridLayout\0", "spec\0", "(IIF)Landroid/widget/GridLayout$Spec;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [spec](https://developer.android.com/reference/android/widget/GridLayout.html#spec(int,%20float))
        ///
        /// Required features: "android-widget-GridLayout_Spec"
        #[cfg(any(feature = "all", all(feature = "android-widget-GridLayout_Spec")))]
        pub fn spec_int_float<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: f32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::widget::GridLayout_Spec>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/GridLayout", java.flags == PUBLIC | STATIC, .name == "spec", .descriptor == "(IF)Landroid/widget/GridLayout$Spec;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/widget/GridLayout\0", "spec\0", "(IF)Landroid/widget/GridLayout$Spec;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [spec](https://developer.android.com/reference/android/widget/GridLayout.html#spec(int,%20int,%20android.widget.GridLayout.Alignment))
        ///
        /// Required features: "android-widget-GridLayout_Alignment", "android-widget-GridLayout_Spec"
        #[cfg(any(feature = "all", all(feature = "android-widget-GridLayout_Alignment", feature = "android-widget-GridLayout_Spec")))]
        pub fn spec_int_int_Alignment<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::widget::GridLayout_Alignment>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::widget::GridLayout_Spec>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/GridLayout", java.flags == PUBLIC | STATIC, .name == "spec", .descriptor == "(IILandroid/widget/GridLayout$Alignment;)Landroid/widget/GridLayout$Spec;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/widget/GridLayout\0", "spec\0", "(IILandroid/widget/GridLayout$Alignment;)Landroid/widget/GridLayout$Spec;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [spec](https://developer.android.com/reference/android/widget/GridLayout.html#spec(int,%20android.widget.GridLayout.Alignment))
        ///
        /// Required features: "android-widget-GridLayout_Alignment", "android-widget-GridLayout_Spec"
        #[cfg(any(feature = "all", all(feature = "android-widget-GridLayout_Alignment", feature = "android-widget-GridLayout_Spec")))]
        pub fn spec_int_Alignment<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::widget::GridLayout_Alignment>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::widget::GridLayout_Spec>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/GridLayout", java.flags == PUBLIC | STATIC, .name == "spec", .descriptor == "(ILandroid/widget/GridLayout$Alignment;)Landroid/widget/GridLayout$Spec;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/widget/GridLayout\0", "spec\0", "(ILandroid/widget/GridLayout$Alignment;)Landroid/widget/GridLayout$Spec;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [spec](https://developer.android.com/reference/android/widget/GridLayout.html#spec(int,%20int))
        ///
        /// Required features: "android-widget-GridLayout_Spec"
        #[cfg(any(feature = "all", all(feature = "android-widget-GridLayout_Spec")))]
        pub fn spec_int_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::widget::GridLayout_Spec>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/GridLayout", java.flags == PUBLIC | STATIC, .name == "spec", .descriptor == "(II)Landroid/widget/GridLayout$Spec;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/widget/GridLayout\0", "spec\0", "(II)Landroid/widget/GridLayout$Spec;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [spec](https://developer.android.com/reference/android/widget/GridLayout.html#spec(int))
        ///
        /// Required features: "android-widget-GridLayout_Spec"
        #[cfg(any(feature = "all", all(feature = "android-widget-GridLayout_Spec")))]
        pub fn spec_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::widget::GridLayout_Spec>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/GridLayout", java.flags == PUBLIC | STATIC, .name == "spec", .descriptor == "(I)Landroid/widget/GridLayout$Spec;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/widget/GridLayout\0", "spec\0", "(I)Landroid/widget/GridLayout$Spec;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // // Not emitting: Bridge method - type erasure
        // /// [generateDefaultLayoutParams](https://developer.android.com/reference/android/widget/GridLayout.html#generateDefaultLayoutParams())
        // ///
        // /// Required features: "android-view-ViewGroup_LayoutParams"
        // #[cfg(any(feature = "all", all(feature = "android-view-ViewGroup_LayoutParams")))]
        // fn generateDefaultLayoutParams<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::ViewGroup_LayoutParams>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/widget/GridLayout", java.flags == PROTECTED | BRIDGE | SYNTHETIC, .name == "generateDefaultLayoutParams", .descriptor == "()Landroid/view/ViewGroup$LayoutParams;"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/GridLayout\0", "generateDefaultLayoutParams\0", "()Landroid/view/ViewGroup$LayoutParams;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // // Not emitting: Bridge method - type erasure
        // /// [generateLayoutParams](https://developer.android.com/reference/android/widget/GridLayout.html#generateLayoutParams(android.view.ViewGroup.LayoutParams))
        // ///
        // /// Required features: "android-view-ViewGroup_LayoutParams"
        // #[cfg(any(feature = "all", all(feature = "android-view-ViewGroup_LayoutParams")))]
        // fn generateLayoutParams_LayoutParams<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::ViewGroup_LayoutParams>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::ViewGroup_LayoutParams>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/widget/GridLayout", java.flags == PROTECTED | BRIDGE | SYNTHETIC, .name == "generateLayoutParams", .descriptor == "(Landroid/view/ViewGroup$LayoutParams;)Landroid/view/ViewGroup$LayoutParams;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/GridLayout\0", "generateLayoutParams\0", "(Landroid/view/ViewGroup$LayoutParams;)Landroid/view/ViewGroup$LayoutParams;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [generateLayoutParams](https://developer.android.com/reference/android/widget/GridLayout.html#generateLayoutParams(android.util.AttributeSet))
        // ///
        // /// Required features: "android-util-AttributeSet", "android-view-ViewGroup_LayoutParams"
        // #[cfg(any(feature = "all", all(feature = "android-util-AttributeSet", feature = "android-view-ViewGroup_LayoutParams")))]
        // pub fn generateLayoutParams_AttributeSet<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::util::AttributeSet>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::ViewGroup_LayoutParams>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/widget/GridLayout", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "generateLayoutParams", .descriptor == "(Landroid/util/AttributeSet;)Landroid/view/ViewGroup$LayoutParams;"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/GridLayout\0", "generateLayoutParams\0", "(Landroid/util/AttributeSet;)Landroid/view/ViewGroup$LayoutParams;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// public static final [ALIGN_BOUNDS](https://developer.android.com/reference/android/widget/GridLayout.html#ALIGN_BOUNDS)
        pub const ALIGN_BOUNDS : i32 = 0;

        /// public static final [ALIGN_MARGINS](https://developer.android.com/reference/android/widget/GridLayout.html#ALIGN_MARGINS)
        pub const ALIGN_MARGINS : i32 = 1;

        /// **get** public static final [BASELINE](https://developer.android.com/reference/android/widget/GridLayout.html#BASELINE)
        ///
        /// Required feature: android-widget-GridLayout_Alignment
        #[cfg(any(feature = "all", feature = "android-widget-GridLayout_Alignment"))]
        pub fn BASELINE<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::widget::GridLayout_Alignment>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/widget/GridLayout\0", "BASELINE\0", "Landroid/widget/GridLayout$Alignment;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [BOTTOM](https://developer.android.com/reference/android/widget/GridLayout.html#BOTTOM)
        ///
        /// Required feature: android-widget-GridLayout_Alignment
        #[cfg(any(feature = "all", feature = "android-widget-GridLayout_Alignment"))]
        pub fn BOTTOM<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::widget::GridLayout_Alignment>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/widget/GridLayout\0", "BOTTOM\0", "Landroid/widget/GridLayout$Alignment;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [CENTER](https://developer.android.com/reference/android/widget/GridLayout.html#CENTER)
        ///
        /// Required feature: android-widget-GridLayout_Alignment
        #[cfg(any(feature = "all", feature = "android-widget-GridLayout_Alignment"))]
        pub fn CENTER<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::widget::GridLayout_Alignment>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/widget/GridLayout\0", "CENTER\0", "Landroid/widget/GridLayout$Alignment;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [END](https://developer.android.com/reference/android/widget/GridLayout.html#END)
        ///
        /// Required feature: android-widget-GridLayout_Alignment
        #[cfg(any(feature = "all", feature = "android-widget-GridLayout_Alignment"))]
        pub fn END<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::widget::GridLayout_Alignment>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/widget/GridLayout\0", "END\0", "Landroid/widget/GridLayout$Alignment;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [FILL](https://developer.android.com/reference/android/widget/GridLayout.html#FILL)
        ///
        /// Required feature: android-widget-GridLayout_Alignment
        #[cfg(any(feature = "all", feature = "android-widget-GridLayout_Alignment"))]
        pub fn FILL<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::widget::GridLayout_Alignment>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/widget/GridLayout\0", "FILL\0", "Landroid/widget/GridLayout$Alignment;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// public static final [HORIZONTAL](https://developer.android.com/reference/android/widget/GridLayout.html#HORIZONTAL)
        pub const HORIZONTAL : i32 = 0;

        /// **get** public static final [LEFT](https://developer.android.com/reference/android/widget/GridLayout.html#LEFT)
        ///
        /// Required feature: android-widget-GridLayout_Alignment
        #[cfg(any(feature = "all", feature = "android-widget-GridLayout_Alignment"))]
        pub fn LEFT<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::widget::GridLayout_Alignment>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/widget/GridLayout\0", "LEFT\0", "Landroid/widget/GridLayout$Alignment;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [RIGHT](https://developer.android.com/reference/android/widget/GridLayout.html#RIGHT)
        ///
        /// Required feature: android-widget-GridLayout_Alignment
        #[cfg(any(feature = "all", feature = "android-widget-GridLayout_Alignment"))]
        pub fn RIGHT<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::widget::GridLayout_Alignment>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/widget/GridLayout\0", "RIGHT\0", "Landroid/widget/GridLayout$Alignment;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [START](https://developer.android.com/reference/android/widget/GridLayout.html#START)
        ///
        /// Required feature: android-widget-GridLayout_Alignment
        #[cfg(any(feature = "all", feature = "android-widget-GridLayout_Alignment"))]
        pub fn START<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::widget::GridLayout_Alignment>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/widget/GridLayout\0", "START\0", "Landroid/widget/GridLayout$Alignment;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// **get** public static final [TOP](https://developer.android.com/reference/android/widget/GridLayout.html#TOP)
        ///
        /// Required feature: android-widget-GridLayout_Alignment
        #[cfg(any(feature = "all", feature = "android-widget-GridLayout_Alignment"))]
        pub fn TOP<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::widget::GridLayout_Alignment>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/widget/GridLayout\0", "TOP\0", "Landroid/widget/GridLayout$Alignment;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// public static final [UNDEFINED](https://developer.android.com/reference/android/widget/GridLayout.html#UNDEFINED)
        pub const UNDEFINED : i32 = -2147483648;

        /// public static final [VERTICAL](https://developer.android.com/reference/android/widget/GridLayout.html#VERTICAL)
        pub const VERTICAL : i32 = 1;
    }
}
