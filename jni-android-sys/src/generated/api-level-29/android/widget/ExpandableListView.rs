// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-widget-ExpandableListView"))]
__jni_bindgen! {
    /// public class [ExpandableListView](https://developer.android.com/reference/android/widget/ExpandableListView.html)
    ///
    /// Required feature: android-widget-ExpandableListView
    public class ExpandableListView ("android/widget/ExpandableListView") extends crate::android::widget::ListView {

        /// [ExpandableListView](https://developer.android.com/reference/android/widget/ExpandableListView.html#ExpandableListView(android.content.Context))
        ///
        /// Required features: "android-content-Context"
        #[cfg(any(feature = "all", all(feature = "android-content-Context")))]
        pub fn new_Context<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::widget::ExpandableListView>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/ExpandableListView", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/content/Context;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/ExpandableListView\0", "<init>\0", "(Landroid/content/Context;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ExpandableListView](https://developer.android.com/reference/android/widget/ExpandableListView.html#ExpandableListView(android.content.Context,%20android.util.AttributeSet))
        ///
        /// Required features: "android-content-Context", "android-util-AttributeSet"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-util-AttributeSet")))]
        pub fn new_Context_AttributeSet<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::util::AttributeSet>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::widget::ExpandableListView>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/ExpandableListView", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/content/Context;Landroid/util/AttributeSet;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/ExpandableListView\0", "<init>\0", "(Landroid/content/Context;Landroid/util/AttributeSet;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ExpandableListView](https://developer.android.com/reference/android/widget/ExpandableListView.html#ExpandableListView(android.content.Context,%20android.util.AttributeSet,%20int))
        ///
        /// Required features: "android-content-Context", "android-util-AttributeSet"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-util-AttributeSet")))]
        pub fn new_Context_AttributeSet_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::util::AttributeSet>>, arg2: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::widget::ExpandableListView>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/ExpandableListView", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/content/Context;Landroid/util/AttributeSet;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/ExpandableListView\0", "<init>\0", "(Landroid/content/Context;Landroid/util/AttributeSet;I)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ExpandableListView](https://developer.android.com/reference/android/widget/ExpandableListView.html#ExpandableListView(android.content.Context,%20android.util.AttributeSet,%20int,%20int))
        ///
        /// Required features: "android-content-Context", "android-util-AttributeSet"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-util-AttributeSet")))]
        pub fn new_Context_AttributeSet_int_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::util::AttributeSet>>, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::widget::ExpandableListView>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/ExpandableListView", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/content/Context;Landroid/util/AttributeSet;II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/ExpandableListView\0", "<init>\0", "(Landroid/content/Context;Landroid/util/AttributeSet;II)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onRtlPropertiesChanged](https://developer.android.com/reference/android/widget/ExpandableListView.html#onRtlPropertiesChanged(int))
        pub fn onRtlPropertiesChanged<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/ExpandableListView", java.flags == PUBLIC, .name == "onRtlPropertiesChanged", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/ExpandableListView\0", "onRtlPropertiesChanged\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [dispatchDraw](https://developer.android.com/reference/android/widget/ExpandableListView.html#dispatchDraw(android.graphics.Canvas))
        // ///
        // /// Required features: "android-graphics-Canvas"
        // #[cfg(any(feature = "all", all(feature = "android-graphics-Canvas")))]
        // fn dispatchDraw<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Canvas>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/widget/ExpandableListView", java.flags == PROTECTED, .name == "dispatchDraw", .descriptor == "(Landroid/graphics/Canvas;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/ExpandableListView\0", "dispatchDraw\0", "(Landroid/graphics/Canvas;)V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [setChildDivider](https://developer.android.com/reference/android/widget/ExpandableListView.html#setChildDivider(android.graphics.drawable.Drawable))
        ///
        /// Required features: "android-graphics-drawable-Drawable"
        #[cfg(any(feature = "all", all(feature = "android-graphics-drawable-Drawable")))]
        pub fn setChildDivider<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::drawable::Drawable>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/ExpandableListView", java.flags == PUBLIC, .name == "setChildDivider", .descriptor == "(Landroid/graphics/drawable/Drawable;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/ExpandableListView\0", "setChildDivider\0", "(Landroid/graphics/drawable/Drawable;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAdapter](https://developer.android.com/reference/android/widget/ExpandableListView.html#setAdapter(android.widget.ListAdapter))
        ///
        /// Required features: "android-widget-ListAdapter"
        #[cfg(any(feature = "all", all(feature = "android-widget-ListAdapter")))]
        pub fn setAdapter_ListAdapter<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::widget::ListAdapter>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/ExpandableListView", java.flags == PUBLIC, .name == "setAdapter", .descriptor == "(Landroid/widget/ListAdapter;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/ExpandableListView\0", "setAdapter\0", "(Landroid/widget/ListAdapter;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAdapter](https://developer.android.com/reference/android/widget/ExpandableListView.html#getAdapter())
        ///
        /// Required features: "android-widget-ListAdapter"
        #[cfg(any(feature = "all", all(feature = "android-widget-ListAdapter")))]
        pub fn getAdapter<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::widget::ListAdapter>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/ExpandableListView", java.flags == PUBLIC, .name == "getAdapter", .descriptor == "()Landroid/widget/ListAdapter;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/ExpandableListView\0", "getAdapter\0", "()Landroid/widget/ListAdapter;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOnItemClickListener](https://developer.android.com/reference/android/widget/ExpandableListView.html#setOnItemClickListener(android.widget.AdapterView.OnItemClickListener))
        ///
        /// Required features: "android-widget-AdapterView_OnItemClickListener"
        #[cfg(any(feature = "all", all(feature = "android-widget-AdapterView_OnItemClickListener")))]
        pub fn setOnItemClickListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::widget::AdapterView_OnItemClickListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/ExpandableListView", java.flags == PUBLIC, .name == "setOnItemClickListener", .descriptor == "(Landroid/widget/AdapterView$OnItemClickListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/ExpandableListView\0", "setOnItemClickListener\0", "(Landroid/widget/AdapterView$OnItemClickListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAdapter](https://developer.android.com/reference/android/widget/ExpandableListView.html#setAdapter(android.widget.ExpandableListAdapter))
        ///
        /// Required features: "android-widget-ExpandableListAdapter"
        #[cfg(any(feature = "all", all(feature = "android-widget-ExpandableListAdapter")))]
        pub fn setAdapter_ExpandableListAdapter<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::widget::ExpandableListAdapter>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/ExpandableListView", java.flags == PUBLIC, .name == "setAdapter", .descriptor == "(Landroid/widget/ExpandableListAdapter;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/ExpandableListView\0", "setAdapter\0", "(Landroid/widget/ExpandableListAdapter;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getExpandableListAdapter](https://developer.android.com/reference/android/widget/ExpandableListView.html#getExpandableListAdapter())
        ///
        /// Required features: "android-widget-ExpandableListAdapter"
        #[cfg(any(feature = "all", all(feature = "android-widget-ExpandableListAdapter")))]
        pub fn getExpandableListAdapter<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::widget::ExpandableListAdapter>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/ExpandableListView", java.flags == PUBLIC, .name == "getExpandableListAdapter", .descriptor == "()Landroid/widget/ExpandableListAdapter;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/ExpandableListView\0", "getExpandableListAdapter\0", "()Landroid/widget/ExpandableListAdapter;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [performItemClick](https://developer.android.com/reference/android/widget/ExpandableListView.html#performItemClick(android.view.View,%20int,%20long))
        ///
        /// Required features: "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-view-View")))]
        pub fn performItemClick<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>, arg1: i32, arg2: i64) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/ExpandableListView", java.flags == PUBLIC, .name == "performItemClick", .descriptor == "(Landroid/view/View;IJ)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/ExpandableListView\0", "performItemClick\0", "(Landroid/view/View;IJ)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [expandGroup](https://developer.android.com/reference/android/widget/ExpandableListView.html#expandGroup(int))
        pub fn expandGroup_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/ExpandableListView", java.flags == PUBLIC, .name == "expandGroup", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/ExpandableListView\0", "expandGroup\0", "(I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [expandGroup](https://developer.android.com/reference/android/widget/ExpandableListView.html#expandGroup(int,%20boolean))
        pub fn expandGroup_int_boolean<'env>(&'env self, arg0: i32, arg1: bool) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/ExpandableListView", java.flags == PUBLIC, .name == "expandGroup", .descriptor == "(IZ)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/ExpandableListView\0", "expandGroup\0", "(IZ)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [collapseGroup](https://developer.android.com/reference/android/widget/ExpandableListView.html#collapseGroup(int))
        pub fn collapseGroup<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/ExpandableListView", java.flags == PUBLIC, .name == "collapseGroup", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/ExpandableListView\0", "collapseGroup\0", "(I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOnGroupCollapseListener](https://developer.android.com/reference/android/widget/ExpandableListView.html#setOnGroupCollapseListener(android.widget.ExpandableListView.OnGroupCollapseListener))
        ///
        /// Required features: "android-widget-ExpandableListView_OnGroupCollapseListener"
        #[cfg(any(feature = "all", all(feature = "android-widget-ExpandableListView_OnGroupCollapseListener")))]
        pub fn setOnGroupCollapseListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::widget::ExpandableListView_OnGroupCollapseListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/ExpandableListView", java.flags == PUBLIC, .name == "setOnGroupCollapseListener", .descriptor == "(Landroid/widget/ExpandableListView$OnGroupCollapseListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/ExpandableListView\0", "setOnGroupCollapseListener\0", "(Landroid/widget/ExpandableListView$OnGroupCollapseListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOnGroupExpandListener](https://developer.android.com/reference/android/widget/ExpandableListView.html#setOnGroupExpandListener(android.widget.ExpandableListView.OnGroupExpandListener))
        ///
        /// Required features: "android-widget-ExpandableListView_OnGroupExpandListener"
        #[cfg(any(feature = "all", all(feature = "android-widget-ExpandableListView_OnGroupExpandListener")))]
        pub fn setOnGroupExpandListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::widget::ExpandableListView_OnGroupExpandListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/ExpandableListView", java.flags == PUBLIC, .name == "setOnGroupExpandListener", .descriptor == "(Landroid/widget/ExpandableListView$OnGroupExpandListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/ExpandableListView\0", "setOnGroupExpandListener\0", "(Landroid/widget/ExpandableListView$OnGroupExpandListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOnGroupClickListener](https://developer.android.com/reference/android/widget/ExpandableListView.html#setOnGroupClickListener(android.widget.ExpandableListView.OnGroupClickListener))
        ///
        /// Required features: "android-widget-ExpandableListView_OnGroupClickListener"
        #[cfg(any(feature = "all", all(feature = "android-widget-ExpandableListView_OnGroupClickListener")))]
        pub fn setOnGroupClickListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::widget::ExpandableListView_OnGroupClickListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/ExpandableListView", java.flags == PUBLIC, .name == "setOnGroupClickListener", .descriptor == "(Landroid/widget/ExpandableListView$OnGroupClickListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/ExpandableListView\0", "setOnGroupClickListener\0", "(Landroid/widget/ExpandableListView$OnGroupClickListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOnChildClickListener](https://developer.android.com/reference/android/widget/ExpandableListView.html#setOnChildClickListener(android.widget.ExpandableListView.OnChildClickListener))
        ///
        /// Required features: "android-widget-ExpandableListView_OnChildClickListener"
        #[cfg(any(feature = "all", all(feature = "android-widget-ExpandableListView_OnChildClickListener")))]
        pub fn setOnChildClickListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::widget::ExpandableListView_OnChildClickListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/ExpandableListView", java.flags == PUBLIC, .name == "setOnChildClickListener", .descriptor == "(Landroid/widget/ExpandableListView$OnChildClickListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/ExpandableListView\0", "setOnChildClickListener\0", "(Landroid/widget/ExpandableListView$OnChildClickListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getExpandableListPosition](https://developer.android.com/reference/android/widget/ExpandableListView.html#getExpandableListPosition(int))
        pub fn getExpandableListPosition<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/ExpandableListView", java.flags == PUBLIC, .name == "getExpandableListPosition", .descriptor == "(I)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/ExpandableListView\0", "getExpandableListPosition\0", "(I)J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFlatListPosition](https://developer.android.com/reference/android/widget/ExpandableListView.html#getFlatListPosition(long))
        pub fn getFlatListPosition<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/ExpandableListView", java.flags == PUBLIC, .name == "getFlatListPosition", .descriptor == "(J)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/ExpandableListView\0", "getFlatListPosition\0", "(J)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSelectedPosition](https://developer.android.com/reference/android/widget/ExpandableListView.html#getSelectedPosition())
        pub fn getSelectedPosition<'env>(&'env self) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/ExpandableListView", java.flags == PUBLIC, .name == "getSelectedPosition", .descriptor == "()J"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/ExpandableListView\0", "getSelectedPosition\0", "()J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSelectedId](https://developer.android.com/reference/android/widget/ExpandableListView.html#getSelectedId())
        pub fn getSelectedId<'env>(&'env self) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/ExpandableListView", java.flags == PUBLIC, .name == "getSelectedId", .descriptor == "()J"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/ExpandableListView\0", "getSelectedId\0", "()J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setSelectedGroup](https://developer.android.com/reference/android/widget/ExpandableListView.html#setSelectedGroup(int))
        pub fn setSelectedGroup<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/ExpandableListView", java.flags == PUBLIC, .name == "setSelectedGroup", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/ExpandableListView\0", "setSelectedGroup\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setSelectedChild](https://developer.android.com/reference/android/widget/ExpandableListView.html#setSelectedChild(int,%20int,%20boolean))
        pub fn setSelectedChild<'env>(&'env self, arg0: i32, arg1: i32, arg2: bool) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/ExpandableListView", java.flags == PUBLIC, .name == "setSelectedChild", .descriptor == "(IIZ)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/ExpandableListView\0", "setSelectedChild\0", "(IIZ)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isGroupExpanded](https://developer.android.com/reference/android/widget/ExpandableListView.html#isGroupExpanded(int))
        pub fn isGroupExpanded<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/ExpandableListView", java.flags == PUBLIC, .name == "isGroupExpanded", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/ExpandableListView\0", "isGroupExpanded\0", "(I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPackedPositionType](https://developer.android.com/reference/android/widget/ExpandableListView.html#getPackedPositionType(long))
        pub fn getPackedPositionType<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i64) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/ExpandableListView", java.flags == PUBLIC | STATIC, .name == "getPackedPositionType", .descriptor == "(J)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/widget/ExpandableListView\0", "getPackedPositionType\0", "(J)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPackedPositionGroup](https://developer.android.com/reference/android/widget/ExpandableListView.html#getPackedPositionGroup(long))
        pub fn getPackedPositionGroup<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i64) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/ExpandableListView", java.flags == PUBLIC | STATIC, .name == "getPackedPositionGroup", .descriptor == "(J)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/widget/ExpandableListView\0", "getPackedPositionGroup\0", "(J)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPackedPositionChild](https://developer.android.com/reference/android/widget/ExpandableListView.html#getPackedPositionChild(long))
        pub fn getPackedPositionChild<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i64) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/ExpandableListView", java.flags == PUBLIC | STATIC, .name == "getPackedPositionChild", .descriptor == "(J)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/widget/ExpandableListView\0", "getPackedPositionChild\0", "(J)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPackedPositionForChild](https://developer.android.com/reference/android/widget/ExpandableListView.html#getPackedPositionForChild(int,%20int))
        pub fn getPackedPositionForChild<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/ExpandableListView", java.flags == PUBLIC | STATIC, .name == "getPackedPositionForChild", .descriptor == "(II)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/widget/ExpandableListView\0", "getPackedPositionForChild\0", "(II)J\0");
                __jni_env.call_static_long_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPackedPositionForGroup](https://developer.android.com/reference/android/widget/ExpandableListView.html#getPackedPositionForGroup(int))
        pub fn getPackedPositionForGroup<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/ExpandableListView", java.flags == PUBLIC | STATIC, .name == "getPackedPositionForGroup", .descriptor == "(I)J"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/widget/ExpandableListView\0", "getPackedPositionForGroup\0", "(I)J\0");
                __jni_env.call_static_long_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setChildIndicator](https://developer.android.com/reference/android/widget/ExpandableListView.html#setChildIndicator(android.graphics.drawable.Drawable))
        ///
        /// Required features: "android-graphics-drawable-Drawable"
        #[cfg(any(feature = "all", all(feature = "android-graphics-drawable-Drawable")))]
        pub fn setChildIndicator<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::drawable::Drawable>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/ExpandableListView", java.flags == PUBLIC, .name == "setChildIndicator", .descriptor == "(Landroid/graphics/drawable/Drawable;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/ExpandableListView\0", "setChildIndicator\0", "(Landroid/graphics/drawable/Drawable;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setChildIndicatorBounds](https://developer.android.com/reference/android/widget/ExpandableListView.html#setChildIndicatorBounds(int,%20int))
        pub fn setChildIndicatorBounds<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/ExpandableListView", java.flags == PUBLIC, .name == "setChildIndicatorBounds", .descriptor == "(II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/ExpandableListView\0", "setChildIndicatorBounds\0", "(II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setChildIndicatorBoundsRelative](https://developer.android.com/reference/android/widget/ExpandableListView.html#setChildIndicatorBoundsRelative(int,%20int))
        pub fn setChildIndicatorBoundsRelative<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/ExpandableListView", java.flags == PUBLIC, .name == "setChildIndicatorBoundsRelative", .descriptor == "(II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/ExpandableListView\0", "setChildIndicatorBoundsRelative\0", "(II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setGroupIndicator](https://developer.android.com/reference/android/widget/ExpandableListView.html#setGroupIndicator(android.graphics.drawable.Drawable))
        ///
        /// Required features: "android-graphics-drawable-Drawable"
        #[cfg(any(feature = "all", all(feature = "android-graphics-drawable-Drawable")))]
        pub fn setGroupIndicator<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::drawable::Drawable>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/ExpandableListView", java.flags == PUBLIC, .name == "setGroupIndicator", .descriptor == "(Landroid/graphics/drawable/Drawable;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/ExpandableListView\0", "setGroupIndicator\0", "(Landroid/graphics/drawable/Drawable;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setIndicatorBounds](https://developer.android.com/reference/android/widget/ExpandableListView.html#setIndicatorBounds(int,%20int))
        pub fn setIndicatorBounds<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/ExpandableListView", java.flags == PUBLIC, .name == "setIndicatorBounds", .descriptor == "(II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/ExpandableListView\0", "setIndicatorBounds\0", "(II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setIndicatorBoundsRelative](https://developer.android.com/reference/android/widget/ExpandableListView.html#setIndicatorBoundsRelative(int,%20int))
        pub fn setIndicatorBoundsRelative<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/ExpandableListView", java.flags == PUBLIC, .name == "setIndicatorBoundsRelative", .descriptor == "(II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/ExpandableListView\0", "setIndicatorBoundsRelative\0", "(II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onSaveInstanceState](https://developer.android.com/reference/android/widget/ExpandableListView.html#onSaveInstanceState())
        ///
        /// Required features: "android-os-Parcelable"
        #[cfg(any(feature = "all", all(feature = "android-os-Parcelable")))]
        pub fn onSaveInstanceState<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Parcelable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/ExpandableListView", java.flags == PUBLIC, .name == "onSaveInstanceState", .descriptor == "()Landroid/os/Parcelable;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/ExpandableListView\0", "onSaveInstanceState\0", "()Landroid/os/Parcelable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onRestoreInstanceState](https://developer.android.com/reference/android/widget/ExpandableListView.html#onRestoreInstanceState(android.os.Parcelable))
        ///
        /// Required features: "android-os-Parcelable"
        #[cfg(any(feature = "all", all(feature = "android-os-Parcelable")))]
        pub fn onRestoreInstanceState<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Parcelable>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/ExpandableListView", java.flags == PUBLIC, .name == "onRestoreInstanceState", .descriptor == "(Landroid/os/Parcelable;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/ExpandableListView\0", "onRestoreInstanceState\0", "(Landroid/os/Parcelable;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAccessibilityClassName](https://developer.android.com/reference/android/widget/ExpandableListView.html#getAccessibilityClassName())
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn getAccessibilityClassName<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::CharSequence>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/widget/ExpandableListView", java.flags == PUBLIC, .name == "getAccessibilityClassName", .descriptor == "()Ljava/lang/CharSequence;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/ExpandableListView\0", "getAccessibilityClassName\0", "()Ljava/lang/CharSequence;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Bridge method - type erasure
        // /// [setAdapter](https://developer.android.com/reference/android/widget/ExpandableListView.html#setAdapter(android.widget.Adapter))
        // ///
        // /// Required features: "android-widget-Adapter"
        // #[cfg(any(feature = "all", all(feature = "android-widget-Adapter")))]
        // pub fn setAdapter_Adapter<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::widget::Adapter>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/widget/ExpandableListView", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "setAdapter", .descriptor == "(Landroid/widget/Adapter;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/ExpandableListView\0", "setAdapter\0", "(Landroid/widget/Adapter;)V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Bridge method - type erasure
        // /// [getAdapter](https://developer.android.com/reference/android/widget/ExpandableListView.html#getAdapter())
        // ///
        // /// Required features: "android-widget-Adapter"
        // #[cfg(any(feature = "all", all(feature = "android-widget-Adapter")))]
        // pub fn getAdapter<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::widget::Adapter>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/widget/ExpandableListView", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "getAdapter", .descriptor == "()Landroid/widget/Adapter;"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/widget/ExpandableListView\0", "getAdapter\0", "()Landroid/widget/Adapter;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// public static final [CHILD_INDICATOR_INHERIT](https://developer.android.com/reference/android/widget/ExpandableListView.html#CHILD_INDICATOR_INHERIT)
        pub const CHILD_INDICATOR_INHERIT : i32 = -1;

        /// public static final [PACKED_POSITION_TYPE_CHILD](https://developer.android.com/reference/android/widget/ExpandableListView.html#PACKED_POSITION_TYPE_CHILD)
        pub const PACKED_POSITION_TYPE_CHILD : i32 = 1;

        /// public static final [PACKED_POSITION_TYPE_GROUP](https://developer.android.com/reference/android/widget/ExpandableListView.html#PACKED_POSITION_TYPE_GROUP)
        pub const PACKED_POSITION_TYPE_GROUP : i32 = 0;

        /// public static final [PACKED_POSITION_TYPE_NULL](https://developer.android.com/reference/android/widget/ExpandableListView.html#PACKED_POSITION_TYPE_NULL)
        pub const PACKED_POSITION_TYPE_NULL : i32 = 2;

        /// public static final [PACKED_POSITION_VALUE_NULL](https://developer.android.com/reference/android/widget/ExpandableListView.html#PACKED_POSITION_VALUE_NULL)
        pub const PACKED_POSITION_VALUE_NULL : i64 = 4294967295i64;
    }
}
