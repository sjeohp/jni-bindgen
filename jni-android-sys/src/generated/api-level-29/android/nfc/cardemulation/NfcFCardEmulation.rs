// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-nfc-cardemulation-NfcFCardEmulation"))]
__jni_bindgen! {
    /// public final class [NfcFCardEmulation](https://developer.android.com/reference/android/nfc/cardemulation/NfcFCardEmulation.html)
    ///
    /// Required feature: android-nfc-cardemulation-NfcFCardEmulation
    public final class NfcFCardEmulation ("android/nfc/cardemulation/NfcFCardEmulation") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [NfcFCardEmulation](https://developer.android.com/reference/android/nfc/cardemulation/NfcFCardEmulation.html#NfcFCardEmulation())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::nfc::cardemulation::NfcFCardEmulation>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/nfc/cardemulation/NfcFCardEmulation", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/nfc/cardemulation/NfcFCardEmulation\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getInstance](https://developer.android.com/reference/android/nfc/cardemulation/NfcFCardEmulation.html#getInstance(android.nfc.NfcAdapter))
        ///
        /// Required features: "android-nfc-NfcAdapter", "android-nfc-cardemulation-NfcFCardEmulation"
        #[cfg(any(feature = "all", all(feature = "android-nfc-NfcAdapter", feature = "android-nfc-cardemulation-NfcFCardEmulation")))]
        pub fn getInstance<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::nfc::NfcAdapter>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::nfc::cardemulation::NfcFCardEmulation>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/nfc/cardemulation/NfcFCardEmulation", java.flags == PUBLIC | STATIC | SYNCRONIZED, .name == "getInstance", .descriptor == "(Landroid/nfc/NfcAdapter;)Landroid/nfc/cardemulation/NfcFCardEmulation;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/nfc/cardemulation/NfcFCardEmulation\0", "getInstance\0", "(Landroid/nfc/NfcAdapter;)Landroid/nfc/cardemulation/NfcFCardEmulation;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSystemCodeForService](https://developer.android.com/reference/android/nfc/cardemulation/NfcFCardEmulation.html#getSystemCodeForService(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-lang-String")))]
        pub fn getSystemCodeForService<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/nfc/cardemulation/NfcFCardEmulation", java.flags == PUBLIC, .name == "getSystemCodeForService", .descriptor == "(Landroid/content/ComponentName;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/nfc/cardemulation/NfcFCardEmulation\0", "getSystemCodeForService\0", "(Landroid/content/ComponentName;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [registerSystemCodeForService](https://developer.android.com/reference/android/nfc/cardemulation/NfcFCardEmulation.html#registerSystemCodeForService(android.content.ComponentName,%20java.lang.String))
        ///
        /// Required features: "android-content-ComponentName", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-lang-String")))]
        pub fn registerSystemCodeForService<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/nfc/cardemulation/NfcFCardEmulation", java.flags == PUBLIC, .name == "registerSystemCodeForService", .descriptor == "(Landroid/content/ComponentName;Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/nfc/cardemulation/NfcFCardEmulation\0", "registerSystemCodeForService\0", "(Landroid/content/ComponentName;Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unregisterSystemCodeForService](https://developer.android.com/reference/android/nfc/cardemulation/NfcFCardEmulation.html#unregisterSystemCodeForService(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn unregisterSystemCodeForService<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/nfc/cardemulation/NfcFCardEmulation", java.flags == PUBLIC, .name == "unregisterSystemCodeForService", .descriptor == "(Landroid/content/ComponentName;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/nfc/cardemulation/NfcFCardEmulation\0", "unregisterSystemCodeForService\0", "(Landroid/content/ComponentName;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNfcid2ForService](https://developer.android.com/reference/android/nfc/cardemulation/NfcFCardEmulation.html#getNfcid2ForService(android.content.ComponentName))
        ///
        /// Required features: "android-content-ComponentName", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-lang-String")))]
        pub fn getNfcid2ForService<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/nfc/cardemulation/NfcFCardEmulation", java.flags == PUBLIC, .name == "getNfcid2ForService", .descriptor == "(Landroid/content/ComponentName;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/nfc/cardemulation/NfcFCardEmulation\0", "getNfcid2ForService\0", "(Landroid/content/ComponentName;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setNfcid2ForService](https://developer.android.com/reference/android/nfc/cardemulation/NfcFCardEmulation.html#setNfcid2ForService(android.content.ComponentName,%20java.lang.String))
        ///
        /// Required features: "android-content-ComponentName", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "java-lang-String")))]
        pub fn setNfcid2ForService<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/nfc/cardemulation/NfcFCardEmulation", java.flags == PUBLIC, .name == "setNfcid2ForService", .descriptor == "(Landroid/content/ComponentName;Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/nfc/cardemulation/NfcFCardEmulation\0", "setNfcid2ForService\0", "(Landroid/content/ComponentName;Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [enableService](https://developer.android.com/reference/android/nfc/cardemulation/NfcFCardEmulation.html#enableService(android.app.Activity,%20android.content.ComponentName))
        ///
        /// Required features: "android-app-Activity", "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-app-Activity", feature = "android-content-ComponentName")))]
        pub fn enableService<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Activity>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/nfc/cardemulation/NfcFCardEmulation", java.flags == PUBLIC, .name == "enableService", .descriptor == "(Landroid/app/Activity;Landroid/content/ComponentName;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/nfc/cardemulation/NfcFCardEmulation\0", "enableService\0", "(Landroid/app/Activity;Landroid/content/ComponentName;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [disableService](https://developer.android.com/reference/android/nfc/cardemulation/NfcFCardEmulation.html#disableService(android.app.Activity))
        ///
        /// Required features: "android-app-Activity"
        #[cfg(any(feature = "all", all(feature = "android-app-Activity")))]
        pub fn disableService<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Activity>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/nfc/cardemulation/NfcFCardEmulation", java.flags == PUBLIC, .name == "disableService", .descriptor == "(Landroid/app/Activity;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/nfc/cardemulation/NfcFCardEmulation\0", "disableService\0", "(Landroid/app/Activity;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
