// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-se-omapi-Session"))]
__jni_bindgen! {
    /// public final class [Session](https://developer.android.com/reference/android/se/omapi/Session.html)
    ///
    /// Required feature: android-se-omapi-Session
    public final class Session ("android/se/omapi/Session") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [Session](https://developer.android.com/reference/android/se/omapi/Session.html#Session())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::se::omapi::Session>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/se/omapi/Session", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/se/omapi/Session\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getReader](https://developer.android.com/reference/android/se/omapi/Session.html#getReader())
        ///
        /// Required features: "android-se-omapi-Reader"
        #[cfg(any(feature = "all", all(feature = "android-se-omapi-Reader")))]
        pub fn getReader<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::se::omapi::Reader>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/se/omapi/Session", java.flags == PUBLIC, .name == "getReader", .descriptor == "()Landroid/se/omapi/Reader;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/se/omapi/Session\0", "getReader\0", "()Landroid/se/omapi/Reader;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getATR](https://developer.android.com/reference/android/se/omapi/Session.html#getATR())
        pub fn getATR<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ByteArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/se/omapi/Session", java.flags == PUBLIC, .name == "getATR", .descriptor == "()[B"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/se/omapi/Session\0", "getATR\0", "()[B\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [close](https://developer.android.com/reference/android/se/omapi/Session.html#close())
        pub fn close<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/se/omapi/Session", java.flags == PUBLIC, .name == "close", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/se/omapi/Session\0", "close\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isClosed](https://developer.android.com/reference/android/se/omapi/Session.html#isClosed())
        pub fn isClosed<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/se/omapi/Session", java.flags == PUBLIC, .name == "isClosed", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/se/omapi/Session\0", "isClosed\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [closeChannels](https://developer.android.com/reference/android/se/omapi/Session.html#closeChannels())
        pub fn closeChannels<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/se/omapi/Session", java.flags == PUBLIC, .name == "closeChannels", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/se/omapi/Session\0", "closeChannels\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [openBasicChannel](https://developer.android.com/reference/android/se/omapi/Session.html#openBasicChannel(byte%5B%5D,%20byte))
        ///
        /// Required features: "android-se-omapi-Channel"
        #[cfg(any(feature = "all", all(feature = "android-se-omapi-Channel")))]
        pub fn openBasicChannel_byte_array_byte<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>, arg1: i8) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::se::omapi::Channel>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/se/omapi/Session", java.flags == PUBLIC, .name == "openBasicChannel", .descriptor == "([BB)Landroid/se/omapi/Channel;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/se/omapi/Session\0", "openBasicChannel\0", "([BB)Landroid/se/omapi/Channel;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [openBasicChannel](https://developer.android.com/reference/android/se/omapi/Session.html#openBasicChannel(byte%5B%5D))
        ///
        /// Required features: "android-se-omapi-Channel"
        #[cfg(any(feature = "all", all(feature = "android-se-omapi-Channel")))]
        pub fn openBasicChannel_byte_array<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::se::omapi::Channel>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/se/omapi/Session", java.flags == PUBLIC, .name == "openBasicChannel", .descriptor == "([B)Landroid/se/omapi/Channel;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/se/omapi/Session\0", "openBasicChannel\0", "([B)Landroid/se/omapi/Channel;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [openLogicalChannel](https://developer.android.com/reference/android/se/omapi/Session.html#openLogicalChannel(byte%5B%5D,%20byte))
        ///
        /// Required features: "android-se-omapi-Channel"
        #[cfg(any(feature = "all", all(feature = "android-se-omapi-Channel")))]
        pub fn openLogicalChannel_byte_array_byte<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>, arg1: i8) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::se::omapi::Channel>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/se/omapi/Session", java.flags == PUBLIC, .name == "openLogicalChannel", .descriptor == "([BB)Landroid/se/omapi/Channel;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/se/omapi/Session\0", "openLogicalChannel\0", "([BB)Landroid/se/omapi/Channel;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [openLogicalChannel](https://developer.android.com/reference/android/se/omapi/Session.html#openLogicalChannel(byte%5B%5D))
        ///
        /// Required features: "android-se-omapi-Channel"
        #[cfg(any(feature = "all", all(feature = "android-se-omapi-Channel")))]
        pub fn openLogicalChannel_byte_array<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ByteArray>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::se::omapi::Channel>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/se/omapi/Session", java.flags == PUBLIC, .name == "openLogicalChannel", .descriptor == "([B)Landroid/se/omapi/Channel;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/se/omapi/Session\0", "openLogicalChannel\0", "([B)Landroid/se/omapi/Channel;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
