// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-se-omapi-SEService"))]
__jni_bindgen! {
    /// public final class [SEService](https://developer.android.com/reference/android/se/omapi/SEService.html)
    ///
    /// Required feature: android-se-omapi-SEService
    public final class SEService ("android/se/omapi/SEService") extends crate::java::lang::Object {

        /// [SEService](https://developer.android.com/reference/android/se/omapi/SEService.html#SEService(android.content.Context,%20java.util.concurrent.Executor,%20android.se.omapi.SEService.OnConnectedListener))
        ///
        /// Required features: "android-content-Context", "android-se-omapi-SEService_OnConnectedListener", "java-util-concurrent-Executor"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-se-omapi-SEService_OnConnectedListener", feature = "java-util-concurrent-Executor")))]
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::concurrent::Executor>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::se::omapi::SEService_OnConnectedListener>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::se::omapi::SEService>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/se/omapi/SEService", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/content/Context;Ljava/util/concurrent/Executor;Landroid/se/omapi/SEService$OnConnectedListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/se/omapi/SEService\0", "<init>\0", "(Landroid/content/Context;Ljava/util/concurrent/Executor;Landroid/se/omapi/SEService$OnConnectedListener;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isConnected](https://developer.android.com/reference/android/se/omapi/SEService.html#isConnected())
        pub fn isConnected<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/se/omapi/SEService", java.flags == PUBLIC, .name == "isConnected", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/se/omapi/SEService\0", "isConnected\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getReaders](https://developer.android.com/reference/android/se/omapi/SEService.html#getReaders())
        ///
        /// Required features: "android-se-omapi-Reader"
        #[cfg(any(feature = "all", all(feature = "android-se-omapi-Reader")))]
        pub fn getReaders<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::android::se::omapi::Reader, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/se/omapi/SEService", java.flags == PUBLIC, .name == "getReaders", .descriptor == "()[Landroid/se/omapi/Reader;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/se/omapi/SEService\0", "getReaders\0", "()[Landroid/se/omapi/Reader;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [shutdown](https://developer.android.com/reference/android/se/omapi/SEService.html#shutdown())
        pub fn shutdown<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/se/omapi/SEService", java.flags == PUBLIC, .name == "shutdown", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/se/omapi/SEService\0", "shutdown\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getVersion](https://developer.android.com/reference/android/se/omapi/SEService.html#getVersion())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getVersion<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/se/omapi/SEService", java.flags == PUBLIC, .name == "getVersion", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/se/omapi/SEService\0", "getVersion\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
