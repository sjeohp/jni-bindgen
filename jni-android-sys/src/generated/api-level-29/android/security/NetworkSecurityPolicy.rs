// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-security-NetworkSecurityPolicy"))]
__jni_bindgen! {
    /// public class [NetworkSecurityPolicy](https://developer.android.com/reference/android/security/NetworkSecurityPolicy.html)
    ///
    /// Required feature: android-security-NetworkSecurityPolicy
    public class NetworkSecurityPolicy ("android/security/NetworkSecurityPolicy") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [NetworkSecurityPolicy](https://developer.android.com/reference/android/security/NetworkSecurityPolicy.html#NetworkSecurityPolicy())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::security::NetworkSecurityPolicy>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/security/NetworkSecurityPolicy", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/security/NetworkSecurityPolicy\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getInstance](https://developer.android.com/reference/android/security/NetworkSecurityPolicy.html#getInstance())
        ///
        /// Required features: "android-security-NetworkSecurityPolicy"
        #[cfg(any(feature = "all", all(feature = "android-security-NetworkSecurityPolicy")))]
        pub fn getInstance<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::security::NetworkSecurityPolicy>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/security/NetworkSecurityPolicy", java.flags == PUBLIC | STATIC, .name == "getInstance", .descriptor == "()Landroid/security/NetworkSecurityPolicy;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/security/NetworkSecurityPolicy\0", "getInstance\0", "()Landroid/security/NetworkSecurityPolicy;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isCleartextTrafficPermitted](https://developer.android.com/reference/android/security/NetworkSecurityPolicy.html#isCleartextTrafficPermitted())
        pub fn isCleartextTrafficPermitted<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/security/NetworkSecurityPolicy", java.flags == PUBLIC, .name == "isCleartextTrafficPermitted", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/security/NetworkSecurityPolicy\0", "isCleartextTrafficPermitted\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isCleartextTrafficPermitted](https://developer.android.com/reference/android/security/NetworkSecurityPolicy.html#isCleartextTrafficPermitted(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn isCleartextTrafficPermitted_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/security/NetworkSecurityPolicy", java.flags == PUBLIC, .name == "isCleartextTrafficPermitted", .descriptor == "(Ljava/lang/String;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/security/NetworkSecurityPolicy\0", "isCleartextTrafficPermitted\0", "(Ljava/lang/String;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
