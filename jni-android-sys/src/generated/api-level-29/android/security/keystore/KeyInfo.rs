// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-security-keystore-KeyInfo"))]
__jni_bindgen! {
    /// public class [KeyInfo](https://developer.android.com/reference/android/security/keystore/KeyInfo.html)
    ///
    /// Required feature: android-security-keystore-KeyInfo
    public class KeyInfo ("android/security/keystore/KeyInfo") extends crate::java::lang::Object, implements crate::java::security::spec::KeySpec {

        // // Not emitting: Non-public method
        // /// [KeyInfo](https://developer.android.com/reference/android/security/keystore/KeyInfo.html#KeyInfo(java.lang.String,%20boolean,%20int,%20int,%20java.util.Date,%20java.util.Date,%20java.util.Date,%20int,%20java.lang.String%5B%5D,%20java.lang.String%5B%5D,%20java.lang.String%5B%5D,%20java.lang.String%5B%5D,%20boolean,%20int,%20boolean,%20boolean,%20boolean,%20boolean,%20boolean))
        // ///
        // /// Required features: "java-lang-String", "java-util-Date"
        // #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-util-Date")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: bool, arg2: i32, arg3: i32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Date>>, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Date>>, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Date>>, arg7: i32, arg8: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, arg9: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, arg10: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, arg11: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, arg12: bool, arg13: i32, arg14: bool, arg15: bool, arg16: bool, arg17: bool, arg18: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::security::keystore::KeyInfo>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/security/keystore/KeyInfo", java.flags == (empty), .name == "<init>", .descriptor == "(Ljava/lang/String;ZIILjava/util/Date;Ljava/util/Date;Ljava/util/Date;I[Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/String;ZIZZZZZ)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5.into()), __jni_bindgen::AsJValue::as_jvalue(&arg6.into()), __jni_bindgen::AsJValue::as_jvalue(&arg7), __jni_bindgen::AsJValue::as_jvalue(&arg8.into()), __jni_bindgen::AsJValue::as_jvalue(&arg9.into()), __jni_bindgen::AsJValue::as_jvalue(&arg10.into()), __jni_bindgen::AsJValue::as_jvalue(&arg11.into()), __jni_bindgen::AsJValue::as_jvalue(&arg12), __jni_bindgen::AsJValue::as_jvalue(&arg13), __jni_bindgen::AsJValue::as_jvalue(&arg14), __jni_bindgen::AsJValue::as_jvalue(&arg15), __jni_bindgen::AsJValue::as_jvalue(&arg16), __jni_bindgen::AsJValue::as_jvalue(&arg17), __jni_bindgen::AsJValue::as_jvalue(&arg18)];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/security/keystore/KeyInfo\0", "<init>\0", "(Ljava/lang/String;ZIILjava/util/Date;Ljava/util/Date;Ljava/util/Date;I[Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/String;ZIZZZZZ)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getKeystoreAlias](https://developer.android.com/reference/android/security/keystore/KeyInfo.html#getKeystoreAlias())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getKeystoreAlias<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/security/keystore/KeyInfo", java.flags == PUBLIC, .name == "getKeystoreAlias", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/security/keystore/KeyInfo\0", "getKeystoreAlias\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isInsideSecureHardware](https://developer.android.com/reference/android/security/keystore/KeyInfo.html#isInsideSecureHardware())
        pub fn isInsideSecureHardware<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/security/keystore/KeyInfo", java.flags == PUBLIC, .name == "isInsideSecureHardware", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/security/keystore/KeyInfo\0", "isInsideSecureHardware\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getOrigin](https://developer.android.com/reference/android/security/keystore/KeyInfo.html#getOrigin())
        pub fn getOrigin<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/security/keystore/KeyInfo", java.flags == PUBLIC, .name == "getOrigin", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/security/keystore/KeyInfo\0", "getOrigin\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getKeySize](https://developer.android.com/reference/android/security/keystore/KeyInfo.html#getKeySize())
        pub fn getKeySize<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/security/keystore/KeyInfo", java.flags == PUBLIC, .name == "getKeySize", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/security/keystore/KeyInfo\0", "getKeySize\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getKeyValidityStart](https://developer.android.com/reference/android/security/keystore/KeyInfo.html#getKeyValidityStart())
        ///
        /// Required features: "java-util-Date"
        #[cfg(any(feature = "all", all(feature = "java-util-Date")))]
        pub fn getKeyValidityStart<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Date>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/security/keystore/KeyInfo", java.flags == PUBLIC, .name == "getKeyValidityStart", .descriptor == "()Ljava/util/Date;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/security/keystore/KeyInfo\0", "getKeyValidityStart\0", "()Ljava/util/Date;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getKeyValidityForConsumptionEnd](https://developer.android.com/reference/android/security/keystore/KeyInfo.html#getKeyValidityForConsumptionEnd())
        ///
        /// Required features: "java-util-Date"
        #[cfg(any(feature = "all", all(feature = "java-util-Date")))]
        pub fn getKeyValidityForConsumptionEnd<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Date>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/security/keystore/KeyInfo", java.flags == PUBLIC, .name == "getKeyValidityForConsumptionEnd", .descriptor == "()Ljava/util/Date;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/security/keystore/KeyInfo\0", "getKeyValidityForConsumptionEnd\0", "()Ljava/util/Date;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getKeyValidityForOriginationEnd](https://developer.android.com/reference/android/security/keystore/KeyInfo.html#getKeyValidityForOriginationEnd())
        ///
        /// Required features: "java-util-Date"
        #[cfg(any(feature = "all", all(feature = "java-util-Date")))]
        pub fn getKeyValidityForOriginationEnd<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Date>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/security/keystore/KeyInfo", java.flags == PUBLIC, .name == "getKeyValidityForOriginationEnd", .descriptor == "()Ljava/util/Date;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/security/keystore/KeyInfo\0", "getKeyValidityForOriginationEnd\0", "()Ljava/util/Date;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPurposes](https://developer.android.com/reference/android/security/keystore/KeyInfo.html#getPurposes())
        pub fn getPurposes<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/security/keystore/KeyInfo", java.flags == PUBLIC, .name == "getPurposes", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/security/keystore/KeyInfo\0", "getPurposes\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getBlockModes](https://developer.android.com/reference/android/security/keystore/KeyInfo.html#getBlockModes())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getBlockModes<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/security/keystore/KeyInfo", java.flags == PUBLIC, .name == "getBlockModes", .descriptor == "()[Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/security/keystore/KeyInfo\0", "getBlockModes\0", "()[Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getEncryptionPaddings](https://developer.android.com/reference/android/security/keystore/KeyInfo.html#getEncryptionPaddings())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getEncryptionPaddings<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/security/keystore/KeyInfo", java.flags == PUBLIC, .name == "getEncryptionPaddings", .descriptor == "()[Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/security/keystore/KeyInfo\0", "getEncryptionPaddings\0", "()[Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSignaturePaddings](https://developer.android.com/reference/android/security/keystore/KeyInfo.html#getSignaturePaddings())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getSignaturePaddings<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/security/keystore/KeyInfo", java.flags == PUBLIC, .name == "getSignaturePaddings", .descriptor == "()[Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/security/keystore/KeyInfo\0", "getSignaturePaddings\0", "()[Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDigests](https://developer.android.com/reference/android/security/keystore/KeyInfo.html#getDigests())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getDigests<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/security/keystore/KeyInfo", java.flags == PUBLIC, .name == "getDigests", .descriptor == "()[Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/security/keystore/KeyInfo\0", "getDigests\0", "()[Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isUserAuthenticationRequired](https://developer.android.com/reference/android/security/keystore/KeyInfo.html#isUserAuthenticationRequired())
        pub fn isUserAuthenticationRequired<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/security/keystore/KeyInfo", java.flags == PUBLIC, .name == "isUserAuthenticationRequired", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/security/keystore/KeyInfo\0", "isUserAuthenticationRequired\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isUserConfirmationRequired](https://developer.android.com/reference/android/security/keystore/KeyInfo.html#isUserConfirmationRequired())
        pub fn isUserConfirmationRequired<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/security/keystore/KeyInfo", java.flags == PUBLIC, .name == "isUserConfirmationRequired", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/security/keystore/KeyInfo\0", "isUserConfirmationRequired\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getUserAuthenticationValidityDurationSeconds](https://developer.android.com/reference/android/security/keystore/KeyInfo.html#getUserAuthenticationValidityDurationSeconds())
        pub fn getUserAuthenticationValidityDurationSeconds<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/security/keystore/KeyInfo", java.flags == PUBLIC, .name == "getUserAuthenticationValidityDurationSeconds", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/security/keystore/KeyInfo\0", "getUserAuthenticationValidityDurationSeconds\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isUserAuthenticationRequirementEnforcedBySecureHardware](https://developer.android.com/reference/android/security/keystore/KeyInfo.html#isUserAuthenticationRequirementEnforcedBySecureHardware())
        pub fn isUserAuthenticationRequirementEnforcedBySecureHardware<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/security/keystore/KeyInfo", java.flags == PUBLIC, .name == "isUserAuthenticationRequirementEnforcedBySecureHardware", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/security/keystore/KeyInfo\0", "isUserAuthenticationRequirementEnforcedBySecureHardware\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isUserAuthenticationValidWhileOnBody](https://developer.android.com/reference/android/security/keystore/KeyInfo.html#isUserAuthenticationValidWhileOnBody())
        pub fn isUserAuthenticationValidWhileOnBody<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/security/keystore/KeyInfo", java.flags == PUBLIC, .name == "isUserAuthenticationValidWhileOnBody", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/security/keystore/KeyInfo\0", "isUserAuthenticationValidWhileOnBody\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isInvalidatedByBiometricEnrollment](https://developer.android.com/reference/android/security/keystore/KeyInfo.html#isInvalidatedByBiometricEnrollment())
        pub fn isInvalidatedByBiometricEnrollment<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/security/keystore/KeyInfo", java.flags == PUBLIC, .name == "isInvalidatedByBiometricEnrollment", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/security/keystore/KeyInfo\0", "isInvalidatedByBiometricEnrollment\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isTrustedUserPresenceRequired](https://developer.android.com/reference/android/security/keystore/KeyInfo.html#isTrustedUserPresenceRequired())
        pub fn isTrustedUserPresenceRequired<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/security/keystore/KeyInfo", java.flags == PUBLIC, .name == "isTrustedUserPresenceRequired", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/security/keystore/KeyInfo\0", "isTrustedUserPresenceRequired\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
