// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-transition-ArcMotion"))]
__jni_bindgen! {
    /// public class [ArcMotion](https://developer.android.com/reference/android/transition/ArcMotion.html)
    ///
    /// Required feature: android-transition-ArcMotion
    public class ArcMotion ("android/transition/ArcMotion") extends crate::android::transition::PathMotion {

        /// [ArcMotion](https://developer.android.com/reference/android/transition/ArcMotion.html#ArcMotion())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::transition::ArcMotion>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/transition/ArcMotion", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/transition/ArcMotion\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [ArcMotion](https://developer.android.com/reference/android/transition/ArcMotion.html#ArcMotion(android.content.Context,%20android.util.AttributeSet))
        ///
        /// Required features: "android-content-Context", "android-util-AttributeSet"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-util-AttributeSet")))]
        pub fn new_Context_AttributeSet<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::util::AttributeSet>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::transition::ArcMotion>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/transition/ArcMotion", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/content/Context;Landroid/util/AttributeSet;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/transition/ArcMotion\0", "<init>\0", "(Landroid/content/Context;Landroid/util/AttributeSet;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setMinimumHorizontalAngle](https://developer.android.com/reference/android/transition/ArcMotion.html#setMinimumHorizontalAngle(float))
        pub fn setMinimumHorizontalAngle<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/transition/ArcMotion", java.flags == PUBLIC, .name == "setMinimumHorizontalAngle", .descriptor == "(F)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/transition/ArcMotion\0", "setMinimumHorizontalAngle\0", "(F)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMinimumHorizontalAngle](https://developer.android.com/reference/android/transition/ArcMotion.html#getMinimumHorizontalAngle())
        pub fn getMinimumHorizontalAngle<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/transition/ArcMotion", java.flags == PUBLIC, .name == "getMinimumHorizontalAngle", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/transition/ArcMotion\0", "getMinimumHorizontalAngle\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setMinimumVerticalAngle](https://developer.android.com/reference/android/transition/ArcMotion.html#setMinimumVerticalAngle(float))
        pub fn setMinimumVerticalAngle<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/transition/ArcMotion", java.flags == PUBLIC, .name == "setMinimumVerticalAngle", .descriptor == "(F)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/transition/ArcMotion\0", "setMinimumVerticalAngle\0", "(F)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMinimumVerticalAngle](https://developer.android.com/reference/android/transition/ArcMotion.html#getMinimumVerticalAngle())
        pub fn getMinimumVerticalAngle<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/transition/ArcMotion", java.flags == PUBLIC, .name == "getMinimumVerticalAngle", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/transition/ArcMotion\0", "getMinimumVerticalAngle\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setMaximumAngle](https://developer.android.com/reference/android/transition/ArcMotion.html#setMaximumAngle(float))
        pub fn setMaximumAngle<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/transition/ArcMotion", java.flags == PUBLIC, .name == "setMaximumAngle", .descriptor == "(F)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/transition/ArcMotion\0", "setMaximumAngle\0", "(F)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMaximumAngle](https://developer.android.com/reference/android/transition/ArcMotion.html#getMaximumAngle())
        pub fn getMaximumAngle<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/transition/ArcMotion", java.flags == PUBLIC, .name == "getMaximumAngle", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/transition/ArcMotion\0", "getMaximumAngle\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPath](https://developer.android.com/reference/android/transition/ArcMotion.html#getPath(float,%20float,%20float,%20float))
        ///
        /// Required features: "android-graphics-Path"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Path")))]
        pub fn getPath<'env>(&'env self, arg0: f32, arg1: f32, arg2: f32, arg3: f32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Path>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/transition/ArcMotion", java.flags == PUBLIC, .name == "getPath", .descriptor == "(FFFF)Landroid/graphics/Path;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/transition/ArcMotion\0", "getPath\0", "(FFFF)Landroid/graphics/Path;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
