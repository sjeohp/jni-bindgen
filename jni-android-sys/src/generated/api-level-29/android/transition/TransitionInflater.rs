// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-transition-TransitionInflater"))]
__jni_bindgen! {
    /// public class [TransitionInflater](https://developer.android.com/reference/android/transition/TransitionInflater.html)
    ///
    /// Required feature: android-transition-TransitionInflater
    public class TransitionInflater ("android/transition/TransitionInflater") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [TransitionInflater](https://developer.android.com/reference/android/transition/TransitionInflater.html#TransitionInflater(android.content.Context))
        // ///
        // /// Required features: "android-content-Context"
        // #[cfg(any(feature = "all", all(feature = "android-content-Context")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::transition::TransitionInflater>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/transition/TransitionInflater", java.flags == (empty), .name == "<init>", .descriptor == "(Landroid/content/Context;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/transition/TransitionInflater\0", "<init>\0", "(Landroid/content/Context;)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [from](https://developer.android.com/reference/android/transition/TransitionInflater.html#from(android.content.Context))
        ///
        /// Required features: "android-content-Context", "android-transition-TransitionInflater"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-transition-TransitionInflater")))]
        pub fn from<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::transition::TransitionInflater>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/transition/TransitionInflater", java.flags == PUBLIC | STATIC, .name == "from", .descriptor == "(Landroid/content/Context;)Landroid/transition/TransitionInflater;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/transition/TransitionInflater\0", "from\0", "(Landroid/content/Context;)Landroid/transition/TransitionInflater;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [inflateTransition](https://developer.android.com/reference/android/transition/TransitionInflater.html#inflateTransition(int))
        ///
        /// Required features: "android-transition-Transition"
        #[cfg(any(feature = "all", all(feature = "android-transition-Transition")))]
        pub fn inflateTransition<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::transition::Transition>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/transition/TransitionInflater", java.flags == PUBLIC, .name == "inflateTransition", .descriptor == "(I)Landroid/transition/Transition;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/transition/TransitionInflater\0", "inflateTransition\0", "(I)Landroid/transition/Transition;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [inflateTransitionManager](https://developer.android.com/reference/android/transition/TransitionInflater.html#inflateTransitionManager(int,%20android.view.ViewGroup))
        ///
        /// Required features: "android-transition-TransitionManager", "android-view-ViewGroup"
        #[cfg(any(feature = "all", all(feature = "android-transition-TransitionManager", feature = "android-view-ViewGroup")))]
        pub fn inflateTransitionManager<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::ViewGroup>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::transition::TransitionManager>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/transition/TransitionInflater", java.flags == PUBLIC, .name == "inflateTransitionManager", .descriptor == "(ILandroid/view/ViewGroup;)Landroid/transition/TransitionManager;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/transition/TransitionInflater\0", "inflateTransitionManager\0", "(ILandroid/view/ViewGroup;)Landroid/transition/TransitionManager;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
