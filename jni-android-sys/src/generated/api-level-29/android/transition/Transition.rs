// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-transition-Transition"))]
__jni_bindgen! {
    /// public class [Transition](https://developer.android.com/reference/android/transition/Transition.html)
    ///
    /// Required feature: android-transition-Transition
    public class Transition ("android/transition/Transition") extends crate::java::lang::Object, implements crate::java::lang::Cloneable {

        /// [Transition](https://developer.android.com/reference/android/transition/Transition.html#Transition())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::transition::Transition>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/transition/Transition", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/transition/Transition\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [Transition](https://developer.android.com/reference/android/transition/Transition.html#Transition(android.content.Context,%20android.util.AttributeSet))
        ///
        /// Required features: "android-content-Context", "android-util-AttributeSet"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-util-AttributeSet")))]
        pub fn new_Context_AttributeSet<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::util::AttributeSet>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::transition::Transition>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/transition/Transition", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/content/Context;Landroid/util/AttributeSet;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/transition/Transition\0", "<init>\0", "(Landroid/content/Context;Landroid/util/AttributeSet;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDuration](https://developer.android.com/reference/android/transition/Transition.html#setDuration(long))
        ///
        /// Required features: "android-transition-Transition"
        #[cfg(any(feature = "all", all(feature = "android-transition-Transition")))]
        pub fn setDuration<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::transition::Transition>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/transition/Transition", java.flags == PUBLIC, .name == "setDuration", .descriptor == "(J)Landroid/transition/Transition;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/transition/Transition\0", "setDuration\0", "(J)Landroid/transition/Transition;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDuration](https://developer.android.com/reference/android/transition/Transition.html#getDuration())
        pub fn getDuration<'env>(&'env self) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/transition/Transition", java.flags == PUBLIC, .name == "getDuration", .descriptor == "()J"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/transition/Transition\0", "getDuration\0", "()J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setStartDelay](https://developer.android.com/reference/android/transition/Transition.html#setStartDelay(long))
        ///
        /// Required features: "android-transition-Transition"
        #[cfg(any(feature = "all", all(feature = "android-transition-Transition")))]
        pub fn setStartDelay<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::transition::Transition>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/transition/Transition", java.flags == PUBLIC, .name == "setStartDelay", .descriptor == "(J)Landroid/transition/Transition;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/transition/Transition\0", "setStartDelay\0", "(J)Landroid/transition/Transition;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getStartDelay](https://developer.android.com/reference/android/transition/Transition.html#getStartDelay())
        pub fn getStartDelay<'env>(&'env self) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/transition/Transition", java.flags == PUBLIC, .name == "getStartDelay", .descriptor == "()J"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/transition/Transition\0", "getStartDelay\0", "()J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setInterpolator](https://developer.android.com/reference/android/transition/Transition.html#setInterpolator(android.animation.TimeInterpolator))
        ///
        /// Required features: "android-animation-TimeInterpolator", "android-transition-Transition"
        #[cfg(any(feature = "all", all(feature = "android-animation-TimeInterpolator", feature = "android-transition-Transition")))]
        pub fn setInterpolator<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::animation::TimeInterpolator>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::transition::Transition>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/transition/Transition", java.flags == PUBLIC, .name == "setInterpolator", .descriptor == "(Landroid/animation/TimeInterpolator;)Landroid/transition/Transition;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/transition/Transition\0", "setInterpolator\0", "(Landroid/animation/TimeInterpolator;)Landroid/transition/Transition;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInterpolator](https://developer.android.com/reference/android/transition/Transition.html#getInterpolator())
        ///
        /// Required features: "android-animation-TimeInterpolator"
        #[cfg(any(feature = "all", all(feature = "android-animation-TimeInterpolator")))]
        pub fn getInterpolator<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::animation::TimeInterpolator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/transition/Transition", java.flags == PUBLIC, .name == "getInterpolator", .descriptor == "()Landroid/animation/TimeInterpolator;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/transition/Transition\0", "getInterpolator\0", "()Landroid/animation/TimeInterpolator;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTransitionProperties](https://developer.android.com/reference/android/transition/Transition.html#getTransitionProperties())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getTransitionProperties<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/transition/Transition", java.flags == PUBLIC, .name == "getTransitionProperties", .descriptor == "()[Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/transition/Transition\0", "getTransitionProperties\0", "()[Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createAnimator](https://developer.android.com/reference/android/transition/Transition.html#createAnimator(android.view.ViewGroup,%20android.transition.TransitionValues,%20android.transition.TransitionValues))
        ///
        /// Required features: "android-animation-Animator", "android-transition-TransitionValues", "android-view-ViewGroup"
        #[cfg(any(feature = "all", all(feature = "android-animation-Animator", feature = "android-transition-TransitionValues", feature = "android-view-ViewGroup")))]
        pub fn createAnimator<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::ViewGroup>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::transition::TransitionValues>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::transition::TransitionValues>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::animation::Animator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/transition/Transition", java.flags == PUBLIC, .name == "createAnimator", .descriptor == "(Landroid/view/ViewGroup;Landroid/transition/TransitionValues;Landroid/transition/TransitionValues;)Landroid/animation/Animator;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/transition/Transition\0", "createAnimator\0", "(Landroid/view/ViewGroup;Landroid/transition/TransitionValues;Landroid/transition/TransitionValues;)Landroid/animation/Animator;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setMatchOrder](https://developer.android.com/reference/android/transition/Transition.html#setMatchOrder(int...))
        pub fn setMatchOrder<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/transition/Transition", java.flags == PUBLIC | VARARGS, .name == "setMatchOrder", .descriptor == "([I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/transition/Transition\0", "setMatchOrder\0", "([I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [captureStartValues](https://developer.android.com/reference/android/transition/Transition.html#captureStartValues(android.transition.TransitionValues))
        ///
        /// Required features: "android-transition-TransitionValues"
        #[cfg(any(feature = "all", all(feature = "android-transition-TransitionValues")))]
        pub fn captureStartValues<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::transition::TransitionValues>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/transition/Transition", java.flags == PUBLIC | ABSTRACT, .name == "captureStartValues", .descriptor == "(Landroid/transition/TransitionValues;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/transition/Transition\0", "captureStartValues\0", "(Landroid/transition/TransitionValues;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [captureEndValues](https://developer.android.com/reference/android/transition/Transition.html#captureEndValues(android.transition.TransitionValues))
        ///
        /// Required features: "android-transition-TransitionValues"
        #[cfg(any(feature = "all", all(feature = "android-transition-TransitionValues")))]
        pub fn captureEndValues<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::transition::TransitionValues>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/transition/Transition", java.flags == PUBLIC | ABSTRACT, .name == "captureEndValues", .descriptor == "(Landroid/transition/TransitionValues;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/transition/Transition\0", "captureEndValues\0", "(Landroid/transition/TransitionValues;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addTarget](https://developer.android.com/reference/android/transition/Transition.html#addTarget(int))
        ///
        /// Required features: "android-transition-Transition"
        #[cfg(any(feature = "all", all(feature = "android-transition-Transition")))]
        pub fn addTarget_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::transition::Transition>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/transition/Transition", java.flags == PUBLIC, .name == "addTarget", .descriptor == "(I)Landroid/transition/Transition;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/transition/Transition\0", "addTarget\0", "(I)Landroid/transition/Transition;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addTarget](https://developer.android.com/reference/android/transition/Transition.html#addTarget(java.lang.String))
        ///
        /// Required features: "android-transition-Transition", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-transition-Transition", feature = "java-lang-String")))]
        pub fn addTarget_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::transition::Transition>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/transition/Transition", java.flags == PUBLIC, .name == "addTarget", .descriptor == "(Ljava/lang/String;)Landroid/transition/Transition;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/transition/Transition\0", "addTarget\0", "(Ljava/lang/String;)Landroid/transition/Transition;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addTarget](https://developer.android.com/reference/android/transition/Transition.html#addTarget(java.lang.Class))
        ///
        /// Required features: "android-transition-Transition", "java-lang-Class"
        #[cfg(any(feature = "all", all(feature = "android-transition-Transition", feature = "java-lang-Class")))]
        pub fn addTarget_Class<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::transition::Transition>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/transition/Transition", java.flags == PUBLIC, .name == "addTarget", .descriptor == "(Ljava/lang/Class;)Landroid/transition/Transition;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/transition/Transition\0", "addTarget\0", "(Ljava/lang/Class;)Landroid/transition/Transition;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeTarget](https://developer.android.com/reference/android/transition/Transition.html#removeTarget(int))
        ///
        /// Required features: "android-transition-Transition"
        #[cfg(any(feature = "all", all(feature = "android-transition-Transition")))]
        pub fn removeTarget_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::transition::Transition>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/transition/Transition", java.flags == PUBLIC, .name == "removeTarget", .descriptor == "(I)Landroid/transition/Transition;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/transition/Transition\0", "removeTarget\0", "(I)Landroid/transition/Transition;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeTarget](https://developer.android.com/reference/android/transition/Transition.html#removeTarget(java.lang.String))
        ///
        /// Required features: "android-transition-Transition", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-transition-Transition", feature = "java-lang-String")))]
        pub fn removeTarget_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::transition::Transition>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/transition/Transition", java.flags == PUBLIC, .name == "removeTarget", .descriptor == "(Ljava/lang/String;)Landroid/transition/Transition;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/transition/Transition\0", "removeTarget\0", "(Ljava/lang/String;)Landroid/transition/Transition;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [excludeTarget](https://developer.android.com/reference/android/transition/Transition.html#excludeTarget(int,%20boolean))
        ///
        /// Required features: "android-transition-Transition"
        #[cfg(any(feature = "all", all(feature = "android-transition-Transition")))]
        pub fn excludeTarget_int_boolean<'env>(&'env self, arg0: i32, arg1: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::transition::Transition>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/transition/Transition", java.flags == PUBLIC, .name == "excludeTarget", .descriptor == "(IZ)Landroid/transition/Transition;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/transition/Transition\0", "excludeTarget\0", "(IZ)Landroid/transition/Transition;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [excludeTarget](https://developer.android.com/reference/android/transition/Transition.html#excludeTarget(java.lang.String,%20boolean))
        ///
        /// Required features: "android-transition-Transition", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-transition-Transition", feature = "java-lang-String")))]
        pub fn excludeTarget_String_boolean<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::transition::Transition>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/transition/Transition", java.flags == PUBLIC, .name == "excludeTarget", .descriptor == "(Ljava/lang/String;Z)Landroid/transition/Transition;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/transition/Transition\0", "excludeTarget\0", "(Ljava/lang/String;Z)Landroid/transition/Transition;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [excludeChildren](https://developer.android.com/reference/android/transition/Transition.html#excludeChildren(int,%20boolean))
        ///
        /// Required features: "android-transition-Transition"
        #[cfg(any(feature = "all", all(feature = "android-transition-Transition")))]
        pub fn excludeChildren_int_boolean<'env>(&'env self, arg0: i32, arg1: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::transition::Transition>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/transition/Transition", java.flags == PUBLIC, .name == "excludeChildren", .descriptor == "(IZ)Landroid/transition/Transition;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/transition/Transition\0", "excludeChildren\0", "(IZ)Landroid/transition/Transition;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [excludeTarget](https://developer.android.com/reference/android/transition/Transition.html#excludeTarget(android.view.View,%20boolean))
        ///
        /// Required features: "android-transition-Transition", "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-transition-Transition", feature = "android-view-View")))]
        pub fn excludeTarget_View_boolean<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>, arg1: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::transition::Transition>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/transition/Transition", java.flags == PUBLIC, .name == "excludeTarget", .descriptor == "(Landroid/view/View;Z)Landroid/transition/Transition;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/transition/Transition\0", "excludeTarget\0", "(Landroid/view/View;Z)Landroid/transition/Transition;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [excludeChildren](https://developer.android.com/reference/android/transition/Transition.html#excludeChildren(android.view.View,%20boolean))
        ///
        /// Required features: "android-transition-Transition", "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-transition-Transition", feature = "android-view-View")))]
        pub fn excludeChildren_View_boolean<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>, arg1: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::transition::Transition>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/transition/Transition", java.flags == PUBLIC, .name == "excludeChildren", .descriptor == "(Landroid/view/View;Z)Landroid/transition/Transition;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/transition/Transition\0", "excludeChildren\0", "(Landroid/view/View;Z)Landroid/transition/Transition;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [excludeTarget](https://developer.android.com/reference/android/transition/Transition.html#excludeTarget(java.lang.Class,%20boolean))
        ///
        /// Required features: "android-transition-Transition", "java-lang-Class"
        #[cfg(any(feature = "all", all(feature = "android-transition-Transition", feature = "java-lang-Class")))]
        pub fn excludeTarget_Class_boolean<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>, arg1: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::transition::Transition>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/transition/Transition", java.flags == PUBLIC, .name == "excludeTarget", .descriptor == "(Ljava/lang/Class;Z)Landroid/transition/Transition;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/transition/Transition\0", "excludeTarget\0", "(Ljava/lang/Class;Z)Landroid/transition/Transition;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [excludeChildren](https://developer.android.com/reference/android/transition/Transition.html#excludeChildren(java.lang.Class,%20boolean))
        ///
        /// Required features: "android-transition-Transition", "java-lang-Class"
        #[cfg(any(feature = "all", all(feature = "android-transition-Transition", feature = "java-lang-Class")))]
        pub fn excludeChildren_Class_boolean<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>, arg1: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::transition::Transition>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/transition/Transition", java.flags == PUBLIC, .name == "excludeChildren", .descriptor == "(Ljava/lang/Class;Z)Landroid/transition/Transition;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/transition/Transition\0", "excludeChildren\0", "(Ljava/lang/Class;Z)Landroid/transition/Transition;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addTarget](https://developer.android.com/reference/android/transition/Transition.html#addTarget(android.view.View))
        ///
        /// Required features: "android-transition-Transition", "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-transition-Transition", feature = "android-view-View")))]
        pub fn addTarget_View<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::transition::Transition>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/transition/Transition", java.flags == PUBLIC, .name == "addTarget", .descriptor == "(Landroid/view/View;)Landroid/transition/Transition;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/transition/Transition\0", "addTarget\0", "(Landroid/view/View;)Landroid/transition/Transition;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeTarget](https://developer.android.com/reference/android/transition/Transition.html#removeTarget(android.view.View))
        ///
        /// Required features: "android-transition-Transition", "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-transition-Transition", feature = "android-view-View")))]
        pub fn removeTarget_View<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::transition::Transition>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/transition/Transition", java.flags == PUBLIC, .name == "removeTarget", .descriptor == "(Landroid/view/View;)Landroid/transition/Transition;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/transition/Transition\0", "removeTarget\0", "(Landroid/view/View;)Landroid/transition/Transition;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeTarget](https://developer.android.com/reference/android/transition/Transition.html#removeTarget(java.lang.Class))
        ///
        /// Required features: "android-transition-Transition", "java-lang-Class"
        #[cfg(any(feature = "all", all(feature = "android-transition-Transition", feature = "java-lang-Class")))]
        pub fn removeTarget_Class<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Class>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::transition::Transition>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/transition/Transition", java.flags == PUBLIC, .name == "removeTarget", .descriptor == "(Ljava/lang/Class;)Landroid/transition/Transition;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/transition/Transition\0", "removeTarget\0", "(Ljava/lang/Class;)Landroid/transition/Transition;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTargetIds](https://developer.android.com/reference/android/transition/Transition.html#getTargetIds())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getTargetIds<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/transition/Transition", java.flags == PUBLIC, .name == "getTargetIds", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/transition/Transition\0", "getTargetIds\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTargets](https://developer.android.com/reference/android/transition/Transition.html#getTargets())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getTargets<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/transition/Transition", java.flags == PUBLIC, .name == "getTargets", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/transition/Transition\0", "getTargets\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTargetNames](https://developer.android.com/reference/android/transition/Transition.html#getTargetNames())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getTargetNames<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/transition/Transition", java.flags == PUBLIC, .name == "getTargetNames", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/transition/Transition\0", "getTargetNames\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTargetTypes](https://developer.android.com/reference/android/transition/Transition.html#getTargetTypes())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getTargetTypes<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/transition/Transition", java.flags == PUBLIC, .name == "getTargetTypes", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/transition/Transition\0", "getTargetTypes\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTransitionValues](https://developer.android.com/reference/android/transition/Transition.html#getTransitionValues(android.view.View,%20boolean))
        ///
        /// Required features: "android-transition-TransitionValues", "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-transition-TransitionValues", feature = "android-view-View")))]
        pub fn getTransitionValues<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>, arg1: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::transition::TransitionValues>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/transition/Transition", java.flags == PUBLIC, .name == "getTransitionValues", .descriptor == "(Landroid/view/View;Z)Landroid/transition/TransitionValues;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/transition/Transition\0", "getTransitionValues\0", "(Landroid/view/View;Z)Landroid/transition/TransitionValues;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isTransitionRequired](https://developer.android.com/reference/android/transition/Transition.html#isTransitionRequired(android.transition.TransitionValues,%20android.transition.TransitionValues))
        ///
        /// Required features: "android-transition-TransitionValues"
        #[cfg(any(feature = "all", all(feature = "android-transition-TransitionValues")))]
        pub fn isTransitionRequired<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::transition::TransitionValues>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::transition::TransitionValues>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/transition/Transition", java.flags == PUBLIC, .name == "isTransitionRequired", .descriptor == "(Landroid/transition/TransitionValues;Landroid/transition/TransitionValues;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/transition/Transition\0", "isTransitionRequired\0", "(Landroid/transition/TransitionValues;Landroid/transition/TransitionValues;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addListener](https://developer.android.com/reference/android/transition/Transition.html#addListener(android.transition.Transition.TransitionListener))
        ///
        /// Required features: "android-transition-Transition", "android-transition-Transition_TransitionListener"
        #[cfg(any(feature = "all", all(feature = "android-transition-Transition", feature = "android-transition-Transition_TransitionListener")))]
        pub fn addListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::transition::Transition_TransitionListener>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::transition::Transition>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/transition/Transition", java.flags == PUBLIC, .name == "addListener", .descriptor == "(Landroid/transition/Transition$TransitionListener;)Landroid/transition/Transition;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/transition/Transition\0", "addListener\0", "(Landroid/transition/Transition$TransitionListener;)Landroid/transition/Transition;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeListener](https://developer.android.com/reference/android/transition/Transition.html#removeListener(android.transition.Transition.TransitionListener))
        ///
        /// Required features: "android-transition-Transition", "android-transition-Transition_TransitionListener"
        #[cfg(any(feature = "all", all(feature = "android-transition-Transition", feature = "android-transition-Transition_TransitionListener")))]
        pub fn removeListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::transition::Transition_TransitionListener>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::transition::Transition>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/transition/Transition", java.flags == PUBLIC, .name == "removeListener", .descriptor == "(Landroid/transition/Transition$TransitionListener;)Landroid/transition/Transition;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/transition/Transition\0", "removeListener\0", "(Landroid/transition/Transition$TransitionListener;)Landroid/transition/Transition;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setEpicenterCallback](https://developer.android.com/reference/android/transition/Transition.html#setEpicenterCallback(android.transition.Transition.EpicenterCallback))
        ///
        /// Required features: "android-transition-Transition_EpicenterCallback"
        #[cfg(any(feature = "all", all(feature = "android-transition-Transition_EpicenterCallback")))]
        pub fn setEpicenterCallback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::transition::Transition_EpicenterCallback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/transition/Transition", java.flags == PUBLIC, .name == "setEpicenterCallback", .descriptor == "(Landroid/transition/Transition$EpicenterCallback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/transition/Transition\0", "setEpicenterCallback\0", "(Landroid/transition/Transition$EpicenterCallback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getEpicenterCallback](https://developer.android.com/reference/android/transition/Transition.html#getEpicenterCallback())
        ///
        /// Required features: "android-transition-Transition_EpicenterCallback"
        #[cfg(any(feature = "all", all(feature = "android-transition-Transition_EpicenterCallback")))]
        pub fn getEpicenterCallback<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::transition::Transition_EpicenterCallback>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/transition/Transition", java.flags == PUBLIC, .name == "getEpicenterCallback", .descriptor == "()Landroid/transition/Transition$EpicenterCallback;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/transition/Transition\0", "getEpicenterCallback\0", "()Landroid/transition/Transition$EpicenterCallback;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getEpicenter](https://developer.android.com/reference/android/transition/Transition.html#getEpicenter())
        ///
        /// Required features: "android-graphics-Rect"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Rect")))]
        pub fn getEpicenter<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Rect>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/transition/Transition", java.flags == PUBLIC, .name == "getEpicenter", .descriptor == "()Landroid/graphics/Rect;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/transition/Transition\0", "getEpicenter\0", "()Landroid/graphics/Rect;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPathMotion](https://developer.android.com/reference/android/transition/Transition.html#setPathMotion(android.transition.PathMotion))
        ///
        /// Required features: "android-transition-PathMotion"
        #[cfg(any(feature = "all", all(feature = "android-transition-PathMotion")))]
        pub fn setPathMotion<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::transition::PathMotion>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/transition/Transition", java.flags == PUBLIC, .name == "setPathMotion", .descriptor == "(Landroid/transition/PathMotion;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/transition/Transition\0", "setPathMotion\0", "(Landroid/transition/PathMotion;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPathMotion](https://developer.android.com/reference/android/transition/Transition.html#getPathMotion())
        ///
        /// Required features: "android-transition-PathMotion"
        #[cfg(any(feature = "all", all(feature = "android-transition-PathMotion")))]
        pub fn getPathMotion<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::transition::PathMotion>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/transition/Transition", java.flags == PUBLIC, .name == "getPathMotion", .descriptor == "()Landroid/transition/PathMotion;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/transition/Transition\0", "getPathMotion\0", "()Landroid/transition/PathMotion;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPropagation](https://developer.android.com/reference/android/transition/Transition.html#setPropagation(android.transition.TransitionPropagation))
        ///
        /// Required features: "android-transition-TransitionPropagation"
        #[cfg(any(feature = "all", all(feature = "android-transition-TransitionPropagation")))]
        pub fn setPropagation<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::transition::TransitionPropagation>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/transition/Transition", java.flags == PUBLIC, .name == "setPropagation", .descriptor == "(Landroid/transition/TransitionPropagation;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/transition/Transition\0", "setPropagation\0", "(Landroid/transition/TransitionPropagation;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPropagation](https://developer.android.com/reference/android/transition/Transition.html#getPropagation())
        ///
        /// Required features: "android-transition-TransitionPropagation"
        #[cfg(any(feature = "all", all(feature = "android-transition-TransitionPropagation")))]
        pub fn getPropagation<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::transition::TransitionPropagation>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/transition/Transition", java.flags == PUBLIC, .name == "getPropagation", .descriptor == "()Landroid/transition/TransitionPropagation;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/transition/Transition\0", "getPropagation\0", "()Landroid/transition/TransitionPropagation;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [canRemoveViews](https://developer.android.com/reference/android/transition/Transition.html#canRemoveViews())
        pub fn canRemoveViews<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/transition/Transition", java.flags == PUBLIC, .name == "canRemoveViews", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/transition/Transition\0", "canRemoveViews\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/android/transition/Transition.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/transition/Transition", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/transition/Transition\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clone](https://developer.android.com/reference/android/transition/Transition.html#clone())
        ///
        /// Required features: "android-transition-Transition"
        #[cfg(any(feature = "all", all(feature = "android-transition-Transition")))]
        pub fn clone<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::transition::Transition>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/transition/Transition", java.flags == PUBLIC, .name == "clone", .descriptor == "()Landroid/transition/Transition;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/transition/Transition\0", "clone\0", "()Landroid/transition/Transition;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getName](https://developer.android.com/reference/android/transition/Transition.html#getName())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getName<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/transition/Transition", java.flags == PUBLIC, .name == "getName", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/transition/Transition\0", "getName\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Bridge method - type erasure
        // /// [clone](https://developer.android.com/reference/android/transition/Transition.html#clone())
        // ///
        // /// Required features: "java-lang-Object"
        // #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        // pub fn clone<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::Object>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/transition/Transition", java.flags == PUBLIC | BRIDGE | SYNTHETIC, .name == "clone", .descriptor == "()Ljava/lang/Object;"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/transition/Transition\0", "clone\0", "()Ljava/lang/Object;\0");
        //         __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// public static final [MATCH_ID](https://developer.android.com/reference/android/transition/Transition.html#MATCH_ID)
        pub const MATCH_ID : i32 = 3;

        /// public static final [MATCH_INSTANCE](https://developer.android.com/reference/android/transition/Transition.html#MATCH_INSTANCE)
        pub const MATCH_INSTANCE : i32 = 1;

        /// public static final [MATCH_ITEM_ID](https://developer.android.com/reference/android/transition/Transition.html#MATCH_ITEM_ID)
        pub const MATCH_ITEM_ID : i32 = 4;

        /// public static final [MATCH_NAME](https://developer.android.com/reference/android/transition/Transition.html#MATCH_NAME)
        pub const MATCH_NAME : i32 = 2;
    }
}
