// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-accounts-AccountManager"))]
__jni_bindgen! {
    /// public class [AccountManager](https://developer.android.com/reference/android/accounts/AccountManager.html)
    ///
    /// Required feature: android-accounts-AccountManager
    public class AccountManager ("android/accounts/AccountManager") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [AccountManager](https://developer.android.com/reference/android/accounts/AccountManager.html#AccountManager())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::accounts::AccountManager>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/accounts/AccountManager", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accounts/AccountManager\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [get](https://developer.android.com/reference/android/accounts/AccountManager.html#get(android.content.Context))
        ///
        /// Required features: "android-accounts-AccountManager", "android-content-Context"
        #[cfg(any(feature = "all", all(feature = "android-accounts-AccountManager", feature = "android-content-Context")))]
        pub fn get<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::accounts::AccountManager>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accounts/AccountManager", java.flags == PUBLIC | STATIC, .name == "get", .descriptor == "(Landroid/content/Context;)Landroid/accounts/AccountManager;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/accounts/AccountManager\0", "get\0", "(Landroid/content/Context;)Landroid/accounts/AccountManager;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPassword](https://developer.android.com/reference/android/accounts/AccountManager.html#getPassword(android.accounts.Account))
        ///
        /// Required features: "android-accounts-Account", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-accounts-Account", feature = "java-lang-String")))]
        pub fn getPassword<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accounts::Account>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accounts/AccountManager", java.flags == PUBLIC, .name == "getPassword", .descriptor == "(Landroid/accounts/Account;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accounts/AccountManager\0", "getPassword\0", "(Landroid/accounts/Account;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getUserData](https://developer.android.com/reference/android/accounts/AccountManager.html#getUserData(android.accounts.Account,%20java.lang.String))
        ///
        /// Required features: "android-accounts-Account", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-accounts-Account", feature = "java-lang-String")))]
        pub fn getUserData<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accounts::Account>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accounts/AccountManager", java.flags == PUBLIC, .name == "getUserData", .descriptor == "(Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accounts/AccountManager\0", "getUserData\0", "(Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAuthenticatorTypes](https://developer.android.com/reference/android/accounts/AccountManager.html#getAuthenticatorTypes())
        ///
        /// Required features: "android-accounts-AuthenticatorDescription"
        #[cfg(any(feature = "all", all(feature = "android-accounts-AuthenticatorDescription")))]
        pub fn getAuthenticatorTypes<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::android::accounts::AuthenticatorDescription, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accounts/AccountManager", java.flags == PUBLIC, .name == "getAuthenticatorTypes", .descriptor == "()[Landroid/accounts/AuthenticatorDescription;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accounts/AccountManager\0", "getAuthenticatorTypes\0", "()[Landroid/accounts/AuthenticatorDescription;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAccounts](https://developer.android.com/reference/android/accounts/AccountManager.html#getAccounts())
        ///
        /// Required features: "android-accounts-Account"
        #[cfg(any(feature = "all", all(feature = "android-accounts-Account")))]
        pub fn getAccounts<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::android::accounts::Account, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accounts/AccountManager", java.flags == PUBLIC, .name == "getAccounts", .descriptor == "()[Landroid/accounts/Account;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accounts/AccountManager\0", "getAccounts\0", "()[Landroid/accounts/Account;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAccountsByTypeForPackage](https://developer.android.com/reference/android/accounts/AccountManager.html#getAccountsByTypeForPackage(java.lang.String,%20java.lang.String))
        ///
        /// Required features: "android-accounts-Account", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-accounts-Account", feature = "java-lang-String")))]
        pub fn getAccountsByTypeForPackage<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::android::accounts::Account, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accounts/AccountManager", java.flags == PUBLIC, .name == "getAccountsByTypeForPackage", .descriptor == "(Ljava/lang/String;Ljava/lang/String;)[Landroid/accounts/Account;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accounts/AccountManager\0", "getAccountsByTypeForPackage\0", "(Ljava/lang/String;Ljava/lang/String;)[Landroid/accounts/Account;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAccountsByType](https://developer.android.com/reference/android/accounts/AccountManager.html#getAccountsByType(java.lang.String))
        ///
        /// Required features: "android-accounts-Account", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-accounts-Account", feature = "java-lang-String")))]
        pub fn getAccountsByType<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::android::accounts::Account, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accounts/AccountManager", java.flags == PUBLIC, .name == "getAccountsByType", .descriptor == "(Ljava/lang/String;)[Landroid/accounts/Account;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accounts/AccountManager\0", "getAccountsByType\0", "(Ljava/lang/String;)[Landroid/accounts/Account;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasFeatures](https://developer.android.com/reference/android/accounts/AccountManager.html#hasFeatures(android.accounts.Account,%20java.lang.String%5B%5D,%20android.accounts.AccountManagerCallback,%20android.os.Handler))
        ///
        /// Required features: "android-accounts-Account", "android-accounts-AccountManagerCallback", "android-accounts-AccountManagerFuture", "android-os-Handler", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-accounts-Account", feature = "android-accounts-AccountManagerCallback", feature = "android-accounts-AccountManagerFuture", feature = "android-os-Handler", feature = "java-lang-String")))]
        pub fn hasFeatures<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accounts::Account>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accounts::AccountManagerCallback>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::accounts::AccountManagerFuture>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accounts/AccountManager", java.flags == PUBLIC, .name == "hasFeatures", .descriptor == "(Landroid/accounts/Account;[Ljava/lang/String;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accounts/AccountManager\0", "hasFeatures\0", "(Landroid/accounts/Account;[Ljava/lang/String;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAccountsByTypeAndFeatures](https://developer.android.com/reference/android/accounts/AccountManager.html#getAccountsByTypeAndFeatures(java.lang.String,%20java.lang.String%5B%5D,%20android.accounts.AccountManagerCallback,%20android.os.Handler))
        ///
        /// Required features: "android-accounts-AccountManagerCallback", "android-accounts-AccountManagerFuture", "android-os-Handler", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-accounts-AccountManagerCallback", feature = "android-accounts-AccountManagerFuture", feature = "android-os-Handler", feature = "java-lang-String")))]
        pub fn getAccountsByTypeAndFeatures<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accounts::AccountManagerCallback>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::accounts::AccountManagerFuture>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accounts/AccountManager", java.flags == PUBLIC, .name == "getAccountsByTypeAndFeatures", .descriptor == "(Ljava/lang/String;[Ljava/lang/String;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accounts/AccountManager\0", "getAccountsByTypeAndFeatures\0", "(Ljava/lang/String;[Ljava/lang/String;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addAccountExplicitly](https://developer.android.com/reference/android/accounts/AccountManager.html#addAccountExplicitly(android.accounts.Account,%20java.lang.String,%20android.os.Bundle))
        ///
        /// Required features: "android-accounts-Account", "android-os-Bundle", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-accounts-Account", feature = "android-os-Bundle", feature = "java-lang-String")))]
        pub fn addAccountExplicitly_Account_String_Bundle<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accounts::Account>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accounts/AccountManager", java.flags == PUBLIC, .name == "addAccountExplicitly", .descriptor == "(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accounts/AccountManager\0", "addAccountExplicitly\0", "(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addAccountExplicitly](https://developer.android.com/reference/android/accounts/AccountManager.html#addAccountExplicitly(android.accounts.Account,%20java.lang.String,%20android.os.Bundle,%20java.util.Map))
        ///
        /// Required features: "android-accounts-Account", "android-os-Bundle", "java-lang-String", "java-util-Map"
        #[cfg(any(feature = "all", all(feature = "android-accounts-Account", feature = "android-os-Bundle", feature = "java-lang-String", feature = "java-util-Map")))]
        pub fn addAccountExplicitly_Account_String_Bundle_Map<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accounts::Account>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::Map>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accounts/AccountManager", java.flags == PUBLIC, .name == "addAccountExplicitly", .descriptor == "(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Ljava/util/Map;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accounts/AccountManager\0", "addAccountExplicitly\0", "(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Ljava/util/Map;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPackagesAndVisibilityForAccount](https://developer.android.com/reference/android/accounts/AccountManager.html#getPackagesAndVisibilityForAccount(android.accounts.Account))
        ///
        /// Required features: "android-accounts-Account", "java-util-Map"
        #[cfg(any(feature = "all", all(feature = "android-accounts-Account", feature = "java-util-Map")))]
        pub fn getPackagesAndVisibilityForAccount<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accounts::Account>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Map>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accounts/AccountManager", java.flags == PUBLIC, .name == "getPackagesAndVisibilityForAccount", .descriptor == "(Landroid/accounts/Account;)Ljava/util/Map;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accounts/AccountManager\0", "getPackagesAndVisibilityForAccount\0", "(Landroid/accounts/Account;)Ljava/util/Map;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAccountsAndVisibilityForPackage](https://developer.android.com/reference/android/accounts/AccountManager.html#getAccountsAndVisibilityForPackage(java.lang.String,%20java.lang.String))
        ///
        /// Required features: "java-lang-String", "java-util-Map"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-util-Map")))]
        pub fn getAccountsAndVisibilityForPackage<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Map>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accounts/AccountManager", java.flags == PUBLIC, .name == "getAccountsAndVisibilityForPackage", .descriptor == "(Ljava/lang/String;Ljava/lang/String;)Ljava/util/Map;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accounts/AccountManager\0", "getAccountsAndVisibilityForPackage\0", "(Ljava/lang/String;Ljava/lang/String;)Ljava/util/Map;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAccountVisibility](https://developer.android.com/reference/android/accounts/AccountManager.html#setAccountVisibility(android.accounts.Account,%20java.lang.String,%20int))
        ///
        /// Required features: "android-accounts-Account", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-accounts-Account", feature = "java-lang-String")))]
        pub fn setAccountVisibility<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accounts::Account>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accounts/AccountManager", java.flags == PUBLIC, .name == "setAccountVisibility", .descriptor == "(Landroid/accounts/Account;Ljava/lang/String;I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accounts/AccountManager\0", "setAccountVisibility\0", "(Landroid/accounts/Account;Ljava/lang/String;I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAccountVisibility](https://developer.android.com/reference/android/accounts/AccountManager.html#getAccountVisibility(android.accounts.Account,%20java.lang.String))
        ///
        /// Required features: "android-accounts-Account", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-accounts-Account", feature = "java-lang-String")))]
        pub fn getAccountVisibility<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accounts::Account>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accounts/AccountManager", java.flags == PUBLIC, .name == "getAccountVisibility", .descriptor == "(Landroid/accounts/Account;Ljava/lang/String;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accounts/AccountManager\0", "getAccountVisibility\0", "(Landroid/accounts/Account;Ljava/lang/String;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [notifyAccountAuthenticated](https://developer.android.com/reference/android/accounts/AccountManager.html#notifyAccountAuthenticated(android.accounts.Account))
        ///
        /// Required features: "android-accounts-Account"
        #[cfg(any(feature = "all", all(feature = "android-accounts-Account")))]
        pub fn notifyAccountAuthenticated<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accounts::Account>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accounts/AccountManager", java.flags == PUBLIC, .name == "notifyAccountAuthenticated", .descriptor == "(Landroid/accounts/Account;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accounts/AccountManager\0", "notifyAccountAuthenticated\0", "(Landroid/accounts/Account;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [renameAccount](https://developer.android.com/reference/android/accounts/AccountManager.html#renameAccount(android.accounts.Account,%20java.lang.String,%20android.accounts.AccountManagerCallback,%20android.os.Handler))
        ///
        /// Required features: "android-accounts-Account", "android-accounts-AccountManagerCallback", "android-accounts-AccountManagerFuture", "android-os-Handler", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-accounts-Account", feature = "android-accounts-AccountManagerCallback", feature = "android-accounts-AccountManagerFuture", feature = "android-os-Handler", feature = "java-lang-String")))]
        pub fn renameAccount<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accounts::Account>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accounts::AccountManagerCallback>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::accounts::AccountManagerFuture>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accounts/AccountManager", java.flags == PUBLIC, .name == "renameAccount", .descriptor == "(Landroid/accounts/Account;Ljava/lang/String;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accounts/AccountManager\0", "renameAccount\0", "(Landroid/accounts/Account;Ljava/lang/String;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPreviousName](https://developer.android.com/reference/android/accounts/AccountManager.html#getPreviousName(android.accounts.Account))
        ///
        /// Required features: "android-accounts-Account", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-accounts-Account", feature = "java-lang-String")))]
        pub fn getPreviousName<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accounts::Account>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accounts/AccountManager", java.flags == PUBLIC, .name == "getPreviousName", .descriptor == "(Landroid/accounts/Account;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accounts/AccountManager\0", "getPreviousName\0", "(Landroid/accounts/Account;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeAccount](https://developer.android.com/reference/android/accounts/AccountManager.html#removeAccount(android.accounts.Account,%20android.accounts.AccountManagerCallback,%20android.os.Handler))
        ///
        /// Required features: "android-accounts-Account", "android-accounts-AccountManagerCallback", "android-accounts-AccountManagerFuture", "android-os-Handler"
        #[cfg(any(feature = "all", all(feature = "android-accounts-Account", feature = "android-accounts-AccountManagerCallback", feature = "android-accounts-AccountManagerFuture", feature = "android-os-Handler")))]
        #[deprecated] pub fn removeAccount_Account_AccountManagerCallback_Handler<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accounts::Account>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accounts::AccountManagerCallback>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::accounts::AccountManagerFuture>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accounts/AccountManager", java.flags == PUBLIC, .name == "removeAccount", .descriptor == "(Landroid/accounts/Account;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accounts/AccountManager\0", "removeAccount\0", "(Landroid/accounts/Account;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeAccount](https://developer.android.com/reference/android/accounts/AccountManager.html#removeAccount(android.accounts.Account,%20android.app.Activity,%20android.accounts.AccountManagerCallback,%20android.os.Handler))
        ///
        /// Required features: "android-accounts-Account", "android-accounts-AccountManagerCallback", "android-accounts-AccountManagerFuture", "android-app-Activity", "android-os-Handler"
        #[cfg(any(feature = "all", all(feature = "android-accounts-Account", feature = "android-accounts-AccountManagerCallback", feature = "android-accounts-AccountManagerFuture", feature = "android-app-Activity", feature = "android-os-Handler")))]
        pub fn removeAccount_Account_Activity_AccountManagerCallback_Handler<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accounts::Account>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Activity>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accounts::AccountManagerCallback>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::accounts::AccountManagerFuture>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accounts/AccountManager", java.flags == PUBLIC, .name == "removeAccount", .descriptor == "(Landroid/accounts/Account;Landroid/app/Activity;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accounts/AccountManager\0", "removeAccount\0", "(Landroid/accounts/Account;Landroid/app/Activity;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeAccountExplicitly](https://developer.android.com/reference/android/accounts/AccountManager.html#removeAccountExplicitly(android.accounts.Account))
        ///
        /// Required features: "android-accounts-Account"
        #[cfg(any(feature = "all", all(feature = "android-accounts-Account")))]
        pub fn removeAccountExplicitly<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accounts::Account>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accounts/AccountManager", java.flags == PUBLIC, .name == "removeAccountExplicitly", .descriptor == "(Landroid/accounts/Account;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accounts/AccountManager\0", "removeAccountExplicitly\0", "(Landroid/accounts/Account;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [invalidateAuthToken](https://developer.android.com/reference/android/accounts/AccountManager.html#invalidateAuthToken(java.lang.String,%20java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn invalidateAuthToken<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accounts/AccountManager", java.flags == PUBLIC, .name == "invalidateAuthToken", .descriptor == "(Ljava/lang/String;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accounts/AccountManager\0", "invalidateAuthToken\0", "(Ljava/lang/String;Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [peekAuthToken](https://developer.android.com/reference/android/accounts/AccountManager.html#peekAuthToken(android.accounts.Account,%20java.lang.String))
        ///
        /// Required features: "android-accounts-Account", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-accounts-Account", feature = "java-lang-String")))]
        pub fn peekAuthToken<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accounts::Account>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accounts/AccountManager", java.flags == PUBLIC, .name == "peekAuthToken", .descriptor == "(Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accounts/AccountManager\0", "peekAuthToken\0", "(Landroid/accounts/Account;Ljava/lang/String;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPassword](https://developer.android.com/reference/android/accounts/AccountManager.html#setPassword(android.accounts.Account,%20java.lang.String))
        ///
        /// Required features: "android-accounts-Account", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-accounts-Account", feature = "java-lang-String")))]
        pub fn setPassword<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accounts::Account>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accounts/AccountManager", java.flags == PUBLIC, .name == "setPassword", .descriptor == "(Landroid/accounts/Account;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accounts/AccountManager\0", "setPassword\0", "(Landroid/accounts/Account;Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clearPassword](https://developer.android.com/reference/android/accounts/AccountManager.html#clearPassword(android.accounts.Account))
        ///
        /// Required features: "android-accounts-Account"
        #[cfg(any(feature = "all", all(feature = "android-accounts-Account")))]
        pub fn clearPassword<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accounts::Account>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accounts/AccountManager", java.flags == PUBLIC, .name == "clearPassword", .descriptor == "(Landroid/accounts/Account;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accounts/AccountManager\0", "clearPassword\0", "(Landroid/accounts/Account;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setUserData](https://developer.android.com/reference/android/accounts/AccountManager.html#setUserData(android.accounts.Account,%20java.lang.String,%20java.lang.String))
        ///
        /// Required features: "android-accounts-Account", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-accounts-Account", feature = "java-lang-String")))]
        pub fn setUserData<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accounts::Account>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accounts/AccountManager", java.flags == PUBLIC, .name == "setUserData", .descriptor == "(Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accounts/AccountManager\0", "setUserData\0", "(Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAuthToken](https://developer.android.com/reference/android/accounts/AccountManager.html#setAuthToken(android.accounts.Account,%20java.lang.String,%20java.lang.String))
        ///
        /// Required features: "android-accounts-Account", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-accounts-Account", feature = "java-lang-String")))]
        pub fn setAuthToken<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accounts::Account>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accounts/AccountManager", java.flags == PUBLIC, .name == "setAuthToken", .descriptor == "(Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accounts/AccountManager\0", "setAuthToken\0", "(Landroid/accounts/Account;Ljava/lang/String;Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [blockingGetAuthToken](https://developer.android.com/reference/android/accounts/AccountManager.html#blockingGetAuthToken(android.accounts.Account,%20java.lang.String,%20boolean))
        ///
        /// Required features: "android-accounts-Account", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-accounts-Account", feature = "java-lang-String")))]
        pub fn blockingGetAuthToken<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accounts::Account>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accounts/AccountManager", java.flags == PUBLIC, .name == "blockingGetAuthToken", .descriptor == "(Landroid/accounts/Account;Ljava/lang/String;Z)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accounts/AccountManager\0", "blockingGetAuthToken\0", "(Landroid/accounts/Account;Ljava/lang/String;Z)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAuthToken](https://developer.android.com/reference/android/accounts/AccountManager.html#getAuthToken(android.accounts.Account,%20java.lang.String,%20android.os.Bundle,%20android.app.Activity,%20android.accounts.AccountManagerCallback,%20android.os.Handler))
        ///
        /// Required features: "android-accounts-Account", "android-accounts-AccountManagerCallback", "android-accounts-AccountManagerFuture", "android-app-Activity", "android-os-Bundle", "android-os-Handler", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-accounts-Account", feature = "android-accounts-AccountManagerCallback", feature = "android-accounts-AccountManagerFuture", feature = "android-app-Activity", feature = "android-os-Bundle", feature = "android-os-Handler", feature = "java-lang-String")))]
        pub fn getAuthToken_Account_String_Bundle_Activity_AccountManagerCallback_Handler<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accounts::Account>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Activity>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accounts::AccountManagerCallback>>, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::accounts::AccountManagerFuture>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accounts/AccountManager", java.flags == PUBLIC, .name == "getAuthToken", .descriptor == "(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Landroid/app/Activity;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accounts/AccountManager\0", "getAuthToken\0", "(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Landroid/app/Activity;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAuthToken](https://developer.android.com/reference/android/accounts/AccountManager.html#getAuthToken(android.accounts.Account,%20java.lang.String,%20boolean,%20android.accounts.AccountManagerCallback,%20android.os.Handler))
        ///
        /// Required features: "android-accounts-Account", "android-accounts-AccountManagerCallback", "android-accounts-AccountManagerFuture", "android-os-Handler", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-accounts-Account", feature = "android-accounts-AccountManagerCallback", feature = "android-accounts-AccountManagerFuture", feature = "android-os-Handler", feature = "java-lang-String")))]
        #[deprecated] pub fn getAuthToken_Account_String_boolean_AccountManagerCallback_Handler<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accounts::Account>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: bool, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accounts::AccountManagerCallback>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::accounts::AccountManagerFuture>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accounts/AccountManager", java.flags == PUBLIC, .name == "getAuthToken", .descriptor == "(Landroid/accounts/Account;Ljava/lang/String;ZLandroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accounts/AccountManager\0", "getAuthToken\0", "(Landroid/accounts/Account;Ljava/lang/String;ZLandroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAuthToken](https://developer.android.com/reference/android/accounts/AccountManager.html#getAuthToken(android.accounts.Account,%20java.lang.String,%20android.os.Bundle,%20boolean,%20android.accounts.AccountManagerCallback,%20android.os.Handler))
        ///
        /// Required features: "android-accounts-Account", "android-accounts-AccountManagerCallback", "android-accounts-AccountManagerFuture", "android-os-Bundle", "android-os-Handler", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-accounts-Account", feature = "android-accounts-AccountManagerCallback", feature = "android-accounts-AccountManagerFuture", feature = "android-os-Bundle", feature = "android-os-Handler", feature = "java-lang-String")))]
        pub fn getAuthToken_Account_String_Bundle_boolean_AccountManagerCallback_Handler<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accounts::Account>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>, arg3: bool, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accounts::AccountManagerCallback>>, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::accounts::AccountManagerFuture>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accounts/AccountManager", java.flags == PUBLIC, .name == "getAuthToken", .descriptor == "(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;ZLandroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accounts/AccountManager\0", "getAuthToken\0", "(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;ZLandroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addAccount](https://developer.android.com/reference/android/accounts/AccountManager.html#addAccount(java.lang.String,%20java.lang.String,%20java.lang.String%5B%5D,%20android.os.Bundle,%20android.app.Activity,%20android.accounts.AccountManagerCallback,%20android.os.Handler))
        ///
        /// Required features: "android-accounts-AccountManagerCallback", "android-accounts-AccountManagerFuture", "android-app-Activity", "android-os-Bundle", "android-os-Handler", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-accounts-AccountManagerCallback", feature = "android-accounts-AccountManagerFuture", feature = "android-app-Activity", feature = "android-os-Bundle", feature = "android-os-Handler", feature = "java-lang-String")))]
        pub fn addAccount<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Activity>>, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accounts::AccountManagerCallback>>, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::accounts::AccountManagerFuture>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accounts/AccountManager", java.flags == PUBLIC, .name == "addAccount", .descriptor == "(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Landroid/os/Bundle;Landroid/app/Activity;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5.into()), __jni_bindgen::AsJValue::as_jvalue(&arg6.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accounts/AccountManager\0", "addAccount\0", "(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Landroid/os/Bundle;Landroid/app/Activity;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [confirmCredentials](https://developer.android.com/reference/android/accounts/AccountManager.html#confirmCredentials(android.accounts.Account,%20android.os.Bundle,%20android.app.Activity,%20android.accounts.AccountManagerCallback,%20android.os.Handler))
        ///
        /// Required features: "android-accounts-Account", "android-accounts-AccountManagerCallback", "android-accounts-AccountManagerFuture", "android-app-Activity", "android-os-Bundle", "android-os-Handler"
        #[cfg(any(feature = "all", all(feature = "android-accounts-Account", feature = "android-accounts-AccountManagerCallback", feature = "android-accounts-AccountManagerFuture", feature = "android-app-Activity", feature = "android-os-Bundle", feature = "android-os-Handler")))]
        pub fn confirmCredentials<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accounts::Account>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Activity>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accounts::AccountManagerCallback>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::accounts::AccountManagerFuture>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accounts/AccountManager", java.flags == PUBLIC, .name == "confirmCredentials", .descriptor == "(Landroid/accounts/Account;Landroid/os/Bundle;Landroid/app/Activity;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accounts/AccountManager\0", "confirmCredentials\0", "(Landroid/accounts/Account;Landroid/os/Bundle;Landroid/app/Activity;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [updateCredentials](https://developer.android.com/reference/android/accounts/AccountManager.html#updateCredentials(android.accounts.Account,%20java.lang.String,%20android.os.Bundle,%20android.app.Activity,%20android.accounts.AccountManagerCallback,%20android.os.Handler))
        ///
        /// Required features: "android-accounts-Account", "android-accounts-AccountManagerCallback", "android-accounts-AccountManagerFuture", "android-app-Activity", "android-os-Bundle", "android-os-Handler", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-accounts-Account", feature = "android-accounts-AccountManagerCallback", feature = "android-accounts-AccountManagerFuture", feature = "android-app-Activity", feature = "android-os-Bundle", feature = "android-os-Handler", feature = "java-lang-String")))]
        pub fn updateCredentials<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accounts::Account>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Activity>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accounts::AccountManagerCallback>>, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::accounts::AccountManagerFuture>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accounts/AccountManager", java.flags == PUBLIC, .name == "updateCredentials", .descriptor == "(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Landroid/app/Activity;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accounts/AccountManager\0", "updateCredentials\0", "(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Landroid/app/Activity;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [editProperties](https://developer.android.com/reference/android/accounts/AccountManager.html#editProperties(java.lang.String,%20android.app.Activity,%20android.accounts.AccountManagerCallback,%20android.os.Handler))
        ///
        /// Required features: "android-accounts-AccountManagerCallback", "android-accounts-AccountManagerFuture", "android-app-Activity", "android-os-Handler", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-accounts-AccountManagerCallback", feature = "android-accounts-AccountManagerFuture", feature = "android-app-Activity", feature = "android-os-Handler", feature = "java-lang-String")))]
        pub fn editProperties<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Activity>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accounts::AccountManagerCallback>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::accounts::AccountManagerFuture>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accounts/AccountManager", java.flags == PUBLIC, .name == "editProperties", .descriptor == "(Ljava/lang/String;Landroid/app/Activity;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accounts/AccountManager\0", "editProperties\0", "(Ljava/lang/String;Landroid/app/Activity;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAuthTokenByFeatures](https://developer.android.com/reference/android/accounts/AccountManager.html#getAuthTokenByFeatures(java.lang.String,%20java.lang.String,%20java.lang.String%5B%5D,%20android.app.Activity,%20android.os.Bundle,%20android.os.Bundle,%20android.accounts.AccountManagerCallback,%20android.os.Handler))
        ///
        /// Required features: "android-accounts-AccountManagerCallback", "android-accounts-AccountManagerFuture", "android-app-Activity", "android-os-Bundle", "android-os-Handler", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-accounts-AccountManagerCallback", feature = "android-accounts-AccountManagerFuture", feature = "android-app-Activity", feature = "android-os-Bundle", feature = "android-os-Handler", feature = "java-lang-String")))]
        pub fn getAuthTokenByFeatures<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Activity>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accounts::AccountManagerCallback>>, arg7: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::accounts::AccountManagerFuture>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accounts/AccountManager", java.flags == PUBLIC, .name == "getAuthTokenByFeatures", .descriptor == "(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Landroid/app/Activity;Landroid/os/Bundle;Landroid/os/Bundle;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5.into()), __jni_bindgen::AsJValue::as_jvalue(&arg6.into()), __jni_bindgen::AsJValue::as_jvalue(&arg7.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accounts/AccountManager\0", "getAuthTokenByFeatures\0", "(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Landroid/app/Activity;Landroid/os/Bundle;Landroid/os/Bundle;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newChooseAccountIntent](https://developer.android.com/reference/android/accounts/AccountManager.html#newChooseAccountIntent(android.accounts.Account,%20java.util.ArrayList,%20java.lang.String%5B%5D,%20boolean,%20java.lang.String,%20java.lang.String,%20java.lang.String%5B%5D,%20android.os.Bundle))
        ///
        /// Required features: "android-accounts-Account", "android-content-Intent", "android-os-Bundle", "java-lang-String", "java-util-ArrayList"
        #[cfg(any(feature = "all", all(feature = "android-accounts-Account", feature = "android-content-Intent", feature = "android-os-Bundle", feature = "java-lang-String", feature = "java-util-ArrayList")))]
        #[deprecated] pub fn newChooseAccountIntent_Account_ArrayList_String_array_boolean_String_String_String_array_Bundle<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accounts::Account>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::ArrayList>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, arg3: bool, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, arg7: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::Intent>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accounts/AccountManager", java.flags == PUBLIC | STATIC, .name == "newChooseAccountIntent", .descriptor == "(Landroid/accounts/Account;Ljava/util/ArrayList;[Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;[Ljava/lang/String;Landroid/os/Bundle;)Landroid/content/Intent;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5.into()), __jni_bindgen::AsJValue::as_jvalue(&arg6.into()), __jni_bindgen::AsJValue::as_jvalue(&arg7.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/accounts/AccountManager\0", "newChooseAccountIntent\0", "(Landroid/accounts/Account;Ljava/util/ArrayList;[Ljava/lang/String;ZLjava/lang/String;Ljava/lang/String;[Ljava/lang/String;Landroid/os/Bundle;)Landroid/content/Intent;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newChooseAccountIntent](https://developer.android.com/reference/android/accounts/AccountManager.html#newChooseAccountIntent(android.accounts.Account,%20java.util.List,%20java.lang.String%5B%5D,%20java.lang.String,%20java.lang.String,%20java.lang.String%5B%5D,%20android.os.Bundle))
        ///
        /// Required features: "android-accounts-Account", "android-content-Intent", "android-os-Bundle", "java-lang-String", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "android-accounts-Account", feature = "android-content-Intent", feature = "android-os-Bundle", feature = "java-lang-String", feature = "java-util-List")))]
        pub fn newChooseAccountIntent_Account_List_String_array_String_String_String_array_Bundle<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accounts::Account>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::Intent>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accounts/AccountManager", java.flags == PUBLIC | STATIC, .name == "newChooseAccountIntent", .descriptor == "(Landroid/accounts/Account;Ljava/util/List;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Landroid/os/Bundle;)Landroid/content/Intent;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5.into()), __jni_bindgen::AsJValue::as_jvalue(&arg6.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/accounts/AccountManager\0", "newChooseAccountIntent\0", "(Landroid/accounts/Account;Ljava/util/List;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Landroid/os/Bundle;)Landroid/content/Intent;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addOnAccountsUpdatedListener](https://developer.android.com/reference/android/accounts/AccountManager.html#addOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener,%20android.os.Handler,%20boolean))
        ///
        /// Required features: "android-accounts-OnAccountsUpdateListener", "android-os-Handler"
        #[cfg(any(feature = "all", all(feature = "android-accounts-OnAccountsUpdateListener", feature = "android-os-Handler")))]
        pub fn addOnAccountsUpdatedListener_OnAccountsUpdateListener_Handler_boolean<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accounts::OnAccountsUpdateListener>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>, arg2: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accounts/AccountManager", java.flags == PUBLIC, .name == "addOnAccountsUpdatedListener", .descriptor == "(Landroid/accounts/OnAccountsUpdateListener;Landroid/os/Handler;Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accounts/AccountManager\0", "addOnAccountsUpdatedListener\0", "(Landroid/accounts/OnAccountsUpdateListener;Landroid/os/Handler;Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addOnAccountsUpdatedListener](https://developer.android.com/reference/android/accounts/AccountManager.html#addOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener,%20android.os.Handler,%20boolean,%20java.lang.String%5B%5D))
        ///
        /// Required features: "android-accounts-OnAccountsUpdateListener", "android-os-Handler", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-accounts-OnAccountsUpdateListener", feature = "android-os-Handler", feature = "java-lang-String")))]
        pub fn addOnAccountsUpdatedListener_OnAccountsUpdateListener_Handler_boolean_String_array<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accounts::OnAccountsUpdateListener>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>, arg2: bool, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accounts/AccountManager", java.flags == PUBLIC, .name == "addOnAccountsUpdatedListener", .descriptor == "(Landroid/accounts/OnAccountsUpdateListener;Landroid/os/Handler;Z[Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accounts/AccountManager\0", "addOnAccountsUpdatedListener\0", "(Landroid/accounts/OnAccountsUpdateListener;Landroid/os/Handler;Z[Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeOnAccountsUpdatedListener](https://developer.android.com/reference/android/accounts/AccountManager.html#removeOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener))
        ///
        /// Required features: "android-accounts-OnAccountsUpdateListener"
        #[cfg(any(feature = "all", all(feature = "android-accounts-OnAccountsUpdateListener")))]
        pub fn removeOnAccountsUpdatedListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accounts::OnAccountsUpdateListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accounts/AccountManager", java.flags == PUBLIC, .name == "removeOnAccountsUpdatedListener", .descriptor == "(Landroid/accounts/OnAccountsUpdateListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accounts/AccountManager\0", "removeOnAccountsUpdatedListener\0", "(Landroid/accounts/OnAccountsUpdateListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [startAddAccountSession](https://developer.android.com/reference/android/accounts/AccountManager.html#startAddAccountSession(java.lang.String,%20java.lang.String,%20java.lang.String%5B%5D,%20android.os.Bundle,%20android.app.Activity,%20android.accounts.AccountManagerCallback,%20android.os.Handler))
        ///
        /// Required features: "android-accounts-AccountManagerCallback", "android-accounts-AccountManagerFuture", "android-app-Activity", "android-os-Bundle", "android-os-Handler", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-accounts-AccountManagerCallback", feature = "android-accounts-AccountManagerFuture", feature = "android-app-Activity", feature = "android-os-Bundle", feature = "android-os-Handler", feature = "java-lang-String")))]
        pub fn startAddAccountSession<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::java::lang::String, crate::java::lang::Throwable>>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Activity>>, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accounts::AccountManagerCallback>>, arg6: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::accounts::AccountManagerFuture>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accounts/AccountManager", java.flags == PUBLIC, .name == "startAddAccountSession", .descriptor == "(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Landroid/os/Bundle;Landroid/app/Activity;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5.into()), __jni_bindgen::AsJValue::as_jvalue(&arg6.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accounts/AccountManager\0", "startAddAccountSession\0", "(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Landroid/os/Bundle;Landroid/app/Activity;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [startUpdateCredentialsSession](https://developer.android.com/reference/android/accounts/AccountManager.html#startUpdateCredentialsSession(android.accounts.Account,%20java.lang.String,%20android.os.Bundle,%20android.app.Activity,%20android.accounts.AccountManagerCallback,%20android.os.Handler))
        ///
        /// Required features: "android-accounts-Account", "android-accounts-AccountManagerCallback", "android-accounts-AccountManagerFuture", "android-app-Activity", "android-os-Bundle", "android-os-Handler", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-accounts-Account", feature = "android-accounts-AccountManagerCallback", feature = "android-accounts-AccountManagerFuture", feature = "android-app-Activity", feature = "android-os-Bundle", feature = "android-os-Handler", feature = "java-lang-String")))]
        pub fn startUpdateCredentialsSession<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accounts::Account>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Activity>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accounts::AccountManagerCallback>>, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::accounts::AccountManagerFuture>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accounts/AccountManager", java.flags == PUBLIC, .name == "startUpdateCredentialsSession", .descriptor == "(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Landroid/app/Activity;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accounts/AccountManager\0", "startUpdateCredentialsSession\0", "(Landroid/accounts/Account;Ljava/lang/String;Landroid/os/Bundle;Landroid/app/Activity;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [finishSession](https://developer.android.com/reference/android/accounts/AccountManager.html#finishSession(android.os.Bundle,%20android.app.Activity,%20android.accounts.AccountManagerCallback,%20android.os.Handler))
        ///
        /// Required features: "android-accounts-AccountManagerCallback", "android-accounts-AccountManagerFuture", "android-app-Activity", "android-os-Bundle", "android-os-Handler"
        #[cfg(any(feature = "all", all(feature = "android-accounts-AccountManagerCallback", feature = "android-accounts-AccountManagerFuture", feature = "android-app-Activity", feature = "android-os-Bundle", feature = "android-os-Handler")))]
        pub fn finishSession<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::app::Activity>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accounts::AccountManagerCallback>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::accounts::AccountManagerFuture>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accounts/AccountManager", java.flags == PUBLIC, .name == "finishSession", .descriptor == "(Landroid/os/Bundle;Landroid/app/Activity;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accounts/AccountManager\0", "finishSession\0", "(Landroid/os/Bundle;Landroid/app/Activity;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isCredentialsUpdateSuggested](https://developer.android.com/reference/android/accounts/AccountManager.html#isCredentialsUpdateSuggested(android.accounts.Account,%20java.lang.String,%20android.accounts.AccountManagerCallback,%20android.os.Handler))
        ///
        /// Required features: "android-accounts-Account", "android-accounts-AccountManagerCallback", "android-accounts-AccountManagerFuture", "android-os-Handler", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-accounts-Account", feature = "android-accounts-AccountManagerCallback", feature = "android-accounts-AccountManagerFuture", feature = "android-os-Handler", feature = "java-lang-String")))]
        pub fn isCredentialsUpdateSuggested<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accounts::Account>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::accounts::AccountManagerCallback>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::accounts::AccountManagerFuture>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/accounts/AccountManager", java.flags == PUBLIC, .name == "isCredentialsUpdateSuggested", .descriptor == "(Landroid/accounts/Account;Ljava/lang/String;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/accounts/AccountManager\0", "isCredentialsUpdateSuggested\0", "(Landroid/accounts/Account;Ljava/lang/String;Landroid/accounts/AccountManagerCallback;Landroid/os/Handler;)Landroid/accounts/AccountManagerFuture;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [ACTION_ACCOUNT_REMOVED](https://developer.android.com/reference/android/accounts/AccountManager.html#ACTION_ACCOUNT_REMOVED)
        pub const ACTION_ACCOUNT_REMOVED : &'static str = "android.accounts.action.ACCOUNT_REMOVED";

        /// public static final [ACTION_AUTHENTICATOR_INTENT](https://developer.android.com/reference/android/accounts/AccountManager.html#ACTION_AUTHENTICATOR_INTENT)
        pub const ACTION_AUTHENTICATOR_INTENT : &'static str = "android.accounts.AccountAuthenticator";

        /// public static final [AUTHENTICATOR_ATTRIBUTES_NAME](https://developer.android.com/reference/android/accounts/AccountManager.html#AUTHENTICATOR_ATTRIBUTES_NAME)
        pub const AUTHENTICATOR_ATTRIBUTES_NAME : &'static str = "account-authenticator";

        /// public static final [AUTHENTICATOR_META_DATA_NAME](https://developer.android.com/reference/android/accounts/AccountManager.html#AUTHENTICATOR_META_DATA_NAME)
        pub const AUTHENTICATOR_META_DATA_NAME : &'static str = "android.accounts.AccountAuthenticator";

        /// public static final [ERROR_CODE_BAD_ARGUMENTS](https://developer.android.com/reference/android/accounts/AccountManager.html#ERROR_CODE_BAD_ARGUMENTS)
        pub const ERROR_CODE_BAD_ARGUMENTS : i32 = 7;

        /// public static final [ERROR_CODE_BAD_AUTHENTICATION](https://developer.android.com/reference/android/accounts/AccountManager.html#ERROR_CODE_BAD_AUTHENTICATION)
        pub const ERROR_CODE_BAD_AUTHENTICATION : i32 = 9;

        /// public static final [ERROR_CODE_BAD_REQUEST](https://developer.android.com/reference/android/accounts/AccountManager.html#ERROR_CODE_BAD_REQUEST)
        pub const ERROR_CODE_BAD_REQUEST : i32 = 8;

        /// public static final [ERROR_CODE_CANCELED](https://developer.android.com/reference/android/accounts/AccountManager.html#ERROR_CODE_CANCELED)
        pub const ERROR_CODE_CANCELED : i32 = 4;

        /// public static final [ERROR_CODE_INVALID_RESPONSE](https://developer.android.com/reference/android/accounts/AccountManager.html#ERROR_CODE_INVALID_RESPONSE)
        pub const ERROR_CODE_INVALID_RESPONSE : i32 = 5;

        /// public static final [ERROR_CODE_NETWORK_ERROR](https://developer.android.com/reference/android/accounts/AccountManager.html#ERROR_CODE_NETWORK_ERROR)
        pub const ERROR_CODE_NETWORK_ERROR : i32 = 3;

        /// public static final [ERROR_CODE_REMOTE_EXCEPTION](https://developer.android.com/reference/android/accounts/AccountManager.html#ERROR_CODE_REMOTE_EXCEPTION)
        pub const ERROR_CODE_REMOTE_EXCEPTION : i32 = 1;

        /// public static final [ERROR_CODE_UNSUPPORTED_OPERATION](https://developer.android.com/reference/android/accounts/AccountManager.html#ERROR_CODE_UNSUPPORTED_OPERATION)
        pub const ERROR_CODE_UNSUPPORTED_OPERATION : i32 = 6;

        /// public static final [KEY_ACCOUNTS](https://developer.android.com/reference/android/accounts/AccountManager.html#KEY_ACCOUNTS)
        pub const KEY_ACCOUNTS : &'static str = "accounts";

        /// public static final [KEY_ACCOUNT_AUTHENTICATOR_RESPONSE](https://developer.android.com/reference/android/accounts/AccountManager.html#KEY_ACCOUNT_AUTHENTICATOR_RESPONSE)
        pub const KEY_ACCOUNT_AUTHENTICATOR_RESPONSE : &'static str = "accountAuthenticatorResponse";

        /// public static final [KEY_ACCOUNT_MANAGER_RESPONSE](https://developer.android.com/reference/android/accounts/AccountManager.html#KEY_ACCOUNT_MANAGER_RESPONSE)
        pub const KEY_ACCOUNT_MANAGER_RESPONSE : &'static str = "accountManagerResponse";

        /// public static final [KEY_ACCOUNT_NAME](https://developer.android.com/reference/android/accounts/AccountManager.html#KEY_ACCOUNT_NAME)
        pub const KEY_ACCOUNT_NAME : &'static str = "authAccount";

        /// public static final [KEY_ACCOUNT_SESSION_BUNDLE](https://developer.android.com/reference/android/accounts/AccountManager.html#KEY_ACCOUNT_SESSION_BUNDLE)
        pub const KEY_ACCOUNT_SESSION_BUNDLE : &'static str = "accountSessionBundle";

        /// public static final [KEY_ACCOUNT_STATUS_TOKEN](https://developer.android.com/reference/android/accounts/AccountManager.html#KEY_ACCOUNT_STATUS_TOKEN)
        pub const KEY_ACCOUNT_STATUS_TOKEN : &'static str = "accountStatusToken";

        /// public static final [KEY_ACCOUNT_TYPE](https://developer.android.com/reference/android/accounts/AccountManager.html#KEY_ACCOUNT_TYPE)
        pub const KEY_ACCOUNT_TYPE : &'static str = "accountType";

        /// public static final [KEY_ANDROID_PACKAGE_NAME](https://developer.android.com/reference/android/accounts/AccountManager.html#KEY_ANDROID_PACKAGE_NAME)
        pub const KEY_ANDROID_PACKAGE_NAME : &'static str = "androidPackageName";

        /// public static final [KEY_AUTHENTICATOR_TYPES](https://developer.android.com/reference/android/accounts/AccountManager.html#KEY_AUTHENTICATOR_TYPES)
        pub const KEY_AUTHENTICATOR_TYPES : &'static str = "authenticator_types";

        /// public static final [KEY_AUTHTOKEN](https://developer.android.com/reference/android/accounts/AccountManager.html#KEY_AUTHTOKEN)
        pub const KEY_AUTHTOKEN : &'static str = "authtoken";

        /// public static final [KEY_AUTH_FAILED_MESSAGE](https://developer.android.com/reference/android/accounts/AccountManager.html#KEY_AUTH_FAILED_MESSAGE)
        pub const KEY_AUTH_FAILED_MESSAGE : &'static str = "authFailedMessage";

        /// public static final [KEY_AUTH_TOKEN_LABEL](https://developer.android.com/reference/android/accounts/AccountManager.html#KEY_AUTH_TOKEN_LABEL)
        pub const KEY_AUTH_TOKEN_LABEL : &'static str = "authTokenLabelKey";

        /// public static final [KEY_BOOLEAN_RESULT](https://developer.android.com/reference/android/accounts/AccountManager.html#KEY_BOOLEAN_RESULT)
        pub const KEY_BOOLEAN_RESULT : &'static str = "booleanResult";

        /// public static final [KEY_CALLER_PID](https://developer.android.com/reference/android/accounts/AccountManager.html#KEY_CALLER_PID)
        pub const KEY_CALLER_PID : &'static str = "callerPid";

        /// public static final [KEY_CALLER_UID](https://developer.android.com/reference/android/accounts/AccountManager.html#KEY_CALLER_UID)
        pub const KEY_CALLER_UID : &'static str = "callerUid";

        /// public static final [KEY_ERROR_CODE](https://developer.android.com/reference/android/accounts/AccountManager.html#KEY_ERROR_CODE)
        pub const KEY_ERROR_CODE : &'static str = "errorCode";

        /// public static final [KEY_ERROR_MESSAGE](https://developer.android.com/reference/android/accounts/AccountManager.html#KEY_ERROR_MESSAGE)
        pub const KEY_ERROR_MESSAGE : &'static str = "errorMessage";

        /// public static final [KEY_INTENT](https://developer.android.com/reference/android/accounts/AccountManager.html#KEY_INTENT)
        pub const KEY_INTENT : &'static str = "intent";

        /// public static final [KEY_LAST_AUTHENTICATED_TIME](https://developer.android.com/reference/android/accounts/AccountManager.html#KEY_LAST_AUTHENTICATED_TIME)
        pub const KEY_LAST_AUTHENTICATED_TIME : &'static str = "lastAuthenticatedTime";

        /// public static final [KEY_PASSWORD](https://developer.android.com/reference/android/accounts/AccountManager.html#KEY_PASSWORD)
        pub const KEY_PASSWORD : &'static str = "password";

        /// public static final [KEY_USERDATA](https://developer.android.com/reference/android/accounts/AccountManager.html#KEY_USERDATA)
        pub const KEY_USERDATA : &'static str = "userdata";

        /// public static final [LOGIN_ACCOUNTS_CHANGED_ACTION](https://developer.android.com/reference/android/accounts/AccountManager.html#LOGIN_ACCOUNTS_CHANGED_ACTION)
        #[deprecated] pub const LOGIN_ACCOUNTS_CHANGED_ACTION : &'static str = "android.accounts.LOGIN_ACCOUNTS_CHANGED";

        /// public static final [PACKAGE_NAME_KEY_LEGACY_NOT_VISIBLE](https://developer.android.com/reference/android/accounts/AccountManager.html#PACKAGE_NAME_KEY_LEGACY_NOT_VISIBLE)
        pub const PACKAGE_NAME_KEY_LEGACY_NOT_VISIBLE : &'static str = "android:accounts:key_legacy_not_visible";

        /// public static final [PACKAGE_NAME_KEY_LEGACY_VISIBLE](https://developer.android.com/reference/android/accounts/AccountManager.html#PACKAGE_NAME_KEY_LEGACY_VISIBLE)
        pub const PACKAGE_NAME_KEY_LEGACY_VISIBLE : &'static str = "android:accounts:key_legacy_visible";

        /// public static final [VISIBILITY_NOT_VISIBLE](https://developer.android.com/reference/android/accounts/AccountManager.html#VISIBILITY_NOT_VISIBLE)
        pub const VISIBILITY_NOT_VISIBLE : i32 = 3;

        /// public static final [VISIBILITY_UNDEFINED](https://developer.android.com/reference/android/accounts/AccountManager.html#VISIBILITY_UNDEFINED)
        pub const VISIBILITY_UNDEFINED : i32 = 0;

        /// public static final [VISIBILITY_USER_MANAGED_NOT_VISIBLE](https://developer.android.com/reference/android/accounts/AccountManager.html#VISIBILITY_USER_MANAGED_NOT_VISIBLE)
        pub const VISIBILITY_USER_MANAGED_NOT_VISIBLE : i32 = 4;

        /// public static final [VISIBILITY_USER_MANAGED_VISIBLE](https://developer.android.com/reference/android/accounts/AccountManager.html#VISIBILITY_USER_MANAGED_VISIBLE)
        pub const VISIBILITY_USER_MANAGED_VISIBLE : i32 = 2;

        /// public static final [VISIBILITY_VISIBLE](https://developer.android.com/reference/android/accounts/AccountManager.html#VISIBILITY_VISIBLE)
        pub const VISIBILITY_VISIBLE : i32 = 1;
    }
}
