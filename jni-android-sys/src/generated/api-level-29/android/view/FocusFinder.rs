// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-view-FocusFinder"))]
__jni_bindgen! {
    /// public class [FocusFinder](https://developer.android.com/reference/android/view/FocusFinder.html)
    ///
    /// Required feature: android-view-FocusFinder
    public class FocusFinder ("android/view/FocusFinder") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [FocusFinder](https://developer.android.com/reference/android/view/FocusFinder.html#FocusFinder())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::view::FocusFinder>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/FocusFinder", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/FocusFinder\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getInstance](https://developer.android.com/reference/android/view/FocusFinder.html#getInstance())
        ///
        /// Required features: "android-view-FocusFinder"
        #[cfg(any(feature = "all", all(feature = "android-view-FocusFinder")))]
        pub fn getInstance<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::FocusFinder>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/FocusFinder", java.flags == PUBLIC | STATIC, .name == "getInstance", .descriptor == "()Landroid/view/FocusFinder;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/view/FocusFinder\0", "getInstance\0", "()Landroid/view/FocusFinder;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [findNextFocus](https://developer.android.com/reference/android/view/FocusFinder.html#findNextFocus(android.view.ViewGroup,%20android.view.View,%20int))
        ///
        /// Required features: "android-view-View", "android-view-ViewGroup"
        #[cfg(any(feature = "all", all(feature = "android-view-View", feature = "android-view-ViewGroup")))]
        pub fn findNextFocus<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::ViewGroup>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>, arg2: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::View>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/FocusFinder", java.flags == PUBLIC | FINAL, .name == "findNextFocus", .descriptor == "(Landroid/view/ViewGroup;Landroid/view/View;I)Landroid/view/View;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/FocusFinder\0", "findNextFocus\0", "(Landroid/view/ViewGroup;Landroid/view/View;I)Landroid/view/View;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [findNextFocusFromRect](https://developer.android.com/reference/android/view/FocusFinder.html#findNextFocusFromRect(android.view.ViewGroup,%20android.graphics.Rect,%20int))
        ///
        /// Required features: "android-graphics-Rect", "android-view-View", "android-view-ViewGroup"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Rect", feature = "android-view-View", feature = "android-view-ViewGroup")))]
        pub fn findNextFocusFromRect<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::ViewGroup>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Rect>>, arg2: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::View>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/FocusFinder", java.flags == PUBLIC, .name == "findNextFocusFromRect", .descriptor == "(Landroid/view/ViewGroup;Landroid/graphics/Rect;I)Landroid/view/View;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/FocusFinder\0", "findNextFocusFromRect\0", "(Landroid/view/ViewGroup;Landroid/graphics/Rect;I)Landroid/view/View;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [findNextKeyboardNavigationCluster](https://developer.android.com/reference/android/view/FocusFinder.html#findNextKeyboardNavigationCluster(android.view.View,%20android.view.View,%20int))
        ///
        /// Required features: "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-view-View")))]
        pub fn findNextKeyboardNavigationCluster<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>, arg2: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::View>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/FocusFinder", java.flags == PUBLIC, .name == "findNextKeyboardNavigationCluster", .descriptor == "(Landroid/view/View;Landroid/view/View;I)Landroid/view/View;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/FocusFinder\0", "findNextKeyboardNavigationCluster\0", "(Landroid/view/View;Landroid/view/View;I)Landroid/view/View;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [findNearestTouchable](https://developer.android.com/reference/android/view/FocusFinder.html#findNearestTouchable(android.view.ViewGroup,%20int,%20int,%20int,%20int%5B%5D))
        ///
        /// Required features: "android-view-View", "android-view-ViewGroup"
        #[cfg(any(feature = "all", all(feature = "android-view-View", feature = "android-view-ViewGroup")))]
        pub fn findNearestTouchable<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::ViewGroup>>, arg1: i32, arg2: i32, arg3: i32, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::View>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/FocusFinder", java.flags == PUBLIC, .name == "findNearestTouchable", .descriptor == "(Landroid/view/ViewGroup;III[I)Landroid/view/View;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/FocusFinder\0", "findNearestTouchable\0", "(Landroid/view/ViewGroup;III[I)Landroid/view/View;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
