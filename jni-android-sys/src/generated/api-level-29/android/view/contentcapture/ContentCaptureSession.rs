// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-view-contentcapture-ContentCaptureSession"))]
__jni_bindgen! {
    /// public class [ContentCaptureSession](https://developer.android.com/reference/android/view/contentcapture/ContentCaptureSession.html)
    ///
    /// Required feature: android-view-contentcapture-ContentCaptureSession
    public class ContentCaptureSession ("android/view/contentcapture/ContentCaptureSession") extends crate::java::lang::Object, implements crate::java::lang::AutoCloseable {

        // // Not emitting: Non-public method
        // /// [ContentCaptureSession](https://developer.android.com/reference/android/view/contentcapture/ContentCaptureSession.html#ContentCaptureSession())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::view::contentcapture::ContentCaptureSession>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/contentcapture/ContentCaptureSession", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/contentcapture/ContentCaptureSession\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getContentCaptureSessionId](https://developer.android.com/reference/android/view/contentcapture/ContentCaptureSession.html#getContentCaptureSessionId())
        ///
        /// Required features: "android-view-contentcapture-ContentCaptureSessionId"
        #[cfg(any(feature = "all", all(feature = "android-view-contentcapture-ContentCaptureSessionId")))]
        pub fn getContentCaptureSessionId<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::contentcapture::ContentCaptureSessionId>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/contentcapture/ContentCaptureSession", java.flags == PUBLIC | FINAL, .name == "getContentCaptureSessionId", .descriptor == "()Landroid/view/contentcapture/ContentCaptureSessionId;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/contentcapture/ContentCaptureSession\0", "getContentCaptureSessionId\0", "()Landroid/view/contentcapture/ContentCaptureSessionId;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [createContentCaptureSession](https://developer.android.com/reference/android/view/contentcapture/ContentCaptureSession.html#createContentCaptureSession(android.view.contentcapture.ContentCaptureContext))
        ///
        /// Required features: "android-view-contentcapture-ContentCaptureContext", "android-view-contentcapture-ContentCaptureSession"
        #[cfg(any(feature = "all", all(feature = "android-view-contentcapture-ContentCaptureContext", feature = "android-view-contentcapture-ContentCaptureSession")))]
        pub fn createContentCaptureSession<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::contentcapture::ContentCaptureContext>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::contentcapture::ContentCaptureSession>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/contentcapture/ContentCaptureSession", java.flags == PUBLIC | FINAL, .name == "createContentCaptureSession", .descriptor == "(Landroid/view/contentcapture/ContentCaptureContext;)Landroid/view/contentcapture/ContentCaptureSession;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/contentcapture/ContentCaptureSession\0", "createContentCaptureSession\0", "(Landroid/view/contentcapture/ContentCaptureContext;)Landroid/view/contentcapture/ContentCaptureSession;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setContentCaptureContext](https://developer.android.com/reference/android/view/contentcapture/ContentCaptureSession.html#setContentCaptureContext(android.view.contentcapture.ContentCaptureContext))
        ///
        /// Required features: "android-view-contentcapture-ContentCaptureContext"
        #[cfg(any(feature = "all", all(feature = "android-view-contentcapture-ContentCaptureContext")))]
        pub fn setContentCaptureContext<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::contentcapture::ContentCaptureContext>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/contentcapture/ContentCaptureSession", java.flags == PUBLIC | FINAL, .name == "setContentCaptureContext", .descriptor == "(Landroid/view/contentcapture/ContentCaptureContext;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/contentcapture/ContentCaptureSession\0", "setContentCaptureContext\0", "(Landroid/view/contentcapture/ContentCaptureContext;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getContentCaptureContext](https://developer.android.com/reference/android/view/contentcapture/ContentCaptureSession.html#getContentCaptureContext())
        ///
        /// Required features: "android-view-contentcapture-ContentCaptureContext"
        #[cfg(any(feature = "all", all(feature = "android-view-contentcapture-ContentCaptureContext")))]
        pub fn getContentCaptureContext<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::contentcapture::ContentCaptureContext>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/contentcapture/ContentCaptureSession", java.flags == PUBLIC | FINAL, .name == "getContentCaptureContext", .descriptor == "()Landroid/view/contentcapture/ContentCaptureContext;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/contentcapture/ContentCaptureSession\0", "getContentCaptureContext\0", "()Landroid/view/contentcapture/ContentCaptureContext;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [destroy](https://developer.android.com/reference/android/view/contentcapture/ContentCaptureSession.html#destroy())
        pub fn destroy<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/contentcapture/ContentCaptureSession", java.flags == PUBLIC | FINAL, .name == "destroy", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/contentcapture/ContentCaptureSession\0", "destroy\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [close](https://developer.android.com/reference/android/view/contentcapture/ContentCaptureSession.html#close())
        pub fn close<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/contentcapture/ContentCaptureSession", java.flags == PUBLIC, .name == "close", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/contentcapture/ContentCaptureSession\0", "close\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [notifyViewAppeared](https://developer.android.com/reference/android/view/contentcapture/ContentCaptureSession.html#notifyViewAppeared(android.view.ViewStructure))
        ///
        /// Required features: "android-view-ViewStructure"
        #[cfg(any(feature = "all", all(feature = "android-view-ViewStructure")))]
        pub fn notifyViewAppeared<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::ViewStructure>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/contentcapture/ContentCaptureSession", java.flags == PUBLIC | FINAL, .name == "notifyViewAppeared", .descriptor == "(Landroid/view/ViewStructure;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/contentcapture/ContentCaptureSession\0", "notifyViewAppeared\0", "(Landroid/view/ViewStructure;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [notifyViewDisappeared](https://developer.android.com/reference/android/view/contentcapture/ContentCaptureSession.html#notifyViewDisappeared(android.view.autofill.AutofillId))
        ///
        /// Required features: "android-view-autofill-AutofillId"
        #[cfg(any(feature = "all", all(feature = "android-view-autofill-AutofillId")))]
        pub fn notifyViewDisappeared<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::autofill::AutofillId>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/contentcapture/ContentCaptureSession", java.flags == PUBLIC | FINAL, .name == "notifyViewDisappeared", .descriptor == "(Landroid/view/autofill/AutofillId;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/contentcapture/ContentCaptureSession\0", "notifyViewDisappeared\0", "(Landroid/view/autofill/AutofillId;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [notifyViewsDisappeared](https://developer.android.com/reference/android/view/contentcapture/ContentCaptureSession.html#notifyViewsDisappeared(android.view.autofill.AutofillId,%20long%5B%5D))
        ///
        /// Required features: "android-view-autofill-AutofillId"
        #[cfg(any(feature = "all", all(feature = "android-view-autofill-AutofillId")))]
        pub fn notifyViewsDisappeared<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::autofill::AutofillId>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::LongArray>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/contentcapture/ContentCaptureSession", java.flags == PUBLIC | FINAL, .name == "notifyViewsDisappeared", .descriptor == "(Landroid/view/autofill/AutofillId;[J)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/contentcapture/ContentCaptureSession\0", "notifyViewsDisappeared\0", "(Landroid/view/autofill/AutofillId;[J)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [notifyViewTextChanged](https://developer.android.com/reference/android/view/contentcapture/ContentCaptureSession.html#notifyViewTextChanged(android.view.autofill.AutofillId,%20java.lang.CharSequence))
        ///
        /// Required features: "android-view-autofill-AutofillId", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-view-autofill-AutofillId", feature = "java-lang-CharSequence")))]
        pub fn notifyViewTextChanged<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::autofill::AutofillId>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/contentcapture/ContentCaptureSession", java.flags == PUBLIC | FINAL, .name == "notifyViewTextChanged", .descriptor == "(Landroid/view/autofill/AutofillId;Ljava/lang/CharSequence;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/contentcapture/ContentCaptureSession\0", "notifyViewTextChanged\0", "(Landroid/view/autofill/AutofillId;Ljava/lang/CharSequence;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newViewStructure](https://developer.android.com/reference/android/view/contentcapture/ContentCaptureSession.html#newViewStructure(android.view.View))
        ///
        /// Required features: "android-view-View", "android-view-ViewStructure"
        #[cfg(any(feature = "all", all(feature = "android-view-View", feature = "android-view-ViewStructure")))]
        pub fn newViewStructure<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::ViewStructure>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/contentcapture/ContentCaptureSession", java.flags == PUBLIC | FINAL, .name == "newViewStructure", .descriptor == "(Landroid/view/View;)Landroid/view/ViewStructure;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/contentcapture/ContentCaptureSession\0", "newViewStructure\0", "(Landroid/view/View;)Landroid/view/ViewStructure;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newAutofillId](https://developer.android.com/reference/android/view/contentcapture/ContentCaptureSession.html#newAutofillId(android.view.autofill.AutofillId,%20long))
        ///
        /// Required features: "android-view-autofill-AutofillId"
        #[cfg(any(feature = "all", all(feature = "android-view-autofill-AutofillId")))]
        pub fn newAutofillId<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::autofill::AutofillId>>, arg1: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::autofill::AutofillId>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/contentcapture/ContentCaptureSession", java.flags == PUBLIC, .name == "newAutofillId", .descriptor == "(Landroid/view/autofill/AutofillId;J)Landroid/view/autofill/AutofillId;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/contentcapture/ContentCaptureSession\0", "newAutofillId\0", "(Landroid/view/autofill/AutofillId;J)Landroid/view/autofill/AutofillId;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [newVirtualViewStructure](https://developer.android.com/reference/android/view/contentcapture/ContentCaptureSession.html#newVirtualViewStructure(android.view.autofill.AutofillId,%20long))
        ///
        /// Required features: "android-view-ViewStructure", "android-view-autofill-AutofillId"
        #[cfg(any(feature = "all", all(feature = "android-view-ViewStructure", feature = "android-view-autofill-AutofillId")))]
        pub fn newVirtualViewStructure<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::autofill::AutofillId>>, arg1: i64) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::ViewStructure>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/contentcapture/ContentCaptureSession", java.flags == PUBLIC | FINAL, .name == "newVirtualViewStructure", .descriptor == "(Landroid/view/autofill/AutofillId;J)Landroid/view/ViewStructure;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/contentcapture/ContentCaptureSession\0", "newVirtualViewStructure\0", "(Landroid/view/autofill/AutofillId;J)Landroid/view/ViewStructure;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/android/view/contentcapture/ContentCaptureSession.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/contentcapture/ContentCaptureSession", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/contentcapture/ContentCaptureSession\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
