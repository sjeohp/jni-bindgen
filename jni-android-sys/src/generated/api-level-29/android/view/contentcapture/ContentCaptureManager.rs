// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-view-contentcapture-ContentCaptureManager"))]
__jni_bindgen! {
    /// public final class [ContentCaptureManager](https://developer.android.com/reference/android/view/contentcapture/ContentCaptureManager.html)
    ///
    /// Required feature: android-view-contentcapture-ContentCaptureManager
    public final class ContentCaptureManager ("android/view/contentcapture/ContentCaptureManager") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [ContentCaptureManager](https://developer.android.com/reference/android/view/contentcapture/ContentCaptureManager.html#ContentCaptureManager())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::view::contentcapture::ContentCaptureManager>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/contentcapture/ContentCaptureManager", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/contentcapture/ContentCaptureManager\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getServiceComponentName](https://developer.android.com/reference/android/view/contentcapture/ContentCaptureManager.html#getServiceComponentName())
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn getServiceComponentName<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::ComponentName>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/contentcapture/ContentCaptureManager", java.flags == PUBLIC, .name == "getServiceComponentName", .descriptor == "()Landroid/content/ComponentName;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/contentcapture/ContentCaptureManager\0", "getServiceComponentName\0", "()Landroid/content/ComponentName;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isContentCaptureEnabled](https://developer.android.com/reference/android/view/contentcapture/ContentCaptureManager.html#isContentCaptureEnabled())
        pub fn isContentCaptureEnabled<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/contentcapture/ContentCaptureManager", java.flags == PUBLIC, .name == "isContentCaptureEnabled", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/contentcapture/ContentCaptureManager\0", "isContentCaptureEnabled\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getContentCaptureConditions](https://developer.android.com/reference/android/view/contentcapture/ContentCaptureManager.html#getContentCaptureConditions())
        ///
        /// Required features: "java-util-Set"
        #[cfg(any(feature = "all", all(feature = "java-util-Set")))]
        pub fn getContentCaptureConditions<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Set>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/contentcapture/ContentCaptureManager", java.flags == PUBLIC, .name == "getContentCaptureConditions", .descriptor == "()Ljava/util/Set;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/contentcapture/ContentCaptureManager\0", "getContentCaptureConditions\0", "()Ljava/util/Set;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setContentCaptureEnabled](https://developer.android.com/reference/android/view/contentcapture/ContentCaptureManager.html#setContentCaptureEnabled(boolean))
        pub fn setContentCaptureEnabled<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/contentcapture/ContentCaptureManager", java.flags == PUBLIC, .name == "setContentCaptureEnabled", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/contentcapture/ContentCaptureManager\0", "setContentCaptureEnabled\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeData](https://developer.android.com/reference/android/view/contentcapture/ContentCaptureManager.html#removeData(android.view.contentcapture.DataRemovalRequest))
        ///
        /// Required features: "android-view-contentcapture-DataRemovalRequest"
        #[cfg(any(feature = "all", all(feature = "android-view-contentcapture-DataRemovalRequest")))]
        pub fn removeData<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::contentcapture::DataRemovalRequest>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/contentcapture/ContentCaptureManager", java.flags == PUBLIC, .name == "removeData", .descriptor == "(Landroid/view/contentcapture/DataRemovalRequest;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/contentcapture/ContentCaptureManager\0", "removeData\0", "(Landroid/view/contentcapture/DataRemovalRequest;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
