// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-view-ViewTreeObserver"))]
__jni_bindgen! {
    /// public final class [ViewTreeObserver](https://developer.android.com/reference/android/view/ViewTreeObserver.html)
    ///
    /// Required feature: android-view-ViewTreeObserver
    public final class ViewTreeObserver ("android/view/ViewTreeObserver") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [ViewTreeObserver](https://developer.android.com/reference/android/view/ViewTreeObserver.html#ViewTreeObserver(android.content.Context))
        // ///
        // /// Required features: "android-content-Context"
        // #[cfg(any(feature = "all", all(feature = "android-content-Context")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::view::ViewTreeObserver>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/ViewTreeObserver", java.flags == (empty), .name == "<init>", .descriptor == "(Landroid/content/Context;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewTreeObserver\0", "<init>\0", "(Landroid/content/Context;)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [addOnWindowAttachListener](https://developer.android.com/reference/android/view/ViewTreeObserver.html#addOnWindowAttachListener(android.view.ViewTreeObserver.OnWindowAttachListener))
        ///
        /// Required features: "android-view-ViewTreeObserver_OnWindowAttachListener"
        #[cfg(any(feature = "all", all(feature = "android-view-ViewTreeObserver_OnWindowAttachListener")))]
        pub fn addOnWindowAttachListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::ViewTreeObserver_OnWindowAttachListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewTreeObserver", java.flags == PUBLIC, .name == "addOnWindowAttachListener", .descriptor == "(Landroid/view/ViewTreeObserver$OnWindowAttachListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewTreeObserver\0", "addOnWindowAttachListener\0", "(Landroid/view/ViewTreeObserver$OnWindowAttachListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeOnWindowAttachListener](https://developer.android.com/reference/android/view/ViewTreeObserver.html#removeOnWindowAttachListener(android.view.ViewTreeObserver.OnWindowAttachListener))
        ///
        /// Required features: "android-view-ViewTreeObserver_OnWindowAttachListener"
        #[cfg(any(feature = "all", all(feature = "android-view-ViewTreeObserver_OnWindowAttachListener")))]
        pub fn removeOnWindowAttachListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::ViewTreeObserver_OnWindowAttachListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewTreeObserver", java.flags == PUBLIC, .name == "removeOnWindowAttachListener", .descriptor == "(Landroid/view/ViewTreeObserver$OnWindowAttachListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewTreeObserver\0", "removeOnWindowAttachListener\0", "(Landroid/view/ViewTreeObserver$OnWindowAttachListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addOnWindowFocusChangeListener](https://developer.android.com/reference/android/view/ViewTreeObserver.html#addOnWindowFocusChangeListener(android.view.ViewTreeObserver.OnWindowFocusChangeListener))
        ///
        /// Required features: "android-view-ViewTreeObserver_OnWindowFocusChangeListener"
        #[cfg(any(feature = "all", all(feature = "android-view-ViewTreeObserver_OnWindowFocusChangeListener")))]
        pub fn addOnWindowFocusChangeListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::ViewTreeObserver_OnWindowFocusChangeListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewTreeObserver", java.flags == PUBLIC, .name == "addOnWindowFocusChangeListener", .descriptor == "(Landroid/view/ViewTreeObserver$OnWindowFocusChangeListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewTreeObserver\0", "addOnWindowFocusChangeListener\0", "(Landroid/view/ViewTreeObserver$OnWindowFocusChangeListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeOnWindowFocusChangeListener](https://developer.android.com/reference/android/view/ViewTreeObserver.html#removeOnWindowFocusChangeListener(android.view.ViewTreeObserver.OnWindowFocusChangeListener))
        ///
        /// Required features: "android-view-ViewTreeObserver_OnWindowFocusChangeListener"
        #[cfg(any(feature = "all", all(feature = "android-view-ViewTreeObserver_OnWindowFocusChangeListener")))]
        pub fn removeOnWindowFocusChangeListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::ViewTreeObserver_OnWindowFocusChangeListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewTreeObserver", java.flags == PUBLIC, .name == "removeOnWindowFocusChangeListener", .descriptor == "(Landroid/view/ViewTreeObserver$OnWindowFocusChangeListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewTreeObserver\0", "removeOnWindowFocusChangeListener\0", "(Landroid/view/ViewTreeObserver$OnWindowFocusChangeListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addOnGlobalFocusChangeListener](https://developer.android.com/reference/android/view/ViewTreeObserver.html#addOnGlobalFocusChangeListener(android.view.ViewTreeObserver.OnGlobalFocusChangeListener))
        ///
        /// Required features: "android-view-ViewTreeObserver_OnGlobalFocusChangeListener"
        #[cfg(any(feature = "all", all(feature = "android-view-ViewTreeObserver_OnGlobalFocusChangeListener")))]
        pub fn addOnGlobalFocusChangeListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::ViewTreeObserver_OnGlobalFocusChangeListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewTreeObserver", java.flags == PUBLIC, .name == "addOnGlobalFocusChangeListener", .descriptor == "(Landroid/view/ViewTreeObserver$OnGlobalFocusChangeListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewTreeObserver\0", "addOnGlobalFocusChangeListener\0", "(Landroid/view/ViewTreeObserver$OnGlobalFocusChangeListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeOnGlobalFocusChangeListener](https://developer.android.com/reference/android/view/ViewTreeObserver.html#removeOnGlobalFocusChangeListener(android.view.ViewTreeObserver.OnGlobalFocusChangeListener))
        ///
        /// Required features: "android-view-ViewTreeObserver_OnGlobalFocusChangeListener"
        #[cfg(any(feature = "all", all(feature = "android-view-ViewTreeObserver_OnGlobalFocusChangeListener")))]
        pub fn removeOnGlobalFocusChangeListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::ViewTreeObserver_OnGlobalFocusChangeListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewTreeObserver", java.flags == PUBLIC, .name == "removeOnGlobalFocusChangeListener", .descriptor == "(Landroid/view/ViewTreeObserver$OnGlobalFocusChangeListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewTreeObserver\0", "removeOnGlobalFocusChangeListener\0", "(Landroid/view/ViewTreeObserver$OnGlobalFocusChangeListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addOnGlobalLayoutListener](https://developer.android.com/reference/android/view/ViewTreeObserver.html#addOnGlobalLayoutListener(android.view.ViewTreeObserver.OnGlobalLayoutListener))
        ///
        /// Required features: "android-view-ViewTreeObserver_OnGlobalLayoutListener"
        #[cfg(any(feature = "all", all(feature = "android-view-ViewTreeObserver_OnGlobalLayoutListener")))]
        pub fn addOnGlobalLayoutListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::ViewTreeObserver_OnGlobalLayoutListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewTreeObserver", java.flags == PUBLIC, .name == "addOnGlobalLayoutListener", .descriptor == "(Landroid/view/ViewTreeObserver$OnGlobalLayoutListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewTreeObserver\0", "addOnGlobalLayoutListener\0", "(Landroid/view/ViewTreeObserver$OnGlobalLayoutListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeGlobalOnLayoutListener](https://developer.android.com/reference/android/view/ViewTreeObserver.html#removeGlobalOnLayoutListener(android.view.ViewTreeObserver.OnGlobalLayoutListener))
        ///
        /// Required features: "android-view-ViewTreeObserver_OnGlobalLayoutListener"
        #[cfg(any(feature = "all", all(feature = "android-view-ViewTreeObserver_OnGlobalLayoutListener")))]
        #[deprecated] pub fn removeGlobalOnLayoutListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::ViewTreeObserver_OnGlobalLayoutListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewTreeObserver", java.flags == PUBLIC, .name == "removeGlobalOnLayoutListener", .descriptor == "(Landroid/view/ViewTreeObserver$OnGlobalLayoutListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewTreeObserver\0", "removeGlobalOnLayoutListener\0", "(Landroid/view/ViewTreeObserver$OnGlobalLayoutListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeOnGlobalLayoutListener](https://developer.android.com/reference/android/view/ViewTreeObserver.html#removeOnGlobalLayoutListener(android.view.ViewTreeObserver.OnGlobalLayoutListener))
        ///
        /// Required features: "android-view-ViewTreeObserver_OnGlobalLayoutListener"
        #[cfg(any(feature = "all", all(feature = "android-view-ViewTreeObserver_OnGlobalLayoutListener")))]
        pub fn removeOnGlobalLayoutListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::ViewTreeObserver_OnGlobalLayoutListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewTreeObserver", java.flags == PUBLIC, .name == "removeOnGlobalLayoutListener", .descriptor == "(Landroid/view/ViewTreeObserver$OnGlobalLayoutListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewTreeObserver\0", "removeOnGlobalLayoutListener\0", "(Landroid/view/ViewTreeObserver$OnGlobalLayoutListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addOnPreDrawListener](https://developer.android.com/reference/android/view/ViewTreeObserver.html#addOnPreDrawListener(android.view.ViewTreeObserver.OnPreDrawListener))
        ///
        /// Required features: "android-view-ViewTreeObserver_OnPreDrawListener"
        #[cfg(any(feature = "all", all(feature = "android-view-ViewTreeObserver_OnPreDrawListener")))]
        pub fn addOnPreDrawListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::ViewTreeObserver_OnPreDrawListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewTreeObserver", java.flags == PUBLIC, .name == "addOnPreDrawListener", .descriptor == "(Landroid/view/ViewTreeObserver$OnPreDrawListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewTreeObserver\0", "addOnPreDrawListener\0", "(Landroid/view/ViewTreeObserver$OnPreDrawListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeOnPreDrawListener](https://developer.android.com/reference/android/view/ViewTreeObserver.html#removeOnPreDrawListener(android.view.ViewTreeObserver.OnPreDrawListener))
        ///
        /// Required features: "android-view-ViewTreeObserver_OnPreDrawListener"
        #[cfg(any(feature = "all", all(feature = "android-view-ViewTreeObserver_OnPreDrawListener")))]
        pub fn removeOnPreDrawListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::ViewTreeObserver_OnPreDrawListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewTreeObserver", java.flags == PUBLIC, .name == "removeOnPreDrawListener", .descriptor == "(Landroid/view/ViewTreeObserver$OnPreDrawListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewTreeObserver\0", "removeOnPreDrawListener\0", "(Landroid/view/ViewTreeObserver$OnPreDrawListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addOnDrawListener](https://developer.android.com/reference/android/view/ViewTreeObserver.html#addOnDrawListener(android.view.ViewTreeObserver.OnDrawListener))
        ///
        /// Required features: "android-view-ViewTreeObserver_OnDrawListener"
        #[cfg(any(feature = "all", all(feature = "android-view-ViewTreeObserver_OnDrawListener")))]
        pub fn addOnDrawListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::ViewTreeObserver_OnDrawListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewTreeObserver", java.flags == PUBLIC, .name == "addOnDrawListener", .descriptor == "(Landroid/view/ViewTreeObserver$OnDrawListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewTreeObserver\0", "addOnDrawListener\0", "(Landroid/view/ViewTreeObserver$OnDrawListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeOnDrawListener](https://developer.android.com/reference/android/view/ViewTreeObserver.html#removeOnDrawListener(android.view.ViewTreeObserver.OnDrawListener))
        ///
        /// Required features: "android-view-ViewTreeObserver_OnDrawListener"
        #[cfg(any(feature = "all", all(feature = "android-view-ViewTreeObserver_OnDrawListener")))]
        pub fn removeOnDrawListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::ViewTreeObserver_OnDrawListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewTreeObserver", java.flags == PUBLIC, .name == "removeOnDrawListener", .descriptor == "(Landroid/view/ViewTreeObserver$OnDrawListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewTreeObserver\0", "removeOnDrawListener\0", "(Landroid/view/ViewTreeObserver$OnDrawListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [registerFrameCommitCallback](https://developer.android.com/reference/android/view/ViewTreeObserver.html#registerFrameCommitCallback(java.lang.Runnable))
        ///
        /// Required features: "java-lang-Runnable"
        #[cfg(any(feature = "all", all(feature = "java-lang-Runnable")))]
        pub fn registerFrameCommitCallback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Runnable>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewTreeObserver", java.flags == PUBLIC, .name == "registerFrameCommitCallback", .descriptor == "(Ljava/lang/Runnable;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewTreeObserver\0", "registerFrameCommitCallback\0", "(Ljava/lang/Runnable;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unregisterFrameCommitCallback](https://developer.android.com/reference/android/view/ViewTreeObserver.html#unregisterFrameCommitCallback(java.lang.Runnable))
        ///
        /// Required features: "java-lang-Runnable"
        #[cfg(any(feature = "all", all(feature = "java-lang-Runnable")))]
        pub fn unregisterFrameCommitCallback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Runnable>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewTreeObserver", java.flags == PUBLIC, .name == "unregisterFrameCommitCallback", .descriptor == "(Ljava/lang/Runnable;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewTreeObserver\0", "unregisterFrameCommitCallback\0", "(Ljava/lang/Runnable;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addOnScrollChangedListener](https://developer.android.com/reference/android/view/ViewTreeObserver.html#addOnScrollChangedListener(android.view.ViewTreeObserver.OnScrollChangedListener))
        ///
        /// Required features: "android-view-ViewTreeObserver_OnScrollChangedListener"
        #[cfg(any(feature = "all", all(feature = "android-view-ViewTreeObserver_OnScrollChangedListener")))]
        pub fn addOnScrollChangedListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::ViewTreeObserver_OnScrollChangedListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewTreeObserver", java.flags == PUBLIC, .name == "addOnScrollChangedListener", .descriptor == "(Landroid/view/ViewTreeObserver$OnScrollChangedListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewTreeObserver\0", "addOnScrollChangedListener\0", "(Landroid/view/ViewTreeObserver$OnScrollChangedListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeOnScrollChangedListener](https://developer.android.com/reference/android/view/ViewTreeObserver.html#removeOnScrollChangedListener(android.view.ViewTreeObserver.OnScrollChangedListener))
        ///
        /// Required features: "android-view-ViewTreeObserver_OnScrollChangedListener"
        #[cfg(any(feature = "all", all(feature = "android-view-ViewTreeObserver_OnScrollChangedListener")))]
        pub fn removeOnScrollChangedListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::ViewTreeObserver_OnScrollChangedListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewTreeObserver", java.flags == PUBLIC, .name == "removeOnScrollChangedListener", .descriptor == "(Landroid/view/ViewTreeObserver$OnScrollChangedListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewTreeObserver\0", "removeOnScrollChangedListener\0", "(Landroid/view/ViewTreeObserver$OnScrollChangedListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addOnTouchModeChangeListener](https://developer.android.com/reference/android/view/ViewTreeObserver.html#addOnTouchModeChangeListener(android.view.ViewTreeObserver.OnTouchModeChangeListener))
        ///
        /// Required features: "android-view-ViewTreeObserver_OnTouchModeChangeListener"
        #[cfg(any(feature = "all", all(feature = "android-view-ViewTreeObserver_OnTouchModeChangeListener")))]
        pub fn addOnTouchModeChangeListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::ViewTreeObserver_OnTouchModeChangeListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewTreeObserver", java.flags == PUBLIC, .name == "addOnTouchModeChangeListener", .descriptor == "(Landroid/view/ViewTreeObserver$OnTouchModeChangeListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewTreeObserver\0", "addOnTouchModeChangeListener\0", "(Landroid/view/ViewTreeObserver$OnTouchModeChangeListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeOnTouchModeChangeListener](https://developer.android.com/reference/android/view/ViewTreeObserver.html#removeOnTouchModeChangeListener(android.view.ViewTreeObserver.OnTouchModeChangeListener))
        ///
        /// Required features: "android-view-ViewTreeObserver_OnTouchModeChangeListener"
        #[cfg(any(feature = "all", all(feature = "android-view-ViewTreeObserver_OnTouchModeChangeListener")))]
        pub fn removeOnTouchModeChangeListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::ViewTreeObserver_OnTouchModeChangeListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewTreeObserver", java.flags == PUBLIC, .name == "removeOnTouchModeChangeListener", .descriptor == "(Landroid/view/ViewTreeObserver$OnTouchModeChangeListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewTreeObserver\0", "removeOnTouchModeChangeListener\0", "(Landroid/view/ViewTreeObserver$OnTouchModeChangeListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addOnSystemGestureExclusionRectsChangedListener](https://developer.android.com/reference/android/view/ViewTreeObserver.html#addOnSystemGestureExclusionRectsChangedListener(java.util.function.Consumer))
        ///
        /// Required features: "java-util-function-Consumer"
        #[cfg(any(feature = "all", all(feature = "java-util-function-Consumer")))]
        pub fn addOnSystemGestureExclusionRectsChangedListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Consumer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewTreeObserver", java.flags == PUBLIC, .name == "addOnSystemGestureExclusionRectsChangedListener", .descriptor == "(Ljava/util/function/Consumer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewTreeObserver\0", "addOnSystemGestureExclusionRectsChangedListener\0", "(Ljava/util/function/Consumer;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeOnSystemGestureExclusionRectsChangedListener](https://developer.android.com/reference/android/view/ViewTreeObserver.html#removeOnSystemGestureExclusionRectsChangedListener(java.util.function.Consumer))
        ///
        /// Required features: "java-util-function-Consumer"
        #[cfg(any(feature = "all", all(feature = "java-util-function-Consumer")))]
        pub fn removeOnSystemGestureExclusionRectsChangedListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::function::Consumer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewTreeObserver", java.flags == PUBLIC, .name == "removeOnSystemGestureExclusionRectsChangedListener", .descriptor == "(Ljava/util/function/Consumer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewTreeObserver\0", "removeOnSystemGestureExclusionRectsChangedListener\0", "(Ljava/util/function/Consumer;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isAlive](https://developer.android.com/reference/android/view/ViewTreeObserver.html#isAlive())
        pub fn isAlive<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewTreeObserver", java.flags == PUBLIC, .name == "isAlive", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewTreeObserver\0", "isAlive\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dispatchOnGlobalLayout](https://developer.android.com/reference/android/view/ViewTreeObserver.html#dispatchOnGlobalLayout())
        pub fn dispatchOnGlobalLayout<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewTreeObserver", java.flags == PUBLIC, .name == "dispatchOnGlobalLayout", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewTreeObserver\0", "dispatchOnGlobalLayout\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dispatchOnPreDraw](https://developer.android.com/reference/android/view/ViewTreeObserver.html#dispatchOnPreDraw())
        pub fn dispatchOnPreDraw<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewTreeObserver", java.flags == PUBLIC, .name == "dispatchOnPreDraw", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewTreeObserver\0", "dispatchOnPreDraw\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dispatchOnDraw](https://developer.android.com/reference/android/view/ViewTreeObserver.html#dispatchOnDraw())
        pub fn dispatchOnDraw<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewTreeObserver", java.flags == PUBLIC, .name == "dispatchOnDraw", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewTreeObserver\0", "dispatchOnDraw\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
