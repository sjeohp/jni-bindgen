// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-view-Display"))]
__jni_bindgen! {
    /// public final class [Display](https://developer.android.com/reference/android/view/Display.html)
    ///
    /// Required feature: android-view-Display
    public final class Display ("android/view/Display") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [Display](https://developer.android.com/reference/android/view/Display.html#Display())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::view::Display>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/Display", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Display\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getDisplayId](https://developer.android.com/reference/android/view/Display.html#getDisplayId())
        pub fn getDisplayId<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Display", java.flags == PUBLIC, .name == "getDisplayId", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Display\0", "getDisplayId\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isValid](https://developer.android.com/reference/android/view/Display.html#isValid())
        pub fn isValid<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Display", java.flags == PUBLIC, .name == "isValid", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Display\0", "isValid\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFlags](https://developer.android.com/reference/android/view/Display.html#getFlags())
        pub fn getFlags<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Display", java.flags == PUBLIC, .name == "getFlags", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Display\0", "getFlags\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getName](https://developer.android.com/reference/android/view/Display.html#getName())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getName<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Display", java.flags == PUBLIC, .name == "getName", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Display\0", "getName\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSize](https://developer.android.com/reference/android/view/Display.html#getSize(android.graphics.Point))
        ///
        /// Required features: "android-graphics-Point"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Point")))]
        pub fn getSize<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Point>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Display", java.flags == PUBLIC, .name == "getSize", .descriptor == "(Landroid/graphics/Point;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Display\0", "getSize\0", "(Landroid/graphics/Point;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRectSize](https://developer.android.com/reference/android/view/Display.html#getRectSize(android.graphics.Rect))
        ///
        /// Required features: "android-graphics-Rect"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Rect")))]
        pub fn getRectSize<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Rect>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Display", java.flags == PUBLIC, .name == "getRectSize", .descriptor == "(Landroid/graphics/Rect;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Display\0", "getRectSize\0", "(Landroid/graphics/Rect;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCurrentSizeRange](https://developer.android.com/reference/android/view/Display.html#getCurrentSizeRange(android.graphics.Point,%20android.graphics.Point))
        ///
        /// Required features: "android-graphics-Point"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Point")))]
        pub fn getCurrentSizeRange<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Point>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Point>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Display", java.flags == PUBLIC, .name == "getCurrentSizeRange", .descriptor == "(Landroid/graphics/Point;Landroid/graphics/Point;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Display\0", "getCurrentSizeRange\0", "(Landroid/graphics/Point;Landroid/graphics/Point;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getWidth](https://developer.android.com/reference/android/view/Display.html#getWidth())
        #[deprecated] pub fn getWidth<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Display", java.flags == PUBLIC, .name == "getWidth", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Display\0", "getWidth\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getHeight](https://developer.android.com/reference/android/view/Display.html#getHeight())
        #[deprecated] pub fn getHeight<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Display", java.flags == PUBLIC, .name == "getHeight", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Display\0", "getHeight\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRotation](https://developer.android.com/reference/android/view/Display.html#getRotation())
        pub fn getRotation<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Display", java.flags == PUBLIC, .name == "getRotation", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Display\0", "getRotation\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getOrientation](https://developer.android.com/reference/android/view/Display.html#getOrientation())
        #[deprecated] pub fn getOrientation<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Display", java.flags == PUBLIC, .name == "getOrientation", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Display\0", "getOrientation\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCutout](https://developer.android.com/reference/android/view/Display.html#getCutout())
        ///
        /// Required features: "android-view-DisplayCutout"
        #[cfg(any(feature = "all", all(feature = "android-view-DisplayCutout")))]
        pub fn getCutout<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::DisplayCutout>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Display", java.flags == PUBLIC, .name == "getCutout", .descriptor == "()Landroid/view/DisplayCutout;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Display\0", "getCutout\0", "()Landroid/view/DisplayCutout;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPixelFormat](https://developer.android.com/reference/android/view/Display.html#getPixelFormat())
        #[deprecated] pub fn getPixelFormat<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Display", java.flags == PUBLIC, .name == "getPixelFormat", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Display\0", "getPixelFormat\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRefreshRate](https://developer.android.com/reference/android/view/Display.html#getRefreshRate())
        pub fn getRefreshRate<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Display", java.flags == PUBLIC, .name == "getRefreshRate", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Display\0", "getRefreshRate\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSupportedRefreshRates](https://developer.android.com/reference/android/view/Display.html#getSupportedRefreshRates())
        #[deprecated] pub fn getSupportedRefreshRates<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::FloatArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Display", java.flags == PUBLIC, .name == "getSupportedRefreshRates", .descriptor == "()[F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Display\0", "getSupportedRefreshRates\0", "()[F\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMode](https://developer.android.com/reference/android/view/Display.html#getMode())
        ///
        /// Required features: "android-view-Display_Mode"
        #[cfg(any(feature = "all", all(feature = "android-view-Display_Mode")))]
        pub fn getMode<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::Display_Mode>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Display", java.flags == PUBLIC, .name == "getMode", .descriptor == "()Landroid/view/Display$Mode;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Display\0", "getMode\0", "()Landroid/view/Display$Mode;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSupportedModes](https://developer.android.com/reference/android/view/Display.html#getSupportedModes())
        ///
        /// Required features: "android-view-Display_Mode"
        #[cfg(any(feature = "all", all(feature = "android-view-Display_Mode")))]
        pub fn getSupportedModes<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::android::view::Display_Mode, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Display", java.flags == PUBLIC, .name == "getSupportedModes", .descriptor == "()[Landroid/view/Display$Mode;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Display\0", "getSupportedModes\0", "()[Landroid/view/Display$Mode;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getHdrCapabilities](https://developer.android.com/reference/android/view/Display.html#getHdrCapabilities())
        ///
        /// Required features: "android-view-Display_HdrCapabilities"
        #[cfg(any(feature = "all", all(feature = "android-view-Display_HdrCapabilities")))]
        pub fn getHdrCapabilities<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::Display_HdrCapabilities>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Display", java.flags == PUBLIC, .name == "getHdrCapabilities", .descriptor == "()Landroid/view/Display$HdrCapabilities;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Display\0", "getHdrCapabilities\0", "()Landroid/view/Display$HdrCapabilities;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isHdr](https://developer.android.com/reference/android/view/Display.html#isHdr())
        pub fn isHdr<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Display", java.flags == PUBLIC, .name == "isHdr", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Display\0", "isHdr\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isWideColorGamut](https://developer.android.com/reference/android/view/Display.html#isWideColorGamut())
        pub fn isWideColorGamut<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Display", java.flags == PUBLIC, .name == "isWideColorGamut", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Display\0", "isWideColorGamut\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPreferredWideGamutColorSpace](https://developer.android.com/reference/android/view/Display.html#getPreferredWideGamutColorSpace())
        ///
        /// Required features: "android-graphics-ColorSpace"
        #[cfg(any(feature = "all", all(feature = "android-graphics-ColorSpace")))]
        pub fn getPreferredWideGamutColorSpace<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::ColorSpace>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Display", java.flags == PUBLIC, .name == "getPreferredWideGamutColorSpace", .descriptor == "()Landroid/graphics/ColorSpace;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Display\0", "getPreferredWideGamutColorSpace\0", "()Landroid/graphics/ColorSpace;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAppVsyncOffsetNanos](https://developer.android.com/reference/android/view/Display.html#getAppVsyncOffsetNanos())
        pub fn getAppVsyncOffsetNanos<'env>(&'env self) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Display", java.flags == PUBLIC, .name == "getAppVsyncOffsetNanos", .descriptor == "()J"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Display\0", "getAppVsyncOffsetNanos\0", "()J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPresentationDeadlineNanos](https://developer.android.com/reference/android/view/Display.html#getPresentationDeadlineNanos())
        pub fn getPresentationDeadlineNanos<'env>(&'env self) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Display", java.flags == PUBLIC, .name == "getPresentationDeadlineNanos", .descriptor == "()J"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Display\0", "getPresentationDeadlineNanos\0", "()J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMetrics](https://developer.android.com/reference/android/view/Display.html#getMetrics(android.util.DisplayMetrics))
        ///
        /// Required features: "android-util-DisplayMetrics"
        #[cfg(any(feature = "all", all(feature = "android-util-DisplayMetrics")))]
        pub fn getMetrics<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::util::DisplayMetrics>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Display", java.flags == PUBLIC, .name == "getMetrics", .descriptor == "(Landroid/util/DisplayMetrics;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Display\0", "getMetrics\0", "(Landroid/util/DisplayMetrics;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRealSize](https://developer.android.com/reference/android/view/Display.html#getRealSize(android.graphics.Point))
        ///
        /// Required features: "android-graphics-Point"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Point")))]
        pub fn getRealSize<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Point>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Display", java.flags == PUBLIC, .name == "getRealSize", .descriptor == "(Landroid/graphics/Point;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Display\0", "getRealSize\0", "(Landroid/graphics/Point;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRealMetrics](https://developer.android.com/reference/android/view/Display.html#getRealMetrics(android.util.DisplayMetrics))
        ///
        /// Required features: "android-util-DisplayMetrics"
        #[cfg(any(feature = "all", all(feature = "android-util-DisplayMetrics")))]
        pub fn getRealMetrics<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::util::DisplayMetrics>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Display", java.flags == PUBLIC, .name == "getRealMetrics", .descriptor == "(Landroid/util/DisplayMetrics;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Display\0", "getRealMetrics\0", "(Landroid/util/DisplayMetrics;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getState](https://developer.android.com/reference/android/view/Display.html#getState())
        pub fn getState<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Display", java.flags == PUBLIC, .name == "getState", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Display\0", "getState\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/android/view/Display.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Display", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Display\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [DEFAULT_DISPLAY](https://developer.android.com/reference/android/view/Display.html#DEFAULT_DISPLAY)
        pub const DEFAULT_DISPLAY : i32 = 0;

        /// public static final [FLAG_PRESENTATION](https://developer.android.com/reference/android/view/Display.html#FLAG_PRESENTATION)
        pub const FLAG_PRESENTATION : i32 = 8;

        /// public static final [FLAG_PRIVATE](https://developer.android.com/reference/android/view/Display.html#FLAG_PRIVATE)
        pub const FLAG_PRIVATE : i32 = 4;

        /// public static final [FLAG_ROUND](https://developer.android.com/reference/android/view/Display.html#FLAG_ROUND)
        pub const FLAG_ROUND : i32 = 16;

        /// public static final [FLAG_SECURE](https://developer.android.com/reference/android/view/Display.html#FLAG_SECURE)
        pub const FLAG_SECURE : i32 = 2;

        /// public static final [FLAG_SUPPORTS_PROTECTED_BUFFERS](https://developer.android.com/reference/android/view/Display.html#FLAG_SUPPORTS_PROTECTED_BUFFERS)
        pub const FLAG_SUPPORTS_PROTECTED_BUFFERS : i32 = 1;

        /// public static final [INVALID_DISPLAY](https://developer.android.com/reference/android/view/Display.html#INVALID_DISPLAY)
        pub const INVALID_DISPLAY : i32 = -1;

        /// public static final [STATE_DOZE](https://developer.android.com/reference/android/view/Display.html#STATE_DOZE)
        pub const STATE_DOZE : i32 = 3;

        /// public static final [STATE_DOZE_SUSPEND](https://developer.android.com/reference/android/view/Display.html#STATE_DOZE_SUSPEND)
        pub const STATE_DOZE_SUSPEND : i32 = 4;

        /// public static final [STATE_OFF](https://developer.android.com/reference/android/view/Display.html#STATE_OFF)
        pub const STATE_OFF : i32 = 1;

        /// public static final [STATE_ON](https://developer.android.com/reference/android/view/Display.html#STATE_ON)
        pub const STATE_ON : i32 = 2;

        /// public static final [STATE_ON_SUSPEND](https://developer.android.com/reference/android/view/Display.html#STATE_ON_SUSPEND)
        pub const STATE_ON_SUSPEND : i32 = 6;

        /// public static final [STATE_UNKNOWN](https://developer.android.com/reference/android/view/Display.html#STATE_UNKNOWN)
        pub const STATE_UNKNOWN : i32 = 0;

        /// public static final [STATE_VR](https://developer.android.com/reference/android/view/Display.html#STATE_VR)
        pub const STATE_VR : i32 = 5;
    }
}
