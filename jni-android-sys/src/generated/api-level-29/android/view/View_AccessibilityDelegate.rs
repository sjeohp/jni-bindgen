// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-view-View_AccessibilityDelegate"))]
__jni_bindgen! {
    /// public class [View.AccessibilityDelegate](https://developer.android.com/reference/android/view/View.AccessibilityDelegate.html)
    ///
    /// Required feature: android-view-View_AccessibilityDelegate
    public class View_AccessibilityDelegate ("android/view/View$AccessibilityDelegate") extends crate::java::lang::Object {

        /// [AccessibilityDelegate](https://developer.android.com/reference/android/view/View.AccessibilityDelegate.html#AccessibilityDelegate())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::view::View_AccessibilityDelegate>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View$AccessibilityDelegate", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View$AccessibilityDelegate\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [sendAccessibilityEvent](https://developer.android.com/reference/android/view/View.AccessibilityDelegate.html#sendAccessibilityEvent(android.view.View,%20int))
        ///
        /// Required features: "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-view-View")))]
        pub fn sendAccessibilityEvent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View$AccessibilityDelegate", java.flags == PUBLIC, .name == "sendAccessibilityEvent", .descriptor == "(Landroid/view/View;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View$AccessibilityDelegate\0", "sendAccessibilityEvent\0", "(Landroid/view/View;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [performAccessibilityAction](https://developer.android.com/reference/android/view/View.AccessibilityDelegate.html#performAccessibilityAction(android.view.View,%20int,%20android.os.Bundle))
        ///
        /// Required features: "android-os-Bundle", "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-os-Bundle", feature = "android-view-View")))]
        pub fn performAccessibilityAction<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View$AccessibilityDelegate", java.flags == PUBLIC, .name == "performAccessibilityAction", .descriptor == "(Landroid/view/View;ILandroid/os/Bundle;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View$AccessibilityDelegate\0", "performAccessibilityAction\0", "(Landroid/view/View;ILandroid/os/Bundle;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [sendAccessibilityEventUnchecked](https://developer.android.com/reference/android/view/View.AccessibilityDelegate.html#sendAccessibilityEventUnchecked(android.view.View,%20android.view.accessibility.AccessibilityEvent))
        ///
        /// Required features: "android-view-View", "android-view-accessibility-AccessibilityEvent"
        #[cfg(any(feature = "all", all(feature = "android-view-View", feature = "android-view-accessibility-AccessibilityEvent")))]
        pub fn sendAccessibilityEventUnchecked<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::accessibility::AccessibilityEvent>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View$AccessibilityDelegate", java.flags == PUBLIC, .name == "sendAccessibilityEventUnchecked", .descriptor == "(Landroid/view/View;Landroid/view/accessibility/AccessibilityEvent;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View$AccessibilityDelegate\0", "sendAccessibilityEventUnchecked\0", "(Landroid/view/View;Landroid/view/accessibility/AccessibilityEvent;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [dispatchPopulateAccessibilityEvent](https://developer.android.com/reference/android/view/View.AccessibilityDelegate.html#dispatchPopulateAccessibilityEvent(android.view.View,%20android.view.accessibility.AccessibilityEvent))
        ///
        /// Required features: "android-view-View", "android-view-accessibility-AccessibilityEvent"
        #[cfg(any(feature = "all", all(feature = "android-view-View", feature = "android-view-accessibility-AccessibilityEvent")))]
        pub fn dispatchPopulateAccessibilityEvent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::accessibility::AccessibilityEvent>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View$AccessibilityDelegate", java.flags == PUBLIC, .name == "dispatchPopulateAccessibilityEvent", .descriptor == "(Landroid/view/View;Landroid/view/accessibility/AccessibilityEvent;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View$AccessibilityDelegate\0", "dispatchPopulateAccessibilityEvent\0", "(Landroid/view/View;Landroid/view/accessibility/AccessibilityEvent;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onPopulateAccessibilityEvent](https://developer.android.com/reference/android/view/View.AccessibilityDelegate.html#onPopulateAccessibilityEvent(android.view.View,%20android.view.accessibility.AccessibilityEvent))
        ///
        /// Required features: "android-view-View", "android-view-accessibility-AccessibilityEvent"
        #[cfg(any(feature = "all", all(feature = "android-view-View", feature = "android-view-accessibility-AccessibilityEvent")))]
        pub fn onPopulateAccessibilityEvent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::accessibility::AccessibilityEvent>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View$AccessibilityDelegate", java.flags == PUBLIC, .name == "onPopulateAccessibilityEvent", .descriptor == "(Landroid/view/View;Landroid/view/accessibility/AccessibilityEvent;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View$AccessibilityDelegate\0", "onPopulateAccessibilityEvent\0", "(Landroid/view/View;Landroid/view/accessibility/AccessibilityEvent;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onInitializeAccessibilityEvent](https://developer.android.com/reference/android/view/View.AccessibilityDelegate.html#onInitializeAccessibilityEvent(android.view.View,%20android.view.accessibility.AccessibilityEvent))
        ///
        /// Required features: "android-view-View", "android-view-accessibility-AccessibilityEvent"
        #[cfg(any(feature = "all", all(feature = "android-view-View", feature = "android-view-accessibility-AccessibilityEvent")))]
        pub fn onInitializeAccessibilityEvent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::accessibility::AccessibilityEvent>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View$AccessibilityDelegate", java.flags == PUBLIC, .name == "onInitializeAccessibilityEvent", .descriptor == "(Landroid/view/View;Landroid/view/accessibility/AccessibilityEvent;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View$AccessibilityDelegate\0", "onInitializeAccessibilityEvent\0", "(Landroid/view/View;Landroid/view/accessibility/AccessibilityEvent;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onInitializeAccessibilityNodeInfo](https://developer.android.com/reference/android/view/View.AccessibilityDelegate.html#onInitializeAccessibilityNodeInfo(android.view.View,%20android.view.accessibility.AccessibilityNodeInfo))
        ///
        /// Required features: "android-view-View", "android-view-accessibility-AccessibilityNodeInfo"
        #[cfg(any(feature = "all", all(feature = "android-view-View", feature = "android-view-accessibility-AccessibilityNodeInfo")))]
        pub fn onInitializeAccessibilityNodeInfo<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::accessibility::AccessibilityNodeInfo>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View$AccessibilityDelegate", java.flags == PUBLIC, .name == "onInitializeAccessibilityNodeInfo", .descriptor == "(Landroid/view/View;Landroid/view/accessibility/AccessibilityNodeInfo;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View$AccessibilityDelegate\0", "onInitializeAccessibilityNodeInfo\0", "(Landroid/view/View;Landroid/view/accessibility/AccessibilityNodeInfo;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addExtraDataToAccessibilityNodeInfo](https://developer.android.com/reference/android/view/View.AccessibilityDelegate.html#addExtraDataToAccessibilityNodeInfo(android.view.View,%20android.view.accessibility.AccessibilityNodeInfo,%20java.lang.String,%20android.os.Bundle))
        ///
        /// Required features: "android-os-Bundle", "android-view-View", "android-view-accessibility-AccessibilityNodeInfo", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-os-Bundle", feature = "android-view-View", feature = "android-view-accessibility-AccessibilityNodeInfo", feature = "java-lang-String")))]
        pub fn addExtraDataToAccessibilityNodeInfo<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::accessibility::AccessibilityNodeInfo>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View$AccessibilityDelegate", java.flags == PUBLIC, .name == "addExtraDataToAccessibilityNodeInfo", .descriptor == "(Landroid/view/View;Landroid/view/accessibility/AccessibilityNodeInfo;Ljava/lang/String;Landroid/os/Bundle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View$AccessibilityDelegate\0", "addExtraDataToAccessibilityNodeInfo\0", "(Landroid/view/View;Landroid/view/accessibility/AccessibilityNodeInfo;Ljava/lang/String;Landroid/os/Bundle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onRequestSendAccessibilityEvent](https://developer.android.com/reference/android/view/View.AccessibilityDelegate.html#onRequestSendAccessibilityEvent(android.view.ViewGroup,%20android.view.View,%20android.view.accessibility.AccessibilityEvent))
        ///
        /// Required features: "android-view-View", "android-view-ViewGroup", "android-view-accessibility-AccessibilityEvent"
        #[cfg(any(feature = "all", all(feature = "android-view-View", feature = "android-view-ViewGroup", feature = "android-view-accessibility-AccessibilityEvent")))]
        pub fn onRequestSendAccessibilityEvent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::ViewGroup>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::accessibility::AccessibilityEvent>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View$AccessibilityDelegate", java.flags == PUBLIC, .name == "onRequestSendAccessibilityEvent", .descriptor == "(Landroid/view/ViewGroup;Landroid/view/View;Landroid/view/accessibility/AccessibilityEvent;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View$AccessibilityDelegate\0", "onRequestSendAccessibilityEvent\0", "(Landroid/view/ViewGroup;Landroid/view/View;Landroid/view/accessibility/AccessibilityEvent;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAccessibilityNodeProvider](https://developer.android.com/reference/android/view/View.AccessibilityDelegate.html#getAccessibilityNodeProvider(android.view.View))
        ///
        /// Required features: "android-view-View", "android-view-accessibility-AccessibilityNodeProvider"
        #[cfg(any(feature = "all", all(feature = "android-view-View", feature = "android-view-accessibility-AccessibilityNodeProvider")))]
        pub fn getAccessibilityNodeProvider<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::accessibility::AccessibilityNodeProvider>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/View$AccessibilityDelegate", java.flags == PUBLIC, .name == "getAccessibilityNodeProvider", .descriptor == "(Landroid/view/View;)Landroid/view/accessibility/AccessibilityNodeProvider;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/View$AccessibilityDelegate\0", "getAccessibilityNodeProvider\0", "(Landroid/view/View;)Landroid/view/accessibility/AccessibilityNodeProvider;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
