// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-view-Menu"))]
__jni_bindgen! {
    /// public interface [Menu](https://developer.android.com/reference/android/view/Menu.html)
    ///
    /// Required feature: android-view-Menu
    public interface Menu ("android/view/Menu") extends crate::java::lang::Object {

        /// [add](https://developer.android.com/reference/android/view/Menu.html#add(java.lang.CharSequence))
        ///
        /// Required features: "android-view-MenuItem", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-view-MenuItem", feature = "java-lang-CharSequence")))]
        pub fn add_CharSequence<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::MenuItem>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Menu", java.flags == PUBLIC | ABSTRACT, .name == "add", .descriptor == "(Ljava/lang/CharSequence;)Landroid/view/MenuItem;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Menu\0", "add\0", "(Ljava/lang/CharSequence;)Landroid/view/MenuItem;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [add](https://developer.android.com/reference/android/view/Menu.html#add(int))
        ///
        /// Required features: "android-view-MenuItem"
        #[cfg(any(feature = "all", all(feature = "android-view-MenuItem")))]
        pub fn add_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::MenuItem>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Menu", java.flags == PUBLIC | ABSTRACT, .name == "add", .descriptor == "(I)Landroid/view/MenuItem;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Menu\0", "add\0", "(I)Landroid/view/MenuItem;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [add](https://developer.android.com/reference/android/view/Menu.html#add(int,%20int,%20int,%20java.lang.CharSequence))
        ///
        /// Required features: "android-view-MenuItem", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-view-MenuItem", feature = "java-lang-CharSequence")))]
        pub fn add_int_int_int_CharSequence<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::MenuItem>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Menu", java.flags == PUBLIC | ABSTRACT, .name == "add", .descriptor == "(IIILjava/lang/CharSequence;)Landroid/view/MenuItem;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Menu\0", "add\0", "(IIILjava/lang/CharSequence;)Landroid/view/MenuItem;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [add](https://developer.android.com/reference/android/view/Menu.html#add(int,%20int,%20int,%20int))
        ///
        /// Required features: "android-view-MenuItem"
        #[cfg(any(feature = "all", all(feature = "android-view-MenuItem")))]
        pub fn add_int_int_int_int<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::MenuItem>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Menu", java.flags == PUBLIC | ABSTRACT, .name == "add", .descriptor == "(IIII)Landroid/view/MenuItem;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Menu\0", "add\0", "(IIII)Landroid/view/MenuItem;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addSubMenu](https://developer.android.com/reference/android/view/Menu.html#addSubMenu(java.lang.CharSequence))
        ///
        /// Required features: "android-view-SubMenu", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-view-SubMenu", feature = "java-lang-CharSequence")))]
        pub fn addSubMenu_CharSequence<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::SubMenu>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Menu", java.flags == PUBLIC | ABSTRACT, .name == "addSubMenu", .descriptor == "(Ljava/lang/CharSequence;)Landroid/view/SubMenu;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Menu\0", "addSubMenu\0", "(Ljava/lang/CharSequence;)Landroid/view/SubMenu;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addSubMenu](https://developer.android.com/reference/android/view/Menu.html#addSubMenu(int))
        ///
        /// Required features: "android-view-SubMenu"
        #[cfg(any(feature = "all", all(feature = "android-view-SubMenu")))]
        pub fn addSubMenu_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::SubMenu>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Menu", java.flags == PUBLIC | ABSTRACT, .name == "addSubMenu", .descriptor == "(I)Landroid/view/SubMenu;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Menu\0", "addSubMenu\0", "(I)Landroid/view/SubMenu;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addSubMenu](https://developer.android.com/reference/android/view/Menu.html#addSubMenu(int,%20int,%20int,%20java.lang.CharSequence))
        ///
        /// Required features: "android-view-SubMenu", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-view-SubMenu", feature = "java-lang-CharSequence")))]
        pub fn addSubMenu_int_int_int_CharSequence<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::SubMenu>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Menu", java.flags == PUBLIC | ABSTRACT, .name == "addSubMenu", .descriptor == "(IIILjava/lang/CharSequence;)Landroid/view/SubMenu;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Menu\0", "addSubMenu\0", "(IIILjava/lang/CharSequence;)Landroid/view/SubMenu;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addSubMenu](https://developer.android.com/reference/android/view/Menu.html#addSubMenu(int,%20int,%20int,%20int))
        ///
        /// Required features: "android-view-SubMenu"
        #[cfg(any(feature = "all", all(feature = "android-view-SubMenu")))]
        pub fn addSubMenu_int_int_int_int<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::SubMenu>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Menu", java.flags == PUBLIC | ABSTRACT, .name == "addSubMenu", .descriptor == "(IIII)Landroid/view/SubMenu;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Menu\0", "addSubMenu\0", "(IIII)Landroid/view/SubMenu;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addIntentOptions](https://developer.android.com/reference/android/view/Menu.html#addIntentOptions(int,%20int,%20int,%20android.content.ComponentName,%20android.content.Intent%5B%5D,%20android.content.Intent,%20int,%20android.view.MenuItem%5B%5D))
        ///
        /// Required features: "android-content-ComponentName", "android-content-Intent", "android-view-MenuItem"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName", feature = "android-content-Intent", feature = "android-view-MenuItem")))]
        pub fn addIntentOptions<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::ComponentName>>, arg4: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::android::content::Intent, crate::java::lang::Throwable>>>, arg5: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>, arg6: i32, arg7: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::android::view::MenuItem, crate::java::lang::Throwable>>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Menu", java.flags == PUBLIC | ABSTRACT, .name == "addIntentOptions", .descriptor == "(IIILandroid/content/ComponentName;[Landroid/content/Intent;Landroid/content/Intent;I[Landroid/view/MenuItem;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3.into()), __jni_bindgen::AsJValue::as_jvalue(&arg4.into()), __jni_bindgen::AsJValue::as_jvalue(&arg5.into()), __jni_bindgen::AsJValue::as_jvalue(&arg6), __jni_bindgen::AsJValue::as_jvalue(&arg7.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Menu\0", "addIntentOptions\0", "(IIILandroid/content/ComponentName;[Landroid/content/Intent;Landroid/content/Intent;I[Landroid/view/MenuItem;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeItem](https://developer.android.com/reference/android/view/Menu.html#removeItem(int))
        pub fn removeItem<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Menu", java.flags == PUBLIC | ABSTRACT, .name == "removeItem", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Menu\0", "removeItem\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeGroup](https://developer.android.com/reference/android/view/Menu.html#removeGroup(int))
        pub fn removeGroup<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Menu", java.flags == PUBLIC | ABSTRACT, .name == "removeGroup", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Menu\0", "removeGroup\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clear](https://developer.android.com/reference/android/view/Menu.html#clear())
        pub fn clear<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Menu", java.flags == PUBLIC | ABSTRACT, .name == "clear", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Menu\0", "clear\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setGroupCheckable](https://developer.android.com/reference/android/view/Menu.html#setGroupCheckable(int,%20boolean,%20boolean))
        pub fn setGroupCheckable<'env>(&'env self, arg0: i32, arg1: bool, arg2: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Menu", java.flags == PUBLIC | ABSTRACT, .name == "setGroupCheckable", .descriptor == "(IZZ)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Menu\0", "setGroupCheckable\0", "(IZZ)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setGroupVisible](https://developer.android.com/reference/android/view/Menu.html#setGroupVisible(int,%20boolean))
        pub fn setGroupVisible<'env>(&'env self, arg0: i32, arg1: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Menu", java.flags == PUBLIC | ABSTRACT, .name == "setGroupVisible", .descriptor == "(IZ)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Menu\0", "setGroupVisible\0", "(IZ)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setGroupEnabled](https://developer.android.com/reference/android/view/Menu.html#setGroupEnabled(int,%20boolean))
        pub fn setGroupEnabled<'env>(&'env self, arg0: i32, arg1: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Menu", java.flags == PUBLIC | ABSTRACT, .name == "setGroupEnabled", .descriptor == "(IZ)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Menu\0", "setGroupEnabled\0", "(IZ)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasVisibleItems](https://developer.android.com/reference/android/view/Menu.html#hasVisibleItems())
        pub fn hasVisibleItems<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Menu", java.flags == PUBLIC | ABSTRACT, .name == "hasVisibleItems", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Menu\0", "hasVisibleItems\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [findItem](https://developer.android.com/reference/android/view/Menu.html#findItem(int))
        ///
        /// Required features: "android-view-MenuItem"
        #[cfg(any(feature = "all", all(feature = "android-view-MenuItem")))]
        pub fn findItem<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::MenuItem>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Menu", java.flags == PUBLIC | ABSTRACT, .name == "findItem", .descriptor == "(I)Landroid/view/MenuItem;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Menu\0", "findItem\0", "(I)Landroid/view/MenuItem;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [size](https://developer.android.com/reference/android/view/Menu.html#size())
        pub fn size<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Menu", java.flags == PUBLIC | ABSTRACT, .name == "size", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Menu\0", "size\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getItem](https://developer.android.com/reference/android/view/Menu.html#getItem(int))
        ///
        /// Required features: "android-view-MenuItem"
        #[cfg(any(feature = "all", all(feature = "android-view-MenuItem")))]
        pub fn getItem<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::MenuItem>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Menu", java.flags == PUBLIC | ABSTRACT, .name == "getItem", .descriptor == "(I)Landroid/view/MenuItem;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Menu\0", "getItem\0", "(I)Landroid/view/MenuItem;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [close](https://developer.android.com/reference/android/view/Menu.html#close())
        pub fn close<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Menu", java.flags == PUBLIC | ABSTRACT, .name == "close", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Menu\0", "close\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [performShortcut](https://developer.android.com/reference/android/view/Menu.html#performShortcut(int,%20android.view.KeyEvent,%20int))
        ///
        /// Required features: "android-view-KeyEvent"
        #[cfg(any(feature = "all", all(feature = "android-view-KeyEvent")))]
        pub fn performShortcut<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::KeyEvent>>, arg2: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Menu", java.flags == PUBLIC | ABSTRACT, .name == "performShortcut", .descriptor == "(ILandroid/view/KeyEvent;I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Menu\0", "performShortcut\0", "(ILandroid/view/KeyEvent;I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isShortcutKey](https://developer.android.com/reference/android/view/Menu.html#isShortcutKey(int,%20android.view.KeyEvent))
        ///
        /// Required features: "android-view-KeyEvent"
        #[cfg(any(feature = "all", all(feature = "android-view-KeyEvent")))]
        pub fn isShortcutKey<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::KeyEvent>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Menu", java.flags == PUBLIC | ABSTRACT, .name == "isShortcutKey", .descriptor == "(ILandroid/view/KeyEvent;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Menu\0", "isShortcutKey\0", "(ILandroid/view/KeyEvent;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [performIdentifierAction](https://developer.android.com/reference/android/view/Menu.html#performIdentifierAction(int,%20int))
        pub fn performIdentifierAction<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Menu", java.flags == PUBLIC | ABSTRACT, .name == "performIdentifierAction", .descriptor == "(II)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Menu\0", "performIdentifierAction\0", "(II)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setQwertyMode](https://developer.android.com/reference/android/view/Menu.html#setQwertyMode(boolean))
        pub fn setQwertyMode<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Menu", java.flags == PUBLIC | ABSTRACT, .name == "setQwertyMode", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Menu\0", "setQwertyMode\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setGroupDividerEnabled](https://developer.android.com/reference/android/view/Menu.html#setGroupDividerEnabled(boolean))
        pub fn setGroupDividerEnabled<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Menu", java.flags == PUBLIC, .name == "setGroupDividerEnabled", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Menu\0", "setGroupDividerEnabled\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [CATEGORY_ALTERNATIVE](https://developer.android.com/reference/android/view/Menu.html#CATEGORY_ALTERNATIVE)
        pub const CATEGORY_ALTERNATIVE : i32 = 262144;

        /// public static final [CATEGORY_CONTAINER](https://developer.android.com/reference/android/view/Menu.html#CATEGORY_CONTAINER)
        pub const CATEGORY_CONTAINER : i32 = 65536;

        /// public static final [CATEGORY_SECONDARY](https://developer.android.com/reference/android/view/Menu.html#CATEGORY_SECONDARY)
        pub const CATEGORY_SECONDARY : i32 = 196608;

        /// public static final [CATEGORY_SYSTEM](https://developer.android.com/reference/android/view/Menu.html#CATEGORY_SYSTEM)
        pub const CATEGORY_SYSTEM : i32 = 131072;

        /// public static final [FIRST](https://developer.android.com/reference/android/view/Menu.html#FIRST)
        pub const FIRST : i32 = 1;

        /// public static final [FLAG_ALWAYS_PERFORM_CLOSE](https://developer.android.com/reference/android/view/Menu.html#FLAG_ALWAYS_PERFORM_CLOSE)
        pub const FLAG_ALWAYS_PERFORM_CLOSE : i32 = 2;

        /// public static final [FLAG_APPEND_TO_GROUP](https://developer.android.com/reference/android/view/Menu.html#FLAG_APPEND_TO_GROUP)
        pub const FLAG_APPEND_TO_GROUP : i32 = 1;

        /// public static final [FLAG_PERFORM_NO_CLOSE](https://developer.android.com/reference/android/view/Menu.html#FLAG_PERFORM_NO_CLOSE)
        pub const FLAG_PERFORM_NO_CLOSE : i32 = 1;

        /// public static final [NONE](https://developer.android.com/reference/android/view/Menu.html#NONE)
        pub const NONE : i32 = 0;

        /// public static final [SUPPORTED_MODIFIERS_MASK](https://developer.android.com/reference/android/view/Menu.html#SUPPORTED_MODIFIERS_MASK)
        pub const SUPPORTED_MODIFIERS_MASK : i32 = 69647;
    }
}
