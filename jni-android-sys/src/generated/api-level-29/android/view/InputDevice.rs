// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-view-InputDevice"))]
__jni_bindgen! {
    /// public final class [InputDevice](https://developer.android.com/reference/android/view/InputDevice.html)
    ///
    /// Required feature: android-view-InputDevice
    public final class InputDevice ("android/view/InputDevice") extends crate::java::lang::Object, implements crate::android::os::Parcelable {

        // // Not emitting: Non-public method
        // /// [InputDevice](https://developer.android.com/reference/android/view/InputDevice.html#InputDevice(android.os.Parcel))
        // ///
        // /// Required features: "android-os-Parcel"
        // #[cfg(any(feature = "all", all(feature = "android-os-Parcel")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Parcel>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::view::InputDevice>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/InputDevice", java.flags == (empty), .name == "<init>", .descriptor == "(Landroid/os/Parcel;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/InputDevice\0", "<init>\0", "(Landroid/os/Parcel;)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getDevice](https://developer.android.com/reference/android/view/InputDevice.html#getDevice(int))
        ///
        /// Required features: "android-view-InputDevice"
        #[cfg(any(feature = "all", all(feature = "android-view-InputDevice")))]
        pub fn getDevice<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::InputDevice>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/InputDevice", java.flags == PUBLIC | STATIC, .name == "getDevice", .descriptor == "(I)Landroid/view/InputDevice;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/view/InputDevice\0", "getDevice\0", "(I)Landroid/view/InputDevice;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDeviceIds](https://developer.android.com/reference/android/view/InputDevice.html#getDeviceIds())
        pub fn getDeviceIds<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::IntArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/InputDevice", java.flags == PUBLIC | STATIC, .name == "getDeviceIds", .descriptor == "()[I"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/view/InputDevice\0", "getDeviceIds\0", "()[I\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getId](https://developer.android.com/reference/android/view/InputDevice.html#getId())
        pub fn getId<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/InputDevice", java.flags == PUBLIC, .name == "getId", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/InputDevice\0", "getId\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getControllerNumber](https://developer.android.com/reference/android/view/InputDevice.html#getControllerNumber())
        pub fn getControllerNumber<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/InputDevice", java.flags == PUBLIC, .name == "getControllerNumber", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/InputDevice\0", "getControllerNumber\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getVendorId](https://developer.android.com/reference/android/view/InputDevice.html#getVendorId())
        pub fn getVendorId<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/InputDevice", java.flags == PUBLIC, .name == "getVendorId", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/InputDevice\0", "getVendorId\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getProductId](https://developer.android.com/reference/android/view/InputDevice.html#getProductId())
        pub fn getProductId<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/InputDevice", java.flags == PUBLIC, .name == "getProductId", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/InputDevice\0", "getProductId\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDescriptor](https://developer.android.com/reference/android/view/InputDevice.html#getDescriptor())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getDescriptor<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/InputDevice", java.flags == PUBLIC, .name == "getDescriptor", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/InputDevice\0", "getDescriptor\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isVirtual](https://developer.android.com/reference/android/view/InputDevice.html#isVirtual())
        pub fn isVirtual<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/InputDevice", java.flags == PUBLIC, .name == "isVirtual", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/InputDevice\0", "isVirtual\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isExternal](https://developer.android.com/reference/android/view/InputDevice.html#isExternal())
        pub fn isExternal<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/InputDevice", java.flags == PUBLIC, .name == "isExternal", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/InputDevice\0", "isExternal\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getName](https://developer.android.com/reference/android/view/InputDevice.html#getName())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getName<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/InputDevice", java.flags == PUBLIC, .name == "getName", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/InputDevice\0", "getName\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSources](https://developer.android.com/reference/android/view/InputDevice.html#getSources())
        pub fn getSources<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/InputDevice", java.flags == PUBLIC, .name == "getSources", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/InputDevice\0", "getSources\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [supportsSource](https://developer.android.com/reference/android/view/InputDevice.html#supportsSource(int))
        pub fn supportsSource<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/InputDevice", java.flags == PUBLIC, .name == "supportsSource", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/InputDevice\0", "supportsSource\0", "(I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getKeyboardType](https://developer.android.com/reference/android/view/InputDevice.html#getKeyboardType())
        pub fn getKeyboardType<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/InputDevice", java.flags == PUBLIC, .name == "getKeyboardType", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/InputDevice\0", "getKeyboardType\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getKeyCharacterMap](https://developer.android.com/reference/android/view/InputDevice.html#getKeyCharacterMap())
        ///
        /// Required features: "android-view-KeyCharacterMap"
        #[cfg(any(feature = "all", all(feature = "android-view-KeyCharacterMap")))]
        pub fn getKeyCharacterMap<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::KeyCharacterMap>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/InputDevice", java.flags == PUBLIC, .name == "getKeyCharacterMap", .descriptor == "()Landroid/view/KeyCharacterMap;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/InputDevice\0", "getKeyCharacterMap\0", "()Landroid/view/KeyCharacterMap;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasKeys](https://developer.android.com/reference/android/view/InputDevice.html#hasKeys(int...))
        pub fn hasKeys<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::IntArray>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::BooleanArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/InputDevice", java.flags == PUBLIC | VARARGS, .name == "hasKeys", .descriptor == "([I)[Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/InputDevice\0", "hasKeys\0", "([I)[Z\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMotionRange](https://developer.android.com/reference/android/view/InputDevice.html#getMotionRange(int))
        ///
        /// Required features: "android-view-InputDevice_MotionRange"
        #[cfg(any(feature = "all", all(feature = "android-view-InputDevice_MotionRange")))]
        pub fn getMotionRange_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::InputDevice_MotionRange>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/InputDevice", java.flags == PUBLIC, .name == "getMotionRange", .descriptor == "(I)Landroid/view/InputDevice$MotionRange;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/InputDevice\0", "getMotionRange\0", "(I)Landroid/view/InputDevice$MotionRange;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMotionRange](https://developer.android.com/reference/android/view/InputDevice.html#getMotionRange(int,%20int))
        ///
        /// Required features: "android-view-InputDevice_MotionRange"
        #[cfg(any(feature = "all", all(feature = "android-view-InputDevice_MotionRange")))]
        pub fn getMotionRange_int_int<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::InputDevice_MotionRange>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/InputDevice", java.flags == PUBLIC, .name == "getMotionRange", .descriptor == "(II)Landroid/view/InputDevice$MotionRange;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/InputDevice\0", "getMotionRange\0", "(II)Landroid/view/InputDevice$MotionRange;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMotionRanges](https://developer.android.com/reference/android/view/InputDevice.html#getMotionRanges())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getMotionRanges<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/InputDevice", java.flags == PUBLIC, .name == "getMotionRanges", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/InputDevice\0", "getMotionRanges\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getVibrator](https://developer.android.com/reference/android/view/InputDevice.html#getVibrator())
        ///
        /// Required features: "android-os-Vibrator"
        #[cfg(any(feature = "all", all(feature = "android-os-Vibrator")))]
        pub fn getVibrator<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Vibrator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/InputDevice", java.flags == PUBLIC, .name == "getVibrator", .descriptor == "()Landroid/os/Vibrator;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/InputDevice\0", "getVibrator\0", "()Landroid/os/Vibrator;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isEnabled](https://developer.android.com/reference/android/view/InputDevice.html#isEnabled())
        pub fn isEnabled<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/InputDevice", java.flags == PUBLIC, .name == "isEnabled", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/InputDevice\0", "isEnabled\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasMicrophone](https://developer.android.com/reference/android/view/InputDevice.html#hasMicrophone())
        pub fn hasMicrophone<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/InputDevice", java.flags == PUBLIC, .name == "hasMicrophone", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/InputDevice\0", "hasMicrophone\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [writeToParcel](https://developer.android.com/reference/android/view/InputDevice.html#writeToParcel(android.os.Parcel,%20int))
        ///
        /// Required features: "android-os-Parcel"
        #[cfg(any(feature = "all", all(feature = "android-os-Parcel")))]
        pub fn writeToParcel<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Parcel>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/InputDevice", java.flags == PUBLIC, .name == "writeToParcel", .descriptor == "(Landroid/os/Parcel;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/InputDevice\0", "writeToParcel\0", "(Landroid/os/Parcel;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [describeContents](https://developer.android.com/reference/android/view/InputDevice.html#describeContents())
        pub fn describeContents<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/InputDevice", java.flags == PUBLIC, .name == "describeContents", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/InputDevice\0", "describeContents\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/android/view/InputDevice.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/InputDevice", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/InputDevice\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// **get** public static final [CREATOR](https://developer.android.com/reference/android/view/InputDevice.html#CREATOR)
        ///
        /// Required feature: android-os-Parcelable_Creator
        #[cfg(any(feature = "all", feature = "android-os-Parcelable_Creator"))]
        pub fn CREATOR<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Parcelable_Creator>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/view/InputDevice\0", "CREATOR\0", "Landroid/os/Parcelable$Creator;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// public static final [KEYBOARD_TYPE_ALPHABETIC](https://developer.android.com/reference/android/view/InputDevice.html#KEYBOARD_TYPE_ALPHABETIC)
        pub const KEYBOARD_TYPE_ALPHABETIC : i32 = 2;

        /// public static final [KEYBOARD_TYPE_NONE](https://developer.android.com/reference/android/view/InputDevice.html#KEYBOARD_TYPE_NONE)
        pub const KEYBOARD_TYPE_NONE : i32 = 0;

        /// public static final [KEYBOARD_TYPE_NON_ALPHABETIC](https://developer.android.com/reference/android/view/InputDevice.html#KEYBOARD_TYPE_NON_ALPHABETIC)
        pub const KEYBOARD_TYPE_NON_ALPHABETIC : i32 = 1;

        /// public static final [MOTION_RANGE_ORIENTATION](https://developer.android.com/reference/android/view/InputDevice.html#MOTION_RANGE_ORIENTATION)
        #[deprecated] pub const MOTION_RANGE_ORIENTATION : i32 = 8;

        /// public static final [MOTION_RANGE_PRESSURE](https://developer.android.com/reference/android/view/InputDevice.html#MOTION_RANGE_PRESSURE)
        #[deprecated] pub const MOTION_RANGE_PRESSURE : i32 = 2;

        /// public static final [MOTION_RANGE_SIZE](https://developer.android.com/reference/android/view/InputDevice.html#MOTION_RANGE_SIZE)
        #[deprecated] pub const MOTION_RANGE_SIZE : i32 = 3;

        /// public static final [MOTION_RANGE_TOOL_MAJOR](https://developer.android.com/reference/android/view/InputDevice.html#MOTION_RANGE_TOOL_MAJOR)
        #[deprecated] pub const MOTION_RANGE_TOOL_MAJOR : i32 = 6;

        /// public static final [MOTION_RANGE_TOOL_MINOR](https://developer.android.com/reference/android/view/InputDevice.html#MOTION_RANGE_TOOL_MINOR)
        #[deprecated] pub const MOTION_RANGE_TOOL_MINOR : i32 = 7;

        /// public static final [MOTION_RANGE_TOUCH_MAJOR](https://developer.android.com/reference/android/view/InputDevice.html#MOTION_RANGE_TOUCH_MAJOR)
        #[deprecated] pub const MOTION_RANGE_TOUCH_MAJOR : i32 = 4;

        /// public static final [MOTION_RANGE_TOUCH_MINOR](https://developer.android.com/reference/android/view/InputDevice.html#MOTION_RANGE_TOUCH_MINOR)
        #[deprecated] pub const MOTION_RANGE_TOUCH_MINOR : i32 = 5;

        /// public static final [MOTION_RANGE_X](https://developer.android.com/reference/android/view/InputDevice.html#MOTION_RANGE_X)
        #[deprecated] pub const MOTION_RANGE_X : i32 = 0;

        /// public static final [MOTION_RANGE_Y](https://developer.android.com/reference/android/view/InputDevice.html#MOTION_RANGE_Y)
        #[deprecated] pub const MOTION_RANGE_Y : i32 = 1;

        /// public static final [SOURCE_ANY](https://developer.android.com/reference/android/view/InputDevice.html#SOURCE_ANY)
        pub const SOURCE_ANY : i32 = -256;

        /// public static final [SOURCE_BLUETOOTH_STYLUS](https://developer.android.com/reference/android/view/InputDevice.html#SOURCE_BLUETOOTH_STYLUS)
        pub const SOURCE_BLUETOOTH_STYLUS : i32 = 49154;

        /// public static final [SOURCE_CLASS_BUTTON](https://developer.android.com/reference/android/view/InputDevice.html#SOURCE_CLASS_BUTTON)
        pub const SOURCE_CLASS_BUTTON : i32 = 1;

        /// public static final [SOURCE_CLASS_JOYSTICK](https://developer.android.com/reference/android/view/InputDevice.html#SOURCE_CLASS_JOYSTICK)
        pub const SOURCE_CLASS_JOYSTICK : i32 = 16;

        /// public static final [SOURCE_CLASS_MASK](https://developer.android.com/reference/android/view/InputDevice.html#SOURCE_CLASS_MASK)
        pub const SOURCE_CLASS_MASK : i32 = 255;

        /// public static final [SOURCE_CLASS_NONE](https://developer.android.com/reference/android/view/InputDevice.html#SOURCE_CLASS_NONE)
        pub const SOURCE_CLASS_NONE : i32 = 0;

        /// public static final [SOURCE_CLASS_POINTER](https://developer.android.com/reference/android/view/InputDevice.html#SOURCE_CLASS_POINTER)
        pub const SOURCE_CLASS_POINTER : i32 = 2;

        /// public static final [SOURCE_CLASS_POSITION](https://developer.android.com/reference/android/view/InputDevice.html#SOURCE_CLASS_POSITION)
        pub const SOURCE_CLASS_POSITION : i32 = 8;

        /// public static final [SOURCE_CLASS_TRACKBALL](https://developer.android.com/reference/android/view/InputDevice.html#SOURCE_CLASS_TRACKBALL)
        pub const SOURCE_CLASS_TRACKBALL : i32 = 4;

        /// public static final [SOURCE_DPAD](https://developer.android.com/reference/android/view/InputDevice.html#SOURCE_DPAD)
        pub const SOURCE_DPAD : i32 = 513;

        /// public static final [SOURCE_GAMEPAD](https://developer.android.com/reference/android/view/InputDevice.html#SOURCE_GAMEPAD)
        pub const SOURCE_GAMEPAD : i32 = 1025;

        /// public static final [SOURCE_HDMI](https://developer.android.com/reference/android/view/InputDevice.html#SOURCE_HDMI)
        pub const SOURCE_HDMI : i32 = 33554433;

        /// public static final [SOURCE_JOYSTICK](https://developer.android.com/reference/android/view/InputDevice.html#SOURCE_JOYSTICK)
        pub const SOURCE_JOYSTICK : i32 = 16777232;

        /// public static final [SOURCE_KEYBOARD](https://developer.android.com/reference/android/view/InputDevice.html#SOURCE_KEYBOARD)
        pub const SOURCE_KEYBOARD : i32 = 257;

        /// public static final [SOURCE_MOUSE](https://developer.android.com/reference/android/view/InputDevice.html#SOURCE_MOUSE)
        pub const SOURCE_MOUSE : i32 = 8194;

        /// public static final [SOURCE_MOUSE_RELATIVE](https://developer.android.com/reference/android/view/InputDevice.html#SOURCE_MOUSE_RELATIVE)
        pub const SOURCE_MOUSE_RELATIVE : i32 = 131076;

        /// public static final [SOURCE_ROTARY_ENCODER](https://developer.android.com/reference/android/view/InputDevice.html#SOURCE_ROTARY_ENCODER)
        pub const SOURCE_ROTARY_ENCODER : i32 = 4194304;

        /// public static final [SOURCE_STYLUS](https://developer.android.com/reference/android/view/InputDevice.html#SOURCE_STYLUS)
        pub const SOURCE_STYLUS : i32 = 16386;

        /// public static final [SOURCE_TOUCHPAD](https://developer.android.com/reference/android/view/InputDevice.html#SOURCE_TOUCHPAD)
        pub const SOURCE_TOUCHPAD : i32 = 1048584;

        /// public static final [SOURCE_TOUCHSCREEN](https://developer.android.com/reference/android/view/InputDevice.html#SOURCE_TOUCHSCREEN)
        pub const SOURCE_TOUCHSCREEN : i32 = 4098;

        /// public static final [SOURCE_TOUCH_NAVIGATION](https://developer.android.com/reference/android/view/InputDevice.html#SOURCE_TOUCH_NAVIGATION)
        pub const SOURCE_TOUCH_NAVIGATION : i32 = 2097152;

        /// public static final [SOURCE_TRACKBALL](https://developer.android.com/reference/android/view/InputDevice.html#SOURCE_TRACKBALL)
        pub const SOURCE_TRACKBALL : i32 = 65540;

        /// public static final [SOURCE_UNKNOWN](https://developer.android.com/reference/android/view/InputDevice.html#SOURCE_UNKNOWN)
        pub const SOURCE_UNKNOWN : i32 = 0;
    }
}
