// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-view-ViewDebug_ExportedProperty"))]
__jni_bindgen! {
    /// public interface [ViewDebug.ExportedProperty](https://developer.android.com/reference/android/view/ViewDebug.ExportedProperty.html)
    ///
    /// Required feature: android-view-ViewDebug_ExportedProperty
    public interface ViewDebug_ExportedProperty ("android/view/ViewDebug$ExportedProperty") extends crate::java::lang::Object, implements crate::java::lang::annotation::Annotation {

        /// [resolveId](https://developer.android.com/reference/android/view/ViewDebug.ExportedProperty.html#resolveId())
        pub fn resolveId<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewDebug$ExportedProperty", java.flags == PUBLIC | ABSTRACT, .name == "resolveId", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewDebug$ExportedProperty\0", "resolveId\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [mapping](https://developer.android.com/reference/android/view/ViewDebug.ExportedProperty.html#mapping())
        ///
        /// Required features: "android-view-ViewDebug_IntToString"
        #[cfg(any(feature = "all", all(feature = "android-view-ViewDebug_IntToString")))]
        pub fn mapping<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::android::view::ViewDebug_IntToString, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewDebug$ExportedProperty", java.flags == PUBLIC | ABSTRACT, .name == "mapping", .descriptor == "()[Landroid/view/ViewDebug$IntToString;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewDebug$ExportedProperty\0", "mapping\0", "()[Landroid/view/ViewDebug$IntToString;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [indexMapping](https://developer.android.com/reference/android/view/ViewDebug.ExportedProperty.html#indexMapping())
        ///
        /// Required features: "android-view-ViewDebug_IntToString"
        #[cfg(any(feature = "all", all(feature = "android-view-ViewDebug_IntToString")))]
        pub fn indexMapping<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::android::view::ViewDebug_IntToString, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewDebug$ExportedProperty", java.flags == PUBLIC | ABSTRACT, .name == "indexMapping", .descriptor == "()[Landroid/view/ViewDebug$IntToString;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewDebug$ExportedProperty\0", "indexMapping\0", "()[Landroid/view/ViewDebug$IntToString;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [flagMapping](https://developer.android.com/reference/android/view/ViewDebug.ExportedProperty.html#flagMapping())
        ///
        /// Required features: "android-view-ViewDebug_FlagToString"
        #[cfg(any(feature = "all", all(feature = "android-view-ViewDebug_FlagToString")))]
        pub fn flagMapping<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, __jni_bindgen::ObjectArray<crate::android::view::ViewDebug_FlagToString, crate::java::lang::Throwable>>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewDebug$ExportedProperty", java.flags == PUBLIC | ABSTRACT, .name == "flagMapping", .descriptor == "()[Landroid/view/ViewDebug$FlagToString;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewDebug$ExportedProperty\0", "flagMapping\0", "()[Landroid/view/ViewDebug$FlagToString;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [deepExport](https://developer.android.com/reference/android/view/ViewDebug.ExportedProperty.html#deepExport())
        pub fn deepExport<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewDebug$ExportedProperty", java.flags == PUBLIC | ABSTRACT, .name == "deepExport", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewDebug$ExportedProperty\0", "deepExport\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [prefix](https://developer.android.com/reference/android/view/ViewDebug.ExportedProperty.html#prefix())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn prefix<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewDebug$ExportedProperty", java.flags == PUBLIC | ABSTRACT, .name == "prefix", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewDebug$ExportedProperty\0", "prefix\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [category](https://developer.android.com/reference/android/view/ViewDebug.ExportedProperty.html#category())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn category<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewDebug$ExportedProperty", java.flags == PUBLIC | ABSTRACT, .name == "category", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewDebug$ExportedProperty\0", "category\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [formatToHexString](https://developer.android.com/reference/android/view/ViewDebug.ExportedProperty.html#formatToHexString())
        pub fn formatToHexString<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewDebug$ExportedProperty", java.flags == PUBLIC | ABSTRACT, .name == "formatToHexString", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewDebug$ExportedProperty\0", "formatToHexString\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasAdjacentMapping](https://developer.android.com/reference/android/view/ViewDebug.ExportedProperty.html#hasAdjacentMapping())
        pub fn hasAdjacentMapping<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/ViewDebug$ExportedProperty", java.flags == PUBLIC | ABSTRACT, .name == "hasAdjacentMapping", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/ViewDebug$ExportedProperty\0", "hasAdjacentMapping\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
