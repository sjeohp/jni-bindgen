// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-view-WindowInsets"))]
__jni_bindgen! {
    /// public final class [WindowInsets](https://developer.android.com/reference/android/view/WindowInsets.html)
    ///
    /// Required feature: android-view-WindowInsets
    public final class WindowInsets ("android/view/WindowInsets") extends crate::java::lang::Object {

        /// [WindowInsets](https://developer.android.com/reference/android/view/WindowInsets.html#WindowInsets(android.view.WindowInsets))
        ///
        /// Required features: "android-view-WindowInsets"
        #[cfg(any(feature = "all", all(feature = "android-view-WindowInsets")))]
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::WindowInsets>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::view::WindowInsets>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/WindowInsets", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/view/WindowInsets;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/WindowInsets\0", "<init>\0", "(Landroid/view/WindowInsets;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSystemWindowInsets](https://developer.android.com/reference/android/view/WindowInsets.html#getSystemWindowInsets())
        ///
        /// Required features: "android-graphics-Insets"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Insets")))]
        pub fn getSystemWindowInsets<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Insets>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/WindowInsets", java.flags == PUBLIC, .name == "getSystemWindowInsets", .descriptor == "()Landroid/graphics/Insets;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/WindowInsets\0", "getSystemWindowInsets\0", "()Landroid/graphics/Insets;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSystemWindowInsetLeft](https://developer.android.com/reference/android/view/WindowInsets.html#getSystemWindowInsetLeft())
        pub fn getSystemWindowInsetLeft<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/WindowInsets", java.flags == PUBLIC, .name == "getSystemWindowInsetLeft", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/WindowInsets\0", "getSystemWindowInsetLeft\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSystemWindowInsetTop](https://developer.android.com/reference/android/view/WindowInsets.html#getSystemWindowInsetTop())
        pub fn getSystemWindowInsetTop<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/WindowInsets", java.flags == PUBLIC, .name == "getSystemWindowInsetTop", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/WindowInsets\0", "getSystemWindowInsetTop\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSystemWindowInsetRight](https://developer.android.com/reference/android/view/WindowInsets.html#getSystemWindowInsetRight())
        pub fn getSystemWindowInsetRight<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/WindowInsets", java.flags == PUBLIC, .name == "getSystemWindowInsetRight", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/WindowInsets\0", "getSystemWindowInsetRight\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSystemWindowInsetBottom](https://developer.android.com/reference/android/view/WindowInsets.html#getSystemWindowInsetBottom())
        pub fn getSystemWindowInsetBottom<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/WindowInsets", java.flags == PUBLIC, .name == "getSystemWindowInsetBottom", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/WindowInsets\0", "getSystemWindowInsetBottom\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasSystemWindowInsets](https://developer.android.com/reference/android/view/WindowInsets.html#hasSystemWindowInsets())
        pub fn hasSystemWindowInsets<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/WindowInsets", java.flags == PUBLIC, .name == "hasSystemWindowInsets", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/WindowInsets\0", "hasSystemWindowInsets\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasInsets](https://developer.android.com/reference/android/view/WindowInsets.html#hasInsets())
        pub fn hasInsets<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/WindowInsets", java.flags == PUBLIC, .name == "hasInsets", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/WindowInsets\0", "hasInsets\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDisplayCutout](https://developer.android.com/reference/android/view/WindowInsets.html#getDisplayCutout())
        ///
        /// Required features: "android-view-DisplayCutout"
        #[cfg(any(feature = "all", all(feature = "android-view-DisplayCutout")))]
        pub fn getDisplayCutout<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::DisplayCutout>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/WindowInsets", java.flags == PUBLIC, .name == "getDisplayCutout", .descriptor == "()Landroid/view/DisplayCutout;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/WindowInsets\0", "getDisplayCutout\0", "()Landroid/view/DisplayCutout;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [consumeDisplayCutout](https://developer.android.com/reference/android/view/WindowInsets.html#consumeDisplayCutout())
        ///
        /// Required features: "android-view-WindowInsets"
        #[cfg(any(feature = "all", all(feature = "android-view-WindowInsets")))]
        pub fn consumeDisplayCutout<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::WindowInsets>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/WindowInsets", java.flags == PUBLIC, .name == "consumeDisplayCutout", .descriptor == "()Landroid/view/WindowInsets;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/WindowInsets\0", "consumeDisplayCutout\0", "()Landroid/view/WindowInsets;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isConsumed](https://developer.android.com/reference/android/view/WindowInsets.html#isConsumed())
        pub fn isConsumed<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/WindowInsets", java.flags == PUBLIC, .name == "isConsumed", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/WindowInsets\0", "isConsumed\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isRound](https://developer.android.com/reference/android/view/WindowInsets.html#isRound())
        pub fn isRound<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/WindowInsets", java.flags == PUBLIC, .name == "isRound", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/WindowInsets\0", "isRound\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [consumeSystemWindowInsets](https://developer.android.com/reference/android/view/WindowInsets.html#consumeSystemWindowInsets())
        ///
        /// Required features: "android-view-WindowInsets"
        #[cfg(any(feature = "all", all(feature = "android-view-WindowInsets")))]
        pub fn consumeSystemWindowInsets<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::WindowInsets>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/WindowInsets", java.flags == PUBLIC, .name == "consumeSystemWindowInsets", .descriptor == "()Landroid/view/WindowInsets;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/WindowInsets\0", "consumeSystemWindowInsets\0", "()Landroid/view/WindowInsets;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [replaceSystemWindowInsets](https://developer.android.com/reference/android/view/WindowInsets.html#replaceSystemWindowInsets(int,%20int,%20int,%20int))
        ///
        /// Required features: "android-view-WindowInsets"
        #[cfg(any(feature = "all", all(feature = "android-view-WindowInsets")))]
        #[deprecated] pub fn replaceSystemWindowInsets_int_int_int_int<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::WindowInsets>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/WindowInsets", java.flags == PUBLIC, .name == "replaceSystemWindowInsets", .descriptor == "(IIII)Landroid/view/WindowInsets;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/WindowInsets\0", "replaceSystemWindowInsets\0", "(IIII)Landroid/view/WindowInsets;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [replaceSystemWindowInsets](https://developer.android.com/reference/android/view/WindowInsets.html#replaceSystemWindowInsets(android.graphics.Rect))
        ///
        /// Required features: "android-graphics-Rect", "android-view-WindowInsets"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Rect", feature = "android-view-WindowInsets")))]
        #[deprecated] pub fn replaceSystemWindowInsets_Rect<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Rect>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::WindowInsets>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/WindowInsets", java.flags == PUBLIC, .name == "replaceSystemWindowInsets", .descriptor == "(Landroid/graphics/Rect;)Landroid/view/WindowInsets;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/WindowInsets\0", "replaceSystemWindowInsets\0", "(Landroid/graphics/Rect;)Landroid/view/WindowInsets;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getStableInsets](https://developer.android.com/reference/android/view/WindowInsets.html#getStableInsets())
        ///
        /// Required features: "android-graphics-Insets"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Insets")))]
        pub fn getStableInsets<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Insets>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/WindowInsets", java.flags == PUBLIC, .name == "getStableInsets", .descriptor == "()Landroid/graphics/Insets;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/WindowInsets\0", "getStableInsets\0", "()Landroid/graphics/Insets;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getStableInsetTop](https://developer.android.com/reference/android/view/WindowInsets.html#getStableInsetTop())
        pub fn getStableInsetTop<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/WindowInsets", java.flags == PUBLIC, .name == "getStableInsetTop", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/WindowInsets\0", "getStableInsetTop\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getStableInsetLeft](https://developer.android.com/reference/android/view/WindowInsets.html#getStableInsetLeft())
        pub fn getStableInsetLeft<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/WindowInsets", java.flags == PUBLIC, .name == "getStableInsetLeft", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/WindowInsets\0", "getStableInsetLeft\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getStableInsetRight](https://developer.android.com/reference/android/view/WindowInsets.html#getStableInsetRight())
        pub fn getStableInsetRight<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/WindowInsets", java.flags == PUBLIC, .name == "getStableInsetRight", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/WindowInsets\0", "getStableInsetRight\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getStableInsetBottom](https://developer.android.com/reference/android/view/WindowInsets.html#getStableInsetBottom())
        pub fn getStableInsetBottom<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/WindowInsets", java.flags == PUBLIC, .name == "getStableInsetBottom", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/WindowInsets\0", "getStableInsetBottom\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasStableInsets](https://developer.android.com/reference/android/view/WindowInsets.html#hasStableInsets())
        pub fn hasStableInsets<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/WindowInsets", java.flags == PUBLIC, .name == "hasStableInsets", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/WindowInsets\0", "hasStableInsets\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSystemGestureInsets](https://developer.android.com/reference/android/view/WindowInsets.html#getSystemGestureInsets())
        ///
        /// Required features: "android-graphics-Insets"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Insets")))]
        pub fn getSystemGestureInsets<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Insets>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/WindowInsets", java.flags == PUBLIC, .name == "getSystemGestureInsets", .descriptor == "()Landroid/graphics/Insets;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/WindowInsets\0", "getSystemGestureInsets\0", "()Landroid/graphics/Insets;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMandatorySystemGestureInsets](https://developer.android.com/reference/android/view/WindowInsets.html#getMandatorySystemGestureInsets())
        ///
        /// Required features: "android-graphics-Insets"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Insets")))]
        pub fn getMandatorySystemGestureInsets<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Insets>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/WindowInsets", java.flags == PUBLIC, .name == "getMandatorySystemGestureInsets", .descriptor == "()Landroid/graphics/Insets;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/WindowInsets\0", "getMandatorySystemGestureInsets\0", "()Landroid/graphics/Insets;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTappableElementInsets](https://developer.android.com/reference/android/view/WindowInsets.html#getTappableElementInsets())
        ///
        /// Required features: "android-graphics-Insets"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Insets")))]
        pub fn getTappableElementInsets<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Insets>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/WindowInsets", java.flags == PUBLIC, .name == "getTappableElementInsets", .descriptor == "()Landroid/graphics/Insets;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/WindowInsets\0", "getTappableElementInsets\0", "()Landroid/graphics/Insets;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [consumeStableInsets](https://developer.android.com/reference/android/view/WindowInsets.html#consumeStableInsets())
        ///
        /// Required features: "android-view-WindowInsets"
        #[cfg(any(feature = "all", all(feature = "android-view-WindowInsets")))]
        pub fn consumeStableInsets<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::WindowInsets>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/WindowInsets", java.flags == PUBLIC, .name == "consumeStableInsets", .descriptor == "()Landroid/view/WindowInsets;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/WindowInsets\0", "consumeStableInsets\0", "()Landroid/view/WindowInsets;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/android/view/WindowInsets.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/WindowInsets", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/WindowInsets\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [inset](https://developer.android.com/reference/android/view/WindowInsets.html#inset(int,%20int,%20int,%20int))
        ///
        /// Required features: "android-view-WindowInsets"
        #[cfg(any(feature = "all", all(feature = "android-view-WindowInsets")))]
        pub fn inset<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::WindowInsets>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/WindowInsets", java.flags == PUBLIC, .name == "inset", .descriptor == "(IIII)Landroid/view/WindowInsets;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/WindowInsets\0", "inset\0", "(IIII)Landroid/view/WindowInsets;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [equals](https://developer.android.com/reference/android/view/WindowInsets.html#equals(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn equals<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/WindowInsets", java.flags == PUBLIC, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/WindowInsets\0", "equals\0", "(Ljava/lang/Object;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hashCode](https://developer.android.com/reference/android/view/WindowInsets.html#hashCode())
        pub fn hashCode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/WindowInsets", java.flags == PUBLIC, .name == "hashCode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/WindowInsets\0", "hashCode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
