// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-view-accessibility-AccessibilityNodeInfo_CollectionInfo"))]
__jni_bindgen! {
    /// public final class [AccessibilityNodeInfo.CollectionInfo](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionInfo.html)
    ///
    /// Required feature: android-view-accessibility-AccessibilityNodeInfo_CollectionInfo
    public final class AccessibilityNodeInfo_CollectionInfo ("android/view/accessibility/AccessibilityNodeInfo$CollectionInfo") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [CollectionInfo](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionInfo.html#CollectionInfo(int,%20int,%20boolean,%20int))
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: bool, arg3: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::view::accessibility::AccessibilityNodeInfo_CollectionInfo>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/accessibility/AccessibilityNodeInfo$CollectionInfo", java.flags == (empty), .name == "<init>", .descriptor == "(IIZI)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo$CollectionInfo\0", "<init>\0", "(IIZI)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [obtain](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionInfo.html#obtain(int,%20int,%20boolean))
        ///
        /// Required features: "android-view-accessibility-AccessibilityNodeInfo_CollectionInfo"
        #[cfg(any(feature = "all", all(feature = "android-view-accessibility-AccessibilityNodeInfo_CollectionInfo")))]
        pub fn obtain_int_int_boolean<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::accessibility::AccessibilityNodeInfo_CollectionInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo$CollectionInfo", java.flags == PUBLIC | STATIC, .name == "obtain", .descriptor == "(IIZ)Landroid/view/accessibility/AccessibilityNodeInfo$CollectionInfo;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/view/accessibility/AccessibilityNodeInfo$CollectionInfo\0", "obtain\0", "(IIZ)Landroid/view/accessibility/AccessibilityNodeInfo$CollectionInfo;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [obtain](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionInfo.html#obtain(int,%20int,%20boolean,%20int))
        ///
        /// Required features: "android-view-accessibility-AccessibilityNodeInfo_CollectionInfo"
        #[cfg(any(feature = "all", all(feature = "android-view-accessibility-AccessibilityNodeInfo_CollectionInfo")))]
        pub fn obtain_int_int_boolean_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: bool, arg3: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::accessibility::AccessibilityNodeInfo_CollectionInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo$CollectionInfo", java.flags == PUBLIC | STATIC, .name == "obtain", .descriptor == "(IIZI)Landroid/view/accessibility/AccessibilityNodeInfo$CollectionInfo;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/view/accessibility/AccessibilityNodeInfo$CollectionInfo\0", "obtain\0", "(IIZI)Landroid/view/accessibility/AccessibilityNodeInfo$CollectionInfo;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRowCount](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionInfo.html#getRowCount())
        pub fn getRowCount<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo$CollectionInfo", java.flags == PUBLIC, .name == "getRowCount", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo$CollectionInfo\0", "getRowCount\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getColumnCount](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionInfo.html#getColumnCount())
        pub fn getColumnCount<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo$CollectionInfo", java.flags == PUBLIC, .name == "getColumnCount", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo$CollectionInfo\0", "getColumnCount\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isHierarchical](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionInfo.html#isHierarchical())
        pub fn isHierarchical<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo$CollectionInfo", java.flags == PUBLIC, .name == "isHierarchical", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo$CollectionInfo\0", "isHierarchical\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSelectionMode](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionInfo.html#getSelectionMode())
        pub fn getSelectionMode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo$CollectionInfo", java.flags == PUBLIC, .name == "getSelectionMode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo$CollectionInfo\0", "getSelectionMode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [SELECTION_MODE_MULTIPLE](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionInfo.html#SELECTION_MODE_MULTIPLE)
        pub const SELECTION_MODE_MULTIPLE : i32 = 2;

        /// public static final [SELECTION_MODE_NONE](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionInfo.html#SELECTION_MODE_NONE)
        pub const SELECTION_MODE_NONE : i32 = 0;

        /// public static final [SELECTION_MODE_SINGLE](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionInfo.html#SELECTION_MODE_SINGLE)
        pub const SELECTION_MODE_SINGLE : i32 = 1;
    }
}
