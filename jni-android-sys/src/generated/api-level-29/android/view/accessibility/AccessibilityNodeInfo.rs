// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-view-accessibility-AccessibilityNodeInfo"))]
__jni_bindgen! {
    /// public class [AccessibilityNodeInfo](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html)
    ///
    /// Required feature: android-view-accessibility-AccessibilityNodeInfo
    public class AccessibilityNodeInfo ("android/view/accessibility/AccessibilityNodeInfo") extends crate::java::lang::Object, implements crate::android::os::Parcelable {

        // // Not emitting: Non-public method
        // /// [AccessibilityNodeInfo](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#AccessibilityNodeInfo())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::view::accessibility::AccessibilityNodeInfo>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [setSource](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setSource(android.view.View))
        ///
        /// Required features: "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-view-View")))]
        pub fn setSource_View<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "setSource", .descriptor == "(Landroid/view/View;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "setSource\0", "(Landroid/view/View;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setSource](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setSource(android.view.View,%20int))
        ///
        /// Required features: "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-view-View")))]
        pub fn setSource_View_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "setSource", .descriptor == "(Landroid/view/View;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "setSource\0", "(Landroid/view/View;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [findFocus](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#findFocus(int))
        ///
        /// Required features: "android-view-accessibility-AccessibilityNodeInfo"
        #[cfg(any(feature = "all", all(feature = "android-view-accessibility-AccessibilityNodeInfo")))]
        pub fn findFocus<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::accessibility::AccessibilityNodeInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "findFocus", .descriptor == "(I)Landroid/view/accessibility/AccessibilityNodeInfo;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "findFocus\0", "(I)Landroid/view/accessibility/AccessibilityNodeInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [focusSearch](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#focusSearch(int))
        ///
        /// Required features: "android-view-accessibility-AccessibilityNodeInfo"
        #[cfg(any(feature = "all", all(feature = "android-view-accessibility-AccessibilityNodeInfo")))]
        pub fn focusSearch<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::accessibility::AccessibilityNodeInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "focusSearch", .descriptor == "(I)Landroid/view/accessibility/AccessibilityNodeInfo;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "focusSearch\0", "(I)Landroid/view/accessibility/AccessibilityNodeInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getWindowId](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getWindowId())
        pub fn getWindowId<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "getWindowId", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "getWindowId\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [refresh](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#refresh())
        pub fn refresh<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "refresh", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "refresh\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [refreshWithExtraData](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#refreshWithExtraData(java.lang.String,%20android.os.Bundle))
        ///
        /// Required features: "android-os-Bundle", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-os-Bundle", feature = "java-lang-String")))]
        pub fn refreshWithExtraData<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "refreshWithExtraData", .descriptor == "(Ljava/lang/String;Landroid/os/Bundle;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "refreshWithExtraData\0", "(Ljava/lang/String;Landroid/os/Bundle;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getChildCount](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getChildCount())
        pub fn getChildCount<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "getChildCount", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "getChildCount\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getChild](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getChild(int))
        ///
        /// Required features: "android-view-accessibility-AccessibilityNodeInfo"
        #[cfg(any(feature = "all", all(feature = "android-view-accessibility-AccessibilityNodeInfo")))]
        pub fn getChild<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::accessibility::AccessibilityNodeInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "getChild", .descriptor == "(I)Landroid/view/accessibility/AccessibilityNodeInfo;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "getChild\0", "(I)Landroid/view/accessibility/AccessibilityNodeInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addChild](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#addChild(android.view.View))
        ///
        /// Required features: "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-view-View")))]
        pub fn addChild_View<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "addChild", .descriptor == "(Landroid/view/View;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "addChild\0", "(Landroid/view/View;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeChild](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#removeChild(android.view.View))
        ///
        /// Required features: "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-view-View")))]
        pub fn removeChild_View<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "removeChild", .descriptor == "(Landroid/view/View;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "removeChild\0", "(Landroid/view/View;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addChild](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#addChild(android.view.View,%20int))
        ///
        /// Required features: "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-view-View")))]
        pub fn addChild_View_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "addChild", .descriptor == "(Landroid/view/View;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "addChild\0", "(Landroid/view/View;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeChild](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#removeChild(android.view.View,%20int))
        ///
        /// Required features: "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-view-View")))]
        pub fn removeChild_View_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>, arg1: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "removeChild", .descriptor == "(Landroid/view/View;I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "removeChild\0", "(Landroid/view/View;I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getActionList](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getActionList())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getActionList<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "getActionList", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "getActionList\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getActions](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getActions())
        #[deprecated] pub fn getActions<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "getActions", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "getActions\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addAction](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#addAction(android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction))
        ///
        /// Required features: "android-view-accessibility-AccessibilityNodeInfo_AccessibilityAction"
        #[cfg(any(feature = "all", all(feature = "android-view-accessibility-AccessibilityNodeInfo_AccessibilityAction")))]
        pub fn addAction_AccessibilityAction<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::accessibility::AccessibilityNodeInfo_AccessibilityAction>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "addAction", .descriptor == "(Landroid/view/accessibility/AccessibilityNodeInfo$AccessibilityAction;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "addAction\0", "(Landroid/view/accessibility/AccessibilityNodeInfo$AccessibilityAction;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addAction](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#addAction(int))
        #[deprecated] pub fn addAction_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "addAction", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "addAction\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeAction](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#removeAction(int))
        #[deprecated] pub fn removeAction_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "removeAction", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "removeAction\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeAction](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#removeAction(android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction))
        ///
        /// Required features: "android-view-accessibility-AccessibilityNodeInfo_AccessibilityAction"
        #[cfg(any(feature = "all", all(feature = "android-view-accessibility-AccessibilityNodeInfo_AccessibilityAction")))]
        pub fn removeAction_AccessibilityAction<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::accessibility::AccessibilityNodeInfo_AccessibilityAction>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "removeAction", .descriptor == "(Landroid/view/accessibility/AccessibilityNodeInfo$AccessibilityAction;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "removeAction\0", "(Landroid/view/accessibility/AccessibilityNodeInfo$AccessibilityAction;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTraversalBefore](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getTraversalBefore())
        ///
        /// Required features: "android-view-accessibility-AccessibilityNodeInfo"
        #[cfg(any(feature = "all", all(feature = "android-view-accessibility-AccessibilityNodeInfo")))]
        pub fn getTraversalBefore<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::accessibility::AccessibilityNodeInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "getTraversalBefore", .descriptor == "()Landroid/view/accessibility/AccessibilityNodeInfo;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "getTraversalBefore\0", "()Landroid/view/accessibility/AccessibilityNodeInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTraversalBefore](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setTraversalBefore(android.view.View))
        ///
        /// Required features: "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-view-View")))]
        pub fn setTraversalBefore_View<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "setTraversalBefore", .descriptor == "(Landroid/view/View;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "setTraversalBefore\0", "(Landroid/view/View;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTraversalBefore](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setTraversalBefore(android.view.View,%20int))
        ///
        /// Required features: "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-view-View")))]
        pub fn setTraversalBefore_View_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "setTraversalBefore", .descriptor == "(Landroid/view/View;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "setTraversalBefore\0", "(Landroid/view/View;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTraversalAfter](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getTraversalAfter())
        ///
        /// Required features: "android-view-accessibility-AccessibilityNodeInfo"
        #[cfg(any(feature = "all", all(feature = "android-view-accessibility-AccessibilityNodeInfo")))]
        pub fn getTraversalAfter<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::accessibility::AccessibilityNodeInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "getTraversalAfter", .descriptor == "()Landroid/view/accessibility/AccessibilityNodeInfo;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "getTraversalAfter\0", "()Landroid/view/accessibility/AccessibilityNodeInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTraversalAfter](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setTraversalAfter(android.view.View))
        ///
        /// Required features: "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-view-View")))]
        pub fn setTraversalAfter_View<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "setTraversalAfter", .descriptor == "(Landroid/view/View;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "setTraversalAfter\0", "(Landroid/view/View;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTraversalAfter](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setTraversalAfter(android.view.View,%20int))
        ///
        /// Required features: "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-view-View")))]
        pub fn setTraversalAfter_View_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "setTraversalAfter", .descriptor == "(Landroid/view/View;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "setTraversalAfter\0", "(Landroid/view/View;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAvailableExtraData](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getAvailableExtraData())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getAvailableExtraData<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "getAvailableExtraData", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "getAvailableExtraData\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAvailableExtraData](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setAvailableExtraData(java.util.List))
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn setAvailableExtraData<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "setAvailableExtraData", .descriptor == "(Ljava/util/List;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "setAvailableExtraData\0", "(Ljava/util/List;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setMaxTextLength](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setMaxTextLength(int))
        pub fn setMaxTextLength<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "setMaxTextLength", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "setMaxTextLength\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMaxTextLength](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getMaxTextLength())
        pub fn getMaxTextLength<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "getMaxTextLength", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "getMaxTextLength\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setMovementGranularities](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setMovementGranularities(int))
        pub fn setMovementGranularities<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "setMovementGranularities", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "setMovementGranularities\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMovementGranularities](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getMovementGranularities())
        pub fn getMovementGranularities<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "getMovementGranularities", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "getMovementGranularities\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [performAction](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#performAction(int))
        pub fn performAction_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "performAction", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "performAction\0", "(I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [performAction](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#performAction(int,%20android.os.Bundle))
        ///
        /// Required features: "android-os-Bundle"
        #[cfg(any(feature = "all", all(feature = "android-os-Bundle")))]
        pub fn performAction_int_Bundle<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "performAction", .descriptor == "(ILandroid/os/Bundle;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "performAction\0", "(ILandroid/os/Bundle;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [findAccessibilityNodeInfosByText](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#findAccessibilityNodeInfosByText(java.lang.String))
        ///
        /// Required features: "java-lang-String", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-util-List")))]
        pub fn findAccessibilityNodeInfosByText<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "findAccessibilityNodeInfosByText", .descriptor == "(Ljava/lang/String;)Ljava/util/List;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "findAccessibilityNodeInfosByText\0", "(Ljava/lang/String;)Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [findAccessibilityNodeInfosByViewId](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#findAccessibilityNodeInfosByViewId(java.lang.String))
        ///
        /// Required features: "java-lang-String", "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-lang-String", feature = "java-util-List")))]
        pub fn findAccessibilityNodeInfosByViewId<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "findAccessibilityNodeInfosByViewId", .descriptor == "(Ljava/lang/String;)Ljava/util/List;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "findAccessibilityNodeInfosByViewId\0", "(Ljava/lang/String;)Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getWindow](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getWindow())
        ///
        /// Required features: "android-view-accessibility-AccessibilityWindowInfo"
        #[cfg(any(feature = "all", all(feature = "android-view-accessibility-AccessibilityWindowInfo")))]
        pub fn getWindow<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::accessibility::AccessibilityWindowInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "getWindow", .descriptor == "()Landroid/view/accessibility/AccessibilityWindowInfo;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "getWindow\0", "()Landroid/view/accessibility/AccessibilityWindowInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getParent](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getParent())
        ///
        /// Required features: "android-view-accessibility-AccessibilityNodeInfo"
        #[cfg(any(feature = "all", all(feature = "android-view-accessibility-AccessibilityNodeInfo")))]
        pub fn getParent<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::accessibility::AccessibilityNodeInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "getParent", .descriptor == "()Landroid/view/accessibility/AccessibilityNodeInfo;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "getParent\0", "()Landroid/view/accessibility/AccessibilityNodeInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setParent](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setParent(android.view.View))
        ///
        /// Required features: "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-view-View")))]
        pub fn setParent_View<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "setParent", .descriptor == "(Landroid/view/View;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "setParent\0", "(Landroid/view/View;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setParent](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setParent(android.view.View,%20int))
        ///
        /// Required features: "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-view-View")))]
        pub fn setParent_View_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "setParent", .descriptor == "(Landroid/view/View;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "setParent\0", "(Landroid/view/View;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getBoundsInParent](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getBoundsInParent(android.graphics.Rect))
        ///
        /// Required features: "android-graphics-Rect"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Rect")))]
        #[deprecated] pub fn getBoundsInParent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Rect>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "getBoundsInParent", .descriptor == "(Landroid/graphics/Rect;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "getBoundsInParent\0", "(Landroid/graphics/Rect;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setBoundsInParent](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setBoundsInParent(android.graphics.Rect))
        ///
        /// Required features: "android-graphics-Rect"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Rect")))]
        #[deprecated] pub fn setBoundsInParent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Rect>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "setBoundsInParent", .descriptor == "(Landroid/graphics/Rect;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "setBoundsInParent\0", "(Landroid/graphics/Rect;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getBoundsInScreen](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getBoundsInScreen(android.graphics.Rect))
        ///
        /// Required features: "android-graphics-Rect"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Rect")))]
        pub fn getBoundsInScreen<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Rect>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "getBoundsInScreen", .descriptor == "(Landroid/graphics/Rect;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "getBoundsInScreen\0", "(Landroid/graphics/Rect;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setBoundsInScreen](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setBoundsInScreen(android.graphics.Rect))
        ///
        /// Required features: "android-graphics-Rect"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Rect")))]
        pub fn setBoundsInScreen<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Rect>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "setBoundsInScreen", .descriptor == "(Landroid/graphics/Rect;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "setBoundsInScreen\0", "(Landroid/graphics/Rect;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isCheckable](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#isCheckable())
        pub fn isCheckable<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "isCheckable", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "isCheckable\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setCheckable](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setCheckable(boolean))
        pub fn setCheckable<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "setCheckable", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "setCheckable\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isChecked](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#isChecked())
        pub fn isChecked<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "isChecked", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "isChecked\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setChecked](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setChecked(boolean))
        pub fn setChecked<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "setChecked", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "setChecked\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isFocusable](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#isFocusable())
        pub fn isFocusable<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "isFocusable", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "isFocusable\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setFocusable](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setFocusable(boolean))
        pub fn setFocusable<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "setFocusable", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "setFocusable\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isFocused](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#isFocused())
        pub fn isFocused<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "isFocused", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "isFocused\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setFocused](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setFocused(boolean))
        pub fn setFocused<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "setFocused", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "setFocused\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isVisibleToUser](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#isVisibleToUser())
        pub fn isVisibleToUser<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "isVisibleToUser", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "isVisibleToUser\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setVisibleToUser](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setVisibleToUser(boolean))
        pub fn setVisibleToUser<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "setVisibleToUser", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "setVisibleToUser\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isAccessibilityFocused](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#isAccessibilityFocused())
        pub fn isAccessibilityFocused<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "isAccessibilityFocused", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "isAccessibilityFocused\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAccessibilityFocused](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setAccessibilityFocused(boolean))
        pub fn setAccessibilityFocused<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "setAccessibilityFocused", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "setAccessibilityFocused\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isSelected](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#isSelected())
        pub fn isSelected<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "isSelected", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "isSelected\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setSelected](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setSelected(boolean))
        pub fn setSelected<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "setSelected", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "setSelected\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isClickable](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#isClickable())
        pub fn isClickable<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "isClickable", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "isClickable\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setClickable](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setClickable(boolean))
        pub fn setClickable<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "setClickable", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "setClickable\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isLongClickable](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#isLongClickable())
        pub fn isLongClickable<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "isLongClickable", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "isLongClickable\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setLongClickable](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setLongClickable(boolean))
        pub fn setLongClickable<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "setLongClickable", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "setLongClickable\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isEnabled](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#isEnabled())
        pub fn isEnabled<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "isEnabled", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "isEnabled\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setEnabled](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setEnabled(boolean))
        pub fn setEnabled<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "setEnabled", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "setEnabled\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isPassword](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#isPassword())
        pub fn isPassword<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "isPassword", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "isPassword\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPassword](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setPassword(boolean))
        pub fn setPassword<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "setPassword", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "setPassword\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isScrollable](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#isScrollable())
        pub fn isScrollable<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "isScrollable", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "isScrollable\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setScrollable](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setScrollable(boolean))
        pub fn setScrollable<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "setScrollable", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "setScrollable\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isEditable](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#isEditable())
        pub fn isEditable<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "isEditable", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "isEditable\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setEditable](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setEditable(boolean))
        pub fn setEditable<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "setEditable", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "setEditable\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPaneTitle](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setPaneTitle(java.lang.CharSequence))
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn setPaneTitle<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "setPaneTitle", .descriptor == "(Ljava/lang/CharSequence;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "setPaneTitle\0", "(Ljava/lang/CharSequence;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPaneTitle](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getPaneTitle())
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn getPaneTitle<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::CharSequence>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "getPaneTitle", .descriptor == "()Ljava/lang/CharSequence;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "getPaneTitle\0", "()Ljava/lang/CharSequence;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDrawingOrder](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getDrawingOrder())
        pub fn getDrawingOrder<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "getDrawingOrder", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "getDrawingOrder\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDrawingOrder](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setDrawingOrder(int))
        pub fn setDrawingOrder<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "setDrawingOrder", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "setDrawingOrder\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCollectionInfo](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getCollectionInfo())
        ///
        /// Required features: "android-view-accessibility-AccessibilityNodeInfo_CollectionInfo"
        #[cfg(any(feature = "all", all(feature = "android-view-accessibility-AccessibilityNodeInfo_CollectionInfo")))]
        pub fn getCollectionInfo<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::accessibility::AccessibilityNodeInfo_CollectionInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "getCollectionInfo", .descriptor == "()Landroid/view/accessibility/AccessibilityNodeInfo$CollectionInfo;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "getCollectionInfo\0", "()Landroid/view/accessibility/AccessibilityNodeInfo$CollectionInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setCollectionInfo](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setCollectionInfo(android.view.accessibility.AccessibilityNodeInfo.CollectionInfo))
        ///
        /// Required features: "android-view-accessibility-AccessibilityNodeInfo_CollectionInfo"
        #[cfg(any(feature = "all", all(feature = "android-view-accessibility-AccessibilityNodeInfo_CollectionInfo")))]
        pub fn setCollectionInfo<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::accessibility::AccessibilityNodeInfo_CollectionInfo>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "setCollectionInfo", .descriptor == "(Landroid/view/accessibility/AccessibilityNodeInfo$CollectionInfo;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "setCollectionInfo\0", "(Landroid/view/accessibility/AccessibilityNodeInfo$CollectionInfo;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCollectionItemInfo](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getCollectionItemInfo())
        ///
        /// Required features: "android-view-accessibility-AccessibilityNodeInfo_CollectionItemInfo"
        #[cfg(any(feature = "all", all(feature = "android-view-accessibility-AccessibilityNodeInfo_CollectionItemInfo")))]
        pub fn getCollectionItemInfo<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::accessibility::AccessibilityNodeInfo_CollectionItemInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "getCollectionItemInfo", .descriptor == "()Landroid/view/accessibility/AccessibilityNodeInfo$CollectionItemInfo;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "getCollectionItemInfo\0", "()Landroid/view/accessibility/AccessibilityNodeInfo$CollectionItemInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setCollectionItemInfo](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setCollectionItemInfo(android.view.accessibility.AccessibilityNodeInfo.CollectionItemInfo))
        ///
        /// Required features: "android-view-accessibility-AccessibilityNodeInfo_CollectionItemInfo"
        #[cfg(any(feature = "all", all(feature = "android-view-accessibility-AccessibilityNodeInfo_CollectionItemInfo")))]
        pub fn setCollectionItemInfo<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::accessibility::AccessibilityNodeInfo_CollectionItemInfo>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "setCollectionItemInfo", .descriptor == "(Landroid/view/accessibility/AccessibilityNodeInfo$CollectionItemInfo;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "setCollectionItemInfo\0", "(Landroid/view/accessibility/AccessibilityNodeInfo$CollectionItemInfo;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRangeInfo](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getRangeInfo())
        ///
        /// Required features: "android-view-accessibility-AccessibilityNodeInfo_RangeInfo"
        #[cfg(any(feature = "all", all(feature = "android-view-accessibility-AccessibilityNodeInfo_RangeInfo")))]
        pub fn getRangeInfo<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::accessibility::AccessibilityNodeInfo_RangeInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "getRangeInfo", .descriptor == "()Landroid/view/accessibility/AccessibilityNodeInfo$RangeInfo;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "getRangeInfo\0", "()Landroid/view/accessibility/AccessibilityNodeInfo$RangeInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setRangeInfo](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setRangeInfo(android.view.accessibility.AccessibilityNodeInfo.RangeInfo))
        ///
        /// Required features: "android-view-accessibility-AccessibilityNodeInfo_RangeInfo"
        #[cfg(any(feature = "all", all(feature = "android-view-accessibility-AccessibilityNodeInfo_RangeInfo")))]
        pub fn setRangeInfo<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::accessibility::AccessibilityNodeInfo_RangeInfo>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "setRangeInfo", .descriptor == "(Landroid/view/accessibility/AccessibilityNodeInfo$RangeInfo;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "setRangeInfo\0", "(Landroid/view/accessibility/AccessibilityNodeInfo$RangeInfo;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isContentInvalid](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#isContentInvalid())
        pub fn isContentInvalid<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "isContentInvalid", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "isContentInvalid\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setContentInvalid](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setContentInvalid(boolean))
        pub fn setContentInvalid<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "setContentInvalid", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "setContentInvalid\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isContextClickable](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#isContextClickable())
        pub fn isContextClickable<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "isContextClickable", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "isContextClickable\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setContextClickable](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setContextClickable(boolean))
        pub fn setContextClickable<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "setContextClickable", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "setContextClickable\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLiveRegion](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getLiveRegion())
        pub fn getLiveRegion<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "getLiveRegion", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "getLiveRegion\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setLiveRegion](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setLiveRegion(int))
        pub fn setLiveRegion<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "setLiveRegion", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "setLiveRegion\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isMultiLine](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#isMultiLine())
        pub fn isMultiLine<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "isMultiLine", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "isMultiLine\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setMultiLine](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setMultiLine(boolean))
        pub fn setMultiLine<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "setMultiLine", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "setMultiLine\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [canOpenPopup](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#canOpenPopup())
        pub fn canOpenPopup<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "canOpenPopup", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "canOpenPopup\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setCanOpenPopup](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setCanOpenPopup(boolean))
        pub fn setCanOpenPopup<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "setCanOpenPopup", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "setCanOpenPopup\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isDismissable](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#isDismissable())
        pub fn isDismissable<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "isDismissable", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "isDismissable\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDismissable](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setDismissable(boolean))
        pub fn setDismissable<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "setDismissable", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "setDismissable\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isImportantForAccessibility](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#isImportantForAccessibility())
        pub fn isImportantForAccessibility<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "isImportantForAccessibility", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "isImportantForAccessibility\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setImportantForAccessibility](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setImportantForAccessibility(boolean))
        pub fn setImportantForAccessibility<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "setImportantForAccessibility", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "setImportantForAccessibility\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isScreenReaderFocusable](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#isScreenReaderFocusable())
        pub fn isScreenReaderFocusable<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "isScreenReaderFocusable", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "isScreenReaderFocusable\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setScreenReaderFocusable](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setScreenReaderFocusable(boolean))
        pub fn setScreenReaderFocusable<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "setScreenReaderFocusable", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "setScreenReaderFocusable\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isShowingHintText](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#isShowingHintText())
        pub fn isShowingHintText<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "isShowingHintText", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "isShowingHintText\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setShowingHintText](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setShowingHintText(boolean))
        pub fn setShowingHintText<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "setShowingHintText", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "setShowingHintText\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isHeading](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#isHeading())
        pub fn isHeading<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "isHeading", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "isHeading\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setHeading](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setHeading(boolean))
        pub fn setHeading<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "setHeading", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "setHeading\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isTextEntryKey](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#isTextEntryKey())
        pub fn isTextEntryKey<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "isTextEntryKey", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "isTextEntryKey\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTextEntryKey](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setTextEntryKey(boolean))
        pub fn setTextEntryKey<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "setTextEntryKey", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "setTextEntryKey\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getPackageName](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getPackageName())
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn getPackageName<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::CharSequence>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "getPackageName", .descriptor == "()Ljava/lang/CharSequence;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "getPackageName\0", "()Ljava/lang/CharSequence;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setPackageName](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setPackageName(java.lang.CharSequence))
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn setPackageName<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "setPackageName", .descriptor == "(Ljava/lang/CharSequence;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "setPackageName\0", "(Ljava/lang/CharSequence;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getClassName](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getClassName())
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn getClassName<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::CharSequence>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "getClassName", .descriptor == "()Ljava/lang/CharSequence;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "getClassName\0", "()Ljava/lang/CharSequence;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setClassName](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setClassName(java.lang.CharSequence))
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn setClassName<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "setClassName", .descriptor == "(Ljava/lang/CharSequence;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "setClassName\0", "(Ljava/lang/CharSequence;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getText](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getText())
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn getText<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::CharSequence>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "getText", .descriptor == "()Ljava/lang/CharSequence;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "getText\0", "()Ljava/lang/CharSequence;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setText](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setText(java.lang.CharSequence))
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn setText<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "setText", .descriptor == "(Ljava/lang/CharSequence;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "setText\0", "(Ljava/lang/CharSequence;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getHintText](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getHintText())
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn getHintText<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::CharSequence>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "getHintText", .descriptor == "()Ljava/lang/CharSequence;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "getHintText\0", "()Ljava/lang/CharSequence;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setHintText](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setHintText(java.lang.CharSequence))
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn setHintText<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "setHintText", .descriptor == "(Ljava/lang/CharSequence;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "setHintText\0", "(Ljava/lang/CharSequence;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setError](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setError(java.lang.CharSequence))
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn setError<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "setError", .descriptor == "(Ljava/lang/CharSequence;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "setError\0", "(Ljava/lang/CharSequence;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getError](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getError())
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn getError<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::CharSequence>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "getError", .descriptor == "()Ljava/lang/CharSequence;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "getError\0", "()Ljava/lang/CharSequence;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getContentDescription](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getContentDescription())
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn getContentDescription<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::CharSequence>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "getContentDescription", .descriptor == "()Ljava/lang/CharSequence;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "getContentDescription\0", "()Ljava/lang/CharSequence;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setContentDescription](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setContentDescription(java.lang.CharSequence))
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn setContentDescription<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "setContentDescription", .descriptor == "(Ljava/lang/CharSequence;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "setContentDescription\0", "(Ljava/lang/CharSequence;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTooltipText](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getTooltipText())
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn getTooltipText<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::CharSequence>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "getTooltipText", .descriptor == "()Ljava/lang/CharSequence;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "getTooltipText\0", "()Ljava/lang/CharSequence;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTooltipText](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setTooltipText(java.lang.CharSequence))
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn setTooltipText<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "setTooltipText", .descriptor == "(Ljava/lang/CharSequence;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "setTooltipText\0", "(Ljava/lang/CharSequence;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setLabelFor](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setLabelFor(android.view.View))
        ///
        /// Required features: "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-view-View")))]
        pub fn setLabelFor_View<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "setLabelFor", .descriptor == "(Landroid/view/View;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "setLabelFor\0", "(Landroid/view/View;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setLabelFor](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setLabelFor(android.view.View,%20int))
        ///
        /// Required features: "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-view-View")))]
        pub fn setLabelFor_View_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "setLabelFor", .descriptor == "(Landroid/view/View;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "setLabelFor\0", "(Landroid/view/View;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLabelFor](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getLabelFor())
        ///
        /// Required features: "android-view-accessibility-AccessibilityNodeInfo"
        #[cfg(any(feature = "all", all(feature = "android-view-accessibility-AccessibilityNodeInfo")))]
        pub fn getLabelFor<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::accessibility::AccessibilityNodeInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "getLabelFor", .descriptor == "()Landroid/view/accessibility/AccessibilityNodeInfo;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "getLabelFor\0", "()Landroid/view/accessibility/AccessibilityNodeInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setLabeledBy](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setLabeledBy(android.view.View))
        ///
        /// Required features: "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-view-View")))]
        pub fn setLabeledBy_View<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "setLabeledBy", .descriptor == "(Landroid/view/View;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "setLabeledBy\0", "(Landroid/view/View;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setLabeledBy](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setLabeledBy(android.view.View,%20int))
        ///
        /// Required features: "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-view-View")))]
        pub fn setLabeledBy_View_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "setLabeledBy", .descriptor == "(Landroid/view/View;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "setLabeledBy\0", "(Landroid/view/View;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLabeledBy](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getLabeledBy())
        ///
        /// Required features: "android-view-accessibility-AccessibilityNodeInfo"
        #[cfg(any(feature = "all", all(feature = "android-view-accessibility-AccessibilityNodeInfo")))]
        pub fn getLabeledBy<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::accessibility::AccessibilityNodeInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "getLabeledBy", .descriptor == "()Landroid/view/accessibility/AccessibilityNodeInfo;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "getLabeledBy\0", "()Landroid/view/accessibility/AccessibilityNodeInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setViewIdResourceName](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setViewIdResourceName(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn setViewIdResourceName<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "setViewIdResourceName", .descriptor == "(Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "setViewIdResourceName\0", "(Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getViewIdResourceName](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getViewIdResourceName())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getViewIdResourceName<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "getViewIdResourceName", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "getViewIdResourceName\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTextSelectionStart](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getTextSelectionStart())
        pub fn getTextSelectionStart<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "getTextSelectionStart", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "getTextSelectionStart\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTextSelectionEnd](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getTextSelectionEnd())
        pub fn getTextSelectionEnd<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "getTextSelectionEnd", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "getTextSelectionEnd\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTextSelection](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setTextSelection(int,%20int))
        pub fn setTextSelection<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "setTextSelection", .descriptor == "(II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "setTextSelection\0", "(II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInputType](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getInputType())
        pub fn getInputType<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "getInputType", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "getInputType\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setInputType](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setInputType(int))
        pub fn setInputType<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "setInputType", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "setInputType\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getExtras](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getExtras())
        ///
        /// Required features: "android-os-Bundle"
        #[cfg(any(feature = "all", all(feature = "android-os-Bundle")))]
        pub fn getExtras<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Bundle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "getExtras", .descriptor == "()Landroid/os/Bundle;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "getExtras\0", "()Landroid/os/Bundle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTouchDelegateInfo](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#getTouchDelegateInfo())
        ///
        /// Required features: "android-view-accessibility-AccessibilityNodeInfo_TouchDelegateInfo"
        #[cfg(any(feature = "all", all(feature = "android-view-accessibility-AccessibilityNodeInfo_TouchDelegateInfo")))]
        pub fn getTouchDelegateInfo<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::accessibility::AccessibilityNodeInfo_TouchDelegateInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "getTouchDelegateInfo", .descriptor == "()Landroid/view/accessibility/AccessibilityNodeInfo$TouchDelegateInfo;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "getTouchDelegateInfo\0", "()Landroid/view/accessibility/AccessibilityNodeInfo$TouchDelegateInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTouchDelegateInfo](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#setTouchDelegateInfo(android.view.accessibility.AccessibilityNodeInfo.TouchDelegateInfo))
        ///
        /// Required features: "android-view-accessibility-AccessibilityNodeInfo_TouchDelegateInfo"
        #[cfg(any(feature = "all", all(feature = "android-view-accessibility-AccessibilityNodeInfo_TouchDelegateInfo")))]
        pub fn setTouchDelegateInfo<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::accessibility::AccessibilityNodeInfo_TouchDelegateInfo>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "setTouchDelegateInfo", .descriptor == "(Landroid/view/accessibility/AccessibilityNodeInfo$TouchDelegateInfo;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "setTouchDelegateInfo\0", "(Landroid/view/accessibility/AccessibilityNodeInfo$TouchDelegateInfo;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [describeContents](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#describeContents())
        pub fn describeContents<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "describeContents", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "describeContents\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [obtain](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#obtain(android.view.View))
        ///
        /// Required features: "android-view-View", "android-view-accessibility-AccessibilityNodeInfo"
        #[cfg(any(feature = "all", all(feature = "android-view-View", feature = "android-view-accessibility-AccessibilityNodeInfo")))]
        pub fn obtain_View<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::accessibility::AccessibilityNodeInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC | STATIC, .name == "obtain", .descriptor == "(Landroid/view/View;)Landroid/view/accessibility/AccessibilityNodeInfo;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/view/accessibility/AccessibilityNodeInfo\0", "obtain\0", "(Landroid/view/View;)Landroid/view/accessibility/AccessibilityNodeInfo;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [obtain](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#obtain(android.view.View,%20int))
        ///
        /// Required features: "android-view-View", "android-view-accessibility-AccessibilityNodeInfo"
        #[cfg(any(feature = "all", all(feature = "android-view-View", feature = "android-view-accessibility-AccessibilityNodeInfo")))]
        pub fn obtain_View_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::accessibility::AccessibilityNodeInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC | STATIC, .name == "obtain", .descriptor == "(Landroid/view/View;I)Landroid/view/accessibility/AccessibilityNodeInfo;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/view/accessibility/AccessibilityNodeInfo\0", "obtain\0", "(Landroid/view/View;I)Landroid/view/accessibility/AccessibilityNodeInfo;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [obtain](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#obtain())
        ///
        /// Required features: "android-view-accessibility-AccessibilityNodeInfo"
        #[cfg(any(feature = "all", all(feature = "android-view-accessibility-AccessibilityNodeInfo")))]
        pub fn obtain<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::accessibility::AccessibilityNodeInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC | STATIC, .name == "obtain", .descriptor == "()Landroid/view/accessibility/AccessibilityNodeInfo;"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/view/accessibility/AccessibilityNodeInfo\0", "obtain\0", "()Landroid/view/accessibility/AccessibilityNodeInfo;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [obtain](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#obtain(android.view.accessibility.AccessibilityNodeInfo))
        ///
        /// Required features: "android-view-accessibility-AccessibilityNodeInfo"
        #[cfg(any(feature = "all", all(feature = "android-view-accessibility-AccessibilityNodeInfo")))]
        pub fn obtain_AccessibilityNodeInfo<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::accessibility::AccessibilityNodeInfo>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::accessibility::AccessibilityNodeInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC | STATIC, .name == "obtain", .descriptor == "(Landroid/view/accessibility/AccessibilityNodeInfo;)Landroid/view/accessibility/AccessibilityNodeInfo;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/view/accessibility/AccessibilityNodeInfo\0", "obtain\0", "(Landroid/view/accessibility/AccessibilityNodeInfo;)Landroid/view/accessibility/AccessibilityNodeInfo;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [recycle](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#recycle())
        pub fn recycle<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "recycle", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "recycle\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [writeToParcel](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#writeToParcel(android.os.Parcel,%20int))
        ///
        /// Required features: "android-os-Parcel"
        #[cfg(any(feature = "all", all(feature = "android-os-Parcel")))]
        pub fn writeToParcel<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Parcel>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "writeToParcel", .descriptor == "(Landroid/os/Parcel;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "writeToParcel\0", "(Landroid/os/Parcel;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [equals](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#equals(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn equals<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "equals\0", "(Ljava/lang/Object;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hashCode](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#hashCode())
        pub fn hashCode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "hashCode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "hashCode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [ACTION_ACCESSIBILITY_FOCUS](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#ACTION_ACCESSIBILITY_FOCUS)
        pub const ACTION_ACCESSIBILITY_FOCUS : i32 = 64;

        /// public static final [ACTION_ARGUMENT_COLUMN_INT](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#ACTION_ARGUMENT_COLUMN_INT)
        pub const ACTION_ARGUMENT_COLUMN_INT : &'static str = "android.view.accessibility.action.ARGUMENT_COLUMN_INT";

        /// public static final [ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEAN](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEAN)
        pub const ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEAN : &'static str = "ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEAN";

        /// public static final [ACTION_ARGUMENT_HTML_ELEMENT_STRING](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#ACTION_ARGUMENT_HTML_ELEMENT_STRING)
        pub const ACTION_ARGUMENT_HTML_ELEMENT_STRING : &'static str = "ACTION_ARGUMENT_HTML_ELEMENT_STRING";

        /// public static final [ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT)
        pub const ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT : &'static str = "ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT";

        /// public static final [ACTION_ARGUMENT_MOVE_WINDOW_X](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#ACTION_ARGUMENT_MOVE_WINDOW_X)
        pub const ACTION_ARGUMENT_MOVE_WINDOW_X : &'static str = "ACTION_ARGUMENT_MOVE_WINDOW_X";

        /// public static final [ACTION_ARGUMENT_MOVE_WINDOW_Y](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#ACTION_ARGUMENT_MOVE_WINDOW_Y)
        pub const ACTION_ARGUMENT_MOVE_WINDOW_Y : &'static str = "ACTION_ARGUMENT_MOVE_WINDOW_Y";

        /// public static final [ACTION_ARGUMENT_PROGRESS_VALUE](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#ACTION_ARGUMENT_PROGRESS_VALUE)
        pub const ACTION_ARGUMENT_PROGRESS_VALUE : &'static str = "android.view.accessibility.action.ARGUMENT_PROGRESS_VALUE";

        /// public static final [ACTION_ARGUMENT_ROW_INT](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#ACTION_ARGUMENT_ROW_INT)
        pub const ACTION_ARGUMENT_ROW_INT : &'static str = "android.view.accessibility.action.ARGUMENT_ROW_INT";

        /// public static final [ACTION_ARGUMENT_SELECTION_END_INT](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#ACTION_ARGUMENT_SELECTION_END_INT)
        pub const ACTION_ARGUMENT_SELECTION_END_INT : &'static str = "ACTION_ARGUMENT_SELECTION_END_INT";

        /// public static final [ACTION_ARGUMENT_SELECTION_START_INT](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#ACTION_ARGUMENT_SELECTION_START_INT)
        pub const ACTION_ARGUMENT_SELECTION_START_INT : &'static str = "ACTION_ARGUMENT_SELECTION_START_INT";

        /// public static final [ACTION_ARGUMENT_SET_TEXT_CHARSEQUENCE](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#ACTION_ARGUMENT_SET_TEXT_CHARSEQUENCE)
        pub const ACTION_ARGUMENT_SET_TEXT_CHARSEQUENCE : &'static str = "ACTION_ARGUMENT_SET_TEXT_CHARSEQUENCE";

        /// public static final [ACTION_CLEAR_ACCESSIBILITY_FOCUS](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#ACTION_CLEAR_ACCESSIBILITY_FOCUS)
        pub const ACTION_CLEAR_ACCESSIBILITY_FOCUS : i32 = 128;

        /// public static final [ACTION_CLEAR_FOCUS](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#ACTION_CLEAR_FOCUS)
        pub const ACTION_CLEAR_FOCUS : i32 = 2;

        /// public static final [ACTION_CLEAR_SELECTION](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#ACTION_CLEAR_SELECTION)
        pub const ACTION_CLEAR_SELECTION : i32 = 8;

        /// public static final [ACTION_CLICK](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#ACTION_CLICK)
        pub const ACTION_CLICK : i32 = 16;

        /// public static final [ACTION_COLLAPSE](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#ACTION_COLLAPSE)
        pub const ACTION_COLLAPSE : i32 = 524288;

        /// public static final [ACTION_COPY](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#ACTION_COPY)
        pub const ACTION_COPY : i32 = 16384;

        /// public static final [ACTION_CUT](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#ACTION_CUT)
        pub const ACTION_CUT : i32 = 65536;

        /// public static final [ACTION_DISMISS](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#ACTION_DISMISS)
        pub const ACTION_DISMISS : i32 = 1048576;

        /// public static final [ACTION_EXPAND](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#ACTION_EXPAND)
        pub const ACTION_EXPAND : i32 = 262144;

        /// public static final [ACTION_FOCUS](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#ACTION_FOCUS)
        pub const ACTION_FOCUS : i32 = 1;

        /// public static final [ACTION_LONG_CLICK](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#ACTION_LONG_CLICK)
        pub const ACTION_LONG_CLICK : i32 = 32;

        /// public static final [ACTION_NEXT_AT_MOVEMENT_GRANULARITY](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#ACTION_NEXT_AT_MOVEMENT_GRANULARITY)
        pub const ACTION_NEXT_AT_MOVEMENT_GRANULARITY : i32 = 256;

        /// public static final [ACTION_NEXT_HTML_ELEMENT](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#ACTION_NEXT_HTML_ELEMENT)
        pub const ACTION_NEXT_HTML_ELEMENT : i32 = 1024;

        /// public static final [ACTION_PASTE](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#ACTION_PASTE)
        pub const ACTION_PASTE : i32 = 32768;

        /// public static final [ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY)
        pub const ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY : i32 = 512;

        /// public static final [ACTION_PREVIOUS_HTML_ELEMENT](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#ACTION_PREVIOUS_HTML_ELEMENT)
        pub const ACTION_PREVIOUS_HTML_ELEMENT : i32 = 2048;

        /// public static final [ACTION_SCROLL_BACKWARD](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#ACTION_SCROLL_BACKWARD)
        pub const ACTION_SCROLL_BACKWARD : i32 = 8192;

        /// public static final [ACTION_SCROLL_FORWARD](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#ACTION_SCROLL_FORWARD)
        pub const ACTION_SCROLL_FORWARD : i32 = 4096;

        /// public static final [ACTION_SELECT](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#ACTION_SELECT)
        pub const ACTION_SELECT : i32 = 4;

        /// public static final [ACTION_SET_SELECTION](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#ACTION_SET_SELECTION)
        pub const ACTION_SET_SELECTION : i32 = 131072;

        /// public static final [ACTION_SET_TEXT](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#ACTION_SET_TEXT)
        pub const ACTION_SET_TEXT : i32 = 2097152;

        /// **get** public static final [CREATOR](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#CREATOR)
        ///
        /// Required feature: android-os-Parcelable_Creator
        #[cfg(any(feature = "all", feature = "android-os-Parcelable_Creator"))]
        pub fn CREATOR<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Parcelable_Creator>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/view/accessibility/AccessibilityNodeInfo\0", "CREATOR\0", "Landroid/os/Parcelable$Creator;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// public static final [EXTRA_DATA_TEXT_CHARACTER_LOCATION_ARG_LENGTH](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#EXTRA_DATA_TEXT_CHARACTER_LOCATION_ARG_LENGTH)
        pub const EXTRA_DATA_TEXT_CHARACTER_LOCATION_ARG_LENGTH : &'static str = "android.view.accessibility.extra.DATA_TEXT_CHARACTER_LOCATION_ARG_LENGTH";

        /// public static final [EXTRA_DATA_TEXT_CHARACTER_LOCATION_ARG_START_INDEX](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#EXTRA_DATA_TEXT_CHARACTER_LOCATION_ARG_START_INDEX)
        pub const EXTRA_DATA_TEXT_CHARACTER_LOCATION_ARG_START_INDEX : &'static str = "android.view.accessibility.extra.DATA_TEXT_CHARACTER_LOCATION_ARG_START_INDEX";

        /// public static final [EXTRA_DATA_TEXT_CHARACTER_LOCATION_KEY](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#EXTRA_DATA_TEXT_CHARACTER_LOCATION_KEY)
        pub const EXTRA_DATA_TEXT_CHARACTER_LOCATION_KEY : &'static str = "android.view.accessibility.extra.DATA_TEXT_CHARACTER_LOCATION_KEY";

        /// public static final [FOCUS_ACCESSIBILITY](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#FOCUS_ACCESSIBILITY)
        pub const FOCUS_ACCESSIBILITY : i32 = 2;

        /// public static final [FOCUS_INPUT](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#FOCUS_INPUT)
        pub const FOCUS_INPUT : i32 = 1;

        /// public static final [MOVEMENT_GRANULARITY_CHARACTER](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#MOVEMENT_GRANULARITY_CHARACTER)
        pub const MOVEMENT_GRANULARITY_CHARACTER : i32 = 1;

        /// public static final [MOVEMENT_GRANULARITY_LINE](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#MOVEMENT_GRANULARITY_LINE)
        pub const MOVEMENT_GRANULARITY_LINE : i32 = 4;

        /// public static final [MOVEMENT_GRANULARITY_PAGE](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#MOVEMENT_GRANULARITY_PAGE)
        pub const MOVEMENT_GRANULARITY_PAGE : i32 = 16;

        /// public static final [MOVEMENT_GRANULARITY_PARAGRAPH](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#MOVEMENT_GRANULARITY_PARAGRAPH)
        pub const MOVEMENT_GRANULARITY_PARAGRAPH : i32 = 8;

        /// public static final [MOVEMENT_GRANULARITY_WORD](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.html#MOVEMENT_GRANULARITY_WORD)
        pub const MOVEMENT_GRANULARITY_WORD : i32 = 2;
    }
}
