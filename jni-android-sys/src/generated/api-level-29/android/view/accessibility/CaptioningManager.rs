// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-view-accessibility-CaptioningManager"))]
__jni_bindgen! {
    /// public class [CaptioningManager](https://developer.android.com/reference/android/view/accessibility/CaptioningManager.html)
    ///
    /// Required feature: android-view-accessibility-CaptioningManager
    public class CaptioningManager ("android/view/accessibility/CaptioningManager") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [CaptioningManager](https://developer.android.com/reference/android/view/accessibility/CaptioningManager.html#CaptioningManager(android.content.Context))
        // ///
        // /// Required features: "android-content-Context"
        // #[cfg(any(feature = "all", all(feature = "android-content-Context")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::view::accessibility::CaptioningManager>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/accessibility/CaptioningManager", java.flags == (empty), .name == "<init>", .descriptor == "(Landroid/content/Context;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/CaptioningManager\0", "<init>\0", "(Landroid/content/Context;)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [isEnabled](https://developer.android.com/reference/android/view/accessibility/CaptioningManager.html#isEnabled())
        pub fn isEnabled<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/CaptioningManager", java.flags == PUBLIC | FINAL, .name == "isEnabled", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/CaptioningManager\0", "isEnabled\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLocale](https://developer.android.com/reference/android/view/accessibility/CaptioningManager.html#getLocale())
        ///
        /// Required features: "java-util-Locale"
        #[cfg(any(feature = "all", all(feature = "java-util-Locale")))]
        pub fn getLocale<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Locale>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/CaptioningManager", java.flags == PUBLIC | FINAL, .name == "getLocale", .descriptor == "()Ljava/util/Locale;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/CaptioningManager\0", "getLocale\0", "()Ljava/util/Locale;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getFontScale](https://developer.android.com/reference/android/view/accessibility/CaptioningManager.html#getFontScale())
        pub fn getFontScale<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/CaptioningManager", java.flags == PUBLIC | FINAL, .name == "getFontScale", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/CaptioningManager\0", "getFontScale\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getUserStyle](https://developer.android.com/reference/android/view/accessibility/CaptioningManager.html#getUserStyle())
        ///
        /// Required features: "android-view-accessibility-CaptioningManager_CaptionStyle"
        #[cfg(any(feature = "all", all(feature = "android-view-accessibility-CaptioningManager_CaptionStyle")))]
        pub fn getUserStyle<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::accessibility::CaptioningManager_CaptionStyle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/CaptioningManager", java.flags == PUBLIC, .name == "getUserStyle", .descriptor == "()Landroid/view/accessibility/CaptioningManager$CaptionStyle;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/CaptioningManager\0", "getUserStyle\0", "()Landroid/view/accessibility/CaptioningManager$CaptionStyle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addCaptioningChangeListener](https://developer.android.com/reference/android/view/accessibility/CaptioningManager.html#addCaptioningChangeListener(android.view.accessibility.CaptioningManager.CaptioningChangeListener))
        ///
        /// Required features: "android-view-accessibility-CaptioningManager_CaptioningChangeListener"
        #[cfg(any(feature = "all", all(feature = "android-view-accessibility-CaptioningManager_CaptioningChangeListener")))]
        pub fn addCaptioningChangeListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::accessibility::CaptioningManager_CaptioningChangeListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/CaptioningManager", java.flags == PUBLIC, .name == "addCaptioningChangeListener", .descriptor == "(Landroid/view/accessibility/CaptioningManager$CaptioningChangeListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/CaptioningManager\0", "addCaptioningChangeListener\0", "(Landroid/view/accessibility/CaptioningManager$CaptioningChangeListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeCaptioningChangeListener](https://developer.android.com/reference/android/view/accessibility/CaptioningManager.html#removeCaptioningChangeListener(android.view.accessibility.CaptioningManager.CaptioningChangeListener))
        ///
        /// Required features: "android-view-accessibility-CaptioningManager_CaptioningChangeListener"
        #[cfg(any(feature = "all", all(feature = "android-view-accessibility-CaptioningManager_CaptioningChangeListener")))]
        pub fn removeCaptioningChangeListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::accessibility::CaptioningManager_CaptioningChangeListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/CaptioningManager", java.flags == PUBLIC, .name == "removeCaptioningChangeListener", .descriptor == "(Landroid/view/accessibility/CaptioningManager$CaptioningChangeListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/CaptioningManager\0", "removeCaptioningChangeListener\0", "(Landroid/view/accessibility/CaptioningManager$CaptioningChangeListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
