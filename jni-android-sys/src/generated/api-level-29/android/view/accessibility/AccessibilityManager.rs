// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-view-accessibility-AccessibilityManager"))]
__jni_bindgen! {
    /// public final class [AccessibilityManager](https://developer.android.com/reference/android/view/accessibility/AccessibilityManager.html)
    ///
    /// Required feature: android-view-accessibility-AccessibilityManager
    public final class AccessibilityManager ("android/view/accessibility/AccessibilityManager") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [AccessibilityManager](https://developer.android.com/reference/android/view/accessibility/AccessibilityManager.html#AccessibilityManager())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::view::accessibility::AccessibilityManager>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/accessibility/AccessibilityManager", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityManager\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [isEnabled](https://developer.android.com/reference/android/view/accessibility/AccessibilityManager.html#isEnabled())
        pub fn isEnabled<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityManager", java.flags == PUBLIC, .name == "isEnabled", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityManager\0", "isEnabled\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isTouchExplorationEnabled](https://developer.android.com/reference/android/view/accessibility/AccessibilityManager.html#isTouchExplorationEnabled())
        pub fn isTouchExplorationEnabled<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityManager", java.flags == PUBLIC, .name == "isTouchExplorationEnabled", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityManager\0", "isTouchExplorationEnabled\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [sendAccessibilityEvent](https://developer.android.com/reference/android/view/accessibility/AccessibilityManager.html#sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent))
        ///
        /// Required features: "android-view-accessibility-AccessibilityEvent"
        #[cfg(any(feature = "all", all(feature = "android-view-accessibility-AccessibilityEvent")))]
        pub fn sendAccessibilityEvent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::accessibility::AccessibilityEvent>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityManager", java.flags == PUBLIC, .name == "sendAccessibilityEvent", .descriptor == "(Landroid/view/accessibility/AccessibilityEvent;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityManager\0", "sendAccessibilityEvent\0", "(Landroid/view/accessibility/AccessibilityEvent;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [interrupt](https://developer.android.com/reference/android/view/accessibility/AccessibilityManager.html#interrupt())
        pub fn interrupt<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityManager", java.flags == PUBLIC, .name == "interrupt", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityManager\0", "interrupt\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAccessibilityServiceList](https://developer.android.com/reference/android/view/accessibility/AccessibilityManager.html#getAccessibilityServiceList())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        #[deprecated] pub fn getAccessibilityServiceList<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityManager", java.flags == PUBLIC, .name == "getAccessibilityServiceList", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityManager\0", "getAccessibilityServiceList\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInstalledAccessibilityServiceList](https://developer.android.com/reference/android/view/accessibility/AccessibilityManager.html#getInstalledAccessibilityServiceList())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getInstalledAccessibilityServiceList<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityManager", java.flags == PUBLIC, .name == "getInstalledAccessibilityServiceList", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityManager\0", "getInstalledAccessibilityServiceList\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getEnabledAccessibilityServiceList](https://developer.android.com/reference/android/view/accessibility/AccessibilityManager.html#getEnabledAccessibilityServiceList(int))
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getEnabledAccessibilityServiceList<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityManager", java.flags == PUBLIC, .name == "getEnabledAccessibilityServiceList", .descriptor == "(I)Ljava/util/List;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityManager\0", "getEnabledAccessibilityServiceList\0", "(I)Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addAccessibilityStateChangeListener](https://developer.android.com/reference/android/view/accessibility/AccessibilityManager.html#addAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager.AccessibilityStateChangeListener))
        ///
        /// Required features: "android-view-accessibility-AccessibilityManager_AccessibilityStateChangeListener"
        #[cfg(any(feature = "all", all(feature = "android-view-accessibility-AccessibilityManager_AccessibilityStateChangeListener")))]
        pub fn addAccessibilityStateChangeListener_AccessibilityStateChangeListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::accessibility::AccessibilityManager_AccessibilityStateChangeListener>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityManager", java.flags == PUBLIC, .name == "addAccessibilityStateChangeListener", .descriptor == "(Landroid/view/accessibility/AccessibilityManager$AccessibilityStateChangeListener;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityManager\0", "addAccessibilityStateChangeListener\0", "(Landroid/view/accessibility/AccessibilityManager$AccessibilityStateChangeListener;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addAccessibilityStateChangeListener](https://developer.android.com/reference/android/view/accessibility/AccessibilityManager.html#addAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager.AccessibilityStateChangeListener,%20android.os.Handler))
        ///
        /// Required features: "android-os-Handler", "android-view-accessibility-AccessibilityManager_AccessibilityStateChangeListener"
        #[cfg(any(feature = "all", all(feature = "android-os-Handler", feature = "android-view-accessibility-AccessibilityManager_AccessibilityStateChangeListener")))]
        pub fn addAccessibilityStateChangeListener_AccessibilityStateChangeListener_Handler<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::accessibility::AccessibilityManager_AccessibilityStateChangeListener>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityManager", java.flags == PUBLIC, .name == "addAccessibilityStateChangeListener", .descriptor == "(Landroid/view/accessibility/AccessibilityManager$AccessibilityStateChangeListener;Landroid/os/Handler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityManager\0", "addAccessibilityStateChangeListener\0", "(Landroid/view/accessibility/AccessibilityManager$AccessibilityStateChangeListener;Landroid/os/Handler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeAccessibilityStateChangeListener](https://developer.android.com/reference/android/view/accessibility/AccessibilityManager.html#removeAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager.AccessibilityStateChangeListener))
        ///
        /// Required features: "android-view-accessibility-AccessibilityManager_AccessibilityStateChangeListener"
        #[cfg(any(feature = "all", all(feature = "android-view-accessibility-AccessibilityManager_AccessibilityStateChangeListener")))]
        pub fn removeAccessibilityStateChangeListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::accessibility::AccessibilityManager_AccessibilityStateChangeListener>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityManager", java.flags == PUBLIC, .name == "removeAccessibilityStateChangeListener", .descriptor == "(Landroid/view/accessibility/AccessibilityManager$AccessibilityStateChangeListener;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityManager\0", "removeAccessibilityStateChangeListener\0", "(Landroid/view/accessibility/AccessibilityManager$AccessibilityStateChangeListener;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addTouchExplorationStateChangeListener](https://developer.android.com/reference/android/view/accessibility/AccessibilityManager.html#addTouchExplorationStateChangeListener(android.view.accessibility.AccessibilityManager.TouchExplorationStateChangeListener))
        ///
        /// Required features: "android-view-accessibility-AccessibilityManager_TouchExplorationStateChangeListener"
        #[cfg(any(feature = "all", all(feature = "android-view-accessibility-AccessibilityManager_TouchExplorationStateChangeListener")))]
        pub fn addTouchExplorationStateChangeListener_TouchExplorationStateChangeListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::accessibility::AccessibilityManager_TouchExplorationStateChangeListener>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityManager", java.flags == PUBLIC, .name == "addTouchExplorationStateChangeListener", .descriptor == "(Landroid/view/accessibility/AccessibilityManager$TouchExplorationStateChangeListener;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityManager\0", "addTouchExplorationStateChangeListener\0", "(Landroid/view/accessibility/AccessibilityManager$TouchExplorationStateChangeListener;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addTouchExplorationStateChangeListener](https://developer.android.com/reference/android/view/accessibility/AccessibilityManager.html#addTouchExplorationStateChangeListener(android.view.accessibility.AccessibilityManager.TouchExplorationStateChangeListener,%20android.os.Handler))
        ///
        /// Required features: "android-os-Handler", "android-view-accessibility-AccessibilityManager_TouchExplorationStateChangeListener"
        #[cfg(any(feature = "all", all(feature = "android-os-Handler", feature = "android-view-accessibility-AccessibilityManager_TouchExplorationStateChangeListener")))]
        pub fn addTouchExplorationStateChangeListener_TouchExplorationStateChangeListener_Handler<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::accessibility::AccessibilityManager_TouchExplorationStateChangeListener>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityManager", java.flags == PUBLIC, .name == "addTouchExplorationStateChangeListener", .descriptor == "(Landroid/view/accessibility/AccessibilityManager$TouchExplorationStateChangeListener;Landroid/os/Handler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityManager\0", "addTouchExplorationStateChangeListener\0", "(Landroid/view/accessibility/AccessibilityManager$TouchExplorationStateChangeListener;Landroid/os/Handler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeTouchExplorationStateChangeListener](https://developer.android.com/reference/android/view/accessibility/AccessibilityManager.html#removeTouchExplorationStateChangeListener(android.view.accessibility.AccessibilityManager.TouchExplorationStateChangeListener))
        ///
        /// Required features: "android-view-accessibility-AccessibilityManager_TouchExplorationStateChangeListener"
        #[cfg(any(feature = "all", all(feature = "android-view-accessibility-AccessibilityManager_TouchExplorationStateChangeListener")))]
        pub fn removeTouchExplorationStateChangeListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::accessibility::AccessibilityManager_TouchExplorationStateChangeListener>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityManager", java.flags == PUBLIC, .name == "removeTouchExplorationStateChangeListener", .descriptor == "(Landroid/view/accessibility/AccessibilityManager$TouchExplorationStateChangeListener;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityManager\0", "removeTouchExplorationStateChangeListener\0", "(Landroid/view/accessibility/AccessibilityManager$TouchExplorationStateChangeListener;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addAccessibilityRequestPreparer](https://developer.android.com/reference/android/view/accessibility/AccessibilityManager.html#addAccessibilityRequestPreparer(android.view.accessibility.AccessibilityRequestPreparer))
        ///
        /// Required features: "android-view-accessibility-AccessibilityRequestPreparer"
        #[cfg(any(feature = "all", all(feature = "android-view-accessibility-AccessibilityRequestPreparer")))]
        pub fn addAccessibilityRequestPreparer<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::accessibility::AccessibilityRequestPreparer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityManager", java.flags == PUBLIC, .name == "addAccessibilityRequestPreparer", .descriptor == "(Landroid/view/accessibility/AccessibilityRequestPreparer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityManager\0", "addAccessibilityRequestPreparer\0", "(Landroid/view/accessibility/AccessibilityRequestPreparer;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeAccessibilityRequestPreparer](https://developer.android.com/reference/android/view/accessibility/AccessibilityManager.html#removeAccessibilityRequestPreparer(android.view.accessibility.AccessibilityRequestPreparer))
        ///
        /// Required features: "android-view-accessibility-AccessibilityRequestPreparer"
        #[cfg(any(feature = "all", all(feature = "android-view-accessibility-AccessibilityRequestPreparer")))]
        pub fn removeAccessibilityRequestPreparer<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::accessibility::AccessibilityRequestPreparer>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityManager", java.flags == PUBLIC, .name == "removeAccessibilityRequestPreparer", .descriptor == "(Landroid/view/accessibility/AccessibilityRequestPreparer;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityManager\0", "removeAccessibilityRequestPreparer\0", "(Landroid/view/accessibility/AccessibilityRequestPreparer;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRecommendedTimeoutMillis](https://developer.android.com/reference/android/view/accessibility/AccessibilityManager.html#getRecommendedTimeoutMillis(int,%20int))
        pub fn getRecommendedTimeoutMillis<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityManager", java.flags == PUBLIC, .name == "getRecommendedTimeoutMillis", .descriptor == "(II)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityManager\0", "getRecommendedTimeoutMillis\0", "(II)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isAccessibilityButtonSupported](https://developer.android.com/reference/android/view/accessibility/AccessibilityManager.html#isAccessibilityButtonSupported())
        pub fn isAccessibilityButtonSupported<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityManager", java.flags == PUBLIC | STATIC, .name == "isAccessibilityButtonSupported", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/view/accessibility/AccessibilityManager\0", "isAccessibilityButtonSupported\0", "()Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [FLAG_CONTENT_CONTROLS](https://developer.android.com/reference/android/view/accessibility/AccessibilityManager.html#FLAG_CONTENT_CONTROLS)
        pub const FLAG_CONTENT_CONTROLS : i32 = 4;

        /// public static final [FLAG_CONTENT_ICONS](https://developer.android.com/reference/android/view/accessibility/AccessibilityManager.html#FLAG_CONTENT_ICONS)
        pub const FLAG_CONTENT_ICONS : i32 = 1;

        /// public static final [FLAG_CONTENT_TEXT](https://developer.android.com/reference/android/view/accessibility/AccessibilityManager.html#FLAG_CONTENT_TEXT)
        pub const FLAG_CONTENT_TEXT : i32 = 2;
    }
}
