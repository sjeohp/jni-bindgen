// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-view-accessibility-AccessibilityNodeInfo_CollectionItemInfo"))]
__jni_bindgen! {
    /// public final class [AccessibilityNodeInfo.CollectionItemInfo](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionItemInfo.html)
    ///
    /// Required feature: android-view-accessibility-AccessibilityNodeInfo_CollectionItemInfo
    public final class AccessibilityNodeInfo_CollectionItemInfo ("android/view/accessibility/AccessibilityNodeInfo$CollectionItemInfo") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [CollectionItemInfo](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionItemInfo.html#CollectionItemInfo(int,%20int,%20int,%20int,%20boolean,%20boolean))
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32, arg3: i32, arg4: bool, arg5: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::view::accessibility::AccessibilityNodeInfo_CollectionItemInfo>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/accessibility/AccessibilityNodeInfo$CollectionItemInfo", java.flags == (empty), .name == "<init>", .descriptor == "(IIIIZZ)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5)];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo$CollectionItemInfo\0", "<init>\0", "(IIIIZZ)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [obtain](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionItemInfo.html#obtain(int,%20int,%20int,%20int,%20boolean))
        ///
        /// Required features: "android-view-accessibility-AccessibilityNodeInfo_CollectionItemInfo"
        #[cfg(any(feature = "all", all(feature = "android-view-accessibility-AccessibilityNodeInfo_CollectionItemInfo")))]
        pub fn obtain_int_int_int_int_boolean<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32, arg3: i32, arg4: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::accessibility::AccessibilityNodeInfo_CollectionItemInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo$CollectionItemInfo", java.flags == PUBLIC | STATIC, .name == "obtain", .descriptor == "(IIIIZ)Landroid/view/accessibility/AccessibilityNodeInfo$CollectionItemInfo;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/view/accessibility/AccessibilityNodeInfo$CollectionItemInfo\0", "obtain\0", "(IIIIZ)Landroid/view/accessibility/AccessibilityNodeInfo$CollectionItemInfo;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [obtain](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionItemInfo.html#obtain(int,%20int,%20int,%20int,%20boolean,%20boolean))
        ///
        /// Required features: "android-view-accessibility-AccessibilityNodeInfo_CollectionItemInfo"
        #[cfg(any(feature = "all", all(feature = "android-view-accessibility-AccessibilityNodeInfo_CollectionItemInfo")))]
        pub fn obtain_int_int_int_int_boolean_boolean<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32, arg3: i32, arg4: bool, arg5: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::accessibility::AccessibilityNodeInfo_CollectionItemInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo$CollectionItemInfo", java.flags == PUBLIC | STATIC, .name == "obtain", .descriptor == "(IIIIZZ)Landroid/view/accessibility/AccessibilityNodeInfo$CollectionItemInfo;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/view/accessibility/AccessibilityNodeInfo$CollectionItemInfo\0", "obtain\0", "(IIIIZZ)Landroid/view/accessibility/AccessibilityNodeInfo$CollectionItemInfo;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getColumnIndex](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionItemInfo.html#getColumnIndex())
        pub fn getColumnIndex<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo$CollectionItemInfo", java.flags == PUBLIC, .name == "getColumnIndex", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo$CollectionItemInfo\0", "getColumnIndex\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRowIndex](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionItemInfo.html#getRowIndex())
        pub fn getRowIndex<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo$CollectionItemInfo", java.flags == PUBLIC, .name == "getRowIndex", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo$CollectionItemInfo\0", "getRowIndex\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getColumnSpan](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionItemInfo.html#getColumnSpan())
        pub fn getColumnSpan<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo$CollectionItemInfo", java.flags == PUBLIC, .name == "getColumnSpan", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo$CollectionItemInfo\0", "getColumnSpan\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getRowSpan](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionItemInfo.html#getRowSpan())
        pub fn getRowSpan<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo$CollectionItemInfo", java.flags == PUBLIC, .name == "getRowSpan", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo$CollectionItemInfo\0", "getRowSpan\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isHeading](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionItemInfo.html#isHeading())
        #[deprecated] pub fn isHeading<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo$CollectionItemInfo", java.flags == PUBLIC, .name == "isHeading", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo$CollectionItemInfo\0", "isHeading\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isSelected](https://developer.android.com/reference/android/view/accessibility/AccessibilityNodeInfo.CollectionItemInfo.html#isSelected())
        pub fn isSelected<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/accessibility/AccessibilityNodeInfo$CollectionItemInfo", java.flags == PUBLIC, .name == "isSelected", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/accessibility/AccessibilityNodeInfo$CollectionItemInfo\0", "isSelected\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
