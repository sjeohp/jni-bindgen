// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-view-GestureDetector"))]
__jni_bindgen! {
    /// public class [GestureDetector](https://developer.android.com/reference/android/view/GestureDetector.html)
    ///
    /// Required feature: android-view-GestureDetector
    public class GestureDetector ("android/view/GestureDetector") extends crate::java::lang::Object {

        /// [GestureDetector](https://developer.android.com/reference/android/view/GestureDetector.html#GestureDetector(android.view.GestureDetector.OnGestureListener,%20android.os.Handler))
        ///
        /// Required features: "android-os-Handler", "android-view-GestureDetector_OnGestureListener"
        #[cfg(any(feature = "all", all(feature = "android-os-Handler", feature = "android-view-GestureDetector_OnGestureListener")))]
        #[deprecated] pub fn new_OnGestureListener_Handler<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::GestureDetector_OnGestureListener>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::view::GestureDetector>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/GestureDetector", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/view/GestureDetector$OnGestureListener;Landroid/os/Handler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/GestureDetector\0", "<init>\0", "(Landroid/view/GestureDetector$OnGestureListener;Landroid/os/Handler;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [GestureDetector](https://developer.android.com/reference/android/view/GestureDetector.html#GestureDetector(android.view.GestureDetector.OnGestureListener))
        ///
        /// Required features: "android-view-GestureDetector_OnGestureListener"
        #[cfg(any(feature = "all", all(feature = "android-view-GestureDetector_OnGestureListener")))]
        #[deprecated] pub fn new_OnGestureListener<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::GestureDetector_OnGestureListener>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::view::GestureDetector>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/GestureDetector", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/view/GestureDetector$OnGestureListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/GestureDetector\0", "<init>\0", "(Landroid/view/GestureDetector$OnGestureListener;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [GestureDetector](https://developer.android.com/reference/android/view/GestureDetector.html#GestureDetector(android.content.Context,%20android.view.GestureDetector.OnGestureListener))
        ///
        /// Required features: "android-content-Context", "android-view-GestureDetector_OnGestureListener"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-view-GestureDetector_OnGestureListener")))]
        pub fn new_Context_OnGestureListener<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::GestureDetector_OnGestureListener>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::view::GestureDetector>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/GestureDetector", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/content/Context;Landroid/view/GestureDetector$OnGestureListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/GestureDetector\0", "<init>\0", "(Landroid/content/Context;Landroid/view/GestureDetector$OnGestureListener;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [GestureDetector](https://developer.android.com/reference/android/view/GestureDetector.html#GestureDetector(android.content.Context,%20android.view.GestureDetector.OnGestureListener,%20android.os.Handler))
        ///
        /// Required features: "android-content-Context", "android-os-Handler", "android-view-GestureDetector_OnGestureListener"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-os-Handler", feature = "android-view-GestureDetector_OnGestureListener")))]
        pub fn new_Context_OnGestureListener_Handler<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::GestureDetector_OnGestureListener>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::view::GestureDetector>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/GestureDetector", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/content/Context;Landroid/view/GestureDetector$OnGestureListener;Landroid/os/Handler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/GestureDetector\0", "<init>\0", "(Landroid/content/Context;Landroid/view/GestureDetector$OnGestureListener;Landroid/os/Handler;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [GestureDetector](https://developer.android.com/reference/android/view/GestureDetector.html#GestureDetector(android.content.Context,%20android.view.GestureDetector.OnGestureListener,%20android.os.Handler,%20boolean))
        ///
        /// Required features: "android-content-Context", "android-os-Handler", "android-view-GestureDetector_OnGestureListener"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-os-Handler", feature = "android-view-GestureDetector_OnGestureListener")))]
        pub fn new_Context_OnGestureListener_Handler_boolean<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::GestureDetector_OnGestureListener>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>, arg3: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::view::GestureDetector>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/GestureDetector", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/content/Context;Landroid/view/GestureDetector$OnGestureListener;Landroid/os/Handler;Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/GestureDetector\0", "<init>\0", "(Landroid/content/Context;Landroid/view/GestureDetector$OnGestureListener;Landroid/os/Handler;Z)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOnDoubleTapListener](https://developer.android.com/reference/android/view/GestureDetector.html#setOnDoubleTapListener(android.view.GestureDetector.OnDoubleTapListener))
        ///
        /// Required features: "android-view-GestureDetector_OnDoubleTapListener"
        #[cfg(any(feature = "all", all(feature = "android-view-GestureDetector_OnDoubleTapListener")))]
        pub fn setOnDoubleTapListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::GestureDetector_OnDoubleTapListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/GestureDetector", java.flags == PUBLIC, .name == "setOnDoubleTapListener", .descriptor == "(Landroid/view/GestureDetector$OnDoubleTapListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/GestureDetector\0", "setOnDoubleTapListener\0", "(Landroid/view/GestureDetector$OnDoubleTapListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setContextClickListener](https://developer.android.com/reference/android/view/GestureDetector.html#setContextClickListener(android.view.GestureDetector.OnContextClickListener))
        ///
        /// Required features: "android-view-GestureDetector_OnContextClickListener"
        #[cfg(any(feature = "all", all(feature = "android-view-GestureDetector_OnContextClickListener")))]
        pub fn setContextClickListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::GestureDetector_OnContextClickListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/GestureDetector", java.flags == PUBLIC, .name == "setContextClickListener", .descriptor == "(Landroid/view/GestureDetector$OnContextClickListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/GestureDetector\0", "setContextClickListener\0", "(Landroid/view/GestureDetector$OnContextClickListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setIsLongpressEnabled](https://developer.android.com/reference/android/view/GestureDetector.html#setIsLongpressEnabled(boolean))
        pub fn setIsLongpressEnabled<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/GestureDetector", java.flags == PUBLIC, .name == "setIsLongpressEnabled", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/GestureDetector\0", "setIsLongpressEnabled\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isLongpressEnabled](https://developer.android.com/reference/android/view/GestureDetector.html#isLongpressEnabled())
        pub fn isLongpressEnabled<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/GestureDetector", java.flags == PUBLIC, .name == "isLongpressEnabled", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/GestureDetector\0", "isLongpressEnabled\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onTouchEvent](https://developer.android.com/reference/android/view/GestureDetector.html#onTouchEvent(android.view.MotionEvent))
        ///
        /// Required features: "android-view-MotionEvent"
        #[cfg(any(feature = "all", all(feature = "android-view-MotionEvent")))]
        pub fn onTouchEvent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::MotionEvent>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/GestureDetector", java.flags == PUBLIC, .name == "onTouchEvent", .descriptor == "(Landroid/view/MotionEvent;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/GestureDetector\0", "onTouchEvent\0", "(Landroid/view/MotionEvent;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onGenericMotionEvent](https://developer.android.com/reference/android/view/GestureDetector.html#onGenericMotionEvent(android.view.MotionEvent))
        ///
        /// Required features: "android-view-MotionEvent"
        #[cfg(any(feature = "all", all(feature = "android-view-MotionEvent")))]
        pub fn onGenericMotionEvent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::MotionEvent>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/GestureDetector", java.flags == PUBLIC, .name == "onGenericMotionEvent", .descriptor == "(Landroid/view/MotionEvent;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/GestureDetector\0", "onGenericMotionEvent\0", "(Landroid/view/MotionEvent;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }
    }
}
