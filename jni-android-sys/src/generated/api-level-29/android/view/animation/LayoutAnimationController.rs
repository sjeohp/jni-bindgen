// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-view-animation-LayoutAnimationController"))]
__jni_bindgen! {
    /// public class [LayoutAnimationController](https://developer.android.com/reference/android/view/animation/LayoutAnimationController.html)
    ///
    /// Required feature: android-view-animation-LayoutAnimationController
    public class LayoutAnimationController ("android/view/animation/LayoutAnimationController") extends crate::java::lang::Object {

        /// [LayoutAnimationController](https://developer.android.com/reference/android/view/animation/LayoutAnimationController.html#LayoutAnimationController(android.content.Context,%20android.util.AttributeSet))
        ///
        /// Required features: "android-content-Context", "android-util-AttributeSet"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-util-AttributeSet")))]
        pub fn new_Context_AttributeSet<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::util::AttributeSet>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::view::animation::LayoutAnimationController>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/animation/LayoutAnimationController", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/content/Context;Landroid/util/AttributeSet;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/animation/LayoutAnimationController\0", "<init>\0", "(Landroid/content/Context;Landroid/util/AttributeSet;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [LayoutAnimationController](https://developer.android.com/reference/android/view/animation/LayoutAnimationController.html#LayoutAnimationController(android.view.animation.Animation))
        ///
        /// Required features: "android-view-animation-Animation"
        #[cfg(any(feature = "all", all(feature = "android-view-animation-Animation")))]
        pub fn new_Animation<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::animation::Animation>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::view::animation::LayoutAnimationController>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/animation/LayoutAnimationController", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/view/animation/Animation;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/animation/LayoutAnimationController\0", "<init>\0", "(Landroid/view/animation/Animation;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [LayoutAnimationController](https://developer.android.com/reference/android/view/animation/LayoutAnimationController.html#LayoutAnimationController(android.view.animation.Animation,%20float))
        ///
        /// Required features: "android-view-animation-Animation"
        #[cfg(any(feature = "all", all(feature = "android-view-animation-Animation")))]
        pub fn new_Animation_float<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::animation::Animation>>, arg1: f32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::view::animation::LayoutAnimationController>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/animation/LayoutAnimationController", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/view/animation/Animation;F)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/animation/LayoutAnimationController\0", "<init>\0", "(Landroid/view/animation/Animation;F)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getOrder](https://developer.android.com/reference/android/view/animation/LayoutAnimationController.html#getOrder())
        pub fn getOrder<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/animation/LayoutAnimationController", java.flags == PUBLIC, .name == "getOrder", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/animation/LayoutAnimationController\0", "getOrder\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOrder](https://developer.android.com/reference/android/view/animation/LayoutAnimationController.html#setOrder(int))
        pub fn setOrder<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/animation/LayoutAnimationController", java.flags == PUBLIC, .name == "setOrder", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/animation/LayoutAnimationController\0", "setOrder\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAnimation](https://developer.android.com/reference/android/view/animation/LayoutAnimationController.html#setAnimation(android.content.Context,%20int))
        ///
        /// Required features: "android-content-Context"
        #[cfg(any(feature = "all", all(feature = "android-content-Context")))]
        pub fn setAnimation_Context_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/animation/LayoutAnimationController", java.flags == PUBLIC, .name == "setAnimation", .descriptor == "(Landroid/content/Context;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/animation/LayoutAnimationController\0", "setAnimation\0", "(Landroid/content/Context;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAnimation](https://developer.android.com/reference/android/view/animation/LayoutAnimationController.html#setAnimation(android.view.animation.Animation))
        ///
        /// Required features: "android-view-animation-Animation"
        #[cfg(any(feature = "all", all(feature = "android-view-animation-Animation")))]
        pub fn setAnimation_Animation<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::animation::Animation>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/animation/LayoutAnimationController", java.flags == PUBLIC, .name == "setAnimation", .descriptor == "(Landroid/view/animation/Animation;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/animation/LayoutAnimationController\0", "setAnimation\0", "(Landroid/view/animation/Animation;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAnimation](https://developer.android.com/reference/android/view/animation/LayoutAnimationController.html#getAnimation())
        ///
        /// Required features: "android-view-animation-Animation"
        #[cfg(any(feature = "all", all(feature = "android-view-animation-Animation")))]
        pub fn getAnimation<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::animation::Animation>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/animation/LayoutAnimationController", java.flags == PUBLIC, .name == "getAnimation", .descriptor == "()Landroid/view/animation/Animation;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/animation/LayoutAnimationController\0", "getAnimation\0", "()Landroid/view/animation/Animation;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setInterpolator](https://developer.android.com/reference/android/view/animation/LayoutAnimationController.html#setInterpolator(android.content.Context,%20int))
        ///
        /// Required features: "android-content-Context"
        #[cfg(any(feature = "all", all(feature = "android-content-Context")))]
        pub fn setInterpolator_Context_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/animation/LayoutAnimationController", java.flags == PUBLIC, .name == "setInterpolator", .descriptor == "(Landroid/content/Context;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/animation/LayoutAnimationController\0", "setInterpolator\0", "(Landroid/content/Context;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setInterpolator](https://developer.android.com/reference/android/view/animation/LayoutAnimationController.html#setInterpolator(android.view.animation.Interpolator))
        ///
        /// Required features: "android-view-animation-Interpolator"
        #[cfg(any(feature = "all", all(feature = "android-view-animation-Interpolator")))]
        pub fn setInterpolator_Interpolator<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::animation::Interpolator>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/animation/LayoutAnimationController", java.flags == PUBLIC, .name == "setInterpolator", .descriptor == "(Landroid/view/animation/Interpolator;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/animation/LayoutAnimationController\0", "setInterpolator\0", "(Landroid/view/animation/Interpolator;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getInterpolator](https://developer.android.com/reference/android/view/animation/LayoutAnimationController.html#getInterpolator())
        ///
        /// Required features: "android-view-animation-Interpolator"
        #[cfg(any(feature = "all", all(feature = "android-view-animation-Interpolator")))]
        pub fn getInterpolator<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::animation::Interpolator>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/animation/LayoutAnimationController", java.flags == PUBLIC, .name == "getInterpolator", .descriptor == "()Landroid/view/animation/Interpolator;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/animation/LayoutAnimationController\0", "getInterpolator\0", "()Landroid/view/animation/Interpolator;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDelay](https://developer.android.com/reference/android/view/animation/LayoutAnimationController.html#getDelay())
        pub fn getDelay<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/animation/LayoutAnimationController", java.flags == PUBLIC, .name == "getDelay", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/animation/LayoutAnimationController\0", "getDelay\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDelay](https://developer.android.com/reference/android/view/animation/LayoutAnimationController.html#setDelay(float))
        pub fn setDelay<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/animation/LayoutAnimationController", java.flags == PUBLIC, .name == "setDelay", .descriptor == "(F)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/animation/LayoutAnimationController\0", "setDelay\0", "(F)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [willOverlap](https://developer.android.com/reference/android/view/animation/LayoutAnimationController.html#willOverlap())
        pub fn willOverlap<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/animation/LayoutAnimationController", java.flags == PUBLIC, .name == "willOverlap", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/animation/LayoutAnimationController\0", "willOverlap\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [start](https://developer.android.com/reference/android/view/animation/LayoutAnimationController.html#start())
        pub fn start<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/animation/LayoutAnimationController", java.flags == PUBLIC, .name == "start", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/animation/LayoutAnimationController\0", "start\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAnimationForView](https://developer.android.com/reference/android/view/animation/LayoutAnimationController.html#getAnimationForView(android.view.View))
        ///
        /// Required features: "android-view-View", "android-view-animation-Animation"
        #[cfg(any(feature = "all", all(feature = "android-view-View", feature = "android-view-animation-Animation")))]
        pub fn getAnimationForView<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::animation::Animation>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/animation/LayoutAnimationController", java.flags == PUBLIC | FINAL, .name == "getAnimationForView", .descriptor == "(Landroid/view/View;)Landroid/view/animation/Animation;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/animation/LayoutAnimationController\0", "getAnimationForView\0", "(Landroid/view/View;)Landroid/view/animation/Animation;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isDone](https://developer.android.com/reference/android/view/animation/LayoutAnimationController.html#isDone())
        pub fn isDone<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/animation/LayoutAnimationController", java.flags == PUBLIC, .name == "isDone", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/animation/LayoutAnimationController\0", "isDone\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [getDelayForView](https://developer.android.com/reference/android/view/animation/LayoutAnimationController.html#getDelayForView(android.view.View))
        // ///
        // /// Required features: "android-view-View"
        // #[cfg(any(feature = "all", all(feature = "android-view-View")))]
        // fn getDelayForView<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/animation/LayoutAnimationController", java.flags == PROTECTED, .name == "getDelayForView", .descriptor == "(Landroid/view/View;)J"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/animation/LayoutAnimationController\0", "getDelayForView\0", "(Landroid/view/View;)J\0");
        //         __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [getTransformedIndex](https://developer.android.com/reference/android/view/animation/LayoutAnimationController.html#getTransformedIndex(android.view.animation.LayoutAnimationController.AnimationParameters))
        // ///
        // /// Required features: "android-view-animation-LayoutAnimationController_AnimationParameters"
        // #[cfg(any(feature = "all", all(feature = "android-view-animation-LayoutAnimationController_AnimationParameters")))]
        // fn getTransformedIndex<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::animation::LayoutAnimationController_AnimationParameters>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/animation/LayoutAnimationController", java.flags == PROTECTED, .name == "getTransformedIndex", .descriptor == "(Landroid/view/animation/LayoutAnimationController$AnimationParameters;)I"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/animation/LayoutAnimationController\0", "getTransformedIndex\0", "(Landroid/view/animation/LayoutAnimationController$AnimationParameters;)I\0");
        //         __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// public static final [ORDER_NORMAL](https://developer.android.com/reference/android/view/animation/LayoutAnimationController.html#ORDER_NORMAL)
        pub const ORDER_NORMAL : i32 = 0;

        /// public static final [ORDER_RANDOM](https://developer.android.com/reference/android/view/animation/LayoutAnimationController.html#ORDER_RANDOM)
        pub const ORDER_RANDOM : i32 = 2;

        /// public static final [ORDER_REVERSE](https://developer.android.com/reference/android/view/animation/LayoutAnimationController.html#ORDER_REVERSE)
        pub const ORDER_REVERSE : i32 = 1;

        // // Not emitting: Non-public field
        // /// **get** protected [mAnimation](https://developer.android.com/reference/android/view/animation/LayoutAnimationController.html#mAnimation)
        // ///
        // /// Required feature: android-view-animation-Animation
        // #[cfg(any(feature = "all", feature = "android-view-animation-Animation"))]
        // pub fn mAnimation<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::animation::Animation>> {
        //     unsafe {
        //         let env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (class, field) = env.require_class_field("android/view/animation/LayoutAnimationController\0", "mAnimation\0", "Landroid/view/animation/Animation;\0");
        //         env.get_object_field(class, field)
        //     }
        // }

        // /// **set** protected [mAnimation](https://developer.android.com/reference/android/view/animation/LayoutAnimationController.html#mAnimation)
        // ///
        // /// Required feature: android-view-animation-Animation
        // #[cfg(any(feature = "all", feature = "android-view-animation-Animation"))]
        // pub fn set_mAnimation<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::android::view::animation::Animation>>) {
        //     unsafe {
        //         let env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (class, field) = env.require_class_field("android/view/animation/LayoutAnimationController\0", "mAnimation\0", "Landroid/view/animation/Animation;\0");
        //         env.set_object_field(class, field, value)
        //     }
        // }

        // // Not emitting: Non-public field
        // /// **get** protected [mInterpolator](https://developer.android.com/reference/android/view/animation/LayoutAnimationController.html#mInterpolator)
        // ///
        // /// Required feature: android-view-animation-Interpolator
        // #[cfg(any(feature = "all", feature = "android-view-animation-Interpolator"))]
        // pub fn mInterpolator<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::animation::Interpolator>> {
        //     unsafe {
        //         let env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (class, field) = env.require_class_field("android/view/animation/LayoutAnimationController\0", "mInterpolator\0", "Landroid/view/animation/Interpolator;\0");
        //         env.get_object_field(class, field)
        //     }
        // }

        // /// **set** protected [mInterpolator](https://developer.android.com/reference/android/view/animation/LayoutAnimationController.html#mInterpolator)
        // ///
        // /// Required feature: android-view-animation-Interpolator
        // #[cfg(any(feature = "all", feature = "android-view-animation-Interpolator"))]
        // pub fn set_mInterpolator<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::android::view::animation::Interpolator>>) {
        //     unsafe {
        //         let env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (class, field) = env.require_class_field("android/view/animation/LayoutAnimationController\0", "mInterpolator\0", "Landroid/view/animation/Interpolator;\0");
        //         env.set_object_field(class, field, value)
        //     }
        // }

        // // Not emitting: Non-public field
        // /// **get** protected [mRandomizer](https://developer.android.com/reference/android/view/animation/LayoutAnimationController.html#mRandomizer)
        // ///
        // /// Required feature: java-util-Random
        // #[cfg(any(feature = "all", feature = "java-util-Random"))]
        // pub fn mRandomizer<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::Random>> {
        //     unsafe {
        //         let env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (class, field) = env.require_class_field("android/view/animation/LayoutAnimationController\0", "mRandomizer\0", "Ljava/util/Random;\0");
        //         env.get_object_field(class, field)
        //     }
        // }

        // /// **set** protected [mRandomizer](https://developer.android.com/reference/android/view/animation/LayoutAnimationController.html#mRandomizer)
        // ///
        // /// Required feature: java-util-Random
        // #[cfg(any(feature = "all", feature = "java-util-Random"))]
        // pub fn set_mRandomizer<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::java::util::Random>>) {
        //     unsafe {
        //         let env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (class, field) = env.require_class_field("android/view/animation/LayoutAnimationController\0", "mRandomizer\0", "Ljava/util/Random;\0");
        //         env.set_object_field(class, field, value)
        //     }
        // }
    }
}
