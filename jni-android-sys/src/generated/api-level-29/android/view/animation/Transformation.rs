// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-view-animation-Transformation"))]
__jni_bindgen! {
    /// public class [Transformation](https://developer.android.com/reference/android/view/animation/Transformation.html)
    ///
    /// Required feature: android-view-animation-Transformation
    public class Transformation ("android/view/animation/Transformation") extends crate::java::lang::Object {

        /// [Transformation](https://developer.android.com/reference/android/view/animation/Transformation.html#Transformation())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::view::animation::Transformation>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/animation/Transformation", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/animation/Transformation\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clear](https://developer.android.com/reference/android/view/animation/Transformation.html#clear())
        pub fn clear<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/animation/Transformation", java.flags == PUBLIC, .name == "clear", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/animation/Transformation\0", "clear\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTransformationType](https://developer.android.com/reference/android/view/animation/Transformation.html#getTransformationType())
        pub fn getTransformationType<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/animation/Transformation", java.flags == PUBLIC, .name == "getTransformationType", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/animation/Transformation\0", "getTransformationType\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTransformationType](https://developer.android.com/reference/android/view/animation/Transformation.html#setTransformationType(int))
        pub fn setTransformationType<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/animation/Transformation", java.flags == PUBLIC, .name == "setTransformationType", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/animation/Transformation\0", "setTransformationType\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [set](https://developer.android.com/reference/android/view/animation/Transformation.html#set(android.view.animation.Transformation))
        ///
        /// Required features: "android-view-animation-Transformation"
        #[cfg(any(feature = "all", all(feature = "android-view-animation-Transformation")))]
        pub fn set<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::animation::Transformation>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/animation/Transformation", java.flags == PUBLIC, .name == "set", .descriptor == "(Landroid/view/animation/Transformation;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/animation/Transformation\0", "set\0", "(Landroid/view/animation/Transformation;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [compose](https://developer.android.com/reference/android/view/animation/Transformation.html#compose(android.view.animation.Transformation))
        ///
        /// Required features: "android-view-animation-Transformation"
        #[cfg(any(feature = "all", all(feature = "android-view-animation-Transformation")))]
        pub fn compose<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::animation::Transformation>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/animation/Transformation", java.flags == PUBLIC, .name == "compose", .descriptor == "(Landroid/view/animation/Transformation;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/animation/Transformation\0", "compose\0", "(Landroid/view/animation/Transformation;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMatrix](https://developer.android.com/reference/android/view/animation/Transformation.html#getMatrix())
        ///
        /// Required features: "android-graphics-Matrix"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Matrix")))]
        pub fn getMatrix<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Matrix>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/animation/Transformation", java.flags == PUBLIC, .name == "getMatrix", .descriptor == "()Landroid/graphics/Matrix;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/animation/Transformation\0", "getMatrix\0", "()Landroid/graphics/Matrix;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAlpha](https://developer.android.com/reference/android/view/animation/Transformation.html#setAlpha(float))
        pub fn setAlpha<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/animation/Transformation", java.flags == PUBLIC, .name == "setAlpha", .descriptor == "(F)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/animation/Transformation\0", "setAlpha\0", "(F)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAlpha](https://developer.android.com/reference/android/view/animation/Transformation.html#getAlpha())
        pub fn getAlpha<'env>(&'env self) -> __jni_bindgen::std::result::Result<f32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/animation/Transformation", java.flags == PUBLIC, .name == "getAlpha", .descriptor == "()F"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/animation/Transformation\0", "getAlpha\0", "()F\0");
                __jni_env.call_float_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/android/view/animation/Transformation.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/animation/Transformation", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/animation/Transformation\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toShortString](https://developer.android.com/reference/android/view/animation/Transformation.html#toShortString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toShortString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/animation/Transformation", java.flags == PUBLIC, .name == "toShortString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/animation/Transformation\0", "toShortString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [TYPE_ALPHA](https://developer.android.com/reference/android/view/animation/Transformation.html#TYPE_ALPHA)
        pub const TYPE_ALPHA : i32 = 1;

        /// public static final [TYPE_BOTH](https://developer.android.com/reference/android/view/animation/Transformation.html#TYPE_BOTH)
        pub const TYPE_BOTH : i32 = 3;

        /// public static final [TYPE_IDENTITY](https://developer.android.com/reference/android/view/animation/Transformation.html#TYPE_IDENTITY)
        pub const TYPE_IDENTITY : i32 = 0;

        /// public static final [TYPE_MATRIX](https://developer.android.com/reference/android/view/animation/Transformation.html#TYPE_MATRIX)
        pub const TYPE_MATRIX : i32 = 2;

        // // Not emitting: Non-public field
        // /// **get** protected [mAlpha](https://developer.android.com/reference/android/view/animation/Transformation.html#mAlpha)
        // pub fn mAlpha<'env>(&'env self) -> f32 {
        //     unsafe {
        //         let env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (class, field) = env.require_class_field("android/view/animation/Transformation\0", "mAlpha\0", "F\0");
        //         env.get_float_field(class, field)
        //     }
        // }

        // /// **set** protected [mAlpha](https://developer.android.com/reference/android/view/animation/Transformation.html#mAlpha)
        // pub fn set_mAlpha<'env>(&'env self, value: f32) {
        //     unsafe {
        //         let env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (class, field) = env.require_class_field("android/view/animation/Transformation\0", "mAlpha\0", "F\0");
        //         env.set_float_field(class, field, value)
        //     }
        // }

        // // Not emitting: Non-public field
        // /// **get** protected [mMatrix](https://developer.android.com/reference/android/view/animation/Transformation.html#mMatrix)
        // ///
        // /// Required feature: android-graphics-Matrix
        // #[cfg(any(feature = "all", feature = "android-graphics-Matrix"))]
        // pub fn mMatrix<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Matrix>> {
        //     unsafe {
        //         let env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (class, field) = env.require_class_field("android/view/animation/Transformation\0", "mMatrix\0", "Landroid/graphics/Matrix;\0");
        //         env.get_object_field(class, field)
        //     }
        // }

        // /// **set** protected [mMatrix](https://developer.android.com/reference/android/view/animation/Transformation.html#mMatrix)
        // ///
        // /// Required feature: android-graphics-Matrix
        // #[cfg(any(feature = "all", feature = "android-graphics-Matrix"))]
        // pub fn set_mMatrix<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::android::graphics::Matrix>>) {
        //     unsafe {
        //         let env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (class, field) = env.require_class_field("android/view/animation/Transformation\0", "mMatrix\0", "Landroid/graphics/Matrix;\0");
        //         env.set_object_field(class, field, value)
        //     }
        // }

        // // Not emitting: Non-public field
        // /// **get** protected [mTransformationType](https://developer.android.com/reference/android/view/animation/Transformation.html#mTransformationType)
        // pub fn mTransformationType<'env>(&'env self) -> i32 {
        //     unsafe {
        //         let env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (class, field) = env.require_class_field("android/view/animation/Transformation\0", "mTransformationType\0", "I\0");
        //         env.get_int_field(class, field)
        //     }
        // }

        // /// **set** protected [mTransformationType](https://developer.android.com/reference/android/view/animation/Transformation.html#mTransformationType)
        // pub fn set_mTransformationType<'env>(&'env self, value: i32) {
        //     unsafe {
        //         let env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (class, field) = env.require_class_field("android/view/animation/Transformation\0", "mTransformationType\0", "I\0");
        //         env.set_int_field(class, field, value)
        //     }
        // }
    }
}
