// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-view-SurfaceHolder"))]
__jni_bindgen! {
    /// public interface [SurfaceHolder](https://developer.android.com/reference/android/view/SurfaceHolder.html)
    ///
    /// Required feature: android-view-SurfaceHolder
    public interface SurfaceHolder ("android/view/SurfaceHolder") extends crate::java::lang::Object {

        /// [addCallback](https://developer.android.com/reference/android/view/SurfaceHolder.html#addCallback(android.view.SurfaceHolder.Callback))
        ///
        /// Required features: "android-view-SurfaceHolder_Callback"
        #[cfg(any(feature = "all", all(feature = "android-view-SurfaceHolder_Callback")))]
        pub fn addCallback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::SurfaceHolder_Callback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/SurfaceHolder", java.flags == PUBLIC | ABSTRACT, .name == "addCallback", .descriptor == "(Landroid/view/SurfaceHolder$Callback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/SurfaceHolder\0", "addCallback\0", "(Landroid/view/SurfaceHolder$Callback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeCallback](https://developer.android.com/reference/android/view/SurfaceHolder.html#removeCallback(android.view.SurfaceHolder.Callback))
        ///
        /// Required features: "android-view-SurfaceHolder_Callback"
        #[cfg(any(feature = "all", all(feature = "android-view-SurfaceHolder_Callback")))]
        pub fn removeCallback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::SurfaceHolder_Callback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/SurfaceHolder", java.flags == PUBLIC | ABSTRACT, .name == "removeCallback", .descriptor == "(Landroid/view/SurfaceHolder$Callback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/SurfaceHolder\0", "removeCallback\0", "(Landroid/view/SurfaceHolder$Callback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isCreating](https://developer.android.com/reference/android/view/SurfaceHolder.html#isCreating())
        pub fn isCreating<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/SurfaceHolder", java.flags == PUBLIC | ABSTRACT, .name == "isCreating", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/SurfaceHolder\0", "isCreating\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setType](https://developer.android.com/reference/android/view/SurfaceHolder.html#setType(int))
        #[deprecated] pub fn setType<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/SurfaceHolder", java.flags == PUBLIC | ABSTRACT, .name == "setType", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/SurfaceHolder\0", "setType\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setFixedSize](https://developer.android.com/reference/android/view/SurfaceHolder.html#setFixedSize(int,%20int))
        pub fn setFixedSize<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/SurfaceHolder", java.flags == PUBLIC | ABSTRACT, .name == "setFixedSize", .descriptor == "(II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/SurfaceHolder\0", "setFixedSize\0", "(II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setSizeFromLayout](https://developer.android.com/reference/android/view/SurfaceHolder.html#setSizeFromLayout())
        pub fn setSizeFromLayout<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/SurfaceHolder", java.flags == PUBLIC | ABSTRACT, .name == "setSizeFromLayout", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/SurfaceHolder\0", "setSizeFromLayout\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setFormat](https://developer.android.com/reference/android/view/SurfaceHolder.html#setFormat(int))
        pub fn setFormat<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/SurfaceHolder", java.flags == PUBLIC | ABSTRACT, .name == "setFormat", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/SurfaceHolder\0", "setFormat\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setKeepScreenOn](https://developer.android.com/reference/android/view/SurfaceHolder.html#setKeepScreenOn(boolean))
        pub fn setKeepScreenOn<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/SurfaceHolder", java.flags == PUBLIC | ABSTRACT, .name == "setKeepScreenOn", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/SurfaceHolder\0", "setKeepScreenOn\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [lockCanvas](https://developer.android.com/reference/android/view/SurfaceHolder.html#lockCanvas())
        ///
        /// Required features: "android-graphics-Canvas"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Canvas")))]
        pub fn lockCanvas<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Canvas>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/SurfaceHolder", java.flags == PUBLIC | ABSTRACT, .name == "lockCanvas", .descriptor == "()Landroid/graphics/Canvas;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/SurfaceHolder\0", "lockCanvas\0", "()Landroid/graphics/Canvas;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [lockCanvas](https://developer.android.com/reference/android/view/SurfaceHolder.html#lockCanvas(android.graphics.Rect))
        ///
        /// Required features: "android-graphics-Canvas", "android-graphics-Rect"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Canvas", feature = "android-graphics-Rect")))]
        pub fn lockCanvas_Rect<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Rect>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Canvas>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/SurfaceHolder", java.flags == PUBLIC | ABSTRACT, .name == "lockCanvas", .descriptor == "(Landroid/graphics/Rect;)Landroid/graphics/Canvas;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/SurfaceHolder\0", "lockCanvas\0", "(Landroid/graphics/Rect;)Landroid/graphics/Canvas;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [lockHardwareCanvas](https://developer.android.com/reference/android/view/SurfaceHolder.html#lockHardwareCanvas())
        ///
        /// Required features: "android-graphics-Canvas"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Canvas")))]
        pub fn lockHardwareCanvas<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Canvas>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/SurfaceHolder", java.flags == PUBLIC, .name == "lockHardwareCanvas", .descriptor == "()Landroid/graphics/Canvas;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/SurfaceHolder\0", "lockHardwareCanvas\0", "()Landroid/graphics/Canvas;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unlockCanvasAndPost](https://developer.android.com/reference/android/view/SurfaceHolder.html#unlockCanvasAndPost(android.graphics.Canvas))
        ///
        /// Required features: "android-graphics-Canvas"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Canvas")))]
        pub fn unlockCanvasAndPost<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Canvas>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/SurfaceHolder", java.flags == PUBLIC | ABSTRACT, .name == "unlockCanvasAndPost", .descriptor == "(Landroid/graphics/Canvas;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/SurfaceHolder\0", "unlockCanvasAndPost\0", "(Landroid/graphics/Canvas;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSurfaceFrame](https://developer.android.com/reference/android/view/SurfaceHolder.html#getSurfaceFrame())
        ///
        /// Required features: "android-graphics-Rect"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Rect")))]
        pub fn getSurfaceFrame<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::Rect>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/SurfaceHolder", java.flags == PUBLIC | ABSTRACT, .name == "getSurfaceFrame", .descriptor == "()Landroid/graphics/Rect;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/SurfaceHolder\0", "getSurfaceFrame\0", "()Landroid/graphics/Rect;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSurface](https://developer.android.com/reference/android/view/SurfaceHolder.html#getSurface())
        ///
        /// Required features: "android-view-Surface"
        #[cfg(any(feature = "all", all(feature = "android-view-Surface")))]
        pub fn getSurface<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::Surface>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/SurfaceHolder", java.flags == PUBLIC | ABSTRACT, .name == "getSurface", .descriptor == "()Landroid/view/Surface;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/SurfaceHolder\0", "getSurface\0", "()Landroid/view/Surface;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [SURFACE_TYPE_GPU](https://developer.android.com/reference/android/view/SurfaceHolder.html#SURFACE_TYPE_GPU)
        #[deprecated] pub const SURFACE_TYPE_GPU : i32 = 2;

        /// public static final [SURFACE_TYPE_HARDWARE](https://developer.android.com/reference/android/view/SurfaceHolder.html#SURFACE_TYPE_HARDWARE)
        #[deprecated] pub const SURFACE_TYPE_HARDWARE : i32 = 1;

        /// public static final [SURFACE_TYPE_NORMAL](https://developer.android.com/reference/android/view/SurfaceHolder.html#SURFACE_TYPE_NORMAL)
        #[deprecated] pub const SURFACE_TYPE_NORMAL : i32 = 0;

        /// public static final [SURFACE_TYPE_PUSH_BUFFERS](https://developer.android.com/reference/android/view/SurfaceHolder.html#SURFACE_TYPE_PUSH_BUFFERS)
        #[deprecated] pub const SURFACE_TYPE_PUSH_BUFFERS : i32 = 3;
    }
}
