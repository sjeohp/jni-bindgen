// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-view-PointerIcon"))]
__jni_bindgen! {
    /// public final class [PointerIcon](https://developer.android.com/reference/android/view/PointerIcon.html)
    ///
    /// Required feature: android-view-PointerIcon
    public final class PointerIcon ("android/view/PointerIcon") extends crate::java::lang::Object, implements crate::android::os::Parcelable {

        // // Not emitting: Non-public method
        // /// [PointerIcon](https://developer.android.com/reference/android/view/PointerIcon.html#PointerIcon(int))
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::view::PointerIcon>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/PointerIcon", java.flags == (empty), .name == "<init>", .descriptor == "(I)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/PointerIcon\0", "<init>\0", "(I)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getSystemIcon](https://developer.android.com/reference/android/view/PointerIcon.html#getSystemIcon(android.content.Context,%20int))
        ///
        /// Required features: "android-content-Context", "android-view-PointerIcon"
        #[cfg(any(feature = "all", all(feature = "android-content-Context", feature = "android-view-PointerIcon")))]
        pub fn getSystemIcon<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::PointerIcon>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/PointerIcon", java.flags == PUBLIC | STATIC, .name == "getSystemIcon", .descriptor == "(Landroid/content/Context;I)Landroid/view/PointerIcon;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/view/PointerIcon\0", "getSystemIcon\0", "(Landroid/content/Context;I)Landroid/view/PointerIcon;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [create](https://developer.android.com/reference/android/view/PointerIcon.html#create(android.graphics.Bitmap,%20float,%20float))
        ///
        /// Required features: "android-graphics-Bitmap", "android-view-PointerIcon"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Bitmap", feature = "android-view-PointerIcon")))]
        pub fn create<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Bitmap>>, arg1: f32, arg2: f32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::PointerIcon>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/PointerIcon", java.flags == PUBLIC | STATIC, .name == "create", .descriptor == "(Landroid/graphics/Bitmap;FF)Landroid/view/PointerIcon;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/view/PointerIcon\0", "create\0", "(Landroid/graphics/Bitmap;FF)Landroid/view/PointerIcon;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [load](https://developer.android.com/reference/android/view/PointerIcon.html#load(android.content.res.Resources,%20int))
        ///
        /// Required features: "android-content-res-Resources", "android-view-PointerIcon"
        #[cfg(any(feature = "all", all(feature = "android-content-res-Resources", feature = "android-view-PointerIcon")))]
        pub fn load<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::res::Resources>>, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::PointerIcon>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/PointerIcon", java.flags == PUBLIC | STATIC, .name == "load", .descriptor == "(Landroid/content/res/Resources;I)Landroid/view/PointerIcon;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/view/PointerIcon\0", "load\0", "(Landroid/content/res/Resources;I)Landroid/view/PointerIcon;\0");
                __jni_env.call_static_object_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [describeContents](https://developer.android.com/reference/android/view/PointerIcon.html#describeContents())
        pub fn describeContents<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/PointerIcon", java.flags == PUBLIC, .name == "describeContents", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/PointerIcon\0", "describeContents\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [writeToParcel](https://developer.android.com/reference/android/view/PointerIcon.html#writeToParcel(android.os.Parcel,%20int))
        ///
        /// Required features: "android-os-Parcel"
        #[cfg(any(feature = "all", all(feature = "android-os-Parcel")))]
        pub fn writeToParcel<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Parcel>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/PointerIcon", java.flags == PUBLIC, .name == "writeToParcel", .descriptor == "(Landroid/os/Parcel;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/PointerIcon\0", "writeToParcel\0", "(Landroid/os/Parcel;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [equals](https://developer.android.com/reference/android/view/PointerIcon.html#equals(java.lang.Object))
        ///
        /// Required features: "java-lang-Object"
        #[cfg(any(feature = "all", all(feature = "java-lang-Object")))]
        pub fn equals<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::Object>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/PointerIcon", java.flags == PUBLIC, .name == "equals", .descriptor == "(Ljava/lang/Object;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/PointerIcon\0", "equals\0", "(Ljava/lang/Object;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// **get** public static final [CREATOR](https://developer.android.com/reference/android/view/PointerIcon.html#CREATOR)
        ///
        /// Required feature: android-os-Parcelable_Creator
        #[cfg(any(feature = "all", feature = "android-os-Parcelable_Creator"))]
        pub fn CREATOR<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Parcelable_Creator>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/view/PointerIcon\0", "CREATOR\0", "Landroid/os/Parcelable$Creator;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// public static final [TYPE_ALIAS](https://developer.android.com/reference/android/view/PointerIcon.html#TYPE_ALIAS)
        pub const TYPE_ALIAS : i32 = 1010;

        /// public static final [TYPE_ALL_SCROLL](https://developer.android.com/reference/android/view/PointerIcon.html#TYPE_ALL_SCROLL)
        pub const TYPE_ALL_SCROLL : i32 = 1013;

        /// public static final [TYPE_ARROW](https://developer.android.com/reference/android/view/PointerIcon.html#TYPE_ARROW)
        pub const TYPE_ARROW : i32 = 1000;

        /// public static final [TYPE_CELL](https://developer.android.com/reference/android/view/PointerIcon.html#TYPE_CELL)
        pub const TYPE_CELL : i32 = 1006;

        /// public static final [TYPE_CONTEXT_MENU](https://developer.android.com/reference/android/view/PointerIcon.html#TYPE_CONTEXT_MENU)
        pub const TYPE_CONTEXT_MENU : i32 = 1001;

        /// public static final [TYPE_COPY](https://developer.android.com/reference/android/view/PointerIcon.html#TYPE_COPY)
        pub const TYPE_COPY : i32 = 1011;

        /// public static final [TYPE_CROSSHAIR](https://developer.android.com/reference/android/view/PointerIcon.html#TYPE_CROSSHAIR)
        pub const TYPE_CROSSHAIR : i32 = 1007;

        /// public static final [TYPE_DEFAULT](https://developer.android.com/reference/android/view/PointerIcon.html#TYPE_DEFAULT)
        pub const TYPE_DEFAULT : i32 = 1000;

        /// public static final [TYPE_GRAB](https://developer.android.com/reference/android/view/PointerIcon.html#TYPE_GRAB)
        pub const TYPE_GRAB : i32 = 1020;

        /// public static final [TYPE_GRABBING](https://developer.android.com/reference/android/view/PointerIcon.html#TYPE_GRABBING)
        pub const TYPE_GRABBING : i32 = 1021;

        /// public static final [TYPE_HAND](https://developer.android.com/reference/android/view/PointerIcon.html#TYPE_HAND)
        pub const TYPE_HAND : i32 = 1002;

        /// public static final [TYPE_HELP](https://developer.android.com/reference/android/view/PointerIcon.html#TYPE_HELP)
        pub const TYPE_HELP : i32 = 1003;

        /// public static final [TYPE_HORIZONTAL_DOUBLE_ARROW](https://developer.android.com/reference/android/view/PointerIcon.html#TYPE_HORIZONTAL_DOUBLE_ARROW)
        pub const TYPE_HORIZONTAL_DOUBLE_ARROW : i32 = 1014;

        /// public static final [TYPE_NO_DROP](https://developer.android.com/reference/android/view/PointerIcon.html#TYPE_NO_DROP)
        pub const TYPE_NO_DROP : i32 = 1012;

        /// public static final [TYPE_NULL](https://developer.android.com/reference/android/view/PointerIcon.html#TYPE_NULL)
        pub const TYPE_NULL : i32 = 0;

        /// public static final [TYPE_TEXT](https://developer.android.com/reference/android/view/PointerIcon.html#TYPE_TEXT)
        pub const TYPE_TEXT : i32 = 1008;

        /// public static final [TYPE_TOP_LEFT_DIAGONAL_DOUBLE_ARROW](https://developer.android.com/reference/android/view/PointerIcon.html#TYPE_TOP_LEFT_DIAGONAL_DOUBLE_ARROW)
        pub const TYPE_TOP_LEFT_DIAGONAL_DOUBLE_ARROW : i32 = 1017;

        /// public static final [TYPE_TOP_RIGHT_DIAGONAL_DOUBLE_ARROW](https://developer.android.com/reference/android/view/PointerIcon.html#TYPE_TOP_RIGHT_DIAGONAL_DOUBLE_ARROW)
        pub const TYPE_TOP_RIGHT_DIAGONAL_DOUBLE_ARROW : i32 = 1016;

        /// public static final [TYPE_VERTICAL_DOUBLE_ARROW](https://developer.android.com/reference/android/view/PointerIcon.html#TYPE_VERTICAL_DOUBLE_ARROW)
        pub const TYPE_VERTICAL_DOUBLE_ARROW : i32 = 1015;

        /// public static final [TYPE_VERTICAL_TEXT](https://developer.android.com/reference/android/view/PointerIcon.html#TYPE_VERTICAL_TEXT)
        pub const TYPE_VERTICAL_TEXT : i32 = 1009;

        /// public static final [TYPE_WAIT](https://developer.android.com/reference/android/view/PointerIcon.html#TYPE_WAIT)
        pub const TYPE_WAIT : i32 = 1004;

        /// public static final [TYPE_ZOOM_IN](https://developer.android.com/reference/android/view/PointerIcon.html#TYPE_ZOOM_IN)
        pub const TYPE_ZOOM_IN : i32 = 1018;

        /// public static final [TYPE_ZOOM_OUT](https://developer.android.com/reference/android/view/PointerIcon.html#TYPE_ZOOM_OUT)
        pub const TYPE_ZOOM_OUT : i32 = 1019;
    }
}
