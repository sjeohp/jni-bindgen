// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-view-WindowManager_LayoutParams"))]
__jni_bindgen! {
    /// public class [WindowManager.LayoutParams](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html)
    ///
    /// Required feature: android-view-WindowManager_LayoutParams
    public class WindowManager_LayoutParams ("android/view/WindowManager$LayoutParams") extends crate::android::view::ViewGroup_LayoutParams, implements crate::android::os::Parcelable {

        /// [LayoutParams](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#LayoutParams())
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::view::WindowManager_LayoutParams>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/WindowManager$LayoutParams", java.flags == PUBLIC, .name == "<init>", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/WindowManager$LayoutParams\0", "<init>\0", "()V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [LayoutParams](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#LayoutParams(int))
        pub fn new_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::view::WindowManager_LayoutParams>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/WindowManager$LayoutParams", java.flags == PUBLIC, .name == "<init>", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/WindowManager$LayoutParams\0", "<init>\0", "(I)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [LayoutParams](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#LayoutParams(int,%20int))
        pub fn new_int_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::view::WindowManager_LayoutParams>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/WindowManager$LayoutParams", java.flags == PUBLIC, .name == "<init>", .descriptor == "(II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/WindowManager$LayoutParams\0", "<init>\0", "(II)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [LayoutParams](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#LayoutParams(int,%20int,%20int))
        pub fn new_int_int_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::view::WindowManager_LayoutParams>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/WindowManager$LayoutParams", java.flags == PUBLIC, .name == "<init>", .descriptor == "(III)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/WindowManager$LayoutParams\0", "<init>\0", "(III)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [LayoutParams](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#LayoutParams(int,%20int,%20int,%20int,%20int))
        pub fn new_int_int_int_int_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32, arg3: i32, arg4: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::view::WindowManager_LayoutParams>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/WindowManager$LayoutParams", java.flags == PUBLIC, .name == "<init>", .descriptor == "(IIIII)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/WindowManager$LayoutParams\0", "<init>\0", "(IIIII)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [LayoutParams](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#LayoutParams(int,%20int,%20int,%20int,%20int,%20int,%20int))
        pub fn new_int_int_int_int_int_int_int<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32, arg1: i32, arg2: i32, arg3: i32, arg4: i32, arg5: i32, arg6: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::view::WindowManager_LayoutParams>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/WindowManager$LayoutParams", java.flags == PUBLIC, .name == "<init>", .descriptor == "(IIIIIII)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3), __jni_bindgen::AsJValue::as_jvalue(&arg4), __jni_bindgen::AsJValue::as_jvalue(&arg5), __jni_bindgen::AsJValue::as_jvalue(&arg6)];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/WindowManager$LayoutParams\0", "<init>\0", "(IIIIIII)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [LayoutParams](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#LayoutParams(android.os.Parcel))
        ///
        /// Required features: "android-os-Parcel"
        #[cfg(any(feature = "all", all(feature = "android-os-Parcel")))]
        pub fn new_Parcel<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Parcel>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::view::WindowManager_LayoutParams>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/WindowManager$LayoutParams", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/os/Parcel;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/WindowManager$LayoutParams\0", "<init>\0", "(Landroid/os/Parcel;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [mayUseInputMethod](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#mayUseInputMethod(int))
        pub fn mayUseInputMethod<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/WindowManager$LayoutParams", java.flags == PUBLIC | STATIC, .name == "mayUseInputMethod", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/view/WindowManager$LayoutParams\0", "mayUseInputMethod\0", "(I)Z\0");
                __jni_env.call_static_boolean_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTitle](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#setTitle(java.lang.CharSequence))
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn setTitle<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/WindowManager$LayoutParams", java.flags == PUBLIC | FINAL, .name == "setTitle", .descriptor == "(Ljava/lang/CharSequence;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/WindowManager$LayoutParams\0", "setTitle\0", "(Ljava/lang/CharSequence;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTitle](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#getTitle())
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn getTitle<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::CharSequence>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/WindowManager$LayoutParams", java.flags == PUBLIC | FINAL, .name == "getTitle", .descriptor == "()Ljava/lang/CharSequence;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/WindowManager$LayoutParams\0", "getTitle\0", "()Ljava/lang/CharSequence;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setColorMode](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#setColorMode(int))
        pub fn setColorMode<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/WindowManager$LayoutParams", java.flags == PUBLIC, .name == "setColorMode", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/WindowManager$LayoutParams\0", "setColorMode\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getColorMode](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#getColorMode())
        pub fn getColorMode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/WindowManager$LayoutParams", java.flags == PUBLIC, .name == "getColorMode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/WindowManager$LayoutParams\0", "getColorMode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [describeContents](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#describeContents())
        pub fn describeContents<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/WindowManager$LayoutParams", java.flags == PUBLIC, .name == "describeContents", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/WindowManager$LayoutParams\0", "describeContents\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [writeToParcel](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#writeToParcel(android.os.Parcel,%20int))
        ///
        /// Required features: "android-os-Parcel"
        #[cfg(any(feature = "all", all(feature = "android-os-Parcel")))]
        pub fn writeToParcel<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Parcel>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/WindowManager$LayoutParams", java.flags == PUBLIC, .name == "writeToParcel", .descriptor == "(Landroid/os/Parcel;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/WindowManager$LayoutParams\0", "writeToParcel\0", "(Landroid/os/Parcel;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [copyFrom](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#copyFrom(android.view.WindowManager.LayoutParams))
        ///
        /// Required features: "android-view-WindowManager_LayoutParams"
        #[cfg(any(feature = "all", all(feature = "android-view-WindowManager_LayoutParams")))]
        pub fn copyFrom<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::WindowManager_LayoutParams>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/WindowManager$LayoutParams", java.flags == PUBLIC | FINAL, .name == "copyFrom", .descriptor == "(Landroid/view/WindowManager$LayoutParams;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/WindowManager$LayoutParams\0", "copyFrom\0", "(Landroid/view/WindowManager$LayoutParams;)I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [debug](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#debug(java.lang.String))
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn debug<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/WindowManager$LayoutParams", java.flags == PUBLIC, .name == "debug", .descriptor == "(Ljava/lang/String;)Ljava/lang/String;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/WindowManager$LayoutParams\0", "debug\0", "(Ljava/lang/String;)Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [toString](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#toString())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn toString<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/WindowManager$LayoutParams", java.flags == PUBLIC, .name == "toString", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/WindowManager$LayoutParams\0", "toString\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [ALPHA_CHANGED](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#ALPHA_CHANGED)
        pub const ALPHA_CHANGED : i32 = 128;

        /// public static final [ANIMATION_CHANGED](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#ANIMATION_CHANGED)
        pub const ANIMATION_CHANGED : i32 = 16;

        /// public static final [BRIGHTNESS_OVERRIDE_FULL](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#BRIGHTNESS_OVERRIDE_FULL)
        pub const BRIGHTNESS_OVERRIDE_FULL : f32 = 1f32;

        /// public static final [BRIGHTNESS_OVERRIDE_NONE](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#BRIGHTNESS_OVERRIDE_NONE)
        pub const BRIGHTNESS_OVERRIDE_NONE : f32 = -1f32;

        /// public static final [BRIGHTNESS_OVERRIDE_OFF](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#BRIGHTNESS_OVERRIDE_OFF)
        pub const BRIGHTNESS_OVERRIDE_OFF : f32 = 0f32;

        /// **get** public static final [CREATOR](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#CREATOR)
        ///
        /// Required feature: android-os-Parcelable_Creator
        #[cfg(any(feature = "all", feature = "android-os-Parcelable_Creator"))]
        pub fn CREATOR<'env>(env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Parcelable_Creator>> {
            unsafe {
                let (class, field) = env.require_class_static_field("android/view/WindowManager$LayoutParams\0", "CREATOR\0", "Landroid/os/Parcelable$Creator;\0");
                env.get_static_object_field(class, field)
            }
        }

        /// public static final [DIM_AMOUNT_CHANGED](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#DIM_AMOUNT_CHANGED)
        pub const DIM_AMOUNT_CHANGED : i32 = 32;

        /// public static final [FIRST_APPLICATION_WINDOW](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FIRST_APPLICATION_WINDOW)
        pub const FIRST_APPLICATION_WINDOW : i32 = 1;

        /// public static final [FIRST_SUB_WINDOW](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FIRST_SUB_WINDOW)
        pub const FIRST_SUB_WINDOW : i32 = 1000;

        /// public static final [FIRST_SYSTEM_WINDOW](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FIRST_SYSTEM_WINDOW)
        pub const FIRST_SYSTEM_WINDOW : i32 = 2000;

        /// public static final [FLAGS_CHANGED](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAGS_CHANGED)
        pub const FLAGS_CHANGED : i32 = 4;

        /// public static final [FLAG_ALLOW_LOCK_WHILE_SCREEN_ON](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_ALLOW_LOCK_WHILE_SCREEN_ON)
        pub const FLAG_ALLOW_LOCK_WHILE_SCREEN_ON : i32 = 1;

        /// public static final [FLAG_ALT_FOCUSABLE_IM](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_ALT_FOCUSABLE_IM)
        pub const FLAG_ALT_FOCUSABLE_IM : i32 = 131072;

        /// public static final [FLAG_BLUR_BEHIND](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_BLUR_BEHIND)
        #[deprecated] pub const FLAG_BLUR_BEHIND : i32 = 4;

        /// public static final [FLAG_DIM_BEHIND](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_DIM_BEHIND)
        pub const FLAG_DIM_BEHIND : i32 = 2;

        /// public static final [FLAG_DISMISS_KEYGUARD](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_DISMISS_KEYGUARD)
        #[deprecated] pub const FLAG_DISMISS_KEYGUARD : i32 = 4194304;

        /// public static final [FLAG_DITHER](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_DITHER)
        #[deprecated] pub const FLAG_DITHER : i32 = 4096;

        /// public static final [FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS)
        pub const FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS : i32 = -2147483648;

        /// public static final [FLAG_FORCE_NOT_FULLSCREEN](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_FORCE_NOT_FULLSCREEN)
        pub const FLAG_FORCE_NOT_FULLSCREEN : i32 = 2048;

        /// public static final [FLAG_FULLSCREEN](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_FULLSCREEN)
        pub const FLAG_FULLSCREEN : i32 = 1024;

        /// public static final [FLAG_HARDWARE_ACCELERATED](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_HARDWARE_ACCELERATED)
        pub const FLAG_HARDWARE_ACCELERATED : i32 = 16777216;

        /// public static final [FLAG_IGNORE_CHEEK_PRESSES](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_IGNORE_CHEEK_PRESSES)
        pub const FLAG_IGNORE_CHEEK_PRESSES : i32 = 32768;

        /// public static final [FLAG_KEEP_SCREEN_ON](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_KEEP_SCREEN_ON)
        pub const FLAG_KEEP_SCREEN_ON : i32 = 128;

        /// public static final [FLAG_LAYOUT_ATTACHED_IN_DECOR](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_LAYOUT_ATTACHED_IN_DECOR)
        pub const FLAG_LAYOUT_ATTACHED_IN_DECOR : i32 = 1073741824;

        /// public static final [FLAG_LAYOUT_INSET_DECOR](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_LAYOUT_INSET_DECOR)
        pub const FLAG_LAYOUT_INSET_DECOR : i32 = 65536;

        /// public static final [FLAG_LAYOUT_IN_OVERSCAN](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_LAYOUT_IN_OVERSCAN)
        pub const FLAG_LAYOUT_IN_OVERSCAN : i32 = 33554432;

        /// public static final [FLAG_LAYOUT_IN_SCREEN](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_LAYOUT_IN_SCREEN)
        pub const FLAG_LAYOUT_IN_SCREEN : i32 = 256;

        /// public static final [FLAG_LAYOUT_NO_LIMITS](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_LAYOUT_NO_LIMITS)
        pub const FLAG_LAYOUT_NO_LIMITS : i32 = 512;

        /// public static final [FLAG_LOCAL_FOCUS_MODE](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_LOCAL_FOCUS_MODE)
        pub const FLAG_LOCAL_FOCUS_MODE : i32 = 268435456;

        /// public static final [FLAG_NOT_FOCUSABLE](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_NOT_FOCUSABLE)
        pub const FLAG_NOT_FOCUSABLE : i32 = 8;

        /// public static final [FLAG_NOT_TOUCHABLE](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_NOT_TOUCHABLE)
        pub const FLAG_NOT_TOUCHABLE : i32 = 16;

        /// public static final [FLAG_NOT_TOUCH_MODAL](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_NOT_TOUCH_MODAL)
        pub const FLAG_NOT_TOUCH_MODAL : i32 = 32;

        /// public static final [FLAG_SCALED](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_SCALED)
        pub const FLAG_SCALED : i32 = 16384;

        /// public static final [FLAG_SECURE](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_SECURE)
        pub const FLAG_SECURE : i32 = 8192;

        /// public static final [FLAG_SHOW_WALLPAPER](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_SHOW_WALLPAPER)
        pub const FLAG_SHOW_WALLPAPER : i32 = 1048576;

        /// public static final [FLAG_SHOW_WHEN_LOCKED](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_SHOW_WHEN_LOCKED)
        #[deprecated] pub const FLAG_SHOW_WHEN_LOCKED : i32 = 524288;

        /// public static final [FLAG_SPLIT_TOUCH](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_SPLIT_TOUCH)
        pub const FLAG_SPLIT_TOUCH : i32 = 8388608;

        /// public static final [FLAG_TOUCHABLE_WHEN_WAKING](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_TOUCHABLE_WHEN_WAKING)
        #[deprecated] pub const FLAG_TOUCHABLE_WHEN_WAKING : i32 = 64;

        /// public static final [FLAG_TRANSLUCENT_NAVIGATION](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_TRANSLUCENT_NAVIGATION)
        pub const FLAG_TRANSLUCENT_NAVIGATION : i32 = 134217728;

        /// public static final [FLAG_TRANSLUCENT_STATUS](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_TRANSLUCENT_STATUS)
        pub const FLAG_TRANSLUCENT_STATUS : i32 = 67108864;

        /// public static final [FLAG_TURN_SCREEN_ON](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_TURN_SCREEN_ON)
        #[deprecated] pub const FLAG_TURN_SCREEN_ON : i32 = 2097152;

        /// public static final [FLAG_WATCH_OUTSIDE_TOUCH](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FLAG_WATCH_OUTSIDE_TOUCH)
        pub const FLAG_WATCH_OUTSIDE_TOUCH : i32 = 262144;

        /// public static final [FORMAT_CHANGED](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#FORMAT_CHANGED)
        pub const FORMAT_CHANGED : i32 = 8;

        /// public static final [LAST_APPLICATION_WINDOW](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#LAST_APPLICATION_WINDOW)
        pub const LAST_APPLICATION_WINDOW : i32 = 99;

        /// public static final [LAST_SUB_WINDOW](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#LAST_SUB_WINDOW)
        pub const LAST_SUB_WINDOW : i32 = 1999;

        /// public static final [LAST_SYSTEM_WINDOW](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#LAST_SYSTEM_WINDOW)
        pub const LAST_SYSTEM_WINDOW : i32 = 2999;

        /// public static final [LAYOUT_CHANGED](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#LAYOUT_CHANGED)
        pub const LAYOUT_CHANGED : i32 = 1;

        /// public static final [LAYOUT_IN_DISPLAY_CUTOUT_MODE_DEFAULT](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#LAYOUT_IN_DISPLAY_CUTOUT_MODE_DEFAULT)
        pub const LAYOUT_IN_DISPLAY_CUTOUT_MODE_DEFAULT : i32 = 0;

        /// public static final [LAYOUT_IN_DISPLAY_CUTOUT_MODE_NEVER](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#LAYOUT_IN_DISPLAY_CUTOUT_MODE_NEVER)
        pub const LAYOUT_IN_DISPLAY_CUTOUT_MODE_NEVER : i32 = 2;

        /// public static final [LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES)
        pub const LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES : i32 = 1;

        /// public static final [MEMORY_TYPE_CHANGED](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#MEMORY_TYPE_CHANGED)
        pub const MEMORY_TYPE_CHANGED : i32 = 256;

        /// public static final [MEMORY_TYPE_GPU](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#MEMORY_TYPE_GPU)
        #[deprecated] pub const MEMORY_TYPE_GPU : i32 = 2;

        /// public static final [MEMORY_TYPE_HARDWARE](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#MEMORY_TYPE_HARDWARE)
        #[deprecated] pub const MEMORY_TYPE_HARDWARE : i32 = 1;

        /// public static final [MEMORY_TYPE_NORMAL](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#MEMORY_TYPE_NORMAL)
        #[deprecated] pub const MEMORY_TYPE_NORMAL : i32 = 0;

        /// public static final [MEMORY_TYPE_PUSH_BUFFERS](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#MEMORY_TYPE_PUSH_BUFFERS)
        #[deprecated] pub const MEMORY_TYPE_PUSH_BUFFERS : i32 = 3;

        /// public static final [ROTATION_ANIMATION_CHANGED](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#ROTATION_ANIMATION_CHANGED)
        pub const ROTATION_ANIMATION_CHANGED : i32 = 4096;

        /// public static final [ROTATION_ANIMATION_CROSSFADE](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#ROTATION_ANIMATION_CROSSFADE)
        pub const ROTATION_ANIMATION_CROSSFADE : i32 = 1;

        /// public static final [ROTATION_ANIMATION_JUMPCUT](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#ROTATION_ANIMATION_JUMPCUT)
        pub const ROTATION_ANIMATION_JUMPCUT : i32 = 2;

        /// public static final [ROTATION_ANIMATION_ROTATE](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#ROTATION_ANIMATION_ROTATE)
        pub const ROTATION_ANIMATION_ROTATE : i32 = 0;

        /// public static final [ROTATION_ANIMATION_SEAMLESS](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#ROTATION_ANIMATION_SEAMLESS)
        pub const ROTATION_ANIMATION_SEAMLESS : i32 = 3;

        /// public static final [SCREEN_BRIGHTNESS_CHANGED](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#SCREEN_BRIGHTNESS_CHANGED)
        pub const SCREEN_BRIGHTNESS_CHANGED : i32 = 2048;

        /// public static final [SCREEN_ORIENTATION_CHANGED](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#SCREEN_ORIENTATION_CHANGED)
        pub const SCREEN_ORIENTATION_CHANGED : i32 = 1024;

        /// public static final [SOFT_INPUT_ADJUST_NOTHING](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#SOFT_INPUT_ADJUST_NOTHING)
        pub const SOFT_INPUT_ADJUST_NOTHING : i32 = 48;

        /// public static final [SOFT_INPUT_ADJUST_PAN](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#SOFT_INPUT_ADJUST_PAN)
        pub const SOFT_INPUT_ADJUST_PAN : i32 = 32;

        /// public static final [SOFT_INPUT_ADJUST_RESIZE](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#SOFT_INPUT_ADJUST_RESIZE)
        pub const SOFT_INPUT_ADJUST_RESIZE : i32 = 16;

        /// public static final [SOFT_INPUT_ADJUST_UNSPECIFIED](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#SOFT_INPUT_ADJUST_UNSPECIFIED)
        pub const SOFT_INPUT_ADJUST_UNSPECIFIED : i32 = 0;

        /// public static final [SOFT_INPUT_IS_FORWARD_NAVIGATION](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#SOFT_INPUT_IS_FORWARD_NAVIGATION)
        pub const SOFT_INPUT_IS_FORWARD_NAVIGATION : i32 = 256;

        /// public static final [SOFT_INPUT_MASK_ADJUST](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#SOFT_INPUT_MASK_ADJUST)
        pub const SOFT_INPUT_MASK_ADJUST : i32 = 240;

        /// public static final [SOFT_INPUT_MASK_STATE](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#SOFT_INPUT_MASK_STATE)
        pub const SOFT_INPUT_MASK_STATE : i32 = 15;

        /// public static final [SOFT_INPUT_MODE_CHANGED](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#SOFT_INPUT_MODE_CHANGED)
        pub const SOFT_INPUT_MODE_CHANGED : i32 = 512;

        /// public static final [SOFT_INPUT_STATE_ALWAYS_HIDDEN](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#SOFT_INPUT_STATE_ALWAYS_HIDDEN)
        pub const SOFT_INPUT_STATE_ALWAYS_HIDDEN : i32 = 3;

        /// public static final [SOFT_INPUT_STATE_ALWAYS_VISIBLE](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#SOFT_INPUT_STATE_ALWAYS_VISIBLE)
        pub const SOFT_INPUT_STATE_ALWAYS_VISIBLE : i32 = 5;

        /// public static final [SOFT_INPUT_STATE_HIDDEN](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#SOFT_INPUT_STATE_HIDDEN)
        pub const SOFT_INPUT_STATE_HIDDEN : i32 = 2;

        /// public static final [SOFT_INPUT_STATE_UNCHANGED](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#SOFT_INPUT_STATE_UNCHANGED)
        pub const SOFT_INPUT_STATE_UNCHANGED : i32 = 1;

        /// public static final [SOFT_INPUT_STATE_UNSPECIFIED](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#SOFT_INPUT_STATE_UNSPECIFIED)
        pub const SOFT_INPUT_STATE_UNSPECIFIED : i32 = 0;

        /// public static final [SOFT_INPUT_STATE_VISIBLE](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#SOFT_INPUT_STATE_VISIBLE)
        pub const SOFT_INPUT_STATE_VISIBLE : i32 = 4;

        /// public static final [TITLE_CHANGED](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#TITLE_CHANGED)
        pub const TITLE_CHANGED : i32 = 64;

        /// public static final [TYPE_ACCESSIBILITY_OVERLAY](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#TYPE_ACCESSIBILITY_OVERLAY)
        pub const TYPE_ACCESSIBILITY_OVERLAY : i32 = 2032;

        /// public static final [TYPE_APPLICATION](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#TYPE_APPLICATION)
        pub const TYPE_APPLICATION : i32 = 2;

        /// public static final [TYPE_APPLICATION_ATTACHED_DIALOG](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#TYPE_APPLICATION_ATTACHED_DIALOG)
        pub const TYPE_APPLICATION_ATTACHED_DIALOG : i32 = 1003;

        /// public static final [TYPE_APPLICATION_MEDIA](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#TYPE_APPLICATION_MEDIA)
        pub const TYPE_APPLICATION_MEDIA : i32 = 1001;

        /// public static final [TYPE_APPLICATION_OVERLAY](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#TYPE_APPLICATION_OVERLAY)
        pub const TYPE_APPLICATION_OVERLAY : i32 = 2038;

        /// public static final [TYPE_APPLICATION_PANEL](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#TYPE_APPLICATION_PANEL)
        pub const TYPE_APPLICATION_PANEL : i32 = 1000;

        /// public static final [TYPE_APPLICATION_STARTING](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#TYPE_APPLICATION_STARTING)
        pub const TYPE_APPLICATION_STARTING : i32 = 3;

        /// public static final [TYPE_APPLICATION_SUB_PANEL](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#TYPE_APPLICATION_SUB_PANEL)
        pub const TYPE_APPLICATION_SUB_PANEL : i32 = 1002;

        /// public static final [TYPE_BASE_APPLICATION](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#TYPE_BASE_APPLICATION)
        pub const TYPE_BASE_APPLICATION : i32 = 1;

        /// public static final [TYPE_CHANGED](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#TYPE_CHANGED)
        pub const TYPE_CHANGED : i32 = 2;

        /// public static final [TYPE_DRAWN_APPLICATION](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#TYPE_DRAWN_APPLICATION)
        pub const TYPE_DRAWN_APPLICATION : i32 = 4;

        /// public static final [TYPE_INPUT_METHOD](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#TYPE_INPUT_METHOD)
        pub const TYPE_INPUT_METHOD : i32 = 2011;

        /// public static final [TYPE_INPUT_METHOD_DIALOG](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#TYPE_INPUT_METHOD_DIALOG)
        pub const TYPE_INPUT_METHOD_DIALOG : i32 = 2012;

        /// public static final [TYPE_KEYGUARD_DIALOG](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#TYPE_KEYGUARD_DIALOG)
        pub const TYPE_KEYGUARD_DIALOG : i32 = 2009;

        /// public static final [TYPE_PHONE](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#TYPE_PHONE)
        #[deprecated] pub const TYPE_PHONE : i32 = 2002;

        /// public static final [TYPE_PRIORITY_PHONE](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#TYPE_PRIORITY_PHONE)
        #[deprecated] pub const TYPE_PRIORITY_PHONE : i32 = 2007;

        /// public static final [TYPE_PRIVATE_PRESENTATION](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#TYPE_PRIVATE_PRESENTATION)
        pub const TYPE_PRIVATE_PRESENTATION : i32 = 2030;

        /// public static final [TYPE_SEARCH_BAR](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#TYPE_SEARCH_BAR)
        pub const TYPE_SEARCH_BAR : i32 = 2001;

        /// public static final [TYPE_STATUS_BAR](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#TYPE_STATUS_BAR)
        pub const TYPE_STATUS_BAR : i32 = 2000;

        /// public static final [TYPE_STATUS_BAR_PANEL](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#TYPE_STATUS_BAR_PANEL)
        pub const TYPE_STATUS_BAR_PANEL : i32 = 2014;

        /// public static final [TYPE_SYSTEM_ALERT](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#TYPE_SYSTEM_ALERT)
        #[deprecated] pub const TYPE_SYSTEM_ALERT : i32 = 2003;

        /// public static final [TYPE_SYSTEM_DIALOG](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#TYPE_SYSTEM_DIALOG)
        pub const TYPE_SYSTEM_DIALOG : i32 = 2008;

        /// public static final [TYPE_SYSTEM_ERROR](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#TYPE_SYSTEM_ERROR)
        #[deprecated] pub const TYPE_SYSTEM_ERROR : i32 = 2010;

        /// public static final [TYPE_SYSTEM_OVERLAY](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#TYPE_SYSTEM_OVERLAY)
        #[deprecated] pub const TYPE_SYSTEM_OVERLAY : i32 = 2006;

        /// public static final [TYPE_TOAST](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#TYPE_TOAST)
        #[deprecated] pub const TYPE_TOAST : i32 = 2005;

        /// public static final [TYPE_WALLPAPER](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#TYPE_WALLPAPER)
        pub const TYPE_WALLPAPER : i32 = 2013;

        /// **get** public [alpha](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#alpha)
        pub fn alpha<'env>(&'env self) -> f32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/view/WindowManager$LayoutParams\0", "alpha\0", "F\0");
                env.get_float_field(class, field)
            }
        }

        /// **set** public [alpha](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#alpha)
        pub fn set_alpha<'env>(&'env self, value: f32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/view/WindowManager$LayoutParams\0", "alpha\0", "F\0");
                env.set_float_field(class, field, value)
            }
        }

        /// **get** public [buttonBrightness](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#buttonBrightness)
        pub fn buttonBrightness<'env>(&'env self) -> f32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/view/WindowManager$LayoutParams\0", "buttonBrightness\0", "F\0");
                env.get_float_field(class, field)
            }
        }

        /// **set** public [buttonBrightness](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#buttonBrightness)
        pub fn set_buttonBrightness<'env>(&'env self, value: f32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/view/WindowManager$LayoutParams\0", "buttonBrightness\0", "F\0");
                env.set_float_field(class, field, value)
            }
        }

        /// **get** public [dimAmount](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#dimAmount)
        pub fn dimAmount<'env>(&'env self) -> f32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/view/WindowManager$LayoutParams\0", "dimAmount\0", "F\0");
                env.get_float_field(class, field)
            }
        }

        /// **set** public [dimAmount](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#dimAmount)
        pub fn set_dimAmount<'env>(&'env self, value: f32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/view/WindowManager$LayoutParams\0", "dimAmount\0", "F\0");
                env.set_float_field(class, field, value)
            }
        }

        /// **get** public [flags](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#flags)
        pub fn flags<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/view/WindowManager$LayoutParams\0", "flags\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [flags](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#flags)
        pub fn set_flags<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/view/WindowManager$LayoutParams\0", "flags\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [format](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#format)
        pub fn format<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/view/WindowManager$LayoutParams\0", "format\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [format](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#format)
        pub fn set_format<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/view/WindowManager$LayoutParams\0", "format\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [gravity](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#gravity)
        pub fn gravity<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/view/WindowManager$LayoutParams\0", "gravity\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [gravity](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#gravity)
        pub fn set_gravity<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/view/WindowManager$LayoutParams\0", "gravity\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [horizontalMargin](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#horizontalMargin)
        pub fn horizontalMargin<'env>(&'env self) -> f32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/view/WindowManager$LayoutParams\0", "horizontalMargin\0", "F\0");
                env.get_float_field(class, field)
            }
        }

        /// **set** public [horizontalMargin](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#horizontalMargin)
        pub fn set_horizontalMargin<'env>(&'env self, value: f32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/view/WindowManager$LayoutParams\0", "horizontalMargin\0", "F\0");
                env.set_float_field(class, field, value)
            }
        }

        /// **get** public [horizontalWeight](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#horizontalWeight)
        pub fn horizontalWeight<'env>(&'env self) -> f32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/view/WindowManager$LayoutParams\0", "horizontalWeight\0", "F\0");
                env.get_float_field(class, field)
            }
        }

        /// **set** public [horizontalWeight](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#horizontalWeight)
        pub fn set_horizontalWeight<'env>(&'env self, value: f32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/view/WindowManager$LayoutParams\0", "horizontalWeight\0", "F\0");
                env.set_float_field(class, field, value)
            }
        }

        /// **get** public [layoutInDisplayCutoutMode](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#layoutInDisplayCutoutMode)
        pub fn layoutInDisplayCutoutMode<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/view/WindowManager$LayoutParams\0", "layoutInDisplayCutoutMode\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [layoutInDisplayCutoutMode](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#layoutInDisplayCutoutMode)
        pub fn set_layoutInDisplayCutoutMode<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/view/WindowManager$LayoutParams\0", "layoutInDisplayCutoutMode\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [memoryType](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#memoryType)
        #[deprecated] pub fn memoryType<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/view/WindowManager$LayoutParams\0", "memoryType\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [memoryType](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#memoryType)
        #[deprecated] pub fn set_memoryType<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/view/WindowManager$LayoutParams\0", "memoryType\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [packageName](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#packageName)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn packageName<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/view/WindowManager$LayoutParams\0", "packageName\0", "Ljava/lang/String;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [packageName](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#packageName)
        ///
        /// Required feature: java-lang-String
        #[cfg(any(feature = "all", feature = "java-lang-String"))]
        pub fn set_packageName<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::java::lang::String>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/view/WindowManager$LayoutParams\0", "packageName\0", "Ljava/lang/String;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [preferredDisplayModeId](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#preferredDisplayModeId)
        pub fn preferredDisplayModeId<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/view/WindowManager$LayoutParams\0", "preferredDisplayModeId\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [preferredDisplayModeId](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#preferredDisplayModeId)
        pub fn set_preferredDisplayModeId<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/view/WindowManager$LayoutParams\0", "preferredDisplayModeId\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [preferredRefreshRate](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#preferredRefreshRate)
        #[deprecated] pub fn preferredRefreshRate<'env>(&'env self) -> f32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/view/WindowManager$LayoutParams\0", "preferredRefreshRate\0", "F\0");
                env.get_float_field(class, field)
            }
        }

        /// **set** public [preferredRefreshRate](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#preferredRefreshRate)
        #[deprecated] pub fn set_preferredRefreshRate<'env>(&'env self, value: f32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/view/WindowManager$LayoutParams\0", "preferredRefreshRate\0", "F\0");
                env.set_float_field(class, field, value)
            }
        }

        /// **get** public [rotationAnimation](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#rotationAnimation)
        pub fn rotationAnimation<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/view/WindowManager$LayoutParams\0", "rotationAnimation\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [rotationAnimation](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#rotationAnimation)
        pub fn set_rotationAnimation<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/view/WindowManager$LayoutParams\0", "rotationAnimation\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [screenBrightness](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#screenBrightness)
        pub fn screenBrightness<'env>(&'env self) -> f32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/view/WindowManager$LayoutParams\0", "screenBrightness\0", "F\0");
                env.get_float_field(class, field)
            }
        }

        /// **set** public [screenBrightness](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#screenBrightness)
        pub fn set_screenBrightness<'env>(&'env self, value: f32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/view/WindowManager$LayoutParams\0", "screenBrightness\0", "F\0");
                env.set_float_field(class, field, value)
            }
        }

        /// **get** public [screenOrientation](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#screenOrientation)
        pub fn screenOrientation<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/view/WindowManager$LayoutParams\0", "screenOrientation\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [screenOrientation](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#screenOrientation)
        pub fn set_screenOrientation<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/view/WindowManager$LayoutParams\0", "screenOrientation\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [softInputMode](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#softInputMode)
        pub fn softInputMode<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/view/WindowManager$LayoutParams\0", "softInputMode\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [softInputMode](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#softInputMode)
        pub fn set_softInputMode<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/view/WindowManager$LayoutParams\0", "softInputMode\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [systemUiVisibility](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#systemUiVisibility)
        pub fn systemUiVisibility<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/view/WindowManager$LayoutParams\0", "systemUiVisibility\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [systemUiVisibility](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#systemUiVisibility)
        pub fn set_systemUiVisibility<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/view/WindowManager$LayoutParams\0", "systemUiVisibility\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [token](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#token)
        ///
        /// Required feature: android-os-IBinder
        #[cfg(any(feature = "all", feature = "android-os-IBinder"))]
        pub fn token<'env>(&'env self) -> __jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::IBinder>> {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/view/WindowManager$LayoutParams\0", "token\0", "Landroid/os/IBinder;\0");
                env.get_object_field(class, field)
            }
        }

        /// **set** public [token](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#token)
        ///
        /// Required feature: android-os-IBinder
        #[cfg(any(feature = "all", feature = "android-os-IBinder"))]
        pub fn set_token<'env, 'obj>(&'env self, value: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'obj crate::android::os::IBinder>>) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/view/WindowManager$LayoutParams\0", "token\0", "Landroid/os/IBinder;\0");
                env.set_object_field(class, field, value)
            }
        }

        /// **get** public [type](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#type)
        pub fn r#type<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/view/WindowManager$LayoutParams\0", "type\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [type](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#type)
        pub fn set_type<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/view/WindowManager$LayoutParams\0", "type\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [verticalMargin](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#verticalMargin)
        pub fn verticalMargin<'env>(&'env self) -> f32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/view/WindowManager$LayoutParams\0", "verticalMargin\0", "F\0");
                env.get_float_field(class, field)
            }
        }

        /// **set** public [verticalMargin](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#verticalMargin)
        pub fn set_verticalMargin<'env>(&'env self, value: f32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/view/WindowManager$LayoutParams\0", "verticalMargin\0", "F\0");
                env.set_float_field(class, field, value)
            }
        }

        /// **get** public [verticalWeight](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#verticalWeight)
        pub fn verticalWeight<'env>(&'env self) -> f32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/view/WindowManager$LayoutParams\0", "verticalWeight\0", "F\0");
                env.get_float_field(class, field)
            }
        }

        /// **set** public [verticalWeight](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#verticalWeight)
        pub fn set_verticalWeight<'env>(&'env self, value: f32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/view/WindowManager$LayoutParams\0", "verticalWeight\0", "F\0");
                env.set_float_field(class, field, value)
            }
        }

        /// **get** public [windowAnimations](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#windowAnimations)
        pub fn windowAnimations<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/view/WindowManager$LayoutParams\0", "windowAnimations\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [windowAnimations](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#windowAnimations)
        pub fn set_windowAnimations<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/view/WindowManager$LayoutParams\0", "windowAnimations\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [x](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#x)
        pub fn x<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/view/WindowManager$LayoutParams\0", "x\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [x](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#x)
        pub fn set_x<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/view/WindowManager$LayoutParams\0", "x\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }

        /// **get** public [y](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#y)
        pub fn y<'env>(&'env self) -> i32 {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/view/WindowManager$LayoutParams\0", "y\0", "I\0");
                env.get_int_field(class, field)
            }
        }

        /// **set** public [y](https://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#y)
        pub fn set_y<'env>(&'env self, value: i32) {
            unsafe {
                let env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (class, field) = env.require_class_field("android/view/WindowManager$LayoutParams\0", "y\0", "I\0");
                env.set_int_field(class, field, value)
            }
        }
    }
}
