// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-view-Window"))]
__jni_bindgen! {
    /// public class [Window](https://developer.android.com/reference/android/view/Window.html)
    ///
    /// Required feature: android-view-Window
    public class Window ("android/view/Window") extends crate::java::lang::Object {

        /// [Window](https://developer.android.com/reference/android/view/Window.html#Window(android.content.Context))
        ///
        /// Required features: "android-content-Context"
        #[cfg(any(feature = "all", all(feature = "android-content-Context")))]
        pub fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::view::Window>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC, .name == "<init>", .descriptor == "(Landroid/content/Context;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "<init>\0", "(Landroid/content/Context;)V\0");
                __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getContext](https://developer.android.com/reference/android/view/Window.html#getContext())
        ///
        /// Required features: "android-content-Context"
        #[cfg(any(feature = "all", all(feature = "android-content-Context")))]
        pub fn getContext<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::Context>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC | FINAL, .name == "getContext", .descriptor == "()Landroid/content/Context;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "getContext\0", "()Landroid/content/Context;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getWindowStyle](https://developer.android.com/reference/android/view/Window.html#getWindowStyle())
        ///
        /// Required features: "android-content-res-TypedArray"
        #[cfg(any(feature = "all", all(feature = "android-content-res-TypedArray")))]
        pub fn getWindowStyle<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::res::TypedArray>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC | FINAL, .name == "getWindowStyle", .descriptor == "()Landroid/content/res/TypedArray;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "getWindowStyle\0", "()Landroid/content/res/TypedArray;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setContainer](https://developer.android.com/reference/android/view/Window.html#setContainer(android.view.Window))
        ///
        /// Required features: "android-view-Window"
        #[cfg(any(feature = "all", all(feature = "android-view-Window")))]
        pub fn setContainer<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::Window>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC, .name == "setContainer", .descriptor == "(Landroid/view/Window;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "setContainer\0", "(Landroid/view/Window;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getContainer](https://developer.android.com/reference/android/view/Window.html#getContainer())
        ///
        /// Required features: "android-view-Window"
        #[cfg(any(feature = "all", all(feature = "android-view-Window")))]
        pub fn getContainer<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::Window>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC | FINAL, .name == "getContainer", .descriptor == "()Landroid/view/Window;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "getContainer\0", "()Landroid/view/Window;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasChildren](https://developer.android.com/reference/android/view/Window.html#hasChildren())
        pub fn hasChildren<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC | FINAL, .name == "hasChildren", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "hasChildren\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setWindowManager](https://developer.android.com/reference/android/view/Window.html#setWindowManager(android.view.WindowManager,%20android.os.IBinder,%20java.lang.String))
        ///
        /// Required features: "android-os-IBinder", "android-view-WindowManager", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-os-IBinder", feature = "android-view-WindowManager", feature = "java-lang-String")))]
        pub fn setWindowManager_WindowManager_IBinder_String<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::WindowManager>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::IBinder>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC, .name == "setWindowManager", .descriptor == "(Landroid/view/WindowManager;Landroid/os/IBinder;Ljava/lang/String;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "setWindowManager\0", "(Landroid/view/WindowManager;Landroid/os/IBinder;Ljava/lang/String;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setWindowManager](https://developer.android.com/reference/android/view/Window.html#setWindowManager(android.view.WindowManager,%20android.os.IBinder,%20java.lang.String,%20boolean))
        ///
        /// Required features: "android-os-IBinder", "android-view-WindowManager", "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "android-os-IBinder", feature = "android-view-WindowManager", feature = "java-lang-String")))]
        pub fn setWindowManager_WindowManager_IBinder_String_boolean<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::WindowManager>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::IBinder>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::String>>, arg3: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC, .name == "setWindowManager", .descriptor == "(Landroid/view/WindowManager;Landroid/os/IBinder;Ljava/lang/String;Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "setWindowManager\0", "(Landroid/view/WindowManager;Landroid/os/IBinder;Ljava/lang/String;Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getWindowManager](https://developer.android.com/reference/android/view/Window.html#getWindowManager())
        ///
        /// Required features: "android-view-WindowManager"
        #[cfg(any(feature = "all", all(feature = "android-view-WindowManager")))]
        pub fn getWindowManager<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::WindowManager>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC, .name == "getWindowManager", .descriptor == "()Landroid/view/WindowManager;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "getWindowManager\0", "()Landroid/view/WindowManager;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setCallback](https://developer.android.com/reference/android/view/Window.html#setCallback(android.view.Window.Callback))
        ///
        /// Required features: "android-view-Window_Callback"
        #[cfg(any(feature = "all", all(feature = "android-view-Window_Callback")))]
        pub fn setCallback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::Window_Callback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC, .name == "setCallback", .descriptor == "(Landroid/view/Window$Callback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "setCallback\0", "(Landroid/view/Window$Callback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCallback](https://developer.android.com/reference/android/view/Window.html#getCallback())
        ///
        /// Required features: "android-view-Window_Callback"
        #[cfg(any(feature = "all", all(feature = "android-view-Window_Callback")))]
        pub fn getCallback<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::Window_Callback>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC | FINAL, .name == "getCallback", .descriptor == "()Landroid/view/Window$Callback;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "getCallback\0", "()Landroid/view/Window$Callback;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addOnFrameMetricsAvailableListener](https://developer.android.com/reference/android/view/Window.html#addOnFrameMetricsAvailableListener(android.view.Window.OnFrameMetricsAvailableListener,%20android.os.Handler))
        ///
        /// Required features: "android-os-Handler", "android-view-Window_OnFrameMetricsAvailableListener"
        #[cfg(any(feature = "all", all(feature = "android-os-Handler", feature = "android-view-Window_OnFrameMetricsAvailableListener")))]
        pub fn addOnFrameMetricsAvailableListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::Window_OnFrameMetricsAvailableListener>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Handler>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC | FINAL, .name == "addOnFrameMetricsAvailableListener", .descriptor == "(Landroid/view/Window$OnFrameMetricsAvailableListener;Landroid/os/Handler;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "addOnFrameMetricsAvailableListener\0", "(Landroid/view/Window$OnFrameMetricsAvailableListener;Landroid/os/Handler;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [removeOnFrameMetricsAvailableListener](https://developer.android.com/reference/android/view/Window.html#removeOnFrameMetricsAvailableListener(android.view.Window.OnFrameMetricsAvailableListener))
        ///
        /// Required features: "android-view-Window_OnFrameMetricsAvailableListener"
        #[cfg(any(feature = "all", all(feature = "android-view-Window_OnFrameMetricsAvailableListener")))]
        pub fn removeOnFrameMetricsAvailableListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::Window_OnFrameMetricsAvailableListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC | FINAL, .name == "removeOnFrameMetricsAvailableListener", .descriptor == "(Landroid/view/Window$OnFrameMetricsAvailableListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "removeOnFrameMetricsAvailableListener\0", "(Landroid/view/Window$OnFrameMetricsAvailableListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setRestrictedCaptionAreaListener](https://developer.android.com/reference/android/view/Window.html#setRestrictedCaptionAreaListener(android.view.Window.OnRestrictedCaptionAreaChangedListener))
        ///
        /// Required features: "android-view-Window_OnRestrictedCaptionAreaChangedListener"
        #[cfg(any(feature = "all", all(feature = "android-view-Window_OnRestrictedCaptionAreaChangedListener")))]
        pub fn setRestrictedCaptionAreaListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::Window_OnRestrictedCaptionAreaChangedListener>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC | FINAL, .name == "setRestrictedCaptionAreaListener", .descriptor == "(Landroid/view/Window$OnRestrictedCaptionAreaChangedListener;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "setRestrictedCaptionAreaListener\0", "(Landroid/view/Window$OnRestrictedCaptionAreaChangedListener;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [takeSurface](https://developer.android.com/reference/android/view/Window.html#takeSurface(android.view.SurfaceHolder.Callback2))
        ///
        /// Required features: "android-view-SurfaceHolder_Callback2"
        #[cfg(any(feature = "all", all(feature = "android-view-SurfaceHolder_Callback2")))]
        pub fn takeSurface<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::SurfaceHolder_Callback2>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC | ABSTRACT, .name == "takeSurface", .descriptor == "(Landroid/view/SurfaceHolder$Callback2;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "takeSurface\0", "(Landroid/view/SurfaceHolder$Callback2;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [takeInputQueue](https://developer.android.com/reference/android/view/Window.html#takeInputQueue(android.view.InputQueue.Callback))
        ///
        /// Required features: "android-view-InputQueue_Callback"
        #[cfg(any(feature = "all", all(feature = "android-view-InputQueue_Callback")))]
        pub fn takeInputQueue<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::InputQueue_Callback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC | ABSTRACT, .name == "takeInputQueue", .descriptor == "(Landroid/view/InputQueue$Callback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "takeInputQueue\0", "(Landroid/view/InputQueue$Callback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isFloating](https://developer.android.com/reference/android/view/Window.html#isFloating())
        pub fn isFloating<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC | ABSTRACT, .name == "isFloating", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "isFloating\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setLayout](https://developer.android.com/reference/android/view/Window.html#setLayout(int,%20int))
        pub fn setLayout<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC, .name == "setLayout", .descriptor == "(II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "setLayout\0", "(II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setGravity](https://developer.android.com/reference/android/view/Window.html#setGravity(int))
        pub fn setGravity<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC, .name == "setGravity", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "setGravity\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setType](https://developer.android.com/reference/android/view/Window.html#setType(int))
        pub fn setType<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC, .name == "setType", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "setType\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setFormat](https://developer.android.com/reference/android/view/Window.html#setFormat(int))
        pub fn setFormat<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC, .name == "setFormat", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "setFormat\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setWindowAnimations](https://developer.android.com/reference/android/view/Window.html#setWindowAnimations(int))
        pub fn setWindowAnimations<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC, .name == "setWindowAnimations", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "setWindowAnimations\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setSoftInputMode](https://developer.android.com/reference/android/view/Window.html#setSoftInputMode(int))
        pub fn setSoftInputMode<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC, .name == "setSoftInputMode", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "setSoftInputMode\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addFlags](https://developer.android.com/reference/android/view/Window.html#addFlags(int))
        pub fn addFlags<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC, .name == "addFlags", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "addFlags\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [clearFlags](https://developer.android.com/reference/android/view/Window.html#clearFlags(int))
        pub fn clearFlags<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC, .name == "clearFlags", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "clearFlags\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setFlags](https://developer.android.com/reference/android/view/Window.html#setFlags(int,%20int))
        pub fn setFlags<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC, .name == "setFlags", .descriptor == "(II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "setFlags\0", "(II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setColorMode](https://developer.android.com/reference/android/view/Window.html#setColorMode(int))
        pub fn setColorMode<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC, .name == "setColorMode", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "setColorMode\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getColorMode](https://developer.android.com/reference/android/view/Window.html#getColorMode())
        pub fn getColorMode<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC, .name == "getColorMode", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "getColorMode\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isWideColorGamut](https://developer.android.com/reference/android/view/Window.html#isWideColorGamut())
        pub fn isWideColorGamut<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC, .name == "isWideColorGamut", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "isWideColorGamut\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDimAmount](https://developer.android.com/reference/android/view/Window.html#setDimAmount(float))
        pub fn setDimAmount<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC, .name == "setDimAmount", .descriptor == "(F)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "setDimAmount\0", "(F)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAttributes](https://developer.android.com/reference/android/view/Window.html#setAttributes(android.view.WindowManager.LayoutParams))
        ///
        /// Required features: "android-view-WindowManager_LayoutParams"
        #[cfg(any(feature = "all", all(feature = "android-view-WindowManager_LayoutParams")))]
        pub fn setAttributes<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::WindowManager_LayoutParams>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC, .name == "setAttributes", .descriptor == "(Landroid/view/WindowManager$LayoutParams;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "setAttributes\0", "(Landroid/view/WindowManager$LayoutParams;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAttributes](https://developer.android.com/reference/android/view/Window.html#getAttributes())
        ///
        /// Required features: "android-view-WindowManager_LayoutParams"
        #[cfg(any(feature = "all", all(feature = "android-view-WindowManager_LayoutParams")))]
        pub fn getAttributes<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::WindowManager_LayoutParams>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC | FINAL, .name == "getAttributes", .descriptor == "()Landroid/view/WindowManager$LayoutParams;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "getAttributes\0", "()Landroid/view/WindowManager$LayoutParams;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [getForcedWindowFlags](https://developer.android.com/reference/android/view/Window.html#getForcedWindowFlags())
        // fn getForcedWindowFlags<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/Window", java.flags == PROTECTED | FINAL, .name == "getForcedWindowFlags", .descriptor == "()I"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "getForcedWindowFlags\0", "()I\0");
        //         __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [hasSoftInputMode](https://developer.android.com/reference/android/view/Window.html#hasSoftInputMode())
        // fn hasSoftInputMode<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/Window", java.flags == PROTECTED | FINAL, .name == "hasSoftInputMode", .descriptor == "()Z"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "hasSoftInputMode\0", "()Z\0");
        //         __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [setSustainedPerformanceMode](https://developer.android.com/reference/android/view/Window.html#setSustainedPerformanceMode(boolean))
        pub fn setSustainedPerformanceMode<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC, .name == "setSustainedPerformanceMode", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "setSustainedPerformanceMode\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [requestFeature](https://developer.android.com/reference/android/view/Window.html#requestFeature(int))
        pub fn requestFeature<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC, .name == "requestFeature", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "requestFeature\0", "(I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [makeActive](https://developer.android.com/reference/android/view/Window.html#makeActive())
        pub fn makeActive<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC | FINAL, .name == "makeActive", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "makeActive\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isActive](https://developer.android.com/reference/android/view/Window.html#isActive())
        pub fn isActive<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC | FINAL, .name == "isActive", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "isActive\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [findViewById](https://developer.android.com/reference/android/view/Window.html#findViewById(int))
        ///
        /// Required features: "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-view-View")))]
        pub fn findViewById<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::View>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC, .name == "findViewById", .descriptor == "(I)Landroid/view/View;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "findViewById\0", "(I)Landroid/view/View;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [requireViewById](https://developer.android.com/reference/android/view/Window.html#requireViewById(int))
        ///
        /// Required features: "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-view-View")))]
        pub fn requireViewById<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::View>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC | FINAL, .name == "requireViewById", .descriptor == "(I)Landroid/view/View;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "requireViewById\0", "(I)Landroid/view/View;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setContentView](https://developer.android.com/reference/android/view/Window.html#setContentView(int))
        pub fn setContentView_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC | ABSTRACT, .name == "setContentView", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "setContentView\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setContentView](https://developer.android.com/reference/android/view/Window.html#setContentView(android.view.View))
        ///
        /// Required features: "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-view-View")))]
        pub fn setContentView_View<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC | ABSTRACT, .name == "setContentView", .descriptor == "(Landroid/view/View;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "setContentView\0", "(Landroid/view/View;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setContentView](https://developer.android.com/reference/android/view/Window.html#setContentView(android.view.View,%20android.view.ViewGroup.LayoutParams))
        ///
        /// Required features: "android-view-View", "android-view-ViewGroup_LayoutParams"
        #[cfg(any(feature = "all", all(feature = "android-view-View", feature = "android-view-ViewGroup_LayoutParams")))]
        pub fn setContentView_View_LayoutParams<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::ViewGroup_LayoutParams>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC | ABSTRACT, .name == "setContentView", .descriptor == "(Landroid/view/View;Landroid/view/ViewGroup$LayoutParams;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "setContentView\0", "(Landroid/view/View;Landroid/view/ViewGroup$LayoutParams;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [addContentView](https://developer.android.com/reference/android/view/Window.html#addContentView(android.view.View,%20android.view.ViewGroup.LayoutParams))
        ///
        /// Required features: "android-view-View", "android-view-ViewGroup_LayoutParams"
        #[cfg(any(feature = "all", all(feature = "android-view-View", feature = "android-view-ViewGroup_LayoutParams")))]
        pub fn addContentView<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::ViewGroup_LayoutParams>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC | ABSTRACT, .name == "addContentView", .descriptor == "(Landroid/view/View;Landroid/view/ViewGroup$LayoutParams;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "addContentView\0", "(Landroid/view/View;Landroid/view/ViewGroup$LayoutParams;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getCurrentFocus](https://developer.android.com/reference/android/view/Window.html#getCurrentFocus())
        ///
        /// Required features: "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-view-View")))]
        pub fn getCurrentFocus<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::View>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC | ABSTRACT, .name == "getCurrentFocus", .descriptor == "()Landroid/view/View;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "getCurrentFocus\0", "()Landroid/view/View;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getLayoutInflater](https://developer.android.com/reference/android/view/Window.html#getLayoutInflater())
        ///
        /// Required features: "android-view-LayoutInflater"
        #[cfg(any(feature = "all", all(feature = "android-view-LayoutInflater")))]
        pub fn getLayoutInflater<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::LayoutInflater>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC | ABSTRACT, .name == "getLayoutInflater", .descriptor == "()Landroid/view/LayoutInflater;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "getLayoutInflater\0", "()Landroid/view/LayoutInflater;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTitle](https://developer.android.com/reference/android/view/Window.html#setTitle(java.lang.CharSequence))
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn setTitle<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC | ABSTRACT, .name == "setTitle", .descriptor == "(Ljava/lang/CharSequence;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "setTitle\0", "(Ljava/lang/CharSequence;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTitleColor](https://developer.android.com/reference/android/view/Window.html#setTitleColor(int))
        #[deprecated] pub fn setTitleColor<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC | ABSTRACT, .name == "setTitleColor", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "setTitleColor\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [openPanel](https://developer.android.com/reference/android/view/Window.html#openPanel(int,%20android.view.KeyEvent))
        ///
        /// Required features: "android-view-KeyEvent"
        #[cfg(any(feature = "all", all(feature = "android-view-KeyEvent")))]
        pub fn openPanel<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::KeyEvent>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC | ABSTRACT, .name == "openPanel", .descriptor == "(ILandroid/view/KeyEvent;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "openPanel\0", "(ILandroid/view/KeyEvent;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [closePanel](https://developer.android.com/reference/android/view/Window.html#closePanel(int))
        pub fn closePanel<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC | ABSTRACT, .name == "closePanel", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "closePanel\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [togglePanel](https://developer.android.com/reference/android/view/Window.html#togglePanel(int,%20android.view.KeyEvent))
        ///
        /// Required features: "android-view-KeyEvent"
        #[cfg(any(feature = "all", all(feature = "android-view-KeyEvent")))]
        pub fn togglePanel<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::KeyEvent>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC | ABSTRACT, .name == "togglePanel", .descriptor == "(ILandroid/view/KeyEvent;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "togglePanel\0", "(ILandroid/view/KeyEvent;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [invalidatePanelMenu](https://developer.android.com/reference/android/view/Window.html#invalidatePanelMenu(int))
        pub fn invalidatePanelMenu<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC | ABSTRACT, .name == "invalidatePanelMenu", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "invalidatePanelMenu\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [performPanelShortcut](https://developer.android.com/reference/android/view/Window.html#performPanelShortcut(int,%20int,%20android.view.KeyEvent,%20int))
        ///
        /// Required features: "android-view-KeyEvent"
        #[cfg(any(feature = "all", all(feature = "android-view-KeyEvent")))]
        pub fn performPanelShortcut<'env>(&'env self, arg0: i32, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::KeyEvent>>, arg3: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC | ABSTRACT, .name == "performPanelShortcut", .descriptor == "(IILandroid/view/KeyEvent;I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into()), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "performPanelShortcut\0", "(IILandroid/view/KeyEvent;I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [performPanelIdentifierAction](https://developer.android.com/reference/android/view/Window.html#performPanelIdentifierAction(int,%20int,%20int))
        pub fn performPanelIdentifierAction<'env>(&'env self, arg0: i32, arg1: i32, arg2: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC | ABSTRACT, .name == "performPanelIdentifierAction", .descriptor == "(III)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "performPanelIdentifierAction\0", "(III)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [closeAllPanels](https://developer.android.com/reference/android/view/Window.html#closeAllPanels())
        pub fn closeAllPanels<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC | ABSTRACT, .name == "closeAllPanels", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "closeAllPanels\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [performContextMenuIdentifierAction](https://developer.android.com/reference/android/view/Window.html#performContextMenuIdentifierAction(int,%20int))
        pub fn performContextMenuIdentifierAction<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC | ABSTRACT, .name == "performContextMenuIdentifierAction", .descriptor == "(II)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "performContextMenuIdentifierAction\0", "(II)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [onConfigurationChanged](https://developer.android.com/reference/android/view/Window.html#onConfigurationChanged(android.content.res.Configuration))
        ///
        /// Required features: "android-content-res-Configuration"
        #[cfg(any(feature = "all", all(feature = "android-content-res-Configuration")))]
        pub fn onConfigurationChanged<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::res::Configuration>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC | ABSTRACT, .name == "onConfigurationChanged", .descriptor == "(Landroid/content/res/Configuration;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "onConfigurationChanged\0", "(Landroid/content/res/Configuration;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setElevation](https://developer.android.com/reference/android/view/Window.html#setElevation(float))
        pub fn setElevation<'env>(&'env self, arg0: f32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC, .name == "setElevation", .descriptor == "(F)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "setElevation\0", "(F)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setClipToOutline](https://developer.android.com/reference/android/view/Window.html#setClipToOutline(boolean))
        pub fn setClipToOutline<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC, .name == "setClipToOutline", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "setClipToOutline\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setBackgroundDrawableResource](https://developer.android.com/reference/android/view/Window.html#setBackgroundDrawableResource(int))
        pub fn setBackgroundDrawableResource<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC, .name == "setBackgroundDrawableResource", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "setBackgroundDrawableResource\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setBackgroundDrawable](https://developer.android.com/reference/android/view/Window.html#setBackgroundDrawable(android.graphics.drawable.Drawable))
        ///
        /// Required features: "android-graphics-drawable-Drawable"
        #[cfg(any(feature = "all", all(feature = "android-graphics-drawable-Drawable")))]
        pub fn setBackgroundDrawable<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::drawable::Drawable>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC | ABSTRACT, .name == "setBackgroundDrawable", .descriptor == "(Landroid/graphics/drawable/Drawable;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "setBackgroundDrawable\0", "(Landroid/graphics/drawable/Drawable;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setFeatureDrawableResource](https://developer.android.com/reference/android/view/Window.html#setFeatureDrawableResource(int,%20int))
        pub fn setFeatureDrawableResource<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC | ABSTRACT, .name == "setFeatureDrawableResource", .descriptor == "(II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "setFeatureDrawableResource\0", "(II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setFeatureDrawableUri](https://developer.android.com/reference/android/view/Window.html#setFeatureDrawableUri(int,%20android.net.Uri))
        ///
        /// Required features: "android-net-Uri"
        #[cfg(any(feature = "all", all(feature = "android-net-Uri")))]
        pub fn setFeatureDrawableUri<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::net::Uri>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC | ABSTRACT, .name == "setFeatureDrawableUri", .descriptor == "(ILandroid/net/Uri;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "setFeatureDrawableUri\0", "(ILandroid/net/Uri;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setFeatureDrawable](https://developer.android.com/reference/android/view/Window.html#setFeatureDrawable(int,%20android.graphics.drawable.Drawable))
        ///
        /// Required features: "android-graphics-drawable-Drawable"
        #[cfg(any(feature = "all", all(feature = "android-graphics-drawable-Drawable")))]
        pub fn setFeatureDrawable<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::drawable::Drawable>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC | ABSTRACT, .name == "setFeatureDrawable", .descriptor == "(ILandroid/graphics/drawable/Drawable;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "setFeatureDrawable\0", "(ILandroid/graphics/drawable/Drawable;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setFeatureDrawableAlpha](https://developer.android.com/reference/android/view/Window.html#setFeatureDrawableAlpha(int,%20int))
        pub fn setFeatureDrawableAlpha<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC | ABSTRACT, .name == "setFeatureDrawableAlpha", .descriptor == "(II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "setFeatureDrawableAlpha\0", "(II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setFeatureInt](https://developer.android.com/reference/android/view/Window.html#setFeatureInt(int,%20int))
        pub fn setFeatureInt<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC | ABSTRACT, .name == "setFeatureInt", .descriptor == "(II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "setFeatureInt\0", "(II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [takeKeyEvents](https://developer.android.com/reference/android/view/Window.html#takeKeyEvents(boolean))
        pub fn takeKeyEvents<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC | ABSTRACT, .name == "takeKeyEvents", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "takeKeyEvents\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [superDispatchKeyEvent](https://developer.android.com/reference/android/view/Window.html#superDispatchKeyEvent(android.view.KeyEvent))
        ///
        /// Required features: "android-view-KeyEvent"
        #[cfg(any(feature = "all", all(feature = "android-view-KeyEvent")))]
        pub fn superDispatchKeyEvent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::KeyEvent>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC | ABSTRACT, .name == "superDispatchKeyEvent", .descriptor == "(Landroid/view/KeyEvent;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "superDispatchKeyEvent\0", "(Landroid/view/KeyEvent;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [superDispatchKeyShortcutEvent](https://developer.android.com/reference/android/view/Window.html#superDispatchKeyShortcutEvent(android.view.KeyEvent))
        ///
        /// Required features: "android-view-KeyEvent"
        #[cfg(any(feature = "all", all(feature = "android-view-KeyEvent")))]
        pub fn superDispatchKeyShortcutEvent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::KeyEvent>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC | ABSTRACT, .name == "superDispatchKeyShortcutEvent", .descriptor == "(Landroid/view/KeyEvent;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "superDispatchKeyShortcutEvent\0", "(Landroid/view/KeyEvent;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [superDispatchTouchEvent](https://developer.android.com/reference/android/view/Window.html#superDispatchTouchEvent(android.view.MotionEvent))
        ///
        /// Required features: "android-view-MotionEvent"
        #[cfg(any(feature = "all", all(feature = "android-view-MotionEvent")))]
        pub fn superDispatchTouchEvent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::MotionEvent>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC | ABSTRACT, .name == "superDispatchTouchEvent", .descriptor == "(Landroid/view/MotionEvent;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "superDispatchTouchEvent\0", "(Landroid/view/MotionEvent;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [superDispatchTrackballEvent](https://developer.android.com/reference/android/view/Window.html#superDispatchTrackballEvent(android.view.MotionEvent))
        ///
        /// Required features: "android-view-MotionEvent"
        #[cfg(any(feature = "all", all(feature = "android-view-MotionEvent")))]
        pub fn superDispatchTrackballEvent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::MotionEvent>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC | ABSTRACT, .name == "superDispatchTrackballEvent", .descriptor == "(Landroid/view/MotionEvent;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "superDispatchTrackballEvent\0", "(Landroid/view/MotionEvent;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [superDispatchGenericMotionEvent](https://developer.android.com/reference/android/view/Window.html#superDispatchGenericMotionEvent(android.view.MotionEvent))
        ///
        /// Required features: "android-view-MotionEvent"
        #[cfg(any(feature = "all", all(feature = "android-view-MotionEvent")))]
        pub fn superDispatchGenericMotionEvent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::MotionEvent>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC | ABSTRACT, .name == "superDispatchGenericMotionEvent", .descriptor == "(Landroid/view/MotionEvent;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "superDispatchGenericMotionEvent\0", "(Landroid/view/MotionEvent;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDecorView](https://developer.android.com/reference/android/view/Window.html#getDecorView())
        ///
        /// Required features: "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-view-View")))]
        pub fn getDecorView<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::View>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC | ABSTRACT, .name == "getDecorView", .descriptor == "()Landroid/view/View;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "getDecorView\0", "()Landroid/view/View;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [peekDecorView](https://developer.android.com/reference/android/view/Window.html#peekDecorView())
        ///
        /// Required features: "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-view-View")))]
        pub fn peekDecorView<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::View>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC | ABSTRACT, .name == "peekDecorView", .descriptor == "()Landroid/view/View;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "peekDecorView\0", "()Landroid/view/View;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [saveHierarchyState](https://developer.android.com/reference/android/view/Window.html#saveHierarchyState())
        ///
        /// Required features: "android-os-Bundle"
        #[cfg(any(feature = "all", all(feature = "android-os-Bundle")))]
        pub fn saveHierarchyState<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::os::Bundle>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC | ABSTRACT, .name == "saveHierarchyState", .descriptor == "()Landroid/os/Bundle;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "saveHierarchyState\0", "()Landroid/os/Bundle;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [restoreHierarchyState](https://developer.android.com/reference/android/view/Window.html#restoreHierarchyState(android.os.Bundle))
        ///
        /// Required features: "android-os-Bundle"
        #[cfg(any(feature = "all", all(feature = "android-os-Bundle")))]
        pub fn restoreHierarchyState<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::os::Bundle>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC | ABSTRACT, .name == "restoreHierarchyState", .descriptor == "(Landroid/os/Bundle;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "restoreHierarchyState\0", "(Landroid/os/Bundle;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [onActive](https://developer.android.com/reference/android/view/Window.html#onActive())
        // fn onActive<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/Window", java.flags == PROTECTED | ABSTRACT, .name == "onActive", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "onActive\0", "()V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [getFeatures](https://developer.android.com/reference/android/view/Window.html#getFeatures())
        // fn getFeatures<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/Window", java.flags == PROTECTED | FINAL, .name == "getFeatures", .descriptor == "()I"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "getFeatures\0", "()I\0");
        //         __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [getDefaultFeatures](https://developer.android.com/reference/android/view/Window.html#getDefaultFeatures(android.content.Context))
        ///
        /// Required features: "android-content-Context"
        #[cfg(any(feature = "all", all(feature = "android-content-Context")))]
        pub fn getDefaultFeatures<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Context>>) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC | STATIC, .name == "getDefaultFeatures", .descriptor == "(Landroid/content/Context;)I"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let (__jni_class, __jni_method) = __jni_env.require_class_static_method("android/view/Window\0", "getDefaultFeatures\0", "(Landroid/content/Context;)I\0");
                __jni_env.call_static_int_method_a(__jni_class, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasFeature](https://developer.android.com/reference/android/view/Window.html#hasFeature(int))
        pub fn hasFeature<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC, .name == "hasFeature", .descriptor == "(I)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "hasFeature\0", "(I)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [getLocalFeatures](https://developer.android.com/reference/android/view/Window.html#getLocalFeatures())
        // fn getLocalFeatures<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/Window", java.flags == PROTECTED | FINAL, .name == "getLocalFeatures", .descriptor == "()I"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "getLocalFeatures\0", "()I\0");
        //         __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        // // Not emitting: Non-public method
        // /// [setDefaultWindowFormat](https://developer.android.com/reference/android/view/Window.html#setDefaultWindowFormat(int))
        // fn setDefaultWindowFormat<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/Window", java.flags == PROTECTED, .name == "setDefaultWindowFormat", .descriptor == "(I)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "setDefaultWindowFormat\0", "(I)V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [setChildDrawable](https://developer.android.com/reference/android/view/Window.html#setChildDrawable(int,%20android.graphics.drawable.Drawable))
        ///
        /// Required features: "android-graphics-drawable-Drawable"
        #[cfg(any(feature = "all", all(feature = "android-graphics-drawable-Drawable")))]
        pub fn setChildDrawable<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::drawable::Drawable>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC | ABSTRACT, .name == "setChildDrawable", .descriptor == "(ILandroid/graphics/drawable/Drawable;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "setChildDrawable\0", "(ILandroid/graphics/drawable/Drawable;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setChildInt](https://developer.android.com/reference/android/view/Window.html#setChildInt(int,%20int))
        pub fn setChildInt<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC | ABSTRACT, .name == "setChildInt", .descriptor == "(II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "setChildInt\0", "(II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isShortcutKey](https://developer.android.com/reference/android/view/Window.html#isShortcutKey(int,%20android.view.KeyEvent))
        ///
        /// Required features: "android-view-KeyEvent"
        #[cfg(any(feature = "all", all(feature = "android-view-KeyEvent")))]
        pub fn isShortcutKey<'env>(&'env self, arg0: i32, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::KeyEvent>>) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC | ABSTRACT, .name == "isShortcutKey", .descriptor == "(ILandroid/view/KeyEvent;)Z"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "isShortcutKey\0", "(ILandroid/view/KeyEvent;)Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setVolumeControlStream](https://developer.android.com/reference/android/view/Window.html#setVolumeControlStream(int))
        pub fn setVolumeControlStream<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC | ABSTRACT, .name == "setVolumeControlStream", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "setVolumeControlStream\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getVolumeControlStream](https://developer.android.com/reference/android/view/Window.html#getVolumeControlStream())
        pub fn getVolumeControlStream<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC | ABSTRACT, .name == "getVolumeControlStream", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "getVolumeControlStream\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setMediaController](https://developer.android.com/reference/android/view/Window.html#setMediaController(android.media.session.MediaController))
        ///
        /// Required features: "android-media-session-MediaController"
        #[cfg(any(feature = "all", all(feature = "android-media-session-MediaController")))]
        pub fn setMediaController<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::media::session::MediaController>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC, .name == "setMediaController", .descriptor == "(Landroid/media/session/MediaController;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "setMediaController\0", "(Landroid/media/session/MediaController;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMediaController](https://developer.android.com/reference/android/view/Window.html#getMediaController())
        ///
        /// Required features: "android-media-session-MediaController"
        #[cfg(any(feature = "all", all(feature = "android-media-session-MediaController")))]
        pub fn getMediaController<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::media::session::MediaController>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC, .name == "getMediaController", .descriptor == "()Landroid/media/session/MediaController;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "getMediaController\0", "()Landroid/media/session/MediaController;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setUiOptions](https://developer.android.com/reference/android/view/Window.html#setUiOptions(int))
        pub fn setUiOptions_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC, .name == "setUiOptions", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "setUiOptions\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setUiOptions](https://developer.android.com/reference/android/view/Window.html#setUiOptions(int,%20int))
        pub fn setUiOptions_int_int<'env>(&'env self, arg0: i32, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC, .name == "setUiOptions", .descriptor == "(II)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "setUiOptions\0", "(II)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setIcon](https://developer.android.com/reference/android/view/Window.html#setIcon(int))
        pub fn setIcon<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC, .name == "setIcon", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "setIcon\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setLogo](https://developer.android.com/reference/android/view/Window.html#setLogo(int))
        pub fn setLogo<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC, .name == "setLogo", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "setLogo\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setLocalFocus](https://developer.android.com/reference/android/view/Window.html#setLocalFocus(boolean,%20boolean))
        pub fn setLocalFocus<'env>(&'env self, arg0: bool, arg1: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC, .name == "setLocalFocus", .descriptor == "(ZZ)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "setLocalFocus\0", "(ZZ)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [injectInputEvent](https://developer.android.com/reference/android/view/Window.html#injectInputEvent(android.view.InputEvent))
        ///
        /// Required features: "android-view-InputEvent"
        #[cfg(any(feature = "all", all(feature = "android-view-InputEvent")))]
        pub fn injectInputEvent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::InputEvent>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC, .name == "injectInputEvent", .descriptor == "(Landroid/view/InputEvent;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "injectInputEvent\0", "(Landroid/view/InputEvent;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTransitionManager](https://developer.android.com/reference/android/view/Window.html#getTransitionManager())
        ///
        /// Required features: "android-transition-TransitionManager"
        #[cfg(any(feature = "all", all(feature = "android-transition-TransitionManager")))]
        pub fn getTransitionManager<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::transition::TransitionManager>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC, .name == "getTransitionManager", .descriptor == "()Landroid/transition/TransitionManager;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "getTransitionManager\0", "()Landroid/transition/TransitionManager;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTransitionManager](https://developer.android.com/reference/android/view/Window.html#setTransitionManager(android.transition.TransitionManager))
        ///
        /// Required features: "android-transition-TransitionManager"
        #[cfg(any(feature = "all", all(feature = "android-transition-TransitionManager")))]
        pub fn setTransitionManager<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::transition::TransitionManager>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC, .name == "setTransitionManager", .descriptor == "(Landroid/transition/TransitionManager;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "setTransitionManager\0", "(Landroid/transition/TransitionManager;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getContentScene](https://developer.android.com/reference/android/view/Window.html#getContentScene())
        ///
        /// Required features: "android-transition-Scene"
        #[cfg(any(feature = "all", all(feature = "android-transition-Scene")))]
        pub fn getContentScene<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::transition::Scene>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC, .name == "getContentScene", .descriptor == "()Landroid/transition/Scene;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "getContentScene\0", "()Landroid/transition/Scene;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setEnterTransition](https://developer.android.com/reference/android/view/Window.html#setEnterTransition(android.transition.Transition))
        ///
        /// Required features: "android-transition-Transition"
        #[cfg(any(feature = "all", all(feature = "android-transition-Transition")))]
        pub fn setEnterTransition<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::transition::Transition>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC, .name == "setEnterTransition", .descriptor == "(Landroid/transition/Transition;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "setEnterTransition\0", "(Landroid/transition/Transition;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setReturnTransition](https://developer.android.com/reference/android/view/Window.html#setReturnTransition(android.transition.Transition))
        ///
        /// Required features: "android-transition-Transition"
        #[cfg(any(feature = "all", all(feature = "android-transition-Transition")))]
        pub fn setReturnTransition<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::transition::Transition>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC, .name == "setReturnTransition", .descriptor == "(Landroid/transition/Transition;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "setReturnTransition\0", "(Landroid/transition/Transition;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setExitTransition](https://developer.android.com/reference/android/view/Window.html#setExitTransition(android.transition.Transition))
        ///
        /// Required features: "android-transition-Transition"
        #[cfg(any(feature = "all", all(feature = "android-transition-Transition")))]
        pub fn setExitTransition<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::transition::Transition>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC, .name == "setExitTransition", .descriptor == "(Landroid/transition/Transition;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "setExitTransition\0", "(Landroid/transition/Transition;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setReenterTransition](https://developer.android.com/reference/android/view/Window.html#setReenterTransition(android.transition.Transition))
        ///
        /// Required features: "android-transition-Transition"
        #[cfg(any(feature = "all", all(feature = "android-transition-Transition")))]
        pub fn setReenterTransition<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::transition::Transition>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC, .name == "setReenterTransition", .descriptor == "(Landroid/transition/Transition;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "setReenterTransition\0", "(Landroid/transition/Transition;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getEnterTransition](https://developer.android.com/reference/android/view/Window.html#getEnterTransition())
        ///
        /// Required features: "android-transition-Transition"
        #[cfg(any(feature = "all", all(feature = "android-transition-Transition")))]
        pub fn getEnterTransition<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::transition::Transition>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC, .name == "getEnterTransition", .descriptor == "()Landroid/transition/Transition;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "getEnterTransition\0", "()Landroid/transition/Transition;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getReturnTransition](https://developer.android.com/reference/android/view/Window.html#getReturnTransition())
        ///
        /// Required features: "android-transition-Transition"
        #[cfg(any(feature = "all", all(feature = "android-transition-Transition")))]
        pub fn getReturnTransition<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::transition::Transition>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC, .name == "getReturnTransition", .descriptor == "()Landroid/transition/Transition;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "getReturnTransition\0", "()Landroid/transition/Transition;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getExitTransition](https://developer.android.com/reference/android/view/Window.html#getExitTransition())
        ///
        /// Required features: "android-transition-Transition"
        #[cfg(any(feature = "all", all(feature = "android-transition-Transition")))]
        pub fn getExitTransition<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::transition::Transition>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC, .name == "getExitTransition", .descriptor == "()Landroid/transition/Transition;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "getExitTransition\0", "()Landroid/transition/Transition;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getReenterTransition](https://developer.android.com/reference/android/view/Window.html#getReenterTransition())
        ///
        /// Required features: "android-transition-Transition"
        #[cfg(any(feature = "all", all(feature = "android-transition-Transition")))]
        pub fn getReenterTransition<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::transition::Transition>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC, .name == "getReenterTransition", .descriptor == "()Landroid/transition/Transition;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "getReenterTransition\0", "()Landroid/transition/Transition;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setSharedElementEnterTransition](https://developer.android.com/reference/android/view/Window.html#setSharedElementEnterTransition(android.transition.Transition))
        ///
        /// Required features: "android-transition-Transition"
        #[cfg(any(feature = "all", all(feature = "android-transition-Transition")))]
        pub fn setSharedElementEnterTransition<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::transition::Transition>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC, .name == "setSharedElementEnterTransition", .descriptor == "(Landroid/transition/Transition;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "setSharedElementEnterTransition\0", "(Landroid/transition/Transition;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setSharedElementReturnTransition](https://developer.android.com/reference/android/view/Window.html#setSharedElementReturnTransition(android.transition.Transition))
        ///
        /// Required features: "android-transition-Transition"
        #[cfg(any(feature = "all", all(feature = "android-transition-Transition")))]
        pub fn setSharedElementReturnTransition<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::transition::Transition>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC, .name == "setSharedElementReturnTransition", .descriptor == "(Landroid/transition/Transition;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "setSharedElementReturnTransition\0", "(Landroid/transition/Transition;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSharedElementEnterTransition](https://developer.android.com/reference/android/view/Window.html#getSharedElementEnterTransition())
        ///
        /// Required features: "android-transition-Transition"
        #[cfg(any(feature = "all", all(feature = "android-transition-Transition")))]
        pub fn getSharedElementEnterTransition<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::transition::Transition>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC, .name == "getSharedElementEnterTransition", .descriptor == "()Landroid/transition/Transition;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "getSharedElementEnterTransition\0", "()Landroid/transition/Transition;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSharedElementReturnTransition](https://developer.android.com/reference/android/view/Window.html#getSharedElementReturnTransition())
        ///
        /// Required features: "android-transition-Transition"
        #[cfg(any(feature = "all", all(feature = "android-transition-Transition")))]
        pub fn getSharedElementReturnTransition<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::transition::Transition>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC, .name == "getSharedElementReturnTransition", .descriptor == "()Landroid/transition/Transition;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "getSharedElementReturnTransition\0", "()Landroid/transition/Transition;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setSharedElementExitTransition](https://developer.android.com/reference/android/view/Window.html#setSharedElementExitTransition(android.transition.Transition))
        ///
        /// Required features: "android-transition-Transition"
        #[cfg(any(feature = "all", all(feature = "android-transition-Transition")))]
        pub fn setSharedElementExitTransition<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::transition::Transition>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC, .name == "setSharedElementExitTransition", .descriptor == "(Landroid/transition/Transition;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "setSharedElementExitTransition\0", "(Landroid/transition/Transition;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setSharedElementReenterTransition](https://developer.android.com/reference/android/view/Window.html#setSharedElementReenterTransition(android.transition.Transition))
        ///
        /// Required features: "android-transition-Transition"
        #[cfg(any(feature = "all", all(feature = "android-transition-Transition")))]
        pub fn setSharedElementReenterTransition<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::transition::Transition>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC, .name == "setSharedElementReenterTransition", .descriptor == "(Landroid/transition/Transition;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "setSharedElementReenterTransition\0", "(Landroid/transition/Transition;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSharedElementExitTransition](https://developer.android.com/reference/android/view/Window.html#getSharedElementExitTransition())
        ///
        /// Required features: "android-transition-Transition"
        #[cfg(any(feature = "all", all(feature = "android-transition-Transition")))]
        pub fn getSharedElementExitTransition<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::transition::Transition>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC, .name == "getSharedElementExitTransition", .descriptor == "()Landroid/transition/Transition;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "getSharedElementExitTransition\0", "()Landroid/transition/Transition;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSharedElementReenterTransition](https://developer.android.com/reference/android/view/Window.html#getSharedElementReenterTransition())
        ///
        /// Required features: "android-transition-Transition"
        #[cfg(any(feature = "all", all(feature = "android-transition-Transition")))]
        pub fn getSharedElementReenterTransition<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::transition::Transition>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC, .name == "getSharedElementReenterTransition", .descriptor == "()Landroid/transition/Transition;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "getSharedElementReenterTransition\0", "()Landroid/transition/Transition;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAllowEnterTransitionOverlap](https://developer.android.com/reference/android/view/Window.html#setAllowEnterTransitionOverlap(boolean))
        pub fn setAllowEnterTransitionOverlap<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC, .name == "setAllowEnterTransitionOverlap", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "setAllowEnterTransitionOverlap\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAllowEnterTransitionOverlap](https://developer.android.com/reference/android/view/Window.html#getAllowEnterTransitionOverlap())
        pub fn getAllowEnterTransitionOverlap<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC, .name == "getAllowEnterTransitionOverlap", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "getAllowEnterTransitionOverlap\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAllowReturnTransitionOverlap](https://developer.android.com/reference/android/view/Window.html#setAllowReturnTransitionOverlap(boolean))
        pub fn setAllowReturnTransitionOverlap<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC, .name == "setAllowReturnTransitionOverlap", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "setAllowReturnTransitionOverlap\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAllowReturnTransitionOverlap](https://developer.android.com/reference/android/view/Window.html#getAllowReturnTransitionOverlap())
        pub fn getAllowReturnTransitionOverlap<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC, .name == "getAllowReturnTransitionOverlap", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "getAllowReturnTransitionOverlap\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTransitionBackgroundFadeDuration](https://developer.android.com/reference/android/view/Window.html#getTransitionBackgroundFadeDuration())
        pub fn getTransitionBackgroundFadeDuration<'env>(&'env self) -> __jni_bindgen::std::result::Result<i64, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC, .name == "getTransitionBackgroundFadeDuration", .descriptor == "()J"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "getTransitionBackgroundFadeDuration\0", "()J\0");
                __jni_env.call_long_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTransitionBackgroundFadeDuration](https://developer.android.com/reference/android/view/Window.html#setTransitionBackgroundFadeDuration(long))
        pub fn setTransitionBackgroundFadeDuration<'env>(&'env self, arg0: i64) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC, .name == "setTransitionBackgroundFadeDuration", .descriptor == "(J)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "setTransitionBackgroundFadeDuration\0", "(J)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSharedElementsUseOverlay](https://developer.android.com/reference/android/view/Window.html#getSharedElementsUseOverlay())
        pub fn getSharedElementsUseOverlay<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC, .name == "getSharedElementsUseOverlay", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "getSharedElementsUseOverlay\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setSharedElementsUseOverlay](https://developer.android.com/reference/android/view/Window.html#setSharedElementsUseOverlay(boolean))
        pub fn setSharedElementsUseOverlay<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC, .name == "setSharedElementsUseOverlay", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "setSharedElementsUseOverlay\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getStatusBarColor](https://developer.android.com/reference/android/view/Window.html#getStatusBarColor())
        pub fn getStatusBarColor<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC | ABSTRACT, .name == "getStatusBarColor", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "getStatusBarColor\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setStatusBarColor](https://developer.android.com/reference/android/view/Window.html#setStatusBarColor(int))
        pub fn setStatusBarColor<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC | ABSTRACT, .name == "setStatusBarColor", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "setStatusBarColor\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNavigationBarColor](https://developer.android.com/reference/android/view/Window.html#getNavigationBarColor())
        pub fn getNavigationBarColor<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC | ABSTRACT, .name == "getNavigationBarColor", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "getNavigationBarColor\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setNavigationBarColor](https://developer.android.com/reference/android/view/Window.html#setNavigationBarColor(int))
        pub fn setNavigationBarColor<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC | ABSTRACT, .name == "setNavigationBarColor", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "setNavigationBarColor\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setNavigationBarDividerColor](https://developer.android.com/reference/android/view/Window.html#setNavigationBarDividerColor(int))
        pub fn setNavigationBarDividerColor<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC, .name == "setNavigationBarDividerColor", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "setNavigationBarDividerColor\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNavigationBarDividerColor](https://developer.android.com/reference/android/view/Window.html#getNavigationBarDividerColor())
        pub fn getNavigationBarDividerColor<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC, .name == "getNavigationBarDividerColor", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "getNavigationBarDividerColor\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setStatusBarContrastEnforced](https://developer.android.com/reference/android/view/Window.html#setStatusBarContrastEnforced(boolean))
        pub fn setStatusBarContrastEnforced<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC, .name == "setStatusBarContrastEnforced", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "setStatusBarContrastEnforced\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isStatusBarContrastEnforced](https://developer.android.com/reference/android/view/Window.html#isStatusBarContrastEnforced())
        pub fn isStatusBarContrastEnforced<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC, .name == "isStatusBarContrastEnforced", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "isStatusBarContrastEnforced\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setNavigationBarContrastEnforced](https://developer.android.com/reference/android/view/Window.html#setNavigationBarContrastEnforced(boolean))
        pub fn setNavigationBarContrastEnforced<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC, .name == "setNavigationBarContrastEnforced", .descriptor == "(Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "setNavigationBarContrastEnforced\0", "(Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isNavigationBarContrastEnforced](https://developer.android.com/reference/android/view/Window.html#isNavigationBarContrastEnforced())
        pub fn isNavigationBarContrastEnforced<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC, .name == "isNavigationBarContrastEnforced", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "isNavigationBarContrastEnforced\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setSystemGestureExclusionRects](https://developer.android.com/reference/android/view/Window.html#setSystemGestureExclusionRects(java.util.List))
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn setSystemGestureExclusionRects<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::util::List>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC, .name == "setSystemGestureExclusionRects", .descriptor == "(Ljava/util/List;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "setSystemGestureExclusionRects\0", "(Ljava/util/List;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSystemGestureExclusionRects](https://developer.android.com/reference/android/view/Window.html#getSystemGestureExclusionRects())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getSystemGestureExclusionRects<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC, .name == "getSystemGestureExclusionRects", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "getSystemGestureExclusionRects\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setDecorCaptionShade](https://developer.android.com/reference/android/view/Window.html#setDecorCaptionShade(int))
        pub fn setDecorCaptionShade<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC | ABSTRACT, .name == "setDecorCaptionShade", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "setDecorCaptionShade\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setResizingCaptionDrawable](https://developer.android.com/reference/android/view/Window.html#setResizingCaptionDrawable(android.graphics.drawable.Drawable))
        ///
        /// Required features: "android-graphics-drawable-Drawable"
        #[cfg(any(feature = "all", all(feature = "android-graphics-drawable-Drawable")))]
        pub fn setResizingCaptionDrawable<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::drawable::Drawable>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/Window", java.flags == PUBLIC | ABSTRACT, .name == "setResizingCaptionDrawable", .descriptor == "(Landroid/graphics/drawable/Drawable;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/Window\0", "setResizingCaptionDrawable\0", "(Landroid/graphics/drawable/Drawable;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [DECOR_CAPTION_SHADE_AUTO](https://developer.android.com/reference/android/view/Window.html#DECOR_CAPTION_SHADE_AUTO)
        pub const DECOR_CAPTION_SHADE_AUTO : i32 = 0;

        /// public static final [DECOR_CAPTION_SHADE_DARK](https://developer.android.com/reference/android/view/Window.html#DECOR_CAPTION_SHADE_DARK)
        pub const DECOR_CAPTION_SHADE_DARK : i32 = 2;

        /// public static final [DECOR_CAPTION_SHADE_LIGHT](https://developer.android.com/reference/android/view/Window.html#DECOR_CAPTION_SHADE_LIGHT)
        pub const DECOR_CAPTION_SHADE_LIGHT : i32 = 1;

        // // Not emitting: Non-public field
        // /// protected static final [DEFAULT_FEATURES](https://developer.android.com/reference/android/view/Window.html#DEFAULT_FEATURES)
        // #[deprecated] pub const DEFAULT_FEATURES : i32 = 65;

        /// public static final [FEATURE_ACTION_BAR](https://developer.android.com/reference/android/view/Window.html#FEATURE_ACTION_BAR)
        pub const FEATURE_ACTION_BAR : i32 = 8;

        /// public static final [FEATURE_ACTION_BAR_OVERLAY](https://developer.android.com/reference/android/view/Window.html#FEATURE_ACTION_BAR_OVERLAY)
        pub const FEATURE_ACTION_BAR_OVERLAY : i32 = 9;

        /// public static final [FEATURE_ACTION_MODE_OVERLAY](https://developer.android.com/reference/android/view/Window.html#FEATURE_ACTION_MODE_OVERLAY)
        pub const FEATURE_ACTION_MODE_OVERLAY : i32 = 10;

        /// public static final [FEATURE_ACTIVITY_TRANSITIONS](https://developer.android.com/reference/android/view/Window.html#FEATURE_ACTIVITY_TRANSITIONS)
        pub const FEATURE_ACTIVITY_TRANSITIONS : i32 = 13;

        /// public static final [FEATURE_CONTENT_TRANSITIONS](https://developer.android.com/reference/android/view/Window.html#FEATURE_CONTENT_TRANSITIONS)
        pub const FEATURE_CONTENT_TRANSITIONS : i32 = 12;

        /// public static final [FEATURE_CONTEXT_MENU](https://developer.android.com/reference/android/view/Window.html#FEATURE_CONTEXT_MENU)
        pub const FEATURE_CONTEXT_MENU : i32 = 6;

        /// public static final [FEATURE_CUSTOM_TITLE](https://developer.android.com/reference/android/view/Window.html#FEATURE_CUSTOM_TITLE)
        pub const FEATURE_CUSTOM_TITLE : i32 = 7;

        /// public static final [FEATURE_INDETERMINATE_PROGRESS](https://developer.android.com/reference/android/view/Window.html#FEATURE_INDETERMINATE_PROGRESS)
        #[deprecated] pub const FEATURE_INDETERMINATE_PROGRESS : i32 = 5;

        /// public static final [FEATURE_LEFT_ICON](https://developer.android.com/reference/android/view/Window.html#FEATURE_LEFT_ICON)
        pub const FEATURE_LEFT_ICON : i32 = 3;

        /// public static final [FEATURE_NO_TITLE](https://developer.android.com/reference/android/view/Window.html#FEATURE_NO_TITLE)
        pub const FEATURE_NO_TITLE : i32 = 1;

        /// public static final [FEATURE_OPTIONS_PANEL](https://developer.android.com/reference/android/view/Window.html#FEATURE_OPTIONS_PANEL)
        pub const FEATURE_OPTIONS_PANEL : i32 = 0;

        /// public static final [FEATURE_PROGRESS](https://developer.android.com/reference/android/view/Window.html#FEATURE_PROGRESS)
        #[deprecated] pub const FEATURE_PROGRESS : i32 = 2;

        /// public static final [FEATURE_RIGHT_ICON](https://developer.android.com/reference/android/view/Window.html#FEATURE_RIGHT_ICON)
        pub const FEATURE_RIGHT_ICON : i32 = 4;

        /// public static final [FEATURE_SWIPE_TO_DISMISS](https://developer.android.com/reference/android/view/Window.html#FEATURE_SWIPE_TO_DISMISS)
        pub const FEATURE_SWIPE_TO_DISMISS : i32 = 11;

        /// public static final [ID_ANDROID_CONTENT](https://developer.android.com/reference/android/view/Window.html#ID_ANDROID_CONTENT)
        pub const ID_ANDROID_CONTENT : i32 = 16908290;

        /// public static final [NAVIGATION_BAR_BACKGROUND_TRANSITION_NAME](https://developer.android.com/reference/android/view/Window.html#NAVIGATION_BAR_BACKGROUND_TRANSITION_NAME)
        pub const NAVIGATION_BAR_BACKGROUND_TRANSITION_NAME : &'static str = "android:navigation:background";

        /// public static final [PROGRESS_END](https://developer.android.com/reference/android/view/Window.html#PROGRESS_END)
        #[deprecated] pub const PROGRESS_END : i32 = 10000;

        /// public static final [PROGRESS_INDETERMINATE_OFF](https://developer.android.com/reference/android/view/Window.html#PROGRESS_INDETERMINATE_OFF)
        #[deprecated] pub const PROGRESS_INDETERMINATE_OFF : i32 = -4;

        /// public static final [PROGRESS_INDETERMINATE_ON](https://developer.android.com/reference/android/view/Window.html#PROGRESS_INDETERMINATE_ON)
        #[deprecated] pub const PROGRESS_INDETERMINATE_ON : i32 = -3;

        /// public static final [PROGRESS_SECONDARY_END](https://developer.android.com/reference/android/view/Window.html#PROGRESS_SECONDARY_END)
        #[deprecated] pub const PROGRESS_SECONDARY_END : i32 = 30000;

        /// public static final [PROGRESS_SECONDARY_START](https://developer.android.com/reference/android/view/Window.html#PROGRESS_SECONDARY_START)
        #[deprecated] pub const PROGRESS_SECONDARY_START : i32 = 20000;

        /// public static final [PROGRESS_START](https://developer.android.com/reference/android/view/Window.html#PROGRESS_START)
        #[deprecated] pub const PROGRESS_START : i32 = 0;

        /// public static final [PROGRESS_VISIBILITY_OFF](https://developer.android.com/reference/android/view/Window.html#PROGRESS_VISIBILITY_OFF)
        #[deprecated] pub const PROGRESS_VISIBILITY_OFF : i32 = -2;

        /// public static final [PROGRESS_VISIBILITY_ON](https://developer.android.com/reference/android/view/Window.html#PROGRESS_VISIBILITY_ON)
        #[deprecated] pub const PROGRESS_VISIBILITY_ON : i32 = -1;

        /// public static final [STATUS_BAR_BACKGROUND_TRANSITION_NAME](https://developer.android.com/reference/android/view/Window.html#STATUS_BAR_BACKGROUND_TRANSITION_NAME)
        pub const STATUS_BAR_BACKGROUND_TRANSITION_NAME : &'static str = "android:status:background";
    }
}
