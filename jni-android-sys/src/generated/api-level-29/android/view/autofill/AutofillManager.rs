// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-view-autofill-AutofillManager"))]
__jni_bindgen! {
    /// public final class [AutofillManager](https://developer.android.com/reference/android/view/autofill/AutofillManager.html)
    ///
    /// Required feature: android-view-autofill-AutofillManager
    public final class AutofillManager ("android/view/autofill/AutofillManager") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [AutofillManager](https://developer.android.com/reference/android/view/autofill/AutofillManager.html#AutofillManager())
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::view::autofill::AutofillManager>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/autofill/AutofillManager", java.flags == (empty), .name == "<init>", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/autofill/AutofillManager\0", "<init>\0", "()V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [isEnabled](https://developer.android.com/reference/android/view/autofill/AutofillManager.html#isEnabled())
        pub fn isEnabled<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/autofill/AutofillManager", java.flags == PUBLIC, .name == "isEnabled", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/autofill/AutofillManager\0", "isEnabled\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [requestAutofill](https://developer.android.com/reference/android/view/autofill/AutofillManager.html#requestAutofill(android.view.View))
        ///
        /// Required features: "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-view-View")))]
        pub fn requestAutofill_View<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/autofill/AutofillManager", java.flags == PUBLIC, .name == "requestAutofill", .descriptor == "(Landroid/view/View;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/autofill/AutofillManager\0", "requestAutofill\0", "(Landroid/view/View;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [requestAutofill](https://developer.android.com/reference/android/view/autofill/AutofillManager.html#requestAutofill(android.view.View,%20int,%20android.graphics.Rect))
        ///
        /// Required features: "android-graphics-Rect", "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Rect", feature = "android-view-View")))]
        pub fn requestAutofill_View_int_Rect<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Rect>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/autofill/AutofillManager", java.flags == PUBLIC, .name == "requestAutofill", .descriptor == "(Landroid/view/View;ILandroid/graphics/Rect;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/autofill/AutofillManager\0", "requestAutofill\0", "(Landroid/view/View;ILandroid/graphics/Rect;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [notifyViewEntered](https://developer.android.com/reference/android/view/autofill/AutofillManager.html#notifyViewEntered(android.view.View))
        ///
        /// Required features: "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-view-View")))]
        pub fn notifyViewEntered_View<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/autofill/AutofillManager", java.flags == PUBLIC, .name == "notifyViewEntered", .descriptor == "(Landroid/view/View;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/autofill/AutofillManager\0", "notifyViewEntered\0", "(Landroid/view/View;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [notifyViewExited](https://developer.android.com/reference/android/view/autofill/AutofillManager.html#notifyViewExited(android.view.View))
        ///
        /// Required features: "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-view-View")))]
        pub fn notifyViewExited_View<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/autofill/AutofillManager", java.flags == PUBLIC, .name == "notifyViewExited", .descriptor == "(Landroid/view/View;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/autofill/AutofillManager\0", "notifyViewExited\0", "(Landroid/view/View;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [notifyViewVisibilityChanged](https://developer.android.com/reference/android/view/autofill/AutofillManager.html#notifyViewVisibilityChanged(android.view.View,%20boolean))
        ///
        /// Required features: "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-view-View")))]
        pub fn notifyViewVisibilityChanged_View_boolean<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>, arg1: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/autofill/AutofillManager", java.flags == PUBLIC, .name == "notifyViewVisibilityChanged", .descriptor == "(Landroid/view/View;Z)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/autofill/AutofillManager\0", "notifyViewVisibilityChanged\0", "(Landroid/view/View;Z)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [notifyViewVisibilityChanged](https://developer.android.com/reference/android/view/autofill/AutofillManager.html#notifyViewVisibilityChanged(android.view.View,%20int,%20boolean))
        ///
        /// Required features: "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-view-View")))]
        pub fn notifyViewVisibilityChanged_View_int_boolean<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>, arg1: i32, arg2: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/autofill/AutofillManager", java.flags == PUBLIC, .name == "notifyViewVisibilityChanged", .descriptor == "(Landroid/view/View;IZ)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/autofill/AutofillManager\0", "notifyViewVisibilityChanged\0", "(Landroid/view/View;IZ)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [notifyViewEntered](https://developer.android.com/reference/android/view/autofill/AutofillManager.html#notifyViewEntered(android.view.View,%20int,%20android.graphics.Rect))
        ///
        /// Required features: "android-graphics-Rect", "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-graphics-Rect", feature = "android-view-View")))]
        pub fn notifyViewEntered_View_int_Rect<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::Rect>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/autofill/AutofillManager", java.flags == PUBLIC, .name == "notifyViewEntered", .descriptor == "(Landroid/view/View;ILandroid/graphics/Rect;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/autofill/AutofillManager\0", "notifyViewEntered\0", "(Landroid/view/View;ILandroid/graphics/Rect;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [notifyViewExited](https://developer.android.com/reference/android/view/autofill/AutofillManager.html#notifyViewExited(android.view.View,%20int))
        ///
        /// Required features: "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-view-View")))]
        pub fn notifyViewExited_View_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/autofill/AutofillManager", java.flags == PUBLIC, .name == "notifyViewExited", .descriptor == "(Landroid/view/View;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/autofill/AutofillManager\0", "notifyViewExited\0", "(Landroid/view/View;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [notifyValueChanged](https://developer.android.com/reference/android/view/autofill/AutofillManager.html#notifyValueChanged(android.view.View))
        ///
        /// Required features: "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-view-View")))]
        pub fn notifyValueChanged_View<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/autofill/AutofillManager", java.flags == PUBLIC, .name == "notifyValueChanged", .descriptor == "(Landroid/view/View;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/autofill/AutofillManager\0", "notifyValueChanged\0", "(Landroid/view/View;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [notifyValueChanged](https://developer.android.com/reference/android/view/autofill/AutofillManager.html#notifyValueChanged(android.view.View,%20int,%20android.view.autofill.AutofillValue))
        ///
        /// Required features: "android-view-View", "android-view-autofill-AutofillValue"
        #[cfg(any(feature = "all", all(feature = "android-view-View", feature = "android-view-autofill-AutofillValue")))]
        pub fn notifyValueChanged_View_int_AutofillValue<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>, arg1: i32, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::autofill::AutofillValue>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/autofill/AutofillManager", java.flags == PUBLIC, .name == "notifyValueChanged", .descriptor == "(Landroid/view/View;ILandroid/view/autofill/AutofillValue;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/autofill/AutofillManager\0", "notifyValueChanged\0", "(Landroid/view/View;ILandroid/view/autofill/AutofillValue;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [notifyViewClicked](https://developer.android.com/reference/android/view/autofill/AutofillManager.html#notifyViewClicked(android.view.View))
        ///
        /// Required features: "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-view-View")))]
        pub fn notifyViewClicked_View<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/autofill/AutofillManager", java.flags == PUBLIC, .name == "notifyViewClicked", .descriptor == "(Landroid/view/View;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/autofill/AutofillManager\0", "notifyViewClicked\0", "(Landroid/view/View;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [notifyViewClicked](https://developer.android.com/reference/android/view/autofill/AutofillManager.html#notifyViewClicked(android.view.View,%20int))
        ///
        /// Required features: "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-view-View")))]
        pub fn notifyViewClicked_View_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/autofill/AutofillManager", java.flags == PUBLIC, .name == "notifyViewClicked", .descriptor == "(Landroid/view/View;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/autofill/AutofillManager\0", "notifyViewClicked\0", "(Landroid/view/View;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [commit](https://developer.android.com/reference/android/view/autofill/AutofillManager.html#commit())
        pub fn commit<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/autofill/AutofillManager", java.flags == PUBLIC, .name == "commit", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/autofill/AutofillManager\0", "commit\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [cancel](https://developer.android.com/reference/android/view/autofill/AutofillManager.html#cancel())
        pub fn cancel<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/autofill/AutofillManager", java.flags == PUBLIC, .name == "cancel", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/autofill/AutofillManager\0", "cancel\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [disableAutofillServices](https://developer.android.com/reference/android/view/autofill/AutofillManager.html#disableAutofillServices())
        pub fn disableAutofillServices<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/autofill/AutofillManager", java.flags == PUBLIC, .name == "disableAutofillServices", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/autofill/AutofillManager\0", "disableAutofillServices\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasEnabledAutofillServices](https://developer.android.com/reference/android/view/autofill/AutofillManager.html#hasEnabledAutofillServices())
        pub fn hasEnabledAutofillServices<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/autofill/AutofillManager", java.flags == PUBLIC, .name == "hasEnabledAutofillServices", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/autofill/AutofillManager\0", "hasEnabledAutofillServices\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAutofillServiceComponentName](https://developer.android.com/reference/android/view/autofill/AutofillManager.html#getAutofillServiceComponentName())
        ///
        /// Required features: "android-content-ComponentName"
        #[cfg(any(feature = "all", all(feature = "android-content-ComponentName")))]
        pub fn getAutofillServiceComponentName<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::ComponentName>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/autofill/AutofillManager", java.flags == PUBLIC, .name == "getAutofillServiceComponentName", .descriptor == "()Landroid/content/ComponentName;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/autofill/AutofillManager\0", "getAutofillServiceComponentName\0", "()Landroid/content/ComponentName;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getUserDataId](https://developer.android.com/reference/android/view/autofill/AutofillManager.html#getUserDataId())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getUserDataId<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/autofill/AutofillManager", java.flags == PUBLIC, .name == "getUserDataId", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/autofill/AutofillManager\0", "getUserDataId\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getUserData](https://developer.android.com/reference/android/view/autofill/AutofillManager.html#getUserData())
        ///
        /// Required features: "android-service-autofill-UserData"
        #[cfg(any(feature = "all", all(feature = "android-service-autofill-UserData")))]
        pub fn getUserData<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::service::autofill::UserData>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/autofill/AutofillManager", java.flags == PUBLIC, .name == "getUserData", .descriptor == "()Landroid/service/autofill/UserData;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/autofill/AutofillManager\0", "getUserData\0", "()Landroid/service/autofill/UserData;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setUserData](https://developer.android.com/reference/android/view/autofill/AutofillManager.html#setUserData(android.service.autofill.UserData))
        ///
        /// Required features: "android-service-autofill-UserData"
        #[cfg(any(feature = "all", all(feature = "android-service-autofill-UserData")))]
        pub fn setUserData<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::service::autofill::UserData>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/autofill/AutofillManager", java.flags == PUBLIC, .name == "setUserData", .descriptor == "(Landroid/service/autofill/UserData;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/autofill/AutofillManager\0", "setUserData\0", "(Landroid/service/autofill/UserData;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isFieldClassificationEnabled](https://developer.android.com/reference/android/view/autofill/AutofillManager.html#isFieldClassificationEnabled())
        pub fn isFieldClassificationEnabled<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/autofill/AutofillManager", java.flags == PUBLIC, .name == "isFieldClassificationEnabled", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/autofill/AutofillManager\0", "isFieldClassificationEnabled\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getDefaultFieldClassificationAlgorithm](https://developer.android.com/reference/android/view/autofill/AutofillManager.html#getDefaultFieldClassificationAlgorithm())
        ///
        /// Required features: "java-lang-String"
        #[cfg(any(feature = "all", all(feature = "java-lang-String")))]
        pub fn getDefaultFieldClassificationAlgorithm<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::String>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/autofill/AutofillManager", java.flags == PUBLIC, .name == "getDefaultFieldClassificationAlgorithm", .descriptor == "()Ljava/lang/String;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/autofill/AutofillManager\0", "getDefaultFieldClassificationAlgorithm\0", "()Ljava/lang/String;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAvailableFieldClassificationAlgorithms](https://developer.android.com/reference/android/view/autofill/AutofillManager.html#getAvailableFieldClassificationAlgorithms())
        ///
        /// Required features: "java-util-List"
        #[cfg(any(feature = "all", all(feature = "java-util-List")))]
        pub fn getAvailableFieldClassificationAlgorithms<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::util::List>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/autofill/AutofillManager", java.flags == PUBLIC, .name == "getAvailableFieldClassificationAlgorithms", .descriptor == "()Ljava/util/List;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/autofill/AutofillManager\0", "getAvailableFieldClassificationAlgorithms\0", "()Ljava/util/List;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isAutofillSupported](https://developer.android.com/reference/android/view/autofill/AutofillManager.html#isAutofillSupported())
        pub fn isAutofillSupported<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/autofill/AutofillManager", java.flags == PUBLIC, .name == "isAutofillSupported", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/autofill/AutofillManager\0", "isAutofillSupported\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNextAutofillId](https://developer.android.com/reference/android/view/autofill/AutofillManager.html#getNextAutofillId())
        ///
        /// Required features: "android-view-autofill-AutofillId"
        #[cfg(any(feature = "all", all(feature = "android-view-autofill-AutofillId")))]
        pub fn getNextAutofillId<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::autofill::AutofillId>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/autofill/AutofillManager", java.flags == PUBLIC, .name == "getNextAutofillId", .descriptor == "()Landroid/view/autofill/AutofillId;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/autofill/AutofillManager\0", "getNextAutofillId\0", "()Landroid/view/autofill/AutofillId;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [registerCallback](https://developer.android.com/reference/android/view/autofill/AutofillManager.html#registerCallback(android.view.autofill.AutofillManager.AutofillCallback))
        ///
        /// Required features: "android-view-autofill-AutofillManager_AutofillCallback"
        #[cfg(any(feature = "all", all(feature = "android-view-autofill-AutofillManager_AutofillCallback")))]
        pub fn registerCallback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::autofill::AutofillManager_AutofillCallback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/autofill/AutofillManager", java.flags == PUBLIC, .name == "registerCallback", .descriptor == "(Landroid/view/autofill/AutofillManager$AutofillCallback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/autofill/AutofillManager\0", "registerCallback\0", "(Landroid/view/autofill/AutofillManager$AutofillCallback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [unregisterCallback](https://developer.android.com/reference/android/view/autofill/AutofillManager.html#unregisterCallback(android.view.autofill.AutofillManager.AutofillCallback))
        ///
        /// Required features: "android-view-autofill-AutofillManager_AutofillCallback"
        #[cfg(any(feature = "all", all(feature = "android-view-autofill-AutofillManager_AutofillCallback")))]
        pub fn unregisterCallback<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::autofill::AutofillManager_AutofillCallback>>) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/autofill/AutofillManager", java.flags == PUBLIC, .name == "unregisterCallback", .descriptor == "(Landroid/view/autofill/AutofillManager$AutofillCallback;)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/autofill/AutofillManager\0", "unregisterCallback\0", "(Landroid/view/autofill/AutofillManager$AutofillCallback;)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [EXTRA_ASSIST_STRUCTURE](https://developer.android.com/reference/android/view/autofill/AutofillManager.html#EXTRA_ASSIST_STRUCTURE)
        pub const EXTRA_ASSIST_STRUCTURE : &'static str = "android.view.autofill.extra.ASSIST_STRUCTURE";

        /// public static final [EXTRA_AUTHENTICATION_RESULT](https://developer.android.com/reference/android/view/autofill/AutofillManager.html#EXTRA_AUTHENTICATION_RESULT)
        pub const EXTRA_AUTHENTICATION_RESULT : &'static str = "android.view.autofill.extra.AUTHENTICATION_RESULT";

        /// public static final [EXTRA_CLIENT_STATE](https://developer.android.com/reference/android/view/autofill/AutofillManager.html#EXTRA_CLIENT_STATE)
        pub const EXTRA_CLIENT_STATE : &'static str = "android.view.autofill.extra.CLIENT_STATE";
    }
}
