// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-view-textservice-SpellCheckerSession"))]
__jni_bindgen! {
    /// public class [SpellCheckerSession](https://developer.android.com/reference/android/view/textservice/SpellCheckerSession.html)
    ///
    /// Required feature: android-view-textservice-SpellCheckerSession
    public class SpellCheckerSession ("android/view/textservice/SpellCheckerSession") extends crate::java::lang::Object {

        // // Not emitting: Non-public method
        // /// [SpellCheckerSession](https://developer.android.com/reference/android/view/textservice/SpellCheckerSession.html#SpellCheckerSession(android.view.textservice.SpellCheckerInfo,%20android.view.textservice.TextServicesManager,%20android.view.textservice.SpellCheckerSession.SpellCheckerSessionListener))
        // ///
        // /// Required features: "android-view-textservice-SpellCheckerInfo", "android-view-textservice-SpellCheckerSession_SpellCheckerSessionListener", "android-view-textservice-TextServicesManager"
        // #[cfg(any(feature = "all", all(feature = "android-view-textservice-SpellCheckerInfo", feature = "android-view-textservice-SpellCheckerSession_SpellCheckerSessionListener", feature = "android-view-textservice-TextServicesManager")))]
        // fn new<'env>(__jni_env: &'env __jni_bindgen::Env, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::textservice::SpellCheckerInfo>>, arg1: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::textservice::TextServicesManager>>, arg2: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::textservice::SpellCheckerSession_SpellCheckerSessionListener>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::Local<'env, crate::android::view::textservice::SpellCheckerSession>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/textservice/SpellCheckerSession", java.flags == (empty), .name == "<init>", .descriptor == "(Landroid/view/textservice/SpellCheckerInfo;Landroid/view/textservice/TextServicesManager;Landroid/view/textservice/SpellCheckerSession$SpellCheckerSessionListener;)V"
        //     unsafe {
        //         let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1.into()), __jni_bindgen::AsJValue::as_jvalue(&arg2.into())];
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/textservice/SpellCheckerSession\0", "<init>\0", "(Landroid/view/textservice/SpellCheckerInfo;Landroid/view/textservice/TextServicesManager;Landroid/view/textservice/SpellCheckerSession$SpellCheckerSessionListener;)V\0");
        //         __jni_env.new_object_a(__jni_class, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// [isSessionDisconnected](https://developer.android.com/reference/android/view/textservice/SpellCheckerSession.html#isSessionDisconnected())
        pub fn isSessionDisconnected<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/textservice/SpellCheckerSession", java.flags == PUBLIC, .name == "isSessionDisconnected", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/textservice/SpellCheckerSession\0", "isSessionDisconnected\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSpellChecker](https://developer.android.com/reference/android/view/textservice/SpellCheckerSession.html#getSpellChecker())
        ///
        /// Required features: "android-view-textservice-SpellCheckerInfo"
        #[cfg(any(feature = "all", all(feature = "android-view-textservice-SpellCheckerInfo")))]
        pub fn getSpellChecker<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::textservice::SpellCheckerInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/textservice/SpellCheckerSession", java.flags == PUBLIC, .name == "getSpellChecker", .descriptor == "()Landroid/view/textservice/SpellCheckerInfo;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/textservice/SpellCheckerSession\0", "getSpellChecker\0", "()Landroid/view/textservice/SpellCheckerInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [cancel](https://developer.android.com/reference/android/view/textservice/SpellCheckerSession.html#cancel())
        pub fn cancel<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/textservice/SpellCheckerSession", java.flags == PUBLIC, .name == "cancel", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/textservice/SpellCheckerSession\0", "cancel\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [close](https://developer.android.com/reference/android/view/textservice/SpellCheckerSession.html#close())
        pub fn close<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/textservice/SpellCheckerSession", java.flags == PUBLIC, .name == "close", .descriptor == "()V"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/textservice/SpellCheckerSession\0", "close\0", "()V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSentenceSuggestions](https://developer.android.com/reference/android/view/textservice/SpellCheckerSession.html#getSentenceSuggestions(android.view.textservice.TextInfo%5B%5D,%20int))
        ///
        /// Required features: "android-view-textservice-TextInfo"
        #[cfg(any(feature = "all", all(feature = "android-view-textservice-TextInfo")))]
        pub fn getSentenceSuggestions<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::android::view::textservice::TextInfo, crate::java::lang::Throwable>>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/textservice/SpellCheckerSession", java.flags == PUBLIC, .name == "getSentenceSuggestions", .descriptor == "([Landroid/view/textservice/TextInfo;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/textservice/SpellCheckerSession\0", "getSentenceSuggestions\0", "([Landroid/view/textservice/TextInfo;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSuggestions](https://developer.android.com/reference/android/view/textservice/SpellCheckerSession.html#getSuggestions(android.view.textservice.TextInfo,%20int))
        ///
        /// Required features: "android-view-textservice-TextInfo"
        #[cfg(any(feature = "all", all(feature = "android-view-textservice-TextInfo")))]
        #[deprecated] pub fn getSuggestions_TextInfo_int<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::textservice::TextInfo>>, arg1: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/textservice/SpellCheckerSession", java.flags == PUBLIC, .name == "getSuggestions", .descriptor == "(Landroid/view/textservice/TextInfo;I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/textservice/SpellCheckerSession\0", "getSuggestions\0", "(Landroid/view/textservice/TextInfo;I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSuggestions](https://developer.android.com/reference/android/view/textservice/SpellCheckerSession.html#getSuggestions(android.view.textservice.TextInfo%5B%5D,%20int,%20boolean))
        ///
        /// Required features: "android-view-textservice-TextInfo"
        #[cfg(any(feature = "all", all(feature = "android-view-textservice-TextInfo")))]
        #[deprecated] pub fn getSuggestions_TextInfo_array_int_boolean<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env __jni_bindgen::ObjectArray<crate::android::view::textservice::TextInfo, crate::java::lang::Throwable>>>, arg1: i32, arg2: bool) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/textservice/SpellCheckerSession", java.flags == PUBLIC, .name == "getSuggestions", .descriptor == "([Landroid/view/textservice/TextInfo;IZ)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into()), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/textservice/SpellCheckerSession\0", "getSuggestions\0", "([Landroid/view/textservice/TextInfo;IZ)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        // // Not emitting: Non-public method
        // /// [finalize](https://developer.android.com/reference/android/view/textservice/SpellCheckerSession.html#finalize())
        // fn finalize<'env>(&'env self) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
        //     // class.path == "android/view/textservice/SpellCheckerSession", java.flags == PROTECTED, .name == "finalize", .descriptor == "()V"
        //     unsafe {
        //         let __jni_args = [];
        //         let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
        //         let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/textservice/SpellCheckerSession\0", "finalize\0", "()V\0");
        //         __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
        //     }
        // }

        /// public static final [SERVICE_META_DATA](https://developer.android.com/reference/android/view/textservice/SpellCheckerSession.html#SERVICE_META_DATA)
        pub const SERVICE_META_DATA : &'static str = "android.view.textservice.scs";
    }
}
