// WARNING:  This file was autogenerated by jni-bindgen.  Any changes to this file may be lost!!!


#[cfg(any(feature = "all", feature = "android-view-MenuItem"))]
__jni_bindgen! {
    /// public interface [MenuItem](https://developer.android.com/reference/android/view/MenuItem.html)
    ///
    /// Required feature: android-view-MenuItem
    public interface MenuItem ("android/view/MenuItem") extends crate::java::lang::Object {

        /// [getItemId](https://developer.android.com/reference/android/view/MenuItem.html#getItemId())
        pub fn getItemId<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/MenuItem", java.flags == PUBLIC | ABSTRACT, .name == "getItemId", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/MenuItem\0", "getItemId\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getGroupId](https://developer.android.com/reference/android/view/MenuItem.html#getGroupId())
        pub fn getGroupId<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/MenuItem", java.flags == PUBLIC | ABSTRACT, .name == "getGroupId", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/MenuItem\0", "getGroupId\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getOrder](https://developer.android.com/reference/android/view/MenuItem.html#getOrder())
        pub fn getOrder<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/MenuItem", java.flags == PUBLIC | ABSTRACT, .name == "getOrder", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/MenuItem\0", "getOrder\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTitle](https://developer.android.com/reference/android/view/MenuItem.html#setTitle(java.lang.CharSequence))
        ///
        /// Required features: "android-view-MenuItem", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-view-MenuItem", feature = "java-lang-CharSequence")))]
        pub fn setTitle_CharSequence<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::MenuItem>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/MenuItem", java.flags == PUBLIC | ABSTRACT, .name == "setTitle", .descriptor == "(Ljava/lang/CharSequence;)Landroid/view/MenuItem;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/MenuItem\0", "setTitle\0", "(Ljava/lang/CharSequence;)Landroid/view/MenuItem;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTitle](https://developer.android.com/reference/android/view/MenuItem.html#setTitle(int))
        ///
        /// Required features: "android-view-MenuItem"
        #[cfg(any(feature = "all", all(feature = "android-view-MenuItem")))]
        pub fn setTitle_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::MenuItem>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/MenuItem", java.flags == PUBLIC | ABSTRACT, .name == "setTitle", .descriptor == "(I)Landroid/view/MenuItem;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/MenuItem\0", "setTitle\0", "(I)Landroid/view/MenuItem;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTitle](https://developer.android.com/reference/android/view/MenuItem.html#getTitle())
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn getTitle<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::CharSequence>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/MenuItem", java.flags == PUBLIC | ABSTRACT, .name == "getTitle", .descriptor == "()Ljava/lang/CharSequence;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/MenuItem\0", "getTitle\0", "()Ljava/lang/CharSequence;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTitleCondensed](https://developer.android.com/reference/android/view/MenuItem.html#setTitleCondensed(java.lang.CharSequence))
        ///
        /// Required features: "android-view-MenuItem", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-view-MenuItem", feature = "java-lang-CharSequence")))]
        pub fn setTitleCondensed<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::MenuItem>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/MenuItem", java.flags == PUBLIC | ABSTRACT, .name == "setTitleCondensed", .descriptor == "(Ljava/lang/CharSequence;)Landroid/view/MenuItem;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/MenuItem\0", "setTitleCondensed\0", "(Ljava/lang/CharSequence;)Landroid/view/MenuItem;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTitleCondensed](https://developer.android.com/reference/android/view/MenuItem.html#getTitleCondensed())
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn getTitleCondensed<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::CharSequence>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/MenuItem", java.flags == PUBLIC | ABSTRACT, .name == "getTitleCondensed", .descriptor == "()Ljava/lang/CharSequence;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/MenuItem\0", "getTitleCondensed\0", "()Ljava/lang/CharSequence;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setIcon](https://developer.android.com/reference/android/view/MenuItem.html#setIcon(android.graphics.drawable.Drawable))
        ///
        /// Required features: "android-graphics-drawable-Drawable", "android-view-MenuItem"
        #[cfg(any(feature = "all", all(feature = "android-graphics-drawable-Drawable", feature = "android-view-MenuItem")))]
        pub fn setIcon_Drawable<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::drawable::Drawable>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::MenuItem>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/MenuItem", java.flags == PUBLIC | ABSTRACT, .name == "setIcon", .descriptor == "(Landroid/graphics/drawable/Drawable;)Landroid/view/MenuItem;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/MenuItem\0", "setIcon\0", "(Landroid/graphics/drawable/Drawable;)Landroid/view/MenuItem;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setIcon](https://developer.android.com/reference/android/view/MenuItem.html#setIcon(int))
        ///
        /// Required features: "android-view-MenuItem"
        #[cfg(any(feature = "all", all(feature = "android-view-MenuItem")))]
        pub fn setIcon_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::MenuItem>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/MenuItem", java.flags == PUBLIC | ABSTRACT, .name == "setIcon", .descriptor == "(I)Landroid/view/MenuItem;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/MenuItem\0", "setIcon\0", "(I)Landroid/view/MenuItem;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getIcon](https://developer.android.com/reference/android/view/MenuItem.html#getIcon())
        ///
        /// Required features: "android-graphics-drawable-Drawable"
        #[cfg(any(feature = "all", all(feature = "android-graphics-drawable-Drawable")))]
        pub fn getIcon<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::drawable::Drawable>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/MenuItem", java.flags == PUBLIC | ABSTRACT, .name == "getIcon", .descriptor == "()Landroid/graphics/drawable/Drawable;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/MenuItem\0", "getIcon\0", "()Landroid/graphics/drawable/Drawable;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setIconTintList](https://developer.android.com/reference/android/view/MenuItem.html#setIconTintList(android.content.res.ColorStateList))
        ///
        /// Required features: "android-content-res-ColorStateList", "android-view-MenuItem"
        #[cfg(any(feature = "all", all(feature = "android-content-res-ColorStateList", feature = "android-view-MenuItem")))]
        pub fn setIconTintList<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::res::ColorStateList>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::MenuItem>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/MenuItem", java.flags == PUBLIC, .name == "setIconTintList", .descriptor == "(Landroid/content/res/ColorStateList;)Landroid/view/MenuItem;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/MenuItem\0", "setIconTintList\0", "(Landroid/content/res/ColorStateList;)Landroid/view/MenuItem;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getIconTintList](https://developer.android.com/reference/android/view/MenuItem.html#getIconTintList())
        ///
        /// Required features: "android-content-res-ColorStateList"
        #[cfg(any(feature = "all", all(feature = "android-content-res-ColorStateList")))]
        pub fn getIconTintList<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::res::ColorStateList>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/MenuItem", java.flags == PUBLIC, .name == "getIconTintList", .descriptor == "()Landroid/content/res/ColorStateList;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/MenuItem\0", "getIconTintList\0", "()Landroid/content/res/ColorStateList;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setIconTintMode](https://developer.android.com/reference/android/view/MenuItem.html#setIconTintMode(android.graphics.PorterDuff.Mode))
        ///
        /// Required features: "android-graphics-PorterDuff_Mode", "android-view-MenuItem"
        #[cfg(any(feature = "all", all(feature = "android-graphics-PorterDuff_Mode", feature = "android-view-MenuItem")))]
        pub fn setIconTintMode<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::PorterDuff_Mode>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::MenuItem>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/MenuItem", java.flags == PUBLIC, .name == "setIconTintMode", .descriptor == "(Landroid/graphics/PorterDuff$Mode;)Landroid/view/MenuItem;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/MenuItem\0", "setIconTintMode\0", "(Landroid/graphics/PorterDuff$Mode;)Landroid/view/MenuItem;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setIconTintBlendMode](https://developer.android.com/reference/android/view/MenuItem.html#setIconTintBlendMode(android.graphics.BlendMode))
        ///
        /// Required features: "android-graphics-BlendMode", "android-view-MenuItem"
        #[cfg(any(feature = "all", all(feature = "android-graphics-BlendMode", feature = "android-view-MenuItem")))]
        pub fn setIconTintBlendMode<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::graphics::BlendMode>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::MenuItem>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/MenuItem", java.flags == PUBLIC, .name == "setIconTintBlendMode", .descriptor == "(Landroid/graphics/BlendMode;)Landroid/view/MenuItem;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/MenuItem\0", "setIconTintBlendMode\0", "(Landroid/graphics/BlendMode;)Landroid/view/MenuItem;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getIconTintMode](https://developer.android.com/reference/android/view/MenuItem.html#getIconTintMode())
        ///
        /// Required features: "android-graphics-PorterDuff_Mode"
        #[cfg(any(feature = "all", all(feature = "android-graphics-PorterDuff_Mode")))]
        pub fn getIconTintMode<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::PorterDuff_Mode>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/MenuItem", java.flags == PUBLIC, .name == "getIconTintMode", .descriptor == "()Landroid/graphics/PorterDuff$Mode;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/MenuItem\0", "getIconTintMode\0", "()Landroid/graphics/PorterDuff$Mode;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getIconTintBlendMode](https://developer.android.com/reference/android/view/MenuItem.html#getIconTintBlendMode())
        ///
        /// Required features: "android-graphics-BlendMode"
        #[cfg(any(feature = "all", all(feature = "android-graphics-BlendMode")))]
        pub fn getIconTintBlendMode<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::graphics::BlendMode>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/MenuItem", java.flags == PUBLIC, .name == "getIconTintBlendMode", .descriptor == "()Landroid/graphics/BlendMode;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/MenuItem\0", "getIconTintBlendMode\0", "()Landroid/graphics/BlendMode;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setIntent](https://developer.android.com/reference/android/view/MenuItem.html#setIntent(android.content.Intent))
        ///
        /// Required features: "android-content-Intent", "android-view-MenuItem"
        #[cfg(any(feature = "all", all(feature = "android-content-Intent", feature = "android-view-MenuItem")))]
        pub fn setIntent<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::content::Intent>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::MenuItem>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/MenuItem", java.flags == PUBLIC | ABSTRACT, .name == "setIntent", .descriptor == "(Landroid/content/Intent;)Landroid/view/MenuItem;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/MenuItem\0", "setIntent\0", "(Landroid/content/Intent;)Landroid/view/MenuItem;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getIntent](https://developer.android.com/reference/android/view/MenuItem.html#getIntent())
        ///
        /// Required features: "android-content-Intent"
        #[cfg(any(feature = "all", all(feature = "android-content-Intent")))]
        pub fn getIntent<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::content::Intent>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/MenuItem", java.flags == PUBLIC | ABSTRACT, .name == "getIntent", .descriptor == "()Landroid/content/Intent;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/MenuItem\0", "getIntent\0", "()Landroid/content/Intent;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setShortcut](https://developer.android.com/reference/android/view/MenuItem.html#setShortcut(char,%20char))
        ///
        /// Required features: "android-view-MenuItem"
        #[cfg(any(feature = "all", all(feature = "android-view-MenuItem")))]
        pub fn setShortcut_char_char<'env>(&'env self, arg0: __jni_bindgen::jchar, arg1: __jni_bindgen::jchar) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::MenuItem>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/MenuItem", java.flags == PUBLIC | ABSTRACT, .name == "setShortcut", .descriptor == "(CC)Landroid/view/MenuItem;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/MenuItem\0", "setShortcut\0", "(CC)Landroid/view/MenuItem;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setShortcut](https://developer.android.com/reference/android/view/MenuItem.html#setShortcut(char,%20char,%20int,%20int))
        ///
        /// Required features: "android-view-MenuItem"
        #[cfg(any(feature = "all", all(feature = "android-view-MenuItem")))]
        pub fn setShortcut_char_char_int_int<'env>(&'env self, arg0: __jni_bindgen::jchar, arg1: __jni_bindgen::jchar, arg2: i32, arg3: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::MenuItem>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/MenuItem", java.flags == PUBLIC, .name == "setShortcut", .descriptor == "(CCII)Landroid/view/MenuItem;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1), __jni_bindgen::AsJValue::as_jvalue(&arg2), __jni_bindgen::AsJValue::as_jvalue(&arg3)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/MenuItem\0", "setShortcut\0", "(CCII)Landroid/view/MenuItem;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setNumericShortcut](https://developer.android.com/reference/android/view/MenuItem.html#setNumericShortcut(char))
        ///
        /// Required features: "android-view-MenuItem"
        #[cfg(any(feature = "all", all(feature = "android-view-MenuItem")))]
        pub fn setNumericShortcut_char<'env>(&'env self, arg0: __jni_bindgen::jchar) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::MenuItem>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/MenuItem", java.flags == PUBLIC | ABSTRACT, .name == "setNumericShortcut", .descriptor == "(C)Landroid/view/MenuItem;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/MenuItem\0", "setNumericShortcut\0", "(C)Landroid/view/MenuItem;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setNumericShortcut](https://developer.android.com/reference/android/view/MenuItem.html#setNumericShortcut(char,%20int))
        ///
        /// Required features: "android-view-MenuItem"
        #[cfg(any(feature = "all", all(feature = "android-view-MenuItem")))]
        pub fn setNumericShortcut_char_int<'env>(&'env self, arg0: __jni_bindgen::jchar, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::MenuItem>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/MenuItem", java.flags == PUBLIC, .name == "setNumericShortcut", .descriptor == "(CI)Landroid/view/MenuItem;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/MenuItem\0", "setNumericShortcut\0", "(CI)Landroid/view/MenuItem;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNumericShortcut](https://developer.android.com/reference/android/view/MenuItem.html#getNumericShortcut())
        pub fn getNumericShortcut<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::jchar, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/MenuItem", java.flags == PUBLIC | ABSTRACT, .name == "getNumericShortcut", .descriptor == "()C"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/MenuItem\0", "getNumericShortcut\0", "()C\0");
                __jni_env.call_char_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getNumericModifiers](https://developer.android.com/reference/android/view/MenuItem.html#getNumericModifiers())
        pub fn getNumericModifiers<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/MenuItem", java.flags == PUBLIC, .name == "getNumericModifiers", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/MenuItem\0", "getNumericModifiers\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAlphabeticShortcut](https://developer.android.com/reference/android/view/MenuItem.html#setAlphabeticShortcut(char))
        ///
        /// Required features: "android-view-MenuItem"
        #[cfg(any(feature = "all", all(feature = "android-view-MenuItem")))]
        pub fn setAlphabeticShortcut_char<'env>(&'env self, arg0: __jni_bindgen::jchar) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::MenuItem>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/MenuItem", java.flags == PUBLIC | ABSTRACT, .name == "setAlphabeticShortcut", .descriptor == "(C)Landroid/view/MenuItem;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/MenuItem\0", "setAlphabeticShortcut\0", "(C)Landroid/view/MenuItem;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setAlphabeticShortcut](https://developer.android.com/reference/android/view/MenuItem.html#setAlphabeticShortcut(char,%20int))
        ///
        /// Required features: "android-view-MenuItem"
        #[cfg(any(feature = "all", all(feature = "android-view-MenuItem")))]
        pub fn setAlphabeticShortcut_char_int<'env>(&'env self, arg0: __jni_bindgen::jchar, arg1: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::MenuItem>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/MenuItem", java.flags == PUBLIC, .name == "setAlphabeticShortcut", .descriptor == "(CI)Landroid/view/MenuItem;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0), __jni_bindgen::AsJValue::as_jvalue(&arg1)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/MenuItem\0", "setAlphabeticShortcut\0", "(CI)Landroid/view/MenuItem;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAlphabeticShortcut](https://developer.android.com/reference/android/view/MenuItem.html#getAlphabeticShortcut())
        pub fn getAlphabeticShortcut<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::jchar, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/MenuItem", java.flags == PUBLIC | ABSTRACT, .name == "getAlphabeticShortcut", .descriptor == "()C"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/MenuItem\0", "getAlphabeticShortcut\0", "()C\0");
                __jni_env.call_char_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getAlphabeticModifiers](https://developer.android.com/reference/android/view/MenuItem.html#getAlphabeticModifiers())
        pub fn getAlphabeticModifiers<'env>(&'env self) -> __jni_bindgen::std::result::Result<i32, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/MenuItem", java.flags == PUBLIC, .name == "getAlphabeticModifiers", .descriptor == "()I"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/MenuItem\0", "getAlphabeticModifiers\0", "()I\0");
                __jni_env.call_int_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setCheckable](https://developer.android.com/reference/android/view/MenuItem.html#setCheckable(boolean))
        ///
        /// Required features: "android-view-MenuItem"
        #[cfg(any(feature = "all", all(feature = "android-view-MenuItem")))]
        pub fn setCheckable<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::MenuItem>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/MenuItem", java.flags == PUBLIC | ABSTRACT, .name == "setCheckable", .descriptor == "(Z)Landroid/view/MenuItem;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/MenuItem\0", "setCheckable\0", "(Z)Landroid/view/MenuItem;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isCheckable](https://developer.android.com/reference/android/view/MenuItem.html#isCheckable())
        pub fn isCheckable<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/MenuItem", java.flags == PUBLIC | ABSTRACT, .name == "isCheckable", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/MenuItem\0", "isCheckable\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setChecked](https://developer.android.com/reference/android/view/MenuItem.html#setChecked(boolean))
        ///
        /// Required features: "android-view-MenuItem"
        #[cfg(any(feature = "all", all(feature = "android-view-MenuItem")))]
        pub fn setChecked<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::MenuItem>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/MenuItem", java.flags == PUBLIC | ABSTRACT, .name == "setChecked", .descriptor == "(Z)Landroid/view/MenuItem;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/MenuItem\0", "setChecked\0", "(Z)Landroid/view/MenuItem;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isChecked](https://developer.android.com/reference/android/view/MenuItem.html#isChecked())
        pub fn isChecked<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/MenuItem", java.flags == PUBLIC | ABSTRACT, .name == "isChecked", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/MenuItem\0", "isChecked\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setVisible](https://developer.android.com/reference/android/view/MenuItem.html#setVisible(boolean))
        ///
        /// Required features: "android-view-MenuItem"
        #[cfg(any(feature = "all", all(feature = "android-view-MenuItem")))]
        pub fn setVisible<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::MenuItem>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/MenuItem", java.flags == PUBLIC | ABSTRACT, .name == "setVisible", .descriptor == "(Z)Landroid/view/MenuItem;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/MenuItem\0", "setVisible\0", "(Z)Landroid/view/MenuItem;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isVisible](https://developer.android.com/reference/android/view/MenuItem.html#isVisible())
        pub fn isVisible<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/MenuItem", java.flags == PUBLIC | ABSTRACT, .name == "isVisible", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/MenuItem\0", "isVisible\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setEnabled](https://developer.android.com/reference/android/view/MenuItem.html#setEnabled(boolean))
        ///
        /// Required features: "android-view-MenuItem"
        #[cfg(any(feature = "all", all(feature = "android-view-MenuItem")))]
        pub fn setEnabled<'env>(&'env self, arg0: bool) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::MenuItem>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/MenuItem", java.flags == PUBLIC | ABSTRACT, .name == "setEnabled", .descriptor == "(Z)Landroid/view/MenuItem;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/MenuItem\0", "setEnabled\0", "(Z)Landroid/view/MenuItem;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isEnabled](https://developer.android.com/reference/android/view/MenuItem.html#isEnabled())
        pub fn isEnabled<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/MenuItem", java.flags == PUBLIC | ABSTRACT, .name == "isEnabled", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/MenuItem\0", "isEnabled\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [hasSubMenu](https://developer.android.com/reference/android/view/MenuItem.html#hasSubMenu())
        pub fn hasSubMenu<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/MenuItem", java.flags == PUBLIC | ABSTRACT, .name == "hasSubMenu", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/MenuItem\0", "hasSubMenu\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getSubMenu](https://developer.android.com/reference/android/view/MenuItem.html#getSubMenu())
        ///
        /// Required features: "android-view-SubMenu"
        #[cfg(any(feature = "all", all(feature = "android-view-SubMenu")))]
        pub fn getSubMenu<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::SubMenu>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/MenuItem", java.flags == PUBLIC | ABSTRACT, .name == "getSubMenu", .descriptor == "()Landroid/view/SubMenu;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/MenuItem\0", "getSubMenu\0", "()Landroid/view/SubMenu;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOnMenuItemClickListener](https://developer.android.com/reference/android/view/MenuItem.html#setOnMenuItemClickListener(android.view.MenuItem.OnMenuItemClickListener))
        ///
        /// Required features: "android-view-MenuItem", "android-view-MenuItem_OnMenuItemClickListener"
        #[cfg(any(feature = "all", all(feature = "android-view-MenuItem", feature = "android-view-MenuItem_OnMenuItemClickListener")))]
        pub fn setOnMenuItemClickListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::MenuItem_OnMenuItemClickListener>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::MenuItem>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/MenuItem", java.flags == PUBLIC | ABSTRACT, .name == "setOnMenuItemClickListener", .descriptor == "(Landroid/view/MenuItem$OnMenuItemClickListener;)Landroid/view/MenuItem;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/MenuItem\0", "setOnMenuItemClickListener\0", "(Landroid/view/MenuItem$OnMenuItemClickListener;)Landroid/view/MenuItem;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getMenuInfo](https://developer.android.com/reference/android/view/MenuItem.html#getMenuInfo())
        ///
        /// Required features: "android-view-ContextMenu_ContextMenuInfo"
        #[cfg(any(feature = "all", all(feature = "android-view-ContextMenu_ContextMenuInfo")))]
        pub fn getMenuInfo<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::ContextMenu_ContextMenuInfo>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/MenuItem", java.flags == PUBLIC | ABSTRACT, .name == "getMenuInfo", .descriptor == "()Landroid/view/ContextMenu$ContextMenuInfo;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/MenuItem\0", "getMenuInfo\0", "()Landroid/view/ContextMenu$ContextMenuInfo;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setShowAsAction](https://developer.android.com/reference/android/view/MenuItem.html#setShowAsAction(int))
        pub fn setShowAsAction<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<(), __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/MenuItem", java.flags == PUBLIC | ABSTRACT, .name == "setShowAsAction", .descriptor == "(I)V"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/MenuItem\0", "setShowAsAction\0", "(I)V\0");
                __jni_env.call_void_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setShowAsActionFlags](https://developer.android.com/reference/android/view/MenuItem.html#setShowAsActionFlags(int))
        ///
        /// Required features: "android-view-MenuItem"
        #[cfg(any(feature = "all", all(feature = "android-view-MenuItem")))]
        pub fn setShowAsActionFlags<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::MenuItem>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/MenuItem", java.flags == PUBLIC | ABSTRACT, .name == "setShowAsActionFlags", .descriptor == "(I)Landroid/view/MenuItem;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/MenuItem\0", "setShowAsActionFlags\0", "(I)Landroid/view/MenuItem;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setActionView](https://developer.android.com/reference/android/view/MenuItem.html#setActionView(android.view.View))
        ///
        /// Required features: "android-view-MenuItem", "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-view-MenuItem", feature = "android-view-View")))]
        pub fn setActionView_View<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::View>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::MenuItem>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/MenuItem", java.flags == PUBLIC | ABSTRACT, .name == "setActionView", .descriptor == "(Landroid/view/View;)Landroid/view/MenuItem;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/MenuItem\0", "setActionView\0", "(Landroid/view/View;)Landroid/view/MenuItem;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setActionView](https://developer.android.com/reference/android/view/MenuItem.html#setActionView(int))
        ///
        /// Required features: "android-view-MenuItem"
        #[cfg(any(feature = "all", all(feature = "android-view-MenuItem")))]
        pub fn setActionView_int<'env>(&'env self, arg0: i32) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::MenuItem>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/MenuItem", java.flags == PUBLIC | ABSTRACT, .name == "setActionView", .descriptor == "(I)Landroid/view/MenuItem;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0)];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/MenuItem\0", "setActionView\0", "(I)Landroid/view/MenuItem;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getActionView](https://developer.android.com/reference/android/view/MenuItem.html#getActionView())
        ///
        /// Required features: "android-view-View"
        #[cfg(any(feature = "all", all(feature = "android-view-View")))]
        pub fn getActionView<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::View>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/MenuItem", java.flags == PUBLIC | ABSTRACT, .name == "getActionView", .descriptor == "()Landroid/view/View;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/MenuItem\0", "getActionView\0", "()Landroid/view/View;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setActionProvider](https://developer.android.com/reference/android/view/MenuItem.html#setActionProvider(android.view.ActionProvider))
        ///
        /// Required features: "android-view-ActionProvider", "android-view-MenuItem"
        #[cfg(any(feature = "all", all(feature = "android-view-ActionProvider", feature = "android-view-MenuItem")))]
        pub fn setActionProvider<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::ActionProvider>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::MenuItem>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/MenuItem", java.flags == PUBLIC | ABSTRACT, .name == "setActionProvider", .descriptor == "(Landroid/view/ActionProvider;)Landroid/view/MenuItem;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/MenuItem\0", "setActionProvider\0", "(Landroid/view/ActionProvider;)Landroid/view/MenuItem;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getActionProvider](https://developer.android.com/reference/android/view/MenuItem.html#getActionProvider())
        ///
        /// Required features: "android-view-ActionProvider"
        #[cfg(any(feature = "all", all(feature = "android-view-ActionProvider")))]
        pub fn getActionProvider<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::ActionProvider>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/MenuItem", java.flags == PUBLIC | ABSTRACT, .name == "getActionProvider", .descriptor == "()Landroid/view/ActionProvider;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/MenuItem\0", "getActionProvider\0", "()Landroid/view/ActionProvider;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [expandActionView](https://developer.android.com/reference/android/view/MenuItem.html#expandActionView())
        pub fn expandActionView<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/MenuItem", java.flags == PUBLIC | ABSTRACT, .name == "expandActionView", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/MenuItem\0", "expandActionView\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [collapseActionView](https://developer.android.com/reference/android/view/MenuItem.html#collapseActionView())
        pub fn collapseActionView<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/MenuItem", java.flags == PUBLIC | ABSTRACT, .name == "collapseActionView", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/MenuItem\0", "collapseActionView\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [isActionViewExpanded](https://developer.android.com/reference/android/view/MenuItem.html#isActionViewExpanded())
        pub fn isActionViewExpanded<'env>(&'env self) -> __jni_bindgen::std::result::Result<bool, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/MenuItem", java.flags == PUBLIC | ABSTRACT, .name == "isActionViewExpanded", .descriptor == "()Z"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/MenuItem\0", "isActionViewExpanded\0", "()Z\0");
                __jni_env.call_boolean_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setOnActionExpandListener](https://developer.android.com/reference/android/view/MenuItem.html#setOnActionExpandListener(android.view.MenuItem.OnActionExpandListener))
        ///
        /// Required features: "android-view-MenuItem", "android-view-MenuItem_OnActionExpandListener"
        #[cfg(any(feature = "all", all(feature = "android-view-MenuItem", feature = "android-view-MenuItem_OnActionExpandListener")))]
        pub fn setOnActionExpandListener<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::android::view::MenuItem_OnActionExpandListener>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::MenuItem>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/MenuItem", java.flags == PUBLIC | ABSTRACT, .name == "setOnActionExpandListener", .descriptor == "(Landroid/view/MenuItem$OnActionExpandListener;)Landroid/view/MenuItem;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/MenuItem\0", "setOnActionExpandListener\0", "(Landroid/view/MenuItem$OnActionExpandListener;)Landroid/view/MenuItem;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setContentDescription](https://developer.android.com/reference/android/view/MenuItem.html#setContentDescription(java.lang.CharSequence))
        ///
        /// Required features: "android-view-MenuItem", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-view-MenuItem", feature = "java-lang-CharSequence")))]
        pub fn setContentDescription<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::MenuItem>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/MenuItem", java.flags == PUBLIC, .name == "setContentDescription", .descriptor == "(Ljava/lang/CharSequence;)Landroid/view/MenuItem;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/MenuItem\0", "setContentDescription\0", "(Ljava/lang/CharSequence;)Landroid/view/MenuItem;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getContentDescription](https://developer.android.com/reference/android/view/MenuItem.html#getContentDescription())
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn getContentDescription<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::CharSequence>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/MenuItem", java.flags == PUBLIC, .name == "getContentDescription", .descriptor == "()Ljava/lang/CharSequence;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/MenuItem\0", "getContentDescription\0", "()Ljava/lang/CharSequence;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [setTooltipText](https://developer.android.com/reference/android/view/MenuItem.html#setTooltipText(java.lang.CharSequence))
        ///
        /// Required features: "android-view-MenuItem", "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "android-view-MenuItem", feature = "java-lang-CharSequence")))]
        pub fn setTooltipText<'env>(&'env self, arg0: impl __jni_bindgen::std::convert::Into<__jni_bindgen::std::option::Option<&'env crate::java::lang::CharSequence>>) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::android::view::MenuItem>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/MenuItem", java.flags == PUBLIC, .name == "setTooltipText", .descriptor == "(Ljava/lang/CharSequence;)Landroid/view/MenuItem;"
            unsafe {
                let __jni_args = [__jni_bindgen::AsJValue::as_jvalue(&arg0.into())];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/MenuItem\0", "setTooltipText\0", "(Ljava/lang/CharSequence;)Landroid/view/MenuItem;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// [getTooltipText](https://developer.android.com/reference/android/view/MenuItem.html#getTooltipText())
        ///
        /// Required features: "java-lang-CharSequence"
        #[cfg(any(feature = "all", all(feature = "java-lang-CharSequence")))]
        pub fn getTooltipText<'env>(&'env self) -> __jni_bindgen::std::result::Result<__jni_bindgen::std::option::Option<__jni_bindgen::Local<'env, crate::java::lang::CharSequence>>, __jni_bindgen::Local<'env, crate::java::lang::Throwable>> {
            // class.path == "android/view/MenuItem", java.flags == PUBLIC, .name == "getTooltipText", .descriptor == "()Ljava/lang/CharSequence;"
            unsafe {
                let __jni_args = [];
                let __jni_env = __jni_bindgen::Env::from_ptr(self.0.env);
                let (__jni_class, __jni_method) = __jni_env.require_class_method("android/view/MenuItem\0", "getTooltipText\0", "()Ljava/lang/CharSequence;\0");
                __jni_env.call_object_method_a(self.0.object, __jni_method, __jni_args.as_ptr())
            }
        }

        /// public static final [SHOW_AS_ACTION_ALWAYS](https://developer.android.com/reference/android/view/MenuItem.html#SHOW_AS_ACTION_ALWAYS)
        pub const SHOW_AS_ACTION_ALWAYS : i32 = 2;

        /// public static final [SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW](https://developer.android.com/reference/android/view/MenuItem.html#SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW)
        pub const SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW : i32 = 8;

        /// public static final [SHOW_AS_ACTION_IF_ROOM](https://developer.android.com/reference/android/view/MenuItem.html#SHOW_AS_ACTION_IF_ROOM)
        pub const SHOW_AS_ACTION_IF_ROOM : i32 = 1;

        /// public static final [SHOW_AS_ACTION_NEVER](https://developer.android.com/reference/android/view/MenuItem.html#SHOW_AS_ACTION_NEVER)
        pub const SHOW_AS_ACTION_NEVER : i32 = 0;

        /// public static final [SHOW_AS_ACTION_WITH_TEXT](https://developer.android.com/reference/android/view/MenuItem.html#SHOW_AS_ACTION_WITH_TEXT)
        pub const SHOW_AS_ACTION_WITH_TEXT : i32 = 4;
    }
}
